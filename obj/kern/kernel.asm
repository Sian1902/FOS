
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 e0 18 00 	lgdtl  0x18e018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc df 18 f0       	mov    $0xf018dfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ec bd 2b f0 01 	movl   $0x1,0xf02bbdec
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 6c e5 2d f0       	mov    $0xf02de56c,%edx
f010006a:	b8 06 2f 25 f0       	mov    $0xf0252f06,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 06 2f 25 f0       	push   $0xf0252f06
f010007e:	e8 6b f1 02 00       	call   f012f1ee <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 14 be 2b f0 ff 	movl   $0xffffffff,0xf02bbe14
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 d6 6a 00 00       	call   f0106b75 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 af 66 00 00       	call   f0106753 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 2a 6e 00 00       	call   f0106ed3 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 17 9a 00 00       	call   f0109ac5 <env_init>
	idt_init();
f01000ae:	e8 39 af 00 00       	call   f010afec <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 43 d7 00 00       	call   f010d7fb <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 d9 79 00 00       	call   f0107aa5 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 0c d9 00 00       	call   f010d9e5 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 12 d8 00 00       	call   f010d8f8 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 ed d7 00 00       	call   f010d8e0 <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 0d d8 00 00       	call   f010d910 <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 c2 64 00 00       	call   f01065cd <pic_init>
	sched_init() ;
f010010b:	e8 bf 60 00 00       	call   f01061cf <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 60 05 13 f0       	push   $0xf0130560
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 8c 05 13 f0       	push   $0xf013058c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 b1 05 13 f0       	push   $0xf01305b1
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 b8 05 13 f0       	push   $0xf01305b8
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 00 06 13 f0       	push   $0xf0130600
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 48 06 13 f0       	push   $0xf0130648
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 00 06 13 f0       	push   $0xf0130600
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 b8 05 13 f0       	push   $0xf01305b8
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 8d 06 13 f0       	push   $0xf013068d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 92 06 13 f0       	push   $0xf0130692
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 ab 06 13 f0       	push   $0xf01306ab
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 95 97 00 00       	call   f01099af <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 ad 06 13 f0       	push   $0xf01306ad
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 da 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 92 06 13 f0       	push   $0xf0130692
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 ab 06 13 f0       	push   $0xf01306ab
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 cc 5c 00 00       	call   f0105f90 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 f3 50 00 00       	call   f01053d1 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 33 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 92 06 13 f0       	push   $0xf0130692
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 ab 06 13 f0       	push   $0xf01306ab
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 cb 4e 00 00       	call   f010524b <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 c2 06 13 f0       	push   $0xf01306c2
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 ab 06 13 f0       	push   $0xf01306ab
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 44 2f 25 f0       	mov    %eax,0xf0252f44
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 48 2f 25 f0 b4 	movl   $0x3b4,0xf0252f48
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 48 2f 25 f0 d4 	movl   $0x3d4,0xf0252f48
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 4c 2f 25 f0       	mov    %eax,0xf0252f4c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f0100732:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		text_length = 0;
f010075e:	c7 05 40 2f 25 f0 00 	movl   $0x0,0xf0252f40
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 50 2f 25 f0 	mov    0xf0252f50,%cx
f010076f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 4c 2f 25 f0    	mov    0xf0252f4c,%ecx
f010082a:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 50 2f 25 f0 	mov    %dx,0xf0252f50
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 40 2f 25 f0    	mov    0xf0252f40,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 40 2f 25 f0       	mov    %eax,0xf0252f40
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 7b e9 02 00       	call   f012f21e <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 48 2f 25 f0    	mov    0xf0252f48,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 48 2f 25 f0    	mov    0xf0252f48,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 68 31 25 f0       	mov    %eax,0xf0253168
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 e0 18 f0    	mov    -0xfe71fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 68 31 25 f0       	mov    %eax,0xf0253168
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 68 31 25 f0       	mov    %eax,0xf0253168
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 e0 18 f0    	mov    -0xfe71fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 68 31 25 f0       	mov    %eax,0xf0253168
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 e1 18 f0    	mov    -0xfe71ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 68 31 25 f0       	mov    %eax,0xf0253168

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 e5 18 f0 	mov    -0xfe71ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 40 2f 25 f0    	mov    0xf0252f40,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 40 2f 25 f0       	mov    %eax,0xf0252f40
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 dd 06 13 f0       	push   $0xf01306dd
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 60 31 25 f0    	mov    0xf0253160,%edx
f0100c22:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 60 31 25 f0    	mov    %edx,0xf0253160
f0100c39:	8a 80 60 2f 25 f0    	mov    -0xfdad0a0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 60 31 25 f0 00 	movl   $0x0,0xf0253160
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 60 31 25 f0    	mov    0xf0253160,%edx
f0100d12:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 60 31 25 f0    	mov    %edx,0xf0253160
f0100d29:	8a 80 60 2f 25 f0    	mov    -0xfdad0a0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 60 31 25 f0 00 	movl   $0x0,0xf0253160
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 e9 06 13 f0       	push   $0xf01306e9
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 29 db 02 00       	call   f012e952 <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 6c e1 02 00       	call   f012f000 <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 80 9e 2d f0       	push   $0xf02d9e80
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 6f e3 02 00       	call   f012f21e <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 aa e0 02 00       	call   f012f000 <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 80 9e 2d f0       	push   $0xf02d9e80
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 ad e2 02 00       	call   f012f21e <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 ea e1 02 00       	call   f012f1ee <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 08 07 13 f0       	push   $0xf0130708
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 0b 07 13 f0       	push   $0xf013070b
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 80 be 2b f0       	push   $0xf02bbe80
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 8f de 02 00       	call   f012f000 <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 a4 de 02 00       	call   f012f04f <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 47 de 02 00       	call   f012f000 <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 1b 07 13 f0       	push   $0xf013071b
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 41 e4 02 00       	call   f012f634 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 20 07 13 f0       	push   $0xf0130720
f010121a:	50                   	push   %eax
f010121b:	e8 ec de 02 00       	call   f012f10c <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 24 07 13 f0       	push   $0xf0130724
f0101235:	50                   	push   %eax
f0101236:	e8 d1 de 02 00       	call   f012f10c <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 29 07 13 f0       	push   $0xf0130729
f0101250:	50                   	push   %eax
f0101251:	e8 b6 de 02 00       	call   f012f10c <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 29 07 13 f0       	push   $0xf0130729
f0101271:	50                   	push   %eax
f0101272:	e8 95 de 02 00       	call   f012f10c <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 3d dd 02 00       	call   f012f000 <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 3f dd 02 00       	call   f012f04f <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 1e dd 02 00       	call   f012f04f <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 9b dc 02 00       	call   f012f000 <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 b6 dd 02 00       	call   f012f144 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 eb db 02 00       	call   f012f000 <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 b6 dd 02 00       	call   f012f1ee <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 21 dc 02 00       	call   f012f07d <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 61 db 02 00       	call   f012f000 <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 68 ea 18 f0    	mov    0xf018ea68,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 79 dc 02 00       	call   f012f144 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 c4 da 02 00       	call   f012f000 <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 64 da 02 00       	call   f012f000 <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 2f dc 02 00       	call   f012f1ee <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 9a da 02 00       	call   f012f07d <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 dc d9 02 00       	call   f012f000 <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 f7 da 02 00       	call   f012f144 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 42 d9 02 00       	call   f012f000 <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 e8 d8 02 00       	call   f012f000 <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 b3 da 02 00       	call   f012f1ee <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 1e d9 02 00       	call   f012f07d <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 1c eb 18 f0       	mov    0xf018eb1c,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 80 be 2b f0       	push   $0xf02bbe80
f01017c5:	e8 36 d8 02 00       	call   f012f000 <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 dd d7 02 00       	call   f012f000 <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 ca d7 02 00       	call   f012f000 <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 80 be 2b f0    	lea    -0xfd44180(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 6f d7 02 00       	call   f012f000 <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 80 4e 2d f0    	lea    -0xfd2b180(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 64 d7 02 00       	call   f012f21e <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 80 9a 2d f0       	push   $0xf02d9a80
f0101ad6:	e8 43 d7 02 00       	call   f012f21e <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 13 d6 02 00       	call   f012f10c <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 e5 18 f0       	mov    %eax,0xf018e530
f0101b0b:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 f5 d6 02 00       	call   f012f21e <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 50 be 2b f0 00 	movl   $0x0,0xf02bbe50
f0101b60:	00 00 00 
f0101b63:	c7 05 54 be 2b f0 00 	movl   $0x0,0xf02bbe54
f0101b6a:	00 00 00 
f0101b6d:	c7 05 5c be 2b f0 00 	movl   $0x0,0xf02bbe5c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 61 d6 02 00       	call   f012f1ee <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 2d 07 13 f0       	push   $0xf013072d
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 1b 07 13 f0       	push   $0xf013071b
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 56 da 02 00       	call   f012f634 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 33 07 13 f0       	push   $0xf0130733
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 4c 07 13 f0       	push   $0xf013074c
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 9d 07 13 f0       	push   $0xf013079d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 b8 07 13 f0       	push   $0xf01307b8
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 e8 07 13 f0       	push   $0xf01307e8
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 9d 07 13 f0       	push   $0xf013079d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 12 08 13 f0       	push   $0xf0130812
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101d03:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 1c 08 13 f0       	push   $0xf013081c
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 7f 08 13 f0       	push   $0xf013087f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 88 08 13 f0       	push   $0xf0130888
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101e53:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 e5 18 f0       	add    $0xf018e548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 50 d1 02 00       	call   f012f000 <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 3f d1 02 00       	call   f012f000 <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 90 08 13 f0       	push   $0xf0130890
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 9d 07 13 f0       	push   $0xf013079d
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101fcc:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 19 02 00 00       	jmp    f010221d <process_command+0x237>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 e0 cf 02 00       	call   f012f000 <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 f8 d0 02 00       	call   f012f144 <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 f5 00 00 00    	jne    f010214c <process_command+0x166>
			{
				if((number_of_arguments-1)==commands[i].num_of_args||(number_of_arguments>1&&commands[i].num_of_args==-1)){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c e5 18 f0       	add    $0xf018e54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	74 1e                	je     f0102092 <process_command+0xac>
f0102074:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102078:	7e 27                	jle    f01020a1 <process_command+0xbb>
f010207a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010207d:	89 d0                	mov    %edx,%eax
f010207f:	01 c0                	add    %eax,%eax
f0102081:	01 d0                	add    %edx,%eax
f0102083:	c1 e0 03             	shl    $0x3,%eax
f0102086:	05 4c e5 18 f0       	add    $0xf018e54c,%eax
f010208b:	8b 00                	mov    (%eax),%eax
f010208d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102090:	75 0f                	jne    f01020a1 <process_command+0xbb>
					command_found=1;
f0102092:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f0102099:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010209c:	e9 9e 01 00 00       	jmp    f010223f <process_command+0x259>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f01020a1:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01020a7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020aa:	89 c8                	mov    %ecx,%eax
f01020ac:	01 c0                	add    %eax,%eax
f01020ae:	01 c8                	add    %ecx,%eax
f01020b0:	c1 e0 03             	shl    $0x3,%eax
f01020b3:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01020b8:	89 10                	mov    %edx,(%eax)
f01020ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020bd:	89 d0                	mov    %edx,%eax
f01020bf:	01 c0                	add    %eax,%eax
f01020c1:	01 d0                	add    %edx,%eax
f01020c3:	c1 e0 03             	shl    $0x3,%eax
f01020c6:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	85 c0                	test   %eax,%eax
f01020cf:	74 1c                	je     f01020ed <process_command+0x107>
f01020d1:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01020d7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020da:	89 c8                	mov    %ecx,%eax
f01020dc:	01 c0                	add    %eax,%eax
f01020de:	01 c8                	add    %ecx,%eax
f01020e0:	c1 e0 03             	shl    $0x3,%eax
f01020e3:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01020e8:	89 42 10             	mov    %eax,0x10(%edx)
f01020eb:	eb 16                	jmp    f0102103 <process_command+0x11d>
f01020ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020f0:	89 d0                	mov    %edx,%eax
f01020f2:	01 c0                	add    %eax,%eax
f01020f4:	01 d0                	add    %edx,%eax
f01020f6:	c1 e0 03             	shl    $0x3,%eax
f01020f9:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01020fe:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f0102103:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102106:	89 d0                	mov    %edx,%eax
f0102108:	01 c0                	add    %eax,%eax
f010210a:	01 d0                	add    %edx,%eax
f010210c:	c1 e0 03             	shl    $0x3,%eax
f010210f:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102114:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f0102119:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010211c:	89 d0                	mov    %edx,%eax
f010211e:	01 c0                	add    %eax,%eax
f0102120:	01 d0                	add    %edx,%eax
f0102122:	c1 e0 03             	shl    $0x3,%eax
f0102125:	05 50 e5 18 f0       	add    $0xf018e550,%eax
f010212a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102130:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0102135:	40                   	inc    %eax
f0102136:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
					command_found=1;
f010213b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102142:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102147:	e9 f3 00 00 00       	jmp    f010223f <process_command+0x259>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010214c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010214f:	8b 10                	mov    (%eax),%edx
f0102151:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102154:	89 c8                	mov    %ecx,%eax
f0102156:	01 c0                	add    %eax,%eax
f0102158:	01 c8                	add    %ecx,%eax
f010215a:	c1 e0 03             	shl    $0x3,%eax
f010215d:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102162:	8b 00                	mov    (%eax),%eax
f0102164:	83 ec 08             	sub    $0x8,%esp
f0102167:	52                   	push   %edx
f0102168:	50                   	push   %eax
f0102169:	e8 2a fd ff ff       	call   f0101e98 <subSequence>
f010216e:	83 c4 10             	add    $0x10,%esp
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 84 a1 00 00 00    	je     f010221a <process_command+0x234>
				command_found=1;
f0102179:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102180:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f0102186:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102189:	89 c8                	mov    %ecx,%eax
f010218b:	01 c0                	add    %eax,%eax
f010218d:	01 c8                	add    %ecx,%eax
f010218f:	c1 e0 03             	shl    $0x3,%eax
f0102192:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f0102197:	89 10                	mov    %edx,(%eax)
f0102199:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010219c:	89 d0                	mov    %edx,%eax
f010219e:	01 c0                	add    %eax,%eax
f01021a0:	01 d0                	add    %edx,%eax
f01021a2:	c1 e0 03             	shl    $0x3,%eax
f01021a5:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01021aa:	8b 00                	mov    (%eax),%eax
f01021ac:	85 c0                	test   %eax,%eax
f01021ae:	74 1c                	je     f01021cc <process_command+0x1e6>
f01021b0:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01021b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01021b9:	89 c8                	mov    %ecx,%eax
f01021bb:	01 c0                	add    %eax,%eax
f01021bd:	01 c8                	add    %ecx,%eax
f01021bf:	c1 e0 03             	shl    $0x3,%eax
f01021c2:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021c7:	89 42 10             	mov    %eax,0x10(%edx)
f01021ca:	eb 16                	jmp    f01021e2 <process_command+0x1fc>
f01021cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021cf:	89 d0                	mov    %edx,%eax
f01021d1:	01 c0                	add    %eax,%eax
f01021d3:	01 d0                	add    %edx,%eax
f01021d5:	c1 e0 03             	shl    $0x3,%eax
f01021d8:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021dd:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f01021e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021e5:	89 d0                	mov    %edx,%eax
f01021e7:	01 c0                	add    %eax,%eax
f01021e9:	01 d0                	add    %edx,%eax
f01021eb:	c1 e0 03             	shl    $0x3,%eax
f01021ee:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021f3:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f01021f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021fb:	89 d0                	mov    %edx,%eax
f01021fd:	01 c0                	add    %eax,%eax
f01021ff:	01 d0                	add    %edx,%eax
f0102201:	c1 e0 03             	shl    $0x3,%eax
f0102204:	05 50 e5 18 f0       	add    $0xf018e550,%eax
f0102209:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010220f:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0102214:	40                   	inc    %eax
f0102215:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f010221a:	ff 45 f0             	incl   -0x10(%ebp)
f010221d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102220:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f0102225:	39 c2                	cmp    %eax,%edx
f0102227:	0f 82 d7 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010222d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102231:	75 07                	jne    f010223a <process_command+0x254>
		return CMD_INVALID;
f0102233:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f0102238:	eb 05                	jmp    f010223f <process_command+0x259>
	}
	return CMD_MATCHED;
f010223a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f010223f:	c9                   	leave  
f0102240:	c3                   	ret    

f0102241 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102241:	55                   	push   %ebp
f0102242:	89 e5                	mov    %esp,%ebp
f0102244:	c7 05 18 be 2b f0 00 	movl   $0x0,0xf02bbe18
f010224b:	00 00 00 
f010224e:	90                   	nop
f010224f:	5d                   	pop    %ebp
f0102250:	c3                   	ret    

f0102251 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102251:	55                   	push   %ebp
f0102252:	89 e5                	mov    %esp,%ebp
f0102254:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f010225b:	00 00 00 
f010225e:	90                   	nop
f010225f:	5d                   	pop    %ebp
f0102260:	c3                   	ret    

f0102261 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102261:	55                   	push   %ebp
f0102262:	89 e5                	mov    %esp,%ebp
f0102264:	c7 05 18 be 2b f0 02 	movl   $0x2,0xf02bbe18
f010226b:	00 00 00 
f010226e:	90                   	nop
f010226f:	5d                   	pop    %ebp
f0102270:	c3                   	ret    

f0102271 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102271:	55                   	push   %ebp
f0102272:	89 e5                	mov    %esp,%ebp
f0102274:	c7 05 18 be 2b f0 03 	movl   $0x3,0xf02bbe18
f010227b:	00 00 00 
f010227e:	90                   	nop
f010227f:	5d                   	pop    %ebp
f0102280:	c3                   	ret    

f0102281 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102281:	55                   	push   %ebp
f0102282:	89 e5                	mov    %esp,%ebp
f0102284:	c7 05 18 be 2b f0 04 	movl   $0x4,0xf02bbe18
f010228b:	00 00 00 
f010228e:	90                   	nop
f010228f:	5d                   	pop    %ebp
f0102290:	c3                   	ret    

f0102291 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102291:	55                   	push   %ebp
f0102292:	89 e5                	mov    %esp,%ebp
f0102294:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f0102299:	85 c0                	test   %eax,%eax
f010229b:	75 04                	jne    f01022a1 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010229d:	b0 01                	mov    $0x1,%al
f010229f:	eb 02                	jmp    f01022a3 <isKHeapPlacementStrategyCONTALLOC+0x12>
f01022a1:	b0 00                	mov    $0x0,%al
f01022a3:	5d                   	pop    %ebp
f01022a4:	c3                   	ret    

f01022a5 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01022a5:	55                   	push   %ebp
f01022a6:	89 e5                	mov    %esp,%ebp
f01022a8:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022ad:	83 f8 01             	cmp    $0x1,%eax
f01022b0:	75 04                	jne    f01022b6 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01022b2:	b0 01                	mov    $0x1,%al
f01022b4:	eb 02                	jmp    f01022b8 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01022b6:	b0 00                	mov    $0x0,%al
f01022b8:	5d                   	pop    %ebp
f01022b9:	c3                   	ret    

f01022ba <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01022ba:	55                   	push   %ebp
f01022bb:	89 e5                	mov    %esp,%ebp
f01022bd:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022c2:	83 f8 02             	cmp    $0x2,%eax
f01022c5:	75 04                	jne    f01022cb <isKHeapPlacementStrategyBESTFIT+0x11>
f01022c7:	b0 01                	mov    $0x1,%al
f01022c9:	eb 02                	jmp    f01022cd <isKHeapPlacementStrategyBESTFIT+0x13>
f01022cb:	b0 00                	mov    $0x0,%al
f01022cd:	5d                   	pop    %ebp
f01022ce:	c3                   	ret    

f01022cf <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022cf:	55                   	push   %ebp
f01022d0:	89 e5                	mov    %esp,%ebp
f01022d2:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022d7:	83 f8 03             	cmp    $0x3,%eax
f01022da:	75 04                	jne    f01022e0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022dc:	b0 01                	mov    $0x1,%al
f01022de:	eb 02                	jmp    f01022e2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022e0:	b0 00                	mov    $0x0,%al
f01022e2:	5d                   	pop    %ebp
f01022e3:	c3                   	ret    

f01022e4 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022e4:	55                   	push   %ebp
f01022e5:	89 e5                	mov    %esp,%ebp
f01022e7:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022ec:	83 f8 04             	cmp    $0x4,%eax
f01022ef:	75 04                	jne    f01022f5 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022f1:	b0 01                	mov    $0x1,%al
f01022f3:	eb 02                	jmp    f01022f7 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022f5:	b0 00                	mov    $0x0,%al
f01022f7:	5d                   	pop    %ebp
f01022f8:	c3                   	ret    

f01022f9 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	c7 05 ec bd 2b f0 01 	movl   $0x1,0xf02bbdec
f0102303:	00 00 00 
f0102306:	90                   	nop
f0102307:	5d                   	pop    %ebp
f0102308:	c3                   	ret    

f0102309 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0102309:	55                   	push   %ebp
f010230a:	89 e5                	mov    %esp,%ebp
f010230c:	c7 05 ec bd 2b f0 02 	movl   $0x2,0xf02bbdec
f0102313:	00 00 00 
f0102316:	90                   	nop
f0102317:	5d                   	pop    %ebp
f0102318:	c3                   	ret    

f0102319 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0102319:	55                   	push   %ebp
f010231a:	89 e5                	mov    %esp,%ebp
f010231c:	c7 05 ec bd 2b f0 03 	movl   $0x3,0xf02bbdec
f0102323:	00 00 00 
f0102326:	90                   	nop
f0102327:	5d                   	pop    %ebp
f0102328:	c3                   	ret    

f0102329 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0102329:	55                   	push   %ebp
f010232a:	89 e5                	mov    %esp,%ebp
f010232c:	c7 05 ec bd 2b f0 04 	movl   $0x4,0xf02bbdec
f0102333:	00 00 00 
f0102336:	90                   	nop
f0102337:	5d                   	pop    %ebp
f0102338:	c3                   	ret    

f0102339 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102341:	83 f8 01             	cmp    $0x1,%eax
f0102344:	75 04                	jne    f010234a <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102346:	b0 01                	mov    $0x1,%al
f0102348:	eb 02                	jmp    f010234c <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010234a:	b0 00                	mov    $0x0,%al
f010234c:	5d                   	pop    %ebp
f010234d:	c3                   	ret    

f010234e <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f010234e:	55                   	push   %ebp
f010234f:	89 e5                	mov    %esp,%ebp
f0102351:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102356:	83 f8 02             	cmp    $0x2,%eax
f0102359:	75 04                	jne    f010235f <isUHeapPlacementStrategyBESTFIT+0x11>
f010235b:	b0 01                	mov    $0x1,%al
f010235d:	eb 02                	jmp    f0102361 <isUHeapPlacementStrategyBESTFIT+0x13>
f010235f:	b0 00                	mov    $0x0,%al
f0102361:	5d                   	pop    %ebp
f0102362:	c3                   	ret    

f0102363 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f010236b:	83 f8 03             	cmp    $0x3,%eax
f010236e:	75 04                	jne    f0102374 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102370:	b0 01                	mov    $0x1,%al
f0102372:	eb 02                	jmp    f0102376 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102374:	b0 00                	mov    $0x0,%al
f0102376:	5d                   	pop    %ebp
f0102377:	c3                   	ret    

f0102378 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0102378:	55                   	push   %ebp
f0102379:	89 e5                	mov    %esp,%ebp
f010237b:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102380:	83 f8 04             	cmp    $0x4,%eax
f0102383:	75 04                	jne    f0102389 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102385:	b0 01                	mov    $0x1,%al
f0102387:	eb 02                	jmp    f010238b <isUHeapPlacementStrategyWORSTFIT+0x13>
f0102389:	b0 00                	mov    $0x0,%al
f010238b:	5d                   	pop    %ebp
f010238c:	c3                   	ret    

f010238d <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010238d:	55                   	push   %ebp
f010238e:	89 e5                	mov    %esp,%ebp
f0102390:	53                   	push   %ebx
f0102391:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102394:	8b 45 08             	mov    0x8(%ebp),%eax
f0102397:	c1 e8 0c             	shr    $0xc,%eax
f010239a:	89 c2                	mov    %eax,%edx
f010239c:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01023a1:	39 c2                	cmp    %eax,%edx
f01023a3:	72 14                	jb     f01023b9 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01023a5:	83 ec 04             	sub    $0x4,%esp
f01023a8:	68 b0 08 13 f0       	push   $0xf01308b0
f01023ad:	6a 55                	push   $0x55
f01023af:	68 d8 08 13 f0       	push   $0xf01308d8
f01023b4:	e8 f7 dd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01023b9:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01023bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01023c2:	c1 e8 0c             	shr    $0xc,%eax
f01023c5:	89 c2                	mov    %eax,%edx
f01023c7:	89 d0                	mov    %edx,%eax
f01023c9:	01 c0                	add    %eax,%eax
f01023cb:	01 d0                	add    %edx,%eax
f01023cd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023d4:	01 d8                	add    %ebx,%eax
f01023d6:	01 d0                	add    %edx,%eax
f01023d8:	01 c8                	add    %ecx,%eax
}
f01023da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023dd:	c9                   	leave  
f01023de:	c3                   	ret    

f01023df <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023df:	55                   	push   %ebp
f01023e0:	89 e5                	mov    %esp,%ebp
f01023e2:	53                   	push   %ebx
f01023e3:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023ed:	eb 3b                	jmp    f010242a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023f2:	89 d0                	mov    %edx,%eax
f01023f4:	01 c0                	add    %eax,%eax
f01023f6:	01 d0                	add    %edx,%eax
f01023f8:	c1 e0 03             	shl    $0x3,%eax
f01023fb:	05 44 e5 18 f0       	add    $0xf018e544,%eax
f0102400:	8b 10                	mov    (%eax),%edx
f0102402:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102405:	89 c8                	mov    %ecx,%eax
f0102407:	01 c0                	add    %eax,%eax
f0102409:	01 c8                	add    %ecx,%eax
f010240b:	c1 e0 03             	shl    $0x3,%eax
f010240e:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102413:	8b 00                	mov    (%eax),%eax
f0102415:	83 ec 04             	sub    $0x4,%esp
f0102418:	52                   	push   %edx
f0102419:	50                   	push   %eax
f010241a:	68 7f 11 13 f0       	push   $0xf013117f
f010241f:	e8 0d ea ff ff       	call   f0100e31 <cprintf>
f0102424:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102427:	ff 45 f4             	incl   -0xc(%ebp)
f010242a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010242d:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f0102432:	39 c2                	cmp    %eax,%edx
f0102434:	72 b9                	jb     f01023ef <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102436:	83 ec 0c             	sub    $0xc,%esp
f0102439:	68 88 11 13 f0       	push   $0xf0131188
f010243e:	e8 ee e9 ff ff       	call   f0100e31 <cprintf>
f0102443:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102446:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010244d:	eb 42                	jmp    f0102491 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010244f:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0102455:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102458:	89 d0                	mov    %edx,%eax
f010245a:	01 c0                	add    %eax,%eax
f010245c:	01 d0                	add    %edx,%eax
f010245e:	c1 e0 02             	shl    $0x2,%eax
f0102461:	01 c8                	add    %ecx,%eax
f0102463:	8b 50 04             	mov    0x4(%eax),%edx
f0102466:	8b 1d 68 ea 18 f0    	mov    0xf018ea68,%ebx
f010246c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010246f:	89 c8                	mov    %ecx,%eax
f0102471:	01 c0                	add    %eax,%eax
f0102473:	01 c8                	add    %ecx,%eax
f0102475:	c1 e0 02             	shl    $0x2,%eax
f0102478:	01 d8                	add    %ebx,%eax
f010247a:	8b 00                	mov    (%eax),%eax
f010247c:	83 ec 04             	sub    $0x4,%esp
f010247f:	52                   	push   %edx
f0102480:	50                   	push   %eax
f0102481:	68 9d 11 13 f0       	push   $0xf013119d
f0102486:	e8 a6 e9 ff ff       	call   f0100e31 <cprintf>
f010248b:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010248e:	ff 45 f4             	incl   -0xc(%ebp)
f0102491:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f0102496:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0102499:	7c b4                	jl     f010244f <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010249b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01024a3:	c9                   	leave  
f01024a4:	c3                   	ret    

f01024a5 <command_str2lower>:
int command_str2lower(int number_of_arguments,char **arguments){
f01024a5:	55                   	push   %ebp
f01024a6:	89 e5                	mov    %esp,%ebp
f01024a8:	83 ec 18             	sub    $0x18,%esp
	char*s=str2lower(arguments[1],arguments[2]);
f01024ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024ae:	83 c0 08             	add    $0x8,%eax
f01024b1:	8b 10                	mov    (%eax),%edx
f01024b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024b6:	83 c0 04             	add    $0x4,%eax
f01024b9:	8b 00                	mov    (%eax),%eax
f01024bb:	83 ec 08             	sub    $0x8,%esp
f01024be:	52                   	push   %edx
f01024bf:	50                   	push   %eax
f01024c0:	e8 43 d2 02 00       	call   f012f708 <str2lower>
f01024c5:	83 c4 10             	add    $0x10,%esp
f01024c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("%s\n",s);
f01024cb:	83 ec 08             	sub    $0x8,%esp
f01024ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01024d1:	68 b9 11 13 f0       	push   $0xf01311b9
f01024d6:	e8 56 e9 ff ff       	call   f0100e31 <cprintf>
f01024db:	83 c4 10             	add    $0x10,%esp
return 0;
f01024de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e3:	c9                   	leave  
f01024e4:	c3                   	ret    

f01024e5 <command_kernel_info>:
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01024e5:	55                   	push   %ebp
f01024e6:	89 e5                	mov    %esp,%ebp
f01024e8:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01024eb:	83 ec 0c             	sub    $0xc,%esp
f01024ee:	68 bd 11 13 f0       	push   $0xf01311bd
f01024f3:	e8 39 e9 ff ff       	call   f0100e31 <cprintf>
f01024f8:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01024fb:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102500:	83 ec 04             	sub    $0x4,%esp
f0102503:	50                   	push   %eax
f0102504:	68 0c 00 10 f0       	push   $0xf010000c
f0102509:	68 d8 11 13 f0       	push   $0xf01311d8
f010250e:	e8 1e e9 ff ff       	call   f0100e31 <cprintf>
f0102513:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0102516:	b8 59 05 13 00       	mov    $0x130559,%eax
f010251b:	83 ec 04             	sub    $0x4,%esp
f010251e:	50                   	push   %eax
f010251f:	68 59 05 13 f0       	push   $0xf0130559
f0102524:	68 14 12 13 f0       	push   $0xf0131214
f0102529:	e8 03 e9 ff ff       	call   f0100e31 <cprintf>
f010252e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102531:	b8 06 2f 25 00       	mov    $0x252f06,%eax
f0102536:	83 ec 04             	sub    $0x4,%esp
f0102539:	50                   	push   %eax
f010253a:	68 06 2f 25 f0       	push   $0xf0252f06
f010253f:	68 50 12 13 f0       	push   $0xf0131250
f0102544:	e8 e8 e8 ff ff       	call   f0100e31 <cprintf>
f0102549:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010254c:	b8 6c e5 2d 00       	mov    $0x2de56c,%eax
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	50                   	push   %eax
f0102555:	68 6c e5 2d f0       	push   $0xf02de56c
f010255a:	68 98 12 13 f0       	push   $0xf0131298
f010255f:	e8 cd e8 ff ff       	call   f0100e31 <cprintf>
f0102564:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102567:	b8 6c e5 2d f0       	mov    $0xf02de56c,%eax
f010256c:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102572:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102577:	29 c2                	sub    %eax,%edx
f0102579:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010257b:	85 c0                	test   %eax,%eax
f010257d:	79 05                	jns    f0102584 <command_kernel_info+0x9f>
f010257f:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102584:	c1 f8 0a             	sar    $0xa,%eax
f0102587:	83 ec 08             	sub    $0x8,%esp
f010258a:	50                   	push   %eax
f010258b:	68 d4 12 13 f0       	push   $0xf01312d4
f0102590:	e8 9c e8 ff ff       	call   f0100e31 <cprintf>
f0102595:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0102598:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259d:	c9                   	leave  
f010259e:	c3                   	ret    

f010259f <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f010259f:	55                   	push   %ebp
f01025a0:	89 e5                	mov    %esp,%ebp
f01025a2:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01025a5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01025a9:	75 37                	jne    f01025e2 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01025ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ae:	83 c0 04             	add    $0x4,%eax
f01025b1:	8b 00                	mov    (%eax),%eax
f01025b3:	83 ec 04             	sub    $0x4,%esp
f01025b6:	6a 10                	push   $0x10
f01025b8:	6a 00                	push   $0x0
f01025ba:	50                   	push   %eax
f01025bb:	e8 a0 cd 02 00       	call   f012f360 <strtol>
f01025c0:	83 c4 10             	add    $0x10,%esp
f01025c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01025c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025c9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01025cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025cf:	83 c0 08             	add    $0x8,%eax
f01025d2:	8b 00                	mov    (%eax),%eax
f01025d4:	8a 00                	mov    (%eax),%al
f01025d6:	88 c2                	mov    %al,%dl
f01025d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025db:	88 10                	mov    %dl,(%eax)
f01025dd:	e9 bc 00 00 00       	jmp    f010269e <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01025e2:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01025e6:	0f 85 a2 00 00 00    	jne    f010268e <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01025ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ef:	83 c0 04             	add    $0x4,%eax
f01025f2:	8b 00                	mov    (%eax),%eax
f01025f4:	83 ec 04             	sub    $0x4,%esp
f01025f7:	6a 0a                	push   $0xa
f01025f9:	6a 00                	push   $0x0
f01025fb:	50                   	push   %eax
f01025fc:	e8 5f cd 02 00       	call   f012f360 <strtol>
f0102601:	83 c4 10             	add    $0x10,%esp
f0102604:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102607:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010260e:	83 ec 04             	sub    $0x4,%esp
f0102611:	6a 00                	push   $0x0
f0102613:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102616:	50                   	push   %eax
f0102617:	ff 75 f4             	pushl  -0xc(%ebp)
f010261a:	e8 af 73 00 00       	call   f01099ce <envid2env>
f010261f:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102622:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102625:	83 c0 08             	add    $0x8,%eax
f0102628:	8b 00                	mov    (%eax),%eax
f010262a:	83 ec 04             	sub    $0x4,%esp
f010262d:	6a 10                	push   $0x10
f010262f:	6a 00                	push   $0x0
f0102631:	50                   	push   %eax
f0102632:	e8 29 cd 02 00       	call   f012f360 <strtol>
f0102637:	83 c4 10             	add    $0x10,%esp
f010263a:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010263d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102640:	85 c0                	test   %eax,%eax
f0102642:	75 07                	jne    f010264b <command_writeusermem+0xac>
f0102644:	b8 00 00 00 00       	mov    $0x0,%eax
f0102649:	eb 58                	jmp    f01026a3 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010264b:	0f 20 d8             	mov    %cr3,%eax
f010264e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102651:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102657:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010265a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102660:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102663:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102666:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010266c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010266f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102672:	83 c0 0c             	add    $0xc,%eax
f0102675:	8b 00                	mov    (%eax),%eax
f0102677:	8a 00                	mov    (%eax),%al
f0102679:	88 c2                	mov    %al,%dl
f010267b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010267e:	88 10                	mov    %dl,(%eax)
f0102680:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102683:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102686:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102689:	0f 22 d8             	mov    %eax,%cr3
f010268c:	eb 10                	jmp    f010269e <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010268e:	83 ec 0c             	sub    $0xc,%esp
f0102691:	68 00 13 13 f0       	push   $0xf0131300
f0102696:	e8 96 e7 ff ff       	call   f0100e31 <cprintf>
f010269b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010269e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a3:	c9                   	leave  
f01026a4:	c3                   	ret    

f01026a5 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01026a5:	55                   	push   %ebp
f01026a6:	89 e5                	mov    %esp,%ebp
f01026a8:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01026ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ae:	83 c0 04             	add    $0x4,%eax
f01026b1:	8b 00                	mov    (%eax),%eax
f01026b3:	83 ec 04             	sub    $0x4,%esp
f01026b6:	6a 10                	push   $0x10
f01026b8:	6a 00                	push   $0x0
f01026ba:	50                   	push   %eax
f01026bb:	e8 a0 cc 02 00       	call   f012f360 <strtol>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01026c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01026cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f01026d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026d5:	83 c0 08             	add    $0x8,%eax
f01026d8:	8b 00                	mov    (%eax),%eax
f01026da:	83 ec 0c             	sub    $0xc,%esp
f01026dd:	50                   	push   %eax
f01026de:	e8 1d c9 02 00       	call   f012f000 <strlen>
f01026e3:	83 c4 10             	add    $0x10,%esp
f01026e6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01026e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01026f0:	eb 1c                	jmp    f010270e <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01026f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026f5:	83 c0 08             	add    $0x8,%eax
f01026f8:	8b 10                	mov    (%eax),%edx
f01026fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026fd:	01 d0                	add    %edx,%eax
f01026ff:	8a 00                	mov    (%eax),%al
f0102701:	88 c2                	mov    %al,%dl
f0102703:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102706:	88 10                	mov    %dl,(%eax)
		address++;
f0102708:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010270b:	ff 45 f0             	incl   -0x10(%ebp)
f010270e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102711:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102714:	7c dc                	jl     f01026f2 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102716:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010271b:	c9                   	leave  
f010271c:	c3                   	ret    

f010271d <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010271d:	55                   	push   %ebp
f010271e:	89 e5                	mov    %esp,%ebp
f0102720:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102723:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102727:	75 42                	jne    f010276b <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010272c:	83 c0 04             	add    $0x4,%eax
f010272f:	8b 00                	mov    (%eax),%eax
f0102731:	83 ec 04             	sub    $0x4,%esp
f0102734:	6a 10                	push   $0x10
f0102736:	6a 00                	push   $0x0
f0102738:	50                   	push   %eax
f0102739:	e8 22 cc 02 00       	call   f012f360 <strtol>
f010273e:	83 c4 10             	add    $0x10,%esp
f0102741:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102747:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010274a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010274d:	8a 00                	mov    (%eax),%al
f010274f:	0f b6 c0             	movzbl %al,%eax
f0102752:	83 ec 04             	sub    $0x4,%esp
f0102755:	50                   	push   %eax
f0102756:	ff 75 d8             	pushl  -0x28(%ebp)
f0102759:	68 2a 13 13 f0       	push   $0xf013132a
f010275e:	e8 ce e6 ff ff       	call   f0100e31 <cprintf>
f0102763:	83 c4 10             	add    $0x10,%esp
f0102766:	e9 c7 00 00 00       	jmp    f0102832 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010276b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010276f:	0f 85 ad 00 00 00    	jne    f0102822 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102775:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102778:	83 c0 04             	add    $0x4,%eax
f010277b:	8b 00                	mov    (%eax),%eax
f010277d:	83 ec 04             	sub    $0x4,%esp
f0102780:	6a 0a                	push   $0xa
f0102782:	6a 00                	push   $0x0
f0102784:	50                   	push   %eax
f0102785:	e8 d6 cb 02 00       	call   f012f360 <strtol>
f010278a:	83 c4 10             	add    $0x10,%esp
f010278d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102790:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102797:	83 ec 04             	sub    $0x4,%esp
f010279a:	6a 00                	push   $0x0
f010279c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010279f:	50                   	push   %eax
f01027a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01027a3:	e8 26 72 00 00       	call   f01099ce <envid2env>
f01027a8:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01027ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027ae:	83 c0 08             	add    $0x8,%eax
f01027b1:	8b 00                	mov    (%eax),%eax
f01027b3:	83 ec 04             	sub    $0x4,%esp
f01027b6:	6a 10                	push   $0x10
f01027b8:	6a 00                	push   $0x0
f01027ba:	50                   	push   %eax
f01027bb:	e8 a0 cb 02 00       	call   f012f360 <strtol>
f01027c0:	83 c4 10             	add    $0x10,%esp
f01027c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01027c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	75 07                	jne    f01027d4 <command_readusermem+0xb7>
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d2:	eb 63                	jmp    f0102837 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01027d4:	0f 20 d8             	mov    %cr3,%eax
f01027d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01027da:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01027dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01027e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027e3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01027e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01027ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01027ef:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01027f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01027f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01027fb:	8a 00                	mov    (%eax),%al
f01027fd:	0f b6 c0             	movzbl %al,%eax
f0102800:	83 ec 04             	sub    $0x4,%esp
f0102803:	50                   	push   %eax
f0102804:	ff 75 f0             	pushl  -0x10(%ebp)
f0102807:	68 2a 13 13 f0       	push   $0xf013132a
f010280c:	e8 20 e6 ff ff       	call   f0100e31 <cprintf>
f0102811:	83 c4 10             	add    $0x10,%esp
f0102814:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102817:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010281a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010281d:	0f 22 d8             	mov    %eax,%cr3
f0102820:	eb 10                	jmp    f0102832 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102822:	83 ec 0c             	sub    $0xc,%esp
f0102825:	68 44 13 13 f0       	push   $0xf0131344
f010282a:	e8 02 e6 ff ff       	call   f0100e31 <cprintf>
f010282f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102832:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102837:	c9                   	leave  
f0102838:	c3                   	ret    

f0102839 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102839:	55                   	push   %ebp
f010283a:	89 e5                	mov    %esp,%ebp
f010283c:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010283f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102842:	83 c0 04             	add    $0x4,%eax
f0102845:	8b 00                	mov    (%eax),%eax
f0102847:	83 ec 04             	sub    $0x4,%esp
f010284a:	6a 10                	push   $0x10
f010284c:	6a 00                	push   $0x0
f010284e:	50                   	push   %eax
f010284f:	e8 0c cb 02 00       	call   f012f360 <strtol>
f0102854:	83 c4 10             	add    $0x10,%esp
f0102857:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010285c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f010285f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102869:	8a 00                	mov    (%eax),%al
f010286b:	0f b6 c0             	movzbl %al,%eax
f010286e:	83 ec 08             	sub    $0x8,%esp
f0102871:	50                   	push   %eax
f0102872:	68 6e 13 13 f0       	push   $0xf013136e
f0102877:	e8 b5 e5 ff ff       	call   f0100e31 <cprintf>
f010287c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010287f:	83 ec 0c             	sub    $0xc,%esp
f0102882:	68 71 13 13 f0       	push   $0xf0131371
f0102887:	e8 a5 e5 ff ff       	call   f0100e31 <cprintf>
f010288c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010288f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102894:	c9                   	leave  
f0102895:	c3                   	ret    

f0102896 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102896:	55                   	push   %ebp
f0102897:	89 e5                	mov    %esp,%ebp
f0102899:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 04             	sub    $0x4,%esp
f01028a7:	6a 0a                	push   $0xa
f01028a9:	6a 00                	push   $0x0
f01028ab:	50                   	push   %eax
f01028ac:	e8 af ca 02 00       	call   f012f360 <strtol>
f01028b1:	83 c4 10             	add    $0x10,%esp
f01028b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01028b7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01028be:	83 ec 04             	sub    $0x4,%esp
f01028c1:	6a 00                	push   $0x0
f01028c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01028c6:	50                   	push   %eax
f01028c7:	ff 75 ec             	pushl  -0x14(%ebp)
f01028ca:	e8 ff 70 00 00       	call   f01099ce <envid2env>
f01028cf:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01028d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028d5:	83 c0 08             	add    $0x8,%eax
f01028d8:	8b 00                	mov    (%eax),%eax
f01028da:	83 ec 04             	sub    $0x4,%esp
f01028dd:	6a 10                	push   $0x10
f01028df:	6a 00                	push   $0x0
f01028e1:	50                   	push   %eax
f01028e2:	e8 79 ca 02 00       	call   f012f360 <strtol>
f01028e7:	83 c4 10             	add    $0x10,%esp
f01028ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01028ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028f0:	83 c0 0c             	add    $0xc,%eax
f01028f3:	8b 00                	mov    (%eax),%eax
f01028f5:	83 ec 04             	sub    $0x4,%esp
f01028f8:	6a 0a                	push   $0xa
f01028fa:	6a 00                	push   $0x0
f01028fc:	50                   	push   %eax
f01028fd:	e8 5e ca 02 00       	call   f012f360 <strtol>
f0102902:	83 c4 10             	add    $0x10,%esp
f0102905:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102908:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010290e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102911:	85 c0                	test   %eax,%eax
f0102913:	75 07                	jne    f010291c <command_readuserblock+0x86>
f0102915:	b8 00 00 00 00       	mov    $0x0,%eax
f010291a:	eb 68                	jmp    f0102984 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010291c:	0f 20 d8             	mov    %cr3,%eax
f010291f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102922:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102925:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102928:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010292b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102931:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102934:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102937:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010293a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102941:	eb 28                	jmp    f010296b <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102946:	8a 00                	mov    (%eax),%al
f0102948:	0f b6 d0             	movzbl %al,%edx
f010294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010294e:	8a 00                	mov    (%eax),%al
f0102950:	0f b6 c0             	movzbl %al,%eax
f0102953:	52                   	push   %edx
f0102954:	50                   	push   %eax
f0102955:	ff 75 f4             	pushl  -0xc(%ebp)
f0102958:	68 73 13 13 f0       	push   $0xf0131373
f010295d:	e8 cf e4 ff ff       	call   f0100e31 <cprintf>
f0102962:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102965:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102968:	ff 45 f0             	incl   -0x10(%ebp)
f010296b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010296e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102971:	7c d0                	jl     f0102943 <command_readuserblock+0xad>
f0102973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102976:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102979:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010297c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010297f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102984:	c9                   	leave  
f0102985:	c3                   	ret    

f0102986 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102986:	55                   	push   %ebp
f0102987:	89 e5                	mov    %esp,%ebp
f0102989:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010298c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298f:	83 c0 04             	add    $0x4,%eax
f0102992:	8b 00                	mov    (%eax),%eax
f0102994:	83 ec 04             	sub    $0x4,%esp
f0102997:	6a 0a                	push   $0xa
f0102999:	6a 00                	push   $0x0
f010299b:	50                   	push   %eax
f010299c:	e8 bf c9 02 00       	call   f012f360 <strtol>
f01029a1:	83 c4 10             	add    $0x10,%esp
f01029a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01029a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01029ae:	83 ec 04             	sub    $0x4,%esp
f01029b1:	6a 00                	push   $0x0
f01029b3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01029b6:	50                   	push   %eax
f01029b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01029ba:	e8 0f 70 00 00       	call   f01099ce <envid2env>
f01029bf:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01029c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c5:	85 c0                	test   %eax,%eax
f01029c7:	75 0a                	jne    f01029d3 <command_remove_table+0x4d>
f01029c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ce:	e9 aa 00 00 00       	jmp    f0102a7d <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f01029d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d6:	83 c0 08             	add    $0x8,%eax
f01029d9:	8b 00                	mov    (%eax),%eax
f01029db:	83 ec 04             	sub    $0x4,%esp
f01029de:	6a 10                	push   $0x10
f01029e0:	6a 00                	push   $0x0
f01029e2:	50                   	push   %eax
f01029e3:	e8 78 c9 02 00       	call   f012f360 <strtol>
f01029e8:	83 c4 10             	add    $0x10,%esp
f01029eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01029ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01029f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01029f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102a00:	c1 ea 16             	shr    $0x16,%edx
f0102a03:	c1 e2 02             	shl    $0x2,%edx
f0102a06:	01 d0                	add    %edx,%eax
f0102a08:	8b 00                	mov    (%eax),%eax
f0102a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102a0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102a12:	83 ec 0c             	sub    $0xc,%esp
f0102a15:	ff 75 e8             	pushl  -0x18(%ebp)
f0102a18:	e8 70 f9 ff ff       	call   f010238d <to_frame_info>
f0102a1d:	83 c4 10             	add    $0x10,%esp
f0102a20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a26:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102a2c:	83 ec 0c             	sub    $0xc,%esp
f0102a2f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102a32:	e8 06 4a 00 00       	call   f010743d <free_frame>
f0102a37:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a3d:	c1 e8 16             	shr    $0x16,%eax
f0102a40:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102a43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a46:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a4c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102a4f:	c1 e2 02             	shl    $0x2,%edx
f0102a52:	01 c2                	add    %eax,%edx
f0102a54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a5d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a60:	c1 e1 02             	shl    $0x2,%ecx
f0102a63:	01 c8                	add    %ecx,%eax
f0102a65:	8b 00                	mov    (%eax),%eax
f0102a67:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a6a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a6c:	0f 20 d8             	mov    %cr3,%eax
f0102a6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a75:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a85:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a89:	7e 06                	jle    f0102a91 <command_allocuserpage+0x12>
f0102a8b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a8f:	7e 1a                	jle    f0102aab <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a91:	83 ec 0c             	sub    $0xc,%esp
f0102a94:	68 84 13 13 f0       	push   $0xf0131384
f0102a99:	e8 93 e3 ff ff       	call   f0100e31 <cprintf>
f0102a9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa6:	e9 4c 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 04             	sub    $0x4,%esp
f0102ab6:	6a 0a                	push   $0xa
f0102ab8:	6a 00                	push   $0x0
f0102aba:	50                   	push   %eax
f0102abb:	e8 a0 c8 02 00       	call   f012f360 <strtol>
f0102ac0:	83 c4 10             	add    $0x10,%esp
f0102ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102ac6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102acd:	83 ec 04             	sub    $0x4,%esp
f0102ad0:	6a 00                	push   $0x0
f0102ad2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102ad5:	50                   	push   %eax
f0102ad6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ad9:	e8 f0 6e 00 00       	call   f01099ce <envid2env>
f0102ade:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ae4:	85 c0                	test   %eax,%eax
f0102ae6:	75 0a                	jne    f0102af2 <command_allocuserpage+0x73>
f0102ae8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aed:	e9 05 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102af2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af5:	83 c0 08             	add    $0x8,%eax
f0102af8:	8b 00                	mov    (%eax),%eax
f0102afa:	83 ec 04             	sub    $0x4,%esp
f0102afd:	6a 10                	push   $0x10
f0102aff:	6a 00                	push   $0x0
f0102b01:	50                   	push   %eax
f0102b02:	e8 59 c8 02 00       	call   f012f360 <strtol>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102b0d:	83 ec 0c             	sub    $0xc,%esp
f0102b10:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102b13:	50                   	push   %eax
f0102b14:	e8 0c 48 00 00       	call   f0107325 <allocate_frame>
f0102b19:	83 c4 10             	add    $0x10,%esp
f0102b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102b1f:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102b23:	75 1a                	jne    f0102b3f <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102b25:	83 ec 0c             	sub    $0xc,%esp
f0102b28:	68 ae 13 13 f0       	push   $0xf01313ae
f0102b2d:	e8 ff e2 ff ff       	call   f0100e31 <cprintf>
f0102b32:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b35:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b3a:	e9 b8 00 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102b3f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b43:	75 20                	jne    f0102b65 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102b45:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b51:	6a 06                	push   $0x6
f0102b53:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b56:	52                   	push   %edx
f0102b57:	50                   	push   %eax
f0102b58:	e8 63 4b 00 00       	call   f01076c0 <map_frame>
f0102b5d:	83 c4 10             	add    $0x10,%esp
f0102b60:	e9 8d 00 00 00       	jmp    f0102bf2 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b65:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b69:	0f 85 83 00 00 00    	jne    f0102bf2 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b72:	83 c0 0c             	add    $0xc,%eax
f0102b75:	8b 00                	mov    (%eax),%eax
f0102b77:	8a 00                	mov    (%eax),%al
f0102b79:	3c 72                	cmp    $0x72,%al
f0102b7b:	74 0e                	je     f0102b8b <command_allocuserpage+0x10c>
f0102b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b80:	83 c0 0c             	add    $0xc,%eax
f0102b83:	8b 00                	mov    (%eax),%eax
f0102b85:	8a 00                	mov    (%eax),%al
f0102b87:	3c 52                	cmp    $0x52,%al
f0102b89:	75 09                	jne    f0102b94 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b92:	eb 3c                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b97:	83 c0 0c             	add    $0xc,%eax
f0102b9a:	8b 00                	mov    (%eax),%eax
f0102b9c:	8a 00                	mov    (%eax),%al
f0102b9e:	3c 77                	cmp    $0x77,%al
f0102ba0:	74 0e                	je     f0102bb0 <command_allocuserpage+0x131>
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 0c             	add    $0xc,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	8a 00                	mov    (%eax),%al
f0102bac:	3c 57                	cmp    $0x57,%al
f0102bae:	75 09                	jne    f0102bb9 <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102bb0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102bb7:	eb 17                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102bb9:	83 ec 0c             	sub    $0xc,%esp
f0102bbc:	68 c8 13 13 f0       	push   $0xf01313c8
f0102bc1:	e8 6b e2 ff ff       	call   f0100e31 <cprintf>
f0102bc6:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102bc9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bd3:	83 c8 04             	or     $0x4,%eax
f0102bd6:	89 c1                	mov    %eax,%ecx
f0102bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102bdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bde:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102be4:	51                   	push   %ecx
f0102be5:	ff 75 ec             	pushl  -0x14(%ebp)
f0102be8:	52                   	push   %edx
f0102be9:	50                   	push   %eax
f0102bea:	e8 d1 4a 00 00       	call   f01076c0 <map_frame>
f0102bef:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	56                   	push   %esi
f0102bfd:	53                   	push   %ebx
f0102bfe:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102c01:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102c04:	83 ec 0c             	sub    $0xc,%esp
f0102c07:	50                   	push   %eax
f0102c08:	e8 23 4d 00 00       	call   f0107930 <calculate_available_frames>
f0102c0d:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102c13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102c19:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102c1c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102c1f:	01 de                	add    %ebx,%esi
f0102c21:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c24:	01 f3                	add    %esi,%ebx
f0102c26:	83 ec 0c             	sub    $0xc,%esp
f0102c29:	51                   	push   %ecx
f0102c2a:	52                   	push   %edx
f0102c2b:	50                   	push   %eax
f0102c2c:	53                   	push   %ebx
f0102c2d:	68 0c 14 13 f0       	push   $0xf013140c
f0102c32:	e8 fa e1 ff ff       	call   f0100e31 <cprintf>
f0102c37:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102c3a:	a1 28 be 2b f0       	mov    0xf02bbe28,%eax
f0102c3f:	83 ec 08             	sub    $0x8,%esp
f0102c42:	50                   	push   %eax
f0102c43:	68 64 14 13 f0       	push   $0xf0131464
f0102c48:	e8 e4 e1 ff ff       	call   f0100e31 <cprintf>
f0102c4d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102c58:	5b                   	pop    %ebx
f0102c59:	5e                   	pop    %esi
f0102c5a:	5d                   	pop    %ebp
f0102c5b:	c3                   	ret    

f0102c5c <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102c5c:	55                   	push   %ebp
f0102c5d:	89 e5                	mov    %esp,%ebp
f0102c5f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c62:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c7a:	83 f8 02             	cmp    $0x2,%eax
f0102c7d:	74 39                	je     f0102cb8 <CreateEnv+0x5c>
f0102c7f:	83 f8 03             	cmp    $0x3,%eax
f0102c82:	75 1d                	jne    f0102ca1 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 08             	add    $0x8,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 04             	sub    $0x4,%esp
f0102c8f:	6a 0a                	push   $0xa
f0102c91:	6a 00                	push   $0x0
f0102c93:	50                   	push   %eax
f0102c94:	e8 c7 c6 02 00       	call   f012f360 <strtol>
f0102c99:	83 c4 10             	add    $0x10,%esp
f0102c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c9f:	eb 18                	jmp    f0102cb9 <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102ca1:	83 ec 0c             	sub    $0xc,%esp
f0102ca4:	68 a0 14 13 f0       	push   $0xf01314a0
f0102ca9:	e8 83 e1 ff ff       	call   f0100e31 <cprintf>
f0102cae:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102cb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cb6:	eb 58                	jmp    f0102d10 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102cb8:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102cb9:	83 ec 0c             	sub    $0xc,%esp
f0102cbc:	6a 02                	push   $0x2
f0102cbe:	e8 80 ab 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f0102cc3:	83 c4 10             	add    $0x10,%esp
f0102cc6:	85 c0                	test   %eax,%eax
f0102cc8:	74 07                	je     f0102cd1 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102cca:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102cd1:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102cd5:	76 19                	jbe    f0102cf0 <CreateEnv+0x94>
f0102cd7:	68 10 15 13 f0       	push   $0xf0131510
f0102cdc:	68 55 15 13 f0       	push   $0xf0131555
f0102ce1:	68 bb 01 00 00       	push   $0x1bb
f0102ce6:	68 6a 15 13 f0       	push   $0xf013156a
f0102ceb:	e8 c0 d4 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf3:	83 c0 04             	add    $0x4,%eax
f0102cf6:	8b 00                	mov    (%eax),%eax
f0102cf8:	ff 75 f0             	pushl  -0x10(%ebp)
f0102cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102cfe:	ff 75 ec             	pushl  -0x14(%ebp)
f0102d01:	50                   	push   %eax
f0102d02:	e8 c4 5f 00 00       	call   f0108ccb <env_create>
f0102d07:	83 c4 10             	add    $0x10,%esp
f0102d0a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102d10:	c9                   	leave  
f0102d11:	c3                   	ret    

f0102d12 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102d12:	55                   	push   %ebp
f0102d13:	89 e5                	mov    %esp,%ebp
f0102d15:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	ff 75 0c             	pushl  0xc(%ebp)
f0102d1e:	ff 75 08             	pushl  0x8(%ebp)
f0102d21:	e8 36 ff ff ff       	call   f0102c5c <CreateEnv>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102d2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d30:	75 07                	jne    f0102d39 <command_run_program+0x27>
f0102d32:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d37:	eb 46                	jmp    f0102d7f <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d3c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	50                   	push   %eax
f0102d43:	68 7e 15 13 f0       	push   $0xf013157e
f0102d48:	e8 e4 e0 ff ff       	call   f0100e31 <cprintf>
f0102d4d:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102d50:	c7 05 28 be 2b f0 00 	movl   $0x0,0xf02bbe28
f0102d57:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102d5a:	83 ec 0c             	sub    $0xc,%esp
f0102d5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d60:	e8 ce 25 00 00       	call   f0105333 <sched_new_env>
f0102d65:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d6e:	83 ec 0c             	sub    $0xc,%esp
f0102d71:	50                   	push   %eax
f0102d72:	e8 d9 25 00 00       	call   f0105350 <sched_run_env>
f0102d77:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
f0102d84:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8a:	83 c0 04             	add    $0x4,%eax
f0102d8d:	8b 00                	mov    (%eax),%eax
f0102d8f:	83 ec 04             	sub    $0x4,%esp
f0102d92:	6a 0a                	push   $0xa
f0102d94:	6a 00                	push   $0x0
f0102d96:	50                   	push   %eax
f0102d97:	e8 c4 c5 02 00       	call   f012f360 <strtol>
f0102d9c:	83 c4 10             	add    $0x10,%esp
f0102d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102da5:	83 ec 0c             	sub    $0xc,%esp
f0102da8:	50                   	push   %eax
f0102da9:	e8 63 28 00 00       	call   f0105611 <sched_kill_env>
f0102dae:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db6:	c9                   	leave  
f0102db7:	c3                   	ret    

f0102db8 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102db8:	55                   	push   %ebp
f0102db9:	89 e5                	mov    %esp,%ebp
f0102dbb:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102dbe:	83 ec 08             	sub    $0x8,%esp
f0102dc1:	ff 75 0c             	pushl  0xc(%ebp)
f0102dc4:	ff 75 08             	pushl  0x8(%ebp)
f0102dc7:	e8 90 fe ff ff       	call   f0102c5c <CreateEnv>
f0102dcc:	83 c4 10             	add    $0x10,%esp
f0102dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102dd6:	75 07                	jne    f0102ddf <commnad_load_env+0x27>
		return 0 ;
f0102dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ddd:	eb 2a                	jmp    f0102e09 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102ddf:	83 ec 0c             	sub    $0xc,%esp
f0102de2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102de5:	e8 49 25 00 00       	call   f0105333 <sched_new_env>
f0102dea:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102df0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102df3:	83 ec 08             	sub    $0x8,%esp
f0102df6:	50                   	push   %eax
f0102df7:	68 7e 15 13 f0       	push   $0xf013157e
f0102dfc:	e8 30 e0 ff ff       	call   f0100e31 <cprintf>
f0102e01:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102e04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e09:	c9                   	leave  
f0102e0a:	c3                   	ret    

f0102e0b <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102e0b:	55                   	push   %ebp
f0102e0c:	89 e5                	mov    %esp,%ebp
f0102e0e:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102e11:	c7 05 28 be 2b f0 00 	movl   $0x0,0xf02bbe28
f0102e18:	00 00 00 
	sched_run_all();
f0102e1b:	e8 ba 2d 00 00       	call   f0105bda <sched_run_all>

	return 0 ;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e25:	c9                   	leave  
f0102e26:	c3                   	ret    

f0102e27 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102e27:	55                   	push   %ebp
f0102e28:	89 e5                	mov    %esp,%ebp
f0102e2a:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102e2d:	e8 a6 2b 00 00       	call   f01059d8 <sched_print_all>

	return 0 ;
f0102e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e37:	c9                   	leave  
f0102e38:	c3                   	ret    

f0102e39 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102e39:	55                   	push   %ebp
f0102e3a:	89 e5                	mov    %esp,%ebp
f0102e3c:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102e3f:	e8 09 2e 00 00       	call   f0105c4d <sched_kill_all>

	return 0 ;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e49:	c9                   	leave  
f0102e4a:	c3                   	ret    

f0102e4b <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102e4b:	55                   	push   %ebp
f0102e4c:	89 e5                	mov    %esp,%ebp
f0102e4e:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102e51:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102e55:	7f 1a                	jg     f0102e71 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e57:	83 ec 0c             	sub    $0xc,%esp
f0102e5a:	68 94 15 13 f0       	push   $0xf0131594
f0102e5f:	e8 cd df ff ff       	call   f0100e31 <cprintf>
f0102e64:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e67:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e6c:	e9 83 00 00 00       	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e74:	83 c0 04             	add    $0x4,%eax
f0102e77:	8b 00                	mov    (%eax),%eax
f0102e79:	83 ec 04             	sub    $0x4,%esp
f0102e7c:	6a 0a                	push   $0xa
f0102e7e:	6a 00                	push   $0x0
f0102e80:	50                   	push   %eax
f0102e81:	e8 da c4 02 00       	call   f012f360 <strtol>
f0102e86:	83 c4 10             	add    $0x10,%esp
f0102e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e8c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e90:	75 20                	jne    f0102eb2 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e92:	83 ec 0c             	sub    $0xc,%esp
f0102e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e98:	e8 1b a9 00 00       	call   f010d7b8 <setPageReplacmentAlgorithmLRU>
f0102e9d:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 f4 15 13 f0       	push   $0xf01315f4
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
f0102eb0:	eb 3d                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102eb2:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102eb6:	75 20                	jne    f0102ed8 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102eb8:	83 ec 0c             	sub    $0xc,%esp
f0102ebb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ebe:	e8 f5 a8 00 00       	call   f010d7b8 <setPageReplacmentAlgorithmLRU>
f0102ec3:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 38 16 13 f0       	push   $0xf0131638
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	eb 17                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102ed8:	83 ec 0c             	sub    $0xc,%esp
f0102edb:	68 78 16 13 f0       	push   $0xf0131678
f0102ee0:	e8 4c df ff ff       	call   f0100e31 <cprintf>
f0102ee5:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102ee8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eed:	eb 05                	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102eef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ef4:	c9                   	leave  
f0102ef5:	c3                   	ret    

f0102ef6 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102ef6:	55                   	push   %ebp
f0102ef7:	89 e5                	mov    %esp,%ebp
f0102ef9:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102efc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eff:	83 c0 04             	add    $0x4,%eax
f0102f02:	8b 00                	mov    (%eax),%eax
f0102f04:	83 ec 04             	sub    $0x4,%esp
f0102f07:	6a 0a                	push   $0xa
f0102f09:	6a 00                	push   $0x0
f0102f0b:	50                   	push   %eax
f0102f0c:	e8 4f c4 02 00       	call   f012f360 <strtol>
f0102f11:	83 c4 10             	add    $0x10,%esp
f0102f14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102f17:	83 ec 0c             	sub    $0xc,%esp
f0102f1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f1d:	e8 09 a9 00 00       	call   f010d82b <setPageReplacmentAlgorithmNchanceCLOCK>
f0102f22:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102f25:	83 ec 0c             	sub    $0xc,%esp
f0102f28:	68 cc 16 13 f0       	push   $0xf01316cc
f0102f2d:	e8 ff de ff ff       	call   f0100e31 <cprintf>
f0102f32:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f3a:	c9                   	leave  
f0102f3b:	c3                   	ret    

f0102f3c <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102f3c:	55                   	push   %ebp
f0102f3d:	89 e5                	mov    %esp,%ebp
f0102f3f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102f42:	e8 a4 a8 00 00       	call   f010d7eb <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102f47:	83 ec 0c             	sub    $0xc,%esp
f0102f4a:	68 00 17 13 f0       	push   $0xf0131700
f0102f4f:	e8 dd de ff ff       	call   f0100e31 <cprintf>
f0102f54:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f57:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f5c:	c9                   	leave  
f0102f5d:	c3                   	ret    

f0102f5e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f5e:	55                   	push   %ebp
f0102f5f:	89 e5                	mov    %esp,%ebp
f0102f61:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f64:	e8 92 a8 00 00       	call   f010d7fb <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	68 2c 17 13 f0       	push   $0xf013172c
f0102f71:	e8 bb de ff ff       	call   f0100e31 <cprintf>
f0102f76:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f7e:	c9                   	leave  
f0102f7f:	c3                   	ret    

f0102f80 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f80:	55                   	push   %ebp
f0102f81:	89 e5                	mov    %esp,%ebp
f0102f83:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f86:	e8 80 a8 00 00       	call   f010d80b <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 54 17 13 f0       	push   $0xf0131754
f0102f93:	e8 99 de ff ff       	call   f0100e31 <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fa0:	c9                   	leave  
f0102fa1:	c3                   	ret    

f0102fa2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102fa2:	55                   	push   %ebp
f0102fa3:	89 e5                	mov    %esp,%ebp
f0102fa5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fab:	83 c0 04             	add    $0x4,%eax
f0102fae:	8b 00                	mov    (%eax),%eax
f0102fb0:	83 ec 04             	sub    $0x4,%esp
f0102fb3:	6a 0a                	push   $0xa
f0102fb5:	6a 00                	push   $0x0
f0102fb7:	50                   	push   %eax
f0102fb8:	e8 a3 c3 02 00       	call   f012f360 <strtol>
f0102fbd:	83 c4 10             	add    $0x10,%esp
f0102fc0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102fc3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102fc7:	83 ec 0c             	sub    $0xc,%esp
f0102fca:	50                   	push   %eax
f0102fcb:	e8 44 33 00 00       	call   f0106314 <sched_init_RR>
f0102fd0:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102fd3:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0102fd8:	0f b6 c0             	movzbl %al,%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	50                   	push   %eax
f0102fdf:	68 88 17 13 f0       	push   $0xf0131788
f0102fe4:	e8 48 de ff ff       	call   f0100e31 <cprintf>
f0102fe9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff1:	c9                   	leave  
f0102ff2:	c3                   	ret    

f0102ff3 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102ff3:	55                   	push   %ebp
f0102ff4:	89 e5                	mov    %esp,%ebp
f0102ff6:	53                   	push   %ebx
f0102ff7:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ffd:	83 c0 04             	add    $0x4,%eax
f0103000:	8b 00                	mov    (%eax),%eax
f0103002:	83 ec 04             	sub    $0x4,%esp
f0103005:	6a 0a                	push   $0xa
f0103007:	6a 00                	push   $0x0
f0103009:	50                   	push   %eax
f010300a:	e8 51 c3 02 00       	call   f012f360 <strtol>
f010300f:	83 c4 10             	add    $0x10,%esp
f0103012:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103015:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010301c:	eb 2e                	jmp    f010304c <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f010301e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103021:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0103024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103027:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010302e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103031:	01 d0                	add    %edx,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 04             	sub    $0x4,%esp
f0103038:	6a 0a                	push   $0xa
f010303a:	6a 00                	push   $0x0
f010303c:	50                   	push   %eax
f010303d:	e8 1e c3 02 00       	call   f012f360 <strtol>
f0103042:	83 c4 10             	add    $0x10,%esp
f0103045:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103049:	ff 45 f4             	incl   -0xc(%ebp)
f010304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010304f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103052:	7c ca                	jl     f010301e <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0103054:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0103058:	83 ec 08             	sub    $0x8,%esp
f010305b:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010305e:	52                   	push   %edx
f010305f:	50                   	push   %eax
f0103060:	e8 05 33 00 00       	call   f010636a <sched_init_MLFQ>
f0103065:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 c0 17 13 f0       	push   $0xf01317c0
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010307f:	eb 21                	jmp    f01030a2 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103081:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103084:	05 e8 bd 2b f0       	add    $0xf02bbde8,%eax
f0103089:	8a 00                	mov    (%eax),%al
f010308b:	0f b6 c0             	movzbl %al,%eax
f010308e:	83 ec 08             	sub    $0x8,%esp
f0103091:	50                   	push   %eax
f0103092:	68 ed 17 13 f0       	push   $0xf01317ed
f0103097:	e8 95 dd ff ff       	call   f0100e31 <cprintf>
f010309c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010309f:	ff 45 f0             	incl   -0x10(%ebp)
f01030a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01030a7:	0f b6 c0             	movzbl %al,%eax
f01030aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01030ad:	7f d2                	jg     f0103081 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01030af:	83 ec 0c             	sub    $0xc,%esp
f01030b2:	68 71 13 13 f0       	push   $0xf0131371
f01030b7:	e8 75 dd ff ff       	call   f0100e31 <cprintf>
f01030bc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030c7:	c9                   	leave  
f01030c8:	c3                   	ret    

f01030c9 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f01030c9:	55                   	push   %ebp
f01030ca:	89 e5                	mov    %esp,%ebp
f01030cc:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01030cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030d2:	83 c0 04             	add    $0x4,%eax
f01030d5:	8b 00                	mov    (%eax),%eax
f01030d7:	83 ec 04             	sub    $0x4,%esp
f01030da:	6a 0a                	push   $0xa
f01030dc:	6a 00                	push   $0x0
f01030de:	50                   	push   %eax
f01030df:	e8 7c c2 02 00       	call   f012f360 <strtol>
f01030e4:	83 c4 10             	add    $0x10,%esp
f01030e7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01030ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030ed:	83 c0 08             	add    $0x8,%eax
f01030f0:	8b 00                	mov    (%eax),%eax
f01030f2:	83 ec 04             	sub    $0x4,%esp
f01030f5:	6a 0a                	push   $0xa
f01030f7:	6a 00                	push   $0x0
f01030f9:	50                   	push   %eax
f01030fa:	e8 61 c2 02 00       	call   f012f360 <strtol>
f01030ff:	83 c4 10             	add    $0x10,%esp
f0103102:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0103105:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0103109:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010310d:	83 ec 08             	sub    $0x8,%esp
f0103110:	52                   	push   %edx
f0103111:	50                   	push   %eax
f0103112:	e8 62 32 00 00       	call   f0106379 <sched_init_BSD>
f0103117:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f010311a:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f010311e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103122:	83 ec 04             	sub    $0x4,%esp
f0103125:	52                   	push   %edx
f0103126:	50                   	push   %eax
f0103127:	68 f4 17 13 f0       	push   $0xf01317f4
f010312c:	e8 00 dd ff ff       	call   f0100e31 <cprintf>
f0103131:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0103134:	83 ec 0c             	sub    $0xc,%esp
f0103137:	68 71 13 13 f0       	push   $0xf0131371
f010313c:	e8 f0 dc ff ff       	call   f0100e31 <cprintf>
f0103141:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103144:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103149:	c9                   	leave  
f010314a:	c3                   	ret    

f010314b <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010314b:	55                   	push   %ebp
f010314c:	89 e5                	mov    %esp,%ebp
f010314e:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103151:	e8 43 30 00 00       	call   f0106199 <isSchedMethodMLFQ>
f0103156:	85 c0                	test   %eax,%eax
f0103158:	74 59                	je     f01031b3 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010315a:	83 ec 0c             	sub    $0xc,%esp
f010315d:	68 30 18 13 f0       	push   $0xf0131830
f0103162:	e8 ca dc ff ff       	call   f0100e31 <cprintf>
f0103167:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010316a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103171:	eb 21                	jmp    f0103194 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103176:	05 e8 bd 2b f0       	add    $0xf02bbde8,%eax
f010317b:	8a 00                	mov    (%eax),%al
f010317d:	0f b6 c0             	movzbl %al,%eax
f0103180:	83 ec 08             	sub    $0x8,%esp
f0103183:	50                   	push   %eax
f0103184:	68 ed 17 13 f0       	push   $0xf01317ed
f0103189:	e8 a3 dc ff ff       	call   f0100e31 <cprintf>
f010318e:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103191:	ff 45 f4             	incl   -0xc(%ebp)
f0103194:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0103199:	0f b6 c0             	movzbl %al,%eax
f010319c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010319f:	7f d2                	jg     f0103173 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01031a1:	83 ec 0c             	sub    $0xc,%esp
f01031a4:	68 71 13 13 f0       	push   $0xf0131371
f01031a9:	e8 83 dc ff ff       	call   f0100e31 <cprintf>
f01031ae:	83 c4 10             	add    $0x10,%esp
f01031b1:	eb 61                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f01031b3:	e8 c7 2f 00 00       	call   f010617f <isSchedMethodRR>
f01031b8:	85 c0                	test   %eax,%eax
f01031ba:	74 1b                	je     f01031d7 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01031bc:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f01031c1:	0f b6 c0             	movzbl %al,%eax
f01031c4:	83 ec 08             	sub    $0x8,%esp
f01031c7:	50                   	push   %eax
f01031c8:	68 64 18 13 f0       	push   $0xf0131864
f01031cd:	e8 5f dc ff ff       	call   f0100e31 <cprintf>
f01031d2:	83 c4 10             	add    $0x10,%esp
f01031d5:	eb 3d                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f01031d7:	e8 d8 2f 00 00       	call   f01061b4 <isSchedMethodBSD>
f01031dc:	85 c0                	test   %eax,%eax
f01031de:	74 24                	je     f0103204 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f01031e0:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f01031e5:	0f b6 d0             	movzbl %al,%edx
f01031e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01031ed:	0f b6 c0             	movzbl %al,%eax
f01031f0:	83 ec 04             	sub    $0x4,%esp
f01031f3:	52                   	push   %edx
f01031f4:	50                   	push   %eax
f01031f5:	68 f4 17 13 f0       	push   $0xf01317f4
f01031fa:	e8 32 dc ff ff       	call   f0100e31 <cprintf>
f01031ff:	83 c4 10             	add    $0x10,%esp
f0103202:	eb 10                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0103204:	83 ec 0c             	sub    $0xc,%esp
f0103207:	68 a0 18 13 f0       	push   $0xf01318a0
f010320c:	e8 20 dc ff ff       	call   f0100e31 <cprintf>
f0103211:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103214:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103219:	c9                   	leave  
f010321a:	c3                   	ret    

f010321b <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010321b:	55                   	push   %ebp
f010321c:	89 e5                	mov    %esp,%ebp
f010321e:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0103221:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103224:	83 c0 04             	add    $0x4,%eax
f0103227:	8b 00                	mov    (%eax),%eax
f0103229:	83 ec 04             	sub    $0x4,%esp
f010322c:	6a 0a                	push   $0xa
f010322e:	6a 00                	push   $0x0
f0103230:	50                   	push   %eax
f0103231:	e8 2a c1 02 00       	call   f012f360 <strtol>
f0103236:	83 c4 10             	add    $0x10,%esp
f0103239:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010323c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010323f:	0f b6 c0             	movzbl %al,%eax
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	50                   	push   %eax
f0103246:	e8 52 b0 02 00       	call   f012e29d <chksch>
f010324b:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010324e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103252:	75 12                	jne    f0103266 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0103254:	83 ec 0c             	sub    $0xc,%esp
f0103257:	68 c8 18 13 f0       	push   $0xf01318c8
f010325c:	e8 d0 db ff ff       	call   f0100e31 <cprintf>
f0103261:	83 c4 10             	add    $0x10,%esp
f0103264:	eb 16                	jmp    f010327c <command_sch_test+0x61>
	else if (status == 1)
f0103266:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010326a:	75 10                	jne    f010327c <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010326c:	83 ec 0c             	sub    $0xc,%esp
f010326f:	68 f0 18 13 f0       	push   $0xf01318f0
f0103274:	e8 b8 db ff ff       	call   f0100e31 <cprintf>
f0103279:	83 c4 10             	add    $0x10,%esp
	return 0;
f010327c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103281:	c9                   	leave  
f0103282:	c3                   	ret    

f0103283 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103283:	55                   	push   %ebp
f0103284:	89 e5                	mov    %esp,%ebp
f0103286:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103289:	e8 cb a5 00 00       	call   f010d859 <isPageReplacmentAlgorithmCLOCK>
f010328e:	85 c0                	test   %eax,%eax
f0103290:	74 15                	je     f01032a7 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103292:	83 ec 0c             	sub    $0xc,%esp
f0103295:	68 14 19 13 f0       	push   $0xf0131914
f010329a:	e8 92 db ff ff       	call   f0100e31 <cprintf>
f010329f:	83 c4 10             	add    $0x10,%esp
f01032a2:	e9 8c 00 00 00       	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01032a7:	83 ec 0c             	sub    $0xc,%esp
f01032aa:	6a 01                	push   $0x1
f01032ac:	e8 92 a5 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f01032b1:	83 c4 10             	add    $0x10,%esp
f01032b4:	85 c0                	test   %eax,%eax
f01032b6:	74 12                	je     f01032ca <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01032b8:	83 ec 0c             	sub    $0xc,%esp
f01032bb:	68 3c 19 13 f0       	push   $0xf013193c
f01032c0:	e8 6c db ff ff       	call   f0100e31 <cprintf>
f01032c5:	83 c4 10             	add    $0x10,%esp
f01032c8:	eb 69                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01032ca:	83 ec 0c             	sub    $0xc,%esp
f01032cd:	6a 02                	push   $0x2
f01032cf:	e8 6f a5 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f01032d4:	83 c4 10             	add    $0x10,%esp
f01032d7:	85 c0                	test   %eax,%eax
f01032d9:	74 12                	je     f01032ed <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01032db:	83 ec 0c             	sub    $0xc,%esp
f01032de:	68 7c 19 13 f0       	push   $0xf013197c
f01032e3:	e8 49 db ff ff       	call   f0100e31 <cprintf>
f01032e8:	83 c4 10             	add    $0x10,%esp
f01032eb:	eb 46                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01032ed:	e8 82 a5 00 00       	call   f010d874 <isPageReplacmentAlgorithmFIFO>
f01032f2:	85 c0                	test   %eax,%eax
f01032f4:	74 12                	je     f0103308 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01032f6:	83 ec 0c             	sub    $0xc,%esp
f01032f9:	68 b8 19 13 f0       	push   $0xf01319b8
f01032fe:	e8 2e db ff ff       	call   f0100e31 <cprintf>
f0103303:	83 c4 10             	add    $0x10,%esp
f0103306:	eb 2b                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0103308:	e8 82 a5 00 00       	call   f010d88f <isPageReplacmentAlgorithmModifiedCLOCK>
f010330d:	85 c0                	test   %eax,%eax
f010330f:	74 12                	je     f0103323 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0103311:	83 ec 0c             	sub    $0xc,%esp
f0103314:	68 dc 19 13 f0       	push   $0xf01319dc
f0103319:	e8 13 db ff ff       	call   f0100e31 <cprintf>
f010331e:	83 c4 10             	add    $0x10,%esp
f0103321:	eb 10                	jmp    f0103333 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0103323:	83 ec 0c             	sub    $0xc,%esp
f0103326:	68 0c 1a 13 f0       	push   $0xf0131a0c
f010332b:	e8 01 db ff ff       	call   f0100e31 <cprintf>
f0103330:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103333:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103338:	c9                   	leave  
f0103339:	c3                   	ret    

f010333a <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010333a:	55                   	push   %ebp
f010333b:	89 e5                	mov    %esp,%ebp
f010333d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0103340:	e8 b4 ef ff ff       	call   f01022f9 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0103345:	83 ec 0c             	sub    $0xc,%esp
f0103348:	68 38 1a 13 f0       	push   $0xf0131a38
f010334d:	e8 df da ff ff       	call   f0100e31 <cprintf>
f0103352:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103355:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010335a:	c9                   	leave  
f010335b:	c3                   	ret    

f010335c <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010335c:	55                   	push   %ebp
f010335d:	89 e5                	mov    %esp,%ebp
f010335f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103362:	e8 a2 ef ff ff       	call   f0102309 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103367:	83 ec 0c             	sub    $0xc,%esp
f010336a:	68 68 1a 13 f0       	push   $0xf0131a68
f010336f:	e8 bd da ff ff       	call   f0100e31 <cprintf>
f0103374:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103377:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337c:	c9                   	leave  
f010337d:	c3                   	ret    

f010337e <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010337e:	55                   	push   %ebp
f010337f:	89 e5                	mov    %esp,%ebp
f0103381:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103384:	e8 90 ef ff ff       	call   f0102319 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103389:	83 ec 0c             	sub    $0xc,%esp
f010338c:	68 98 1a 13 f0       	push   $0xf0131a98
f0103391:	e8 9b da ff ff       	call   f0100e31 <cprintf>
f0103396:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103399:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010339e:	c9                   	leave  
f010339f:	c3                   	ret    

f01033a0 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01033a0:	55                   	push   %ebp
f01033a1:	89 e5                	mov    %esp,%ebp
f01033a3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01033a6:	e8 7e ef ff ff       	call   f0102329 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01033ab:	83 ec 0c             	sub    $0xc,%esp
f01033ae:	68 c8 1a 13 f0       	push   $0xf0131ac8
f01033b3:	e8 79 da ff ff       	call   f0100e31 <cprintf>
f01033b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033c0:	c9                   	leave  
f01033c1:	c3                   	ret    

f01033c2 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01033c2:	55                   	push   %ebp
f01033c3:	89 e5                	mov    %esp,%ebp
f01033c5:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01033c8:	e8 6c ef ff ff       	call   f0102339 <isUHeapPlacementStrategyFIRSTFIT>
f01033cd:	84 c0                	test   %al,%al
f01033cf:	74 12                	je     f01033e3 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01033d1:	83 ec 0c             	sub    $0xc,%esp
f01033d4:	68 f8 1a 13 f0       	push   $0xf0131af8
f01033d9:	e8 53 da ff ff       	call   f0100e31 <cprintf>
f01033de:	83 c4 10             	add    $0x10,%esp
f01033e1:	eb 61                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01033e3:	e8 66 ef ff ff       	call   f010234e <isUHeapPlacementStrategyBESTFIT>
f01033e8:	84 c0                	test   %al,%al
f01033ea:	74 12                	je     f01033fe <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01033ec:	83 ec 0c             	sub    $0xc,%esp
f01033ef:	68 24 1b 13 f0       	push   $0xf0131b24
f01033f4:	e8 38 da ff ff       	call   f0100e31 <cprintf>
f01033f9:	83 c4 10             	add    $0x10,%esp
f01033fc:	eb 46                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033fe:	e8 60 ef ff ff       	call   f0102363 <isUHeapPlacementStrategyNEXTFIT>
f0103403:	84 c0                	test   %al,%al
f0103405:	74 12                	je     f0103419 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0103407:	83 ec 0c             	sub    $0xc,%esp
f010340a:	68 50 1b 13 f0       	push   $0xf0131b50
f010340f:	e8 1d da ff ff       	call   f0100e31 <cprintf>
f0103414:	83 c4 10             	add    $0x10,%esp
f0103417:	eb 2b                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0103419:	e8 5a ef ff ff       	call   f0102378 <isUHeapPlacementStrategyWORSTFIT>
f010341e:	84 c0                	test   %al,%al
f0103420:	74 12                	je     f0103434 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103422:	83 ec 0c             	sub    $0xc,%esp
f0103425:	68 7c 1b 13 f0       	push   $0xf0131b7c
f010342a:	e8 02 da ff ff       	call   f0100e31 <cprintf>
f010342f:	83 c4 10             	add    $0x10,%esp
f0103432:	eb 10                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103434:	83 ec 0c             	sub    $0xc,%esp
f0103437:	68 a8 1b 13 f0       	push   $0xf0131ba8
f010343c:	e8 f0 d9 ff ff       	call   f0100e31 <cprintf>
f0103441:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103444:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103449:	c9                   	leave  
f010344a:	c3                   	ret    

f010344b <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
f010344e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103451:	e8 eb ed ff ff       	call   f0102241 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103456:	83 ec 0c             	sub    $0xc,%esp
f0103459:	68 d4 1b 13 f0       	push   $0xf0131bd4
f010345e:	e8 ce d9 ff ff       	call   f0100e31 <cprintf>
f0103463:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010346b:	c9                   	leave  
f010346c:	c3                   	ret    

f010346d <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010346d:	55                   	push   %ebp
f010346e:	89 e5                	mov    %esp,%ebp
f0103470:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103473:	e8 d9 ed ff ff       	call   f0102251 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103478:	83 ec 0c             	sub    $0xc,%esp
f010347b:	68 d4 1b 13 f0       	push   $0xf0131bd4
f0103480:	e8 ac d9 ff ff       	call   f0100e31 <cprintf>
f0103485:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103488:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010348d:	c9                   	leave  
f010348e:	c3                   	ret    

f010348f <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010348f:	55                   	push   %ebp
f0103490:	89 e5                	mov    %esp,%ebp
f0103492:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103495:	e8 c7 ed ff ff       	call   f0102261 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010349a:	83 ec 0c             	sub    $0xc,%esp
f010349d:	68 08 1c 13 f0       	push   $0xf0131c08
f01034a2:	e8 8a d9 ff ff       	call   f0100e31 <cprintf>
f01034a7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034af:	c9                   	leave  
f01034b0:	c3                   	ret    

f01034b1 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01034b1:	55                   	push   %ebp
f01034b2:	89 e5                	mov    %esp,%ebp
f01034b4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01034b7:	e8 b5 ed ff ff       	call   f0102271 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01034bc:	83 ec 0c             	sub    $0xc,%esp
f01034bf:	68 38 1c 13 f0       	push   $0xf0131c38
f01034c4:	e8 68 d9 ff ff       	call   f0100e31 <cprintf>
f01034c9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d1:	c9                   	leave  
f01034d2:	c3                   	ret    

f01034d3 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01034d3:	55                   	push   %ebp
f01034d4:	89 e5                	mov    %esp,%ebp
f01034d6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01034d9:	e8 a3 ed ff ff       	call   f0102281 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01034de:	83 ec 0c             	sub    $0xc,%esp
f01034e1:	68 68 1c 13 f0       	push   $0xf0131c68
f01034e6:	e8 46 d9 ff ff       	call   f0100e31 <cprintf>
f01034eb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034f3:	c9                   	leave  
f01034f4:	c3                   	ret    

f01034f5 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01034f5:	55                   	push   %ebp
f01034f6:	89 e5                	mov    %esp,%ebp
f01034f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01034fb:	e8 91 ed ff ff       	call   f0102291 <isKHeapPlacementStrategyCONTALLOC>
f0103500:	84 c0                	test   %al,%al
f0103502:	74 12                	je     f0103516 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103504:	83 ec 0c             	sub    $0xc,%esp
f0103507:	68 9c 1c 13 f0       	push   $0xf0131c9c
f010350c:	e8 20 d9 ff ff       	call   f0100e31 <cprintf>
f0103511:	83 c4 10             	add    $0x10,%esp
f0103514:	eb 7c                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0103516:	e8 8a ed ff ff       	call   f01022a5 <isKHeapPlacementStrategyFIRSTFIT>
f010351b:	84 c0                	test   %al,%al
f010351d:	74 12                	je     f0103531 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010351f:	83 ec 0c             	sub    $0xc,%esp
f0103522:	68 d8 1c 13 f0       	push   $0xf0131cd8
f0103527:	e8 05 d9 ff ff       	call   f0100e31 <cprintf>
f010352c:	83 c4 10             	add    $0x10,%esp
f010352f:	eb 61                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103531:	e8 84 ed ff ff       	call   f01022ba <isKHeapPlacementStrategyBESTFIT>
f0103536:	84 c0                	test   %al,%al
f0103538:	74 12                	je     f010354c <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010353a:	83 ec 0c             	sub    $0xc,%esp
f010353d:	68 08 1d 13 f0       	push   $0xf0131d08
f0103542:	e8 ea d8 ff ff       	call   f0100e31 <cprintf>
f0103547:	83 c4 10             	add    $0x10,%esp
f010354a:	eb 46                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010354c:	e8 7e ed ff ff       	call   f01022cf <isKHeapPlacementStrategyNEXTFIT>
f0103551:	84 c0                	test   %al,%al
f0103553:	74 12                	je     f0103567 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103555:	83 ec 0c             	sub    $0xc,%esp
f0103558:	68 34 1d 13 f0       	push   $0xf0131d34
f010355d:	e8 cf d8 ff ff       	call   f0100e31 <cprintf>
f0103562:	83 c4 10             	add    $0x10,%esp
f0103565:	eb 2b                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103567:	e8 78 ed ff ff       	call   f01022e4 <isKHeapPlacementStrategyWORSTFIT>
f010356c:	84 c0                	test   %al,%al
f010356e:	74 12                	je     f0103582 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103570:	83 ec 0c             	sub    $0xc,%esp
f0103573:	68 60 1d 13 f0       	push   $0xf0131d60
f0103578:	e8 b4 d8 ff ff       	call   f0100e31 <cprintf>
f010357d:	83 c4 10             	add    $0x10,%esp
f0103580:	eb 10                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103582:	83 ec 0c             	sub    $0xc,%esp
f0103585:	68 90 1d 13 f0       	push   $0xf0131d90
f010358a:	e8 a2 d8 ff ff       	call   f0100e31 <cprintf>
f010358f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103592:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103597:	c9                   	leave  
f0103598:	c3                   	ret    

f0103599 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103599:	55                   	push   %ebp
f010359a:	89 e5                	mov    %esp,%ebp
f010359c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010359f:	e8 62 a3 00 00       	call   f010d906 <isBufferingEnabled>
f01035a4:	84 c0                	test   %al,%al
f01035a6:	75 12                	jne    f01035ba <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035a8:	83 ec 0c             	sub    $0xc,%esp
f01035ab:	68 c0 1d 13 f0       	push   $0xf0131dc0
f01035b0:	e8 7c d8 ff ff       	call   f0100e31 <cprintf>
f01035b5:	83 c4 10             	add    $0x10,%esp
f01035b8:	eb 1d                	jmp    f01035d7 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01035ba:	83 ec 0c             	sub    $0xc,%esp
f01035bd:	6a 00                	push   $0x0
f01035bf:	e8 1c a3 00 00       	call   f010d8e0 <enableModifiedBuffer>
f01035c4:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01035c7:	83 ec 0c             	sub    $0xc,%esp
f01035ca:	68 fc 1d 13 f0       	push   $0xf0131dfc
f01035cf:	e8 5d d8 ff ff       	call   f0100e31 <cprintf>
f01035d4:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035dc:	c9                   	leave  
f01035dd:	c3                   	ret    

f01035de <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01035de:	55                   	push   %ebp
f01035df:	89 e5                	mov    %esp,%ebp
f01035e1:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01035e4:	e8 1d a3 00 00       	call   f010d906 <isBufferingEnabled>
f01035e9:	84 c0                	test   %al,%al
f01035eb:	75 12                	jne    f01035ff <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035ed:	83 ec 0c             	sub    $0xc,%esp
f01035f0:	68 c0 1d 13 f0       	push   $0xf0131dc0
f01035f5:	e8 37 d8 ff ff       	call   f0100e31 <cprintf>
f01035fa:	83 c4 10             	add    $0x10,%esp
f01035fd:	eb 1d                	jmp    f010361c <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035ff:	83 ec 0c             	sub    $0xc,%esp
f0103602:	6a 01                	push   $0x1
f0103604:	e8 d7 a2 00 00       	call   f010d8e0 <enableModifiedBuffer>
f0103609:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010360c:	83 ec 0c             	sub    $0xc,%esp
f010360f:	68 20 1e 13 f0       	push   $0xf0131e20
f0103614:	e8 18 d8 ff ff       	call   f0100e31 <cprintf>
f0103619:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010361c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103621:	c9                   	leave  
f0103622:	c3                   	ret    

f0103623 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103623:	55                   	push   %ebp
f0103624:	89 e5                	mov    %esp,%ebp
f0103626:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0103629:	83 ec 0c             	sub    $0xc,%esp
f010362c:	6a 00                	push   $0x0
f010362e:	e8 c5 a2 00 00       	call   f010d8f8 <enableBuffering>
f0103633:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0103636:	83 ec 0c             	sub    $0xc,%esp
f0103639:	6a 00                	push   $0x0
f010363b:	e8 a0 a2 00 00       	call   f010d8e0 <enableModifiedBuffer>
f0103640:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103643:	83 ec 0c             	sub    $0xc,%esp
f0103646:	68 40 1e 13 f0       	push   $0xf0131e40
f010364b:	e8 e1 d7 ff ff       	call   f0100e31 <cprintf>
f0103650:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103653:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103658:	c9                   	leave  
f0103659:	c3                   	ret    

f010365a <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010365a:	55                   	push   %ebp
f010365b:	89 e5                	mov    %esp,%ebp
f010365d:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103660:	83 ec 0c             	sub    $0xc,%esp
f0103663:	6a 01                	push   $0x1
f0103665:	e8 8e a2 00 00       	call   f010d8f8 <enableBuffering>
f010366a:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010366d:	83 ec 0c             	sub    $0xc,%esp
f0103670:	6a 01                	push   $0x1
f0103672:	e8 69 a2 00 00       	call   f010d8e0 <enableModifiedBuffer>
f0103677:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010367a:	e8 9f a2 00 00       	call   f010d91e <getModifiedBufferLength>
f010367f:	85 c0                	test   %eax,%eax
f0103681:	75 59                	jne    f01036dc <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103683:	83 ec 0c             	sub    $0xc,%esp
f0103686:	68 5c 1e 13 f0       	push   $0xf0131e5c
f010368b:	e8 a1 d7 ff ff       	call   f0100e31 <cprintf>
f0103690:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103699:	50                   	push   %eax
f010369a:	68 8c 1e 13 f0       	push   $0xf0131e8c
f010369f:	e8 56 b7 02 00       	call   f012edfa <readline>
f01036a4:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01036a7:	83 ec 04             	sub    $0x4,%esp
f01036aa:	6a 0a                	push   $0xa
f01036ac:	6a 00                	push   $0x0
f01036ae:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01036b1:	50                   	push   %eax
f01036b2:	e8 a9 bc 02 00       	call   f012f360 <strtol>
f01036b7:	83 c4 10             	add    $0x10,%esp
f01036ba:	83 ec 0c             	sub    $0xc,%esp
f01036bd:	50                   	push   %eax
f01036be:	e8 4d a2 00 00       	call   f010d910 <setModifiedBufferLength>
f01036c3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036c6:	e8 53 a2 00 00       	call   f010d91e <getModifiedBufferLength>
f01036cb:	83 ec 08             	sub    $0x8,%esp
f01036ce:	50                   	push   %eax
f01036cf:	68 b8 1e 13 f0       	push   $0xf0131eb8
f01036d4:	e8 58 d7 ff ff       	call   f0100e31 <cprintf>
f01036d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01036dc:	83 ec 0c             	sub    $0xc,%esp
f01036df:	68 dd 1e 13 f0       	push   $0xf0131edd
f01036e4:	e8 48 d7 ff ff       	call   f0100e31 <cprintf>
f01036e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01036f9:	e8 08 a2 00 00       	call   f010d906 <isBufferingEnabled>
f01036fe:	84 c0                	test   %al,%al
f0103700:	75 12                	jne    f0103714 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103702:	83 ec 0c             	sub    $0xc,%esp
f0103705:	68 f8 1e 13 f0       	push   $0xf0131ef8
f010370a:	e8 22 d7 ff ff       	call   f0100e31 <cprintf>
f010370f:	83 c4 10             	add    $0x10,%esp
f0103712:	eb 19                	jmp    f010372d <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103714:	e8 d5 a1 00 00       	call   f010d8ee <isModifiedBufferEnabled>
f0103719:	84 c0                	test   %al,%al
f010371b:	75 10                	jne    f010372d <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010371d:	83 ec 0c             	sub    $0xc,%esp
f0103720:	68 48 1f 13 f0       	push   $0xf0131f48
f0103725:	e8 07 d7 ff ff       	call   f0100e31 <cprintf>
f010372a:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010372d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103730:	83 c0 04             	add    $0x4,%eax
f0103733:	8b 00                	mov    (%eax),%eax
f0103735:	83 ec 04             	sub    $0x4,%esp
f0103738:	6a 0a                	push   $0xa
f010373a:	6a 00                	push   $0x0
f010373c:	50                   	push   %eax
f010373d:	e8 1e bc 02 00       	call   f012f360 <strtol>
f0103742:	83 c4 10             	add    $0x10,%esp
f0103745:	83 ec 0c             	sub    $0xc,%esp
f0103748:	50                   	push   %eax
f0103749:	e8 c2 a1 00 00       	call   f010d910 <setModifiedBufferLength>
f010374e:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103751:	e8 c8 a1 00 00       	call   f010d91e <getModifiedBufferLength>
f0103756:	83 ec 08             	sub    $0x8,%esp
f0103759:	50                   	push   %eax
f010375a:	68 b8 1e 13 f0       	push   $0xf0131eb8
f010375f:	e8 cd d6 ff ff       	call   f0100e31 <cprintf>
f0103764:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010376c:	c9                   	leave  
f010376d:	c3                   	ret    

f010376e <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010376e:	55                   	push   %ebp
f010376f:	89 e5                	mov    %esp,%ebp
f0103771:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103774:	e8 8d a1 00 00       	call   f010d906 <isBufferingEnabled>
f0103779:	84 c0                	test   %al,%al
f010377b:	75 12                	jne    f010378f <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010377d:	83 ec 0c             	sub    $0xc,%esp
f0103780:	68 f8 1e 13 f0       	push   $0xf0131ef8
f0103785:	e8 a7 d6 ff ff       	call   f0100e31 <cprintf>
f010378a:	83 c4 10             	add    $0x10,%esp
f010378d:	eb 19                	jmp    f01037a8 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010378f:	e8 5a a1 00 00       	call   f010d8ee <isModifiedBufferEnabled>
f0103794:	84 c0                	test   %al,%al
f0103796:	75 10                	jne    f01037a8 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103798:	83 ec 0c             	sub    $0xc,%esp
f010379b:	68 48 1f 13 f0       	push   $0xf0131f48
f01037a0:	e8 8c d6 ff ff       	call   f0100e31 <cprintf>
f01037a5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01037a8:	e8 71 a1 00 00       	call   f010d91e <getModifiedBufferLength>
f01037ad:	83 ec 08             	sub    $0x8,%esp
f01037b0:	50                   	push   %eax
f01037b1:	68 8e 1f 13 f0       	push   $0xf0131f8e
f01037b6:	e8 76 d6 ff ff       	call   f0100e31 <cprintf>
f01037bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037c3:	c9                   	leave  
f01037c4:	c3                   	ret    

f01037c5 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01037c5:	55                   	push   %ebp
f01037c6:	89 e5                	mov    %esp,%ebp
f01037c8:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01037cb:	83 ec 08             	sub    $0x8,%esp
f01037ce:	ff 75 0c             	pushl  0xc(%ebp)
f01037d1:	ff 75 08             	pushl  0x8(%ebp)
f01037d4:	e8 8b a5 00 00       	call   f010dd64 <tst_handler>
f01037d9:	83 c4 10             	add    $0x10,%esp
}
f01037dc:	c9                   	leave  
f01037dd:	c3                   	ret    

f01037de <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01037de:	55                   	push   %ebp
f01037df:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01037e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01037e4:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f01037ea:	29 d0                	sub    %edx,%eax
f01037ec:	c1 f8 02             	sar    $0x2,%eax
f01037ef:	89 c2                	mov    %eax,%edx
f01037f1:	89 d0                	mov    %edx,%eax
f01037f3:	c1 e0 03             	shl    $0x3,%eax
f01037f6:	01 d0                	add    %edx,%eax
f01037f8:	c1 e0 03             	shl    $0x3,%eax
f01037fb:	01 d0                	add    %edx,%eax
f01037fd:	c1 e0 03             	shl    $0x3,%eax
f0103800:	01 d0                	add    %edx,%eax
f0103802:	c1 e0 03             	shl    $0x3,%eax
f0103805:	01 d0                	add    %edx,%eax
f0103807:	89 c1                	mov    %eax,%ecx
f0103809:	c1 e1 0f             	shl    $0xf,%ecx
f010380c:	01 c8                	add    %ecx,%eax
f010380e:	c1 e0 03             	shl    $0x3,%eax
f0103811:	01 d0                	add    %edx,%eax
f0103813:	f7 d8                	neg    %eax
}
f0103815:	5d                   	pop    %ebp
f0103816:	c3                   	ret    

f0103817 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103817:	55                   	push   %ebp
f0103818:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010381a:	ff 75 08             	pushl  0x8(%ebp)
f010381d:	e8 bc ff ff ff       	call   f01037de <to_frame_number>
f0103822:	83 c4 04             	add    $0x4,%esp
f0103825:	c1 e0 0c             	shl    $0xc,%eax
}
f0103828:	c9                   	leave  
f0103829:	c3                   	ret    

f010382a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010382a:	55                   	push   %ebp
f010382b:	89 e5                	mov    %esp,%ebp
f010382d:	53                   	push   %ebx
f010382e:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103831:	8b 45 08             	mov    0x8(%ebp),%eax
f0103834:	c1 e8 0c             	shr    $0xc,%eax
f0103837:	89 c2                	mov    %eax,%edx
f0103839:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010383e:	39 c2                	cmp    %eax,%edx
f0103840:	72 14                	jb     f0103856 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103842:	83 ec 04             	sub    $0x4,%esp
f0103845:	68 ac 1f 13 f0       	push   $0xf0131fac
f010384a:	6a 55                	push   $0x55
f010384c:	68 d4 1f 13 f0       	push   $0xf0131fd4
f0103851:	e8 5a c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0103856:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f010385c:	8b 45 08             	mov    0x8(%ebp),%eax
f010385f:	c1 e8 0c             	shr    $0xc,%eax
f0103862:	89 c2                	mov    %eax,%edx
f0103864:	89 d0                	mov    %edx,%eax
f0103866:	01 c0                	add    %eax,%eax
f0103868:	01 d0                	add    %edx,%eax
f010386a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103871:	01 d8                	add    %ebx,%eax
f0103873:	01 d0                	add    %edx,%eax
f0103875:	01 c8                	add    %ecx,%eax
}
f0103877:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010387a:	c9                   	leave  
f010387b:	c3                   	ret    

f010387c <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010387c:	55                   	push   %ebp
f010387d:	89 e5                	mov    %esp,%ebp
f010387f:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103882:	8b 45 08             	mov    0x8(%ebp),%eax
f0103885:	05 00 14 00 00       	add    $0x1400,%eax
f010388a:	c1 e0 03             	shl    $0x3,%eax
f010388d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103890:	83 ec 04             	sub    $0x4,%esp
f0103893:	6a 08                	push   $0x8
f0103895:	ff 75 0c             	pushl  0xc(%ebp)
f0103898:	ff 75 f4             	pushl  -0xc(%ebp)
f010389b:	e8 1b bf 02 00       	call   f012f7bb <ide_read>
f01038a0:	83 c4 10             	add    $0x10,%esp
f01038a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01038a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038a9:	c9                   	leave  
f01038aa:	c3                   	ret    

f01038ab <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01038ab:	55                   	push   %ebp
f01038ac:	89 e5                	mov    %esp,%ebp
f01038ae:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01038b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b4:	05 00 14 00 00       	add    $0x1400,%eax
f01038b9:	c1 e0 03             	shl    $0x3,%eax
f01038bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01038bf:	83 ec 04             	sub    $0x4,%esp
f01038c2:	6a 08                	push   $0x8
f01038c4:	ff 75 0c             	pushl  0xc(%ebp)
f01038c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01038ca:	e8 2c c0 02 00       	call   f012f8fb <ide_write>
f01038cf:	83 c4 10             	add    $0x10,%esp
f01038d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01038d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038d9:	74 14                	je     f01038ef <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01038db:	83 ec 04             	sub    $0x4,%esp
f01038de:	68 f6 1f 13 f0       	push   $0xf0131ff6
f01038e3:	6a 2e                	push   $0x2e
f01038e5:	68 0d 20 13 f0       	push   $0xf013200d
f01038ea:	e8 c1 c8 ff ff       	call   f01001b0 <_panic>
	return success;
f01038ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038f2:	c9                   	leave  
f01038f3:	c3                   	ret    

f01038f4 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01038f4:	55                   	push   %ebp
f01038f5:	89 e5                	mov    %esp,%ebp
f01038f7:	56                   	push   %esi
f01038f8:	53                   	push   %ebx
f01038f9:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01038fc:	c7 05 84 a2 2d f0 00 	movl   $0x0,0xf02da284
f0103903:	00 00 00 
f0103906:	c7 05 88 a2 2d f0 00 	movl   $0x0,0xf02da288
f010390d:	00 00 00 
f0103910:	c7 05 90 a2 2d f0 00 	movl   $0x0,0xf02da290
f0103917:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010391a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103921:	e9 20 01 00 00       	jmp    f0103a46 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103926:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f010392c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392f:	89 d0                	mov    %edx,%eax
f0103931:	01 c0                	add    %eax,%eax
f0103933:	01 d0                	add    %edx,%eax
f0103935:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010393c:	01 d8                	add    %ebx,%eax
f010393e:	01 d0                	add    %edx,%eax
f0103940:	01 c8                	add    %ecx,%eax
f0103942:	83 ec 0c             	sub    $0xc,%esp
f0103945:	50                   	push   %eax
f0103946:	e8 bf 39 00 00       	call   f010730a <initialize_frame_info>
f010394b:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010394e:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103954:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103957:	89 d0                	mov    %edx,%eax
f0103959:	01 c0                	add    %eax,%eax
f010395b:	01 d0                	add    %edx,%eax
f010395d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103964:	01 d8                	add    %ebx,%eax
f0103966:	01 d0                	add    %edx,%eax
f0103968:	01 c8                	add    %ecx,%eax
f010396a:	85 c0                	test   %eax,%eax
f010396c:	75 14                	jne    f0103982 <initialize_disk_page_file+0x8e>
f010396e:	83 ec 04             	sub    $0x4,%esp
f0103971:	68 2c 20 13 f0       	push   $0xf013202c
f0103976:	6a 59                	push   $0x59
f0103978:	68 0d 20 13 f0       	push   $0xf013200d
f010397d:	e8 2e c8 ff ff       	call   f01001b0 <_panic>
f0103982:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103988:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010398b:	89 d0                	mov    %edx,%eax
f010398d:	01 c0                	add    %eax,%eax
f010398f:	01 d0                	add    %edx,%eax
f0103991:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103998:	01 d8                	add    %ebx,%eax
f010399a:	01 d0                	add    %edx,%eax
f010399c:	01 c8                	add    %ecx,%eax
f010399e:	8b 15 84 a2 2d f0    	mov    0xf02da284,%edx
f01039a4:	89 10                	mov    %edx,(%eax)
f01039a6:	8b 00                	mov    (%eax),%eax
f01039a8:	85 c0                	test   %eax,%eax
f01039aa:	74 27                	je     f01039d3 <initialize_disk_page_file+0xdf>
f01039ac:	8b 0d 84 a2 2d f0    	mov    0xf02da284,%ecx
f01039b2:	8b 1d 50 3a 25 f0    	mov    0xf0253a50,%ebx
f01039b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039bb:	89 d0                	mov    %edx,%eax
f01039bd:	01 c0                	add    %eax,%eax
f01039bf:	01 d0                	add    %edx,%eax
f01039c1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01039c8:	01 f0                	add    %esi,%eax
f01039ca:	01 d0                	add    %edx,%eax
f01039cc:	01 d8                	add    %ebx,%eax
f01039ce:	89 41 04             	mov    %eax,0x4(%ecx)
f01039d1:	eb 21                	jmp    f01039f4 <initialize_disk_page_file+0x100>
f01039d3:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f01039d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039dc:	89 d0                	mov    %edx,%eax
f01039de:	01 c0                	add    %eax,%eax
f01039e0:	01 d0                	add    %edx,%eax
f01039e2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039e9:	01 d8                	add    %ebx,%eax
f01039eb:	01 d0                	add    %edx,%eax
f01039ed:	01 c8                	add    %ecx,%eax
f01039ef:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f01039f4:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f01039fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039fd:	89 d0                	mov    %edx,%eax
f01039ff:	01 c0                	add    %eax,%eax
f0103a01:	01 d0                	add    %edx,%eax
f0103a03:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a0a:	01 d8                	add    %ebx,%eax
f0103a0c:	01 d0                	add    %edx,%eax
f0103a0e:	01 c8                	add    %ecx,%eax
f0103a10:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103a15:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a1e:	89 d0                	mov    %edx,%eax
f0103a20:	01 c0                	add    %eax,%eax
f0103a22:	01 d0                	add    %edx,%eax
f0103a24:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a2b:	01 d8                	add    %ebx,%eax
f0103a2d:	01 d0                	add    %edx,%eax
f0103a2f:	01 c8                	add    %ecx,%eax
f0103a31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a38:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103a3d:	40                   	inc    %eax
f0103a3e:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103a43:	ff 45 f4             	incl   -0xc(%ebp)
f0103a46:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103a4d:	0f 8e d3 fe ff ff    	jle    f0103926 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103a53:	90                   	nop
f0103a54:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103a57:	5b                   	pop    %ebx
f0103a58:	5e                   	pop    %esi
f0103a59:	5d                   	pop    %ebp
f0103a5a:	c3                   	ret    

f0103a5b <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a5b:	55                   	push   %ebp
f0103a5c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a61:	8b 15 50 3a 25 f0    	mov    0xf0253a50,%edx
f0103a67:	29 d0                	sub    %edx,%eax
f0103a69:	c1 f8 02             	sar    $0x2,%eax
f0103a6c:	89 c2                	mov    %eax,%edx
f0103a6e:	89 d0                	mov    %edx,%eax
f0103a70:	c1 e0 03             	shl    $0x3,%eax
f0103a73:	01 d0                	add    %edx,%eax
f0103a75:	c1 e0 03             	shl    $0x3,%eax
f0103a78:	01 d0                	add    %edx,%eax
f0103a7a:	c1 e0 03             	shl    $0x3,%eax
f0103a7d:	01 d0                	add    %edx,%eax
f0103a7f:	c1 e0 03             	shl    $0x3,%eax
f0103a82:	01 d0                	add    %edx,%eax
f0103a84:	89 c1                	mov    %eax,%ecx
f0103a86:	c1 e1 0f             	shl    $0xf,%ecx
f0103a89:	01 c8                	add    %ecx,%eax
f0103a8b:	c1 e0 03             	shl    $0x3,%eax
f0103a8e:	01 d0                	add    %edx,%eax
f0103a90:	f7 d8                	neg    %eax
}
f0103a92:	5d                   	pop    %ebp
f0103a93:	c3                   	ret    

f0103a94 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a94:	55                   	push   %ebp
f0103a95:	89 e5                	mov    %esp,%ebp
f0103a97:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a9a:	a1 84 a2 2d f0       	mov    0xf02da284,%eax
f0103a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103aa6:	75 0a                	jne    f0103ab2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103aa8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103aad:	e9 a7 00 00 00       	jmp    f0103b59 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103ab2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ab6:	75 14                	jne    f0103acc <allocate_disk_frame+0x38>
f0103ab8:	83 ec 04             	sub    $0x4,%esp
f0103abb:	68 4f 20 13 f0       	push   $0xf013204f
f0103ac0:	6a 78                	push   $0x78
f0103ac2:	68 0d 20 13 f0       	push   $0xf013200d
f0103ac7:	e8 e4 c6 ff ff       	call   f01001b0 <_panic>
f0103acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103acf:	8b 00                	mov    (%eax),%eax
f0103ad1:	85 c0                	test   %eax,%eax
f0103ad3:	74 10                	je     f0103ae5 <allocate_disk_frame+0x51>
f0103ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ad8:	8b 00                	mov    (%eax),%eax
f0103ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103add:	8b 52 04             	mov    0x4(%edx),%edx
f0103ae0:	89 50 04             	mov    %edx,0x4(%eax)
f0103ae3:	eb 0b                	jmp    f0103af0 <allocate_disk_frame+0x5c>
f0103ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ae8:	8b 40 04             	mov    0x4(%eax),%eax
f0103aeb:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f0103af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103af3:	8b 40 04             	mov    0x4(%eax),%eax
f0103af6:	85 c0                	test   %eax,%eax
f0103af8:	74 0f                	je     f0103b09 <allocate_disk_frame+0x75>
f0103afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103afd:	8b 40 04             	mov    0x4(%eax),%eax
f0103b00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b03:	8b 12                	mov    (%edx),%edx
f0103b05:	89 10                	mov    %edx,(%eax)
f0103b07:	eb 0a                	jmp    f0103b13 <allocate_disk_frame+0x7f>
f0103b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b0c:	8b 00                	mov    (%eax),%eax
f0103b0e:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b26:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103b2b:	48                   	dec    %eax
f0103b2c:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
	initialize_frame_info(ptr_frame_info);
f0103b31:	83 ec 0c             	sub    $0xc,%esp
f0103b34:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b37:	e8 ce 37 00 00       	call   f010730a <initialize_frame_info>
f0103b3c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103b3f:	83 ec 0c             	sub    $0xc,%esp
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 11 ff ff ff       	call   f0103a5b <to_disk_frame_number>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 c2                	mov    %eax,%edx
f0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b52:	89 10                	mov    %edx,(%eax)
	return 0;
f0103b54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103b59:	c9                   	leave  
f0103b5a:	c3                   	ret    

f0103b5b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103b5b:	55                   	push   %ebp
f0103b5c:	89 e5                	mov    %esp,%ebp
f0103b5e:	56                   	push   %esi
f0103b5f:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b64:	0f 84 fa 00 00 00    	je     f0103c64 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b6a:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103b70:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b73:	89 d0                	mov    %edx,%eax
f0103b75:	01 c0                	add    %eax,%eax
f0103b77:	01 d0                	add    %edx,%eax
f0103b79:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b80:	01 d8                	add    %ebx,%eax
f0103b82:	01 d0                	add    %edx,%eax
f0103b84:	01 c8                	add    %ecx,%eax
f0103b86:	85 c0                	test   %eax,%eax
f0103b88:	75 17                	jne    f0103ba1 <free_disk_frame+0x46>
f0103b8a:	83 ec 04             	sub    $0x4,%esp
f0103b8d:	68 2c 20 13 f0       	push   $0xf013202c
f0103b92:	68 85 00 00 00       	push   $0x85
f0103b97:	68 0d 20 13 f0       	push   $0xf013200d
f0103b9c:	e8 0f c6 ff ff       	call   f01001b0 <_panic>
f0103ba1:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103ba7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103baa:	89 d0                	mov    %edx,%eax
f0103bac:	01 c0                	add    %eax,%eax
f0103bae:	01 d0                	add    %edx,%eax
f0103bb0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bb7:	01 d8                	add    %ebx,%eax
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	01 c8                	add    %ecx,%eax
f0103bbd:	8b 15 84 a2 2d f0    	mov    0xf02da284,%edx
f0103bc3:	89 10                	mov    %edx,(%eax)
f0103bc5:	8b 00                	mov    (%eax),%eax
f0103bc7:	85 c0                	test   %eax,%eax
f0103bc9:	74 27                	je     f0103bf2 <free_disk_frame+0x97>
f0103bcb:	8b 0d 84 a2 2d f0    	mov    0xf02da284,%ecx
f0103bd1:	8b 1d 50 3a 25 f0    	mov    0xf0253a50,%ebx
f0103bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bda:	89 d0                	mov    %edx,%eax
f0103bdc:	01 c0                	add    %eax,%eax
f0103bde:	01 d0                	add    %edx,%eax
f0103be0:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103be7:	01 f0                	add    %esi,%eax
f0103be9:	01 d0                	add    %edx,%eax
f0103beb:	01 d8                	add    %ebx,%eax
f0103bed:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bf0:	eb 21                	jmp    f0103c13 <free_disk_frame+0xb8>
f0103bf2:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103bf8:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bfb:	89 d0                	mov    %edx,%eax
f0103bfd:	01 c0                	add    %eax,%eax
f0103bff:	01 d0                	add    %edx,%eax
f0103c01:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c08:	01 d8                	add    %ebx,%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	01 c8                	add    %ecx,%eax
f0103c0e:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f0103c13:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103c19:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c1c:	89 d0                	mov    %edx,%eax
f0103c1e:	01 c0                	add    %eax,%eax
f0103c20:	01 d0                	add    %edx,%eax
f0103c22:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c29:	01 d8                	add    %ebx,%eax
f0103c2b:	01 d0                	add    %edx,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103c34:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103c3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c3d:	89 d0                	mov    %edx,%eax
f0103c3f:	01 c0                	add    %eax,%eax
f0103c41:	01 d0                	add    %edx,%eax
f0103c43:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c4a:	01 d8                	add    %ebx,%eax
f0103c4c:	01 d0                	add    %edx,%eax
f0103c4e:	01 c8                	add    %ecx,%eax
f0103c50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c57:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103c5c:	40                   	inc    %eax
f0103c5d:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
f0103c62:	eb 01                	jmp    f0103c65 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c64:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c65:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c68:	5b                   	pop    %ebx
f0103c69:	5e                   	pop    %esi
f0103c6a:	5d                   	pop    %ebp
f0103c6b:	c3                   	ret    

f0103c6c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c6c:	55                   	push   %ebp
f0103c6d:	89 e5                	mov    %esp,%ebp
f0103c6f:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c75:	c1 e8 16             	shr    $0x16,%eax
f0103c78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	8b 00                	mov    (%eax),%eax
f0103c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c97:	c1 e8 0c             	shr    $0xc,%eax
f0103c9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c9d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0103ca2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ca5:	72 17                	jb     f0103cbe <get_disk_page_table+0x52>
f0103ca7:	ff 75 f0             	pushl  -0x10(%ebp)
f0103caa:	68 70 20 13 f0       	push   $0xf0132070
f0103caf:	68 92 00 00 00       	push   $0x92
f0103cb4:	68 0d 20 13 f0       	push   $0xf013200d
f0103cb9:	e8 f2 c4 ff ff       	call   f01001b0 <_panic>
f0103cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103cc6:	89 c2                	mov    %eax,%edx
f0103cc8:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ccb:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103ccd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cd1:	0f 85 b7 00 00 00    	jne    f0103d8e <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103cd7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103cdb:	0f 84 9d 00 00 00    	je     f0103d7e <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103ce7:	50                   	push   %eax
f0103ce8:	e8 38 36 00 00       	call   f0107325 <allocate_frame>
f0103ced:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103cf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103cf3:	83 ec 0c             	sub    $0xc,%esp
f0103cf6:	50                   	push   %eax
f0103cf7:	e8 1b fb ff ff       	call   f0103817 <to_physical_address>
f0103cfc:	83 c4 10             	add    $0x10,%esp
f0103cff:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103d08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d0b:	c1 e8 0c             	shr    $0xc,%eax
f0103d0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103d11:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0103d16:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103d19:	72 17                	jb     f0103d32 <get_disk_page_table+0xc6>
f0103d1b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103d1e:	68 70 20 13 f0       	push   $0xf0132070
f0103d23:	68 ae 00 00 00       	push   $0xae
f0103d28:	68 0d 20 13 f0       	push   $0xf013200d
f0103d2d:	e8 7e c4 ff ff       	call   f01001b0 <_panic>
f0103d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d3a:	89 c2                	mov    %eax,%edx
f0103d3c:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d3f:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103d44:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d4d:	c1 e8 16             	shr    $0x16,%eax
f0103d50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	01 d0                	add    %edx,%eax
f0103d5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d5f:	83 ca 01             	or     $0x1,%edx
f0103d62:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d64:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	83 ec 04             	sub    $0x4,%esp
f0103d6c:	68 00 10 00 00       	push   $0x1000
f0103d71:	6a 00                	push   $0x0
f0103d73:	50                   	push   %eax
f0103d74:	e8 75 b4 02 00       	call   f012f1ee <memset>
f0103d79:	83 c4 10             	add    $0x10,%esp
f0103d7c:	eb 10                	jmp    f0103d8e <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d7e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d87:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d8c:	eb 05                	jmp    f0103d93 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d93:	c9                   	leave  
f0103d94:	c3                   	ret    

f0103d95 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d95:	55                   	push   %ebp
f0103d96:	89 e5                	mov    %esp,%ebp
f0103d98:	83 ec 28             	sub    $0x28,%esp
f0103d9b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d9e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103da1:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103da5:	74 75                	je     f0103e1c <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103da7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103db1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103dc1:	f7 75 f4             	divl   -0xc(%ebp)
f0103dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dc7:	29 d0                	sub    %edx,%eax
f0103dc9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dcc:	73 32                	jae    f0103e00 <pf_add_empty_env_page+0x6b>
f0103dce:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd1:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103dd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ddc:	29 d0                	sub    %edx,%eax
f0103dde:	c1 e0 0c             	shl    $0xc,%eax
f0103de1:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103de6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103de9:	76 15                	jbe    f0103e00 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dee:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103df4:	8d 50 01             	lea    0x1(%eax),%edx
f0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfa:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103e00:	a1 1c be 2b f0       	mov    0xf02bbe1c,%eax
f0103e05:	83 ec 04             	sub    $0x4,%esp
f0103e08:	50                   	push   %eax
f0103e09:	ff 75 0c             	pushl  0xc(%ebp)
f0103e0c:	ff 75 08             	pushl  0x8(%ebp)
f0103e0f:	e8 b7 00 00 00       	call   f0103ecb <pf_add_env_page>
f0103e14:	83 c4 10             	add    $0x10,%esp
f0103e17:	e9 ad 00 00 00       	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e1c:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e23:	76 19                	jbe    f0103e3e <pf_add_empty_env_page+0xa9>
f0103e25:	68 a0 20 13 f0       	push   $0xf01320a0
f0103e2a:	68 c6 20 13 f0       	push   $0xf01320c6
f0103e2f:	68 d1 00 00 00       	push   $0xd1
f0103e34:	68 0d 20 13 f0       	push   $0xf013200d
f0103e39:	e8 72 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e41:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e46:	83 ec 08             	sub    $0x8,%esp
f0103e49:	50                   	push   %eax
f0103e4a:	ff 75 08             	pushl  0x8(%ebp)
f0103e4d:	e8 86 06 00 00       	call   f01044d8 <get_disk_page_directory>
f0103e52:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e58:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e5e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e61:	52                   	push   %edx
f0103e62:	6a 01                	push   $0x1
f0103e64:	ff 75 0c             	pushl  0xc(%ebp)
f0103e67:	50                   	push   %eax
f0103e68:	e8 ff fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103e6d:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e76:	c1 ea 0c             	shr    $0xc,%edx
f0103e79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e7f:	c1 e2 02             	shl    $0x2,%edx
f0103e82:	01 d0                	add    %edx,%eax
f0103e84:	8b 00                	mov    (%eax),%eax
f0103e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e8c:	85 c0                	test   %eax,%eax
f0103e8e:	75 34                	jne    f0103ec4 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e90:	83 ec 0c             	sub    $0xc,%esp
f0103e93:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e96:	50                   	push   %eax
f0103e97:	e8 f8 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ea2:	75 07                	jne    f0103eab <pf_add_empty_env_page+0x116>
f0103ea4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103ea9:	eb 1e                	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	c1 ea 0c             	shr    $0xc,%edx
f0103eb4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103eba:	c1 e2 02             	shl    $0x2,%edx
f0103ebd:	01 c2                	add    %eax,%edx
f0103ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ec2:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103ec4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103ec9:	c9                   	leave  
f0103eca:	c3                   	ret    

f0103ecb <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103ecb:	55                   	push   %ebp
f0103ecc:	89 e5                	mov    %esp,%ebp
f0103ece:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103ed1:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103ed8:	76 19                	jbe    f0103ef3 <pf_add_env_page+0x28>
f0103eda:	68 a0 20 13 f0       	push   $0xf01320a0
f0103edf:	68 c6 20 13 f0       	push   $0xf01320c6
f0103ee4:	68 e6 00 00 00       	push   $0xe6
f0103ee9:	68 0d 20 13 f0       	push   $0xf013200d
f0103eee:	e8 bd c2 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef6:	05 a8 00 00 00       	add    $0xa8,%eax
f0103efb:	83 ec 08             	sub    $0x8,%esp
f0103efe:	50                   	push   %eax
f0103eff:	ff 75 08             	pushl  0x8(%ebp)
f0103f02:	e8 d1 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103f07:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f0d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f13:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f16:	52                   	push   %edx
f0103f17:	6a 01                	push   $0x1
f0103f19:	ff 75 0c             	pushl  0xc(%ebp)
f0103f1c:	50                   	push   %eax
f0103f1d:	e8 4a fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103f22:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f28:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2b:	c1 ea 0c             	shr    $0xc,%edx
f0103f2e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f34:	c1 e2 02             	shl    $0x2,%edx
f0103f37:	01 d0                	add    %edx,%eax
f0103f39:	8b 00                	mov    (%eax),%eax
f0103f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f41:	85 c0                	test   %eax,%eax
f0103f43:	75 34                	jne    f0103f79 <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f45:	83 ec 0c             	sub    $0xc,%esp
f0103f48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103f4b:	50                   	push   %eax
f0103f4c:	e8 43 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103f51:	83 c4 10             	add    $0x10,%esp
f0103f54:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f57:	75 07                	jne    f0103f60 <pf_add_env_page+0x95>
f0103f59:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f5e:	eb 31                	jmp    f0103f91 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f63:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f66:	c1 ea 0c             	shr    $0xc,%edx
f0103f69:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f6f:	c1 e2 02             	shl    $0x2,%edx
f0103f72:	01 c2                	add    %eax,%edx
f0103f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f77:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f7c:	83 ec 08             	sub    $0x8,%esp
f0103f7f:	ff 75 10             	pushl  0x10(%ebp)
f0103f82:	50                   	push   %eax
f0103f83:	e8 23 f9 ff ff       	call   f01038ab <write_disk_page>
f0103f88:	83 c4 10             	add    $0x10,%esp
f0103f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f91:	c9                   	leave  
f0103f92:	c3                   	ret    

f0103f93 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f93:	55                   	push   %ebp
f0103f94:	89 e5                	mov    %esp,%ebp
f0103f96:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f99:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103fa0:	76 19                	jbe    f0103fbb <pf_update_env_page+0x28>
f0103fa2:	68 a0 20 13 f0       	push   $0xf01320a0
f0103fa7:	68 c6 20 13 f0       	push   $0xf01320c6
f0103fac:	68 08 01 00 00       	push   $0x108
f0103fb1:	68 0d 20 13 f0       	push   $0xf013200d
f0103fb6:	e8 f5 c1 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbe:	05 a8 00 00 00       	add    $0xa8,%eax
f0103fc3:	83 ec 08             	sub    $0x8,%esp
f0103fc6:	50                   	push   %eax
f0103fc7:	ff 75 08             	pushl  0x8(%ebp)
f0103fca:	e8 09 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103fcf:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fd5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103fdb:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103fde:	52                   	push   %edx
f0103fdf:	6a 00                	push   $0x0
f0103fe1:	ff 75 0c             	pushl  0xc(%ebp)
f0103fe4:	50                   	push   %eax
f0103fe5:	e8 82 fc ff ff       	call   f0103c6c <get_disk_page_table>
f0103fea:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103fed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff0:	85 c0                	test   %eax,%eax
f0103ff2:	74 29                	je     f010401d <pf_update_env_page+0x8a>
f0103ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff7:	85 c0                	test   %eax,%eax
f0103ff9:	0f 84 46 01 00 00    	je     f0104145 <pf_update_env_page+0x1b2>
f0103fff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104002:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104005:	c1 ea 0c             	shr    $0xc,%edx
f0104008:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010400e:	c1 e2 02             	shl    $0x2,%edx
f0104011:	01 d0                	add    %edx,%eax
f0104013:	8b 00                	mov    (%eax),%eax
f0104015:	85 c0                	test   %eax,%eax
f0104017:	0f 85 28 01 00 00    	jne    f0104145 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f010401d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104020:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104026:	85 c0                	test   %eax,%eax
f0104028:	79 09                	jns    f0104033 <pf_update_env_page+0xa0>
f010402a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0104031:	76 38                	jbe    f010406b <pf_update_env_page+0xd8>
f0104033:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010403a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010403d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0104042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104048:	ba 00 00 00 00       	mov    $0x0,%edx
f010404d:	f7 75 f0             	divl   -0x10(%ebp)
f0104050:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104053:	29 d0                	sub    %edx,%eax
f0104055:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104058:	0f 87 d0 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
f010405e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104065:	0f 87 c3 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010406b:	8b 45 08             	mov    0x8(%ebp),%eax
f010406e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104074:	83 ec 04             	sub    $0x4,%esp
f0104077:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010407a:	52                   	push   %edx
f010407b:	ff 75 0c             	pushl  0xc(%ebp)
f010407e:	50                   	push   %eax
f010407f:	e8 fb 36 00 00       	call   f010777f <get_frame_info>
f0104084:	83 c4 10             	add    $0x10,%esp
f0104087:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010408a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010408d:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104090:	75 52                	jne    f01040e4 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104092:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104095:	83 ec 04             	sub    $0x4,%esp
f0104098:	50                   	push   %eax
f0104099:	ff 75 f4             	pushl  -0xc(%ebp)
f010409c:	ff 75 08             	pushl  0x8(%ebp)
f010409f:	e8 27 fe ff ff       	call   f0103ecb <pf_add_env_page>
f01040a4:	83 c4 10             	add    $0x10,%esp
f01040a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040aa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040ae:	75 17                	jne    f01040c7 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01040b0:	83 ec 04             	sub    $0x4,%esp
f01040b3:	68 dc 20 13 f0       	push   $0xf01320dc
f01040b8:	68 1d 01 00 00       	push   $0x11d
f01040bd:	68 0d 20 13 f0       	push   $0xf013200d
f01040c2:	e8 e9 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ca:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040d0:	8d 50 01             	lea    0x1(%eax),%edx
f01040d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d6:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f01040dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040df:	e9 02 01 00 00       	jmp    f01041e6 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01040e4:	83 ec 04             	sub    $0x4,%esp
f01040e7:	6a 00                	push   $0x0
f01040e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01040ec:	ff 75 08             	pushl  0x8(%ebp)
f01040ef:	e8 a1 fc ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01040f4:	83 c4 10             	add    $0x10,%esp
f01040f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040fa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040fe:	75 17                	jne    f0104117 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0104100:	83 ec 04             	sub    $0x4,%esp
f0104103:	68 08 21 13 f0       	push   $0xf0132108
f0104108:	68 28 01 00 00       	push   $0x128
f010410d:	68 0d 20 13 f0       	push   $0xf013200d
f0104112:	e8 99 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0104117:	8b 45 08             	mov    0x8(%ebp),%eax
f010411a:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104120:	8d 50 01             	lea    0x1(%eax),%edx
f0104123:	8b 45 08             	mov    0x8(%ebp),%eax
f0104126:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f010412c:	eb 17                	jmp    f0104145 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010412e:	83 ec 04             	sub    $0x4,%esp
f0104131:	68 54 21 13 f0       	push   $0xf0132154
f0104136:	68 2f 01 00 00       	push   $0x12f
f010413b:	68 0d 20 13 f0       	push   $0xf013200d
f0104140:	e8 6b c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104145:	8b 45 08             	mov    0x8(%ebp),%eax
f0104148:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010414e:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0104151:	52                   	push   %edx
f0104152:	6a 00                	push   $0x0
f0104154:	ff 75 0c             	pushl  0xc(%ebp)
f0104157:	50                   	push   %eax
f0104158:	e8 0f fb ff ff       	call   f0103c6c <get_disk_page_table>
f010415d:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104160:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104163:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104166:	c1 ea 0c             	shr    $0xc,%edx
f0104169:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010416f:	c1 e2 02             	shl    $0x2,%edx
f0104172:	01 d0                	add    %edx,%eax
f0104174:	8b 00                	mov    (%eax),%eax
f0104176:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104179:	83 ec 0c             	sub    $0xc,%esp
f010417c:	ff 75 10             	pushl  0x10(%ebp)
f010417f:	e8 93 f6 ff ff       	call   f0103817 <to_physical_address>
f0104184:	83 c4 10             	add    $0x10,%esp
f0104187:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010418a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010418d:	c1 e8 0c             	shr    $0xc,%eax
f0104190:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104193:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104198:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010419b:	72 17                	jb     f01041b4 <pf_update_env_page+0x221>
f010419d:	ff 75 dc             	pushl  -0x24(%ebp)
f01041a0:	68 70 20 13 f0       	push   $0xf0132070
f01041a5:	68 47 01 00 00       	push   $0x147
f01041aa:	68 0d 20 13 f0       	push   $0xf013200d
f01041af:	e8 fc bf ff ff       	call   f01001b0 <_panic>
f01041b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041b7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041bc:	83 ec 08             	sub    $0x8,%esp
f01041bf:	50                   	push   %eax
f01041c0:	ff 75 e0             	pushl  -0x20(%ebp)
f01041c3:	e8 e3 f6 ff ff       	call   f01038ab <write_disk_page>
f01041c8:	83 c4 10             	add    $0x10,%esp
f01041cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01041ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d1:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f01041d7:	8d 50 01             	lea    0x1(%eax),%edx
f01041da:	8b 45 08             	mov    0x8(%ebp),%eax
f01041dd:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f01041e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01041e6:	c9                   	leave  
f01041e7:	c3                   	ret    

f01041e8 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01041e8:	55                   	push   %ebp
f01041e9:	89 e5                	mov    %esp,%ebp
f01041eb:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01041ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01041f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041fc:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104202:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104208:	85 c0                	test   %eax,%eax
f010420a:	75 0a                	jne    f0104216 <pf_read_env_page+0x2e>
f010420c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104211:	e9 96 00 00 00       	jmp    f01042ac <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104216:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104219:	8b 45 08             	mov    0x8(%ebp),%eax
f010421c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104222:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0104225:	51                   	push   %ecx
f0104226:	6a 00                	push   $0x0
f0104228:	52                   	push   %edx
f0104229:	50                   	push   %eax
f010422a:	e8 3d fa ff ff       	call   f0103c6c <get_disk_page_table>
f010422f:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104232:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104235:	85 c0                	test   %eax,%eax
f0104237:	75 07                	jne    f0104240 <pf_read_env_page+0x58>
f0104239:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010423e:	eb 6c                	jmp    f01042ac <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104240:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104243:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104246:	c1 ea 0c             	shr    $0xc,%edx
f0104249:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010424f:	c1 e2 02             	shl    $0x2,%edx
f0104252:	01 d0                	add    %edx,%eax
f0104254:	8b 00                	mov    (%eax),%eax
f0104256:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010425d:	75 07                	jne    f0104266 <pf_read_env_page+0x7e>
f010425f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104264:	eb 46                	jmp    f01042ac <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104266:	83 ec 08             	sub    $0x8,%esp
f0104269:	ff 75 0c             	pushl  0xc(%ebp)
f010426c:	ff 75 f0             	pushl  -0x10(%ebp)
f010426f:	e8 08 f6 ff ff       	call   f010387c <read_disk_page>
f0104274:	83 c4 10             	add    $0x10,%esp
f0104277:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010427a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010427d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104280:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104286:	6a 40                	push   $0x40
f0104288:	6a 00                	push   $0x0
f010428a:	52                   	push   %edx
f010428b:	50                   	push   %eax
f010428c:	e8 8e 3d 00 00       	call   f010801f <pt_set_page_permissions>
f0104291:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104294:	8b 45 08             	mov    0x8(%ebp),%eax
f0104297:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010429d:	8d 50 01             	lea    0x1(%eax),%edx
f01042a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a3:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f01042a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01042ac:	c9                   	leave  
f01042ad:	c3                   	ret    

f01042ae <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01042ae:	55                   	push   %ebp
f01042af:	89 e5                	mov    %esp,%ebp
f01042b1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01042b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01042b7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	74 65                	je     f0104326 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042c4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ca:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01042cd:	52                   	push   %edx
f01042ce:	6a 00                	push   $0x0
f01042d0:	ff 75 0c             	pushl  0xc(%ebp)
f01042d3:	50                   	push   %eax
f01042d4:	e8 93 f9 ff ff       	call   f0103c6c <get_disk_page_table>
f01042d9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01042dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042df:	85 c0                	test   %eax,%eax
f01042e1:	74 46                	je     f0104329 <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e9:	c1 ea 0c             	shr    $0xc,%edx
f01042ec:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042f2:	c1 e2 02             	shl    $0x2,%edx
f01042f5:	01 d0                	add    %edx,%eax
f01042f7:	8b 00                	mov    (%eax),%eax
f01042f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01042fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104302:	c1 ea 0c             	shr    $0xc,%edx
f0104305:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010430b:	c1 e2 02             	shl    $0x2,%edx
f010430e:	01 d0                	add    %edx,%eax
f0104310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104316:	83 ec 0c             	sub    $0xc,%esp
f0104319:	ff 75 f4             	pushl  -0xc(%ebp)
f010431c:	e8 3a f8 ff ff       	call   f0103b5b <free_disk_frame>
f0104321:	83 c4 10             	add    $0x10,%esp
f0104324:	eb 04                	jmp    f010432a <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104326:	90                   	nop
f0104327:	eb 01                	jmp    f010432a <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104329:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010432a:	c9                   	leave  
f010432b:	c3                   	ret    

f010432c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010432c:	55                   	push   %ebp
f010432d:	89 e5                	mov    %esp,%ebp
f010432f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104339:	e9 f7 00 00 00       	jmp    f0104435 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010433e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104341:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010434a:	c1 e2 02             	shl    $0x2,%edx
f010434d:	01 d0                	add    %edx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	83 e0 01             	and    $0x1,%eax
f0104354:	85 c0                	test   %eax,%eax
f0104356:	0f 84 d5 00 00 00    	je     f0104431 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010435c:	8b 45 08             	mov    0x8(%ebp),%eax
f010435f:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104368:	c1 e2 02             	shl    $0x2,%edx
f010436b:	01 d0                	add    %edx,%eax
f010436d:	8b 00                	mov    (%eax),%eax
f010436f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104374:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104377:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010437a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010437d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104380:	c1 e8 0c             	shr    $0xc,%eax
f0104383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104386:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010438b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010438e:	72 17                	jb     f01043a7 <pf_free_env+0x7b>
f0104390:	ff 75 e8             	pushl  -0x18(%ebp)
f0104393:	68 70 20 13 f0       	push   $0xf0132070
f0104398:	68 a7 01 00 00       	push   $0x1a7
f010439d:	68 0d 20 13 f0       	push   $0xf013200d
f01043a2:	e8 09 be ff ff       	call   f01001b0 <_panic>
f01043a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01043b9:	eb 3a                	jmp    f01043f5 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01043bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043c8:	01 d0                	add    %edx,%eax
f01043ca:	8b 00                	mov    (%eax),%eax
f01043cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01043cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043dc:	01 d0                	add    %edx,%eax
f01043de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01043e4:	83 ec 0c             	sub    $0xc,%esp
f01043e7:	ff 75 dc             	pushl  -0x24(%ebp)
f01043ea:	e8 6c f7 ff ff       	call   f0103b5b <free_disk_frame>
f01043ef:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043f2:	ff 45 f0             	incl   -0x10(%ebp)
f01043f5:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01043fc:	76 bd                	jbe    f01043bb <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104401:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010440a:	c1 e2 02             	shl    $0x2,%edx
f010440d:	01 d0                	add    %edx,%eax
f010440f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104415:	83 ec 0c             	sub    $0xc,%esp
f0104418:	ff 75 ec             	pushl  -0x14(%ebp)
f010441b:	e8 0a f4 ff ff       	call   f010382a <to_frame_info>
f0104420:	83 c4 10             	add    $0x10,%esp
f0104423:	83 ec 0c             	sub    $0xc,%esp
f0104426:	50                   	push   %eax
f0104427:	e8 8b 30 00 00       	call   f01074b7 <decrement_references>
f010442c:	83 c4 10             	add    $0x10,%esp
f010442f:	eb 01                	jmp    f0104432 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104431:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104432:	ff 45 f4             	incl   -0xc(%ebp)
f0104435:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010443c:	0f 86 fc fe ff ff    	jbe    f010433e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104442:	8b 45 08             	mov    0x8(%ebp),%eax
f0104445:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010444b:	83 ec 0c             	sub    $0xc,%esp
f010444e:	50                   	push   %eax
f010444f:	e8 d6 f3 ff ff       	call   f010382a <to_frame_info>
f0104454:	83 c4 10             	add    $0x10,%esp
f0104457:	83 ec 0c             	sub    $0xc,%esp
f010445a:	50                   	push   %eax
f010445b:	e8 57 30 00 00       	call   f01074b7 <decrement_references>
f0104460:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104463:	8b 45 08             	mov    0x8(%ebp),%eax
f0104466:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010446d:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104470:	8b 45 08             	mov    0x8(%ebp),%eax
f0104473:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010447a:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104486:	85 c0                	test   %eax,%eax
f0104488:	74 4b                	je     f01044d5 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010448a:	83 ec 0c             	sub    $0xc,%esp
f010448d:	ff 75 08             	pushl  0x8(%ebp)
f0104490:	e8 17 04 00 00       	call   f01048ac <__pf_remove_env_all_tables>
f0104495:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104498:	8b 45 08             	mov    0x8(%ebp),%eax
f010449b:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01044a1:	83 ec 0c             	sub    $0xc,%esp
f01044a4:	50                   	push   %eax
f01044a5:	e8 80 f3 ff ff       	call   f010382a <to_frame_info>
f01044aa:	83 c4 10             	add    $0x10,%esp
f01044ad:	83 ec 0c             	sub    $0xc,%esp
f01044b0:	50                   	push   %eax
f01044b1:	e8 01 30 00 00       	call   f01074b7 <decrement_references>
f01044b6:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01044b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01044c3:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01044c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f01044d0:	00 00 00 
f01044d3:	eb 01                	jmp    f01044d6 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f01044d5:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f01044d6:	c9                   	leave  
f01044d7:	c3                   	ret    

f01044d8 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01044d8:	55                   	push   %ebp
f01044d9:	89 e5                	mov    %esp,%ebp
f01044db:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01044de:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e1:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f01044e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ea:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01044ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ef:	8b 00                	mov    (%eax),%eax
f01044f1:	85 c0                	test   %eax,%eax
f01044f3:	0f 85 ad 00 00 00    	jne    f01045a6 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01044f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104500:	83 ec 0c             	sub    $0xc,%esp
f0104503:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104506:	50                   	push   %eax
f0104507:	e8 19 2e 00 00       	call   f0107325 <allocate_frame>
f010450c:	83 c4 10             	add    $0x10,%esp
f010450f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104516:	79 08                	jns    f0104520 <get_disk_page_directory+0x48>
				return r;
f0104518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010451b:	e9 8b 00 00 00       	jmp    f01045ab <get_disk_page_directory+0xd3>
			p->references = 1;
f0104520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104523:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104529:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010452c:	83 ec 0c             	sub    $0xc,%esp
f010452f:	50                   	push   %eax
f0104530:	e8 e2 f2 ff ff       	call   f0103817 <to_physical_address>
f0104535:	83 c4 10             	add    $0x10,%esp
f0104538:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010453b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010453e:	c1 e8 0c             	shr    $0xc,%eax
f0104541:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104544:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104549:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010454c:	72 17                	jb     f0104565 <get_disk_page_directory+0x8d>
f010454e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104551:	68 70 20 13 f0       	push   $0xf0132070
f0104556:	68 ff 01 00 00       	push   $0x1ff
f010455b:	68 0d 20 13 f0       	push   $0xf013200d
f0104560:	e8 4b bc ff ff       	call   f01001b0 <_panic>
f0104565:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104568:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010456d:	89 c2                	mov    %eax,%edx
f010456f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104572:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104574:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104577:	83 ec 0c             	sub    $0xc,%esp
f010457a:	50                   	push   %eax
f010457b:	e8 97 f2 ff ff       	call   f0103817 <to_physical_address>
f0104580:	83 c4 10             	add    $0x10,%esp
f0104583:	89 c2                	mov    %eax,%edx
f0104585:	8b 45 08             	mov    0x8(%ebp),%eax
f0104588:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010458e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104591:	8b 00                	mov    (%eax),%eax
f0104593:	83 ec 04             	sub    $0x4,%esp
f0104596:	68 00 10 00 00       	push   $0x1000
f010459b:	6a 00                	push   $0x0
f010459d:	50                   	push   %eax
f010459e:	e8 4b ac 02 00       	call   f012f1ee <memset>
f01045a3:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01045a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045ab:	c9                   	leave  
f01045ac:	c3                   	ret    

f01045ad <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01045ad:	55                   	push   %ebp
f01045ae:	89 e5                	mov    %esp,%ebp
f01045b0:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01045b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01045ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045c1:	e9 ac 00 00 00       	jmp    f0104672 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01045c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d2:	c1 e2 02             	shl    $0x2,%edx
f01045d5:	01 d0                	add    %edx,%eax
f01045d7:	8b 00                	mov    (%eax),%eax
f01045d9:	83 e0 01             	and    $0x1,%eax
f01045dc:	85 c0                	test   %eax,%eax
f01045de:	0f 84 8a 00 00 00    	je     f010466e <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01045e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f0:	c1 e2 02             	shl    $0x2,%edx
f01045f3:	01 d0                	add    %edx,%eax
f01045f5:	8b 00                	mov    (%eax),%eax
f01045f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01045fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104602:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104608:	c1 e8 0c             	shr    $0xc,%eax
f010460b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010460e:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104613:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0104616:	72 17                	jb     f010462f <pf_calculate_allocated_pages+0x82>
f0104618:	ff 75 e4             	pushl  -0x1c(%ebp)
f010461b:	68 70 20 13 f0       	push   $0xf0132070
f0104620:	68 1f 02 00 00       	push   $0x21f
f0104625:	68 0d 20 13 f0       	push   $0xf013200d
f010462a:	e8 81 bb ff ff       	call   f01001b0 <_panic>
f010462f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104632:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104637:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010463a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104641:	eb 20                	jmp    f0104663 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104643:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010464d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104650:	01 d0                	add    %edx,%eax
f0104652:	8b 00                	mov    (%eax),%eax
f0104654:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104657:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010465b:	74 03                	je     f0104660 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f010465d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104660:	ff 45 ec             	incl   -0x14(%ebp)
f0104663:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010466a:	76 d7                	jbe    f0104643 <pf_calculate_allocated_pages+0x96>
f010466c:	eb 01                	jmp    f010466f <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010466e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010466f:	ff 45 f4             	incl   -0xc(%ebp)
f0104672:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104679:	0f 86 47 ff ff ff    	jbe    f01045c6 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010467f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104682:	c9                   	leave  
f0104683:	c3                   	ret    

f0104684 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104684:	55                   	push   %ebp
f0104685:	89 e5                	mov    %esp,%ebp
f0104687:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010468a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104691:	a1 84 a2 2d f0       	mov    0xf02da284,%eax
f0104696:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104699:	eb 0b                	jmp    f01046a6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010469b:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010469e:	a1 8c a2 2d f0       	mov    0xf02da28c,%eax
f01046a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046aa:	74 07                	je     f01046b3 <pf_calculate_free_frames+0x2f>
f01046ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046af:	8b 00                	mov    (%eax),%eax
f01046b1:	eb 05                	jmp    f01046b8 <pf_calculate_free_frames+0x34>
f01046b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b8:	a3 8c a2 2d f0       	mov    %eax,0xf02da28c
f01046bd:	a1 8c a2 2d f0       	mov    0xf02da28c,%eax
f01046c2:	85 c0                	test   %eax,%eax
f01046c4:	75 d5                	jne    f010469b <pf_calculate_free_frames+0x17>
f01046c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ca:	75 cf                	jne    f010469b <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01046cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01046cf:	c9                   	leave  
f01046d0:	c3                   	ret    

f01046d1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01046d1:	55                   	push   %ebp
f01046d2:	89 e5                	mov    %esp,%ebp
f01046d4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01046d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046da:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01046e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e3:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01046e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e8:	8b 00                	mov    (%eax),%eax
f01046ea:	85 c0                	test   %eax,%eax
f01046ec:	0f 85 ad 00 00 00    	jne    f010479f <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046f2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046f9:	83 ec 0c             	sub    $0xc,%esp
f01046fc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046ff:	50                   	push   %eax
f0104700:	e8 20 2c 00 00       	call   f0107325 <allocate_frame>
f0104705:	83 c4 10             	add    $0x10,%esp
f0104708:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010470b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010470f:	79 08                	jns    f0104719 <get_disk_table_directory+0x48>
				return r;
f0104711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104714:	e9 8b 00 00 00       	jmp    f01047a4 <get_disk_table_directory+0xd3>
			p->references = 1;
f0104719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010471c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104722:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104725:	83 ec 0c             	sub    $0xc,%esp
f0104728:	50                   	push   %eax
f0104729:	e8 e9 f0 ff ff       	call   f0103817 <to_physical_address>
f010472e:	83 c4 10             	add    $0x10,%esp
f0104731:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104737:	c1 e8 0c             	shr    $0xc,%eax
f010473a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010473d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104742:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104745:	72 17                	jb     f010475e <get_disk_table_directory+0x8d>
f0104747:	ff 75 f0             	pushl  -0x10(%ebp)
f010474a:	68 70 20 13 f0       	push   $0xf0132070
f010474f:	68 5d 02 00 00       	push   $0x25d
f0104754:	68 0d 20 13 f0       	push   $0xf013200d
f0104759:	e8 52 ba ff ff       	call   f01001b0 <_panic>
f010475e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104761:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104766:	89 c2                	mov    %eax,%edx
f0104768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010476b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010476d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	50                   	push   %eax
f0104774:	e8 9e f0 ff ff       	call   f0103817 <to_physical_address>
f0104779:	83 c4 10             	add    $0x10,%esp
f010477c:	89 c2                	mov    %eax,%edx
f010477e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104781:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104787:	8b 45 0c             	mov    0xc(%ebp),%eax
f010478a:	8b 00                	mov    (%eax),%eax
f010478c:	83 ec 04             	sub    $0x4,%esp
f010478f:	68 00 10 00 00       	push   $0x1000
f0104794:	6a 00                	push   $0x0
f0104796:	50                   	push   %eax
f0104797:	e8 52 aa 02 00       	call   f012f1ee <memset>
f010479c:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010479f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01047a4:	c9                   	leave  
f01047a5:	c3                   	ret    

f01047a6 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01047a6:	55                   	push   %ebp
f01047a7:	89 e5                	mov    %esp,%ebp
f01047a9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01047ac:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01047b3:	76 19                	jbe    f01047ce <__pf_write_env_table+0x28>
f01047b5:	68 a0 20 13 f0       	push   $0xf01320a0
f01047ba:	68 c6 20 13 f0       	push   $0xf01320c6
f01047bf:	68 6b 02 00 00       	push   $0x26b
f01047c4:	68 0d 20 13 f0       	push   $0xf013200d
f01047c9:	e8 e2 b9 ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01047ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01047d1:	05 b0 00 00 00       	add    $0xb0,%eax
f01047d6:	83 ec 08             	sub    $0x8,%esp
f01047d9:	50                   	push   %eax
f01047da:	ff 75 08             	pushl  0x8(%ebp)
f01047dd:	e8 ef fe ff ff       	call   f01046d1 <get_disk_table_directory>
f01047e2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01047e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01047e8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047f1:	c1 ea 16             	shr    $0x16,%edx
f01047f4:	c1 e2 02             	shl    $0x2,%edx
f01047f7:	01 d0                	add    %edx,%eax
f01047f9:	8b 00                	mov    (%eax),%eax
f01047fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104801:	85 c0                	test   %eax,%eax
f0104803:	75 34                	jne    f0104839 <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104805:	83 ec 0c             	sub    $0xc,%esp
f0104808:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010480b:	50                   	push   %eax
f010480c:	e8 83 f2 ff ff       	call   f0103a94 <allocate_disk_frame>
f0104811:	83 c4 10             	add    $0x10,%esp
f0104814:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104817:	75 07                	jne    f0104820 <__pf_write_env_table+0x7a>
f0104819:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010481e:	eb 31                	jmp    f0104851 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104820:	8b 45 08             	mov    0x8(%ebp),%eax
f0104823:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104829:	8b 55 0c             	mov    0xc(%ebp),%edx
f010482c:	c1 ea 16             	shr    $0x16,%edx
f010482f:	c1 e2 02             	shl    $0x2,%edx
f0104832:	01 c2                	add    %eax,%edx
f0104834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104837:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0104839:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010483c:	83 ec 08             	sub    $0x8,%esp
f010483f:	ff 75 10             	pushl  0x10(%ebp)
f0104842:	50                   	push   %eax
f0104843:	e8 63 f0 ff ff       	call   f01038ab <write_disk_page>
f0104848:	83 c4 10             	add    $0x10,%esp
f010484b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010484e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104851:	c9                   	leave  
f0104852:	c3                   	ret    

f0104853 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104853:	55                   	push   %ebp
f0104854:	89 e5                	mov    %esp,%ebp
f0104856:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104859:	8b 45 08             	mov    0x8(%ebp),%eax
f010485c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104862:	85 c0                	test   %eax,%eax
f0104864:	75 07                	jne    f010486d <__pf_read_env_table+0x1a>
f0104866:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010486b:	eb 3d                	jmp    f01048aa <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010486d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104870:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104876:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104879:	c1 ea 16             	shr    $0x16,%edx
f010487c:	c1 e2 02             	shl    $0x2,%edx
f010487f:	01 d0                	add    %edx,%eax
f0104881:	8b 00                	mov    (%eax),%eax
f0104883:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010488a:	75 07                	jne    f0104893 <__pf_read_env_table+0x40>
f010488c:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104891:	eb 17                	jmp    f01048aa <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104893:	83 ec 08             	sub    $0x8,%esp
f0104896:	ff 75 10             	pushl  0x10(%ebp)
f0104899:	ff 75 f4             	pushl  -0xc(%ebp)
f010489c:	e8 db ef ff ff       	call   f010387c <read_disk_page>
f01048a1:	83 c4 10             	add    $0x10,%esp
f01048a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01048a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01048aa:	c9                   	leave  
f01048ab:	c3                   	ret    

f01048ac <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048b5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048bb:	85 c0                	test   %eax,%eax
f01048bd:	74 52                	je     f0104911 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048c6:	eb 3e                	jmp    f0104906 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01048c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048cb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048d4:	c1 e2 02             	shl    $0x2,%edx
f01048d7:	01 d0                	add    %edx,%eax
f01048d9:	8b 00                	mov    (%eax),%eax
f01048db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01048de:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e1:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048ea:	c1 e2 02             	shl    $0x2,%edx
f01048ed:	01 d0                	add    %edx,%eax
f01048ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01048f5:	83 ec 0c             	sub    $0xc,%esp
f01048f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01048fb:	e8 5b f2 ff ff       	call   f0103b5b <free_disk_frame>
f0104900:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104903:	ff 45 f4             	incl   -0xc(%ebp)
f0104906:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010490d:	76 b9                	jbe    f01048c8 <__pf_remove_env_all_tables+0x1c>
f010490f:	eb 01                	jmp    f0104912 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104911:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104912:	c9                   	leave  
f0104913:	c3                   	ret    

f0104914 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104914:	55                   	push   %ebp
f0104915:	89 e5                	mov    %esp,%ebp
f0104917:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010491a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010491e:	75 10                	jne    f0104930 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104920:	83 ec 0c             	sub    $0xc,%esp
f0104923:	68 d0 21 13 f0       	push   $0xf01321d0
f0104928:	e8 04 c5 ff ff       	call   f0100e31 <cprintf>
f010492d:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104930:	8b 45 08             	mov    0x8(%ebp),%eax
f0104933:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104939:	85 c0                	test   %eax,%eax
f010493b:	74 43                	je     f0104980 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010493d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104940:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104946:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104949:	c1 ea 16             	shr    $0x16,%edx
f010494c:	c1 e2 02             	shl    $0x2,%edx
f010494f:	01 d0                	add    %edx,%eax
f0104951:	8b 00                	mov    (%eax),%eax
f0104953:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104956:	8b 45 08             	mov    0x8(%ebp),%eax
f0104959:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010495f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104962:	c1 ea 16             	shr    $0x16,%edx
f0104965:	c1 e2 02             	shl    $0x2,%edx
f0104968:	01 d0                	add    %edx,%eax
f010496a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104970:	83 ec 0c             	sub    $0xc,%esp
f0104973:	ff 75 f4             	pushl  -0xc(%ebp)
f0104976:	e8 e0 f1 ff ff       	call   f0103b5b <free_disk_frame>
f010497b:	83 c4 10             	add    $0x10,%esp
f010497e:	eb 01                	jmp    f0104981 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104980:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104981:	c9                   	leave  
f0104982:	c3                   	ret    

f0104983 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104983:	55                   	push   %ebp
f0104984:	89 e5                	mov    %esp,%ebp
f0104986:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104989:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104990:	eb 1f                	jmp    f01049b1 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104995:	83 ec 04             	sub    $0x4,%esp
f0104998:	6a 08                	push   $0x8
f010499a:	ff 75 08             	pushl  0x8(%ebp)
f010499d:	50                   	push   %eax
f010499e:	e8 58 af 02 00       	call   f012f8fb <ide_write>
f01049a3:	83 c4 10             	add    $0x10,%esp
f01049a6:	85 c0                	test   %eax,%eax
f01049a8:	75 12                	jne    f01049bc <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01049aa:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01049b1:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01049b8:	7e d8                	jle    f0104992 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049ba:	eb 01                	jmp    f01049bd <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01049bc:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049bd:	90                   	nop
f01049be:	c9                   	leave  
f01049bf:	c3                   	ret    

f01049c0 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01049c0:	55                   	push   %ebp
f01049c1:	89 e5                	mov    %esp,%ebp
f01049c3:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	0f b6 c0             	movzbl %al,%eax
f01049cc:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049d3:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049d6:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049dc:	ee                   	out    %al,(%dx)
f01049dd:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01049e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01049e7:	89 c2                	mov    %eax,%edx
f01049e9:	ec                   	in     (%dx),%al
f01049ea:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01049ed:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01049f0:	0f b6 c0             	movzbl %al,%eax
}
f01049f3:	c9                   	leave  
f01049f4:	c3                   	ret    

f01049f5 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01049f5:	55                   	push   %ebp
f01049f6:	89 e5                	mov    %esp,%ebp
f01049f8:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fe:	0f b6 c0             	movzbl %al,%eax
f0104a01:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a08:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a0b:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a11:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104a12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a15:	0f b6 c0             	movzbl %al,%eax
f0104a18:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a1f:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a22:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a25:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a28:	ee                   	out    %al,(%dx)
}
f0104a29:	90                   	nop
f0104a2a:	c9                   	leave  
f0104a2b:	c3                   	ret    

f0104a2c <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a2c:	55                   	push   %ebp
f0104a2d:	89 e5                	mov    %esp,%ebp
f0104a2f:	53                   	push   %ebx
f0104a30:	83 ec 24             	sub    $0x24,%esp
f0104a33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a36:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104a39:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104a40:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104a44:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104a47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104a4a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104a4b:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104a4f:	77 48                	ja     f0104a99 <kclock_start+0x6d>
f0104a51:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a58:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104a5c:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a62:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a63:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a67:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a6c:	99                   	cltd   
f0104a6d:	f7 fb                	idiv   %ebx
f0104a6f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a75:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a79:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a7e:	99                   	cltd   
f0104a7f:	f7 fb                	idiv   %ebx
f0104a81:	89 c3                	mov    %eax,%ebx
f0104a83:	89 c8                	mov    %ecx,%eax
f0104a85:	99                   	cltd   
f0104a86:	f7 fb                	idiv   %ebx
f0104a88:	0f b7 c0             	movzwl %ax,%eax
f0104a8b:	83 ec 0c             	sub    $0xc,%esp
f0104a8e:	50                   	push   %eax
f0104a8f:	e8 dd 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104a94:	83 c4 10             	add    $0x10,%esp
f0104a97:	eb 13                	jmp    f0104aac <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a99:	6a 35                	push   $0x35
f0104a9b:	68 f4 21 13 f0       	push   $0xf01321f4
f0104aa0:	6a 33                	push   $0x33
f0104aa2:	68 50 22 13 f0       	push   $0xf0132250
f0104aa7:	e8 04 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104aac:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104ab2:	0f b7 c0             	movzwl %ax,%eax
f0104ab5:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104aba:	83 ec 0c             	sub    $0xc,%esp
f0104abd:	50                   	push   %eax
f0104abe:	e8 3a 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104ac3:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104ac6:	90                   	nop
f0104ac7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104aca:	c9                   	leave  
f0104acb:	c3                   	ret    

f0104acc <kclock_stop>:

void
kclock_stop(void)
{
f0104acc:	55                   	push   %ebp
f0104acd:	89 e5                	mov    %esp,%ebp
f0104acf:	83 ec 18             	sub    $0x18,%esp
f0104ad2:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ad9:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104add:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae3:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104ae4:	83 ec 0c             	sub    $0xc,%esp
f0104ae7:	68 ff ff 00 00       	push   $0xffff
f0104aec:	e8 0c 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104af1:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104af4:	90                   	nop
f0104af5:	c9                   	leave  
f0104af6:	c3                   	ret    

f0104af7 <kclock_resume>:

void
kclock_resume(void)
{
f0104af7:	55                   	push   %ebp
f0104af8:	89 e5                	mov    %esp,%ebp
f0104afa:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104afd:	e8 b1 01 00 00       	call   f0104cb3 <kclock_read_cnt0>
f0104b02:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104b06:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104b0b:	77 06                	ja     f0104b13 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104b0d:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104b13:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b17:	83 e0 01             	and    $0x1,%eax
f0104b1a:	66 85 c0             	test   %ax,%ax
f0104b1d:	74 09                	je     f0104b28 <kclock_resume+0x31>
		cnt0++;
f0104b1f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b23:	40                   	inc    %eax
f0104b24:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b28:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b2f:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104b33:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104b36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104b39:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104b3e:	83 ec 0c             	sub    $0xc,%esp
f0104b41:	50                   	push   %eax
f0104b42:	e8 2a 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b47:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b4a:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104b50:	0f b7 c0             	movzwl %ax,%eax
f0104b53:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b58:	83 ec 0c             	sub    $0xc,%esp
f0104b5b:	50                   	push   %eax
f0104b5c:	e8 9c 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104b61:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b64:	90                   	nop
f0104b65:	c9                   	leave  
f0104b66:	c3                   	ret    

f0104b67 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b67:	55                   	push   %ebp
f0104b68:	89 e5                	mov    %esp,%ebp
f0104b6a:	83 ec 28             	sub    $0x28,%esp
f0104b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b70:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b73:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b7a:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b7e:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b84:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b85:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b89:	83 ec 0c             	sub    $0xc,%esp
f0104b8c:	50                   	push   %eax
f0104b8d:	e8 df 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b92:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b95:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104b9b:	0f b7 c0             	movzwl %ax,%eax
f0104b9e:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104ba3:	83 ec 0c             	sub    $0xc,%esp
f0104ba6:	50                   	push   %eax
f0104ba7:	e8 51 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104bac:	83 c4 10             	add    $0x10,%esp

}
f0104baf:	90                   	nop
f0104bb0:	c9                   	leave  
f0104bb1:	c3                   	ret    

f0104bb2 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104bb2:	55                   	push   %ebp
f0104bb3:	89 e5                	mov    %esp,%ebp
f0104bb5:	56                   	push   %esi
f0104bb6:	53                   	push   %ebx
f0104bb7:	83 ec 20             	sub    $0x20,%esp
f0104bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bbd:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104bc0:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104bc4:	0f 87 8a 00 00 00    	ja     f0104c54 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104bca:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104bce:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bd3:	99                   	cltd   
f0104bd4:	f7 fe                	idiv   %esi
f0104bd6:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104bdc:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104be0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104be5:	99                   	cltd   
f0104be6:	f7 fb                	idiv   %ebx
f0104be8:	89 c6                	mov    %eax,%esi
f0104bea:	89 c8                	mov    %ecx,%eax
f0104bec:	99                   	cltd   
f0104bed:	f7 fe                	idiv   %esi
f0104bef:	89 c3                	mov    %eax,%ebx
f0104bf1:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104bf5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bfa:	99                   	cltd   
f0104bfb:	f7 f9                	idiv   %ecx
f0104bfd:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c03:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c07:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c0c:	99                   	cltd   
f0104c0d:	f7 fe                	idiv   %esi
f0104c0f:	89 c6                	mov    %eax,%esi
f0104c11:	89 c8                	mov    %ecx,%eax
f0104c13:	99                   	cltd   
f0104c14:	f7 fe                	idiv   %esi
f0104c16:	25 01 00 00 80       	and    $0x80000001,%eax
f0104c1b:	85 c0                	test   %eax,%eax
f0104c1d:	79 05                	jns    f0104c24 <kclock_set_quantum+0x72>
f0104c1f:	48                   	dec    %eax
f0104c20:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c23:	40                   	inc    %eax
f0104c24:	01 d8                	add    %ebx,%eax
f0104c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c29:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c30:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c34:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c37:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c3a:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c3e:	0f b7 c0             	movzwl %ax,%eax
f0104c41:	83 ec 0c             	sub    $0xc,%esp
f0104c44:	50                   	push   %eax
f0104c45:	e8 27 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104c4a:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104c4d:	e8 7a fe ff ff       	call   f0104acc <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104c52:	eb 16                	jmp    f0104c6a <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c54:	6a 35                	push   $0x35
f0104c56:	68 f4 21 13 f0       	push   $0xf01321f4
f0104c5b:	68 cc 00 00 00       	push   $0xcc
f0104c60:	68 50 22 13 f0       	push   $0xf0132250
f0104c65:	e8 46 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c6d:	5b                   	pop    %ebx
f0104c6e:	5e                   	pop    %esi
f0104c6f:	5d                   	pop    %ebp
f0104c70:	c3                   	ret    

f0104c71 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c71:	55                   	push   %ebp
f0104c72:	89 e5                	mov    %esp,%ebp
f0104c74:	83 ec 14             	sub    $0x14,%esp
f0104c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c81:	0f b6 c0             	movzbl %al,%eax
f0104c84:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c8b:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c8e:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c91:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c94:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c98:	66 c1 e8 08          	shr    $0x8,%ax
f0104c9c:	0f b6 c0             	movzbl %al,%eax
f0104c9f:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104ca6:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104ca9:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104cac:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104caf:	ee                   	out    %al,(%dx)
}
f0104cb0:	90                   	nop
f0104cb1:	c9                   	leave  
f0104cb2:	c3                   	ret    

f0104cb3 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104cb3:	55                   	push   %ebp
f0104cb4:	89 e5                	mov    %esp,%ebp
f0104cb6:	83 ec 20             	sub    $0x20,%esp
f0104cb9:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cc3:	89 c2                	mov    %eax,%edx
f0104cc5:	ec                   	in     (%dx),%al
f0104cc6:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104cc9:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ccc:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ccf:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cd9:	89 c2                	mov    %eax,%edx
f0104cdb:	ec                   	in     (%dx),%al
f0104cdc:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104cdf:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104ce2:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104ce5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ce9:	c1 e0 08             	shl    $0x8,%eax
f0104cec:	89 c2                	mov    %eax,%edx
f0104cee:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104cf2:	09 d0                	or     %edx,%eax
f0104cf4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104cfb:	c9                   	leave  
f0104cfc:	c3                   	ret    

f0104cfd <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104cfd:	55                   	push   %ebp
f0104cfe:	89 e5                	mov    %esp,%ebp
f0104d00:	83 ec 30             	sub    $0x30,%esp
f0104d03:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d0d:	89 c2                	mov    %eax,%edx
f0104d0f:	ec                   	in     (%dx),%al
f0104d10:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104d13:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104d16:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d19:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d20:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d24:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d2a:	ee                   	out    %al,(%dx)
f0104d2b:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d35:	89 c2                	mov    %eax,%edx
f0104d37:	ec                   	in     (%dx),%al
f0104d38:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104d3b:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d3e:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104d41:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104d4b:	89 c2                	mov    %eax,%edx
f0104d4d:	ec                   	in     (%dx),%al
f0104d4e:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104d51:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d54:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d57:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104d5b:	c1 e0 08             	shl    $0x8,%eax
f0104d5e:	89 c2                	mov    %eax,%edx
f0104d60:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d64:	09 d0                	or     %edx,%eax
f0104d66:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d6a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d6e:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d75:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d78:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d7b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d7e:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d82:	c9                   	leave  
f0104d83:	c3                   	ret    

f0104d84 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d84:	55                   	push   %ebp
f0104d85:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d8b:	74 1d                	je     f0104daa <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104da3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104daa:	90                   	nop
f0104dab:	5d                   	pop    %ebp
f0104dac:	c3                   	ret    

f0104dad <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104dad:	55                   	push   %ebp
f0104dae:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db4:	74 08                	je     f0104dbe <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104db9:	8b 40 0c             	mov    0xc(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104dc3:	5d                   	pop    %ebp
f0104dc4:	c3                   	ret    

f0104dc5 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104dc5:	55                   	push   %ebp
f0104dc6:	89 e5                	mov    %esp,%ebp
f0104dc8:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104dcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dcf:	75 16                	jne    f0104de7 <enqueue+0x22>
f0104dd1:	68 64 22 13 f0       	push   $0xf0132264
f0104dd6:	68 72 22 13 f0       	push   $0xf0132272
f0104ddb:	6a 33                	push   $0x33
f0104ddd:	68 87 22 13 f0       	push   $0xf0132287
f0104de2:	e8 c9 b3 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104de7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104deb:	74 66                	je     f0104e53 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104ded:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104df1:	75 14                	jne    f0104e07 <enqueue+0x42>
f0104df3:	83 ec 04             	sub    $0x4,%esp
f0104df6:	68 a0 22 13 f0       	push   $0xf01322a0
f0104dfb:	6a 36                	push   $0x36
f0104dfd:	68 87 22 13 f0       	push   $0xf0132287
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 10                	mov    (%eax),%edx
f0104e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e0f:	89 50 44             	mov    %edx,0x44(%eax)
f0104e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e15:	8b 40 44             	mov    0x44(%eax),%eax
f0104e18:	85 c0                	test   %eax,%eax
f0104e1a:	74 0d                	je     f0104e29 <enqueue+0x64>
f0104e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e1f:	8b 00                	mov    (%eax),%eax
f0104e21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e24:	89 50 48             	mov    %edx,0x48(%eax)
f0104e27:	eb 09                	jmp    f0104e32 <enqueue+0x6d>
f0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e2f:	89 50 04             	mov    %edx,0x4(%eax)
f0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e38:	89 10                	mov    %edx,(%eax)
f0104e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e3d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e47:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e4a:	8d 50 01             	lea    0x1(%eax),%edx
f0104e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e50:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104e53:	90                   	nop
f0104e54:	c9                   	leave  
f0104e55:	c3                   	ret    

f0104e56 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104e56:	55                   	push   %ebp
f0104e57:	89 e5                	mov    %esp,%ebp
f0104e59:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104e5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e60:	75 0a                	jne    f0104e6c <dequeue+0x16>
f0104e62:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e67:	e9 a0 00 00 00       	jmp    f0104f0c <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e6f:	8b 40 04             	mov    0x4(%eax),%eax
f0104e72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e79:	0f 84 8a 00 00 00    	je     f0104f09 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e83:	75 14                	jne    f0104e99 <dequeue+0x43>
f0104e85:	83 ec 04             	sub    $0x4,%esp
f0104e88:	68 c3 22 13 f0       	push   $0xf01322c3
f0104e8d:	6a 43                	push   $0x43
f0104e8f:	68 87 22 13 f0       	push   $0xf0132287
f0104e94:	e8 17 b3 ff ff       	call   f01001b0 <_panic>
f0104e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9c:	8b 40 44             	mov    0x44(%eax),%eax
f0104e9f:	85 c0                	test   %eax,%eax
f0104ea1:	74 11                	je     f0104eb4 <dequeue+0x5e>
f0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104eac:	8b 52 48             	mov    0x48(%edx),%edx
f0104eaf:	89 50 48             	mov    %edx,0x48(%eax)
f0104eb2:	eb 0c                	jmp    f0104ec0 <dequeue+0x6a>
f0104eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb7:	8b 50 48             	mov    0x48(%eax),%edx
f0104eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ebd:	89 50 04             	mov    %edx,0x4(%eax)
f0104ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec3:	8b 40 48             	mov    0x48(%eax),%eax
f0104ec6:	85 c0                	test   %eax,%eax
f0104ec8:	74 11                	je     f0104edb <dequeue+0x85>
f0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecd:	8b 40 48             	mov    0x48(%eax),%eax
f0104ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ed3:	8b 52 44             	mov    0x44(%edx),%edx
f0104ed6:	89 50 44             	mov    %edx,0x44(%eax)
f0104ed9:	eb 0b                	jmp    f0104ee6 <dequeue+0x90>
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	8b 50 44             	mov    0x44(%eax),%edx
f0104ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee4:	89 10                	mov    %edx,(%eax)
f0104ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f00:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f06:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104f0c:	c9                   	leave  
f0104f0d:	c3                   	ret    

f0104f0e <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104f0e:	55                   	push   %ebp
f0104f0f:	89 e5                	mov    %esp,%ebp
f0104f11:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f18:	75 16                	jne    f0104f30 <remove_from_queue+0x22>
f0104f1a:	68 64 22 13 f0       	push   $0xf0132264
f0104f1f:	68 72 22 13 f0       	push   $0xf0132272
f0104f24:	6a 4d                	push   $0x4d
f0104f26:	68 87 22 13 f0       	push   $0xf0132287
f0104f2b:	e8 80 b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104f30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f34:	0f 84 8a 00 00 00    	je     f0104fc4 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104f3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f3e:	75 14                	jne    f0104f54 <remove_from_queue+0x46>
f0104f40:	83 ec 04             	sub    $0x4,%esp
f0104f43:	68 c3 22 13 f0       	push   $0xf01322c3
f0104f48:	6a 51                	push   $0x51
f0104f4a:	68 87 22 13 f0       	push   $0xf0132287
f0104f4f:	e8 5c b2 ff ff       	call   f01001b0 <_panic>
f0104f54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f57:	8b 40 44             	mov    0x44(%eax),%eax
f0104f5a:	85 c0                	test   %eax,%eax
f0104f5c:	74 11                	je     f0104f6f <remove_from_queue+0x61>
f0104f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f61:	8b 40 44             	mov    0x44(%eax),%eax
f0104f64:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f67:	8b 52 48             	mov    0x48(%edx),%edx
f0104f6a:	89 50 48             	mov    %edx,0x48(%eax)
f0104f6d:	eb 0c                	jmp    f0104f7b <remove_from_queue+0x6d>
f0104f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f72:	8b 50 48             	mov    0x48(%eax),%edx
f0104f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f78:	89 50 04             	mov    %edx,0x4(%eax)
f0104f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f7e:	8b 40 48             	mov    0x48(%eax),%eax
f0104f81:	85 c0                	test   %eax,%eax
f0104f83:	74 11                	je     f0104f96 <remove_from_queue+0x88>
f0104f85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f88:	8b 40 48             	mov    0x48(%eax),%eax
f0104f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f8e:	8b 52 44             	mov    0x44(%edx),%edx
f0104f91:	89 50 44             	mov    %edx,0x44(%eax)
f0104f94:	eb 0b                	jmp    f0104fa1 <remove_from_queue+0x93>
f0104f96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f99:	8b 50 44             	mov    0x44(%eax),%edx
f0104f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9f:	89 10                	mov    %edx,(%eax)
f0104fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fa4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fb8:	8b 40 0c             	mov    0xc(%eax),%eax
f0104fbb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc1:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104fc4:	90                   	nop
f0104fc5:	c9                   	leave  
f0104fc6:	c3                   	ret    

f0104fc7 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104fc7:	55                   	push   %ebp
f0104fc8:	89 e5                	mov    %esp,%ebp
f0104fca:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104fcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fd1:	75 07                	jne    f0104fda <find_env_in_queue+0x13>
f0104fd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fd8:	eb 58                	jmp    f0105032 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104fda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe4:	8b 00                	mov    (%eax),%eax
f0104fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fe9:	eb 19                	jmp    f0105004 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104feb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ff1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104ff4:	75 05                	jne    f0104ffb <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ff9:	eb 37                	jmp    f0105032 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104ffb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffe:	8b 40 08             	mov    0x8(%eax),%eax
f0105001:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105004:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0105008:	74 08                	je     f0105012 <find_env_in_queue+0x4b>
f010500a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010500d:	8b 40 44             	mov    0x44(%eax),%eax
f0105010:	eb 05                	jmp    f0105017 <find_env_in_queue+0x50>
f0105012:	b8 00 00 00 00       	mov    $0x0,%eax
f0105017:	8b 55 08             	mov    0x8(%ebp),%edx
f010501a:	89 42 08             	mov    %eax,0x8(%edx)
f010501d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105020:	8b 40 08             	mov    0x8(%eax),%eax
f0105023:	85 c0                	test   %eax,%eax
f0105025:	75 c4                	jne    f0104feb <find_env_in_queue+0x24>
f0105027:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010502b:	75 be                	jne    f0104feb <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010502d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105032:	c9                   	leave  
f0105033:	c3                   	ret    

f0105034 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0105034:	55                   	push   %ebp
f0105035:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0105037:	90                   	nop
f0105038:	5d                   	pop    %ebp
f0105039:	c3                   	ret    

f010503a <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f010503a:	55                   	push   %ebp
f010503b:	89 e5                	mov    %esp,%ebp
f010503d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105040:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105044:	74 1d                	je     f0105063 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0105046:	8b 45 08             	mov    0x8(%ebp),%eax
f0105049:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0105050:	83 ec 08             	sub    $0x8,%esp
f0105053:	ff 75 08             	pushl  0x8(%ebp)
f0105056:	68 60 3a 25 f0       	push   $0xf0253a60
f010505b:	e8 65 fd ff ff       	call   f0104dc5 <enqueue>
f0105060:	83 c4 10             	add    $0x10,%esp
	}
}
f0105063:	90                   	nop
f0105064:	c9                   	leave  
f0105065:	c3                   	ret    

f0105066 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105066:	55                   	push   %ebp
f0105067:	89 e5                	mov    %esp,%ebp
f0105069:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010506c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105070:	0f 84 02 01 00 00    	je     f0105178 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010507d:	e9 e5 00 00 00       	jmp    f0105167 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105082:	8b 45 08             	mov    0x8(%ebp),%eax
f0105085:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105088:	89 c2                	mov    %eax,%edx
f010508a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010508d:	c1 e0 04             	shl    $0x4,%eax
f0105090:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105095:	52                   	push   %edx
f0105096:	50                   	push   %eax
f0105097:	e8 2b ff ff ff       	call   f0104fc7 <find_env_in_queue>
f010509c:	83 c4 08             	add    $0x8,%esp
f010509f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01050a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01050a6:	0f 84 b8 00 00 00    	je     f0105164 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01050ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050b0:	75 17                	jne    f01050c9 <sched_remove_ready+0x63>
f01050b2:	83 ec 04             	sub    $0x4,%esp
f01050b5:	68 c3 22 13 f0       	push   $0xf01322c3
f01050ba:	68 90 00 00 00       	push   $0x90
f01050bf:	68 87 22 13 f0       	push   $0xf0132287
f01050c4:	e8 e7 b0 ff ff       	call   f01001b0 <_panic>
f01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cc:	8b 40 44             	mov    0x44(%eax),%eax
f01050cf:	85 c0                	test   %eax,%eax
f01050d1:	74 11                	je     f01050e4 <sched_remove_ready+0x7e>
f01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050d6:	8b 40 44             	mov    0x44(%eax),%eax
f01050d9:	8b 55 08             	mov    0x8(%ebp),%edx
f01050dc:	8b 52 48             	mov    0x48(%edx),%edx
f01050df:	89 50 48             	mov    %edx,0x48(%eax)
f01050e2:	eb 14                	jmp    f01050f8 <sched_remove_ready+0x92>
f01050e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e7:	8b 40 48             	mov    0x48(%eax),%eax
f01050ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050ed:	c1 e2 04             	shl    $0x4,%edx
f01050f0:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f01050f6:	89 02                	mov    %eax,(%edx)
f01050f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01050fb:	8b 40 48             	mov    0x48(%eax),%eax
f01050fe:	85 c0                	test   %eax,%eax
f0105100:	74 11                	je     f0105113 <sched_remove_ready+0xad>
f0105102:	8b 45 08             	mov    0x8(%ebp),%eax
f0105105:	8b 40 48             	mov    0x48(%eax),%eax
f0105108:	8b 55 08             	mov    0x8(%ebp),%edx
f010510b:	8b 52 44             	mov    0x44(%edx),%edx
f010510e:	89 50 44             	mov    %edx,0x44(%eax)
f0105111:	eb 14                	jmp    f0105127 <sched_remove_ready+0xc1>
f0105113:	8b 45 08             	mov    0x8(%ebp),%eax
f0105116:	8b 40 44             	mov    0x44(%eax),%eax
f0105119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010511c:	c1 e2 04             	shl    $0x4,%edx
f010511f:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105125:	89 02                	mov    %eax,(%edx)
f0105127:	8b 45 08             	mov    0x8(%ebp),%eax
f010512a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105131:	8b 45 08             	mov    0x8(%ebp),%eax
f0105134:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010513b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513e:	c1 e0 04             	shl    $0x4,%eax
f0105141:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105146:	8b 00                	mov    (%eax),%eax
f0105148:	8d 50 ff             	lea    -0x1(%eax),%edx
f010514b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514e:	c1 e0 04             	shl    $0x4,%eax
f0105151:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105156:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0105158:	8b 45 08             	mov    0x8(%ebp),%eax
f010515b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105162:	eb 14                	jmp    f0105178 <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105164:	ff 45 f4             	incl   -0xc(%ebp)
f0105167:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f010516c:	0f b6 c0             	movzbl %al,%eax
f010516f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105172:	0f 8f 0a ff ff ff    	jg     f0105082 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	74 1d                	je     f01051a3 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105186:	8b 45 08             	mov    0x8(%ebp),%eax
f0105189:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105190:	83 ec 08             	sub    $0x8,%esp
f0105193:	ff 75 08             	pushl  0x8(%ebp)
f0105196:	68 f8 bd 2b f0       	push   $0xf02bbdf8
f010519b:	e8 25 fc ff ff       	call   f0104dc5 <enqueue>
f01051a0:	83 c4 10             	add    $0x10,%esp
	}
}
f01051a3:	90                   	nop
f01051a4:	c9                   	leave  
f01051a5:	c3                   	ret    

f01051a6 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f01051a6:	55                   	push   %ebp
f01051a7:	89 e5                	mov    %esp,%ebp
f01051a9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01051ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051b0:	0f 84 92 00 00 00    	je     f0105248 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01051b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051ba:	75 17                	jne    f01051d3 <sched_remove_new+0x2d>
f01051bc:	83 ec 04             	sub    $0x4,%esp
f01051bf:	68 c3 22 13 f0       	push   $0xf01322c3
f01051c4:	68 ab 00 00 00       	push   $0xab
f01051c9:	68 87 22 13 f0       	push   $0xf0132287
f01051ce:	e8 dd af ff ff       	call   f01001b0 <_panic>
f01051d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d6:	8b 40 44             	mov    0x44(%eax),%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	74 11                	je     f01051ee <sched_remove_new+0x48>
f01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e0:	8b 40 44             	mov    0x44(%eax),%eax
f01051e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01051e6:	8b 52 48             	mov    0x48(%edx),%edx
f01051e9:	89 50 48             	mov    %edx,0x48(%eax)
f01051ec:	eb 0b                	jmp    f01051f9 <sched_remove_new+0x53>
f01051ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f1:	8b 40 48             	mov    0x48(%eax),%eax
f01051f4:	a3 fc bd 2b f0       	mov    %eax,0xf02bbdfc
f01051f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01051fc:	8b 40 48             	mov    0x48(%eax),%eax
f01051ff:	85 c0                	test   %eax,%eax
f0105201:	74 11                	je     f0105214 <sched_remove_new+0x6e>
f0105203:	8b 45 08             	mov    0x8(%ebp),%eax
f0105206:	8b 40 48             	mov    0x48(%eax),%eax
f0105209:	8b 55 08             	mov    0x8(%ebp),%edx
f010520c:	8b 52 44             	mov    0x44(%edx),%edx
f010520f:	89 50 44             	mov    %edx,0x44(%eax)
f0105212:	eb 0b                	jmp    f010521f <sched_remove_new+0x79>
f0105214:	8b 45 08             	mov    0x8(%ebp),%eax
f0105217:	8b 40 44             	mov    0x44(%eax),%eax
f010521a:	a3 f8 bd 2b f0       	mov    %eax,0xf02bbdf8
f010521f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105222:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105229:	8b 45 08             	mov    0x8(%ebp),%eax
f010522c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105233:	a1 04 be 2b f0       	mov    0xf02bbe04,%eax
f0105238:	48                   	dec    %eax
f0105239:	a3 04 be 2b f0       	mov    %eax,0xf02bbe04
		env->env_status = ENV_UNKNOWN;
f010523e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105241:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105248:	90                   	nop
f0105249:	c9                   	leave  
f010524a:	c3                   	ret    

f010524b <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010524b:	55                   	push   %ebp
f010524c:	89 e5                	mov    %esp,%ebp
f010524e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105251:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105255:	74 34                	je     f010528b <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0105257:	e8 aa 86 00 00       	call   f010d906 <isBufferingEnabled>
f010525c:	84 c0                	test   %al,%al
f010525e:	74 0e                	je     f010526e <sched_insert_exit+0x23>
f0105260:	83 ec 0c             	sub    $0xc,%esp
f0105263:	ff 75 08             	pushl  0x8(%ebp)
f0105266:	e8 32 5b 00 00       	call   f010ad9d <cleanup_buffers>
f010526b:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010526e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105271:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0105278:	83 ec 08             	sub    $0x8,%esp
f010527b:	ff 75 08             	pushl  0x8(%ebp)
f010527e:	68 c4 99 2b f0       	push   $0xf02b99c4
f0105283:	e8 3d fb ff ff       	call   f0104dc5 <enqueue>
f0105288:	83 c4 10             	add    $0x10,%esp
	}
}
f010528b:	90                   	nop
f010528c:	c9                   	leave  
f010528d:	c3                   	ret    

f010528e <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f010528e:	55                   	push   %ebp
f010528f:	89 e5                	mov    %esp,%ebp
f0105291:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105294:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105298:	0f 84 92 00 00 00    	je     f0105330 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010529e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052a2:	75 17                	jne    f01052bb <sched_remove_exit+0x2d>
f01052a4:	83 ec 04             	sub    $0x4,%esp
f01052a7:	68 c3 22 13 f0       	push   $0xf01322c3
f01052ac:	68 c3 00 00 00       	push   $0xc3
f01052b1:	68 87 22 13 f0       	push   $0xf0132287
f01052b6:	e8 f5 ae ff ff       	call   f01001b0 <_panic>
f01052bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052be:	8b 40 44             	mov    0x44(%eax),%eax
f01052c1:	85 c0                	test   %eax,%eax
f01052c3:	74 11                	je     f01052d6 <sched_remove_exit+0x48>
f01052c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c8:	8b 40 44             	mov    0x44(%eax),%eax
f01052cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01052ce:	8b 52 48             	mov    0x48(%edx),%edx
f01052d1:	89 50 48             	mov    %edx,0x48(%eax)
f01052d4:	eb 0b                	jmp    f01052e1 <sched_remove_exit+0x53>
f01052d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d9:	8b 40 48             	mov    0x48(%eax),%eax
f01052dc:	a3 c8 99 2b f0       	mov    %eax,0xf02b99c8
f01052e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e4:	8b 40 48             	mov    0x48(%eax),%eax
f01052e7:	85 c0                	test   %eax,%eax
f01052e9:	74 11                	je     f01052fc <sched_remove_exit+0x6e>
f01052eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ee:	8b 40 48             	mov    0x48(%eax),%eax
f01052f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01052f4:	8b 52 44             	mov    0x44(%edx),%edx
f01052f7:	89 50 44             	mov    %edx,0x44(%eax)
f01052fa:	eb 0b                	jmp    f0105307 <sched_remove_exit+0x79>
f01052fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ff:	8b 40 44             	mov    0x44(%eax),%eax
f0105302:	a3 c4 99 2b f0       	mov    %eax,0xf02b99c4
f0105307:	8b 45 08             	mov    0x8(%ebp),%eax
f010530a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010531b:	a1 d0 99 2b f0       	mov    0xf02b99d0,%eax
f0105320:	48                   	dec    %eax
f0105321:	a3 d0 99 2b f0       	mov    %eax,0xf02b99d0
		env->env_status = ENV_UNKNOWN;
f0105326:	8b 45 08             	mov    0x8(%ebp),%eax
f0105329:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105330:	90                   	nop
f0105331:	c9                   	leave  
f0105332:	c3                   	ret    

f0105333 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0105333:	55                   	push   %ebp
f0105334:	89 e5                	mov    %esp,%ebp
f0105336:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105339:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010533d:	74 0e                	je     f010534d <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010533f:	83 ec 0c             	sub    $0xc,%esp
f0105342:	ff 75 08             	pushl  0x8(%ebp)
f0105345:	e8 30 fe ff ff       	call   f010517a <sched_insert_new>
f010534a:	83 c4 10             	add    $0x10,%esp
	}
}
f010534d:	90                   	nop
f010534e:	c9                   	leave  
f010534f:	c3                   	ret    

f0105350 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0105350:	55                   	push   %ebp
f0105351:	89 e5                	mov    %esp,%ebp
f0105353:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010535d:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105362:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105365:	eb 3d                	jmp    f01053a4 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105367:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010536a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010536d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105370:	75 2a                	jne    f010539c <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105372:	83 ec 0c             	sub    $0xc,%esp
f0105375:	ff 75 f4             	pushl  -0xc(%ebp)
f0105378:	e8 29 fe ff ff       	call   f01051a6 <sched_remove_new>
f010537d:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105380:	83 ec 0c             	sub    $0xc,%esp
f0105383:	ff 75 f4             	pushl  -0xc(%ebp)
f0105386:	e8 af fc ff ff       	call   f010503a <sched_insert_ready0>
f010538b:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010538e:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0105393:	85 c0                	test   %eax,%eax
f0105395:	75 36                	jne    f01053cd <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105397:	e8 7d 0e 00 00       	call   f0106219 <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010539c:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01053a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a8:	74 08                	je     f01053b2 <sched_run_env+0x62>
f01053aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ad:	8b 40 44             	mov    0x44(%eax),%eax
f01053b0:	eb 05                	jmp    f01053b7 <sched_run_env+0x67>
f01053b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01053b7:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f01053bc:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01053c1:	85 c0                	test   %eax,%eax
f01053c3:	75 a2                	jne    f0105367 <sched_run_env+0x17>
f01053c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c9:	75 9c                	jne    f0105367 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053cb:	eb 01                	jmp    f01053ce <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01053cd:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053ce:	90                   	nop
f01053cf:	c9                   	leave  
f01053d0:	c3                   	ret    

f01053d1 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01053d1:	55                   	push   %ebp
f01053d2:	89 e5                	mov    %esp,%ebp
f01053d4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01053de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01053e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053e9:	75 59                	jne    f0105444 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053eb:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01053f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053f3:	eb 28                	jmp    f010541d <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053fe:	75 15                	jne    f0105415 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105400:	83 ec 0c             	sub    $0xc,%esp
f0105403:	ff 75 f4             	pushl  -0xc(%ebp)
f0105406:	e8 9b fd ff ff       	call   f01051a6 <sched_remove_new>
f010540b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010540e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105415:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010541a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010541d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105421:	74 08                	je     f010542b <sched_exit_env+0x5a>
f0105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105426:	8b 40 44             	mov    0x44(%eax),%eax
f0105429:	eb 05                	jmp    f0105430 <sched_exit_env+0x5f>
f010542b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105430:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105435:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010543a:	85 c0                	test   %eax,%eax
f010543c:	75 b7                	jne    f01053f5 <sched_exit_env+0x24>
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	75 b1                	jne    f01053f5 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105444:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105448:	0f 85 6e 01 00 00    	jne    f01055bc <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010544e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105455:	e9 4e 01 00 00       	jmp    f01055a8 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010545a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010545d:	c1 e0 04             	shl    $0x4,%eax
f0105460:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105465:	8b 00                	mov    (%eax),%eax
f0105467:	85 c0                	test   %eax,%eax
f0105469:	0f 84 30 01 00 00    	je     f010559f <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f010546f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105476:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105479:	c1 e0 04             	shl    $0x4,%eax
f010547c:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105481:	8b 00                	mov    (%eax),%eax
f0105483:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105486:	e9 d4 00 00 00       	jmp    f010555f <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010548b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010548e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105491:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105494:	0f 85 b5 00 00 00    	jne    f010554f <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010549a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010549e:	75 17                	jne    f01054b7 <sched_exit_env+0xe6>
f01054a0:	83 ec 04             	sub    $0x4,%esp
f01054a3:	68 c3 22 13 f0       	push   $0xf01322c3
f01054a8:	68 10 01 00 00       	push   $0x110
f01054ad:	68 87 22 13 f0       	push   $0xf0132287
f01054b2:	e8 f9 ac ff ff       	call   f01001b0 <_panic>
f01054b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ba:	8b 40 44             	mov    0x44(%eax),%eax
f01054bd:	85 c0                	test   %eax,%eax
f01054bf:	74 11                	je     f01054d2 <sched_exit_env+0x101>
f01054c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c4:	8b 40 44             	mov    0x44(%eax),%eax
f01054c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054ca:	8b 52 48             	mov    0x48(%edx),%edx
f01054cd:	89 50 48             	mov    %edx,0x48(%eax)
f01054d0:	eb 14                	jmp    f01054e6 <sched_exit_env+0x115>
f01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d5:	8b 40 48             	mov    0x48(%eax),%eax
f01054d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054db:	c1 e2 04             	shl    $0x4,%edx
f01054de:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f01054e4:	89 02                	mov    %eax,(%edx)
f01054e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e9:	8b 40 48             	mov    0x48(%eax),%eax
f01054ec:	85 c0                	test   %eax,%eax
f01054ee:	74 11                	je     f0105501 <sched_exit_env+0x130>
f01054f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f3:	8b 40 48             	mov    0x48(%eax),%eax
f01054f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054f9:	8b 52 44             	mov    0x44(%edx),%edx
f01054fc:	89 50 44             	mov    %edx,0x44(%eax)
f01054ff:	eb 14                	jmp    f0105515 <sched_exit_env+0x144>
f0105501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105504:	8b 40 44             	mov    0x44(%eax),%eax
f0105507:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010550a:	c1 e2 04             	shl    $0x4,%edx
f010550d:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105513:	89 02                	mov    %eax,(%edx)
f0105515:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105518:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105522:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105529:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010552c:	c1 e0 04             	shl    $0x4,%eax
f010552f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105534:	8b 00                	mov    (%eax),%eax
f0105536:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105539:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010553c:	c1 e0 04             	shl    $0x4,%eax
f010553f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105544:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105546:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010554d:	eb 50                	jmp    f010559f <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010554f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105552:	c1 e0 04             	shl    $0x4,%eax
f0105555:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010555a:	8b 00                	mov    (%eax),%eax
f010555c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010555f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105563:	74 08                	je     f010556d <sched_exit_env+0x19c>
f0105565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105568:	8b 40 44             	mov    0x44(%eax),%eax
f010556b:	eb 05                	jmp    f0105572 <sched_exit_env+0x1a1>
f010556d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105572:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105575:	c1 e2 04             	shl    $0x4,%edx
f0105578:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f010557e:	89 02                	mov    %eax,(%edx)
f0105580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105583:	c1 e0 04             	shl    $0x4,%eax
f0105586:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010558b:	8b 00                	mov    (%eax),%eax
f010558d:	85 c0                	test   %eax,%eax
f010558f:	0f 85 f6 fe ff ff    	jne    f010548b <sched_exit_env+0xba>
f0105595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105599:	0f 85 ec fe ff ff    	jne    f010548b <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010559f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055a3:	75 16                	jne    f01055bb <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01055a5:	ff 45 ec             	incl   -0x14(%ebp)
f01055a8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01055ad:	0f b6 c0             	movzbl %al,%eax
f01055b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01055b3:	0f 8f a1 fe ff ff    	jg     f010545a <sched_exit_env+0x89>
f01055b9:	eb 01                	jmp    f01055bc <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01055bb:	90                   	nop
		}
	}
	if (!found)
f01055bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055c0:	75 1c                	jne    f01055de <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01055c2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055ca:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055cd:	75 0f                	jne    f01055de <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f01055cf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01055d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01055de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055e2:	74 2a                	je     f010560e <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f01055e4:	83 ec 0c             	sub    $0xc,%esp
f01055e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01055ea:	e8 5c fc ff ff       	call   f010524b <sched_insert_exit>
f01055ef:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01055f2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055fd:	75 0f                	jne    f010560e <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055ff:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0105606:	00 00 00 
			fos_scheduler();
f0105609:	e8 0b 0c 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f010560e:	90                   	nop
f010560f:	c9                   	leave  
f0105610:	c3                   	ret    

f0105611 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105611:	55                   	push   %ebp
f0105612:	89 e5                	mov    %esp,%ebp
f0105614:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010561e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105625:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105629:	0f 85 9d 00 00 00    	jne    f01056cc <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562f:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105634:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105637:	eb 64                	jmp    f010569d <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f0105639:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010563f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105642:	75 51                	jne    f0105695 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105647:	8d 50 5c             	lea    0x5c(%eax),%edx
f010564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105650:	83 ec 04             	sub    $0x4,%esp
f0105653:	52                   	push   %edx
f0105654:	50                   	push   %eax
f0105655:	68 e4 22 13 f0       	push   $0xf01322e4
f010565a:	e8 d2 b7 ff ff       	call   f0100e31 <cprintf>
f010565f:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105662:	83 ec 0c             	sub    $0xc,%esp
f0105665:	ff 75 f4             	pushl  -0xc(%ebp)
f0105668:	e8 39 fb ff ff       	call   f01051a6 <sched_remove_new>
f010566d:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105670:	83 ec 0c             	sub    $0xc,%esp
f0105673:	ff 75 f4             	pushl  -0xc(%ebp)
f0105676:	e8 2e 43 00 00       	call   f01099a9 <env_free>
f010567b:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010567e:	83 ec 0c             	sub    $0xc,%esp
f0105681:	68 09 23 13 f0       	push   $0xf0132309
f0105686:	e8 a6 b7 ff ff       	call   f0100e31 <cprintf>
f010568b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010568e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105695:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010569a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010569d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a1:	74 08                	je     f01056ab <sched_kill_env+0x9a>
f01056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056a6:	8b 40 44             	mov    0x44(%eax),%eax
f01056a9:	eb 05                	jmp    f01056b0 <sched_kill_env+0x9f>
f01056ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01056b0:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f01056b5:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01056ba:	85 c0                	test   %eax,%eax
f01056bc:	0f 85 77 ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
f01056c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056c6:	0f 85 6d ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f01056cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056d0:	0f 85 aa 01 00 00    	jne    f0105880 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056dd:	e9 8a 01 00 00       	jmp    f010586c <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056e5:	c1 e0 04             	shl    $0x4,%eax
f01056e8:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f01056ed:	8b 00                	mov    (%eax),%eax
f01056ef:	85 c0                	test   %eax,%eax
f01056f1:	0f 84 6c 01 00 00    	je     f0105863 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f01056f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105701:	c1 e0 04             	shl    $0x4,%eax
f0105704:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105709:	8b 00                	mov    (%eax),%eax
f010570b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010570e:	e9 10 01 00 00       	jmp    f0105823 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105716:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105719:	3b 45 08             	cmp    0x8(%ebp),%eax
f010571c:	0f 85 f1 00 00 00    	jne    f0105813 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105728:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010572e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105731:	52                   	push   %edx
f0105732:	50                   	push   %eax
f0105733:	68 10 23 13 f0       	push   $0xf0132310
f0105738:	e8 f4 b6 ff ff       	call   f0100e31 <cprintf>
f010573d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105744:	75 17                	jne    f010575d <sched_kill_env+0x14c>
f0105746:	83 ec 04             	sub    $0x4,%esp
f0105749:	68 c3 22 13 f0       	push   $0xf01322c3
f010574e:	68 54 01 00 00       	push   $0x154
f0105753:	68 87 22 13 f0       	push   $0xf0132287
f0105758:	e8 53 aa ff ff       	call   f01001b0 <_panic>
f010575d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105760:	8b 40 44             	mov    0x44(%eax),%eax
f0105763:	85 c0                	test   %eax,%eax
f0105765:	74 11                	je     f0105778 <sched_kill_env+0x167>
f0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576a:	8b 40 44             	mov    0x44(%eax),%eax
f010576d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105770:	8b 52 48             	mov    0x48(%edx),%edx
f0105773:	89 50 48             	mov    %edx,0x48(%eax)
f0105776:	eb 14                	jmp    f010578c <sched_kill_env+0x17b>
f0105778:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577b:	8b 40 48             	mov    0x48(%eax),%eax
f010577e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105781:	c1 e2 04             	shl    $0x4,%edx
f0105784:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f010578a:	89 02                	mov    %eax,(%edx)
f010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578f:	8b 40 48             	mov    0x48(%eax),%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	74 11                	je     f01057a7 <sched_kill_env+0x196>
f0105796:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105799:	8b 40 48             	mov    0x48(%eax),%eax
f010579c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010579f:	8b 52 44             	mov    0x44(%edx),%edx
f01057a2:	89 50 44             	mov    %edx,0x44(%eax)
f01057a5:	eb 14                	jmp    f01057bb <sched_kill_env+0x1aa>
f01057a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057aa:	8b 40 44             	mov    0x44(%eax),%eax
f01057ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b0:	c1 e2 04             	shl    $0x4,%edx
f01057b3:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f01057b9:	89 02                	mov    %eax,(%edx)
f01057bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057be:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057d2:	c1 e0 04             	shl    $0x4,%eax
f01057d5:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f01057da:	8b 00                	mov    (%eax),%eax
f01057dc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01057df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057e2:	c1 e0 04             	shl    $0x4,%eax
f01057e5:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f01057ea:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01057ec:	83 ec 0c             	sub    $0xc,%esp
f01057ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01057f2:	e8 b2 41 00 00       	call   f01099a9 <env_free>
f01057f7:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01057fa:	83 ec 0c             	sub    $0xc,%esp
f01057fd:	68 09 23 13 f0       	push   $0xf0132309
f0105802:	e8 2a b6 ff ff       	call   f0100e31 <cprintf>
f0105807:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010580a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105811:	eb 50                	jmp    f0105863 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105816:	c1 e0 04             	shl    $0x4,%eax
f0105819:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010581e:	8b 00                	mov    (%eax),%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105827:	74 08                	je     f0105831 <sched_kill_env+0x220>
f0105829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582c:	8b 40 44             	mov    0x44(%eax),%eax
f010582f:	eb 05                	jmp    f0105836 <sched_kill_env+0x225>
f0105831:	b8 00 00 00 00       	mov    $0x0,%eax
f0105836:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105839:	c1 e2 04             	shl    $0x4,%edx
f010583c:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105842:	89 02                	mov    %eax,(%edx)
f0105844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105847:	c1 e0 04             	shl    $0x4,%eax
f010584a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010584f:	8b 00                	mov    (%eax),%eax
f0105851:	85 c0                	test   %eax,%eax
f0105853:	0f 85 ba fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
f0105859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585d:	0f 85 b0 fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105863:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105867:	75 16                	jne    f010587f <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105869:	ff 45 ec             	incl   -0x14(%ebp)
f010586c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105871:	0f b6 c0             	movzbl %al,%eax
f0105874:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105877:	0f 8f 65 fe ff ff    	jg     f01056e2 <sched_kill_env+0xd1>
f010587d:	eb 01                	jmp    f0105880 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f010587f:	90                   	nop
		}
	}
	if (!found)
f0105880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105884:	0f 85 a4 00 00 00    	jne    f010592e <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010588a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105891:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105896:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105899:	eb 64                	jmp    f01058ff <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	75 51                	jne    f01058f7 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058a9:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058af:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b2:	83 ec 04             	sub    $0x4,%esp
f01058b5:	52                   	push   %edx
f01058b6:	50                   	push   %eax
f01058b7:	68 3c 23 13 f0       	push   $0xf013233c
f01058bc:	e8 70 b5 ff ff       	call   f0100e31 <cprintf>
f01058c1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058c4:	83 ec 0c             	sub    $0xc,%esp
f01058c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ca:	e8 bf f9 ff ff       	call   f010528e <sched_remove_exit>
f01058cf:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058d2:	83 ec 0c             	sub    $0xc,%esp
f01058d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d8:	e8 cc 40 00 00       	call   f01099a9 <env_free>
f01058dd:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058e0:	83 ec 0c             	sub    $0xc,%esp
f01058e3:	68 09 23 13 f0       	push   $0xf0132309
f01058e8:	e8 44 b5 ff ff       	call   f0100e31 <cprintf>
f01058ed:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058f0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058f7:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f01058fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105903:	74 08                	je     f010590d <sched_kill_env+0x2fc>
f0105905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105908:	8b 40 44             	mov    0x44(%eax),%eax
f010590b:	eb 05                	jmp    f0105912 <sched_kill_env+0x301>
f010590d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105912:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105917:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010591c:	85 c0                	test   %eax,%eax
f010591e:	0f 85 77 ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
f0105924:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105928:	0f 85 6d ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f010592e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105932:	0f 85 9d 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f0105938:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010593d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105940:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105943:	0f 85 8c 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f0105949:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010594e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105954:	8b 40 54             	mov    0x54(%eax),%eax
f0105957:	83 f8 02             	cmp    $0x2,%eax
f010595a:	74 19                	je     f0105975 <sched_kill_env+0x364>
f010595c:	68 64 23 13 f0       	push   $0xf0132364
f0105961:	68 72 22 13 f0       	push   $0xf0132272
f0105966:	68 77 01 00 00       	push   $0x177
f010596b:	68 87 22 13 f0       	push   $0xf0132287
f0105970:	e8 3b a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105978:	8d 50 5c             	lea    0x5c(%eax),%edx
f010597b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010597e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105981:	83 ec 04             	sub    $0x4,%esp
f0105984:	52                   	push   %edx
f0105985:	50                   	push   %eax
f0105986:	68 88 23 13 f0       	push   $0xf0132388
f010598b:	e8 a1 b4 ff ff       	call   f0100e31 <cprintf>
f0105990:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105993:	83 ec 0c             	sub    $0xc,%esp
f0105996:	ff 75 f4             	pushl  -0xc(%ebp)
f0105999:	e8 0b 40 00 00       	call   f01099a9 <env_free>
f010599e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059a1:	83 ec 0c             	sub    $0xc,%esp
f01059a4:	68 09 23 13 f0       	push   $0xf0132309
f01059a9:	e8 83 b4 ff ff       	call   f0100e31 <cprintf>
f01059ae:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059b8:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01059bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01059c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059c3:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059c6:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01059cd:	00 00 00 
			fos_scheduler();
f01059d0:	e8 44 08 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f01059d5:	90                   	nop
f01059d6:	c9                   	leave  
f01059d7:	c3                   	ret    

f01059d8 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f01059d8:	55                   	push   %ebp
f01059d9:	89 e5                	mov    %esp,%ebp
f01059db:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01059de:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01059e3:	85 c0                	test   %eax,%eax
f01059e5:	74 69                	je     f0105a50 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01059e7:	83 ec 0c             	sub    $0xc,%esp
f01059ea:	68 b4 23 13 f0       	push   $0xf01323b4
f01059ef:	e8 3d b4 ff ff       	call   f0100e31 <cprintf>
f01059f4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059f7:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01059fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059ff:	eb 26                	jmp    f0105a27 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a04:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a0a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a0d:	83 ec 04             	sub    $0x4,%esp
f0105a10:	52                   	push   %edx
f0105a11:	50                   	push   %eax
f0105a12:	68 d6 23 13 f0       	push   $0xf01323d6
f0105a17:	e8 15 b4 ff ff       	call   f0100e31 <cprintf>
f0105a1c:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a1f:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a2b:	74 08                	je     f0105a35 <sched_print_all+0x5d>
f0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a30:	8b 40 44             	mov    0x44(%eax),%eax
f0105a33:	eb 05                	jmp    f0105a3a <sched_print_all+0x62>
f0105a35:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a3a:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105a3f:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105a44:	85 c0                	test   %eax,%eax
f0105a46:	75 b9                	jne    f0105a01 <sched_print_all+0x29>
f0105a48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a4c:	75 b3                	jne    f0105a01 <sched_print_all+0x29>
f0105a4e:	eb 10                	jmp    f0105a60 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 e0 23 13 f0       	push   $0xf01323e0
f0105a58:	e8 d4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a60:	83 ec 0c             	sub    $0xc,%esp
f0105a63:	68 fc 23 13 f0       	push   $0xf01323fc
f0105a68:	e8 c4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a6d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a77:	e9 c8 00 00 00       	jmp    f0105b44 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7f:	c1 e0 04             	shl    $0x4,%eax
f0105a82:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105a87:	8b 00                	mov    (%eax),%eax
f0105a89:	85 c0                	test   %eax,%eax
f0105a8b:	0f 84 8d 00 00 00    	je     f0105b1e <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a91:	83 ec 08             	sub    $0x8,%esp
f0105a94:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a97:	68 30 24 13 f0       	push   $0xf0132430
f0105a9c:	e8 90 b3 ff ff       	call   f0100e31 <cprintf>
f0105aa1:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aa7:	c1 e0 04             	shl    $0x4,%eax
f0105aaa:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105aaf:	8b 00                	mov    (%eax),%eax
f0105ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ab4:	eb 2e                	jmp    f0105ae4 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ab9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105abf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ac2:	83 ec 04             	sub    $0x4,%esp
f0105ac5:	52                   	push   %edx
f0105ac6:	50                   	push   %eax
f0105ac7:	68 d6 23 13 f0       	push   $0xf01323d6
f0105acc:	e8 60 b3 ff ff       	call   f0100e31 <cprintf>
f0105ad1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ad7:	c1 e0 04             	shl    $0x4,%eax
f0105ada:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105adf:	8b 00                	mov    (%eax),%eax
f0105ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae8:	74 08                	je     f0105af2 <sched_print_all+0x11a>
f0105aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aed:	8b 40 44             	mov    0x44(%eax),%eax
f0105af0:	eb 05                	jmp    f0105af7 <sched_print_all+0x11f>
f0105af2:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105afa:	c1 e2 04             	shl    $0x4,%edx
f0105afd:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105b03:	89 02                	mov    %eax,(%edx)
f0105b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105b08:	c1 e0 04             	shl    $0x4,%eax
f0105b0b:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105b10:	8b 00                	mov    (%eax),%eax
f0105b12:	85 c0                	test   %eax,%eax
f0105b14:	75 a0                	jne    f0105ab6 <sched_print_all+0xde>
f0105b16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b1a:	75 9a                	jne    f0105ab6 <sched_print_all+0xde>
f0105b1c:	eb 13                	jmp    f0105b31 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105b1e:	83 ec 08             	sub    $0x8,%esp
f0105b21:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b24:	68 58 24 13 f0       	push   $0xf0132458
f0105b29:	e8 03 b3 ff ff       	call   f0100e31 <cprintf>
f0105b2e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105b31:	83 ec 0c             	sub    $0xc,%esp
f0105b34:	68 fc 23 13 f0       	push   $0xf01323fc
f0105b39:	e8 f3 b2 ff ff       	call   f0100e31 <cprintf>
f0105b3e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b41:	ff 45 f0             	incl   -0x10(%ebp)
f0105b44:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105b49:	0f b6 c0             	movzbl %al,%eax
f0105b4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105b4f:	0f 8f 27 ff ff ff    	jg     f0105a7c <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105b55:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105b5a:	85 c0                	test   %eax,%eax
f0105b5c:	74 69                	je     f0105bc7 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b5e:	83 ec 0c             	sub    $0xc,%esp
f0105b61:	68 7c 24 13 f0       	push   $0xf013247c
f0105b66:	e8 c6 b2 ff ff       	call   f0100e31 <cprintf>
f0105b6b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b6e:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b76:	eb 26                	jmp    f0105b9e <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b7b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b81:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b84:	83 ec 04             	sub    $0x4,%esp
f0105b87:	52                   	push   %edx
f0105b88:	50                   	push   %eax
f0105b89:	68 d6 23 13 f0       	push   $0xf01323d6
f0105b8e:	e8 9e b2 ff ff       	call   f0100e31 <cprintf>
f0105b93:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b96:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba2:	74 08                	je     f0105bac <sched_print_all+0x1d4>
f0105ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba7:	8b 40 44             	mov    0x44(%eax),%eax
f0105baa:	eb 05                	jmp    f0105bb1 <sched_print_all+0x1d9>
f0105bac:	b8 00 00 00 00       	mov    $0x0,%eax
f0105bb1:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105bb6:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105bbb:	85 c0                	test   %eax,%eax
f0105bbd:	75 b9                	jne    f0105b78 <sched_print_all+0x1a0>
f0105bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bc3:	75 b3                	jne    f0105b78 <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105bc5:	eb 10                	jmp    f0105bd7 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105bc7:	83 ec 0c             	sub    $0xc,%esp
f0105bca:	68 9e 24 13 f0       	push   $0xf013249e
f0105bcf:	e8 5d b2 ff ff       	call   f0100e31 <cprintf>
f0105bd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0105bd7:	90                   	nop
f0105bd8:	c9                   	leave  
f0105bd9:	c3                   	ret    

f0105bda <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105bda:	55                   	push   %ebp
f0105bdb:	89 e5                	mov    %esp,%ebp
f0105bdd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105be7:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bef:	eb 24                	jmp    f0105c15 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105bf1:	83 ec 0c             	sub    $0xc,%esp
f0105bf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105bf7:	e8 aa f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105bfc:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105bff:	83 ec 0c             	sub    $0xc,%esp
f0105c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c05:	e8 30 f4 ff ff       	call   f010503a <sched_insert_ready0>
f0105c0a:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105c0d:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c19:	74 08                	je     f0105c23 <sched_run_all+0x49>
f0105c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c1e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c21:	eb 05                	jmp    f0105c28 <sched_run_all+0x4e>
f0105c23:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c28:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105c2d:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105c32:	85 c0                	test   %eax,%eax
f0105c34:	75 bb                	jne    f0105bf1 <sched_run_all+0x17>
f0105c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c3a:	75 b5                	jne    f0105bf1 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105c3c:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0105c41:	85 c0                	test   %eax,%eax
f0105c43:	75 05                	jne    f0105c4a <sched_run_all+0x70>
		fos_scheduler();
f0105c45:	e8 cf 05 00 00       	call   f0106219 <fos_scheduler>
}
f0105c4a:	90                   	nop
f0105c4b:	c9                   	leave  
f0105c4c:	c3                   	ret    

f0105c4d <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105c4d:	55                   	push   %ebp
f0105c4e:	89 e5                	mov    %esp,%ebp
f0105c50:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105c53:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105c58:	85 c0                	test   %eax,%eax
f0105c5a:	0f 84 95 00 00 00    	je     f0105cf5 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c60:	83 ec 0c             	sub    $0xc,%esp
f0105c63:	68 bc 24 13 f0       	push   $0xf01324bc
f0105c68:	e8 c4 b1 ff ff       	call   f0100e31 <cprintf>
f0105c6d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c70:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c78:	eb 52                	jmp    f0105ccc <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c7d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c83:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c86:	83 ec 04             	sub    $0x4,%esp
f0105c89:	52                   	push   %edx
f0105c8a:	50                   	push   %eax
f0105c8b:	68 e8 24 13 f0       	push   $0xf01324e8
f0105c90:	e8 9c b1 ff ff       	call   f0100e31 <cprintf>
f0105c95:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c98:	83 ec 0c             	sub    $0xc,%esp
f0105c9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c9e:	e8 03 f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105ca3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105ca6:	83 ec 0c             	sub    $0xc,%esp
f0105ca9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cac:	e8 f8 3c 00 00       	call   f01099a9 <env_free>
f0105cb1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105cb4:	83 ec 0c             	sub    $0xc,%esp
f0105cb7:	68 09 23 13 f0       	push   $0xf0132309
f0105cbc:	e8 70 b1 ff ff       	call   f0100e31 <cprintf>
f0105cc1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105cc4:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ccc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cd0:	74 08                	je     f0105cda <sched_kill_all+0x8d>
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 44             	mov    0x44(%eax),%eax
f0105cd8:	eb 05                	jmp    f0105cdf <sched_kill_all+0x92>
f0105cda:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cdf:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105ce4:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105ce9:	85 c0                	test   %eax,%eax
f0105ceb:	75 8d                	jne    f0105c7a <sched_kill_all+0x2d>
f0105ced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cf1:	75 87                	jne    f0105c7a <sched_kill_all+0x2d>
f0105cf3:	eb 10                	jmp    f0105d05 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105cf5:	83 ec 0c             	sub    $0xc,%esp
f0105cf8:	68 fb 24 13 f0       	push   $0xf01324fb
f0105cfd:	e8 2f b1 ff ff       	call   f0100e31 <cprintf>
f0105d02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105d05:	83 ec 0c             	sub    $0xc,%esp
f0105d08:	68 fc 23 13 f0       	push   $0xf01323fc
f0105d0d:	e8 1f b1 ff ff       	call   f0100e31 <cprintf>
f0105d12:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105d1c:	e9 9d 01 00 00       	jmp    f0105ebe <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d24:	c1 e0 04             	shl    $0x4,%eax
f0105d27:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105d2c:	8b 00                	mov    (%eax),%eax
f0105d2e:	85 c0                	test   %eax,%eax
f0105d30:	0f 84 62 01 00 00    	je     f0105e98 <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105d36:	83 ec 08             	sub    $0x8,%esp
f0105d39:	ff 75 f0             	pushl  -0x10(%ebp)
f0105d3c:	68 18 25 13 f0       	push   $0xf0132518
f0105d41:	e8 eb b0 ff ff       	call   f0100e31 <cprintf>
f0105d46:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d4c:	c1 e0 04             	shl    $0x4,%eax
f0105d4f:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105d54:	8b 00                	mov    (%eax),%eax
f0105d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d59:	e9 f8 00 00 00       	jmp    f0105e56 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d61:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d67:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d6a:	83 ec 04             	sub    $0x4,%esp
f0105d6d:	52                   	push   %edx
f0105d6e:	50                   	push   %eax
f0105d6f:	68 e8 24 13 f0       	push   $0xf01324e8
f0105d74:	e8 b8 b0 ff ff       	call   f0100e31 <cprintf>
f0105d79:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d80:	75 17                	jne    f0105d99 <sched_kill_all+0x14c>
f0105d82:	83 ec 04             	sub    $0x4,%esp
f0105d85:	68 c3 22 13 f0       	push   $0xf01322c3
f0105d8a:	68 e5 01 00 00       	push   $0x1e5
f0105d8f:	68 87 22 13 f0       	push   $0xf0132287
f0105d94:	e8 17 a4 ff ff       	call   f01001b0 <_panic>
f0105d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d9c:	8b 40 44             	mov    0x44(%eax),%eax
f0105d9f:	85 c0                	test   %eax,%eax
f0105da1:	74 11                	je     f0105db4 <sched_kill_all+0x167>
f0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105da6:	8b 40 44             	mov    0x44(%eax),%eax
f0105da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105dac:	8b 52 48             	mov    0x48(%edx),%edx
f0105daf:	89 50 48             	mov    %edx,0x48(%eax)
f0105db2:	eb 14                	jmp    f0105dc8 <sched_kill_all+0x17b>
f0105db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db7:	8b 40 48             	mov    0x48(%eax),%eax
f0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dbd:	c1 e2 04             	shl    $0x4,%edx
f0105dc0:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f0105dc6:	89 02                	mov    %eax,(%edx)
f0105dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dcb:	8b 40 48             	mov    0x48(%eax),%eax
f0105dce:	85 c0                	test   %eax,%eax
f0105dd0:	74 11                	je     f0105de3 <sched_kill_all+0x196>
f0105dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd5:	8b 40 48             	mov    0x48(%eax),%eax
f0105dd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ddb:	8b 52 44             	mov    0x44(%edx),%edx
f0105dde:	89 50 44             	mov    %edx,0x44(%eax)
f0105de1:	eb 14                	jmp    f0105df7 <sched_kill_all+0x1aa>
f0105de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105de6:	8b 40 44             	mov    0x44(%eax),%eax
f0105de9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dec:	c1 e2 04             	shl    $0x4,%edx
f0105def:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105df5:	89 02                	mov    %eax,(%edx)
f0105df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dfa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e04:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e0e:	c1 e0 04             	shl    $0x4,%eax
f0105e11:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105e16:	8b 00                	mov    (%eax),%eax
f0105e18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e1e:	c1 e0 04             	shl    $0x4,%eax
f0105e21:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105e26:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105e28:	83 ec 0c             	sub    $0xc,%esp
f0105e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105e2e:	e8 76 3b 00 00       	call   f01099a9 <env_free>
f0105e33:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105e36:	83 ec 0c             	sub    $0xc,%esp
f0105e39:	68 09 23 13 f0       	push   $0xf0132309
f0105e3e:	e8 ee af ff ff       	call   f0100e31 <cprintf>
f0105e43:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e49:	c1 e0 04             	shl    $0x4,%eax
f0105e4c:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105e51:	8b 00                	mov    (%eax),%eax
f0105e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e5a:	74 08                	je     f0105e64 <sched_kill_all+0x217>
f0105e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5f:	8b 40 44             	mov    0x44(%eax),%eax
f0105e62:	eb 05                	jmp    f0105e69 <sched_kill_all+0x21c>
f0105e64:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6c:	c1 e2 04             	shl    $0x4,%edx
f0105e6f:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105e75:	89 02                	mov    %eax,(%edx)
f0105e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e7a:	c1 e0 04             	shl    $0x4,%eax
f0105e7d:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105e82:	8b 00                	mov    (%eax),%eax
f0105e84:	85 c0                	test   %eax,%eax
f0105e86:	0f 85 d2 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e90:	0f 85 c8 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e96:	eb 13                	jmp    f0105eab <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e98:	83 ec 08             	sub    $0x8,%esp
f0105e9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e9e:	68 58 24 13 f0       	push   $0xf0132458
f0105ea3:	e8 89 af ff ff       	call   f0100e31 <cprintf>
f0105ea8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105eab:	83 ec 0c             	sub    $0xc,%esp
f0105eae:	68 fc 23 13 f0       	push   $0xf01323fc
f0105eb3:	e8 79 af ff ff       	call   f0100e31 <cprintf>
f0105eb8:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ebb:	ff 45 f0             	incl   -0x10(%ebp)
f0105ebe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105ec3:	0f b6 c0             	movzbl %al,%eax
f0105ec6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105ec9:	0f 8f 52 fe ff ff    	jg     f0105d21 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105ecf:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105ed4:	85 c0                	test   %eax,%eax
f0105ed6:	0f 84 95 00 00 00    	je     f0105f71 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105edc:	83 ec 0c             	sub    $0xc,%esp
f0105edf:	68 4c 25 13 f0       	push   $0xf013254c
f0105ee4:	e8 48 af ff ff       	call   f0100e31 <cprintf>
f0105ee9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105eec:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ef4:	eb 52                	jmp    f0105f48 <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ef9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105f02:	83 ec 04             	sub    $0x4,%esp
f0105f05:	52                   	push   %edx
f0105f06:	50                   	push   %eax
f0105f07:	68 e8 24 13 f0       	push   $0xf01324e8
f0105f0c:	e8 20 af ff ff       	call   f0100e31 <cprintf>
f0105f11:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105f14:	83 ec 0c             	sub    $0xc,%esp
f0105f17:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f1a:	e8 6f f3 ff ff       	call   f010528e <sched_remove_exit>
f0105f1f:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105f22:	83 ec 0c             	sub    $0xc,%esp
f0105f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f28:	e8 7c 3a 00 00       	call   f01099a9 <env_free>
f0105f2d:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105f30:	83 ec 0c             	sub    $0xc,%esp
f0105f33:	68 09 23 13 f0       	push   $0xf0132309
f0105f38:	e8 f4 ae ff ff       	call   f0100e31 <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f40:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4c:	74 08                	je     f0105f56 <sched_kill_all+0x309>
f0105f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f51:	8b 40 44             	mov    0x44(%eax),%eax
f0105f54:	eb 05                	jmp    f0105f5b <sched_kill_all+0x30e>
f0105f56:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f5b:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105f60:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105f65:	85 c0                	test   %eax,%eax
f0105f67:	75 8d                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f6d:	75 87                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f6f:	eb 10                	jmp    f0105f81 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f71:	83 ec 0c             	sub    $0xc,%esp
f0105f74:	68 9e 24 13 f0       	push   $0xf013249e
f0105f79:	e8 b3 ae ff ff       	call   f0100e31 <cprintf>
f0105f7e:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f81:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0105f88:	00 00 00 
	fos_scheduler();
f0105f8b:	e8 89 02 00 00       	call   f0106219 <fos_scheduler>

f0105f90 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f90:	55                   	push   %ebp
f0105f91:	89 e5                	mov    %esp,%ebp
f0105f93:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105fa4:	e9 3e 01 00 00       	jmp    f01060e7 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fac:	c1 e0 04             	shl    $0x4,%eax
f0105faf:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105fb4:	8b 00                	mov    (%eax),%eax
f0105fb6:	85 c0                	test   %eax,%eax
f0105fb8:	0f 84 26 01 00 00    	je     f01060e4 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105fbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fc8:	c1 e0 04             	shl    $0x4,%eax
f0105fcb:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105fd0:	8b 00                	mov    (%eax),%eax
f0105fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fd5:	e9 ca 00 00 00       	jmp    f01060a4 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105fda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fde:	75 17                	jne    f0105ff7 <sched_exit_all_ready_envs+0x67>
f0105fe0:	83 ec 04             	sub    $0x4,%esp
f0105fe3:	68 c3 22 13 f0       	push   $0xf01322c3
f0105fe8:	68 14 02 00 00       	push   $0x214
f0105fed:	68 87 22 13 f0       	push   $0xf0132287
f0105ff2:	e8 b9 a1 ff ff       	call   f01001b0 <_panic>
f0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ffa:	8b 40 44             	mov    0x44(%eax),%eax
f0105ffd:	85 c0                	test   %eax,%eax
f0105fff:	74 11                	je     f0106012 <sched_exit_all_ready_envs+0x82>
f0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106004:	8b 40 44             	mov    0x44(%eax),%eax
f0106007:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010600a:	8b 52 48             	mov    0x48(%edx),%edx
f010600d:	89 50 48             	mov    %edx,0x48(%eax)
f0106010:	eb 14                	jmp    f0106026 <sched_exit_all_ready_envs+0x96>
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	8b 40 48             	mov    0x48(%eax),%eax
f0106018:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010601b:	c1 e2 04             	shl    $0x4,%edx
f010601e:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f0106024:	89 02                	mov    %eax,(%edx)
f0106026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106029:	8b 40 48             	mov    0x48(%eax),%eax
f010602c:	85 c0                	test   %eax,%eax
f010602e:	74 11                	je     f0106041 <sched_exit_all_ready_envs+0xb1>
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8b 40 48             	mov    0x48(%eax),%eax
f0106036:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106039:	8b 52 44             	mov    0x44(%edx),%edx
f010603c:	89 50 44             	mov    %edx,0x44(%eax)
f010603f:	eb 14                	jmp    f0106055 <sched_exit_all_ready_envs+0xc5>
f0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106044:	8b 40 44             	mov    0x44(%eax),%eax
f0106047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010604a:	c1 e2 04             	shl    $0x4,%edx
f010604d:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0106053:	89 02                	mov    %eax,(%edx)
f0106055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106058:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106062:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106069:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010606c:	c1 e0 04             	shl    $0x4,%eax
f010606f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0106074:	8b 00                	mov    (%eax),%eax
f0106076:	8d 50 ff             	lea    -0x1(%eax),%edx
f0106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010607c:	c1 e0 04             	shl    $0x4,%eax
f010607f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0106084:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106086:	83 ec 0c             	sub    $0xc,%esp
f0106089:	ff 75 f4             	pushl  -0xc(%ebp)
f010608c:	e8 ba f1 ff ff       	call   f010524b <sched_insert_exit>
f0106091:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106094:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106097:	c1 e0 04             	shl    $0x4,%eax
f010609a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010609f:	8b 00                	mov    (%eax),%eax
f01060a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060a8:	74 08                	je     f01060b2 <sched_exit_all_ready_envs+0x122>
f01060aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ad:	8b 40 44             	mov    0x44(%eax),%eax
f01060b0:	eb 05                	jmp    f01060b7 <sched_exit_all_ready_envs+0x127>
f01060b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01060b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060ba:	c1 e2 04             	shl    $0x4,%edx
f01060bd:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f01060c3:	89 02                	mov    %eax,(%edx)
f01060c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c8:	c1 e0 04             	shl    $0x4,%eax
f01060cb:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f01060d0:	8b 00                	mov    (%eax),%eax
f01060d2:	85 c0                	test   %eax,%eax
f01060d4:	0f 85 00 ff ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
f01060da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060de:	0f 85 f6 fe ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01060e4:	ff 45 f0             	incl   -0x10(%ebp)
f01060e7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01060ec:	0f b6 c0             	movzbl %al,%eax
f01060ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01060f2:	0f 8f b1 fe ff ff    	jg     f0105fa9 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01060f8:	90                   	nop
f01060f9:	c9                   	leave  
f01060fa:	c3                   	ret    

f01060fb <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f01060fb:	55                   	push   %ebp
f01060fc:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060fe:	a1 20 be 2b f0       	mov    0xf02bbe20,%eax
f0106103:	8b 15 24 be 2b f0    	mov    0xf02bbe24,%edx
}
f0106109:	5d                   	pop    %ebp
f010610a:	c3                   	ret    

f010610b <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010610b:	55                   	push   %ebp
f010610c:	89 e5                	mov    %esp,%ebp
f010610e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106111:	83 ec 04             	sub    $0x4,%esp
f0106114:	68 78 25 13 f0       	push   $0xf0132578
f0106119:	68 26 02 00 00       	push   $0x226
f010611e:	68 87 22 13 f0       	push   $0xf0132287
f0106123:	e8 88 a0 ff ff       	call   f01001b0 <_panic>

f0106128 <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0106128:	55                   	push   %ebp
f0106129:	89 e5                	mov    %esp,%ebp
f010612b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010612e:	83 ec 04             	sub    $0x4,%esp
f0106131:	68 78 25 13 f0       	push   $0xf0132578
f0106136:	68 2e 02 00 00       	push   $0x22e
f010613b:	68 87 22 13 f0       	push   $0xf0132287
f0106140:	e8 6b a0 ff ff       	call   f01001b0 <_panic>

f0106145 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0106145:	55                   	push   %ebp
f0106146:	89 e5                	mov    %esp,%ebp
f0106148:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010614b:	83 ec 04             	sub    $0x4,%esp
f010614e:	68 78 25 13 f0       	push   $0xf0132578
f0106153:	68 35 02 00 00       	push   $0x235
f0106158:	68 87 22 13 f0       	push   $0xf0132287
f010615d:	e8 4e a0 ff ff       	call   f01001b0 <_panic>

f0106162 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106162:	55                   	push   %ebp
f0106163:	89 e5                	mov    %esp,%ebp
f0106165:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106168:	83 ec 04             	sub    $0x4,%esp
f010616b:	68 78 25 13 f0       	push   $0xf0132578
f0106170:	68 3d 02 00 00       	push   $0x23d
f0106175:	68 87 22 13 f0       	push   $0xf0132287
f010617a:	e8 31 a0 ff ff       	call   f01001b0 <_panic>

f010617f <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010617f:	55                   	push   %ebp
f0106180:	89 e5                	mov    %esp,%ebp
f0106182:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f0106187:	85 c0                	test   %eax,%eax
f0106189:	75 07                	jne    f0106192 <isSchedMethodRR+0x13>
f010618b:	b8 01 00 00 00       	mov    $0x1,%eax
f0106190:	eb 05                	jmp    f0106197 <isSchedMethodRR+0x18>
f0106192:	b8 00 00 00 00       	mov    $0x0,%eax
f0106197:	5d                   	pop    %ebp
f0106198:	c3                   	ret    

f0106199 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106199:	55                   	push   %ebp
f010619a:	89 e5                	mov    %esp,%ebp
f010619c:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f01061a1:	83 f8 01             	cmp    $0x1,%eax
f01061a4:	75 07                	jne    f01061ad <isSchedMethodMLFQ+0x14>
f01061a6:	b8 01 00 00 00       	mov    $0x1,%eax
f01061ab:	eb 05                	jmp    f01061b2 <isSchedMethodMLFQ+0x19>
f01061ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01061b2:	5d                   	pop    %ebp
f01061b3:	c3                   	ret    

f01061b4 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f01061b4:	55                   	push   %ebp
f01061b5:	89 e5                	mov    %esp,%ebp
f01061b7:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f01061bc:	83 f8 02             	cmp    $0x2,%eax
f01061bf:	75 07                	jne    f01061c8 <isSchedMethodBSD+0x14>
f01061c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01061c6:	eb 05                	jmp    f01061cd <isSchedMethodBSD+0x19>
f01061c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01061cd:	5d                   	pop    %ebp
f01061ce:	c3                   	ret    

f01061cf <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f01061cf:	55                   	push   %ebp
f01061d0:	89 e5                	mov    %esp,%ebp
f01061d2:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01061d5:	c7 05 d4 99 2b f0 00 	movl   $0x0,0xf02b99d4
f01061dc:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f01061df:	83 ec 0c             	sub    $0xc,%esp
f01061e2:	6a 0a                	push   $0xa
f01061e4:	e8 2b 01 00 00       	call   f0106314 <sched_init_RR>
f01061e9:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01061ec:	83 ec 0c             	sub    $0xc,%esp
f01061ef:	68 f8 bd 2b f0       	push   $0xf02bbdf8
f01061f4:	e8 8b eb ff ff       	call   f0104d84 <init_queue>
f01061f9:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01061fc:	83 ec 0c             	sub    $0xc,%esp
f01061ff:	68 c4 99 2b f0       	push   $0xf02b99c4
f0106204:	e8 7b eb ff ff       	call   f0104d84 <init_queue>
f0106209:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010620c:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f0106213:	00 00 00 
}
f0106216:	90                   	nop
f0106217:	c9                   	leave  
f0106218:	c3                   	ret    

f0106219 <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0106219:	55                   	push   %ebp
f010621a:	89 e5                	mov    %esp,%ebp
f010621c:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f010621f:	e8 b2 80 02 00       	call   f012e2d6 <chk1>
	scheduler_status = SCH_STARTED;
f0106224:	c7 05 14 be 2b f0 01 	movl   $0x1,0xf02bbe14
f010622b:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010622e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0106235:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010623a:	85 c0                	test   %eax,%eax
f010623c:	75 48                	jne    f0106286 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010623e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0106243:	85 c0                	test   %eax,%eax
f0106245:	74 16                	je     f010625d <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0106247:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010624c:	83 ec 08             	sub    $0x8,%esp
f010624f:	50                   	push   %eax
f0106250:	68 60 3a 25 f0       	push   $0xf0253a60
f0106255:	e8 6b eb ff ff       	call   f0104dc5 <enqueue>
f010625a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010625d:	83 ec 0c             	sub    $0xc,%esp
f0106260:	68 60 3a 25 f0       	push   $0xf0253a60
f0106265:	e8 ec eb ff ff       	call   f0104e56 <dequeue>
f010626a:	83 c4 10             	add    $0x10,%esp
f010626d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106270:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0106275:	0f b6 c0             	movzbl %al,%eax
f0106278:	83 ec 0c             	sub    $0xc,%esp
f010627b:	50                   	push   %eax
f010627c:	e8 31 e9 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106281:	83 c4 10             	add    $0x10,%esp
f0106284:	eb 26                	jmp    f01062ac <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106286:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010628b:	83 f8 01             	cmp    $0x1,%eax
f010628e:	75 0a                	jne    f010629a <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106290:	e8 f9 00 00 00       	call   f010638e <fos_scheduler_MLFQ>
f0106295:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106298:	eb 12                	jmp    f01062ac <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010629a:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010629f:	83 f8 02             	cmp    $0x2,%eax
f01062a2:	75 08                	jne    f01062ac <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f01062a4:	e8 02 01 00 00       	call   f01063ab <fos_scheduler_BSD>
f01062a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01062ac:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01062b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01062b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b7:	a3 74 31 25 f0       	mov    %eax,0xf0253174
	chk2(next_env) ;
f01062bc:	83 ec 0c             	sub    $0xc,%esp
f01062bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c2:	e8 4c 80 02 00       	call   f012e313 <chk2>
f01062c7:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01062ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cd:	a3 74 31 25 f0       	mov    %eax,0xf0253174

	//sched_print_all();

	if(next_env != NULL)
f01062d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01062d6:	74 0b                	je     f01062e3 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01062d8:	83 ec 0c             	sub    $0xc,%esp
f01062db:	ff 75 f4             	pushl  -0xc(%ebp)
f01062de:	e8 69 36 00 00       	call   f010994c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01062e3:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01062ea:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01062ed:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01062f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062f8:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01062fb:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f0106302:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0106305:	83 ec 0c             	sub    $0xc,%esp
f0106308:	6a 00                	push   $0x0
f010630a:	e8 41 b8 ff ff       	call   f0101b50 <run_command_prompt>
f010630f:	83 c4 10             	add    $0x10,%esp
f0106312:	eb f1                	jmp    f0106305 <fos_scheduler+0xec>

f0106314 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0106314:	55                   	push   %ebp
f0106315:	89 e5                	mov    %esp,%ebp
f0106317:	83 ec 18             	sub    $0x18,%esp
f010631a:	8b 45 08             	mov    0x8(%ebp),%eax
f010631d:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0106320:	c6 05 44 be 2b f0 01 	movb   $0x1,0xf02bbe44
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0106327:	8a 45 f4             	mov    -0xc(%ebp),%al
f010632a:	a2 e8 bd 2b f0       	mov    %al,0xf02bbde8
	kclock_set_quantum(quantums[0]);
f010632f:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0106334:	0f b6 c0             	movzbl %al,%eax
f0106337:	83 ec 0c             	sub    $0xc,%esp
f010633a:	50                   	push   %eax
f010633b:	e8 72 e8 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106340:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106343:	83 ec 0c             	sub    $0xc,%esp
f0106346:	68 60 3a 25 f0       	push   $0xf0253a60
f010634b:	e8 34 ea ff ff       	call   f0104d84 <init_queue>
f0106350:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106353:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f010635a:	00 00 00 
	scheduler_method = SCH_RR;
f010635d:	c7 05 08 be 2b f0 00 	movl   $0x0,0xf02bbe08
f0106364:	00 00 00 
	//=========================================
	//=========================================
}
f0106367:	90                   	nop
f0106368:	c9                   	leave  
f0106369:	c3                   	ret    

f010636a <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010636a:	55                   	push   %ebp
f010636b:	89 e5                	mov    %esp,%ebp
f010636d:	83 ec 04             	sub    $0x4,%esp
f0106370:	8b 45 08             	mov    0x8(%ebp),%eax
f0106373:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106376:	90                   	nop
f0106377:	c9                   	leave  
f0106378:	c3                   	ret    

f0106379 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106379:	55                   	push   %ebp
f010637a:	89 e5                	mov    %esp,%ebp
f010637c:	83 ec 08             	sub    $0x8,%esp
f010637f:	8b 55 08             	mov    0x8(%ebp),%edx
f0106382:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106385:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0106388:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010638b:	90                   	nop
f010638c:	c9                   	leave  
f010638d:	c3                   	ret    

f010638e <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f010638e:	55                   	push   %ebp
f010638f:	89 e5                	mov    %esp,%ebp
f0106391:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106394:	83 ec 04             	sub    $0x4,%esp
f0106397:	68 8c 25 13 f0       	push   $0xf013258c
f010639c:	68 b9 00 00 00       	push   $0xb9
f01063a1:	68 9c 25 13 f0       	push   $0xf013259c
f01063a6:	e8 05 9e ff ff       	call   f01001b0 <_panic>

f01063ab <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f01063ab:	55                   	push   %ebp
f01063ac:	89 e5                	mov    %esp,%ebp
f01063ae:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01063b1:	83 ec 04             	sub    $0x4,%esp
f01063b4:	68 ad 25 13 f0       	push   $0xf01325ad
f01063b9:	68 c5 00 00 00       	push   $0xc5
f01063be:	68 9c 25 13 f0       	push   $0xf013259c
f01063c3:	e8 e8 9d ff ff       	call   f01001b0 <_panic>

f01063c8 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01063c8:	55                   	push   %ebp
f01063c9:	89 e5                	mov    %esp,%ebp
f01063cb:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01063ce:	a1 20 be 2b f0       	mov    0xf02bbe20,%eax
f01063d3:	8b 15 24 be 2b f0    	mov    0xf02bbe24,%edx
f01063d9:	83 c0 01             	add    $0x1,%eax
f01063dc:	83 d2 00             	adc    $0x0,%edx
f01063df:	a3 20 be 2b f0       	mov    %eax,0xf02bbe20
f01063e4:	89 15 24 be 2b f0    	mov    %edx,0xf02bbe24
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01063ea:	83 ec 0c             	sub    $0xc,%esp
f01063ed:	6a 01                	push   $0x1
f01063ef:	e8 4f 74 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f01063f4:	83 c4 10             	add    $0x10,%esp
f01063f7:	85 c0                	test   %eax,%eax
f01063f9:	74 05                	je     f0106400 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01063fb:	e8 05 00 00 00       	call   f0106405 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106400:	e8 14 fe ff ff       	call   f0106219 <fos_scheduler>

f0106405 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106405:	55                   	push   %ebp
f0106406:	89 e5                	mov    %esp,%ebp
f0106408:	53                   	push   %ebx
f0106409:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010640c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0106411:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106414:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106418:	0f 84 a9 01 00 00    	je     f01065c7 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010641e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106425:	e9 9f 00 00 00       	jmp    f01064c9 <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010642a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010642d:	89 d0                	mov    %edx,%eax
f010642f:	01 c0                	add    %eax,%eax
f0106431:	01 d0                	add    %edx,%eax
f0106433:	c1 e0 03             	shl    $0x3,%eax
f0106436:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643f:	01 d0                	add    %edx,%eax
f0106441:	83 c0 08             	add    $0x8,%eax
f0106444:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f0106447:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010644a:	8a 40 04             	mov    0x4(%eax),%al
f010644d:	3c 01                	cmp    $0x1,%al
f010644f:	74 74                	je     f01064c5 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106454:	8b 00                	mov    (%eax),%eax
f0106456:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106459:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010645c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106462:	83 ec 08             	sub    $0x8,%esp
f0106465:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106468:	50                   	push   %eax
f0106469:	e8 75 1c 00 00       	call   f01080e3 <pt_get_page_permissions>
f010646e:	83 c4 10             	add    $0x10,%esp
f0106471:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106477:	8b 40 08             	mov    0x8(%eax),%eax
f010647a:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010647d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106480:	83 e0 20             	and    $0x20,%eax
f0106483:	85 c0                	test   %eax,%eax
f0106485:	74 2e                	je     f01064b5 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010648a:	c1 e8 02             	shr    $0x2,%eax
f010648d:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106492:	89 c2                	mov    %eax,%edx
f0106494:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106497:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010649a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01064a3:	6a 20                	push   $0x20
f01064a5:	6a 00                	push   $0x0
f01064a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01064aa:	50                   	push   %eax
f01064ab:	e8 6f 1b 00 00       	call   f010801f <pt_set_page_permissions>
f01064b0:	83 c4 10             	add    $0x10,%esp
f01064b3:	eb 11                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01064b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01064b8:	c1 e8 02             	shr    $0x2,%eax
f01064bb:	89 c2                	mov    %eax,%edx
f01064bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064c0:	89 50 08             	mov    %edx,0x8(%eax)
f01064c3:	eb 01                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01064c5:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01064c6:	ff 45 f4             	incl   -0xc(%ebp)
f01064c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064cc:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01064d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064d5:	39 c2                	cmp    %eax,%edx
f01064d7:	0f 87 4d ff ff ff    	ja     f010642a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01064dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064e4:	e9 d4 00 00 00       	jmp    f01065bd <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01064e9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064ef:	89 d0                	mov    %edx,%eax
f01064f1:	01 c0                	add    %eax,%eax
f01064f3:	01 d0                	add    %edx,%eax
f01064f5:	c1 e0 03             	shl    $0x3,%eax
f01064f8:	01 c8                	add    %ecx,%eax
f01064fa:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064ff:	8a 00                	mov    (%eax),%al
f0106501:	3c 01                	cmp    $0x1,%al
f0106503:	0f 84 b1 00 00 00    	je     f01065ba <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106509:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010650c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010650f:	89 d0                	mov    %edx,%eax
f0106511:	01 c0                	add    %eax,%eax
f0106513:	01 d0                	add    %edx,%eax
f0106515:	c1 e0 03             	shl    $0x3,%eax
f0106518:	01 c8                	add    %ecx,%eax
f010651a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010651f:	8b 00                	mov    (%eax),%eax
f0106521:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106524:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106527:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010652a:	89 d0                	mov    %edx,%eax
f010652c:	01 c0                	add    %eax,%eax
f010652e:	01 d0                	add    %edx,%eax
f0106530:	c1 e0 03             	shl    $0x3,%eax
f0106533:	01 c8                	add    %ecx,%eax
f0106535:	05 88 d5 01 00       	add    $0x1d588,%eax
f010653a:	8b 00                	mov    (%eax),%eax
f010653c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f010653f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106542:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106548:	83 ec 08             	sub    $0x8,%esp
f010654b:	ff 75 d8             	pushl  -0x28(%ebp)
f010654e:	50                   	push   %eax
f010654f:	e8 6b 1c 00 00       	call   f01081bf <pd_is_table_used>
f0106554:	83 c4 10             	add    $0x10,%esp
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 3f                	je     f010659a <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010655b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010655e:	c1 e8 02             	shr    $0x2,%eax
f0106561:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106566:	89 c1                	mov    %eax,%ecx
f0106568:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010656b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010656e:	89 d0                	mov    %edx,%eax
f0106570:	01 c0                	add    %eax,%eax
f0106572:	01 d0                	add    %edx,%eax
f0106574:	c1 e0 03             	shl    $0x3,%eax
f0106577:	01 d8                	add    %ebx,%eax
f0106579:	05 88 d5 01 00       	add    $0x1d588,%eax
f010657e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106583:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106589:	83 ec 08             	sub    $0x8,%esp
f010658c:	ff 75 d8             	pushl  -0x28(%ebp)
f010658f:	50                   	push   %eax
f0106590:	e8 4e 1c 00 00       	call   f01081e3 <pd_set_table_unused>
f0106595:	83 c4 10             	add    $0x10,%esp
f0106598:	eb 20                	jmp    f01065ba <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010659a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010659d:	c1 e8 02             	shr    $0x2,%eax
f01065a0:	89 c1                	mov    %eax,%ecx
f01065a2:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01065a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a8:	89 d0                	mov    %edx,%eax
f01065aa:	01 c0                	add    %eax,%eax
f01065ac:	01 d0                	add    %edx,%eax
f01065ae:	c1 e0 03             	shl    $0x3,%eax
f01065b1:	01 d8                	add    %ebx,%eax
f01065b3:	05 88 d5 01 00       	add    $0x1d588,%eax
f01065b8:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01065ba:	ff 45 f0             	incl   -0x10(%ebp)
f01065bd:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01065c1:	0f 8e 22 ff ff ff    	jle    f01064e9 <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01065c7:	90                   	nop
f01065c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01065cb:	c9                   	leave  
f01065cc:	c3                   	ret    

f01065cd <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01065cd:	55                   	push   %ebp
f01065ce:	89 e5                	mov    %esp,%ebp
f01065d0:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01065d3:	c7 05 6c 31 25 f0 01 	movl   $0x1,0xf025316c
f01065da:	00 00 00 
f01065dd:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01065e4:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01065e8:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01065eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065ee:	ee                   	out    %al,(%dx)
f01065ef:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01065f6:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01065fa:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01065fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106600:	ee                   	out    %al,(%dx)
f0106601:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106608:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f010660c:	8a 45 b4             	mov    -0x4c(%ebp),%al
f010660f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106612:	ee                   	out    %al,(%dx)
f0106613:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010661a:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010661e:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106621:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106624:	ee                   	out    %al,(%dx)
f0106625:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010662c:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106630:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106633:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106636:	ee                   	out    %al,(%dx)
f0106637:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010663e:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106642:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106645:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106648:	ee                   	out    %al,(%dx)
f0106649:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106650:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106654:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106657:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010665a:	ee                   	out    %al,(%dx)
f010665b:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106662:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106666:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106669:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010666c:	ee                   	out    %al,(%dx)
f010666d:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106674:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106678:	8a 45 ba             	mov    -0x46(%ebp),%al
f010667b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010667e:	ee                   	out    %al,(%dx)
f010667f:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106686:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010668a:	8a 45 bb             	mov    -0x45(%ebp),%al
f010668d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106690:	ee                   	out    %al,(%dx)
f0106691:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106698:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010669c:	8a 45 bc             	mov    -0x44(%ebp),%al
f010669f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01066a2:	ee                   	out    %al,(%dx)
f01066a3:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01066aa:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01066ae:	8a 45 bd             	mov    -0x43(%ebp),%al
f01066b1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01066b4:	ee                   	out    %al,(%dx)
f01066b5:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01066bc:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01066c0:	8a 45 be             	mov    -0x42(%ebp),%al
f01066c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01066c6:	ee                   	out    %al,(%dx)
f01066c7:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01066ce:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01066d2:	8a 45 bf             	mov    -0x41(%ebp),%al
f01066d5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01066d8:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01066d9:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f01066df:	66 83 f8 ff          	cmp    $0xffff,%ax
f01066e3:	74 15                	je     f01066fa <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01066e5:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f01066eb:	0f b7 c0             	movzwl %ax,%eax
f01066ee:	83 ec 0c             	sub    $0xc,%esp
f01066f1:	50                   	push   %eax
f01066f2:	e8 06 00 00 00       	call   f01066fd <irq_setmask_8259A>
f01066f7:	83 c4 10             	add    $0x10,%esp
}
f01066fa:	90                   	nop
f01066fb:	c9                   	leave  
f01066fc:	c3                   	ret    

f01066fd <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01066fd:	55                   	push   %ebp
f01066fe:	89 e5                	mov    %esp,%ebp
f0106700:	83 ec 14             	sub    $0x14,%esp
f0106703:	8b 45 08             	mov    0x8(%ebp),%eax
f0106706:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010670a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010670d:	66 a3 64 e9 18 f0    	mov    %ax,0xf018e964
	if (!didinit)
f0106713:	a1 6c 31 25 f0       	mov    0xf025316c,%eax
f0106718:	85 c0                	test   %eax,%eax
f010671a:	74 34                	je     f0106750 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f010671c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010671f:	0f b6 c0             	movzbl %al,%eax
f0106722:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106729:	88 45 f6             	mov    %al,-0xa(%ebp)
f010672c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010672f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106732:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106736:	66 c1 e8 08          	shr    $0x8,%ax
f010673a:	0f b6 c0             	movzbl %al,%eax
f010673d:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106744:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106747:	8a 45 f7             	mov    -0x9(%ebp),%al
f010674a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010674d:	ee                   	out    %al,(%dx)
f010674e:	eb 01                	jmp    f0106751 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106750:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106751:	c9                   	leave  
f0106752:	c3                   	ret    

f0106753 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106753:	55                   	push   %ebp
f0106754:	89 e5                	mov    %esp,%ebp
f0106756:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0106759:	83 ec 08             	sub    $0x8,%esp
f010675c:	68 00 10 00 00       	push   $0x1000
f0106761:	68 00 10 00 00       	push   $0x1000
f0106766:	e8 0a 02 00 00       	call   f0106975 <boot_allocate_space>
f010676b:	83 c4 10             	add    $0x10,%esp
f010676e:	a3 30 be 2b f0       	mov    %eax,0xf02bbe30
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106773:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106778:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010677b:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106782:	77 14                	ja     f0106798 <initialize_kernel_VM+0x45>
f0106784:	ff 75 e8             	pushl  -0x18(%ebp)
f0106787:	68 c4 25 13 f0       	push   $0xf01325c4
f010678c:	6a 45                	push   $0x45
f010678e:	68 f8 25 13 f0       	push   $0xf01325f8
f0106793:	e8 18 9a ff ff       	call   f01001b0 <_panic>
f0106798:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010679b:	05 00 00 00 10       	add    $0x10000000,%eax
f01067a0:	a3 70 be 2b f0       	mov    %eax,0xf02bbe70
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01067a5:	c7 45 e4 00 60 18 f0 	movl   $0xf0186000,-0x1c(%ebp)
f01067ac:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01067b3:	77 14                	ja     f01067c9 <initialize_kernel_VM+0x76>
f01067b5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01067b8:	68 c4 25 13 f0       	push   $0xf01325c4
f01067bd:	6a 4d                	push   $0x4d
f01067bf:	68 f8 25 13 f0       	push   $0xf01325f8
f01067c4:	e8 e7 99 ff ff       	call   f01001b0 <_panic>
f01067c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067cc:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01067d2:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01067d7:	83 ec 0c             	sub    $0xc,%esp
f01067da:	6a 02                	push   $0x2
f01067dc:	52                   	push   %edx
f01067dd:	68 00 80 00 00       	push   $0x8000
f01067e2:	68 00 80 bf ef       	push   $0xefbf8000
f01067e7:	50                   	push   %eax
f01067e8:	e8 fc 01 00 00       	call   f01069e9 <boot_map_range>
f01067ed:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01067f0:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01067f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106805:	eb 25                	jmp    f010682c <initialize_kernel_VM+0xd9>
	{
		++nTables;
f0106807:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010680a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010680d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106812:	83 ec 04             	sub    $0x4,%esp
f0106815:	6a 01                	push   $0x1
f0106817:	52                   	push   %edx
f0106818:	50                   	push   %eax
f0106819:	e8 3f 02 00 00       	call   f0106a5d <boot_get_page_table>
f010681e:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106821:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0106828:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010682c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106830:	72 d5                	jb     f0106807 <initialize_kernel_VM+0xb4>
f0106832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106836:	77 06                	ja     f010683e <initialize_kernel_VM+0xeb>
f0106838:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010683c:	76 c9                	jbe    f0106807 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f010683e:	8b 15 d0 bd 2b f0    	mov    0xf02bbdd0,%edx
f0106844:	89 d0                	mov    %edx,%eax
f0106846:	01 c0                	add    %eax,%eax
f0106848:	01 d0                	add    %edx,%eax
f010684a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106851:	01 c8                	add    %ecx,%eax
f0106853:	01 d0                	add    %edx,%eax
f0106855:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0106858:	83 ec 08             	sub    $0x8,%esp
f010685b:	68 00 10 00 00       	push   $0x1000
f0106860:	ff 75 e0             	pushl  -0x20(%ebp)
f0106863:	e8 0d 01 00 00       	call   f0106975 <boot_allocate_space>
f0106868:	83 c4 10             	add    $0x10,%esp
f010686b:	a3 10 be 2b f0       	mov    %eax,0xf02bbe10
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106870:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106877:	83 ec 08             	sub    $0x8,%esp
f010687a:	68 00 10 00 00       	push   $0x1000
f010687f:	ff 75 dc             	pushl  -0x24(%ebp)
f0106882:	e8 ee 00 00 00       	call   f0106975 <boot_allocate_space>
f0106887:	83 c4 10             	add    $0x10,%esp
f010688a:	a3 50 3a 25 f0       	mov    %eax,0xf0253a50
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f010688f:	e8 fe 04 00 00       	call   f0106d92 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106894:	83 ec 0c             	sub    $0xc,%esp
f0106897:	6a 08                	push   $0x8
f0106899:	e8 ed 74 02 00       	call   f012dd8b <nearest_pow2_ceil>
f010689e:	83 c4 10             	add    $0x10,%esp
f01068a1:	83 ec 04             	sub    $0x4,%esp
f01068a4:	50                   	push   %eax
f01068a5:	6a 08                	push   $0x8
f01068a7:	68 18 26 13 f0       	push   $0xf0132618
f01068ac:	e8 80 a5 ff ff       	call   f0100e31 <cprintf>
f01068b1:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01068b4:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01068bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01068be:	83 ec 08             	sub    $0x8,%esp
f01068c1:	68 00 10 00 00       	push   $0x1000
f01068c6:	50                   	push   %eax
f01068c7:	e8 a9 00 00 00       	call   f0106975 <boot_allocate_space>
f01068cc:	83 c4 10             	add    $0x10,%esp
f01068cf:	a3 70 31 25 f0       	mov    %eax,0xf0253170
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01068d4:	a1 70 31 25 f0       	mov    0xf0253170,%eax
f01068d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01068dc:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01068e3:	77 17                	ja     f01068fc <initialize_kernel_VM+0x1a9>
f01068e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01068e8:	68 c4 25 13 f0       	push   $0xf01325c4
f01068ed:	68 96 00 00 00       	push   $0x96
f01068f2:	68 f8 25 13 f0       	push   $0xf01325f8
f01068f7:	e8 b4 98 ff ff       	call   f01001b0 <_panic>
f01068fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068ff:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106905:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106908:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f010690d:	83 ec 0c             	sub    $0xc,%esp
f0106910:	6a 04                	push   $0x4
f0106912:	51                   	push   %ecx
f0106913:	52                   	push   %edx
f0106914:	68 00 00 c0 ee       	push   $0xeec00000
f0106919:	50                   	push   %eax
f010691a:	e8 ca 00 00 00       	call   f01069e9 <boot_map_range>
f010691f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106922:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106927:	05 ec 0e 00 00       	add    $0xeec,%eax
f010692c:	8b 15 30 be 2b f0    	mov    0xf02bbe30,%edx
f0106932:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106938:	8b 12                	mov    (%edx),%edx
f010693a:	83 ca 05             	or     $0x5,%edx
f010693d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010693f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106944:	83 ec 0c             	sub    $0xc,%esp
f0106947:	6a 02                	push   $0x2
f0106949:	6a 00                	push   $0x0
f010694b:	68 ff ff ff 0f       	push   $0xfffffff
f0106950:	68 00 00 00 f0       	push   $0xf0000000
f0106955:	50                   	push   %eax
f0106956:	e8 8e 00 00 00       	call   f01069e9 <boot_map_range>
f010695b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f010695e:	e8 ff 7b 02 00       	call   f012e562 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106963:	c7 05 c0 99 2b f0 19 	movl   $0x19,0xf02b99c0
f010696a:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010696d:	e8 20 03 00 00       	call   f0106c92 <turn_on_paging>
}
f0106972:	90                   	nop
f0106973:	c9                   	leave  
f0106974:	c3                   	ret    

f0106975 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106975:	55                   	push   %ebp
f0106976:	89 e5                	mov    %esp,%ebp
f0106978:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010697b:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106980:	85 c0                	test   %eax,%eax
f0106982:	75 0a                	jne    f010698e <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106984:	c7 05 2c be 2b f0 6c 	movl   $0xf02de56c,0xf02bbe2c
f010698b:	e5 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010698e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106991:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106994:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106999:	89 c2                	mov    %eax,%edx
f010699b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010699e:	01 d0                	add    %edx,%eax
f01069a0:	48                   	dec    %eax
f01069a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01069a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01069ac:	f7 75 f4             	divl   -0xc(%ebp)
f01069af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b2:	29 d0                	sub    %edx,%eax
f01069b4:	a3 2c be 2b f0       	mov    %eax,0xf02bbe2c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01069b9:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f01069be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01069c1:	8b 15 2c be 2b f0    	mov    0xf02bbe2c,%edx
f01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ca:	01 d0                	add    %edx,%eax
f01069cc:	a3 2c be 2b f0       	mov    %eax,0xf02bbe2c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01069d1:	83 ec 04             	sub    $0x4,%esp
f01069d4:	ff 75 08             	pushl  0x8(%ebp)
f01069d7:	6a 00                	push   $0x0
f01069d9:	ff 75 ec             	pushl  -0x14(%ebp)
f01069dc:	e8 0d 88 02 00       	call   f012f1ee <memset>
f01069e1:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01069e4:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01069e7:	c9                   	leave  
f01069e8:	c3                   	ret    

f01069e9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01069e9:	55                   	push   %ebp
f01069ea:	89 e5                	mov    %esp,%ebp
f01069ec:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01069ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01069fd:	eb 53                	jmp    f0106a52 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069ff:	83 ec 04             	sub    $0x4,%esp
f0106a02:	6a 01                	push   $0x1
f0106a04:	ff 75 0c             	pushl  0xc(%ebp)
f0106a07:	ff 75 08             	pushl  0x8(%ebp)
f0106a0a:	e8 4e 00 00 00       	call   f0106a5d <boot_get_page_table>
f0106a0f:	83 c4 10             	add    $0x10,%esp
f0106a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a18:	c1 e8 0c             	shr    $0xc,%eax
f0106a1b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a30:	01 c2                	add    %eax,%edx
f0106a32:	8b 45 18             	mov    0x18(%ebp),%eax
f0106a35:	0b 45 14             	or     0x14(%ebp),%eax
f0106a38:	83 c8 01             	or     $0x1,%eax
f0106a3b:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106a3d:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106a44:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106a4b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a55:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106a58:	72 a5                	jb     f01069ff <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106a5a:	90                   	nop
f0106a5b:	c9                   	leave  
f0106a5c:	c3                   	ret    

f0106a5d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106a5d:	55                   	push   %ebp
f0106a5e:	89 e5                	mov    %esp,%ebp
f0106a60:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a66:	c1 e8 16             	shr    $0x16,%eax
f0106a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a79:	01 d0                	add    %edx,%eax
f0106a7b:	8b 00                	mov    (%eax),%eax
f0106a7d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a88:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a94:	c1 e8 0c             	shr    $0xc,%eax
f0106a97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a9a:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0106a9f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106aa2:	72 17                	jb     f0106abb <boot_get_page_table+0x5e>
f0106aa4:	ff 75 e8             	pushl  -0x18(%ebp)
f0106aa7:	68 40 26 13 f0       	push   $0xf0132640
f0106aac:	68 18 01 00 00       	push   $0x118
f0106ab1:	68 f8 25 13 f0       	push   $0xf01325f8
f0106ab6:	e8 f5 96 ff ff       	call   f01001b0 <_panic>
f0106abb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106abe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106ac3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106ac6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106aca:	75 72                	jne    f0106b3e <boot_get_page_table+0xe1>
	{
		if (create)
f0106acc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106ad0:	74 65                	je     f0106b37 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106ad2:	83 ec 08             	sub    $0x8,%esp
f0106ad5:	68 00 10 00 00       	push   $0x1000
f0106ada:	68 00 10 00 00       	push   $0x1000
f0106adf:	e8 91 fe ff ff       	call   f0106975 <boot_allocate_space>
f0106ae4:	83 c4 10             	add    $0x10,%esp
f0106ae7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106aea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106af0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106af7:	77 17                	ja     f0106b10 <boot_get_page_table+0xb3>
f0106af9:	ff 75 dc             	pushl  -0x24(%ebp)
f0106afc:	68 c4 25 13 f0       	push   $0xf01325c4
f0106b01:	68 1e 01 00 00       	push   $0x11e
f0106b06:	68 f8 25 13 f0       	push   $0xf01325f8
f0106b0b:	e8 a0 96 ff ff       	call   f01001b0 <_panic>
f0106b10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106b13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106b18:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b28:	01 d0                	add    %edx,%eax
f0106b2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106b2d:	83 ca 03             	or     $0x3,%edx
f0106b30:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106b32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b35:	eb 0a                	jmp    f0106b41 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b3c:	eb 03                	jmp    f0106b41 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106b3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106b41:	c9                   	leave  
f0106b42:	c3                   	ret    

f0106b43 <nvram_read>:


int nvram_read(int r)
{
f0106b43:	55                   	push   %ebp
f0106b44:	89 e5                	mov    %esp,%ebp
f0106b46:	53                   	push   %ebx
f0106b47:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b4d:	83 ec 0c             	sub    $0xc,%esp
f0106b50:	50                   	push   %eax
f0106b51:	e8 6a de ff ff       	call   f01049c0 <mc146818_read>
f0106b56:	83 c4 10             	add    $0x10,%esp
f0106b59:	89 c3                	mov    %eax,%ebx
f0106b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5e:	40                   	inc    %eax
f0106b5f:	83 ec 0c             	sub    $0xc,%esp
f0106b62:	50                   	push   %eax
f0106b63:	e8 58 de ff ff       	call   f01049c0 <mc146818_read>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	c1 e0 08             	shl    $0x8,%eax
f0106b6e:	09 d8                	or     %ebx,%eax
}
f0106b70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b73:	c9                   	leave  
f0106b74:	c3                   	ret    

f0106b75 <detect_memory>:

void detect_memory()
{
f0106b75:	55                   	push   %ebp
f0106b76:	89 e5                	mov    %esp,%ebp
f0106b78:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b7b:	83 ec 0c             	sub    $0xc,%esp
f0106b7e:	6a 15                	push   $0x15
f0106b80:	e8 be ff ff ff       	call   f0106b43 <nvram_read>
f0106b85:	83 c4 10             	add    $0x10,%esp
f0106b88:	c1 e0 0a             	shl    $0xa,%eax
f0106b8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b99:	83 ec 0c             	sub    $0xc,%esp
f0106b9c:	6a 17                	push   $0x17
f0106b9e:	e8 a0 ff ff ff       	call   f0106b43 <nvram_read>
f0106ba3:	83 c4 10             	add    $0x10,%esp
f0106ba6:	c1 e0 0a             	shl    $0xa,%eax
f0106ba9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106bb7:	83 ec 0c             	sub    $0xc,%esp
f0106bba:	6a 34                	push   $0x34
f0106bbc:	e8 82 ff ff ff       	call   f0106b43 <nvram_read>
f0106bc1:	83 c4 10             	add    $0x10,%esp
f0106bc4:	c1 e0 10             	shl    $0x10,%eax
f0106bc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bcd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106bd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106bd9:	74 18                	je     f0106bf3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106bdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bde:	05 00 00 00 01       	add    $0x1000000,%eax
f0106be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106be9:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106bee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106bf1:	eb 19                	jmp    f0106c0c <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106bf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106bf7:	74 0d                	je     f0106c06 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bfc:	05 00 00 10 00       	add    $0x100000,%eax
f0106c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106c04:	eb 06                	jmp    f0106c0c <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106c0c:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106c19:	76 32                	jbe    f0106c4d <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106c1e:	c1 e8 0a             	shr    $0xa,%eax
f0106c21:	89 c2                	mov    %eax,%edx
f0106c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c26:	c1 e8 0a             	shr    $0xa,%eax
f0106c29:	83 ec 04             	sub    $0x4,%esp
f0106c2c:	52                   	push   %edx
f0106c2d:	50                   	push   %eax
f0106c2e:	68 70 26 13 f0       	push   $0xf0132670
f0106c33:	e8 f9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c38:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106c3b:	83 ec 0c             	sub    $0xc,%esp
f0106c3e:	68 b8 26 13 f0       	push   $0xf01326b8
f0106c43:	e8 e9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c48:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106c4b:	eb fe                	jmp    f0106c4b <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c50:	c1 e8 0c             	shr    $0xc,%eax
f0106c53:	a3 d0 bd 2b f0       	mov    %eax,0xf02bbdd0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c5b:	c1 e8 0a             	shr    $0xa,%eax
f0106c5e:	83 ec 08             	sub    $0x8,%esp
f0106c61:	50                   	push   %eax
f0106c62:	68 4c 27 13 f0       	push   $0xf013274c
f0106c67:	e8 c5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c6c:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c72:	c1 e8 0a             	shr    $0xa,%eax
f0106c75:	89 c2                	mov    %eax,%edx
f0106c77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7a:	c1 e8 0a             	shr    $0xa,%eax
f0106c7d:	83 ec 04             	sub    $0x4,%esp
f0106c80:	52                   	push   %edx
f0106c81:	50                   	push   %eax
f0106c82:	68 6d 27 13 f0       	push   $0xf013276d
f0106c87:	e8 a5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c8c:	83 c4 10             	add    $0x10,%esp
}
f0106c8f:	90                   	nop
f0106c90:	c9                   	leave  
f0106c91:	c3                   	ret    

f0106c92 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c92:	55                   	push   %ebp
f0106c93:	89 e5                	mov    %esp,%ebp
f0106c95:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c98:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c9f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106ca6:	eb 24                	jmp    f0106ccc <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106ca8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106cad:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106cb0:	c1 e2 02             	shl    $0x2,%edx
f0106cb3:	01 c2                	add    %eax,%edx
f0106cb5:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106cba:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106cbd:	c1 e1 02             	shl    $0x2,%ecx
f0106cc0:	01 c8                	add    %ecx,%eax
f0106cc2:	8b 00                	mov    (%eax),%eax
f0106cc4:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106cc6:	ff 45 fc             	incl   -0x4(%ebp)
f0106cc9:	ff 45 f8             	incl   -0x8(%ebp)
f0106ccc:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106cd1:	c1 e8 16             	shr    $0x16,%eax
f0106cd4:	89 c2                	mov    %eax,%edx
f0106cd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106cd9:	39 c2                	cmp    %eax,%edx
f0106cdb:	77 cb                	ja     f0106ca8 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106cdd:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0106ce2:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106ce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ce8:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106ceb:	0f 20 c0             	mov    %cr0,%eax
f0106cee:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106cf7:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106cfe:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d05:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106d08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d0b:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106d0e:	0f 01 15 b0 e9 18 f0 	lgdtl  0xf018e9b0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106d15:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d1a:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106d1c:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d21:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106d23:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d28:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106d2a:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d2f:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106d31:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d36:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106d38:	ea 3f 6d 10 f0 08 00 	ljmp   $0x8,$0xf0106d3f
	asm volatile("lldt %%ax" :: "a" (0));
f0106d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d44:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106d47:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106d4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d55:	eb 19                	jmp    f0106d70 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106d57:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d5f:	c1 e2 02             	shl    $0x2,%edx
f0106d62:	01 d0                	add    %edx,%eax
f0106d64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d6a:	ff 45 f4             	incl   -0xc(%ebp)
f0106d6d:	ff 45 f0             	incl   -0x10(%ebp)
f0106d70:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106d75:	c1 e8 16             	shr    $0x16,%eax
f0106d78:	89 c2                	mov    %eax,%edx
f0106d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d7d:	39 c2                	cmp    %eax,%edx
f0106d7f:	77 d6                	ja     f0106d57 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d81:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0106d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8c:	0f 22 d8             	mov    %eax,%cr3
}
f0106d8f:	90                   	nop
f0106d90:	c9                   	leave  
f0106d91:	c3                   	ret    

f0106d92 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d92:	55                   	push   %ebp
f0106d93:	89 e5                	mov    %esp,%ebp
f0106d95:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d98:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106da0:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106da7:	77 17                	ja     f0106dc0 <setup_listing_to_all_page_tables_entries+0x2e>
f0106da9:	ff 75 f4             	pushl  -0xc(%ebp)
f0106dac:	68 c4 25 13 f0       	push   $0xf01325c4
f0106db1:	68 ae 01 00 00       	push   $0x1ae
f0106db6:	68 f8 25 13 f0       	push   $0xf01325f8
f0106dbb:	e8 f0 93 ff ff       	call   f01001b0 <_panic>
f0106dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc3:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106dcb:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106dd0:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106dd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dd8:	83 ca 03             	or     $0x3,%edx
f0106ddb:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106ddd:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106de2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106de8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106ded:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106df0:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106df7:	77 17                	ja     f0106e10 <setup_listing_to_all_page_tables_entries+0x7e>
f0106df9:	ff 75 ec             	pushl  -0x14(%ebp)
f0106dfc:	68 c4 25 13 f0       	push   $0xf01325c4
f0106e01:	68 b3 01 00 00       	push   $0x1b3
f0106e06:	68 f8 25 13 f0       	push   $0xf01325f8
f0106e0b:	e8 a0 93 ff ff       	call   f01001b0 <_panic>
f0106e10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106e18:	83 c8 05             	or     $0x5,%eax
f0106e1b:	89 02                	mov    %eax,(%edx)

}
f0106e1d:	90                   	nop
f0106e1e:	c9                   	leave  
f0106e1f:	c3                   	ret    

f0106e20 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e20:	55                   	push   %ebp
f0106e21:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e26:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0106e2c:	29 d0                	sub    %edx,%eax
f0106e2e:	c1 f8 02             	sar    $0x2,%eax
f0106e31:	89 c2                	mov    %eax,%edx
f0106e33:	89 d0                	mov    %edx,%eax
f0106e35:	c1 e0 03             	shl    $0x3,%eax
f0106e38:	01 d0                	add    %edx,%eax
f0106e3a:	c1 e0 03             	shl    $0x3,%eax
f0106e3d:	01 d0                	add    %edx,%eax
f0106e3f:	c1 e0 03             	shl    $0x3,%eax
f0106e42:	01 d0                	add    %edx,%eax
f0106e44:	c1 e0 03             	shl    $0x3,%eax
f0106e47:	01 d0                	add    %edx,%eax
f0106e49:	89 c1                	mov    %eax,%ecx
f0106e4b:	c1 e1 0f             	shl    $0xf,%ecx
f0106e4e:	01 c8                	add    %ecx,%eax
f0106e50:	c1 e0 03             	shl    $0x3,%eax
f0106e53:	01 d0                	add    %edx,%eax
f0106e55:	f7 d8                	neg    %eax
}
f0106e57:	5d                   	pop    %ebp
f0106e58:	c3                   	ret    

f0106e59 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106e59:	55                   	push   %ebp
f0106e5a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106e5c:	ff 75 08             	pushl  0x8(%ebp)
f0106e5f:	e8 bc ff ff ff       	call   f0106e20 <to_frame_number>
f0106e64:	83 c4 04             	add    $0x4,%esp
f0106e67:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e6a:	c9                   	leave  
f0106e6b:	c3                   	ret    

f0106e6c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e6c:	55                   	push   %ebp
f0106e6d:	89 e5                	mov    %esp,%ebp
f0106e6f:	53                   	push   %ebx
f0106e70:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e76:	c1 e8 0c             	shr    $0xc,%eax
f0106e79:	89 c2                	mov    %eax,%edx
f0106e7b:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0106e80:	39 c2                	cmp    %eax,%edx
f0106e82:	72 14                	jb     f0106e98 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e84:	83 ec 04             	sub    $0x4,%esp
f0106e87:	68 8c 27 13 f0       	push   $0xf013278c
f0106e8c:	6a 55                	push   $0x55
f0106e8e:	68 b1 27 13 f0       	push   $0xf01327b1
f0106e93:	e8 18 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e98:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ea1:	c1 e8 0c             	shr    $0xc,%eax
f0106ea4:	89 c2                	mov    %eax,%edx
f0106ea6:	89 d0                	mov    %edx,%eax
f0106ea8:	01 c0                	add    %eax,%eax
f0106eaa:	01 d0                	add    %edx,%eax
f0106eac:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106eb3:	01 d8                	add    %ebx,%eax
f0106eb5:	01 d0                	add    %edx,%eax
f0106eb7:	01 c8                	add    %ecx,%eax
}
f0106eb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106ebc:	c9                   	leave  
f0106ebd:	c3                   	ret    

f0106ebe <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106ebe:	55                   	push   %ebp
f0106ebf:	89 e5                	mov    %esp,%ebp
f0106ec1:	83 ec 10             	sub    $0x10,%esp
f0106ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ec7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106ecd:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106ed0:	90                   	nop
f0106ed1:	c9                   	leave  
f0106ed2:	c3                   	ret    

f0106ed3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106ed3:	55                   	push   %ebp
f0106ed4:	89 e5                	mov    %esp,%ebp
f0106ed6:	56                   	push   %esi
f0106ed7:	53                   	push   %ebx
f0106ed8:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106edb:	c7 05 d8 bd 2b f0 00 	movl   $0x0,0xf02bbdd8
f0106ee2:	00 00 00 
f0106ee5:	c7 05 dc bd 2b f0 00 	movl   $0x0,0xf02bbddc
f0106eec:	00 00 00 
f0106eef:	c7 05 e4 bd 2b f0 00 	movl   $0x0,0xf02bbde4
f0106ef6:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106ef9:	c7 05 40 3a 25 f0 00 	movl   $0x0,0xf0253a40
f0106f00:	00 00 00 
f0106f03:	c7 05 44 3a 25 f0 00 	movl   $0x0,0xf0253a44
f0106f0a:	00 00 00 
f0106f0d:	c7 05 4c 3a 25 f0 00 	movl   $0x0,0xf0253a4c
f0106f14:	00 00 00 

	frames_info[0].references = 1;
f0106f17:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f1c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106f22:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f27:	83 c0 1c             	add    $0x1c,%eax
f0106f2a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106f30:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f35:	83 c0 38             	add    $0x38,%eax
f0106f38:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106f3e:	c7 05 1c be 2b f0 00 	movl   $0xf0001000,0xf02bbe1c
f0106f45:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106f48:	c7 05 48 be 2b f0 00 	movl   $0xf0002000,0xf02bbe48
f0106f4f:	20 00 f0 
	i =0;
f0106f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106f59:	eb 1f                	jmp    f0106f7a <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106f5b:	8b 15 1c be 2b f0    	mov    0xf02bbe1c,%edx
f0106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f64:	01 d0                	add    %edx,%eax
f0106f66:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f69:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f72:	01 d0                	add    %edx,%eax
f0106f74:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f77:	ff 45 f4             	incl   -0xc(%ebp)
f0106f7a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f81:	7e d8                	jle    f0106f5b <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f83:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8d:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f9d:	f7 75 f0             	divl   -0x10(%ebp)
f0106fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fa3:	29 d0                	sub    %edx,%eax
f0106fa5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106fa8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106faf:	e9 20 01 00 00       	jmp    f01070d4 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106fb4:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106fba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fbd:	89 d0                	mov    %edx,%eax
f0106fbf:	01 c0                	add    %eax,%eax
f0106fc1:	01 d0                	add    %edx,%eax
f0106fc3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fca:	01 d8                	add    %ebx,%eax
f0106fcc:	01 d0                	add    %edx,%eax
f0106fce:	01 c8                	add    %ecx,%eax
f0106fd0:	83 ec 0c             	sub    $0xc,%esp
f0106fd3:	50                   	push   %eax
f0106fd4:	e8 31 03 00 00       	call   f010730a <initialize_frame_info>
f0106fd9:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106fdc:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fe5:	89 d0                	mov    %edx,%eax
f0106fe7:	01 c0                	add    %eax,%eax
f0106fe9:	01 d0                	add    %edx,%eax
f0106feb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ff2:	01 d8                	add    %ebx,%eax
f0106ff4:	01 d0                	add    %edx,%eax
f0106ff6:	01 c8                	add    %ecx,%eax
f0106ff8:	85 c0                	test   %eax,%eax
f0106ffa:	75 14                	jne    f0107010 <initialize_paging+0x13d>
f0106ffc:	83 ec 04             	sub    $0x4,%esp
f0106fff:	68 cc 27 13 f0       	push   $0xf01327cc
f0107004:	6a 5c                	push   $0x5c
f0107006:	68 ef 27 13 f0       	push   $0xf01327ef
f010700b:	e8 a0 91 ff ff       	call   f01001b0 <_panic>
f0107010:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107019:	89 d0                	mov    %edx,%eax
f010701b:	01 c0                	add    %eax,%eax
f010701d:	01 d0                	add    %edx,%eax
f010701f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107026:	01 d8                	add    %ebx,%eax
f0107028:	01 d0                	add    %edx,%eax
f010702a:	01 c8                	add    %ecx,%eax
f010702c:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107032:	89 10                	mov    %edx,(%eax)
f0107034:	8b 00                	mov    (%eax),%eax
f0107036:	85 c0                	test   %eax,%eax
f0107038:	74 27                	je     f0107061 <initialize_paging+0x18e>
f010703a:	8b 0d d8 bd 2b f0    	mov    0xf02bbdd8,%ecx
f0107040:	8b 1d 10 be 2b f0    	mov    0xf02bbe10,%ebx
f0107046:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107049:	89 d0                	mov    %edx,%eax
f010704b:	01 c0                	add    %eax,%eax
f010704d:	01 d0                	add    %edx,%eax
f010704f:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107056:	01 f0                	add    %esi,%eax
f0107058:	01 d0                	add    %edx,%eax
f010705a:	01 d8                	add    %ebx,%eax
f010705c:	89 41 04             	mov    %eax,0x4(%ecx)
f010705f:	eb 21                	jmp    f0107082 <initialize_paging+0x1af>
f0107061:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107067:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010706a:	89 d0                	mov    %edx,%eax
f010706c:	01 c0                	add    %eax,%eax
f010706e:	01 d0                	add    %edx,%eax
f0107070:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107077:	01 d8                	add    %ebx,%eax
f0107079:	01 d0                	add    %edx,%eax
f010707b:	01 c8                	add    %ecx,%eax
f010707d:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f0107082:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708b:	89 d0                	mov    %edx,%eax
f010708d:	01 c0                	add    %eax,%eax
f010708f:	01 d0                	add    %edx,%eax
f0107091:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107098:	01 d8                	add    %ebx,%eax
f010709a:	01 d0                	add    %edx,%eax
f010709c:	01 c8                	add    %ecx,%eax
f010709e:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01070a3:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01070a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070ac:	89 d0                	mov    %edx,%eax
f01070ae:	01 c0                	add    %eax,%eax
f01070b0:	01 d0                	add    %edx,%eax
f01070b2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070b9:	01 d8                	add    %ebx,%eax
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	01 c8                	add    %ecx,%eax
f01070bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070c6:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01070cb:	40                   	inc    %eax
f01070cc:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01070d1:	ff 45 f4             	incl   -0xc(%ebp)
f01070d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070d7:	85 c0                	test   %eax,%eax
f01070d9:	79 05                	jns    f01070e0 <initialize_paging+0x20d>
f01070db:	05 ff 0f 00 00       	add    $0xfff,%eax
f01070e0:	c1 f8 0c             	sar    $0xc,%eax
f01070e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01070e6:	0f 8f c8 fe ff ff    	jg     f0106fb4 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070ec:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01070f3:	eb 25                	jmp    f010711a <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01070f5:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01070fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070fe:	89 d0                	mov    %edx,%eax
f0107100:	01 c0                	add    %eax,%eax
f0107102:	01 d0                	add    %edx,%eax
f0107104:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010710b:	01 d8                	add    %ebx,%eax
f010710d:	01 d0                	add    %edx,%eax
f010710f:	01 c8                	add    %ecx,%eax
f0107111:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107117:	ff 45 f4             	incl   -0xc(%ebp)
f010711a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0107121:	7e d2                	jle    f01070f5 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0107123:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010712a:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f010712f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107132:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107139:	77 14                	ja     f010714f <initialize_paging+0x27c>
f010713b:	ff 75 e0             	pushl  -0x20(%ebp)
f010713e:	68 0c 28 13 f0       	push   $0xf013280c
f0107143:	6a 64                	push   $0x64
f0107145:	68 ef 27 13 f0       	push   $0xf01327ef
f010714a:	e8 61 90 ff ff       	call   f01001b0 <_panic>
f010714f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107152:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107158:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010715b:	01 d0                	add    %edx,%eax
f010715d:	48                   	dec    %eax
f010715e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107161:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107164:	ba 00 00 00 00       	mov    $0x0,%edx
f0107169:	f7 75 e4             	divl   -0x1c(%ebp)
f010716c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010716f:	29 d0                	sub    %edx,%eax
f0107171:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107174:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010717b:	eb 25                	jmp    f01071a2 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010717d:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107183:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107186:	89 d0                	mov    %edx,%eax
f0107188:	01 c0                	add    %eax,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107193:	01 d8                	add    %ebx,%eax
f0107195:	01 d0                	add    %edx,%eax
f0107197:	01 c8                	add    %ecx,%eax
f0107199:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010719f:	ff 45 f4             	incl   -0xc(%ebp)
f01071a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071a5:	85 c0                	test   %eax,%eax
f01071a7:	79 05                	jns    f01071ae <initialize_paging+0x2db>
f01071a9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071ae:	c1 f8 0c             	sar    $0xc,%eax
f01071b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01071b4:	7f c7                	jg     f010717d <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01071b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b9:	85 c0                	test   %eax,%eax
f01071bb:	79 05                	jns    f01071c2 <initialize_paging+0x2ef>
f01071bd:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071c2:	c1 f8 0c             	sar    $0xc,%eax
f01071c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01071c8:	e9 20 01 00 00       	jmp    f01072ed <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f01071cd:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01071d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d6:	89 d0                	mov    %edx,%eax
f01071d8:	01 c0                	add    %eax,%eax
f01071da:	01 d0                	add    %edx,%eax
f01071dc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071e3:	01 d8                	add    %ebx,%eax
f01071e5:	01 d0                	add    %edx,%eax
f01071e7:	01 c8                	add    %ecx,%eax
f01071e9:	83 ec 0c             	sub    $0xc,%esp
f01071ec:	50                   	push   %eax
f01071ed:	e8 18 01 00 00       	call   f010730a <initialize_frame_info>
f01071f2:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01071f5:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01071fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071fe:	89 d0                	mov    %edx,%eax
f0107200:	01 c0                	add    %eax,%eax
f0107202:	01 d0                	add    %edx,%eax
f0107204:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010720b:	01 d8                	add    %ebx,%eax
f010720d:	01 d0                	add    %edx,%eax
f010720f:	01 c8                	add    %ecx,%eax
f0107211:	85 c0                	test   %eax,%eax
f0107213:	75 14                	jne    f0107229 <initialize_paging+0x356>
f0107215:	83 ec 04             	sub    $0x4,%esp
f0107218:	68 cc 27 13 f0       	push   $0xf01327cc
f010721d:	6a 70                	push   $0x70
f010721f:	68 ef 27 13 f0       	push   $0xf01327ef
f0107224:	e8 87 8f ff ff       	call   f01001b0 <_panic>
f0107229:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f010722f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107232:	89 d0                	mov    %edx,%eax
f0107234:	01 c0                	add    %eax,%eax
f0107236:	01 d0                	add    %edx,%eax
f0107238:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010723f:	01 d8                	add    %ebx,%eax
f0107241:	01 d0                	add    %edx,%eax
f0107243:	01 c8                	add    %ecx,%eax
f0107245:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f010724b:	89 10                	mov    %edx,(%eax)
f010724d:	8b 00                	mov    (%eax),%eax
f010724f:	85 c0                	test   %eax,%eax
f0107251:	74 27                	je     f010727a <initialize_paging+0x3a7>
f0107253:	8b 0d d8 bd 2b f0    	mov    0xf02bbdd8,%ecx
f0107259:	8b 1d 10 be 2b f0    	mov    0xf02bbe10,%ebx
f010725f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107262:	89 d0                	mov    %edx,%eax
f0107264:	01 c0                	add    %eax,%eax
f0107266:	01 d0                	add    %edx,%eax
f0107268:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010726f:	01 f0                	add    %esi,%eax
f0107271:	01 d0                	add    %edx,%eax
f0107273:	01 d8                	add    %ebx,%eax
f0107275:	89 41 04             	mov    %eax,0x4(%ecx)
f0107278:	eb 21                	jmp    f010729b <initialize_paging+0x3c8>
f010727a:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107283:	89 d0                	mov    %edx,%eax
f0107285:	01 c0                	add    %eax,%eax
f0107287:	01 d0                	add    %edx,%eax
f0107289:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107290:	01 d8                	add    %ebx,%eax
f0107292:	01 d0                	add    %edx,%eax
f0107294:	01 c8                	add    %ecx,%eax
f0107296:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f010729b:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01072a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a4:	89 d0                	mov    %edx,%eax
f01072a6:	01 c0                	add    %eax,%eax
f01072a8:	01 d0                	add    %edx,%eax
f01072aa:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072b1:	01 d8                	add    %ebx,%eax
f01072b3:	01 d0                	add    %edx,%eax
f01072b5:	01 c8                	add    %ecx,%eax
f01072b7:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01072bc:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01072c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c5:	89 d0                	mov    %edx,%eax
f01072c7:	01 c0                	add    %eax,%eax
f01072c9:	01 d0                	add    %edx,%eax
f01072cb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072d2:	01 d8                	add    %ebx,%eax
f01072d4:	01 d0                	add    %edx,%eax
f01072d6:	01 c8                	add    %ecx,%eax
f01072d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01072df:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01072e4:	40                   	inc    %eax
f01072e5:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01072ea:	ff 45 f4             	incl   -0xc(%ebp)
f01072ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072f0:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01072f5:	39 c2                	cmp    %eax,%edx
f01072f7:	0f 82 d0 fe ff ff    	jb     f01071cd <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01072fd:	e8 f2 c5 ff ff       	call   f01038f4 <initialize_disk_page_file>
}
f0107302:	90                   	nop
f0107303:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0107306:	5b                   	pop    %ebx
f0107307:	5e                   	pop    %esi
f0107308:	5d                   	pop    %ebp
f0107309:	c3                   	ret    

f010730a <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010730a:	55                   	push   %ebp
f010730b:	89 e5                	mov    %esp,%ebp
f010730d:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0107310:	83 ec 04             	sub    $0x4,%esp
f0107313:	6a 1c                	push   $0x1c
f0107315:	6a 00                	push   $0x0
f0107317:	ff 75 08             	pushl  0x8(%ebp)
f010731a:	e8 cf 7e 02 00       	call   f012f1ee <memset>
f010731f:	83 c4 10             	add    $0x10,%esp
}
f0107322:	90                   	nop
f0107323:	c9                   	leave  
f0107324:	c3                   	ret    

f0107325 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0107325:	55                   	push   %ebp
f0107326:	89 e5                	mov    %esp,%ebp
f0107328:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010732b:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107331:	8b 45 08             	mov    0x8(%ebp),%eax
f0107334:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0107336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010733d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107340:	8b 00                	mov    (%eax),%eax
f0107342:	85 c0                	test   %eax,%eax
f0107344:	75 17                	jne    f010735d <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0107346:	83 ec 04             	sub    $0x4,%esp
f0107349:	68 40 28 13 f0       	push   $0xf0132840
f010734e:	68 98 00 00 00       	push   $0x98
f0107353:	68 ef 27 13 f0       	push   $0xf01327ef
f0107358:	e8 53 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010735d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107360:	8b 00                	mov    (%eax),%eax
f0107362:	85 c0                	test   %eax,%eax
f0107364:	75 17                	jne    f010737d <allocate_frame+0x58>
f0107366:	83 ec 04             	sub    $0x4,%esp
f0107369:	68 8d 28 13 f0       	push   $0xf013288d
f010736e:	68 9e 00 00 00       	push   $0x9e
f0107373:	68 ef 27 13 f0       	push   $0xf01327ef
f0107378:	e8 33 8e ff ff       	call   f01001b0 <_panic>
f010737d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107380:	8b 00                	mov    (%eax),%eax
f0107382:	8b 00                	mov    (%eax),%eax
f0107384:	85 c0                	test   %eax,%eax
f0107386:	74 14                	je     f010739c <allocate_frame+0x77>
f0107388:	8b 45 08             	mov    0x8(%ebp),%eax
f010738b:	8b 00                	mov    (%eax),%eax
f010738d:	8b 00                	mov    (%eax),%eax
f010738f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107392:	8b 12                	mov    (%edx),%edx
f0107394:	8b 52 04             	mov    0x4(%edx),%edx
f0107397:	89 50 04             	mov    %edx,0x4(%eax)
f010739a:	eb 0d                	jmp    f01073a9 <allocate_frame+0x84>
f010739c:	8b 45 08             	mov    0x8(%ebp),%eax
f010739f:	8b 00                	mov    (%eax),%eax
f01073a1:	8b 40 04             	mov    0x4(%eax),%eax
f01073a4:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f01073a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ac:	8b 00                	mov    (%eax),%eax
f01073ae:	8b 40 04             	mov    0x4(%eax),%eax
f01073b1:	85 c0                	test   %eax,%eax
f01073b3:	74 13                	je     f01073c8 <allocate_frame+0xa3>
f01073b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01073b8:	8b 00                	mov    (%eax),%eax
f01073ba:	8b 40 04             	mov    0x4(%eax),%eax
f01073bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01073c0:	8b 12                	mov    (%edx),%edx
f01073c2:	8b 12                	mov    (%edx),%edx
f01073c4:	89 10                	mov    %edx,(%eax)
f01073c6:	eb 0c                	jmp    f01073d4 <allocate_frame+0xaf>
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	8b 00                	mov    (%eax),%eax
f01073cd:	8b 00                	mov    (%eax),%eax
f01073cf:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01073d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073d7:	8b 00                	mov    (%eax),%eax
f01073d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01073df:	8b 45 08             	mov    0x8(%ebp),%eax
f01073e2:	8b 00                	mov    (%eax),%eax
f01073e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073eb:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01073f0:	48                   	dec    %eax
f01073f1:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01073f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f9:	8b 00                	mov    (%eax),%eax
f01073fb:	8a 40 14             	mov    0x14(%eax),%al
f01073fe:	84 c0                	test   %al,%al
f0107400:	74 23                	je     f0107425 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107402:	8b 45 08             	mov    0x8(%ebp),%eax
f0107405:	8b 00                	mov    (%eax),%eax
f0107407:	8b 50 0c             	mov    0xc(%eax),%edx
f010740a:	8b 45 08             	mov    0x8(%ebp),%eax
f010740d:	8b 00                	mov    (%eax),%eax
f010740f:	8b 40 10             	mov    0x10(%eax),%eax
f0107412:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0107418:	83 ec 08             	sub    $0x8,%esp
f010741b:	52                   	push   %edx
f010741c:	50                   	push   %eax
f010741d:	e8 0a 0d 00 00       	call   f010812c <pt_clear_page_table_entry>
f0107422:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107425:	8b 45 08             	mov    0x8(%ebp),%eax
f0107428:	8b 00                	mov    (%eax),%eax
f010742a:	83 ec 0c             	sub    $0xc,%esp
f010742d:	50                   	push   %eax
f010742e:	e8 d7 fe ff ff       	call   f010730a <initialize_frame_info>
f0107433:	83 c4 10             	add    $0x10,%esp
	return 0;
f0107436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 08             	pushl  0x8(%ebp)
f0107449:	e8 bc fe ff ff       	call   f010730a <initialize_frame_info>
f010744e:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107455:	75 17                	jne    f010746e <free_frame+0x31>
f0107457:	83 ec 04             	sub    $0x4,%esp
f010745a:	68 cc 27 13 f0       	push   $0xf01327cc
f010745f:	68 bb 00 00 00       	push   $0xbb
f0107464:	68 ef 27 13 f0       	push   $0xf01327ef
f0107469:	e8 42 8d ff ff       	call   f01001b0 <_panic>
f010746e:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107474:	8b 45 08             	mov    0x8(%ebp),%eax
f0107477:	89 10                	mov    %edx,(%eax)
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	8b 00                	mov    (%eax),%eax
f010747e:	85 c0                	test   %eax,%eax
f0107480:	74 0d                	je     f010748f <free_frame+0x52>
f0107482:	a1 d8 bd 2b f0       	mov    0xf02bbdd8,%eax
f0107487:	8b 55 08             	mov    0x8(%ebp),%edx
f010748a:	89 50 04             	mov    %edx,0x4(%eax)
f010748d:	eb 08                	jmp    f0107497 <free_frame+0x5a>
f010748f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107492:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f0107497:	8b 45 08             	mov    0x8(%ebp),%eax
f010749a:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f010749f:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01074a9:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01074ae:	40                   	inc    %eax
f01074af:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01074b4:	90                   	nop
f01074b5:	c9                   	leave  
f01074b6:	c3                   	ret    

f01074b7 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01074b7:	55                   	push   %ebp
f01074b8:	89 e5                	mov    %esp,%ebp
f01074ba:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	8b 40 08             	mov    0x8(%eax),%eax
f01074c3:	48                   	dec    %eax
f01074c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01074c7:	66 89 42 08          	mov    %ax,0x8(%edx)
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	8b 40 08             	mov    0x8(%eax),%eax
f01074d1:	66 85 c0             	test   %ax,%ax
f01074d4:	75 0e                	jne    f01074e4 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01074d6:	83 ec 0c             	sub    $0xc,%esp
f01074d9:	ff 75 08             	pushl  0x8(%ebp)
f01074dc:	e8 5c ff ff ff       	call   f010743d <free_frame>
f01074e1:	83 c4 10             	add    $0x10,%esp
}
f01074e4:	90                   	nop
f01074e5:	c9                   	leave  
f01074e6:	c3                   	ret    

f01074e7 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01074e7:	55                   	push   %ebp
f01074e8:	89 e5                	mov    %esp,%ebp
f01074ea:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074f0:	c1 e8 16             	shr    $0x16,%eax
f01074f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fd:	01 d0                	add    %edx,%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	83 e0 01             	and    $0x1,%eax
f010750a:	85 c0                	test   %eax,%eax
f010750c:	74 4e                	je     f010755c <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107516:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107519:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010751c:	c1 e8 0c             	shr    $0xc,%eax
f010751f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107522:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0107527:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010752a:	72 17                	jb     f0107543 <get_page_table+0x5c>
f010752c:	ff 75 f0             	pushl  -0x10(%ebp)
f010752f:	68 ac 28 13 f0       	push   $0xf01328ac
f0107534:	68 e2 00 00 00       	push   $0xe2
f0107539:	68 ef 27 13 f0       	push   $0xf01327ef
f010753e:	e8 6d 8c ff ff       	call   f01001b0 <_panic>
f0107543:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107546:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010754b:	89 c2                	mov    %eax,%edx
f010754d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107550:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107552:	b8 00 00 00 00       	mov    $0x0,%eax
f0107557:	e9 8f 00 00 00       	jmp    f01075eb <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f010755c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107560:	74 7b                	je     f01075dd <get_page_table+0xf6>
f0107562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107565:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0107568:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010756b:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f010756e:	83 ec 0c             	sub    $0xc,%esp
f0107571:	6a 00                	push   $0x0
f0107573:	e8 70 4f 00 00       	call   f010c4e8 <fault_handler>
f0107578:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010757b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010757e:	c1 e8 16             	shr    $0x16,%eax
f0107581:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107588:	8b 45 08             	mov    0x8(%ebp),%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	8b 00                	mov    (%eax),%eax
f010758f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010759a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010759d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a0:	c1 e8 0c             	shr    $0xc,%eax
f01075a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01075a6:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01075ab:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01075ae:	72 17                	jb     f01075c7 <get_page_table+0xe0>
f01075b0:	ff 75 e8             	pushl  -0x18(%ebp)
f01075b3:	68 ac 28 13 f0       	push   $0xf01328ac
f01075b8:	68 fa 00 00 00       	push   $0xfa
f01075bd:	68 ef 27 13 f0       	push   $0xf01327ef
f01075c2:	e8 e9 8b ff ff       	call   f01001b0 <_panic>
f01075c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075ca:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01075cf:	89 c2                	mov    %eax,%edx
f01075d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01075d4:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01075d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01075db:	eb 0e                	jmp    f01075eb <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01075dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01075e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01075e6:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01075eb:	c9                   	leave  
f01075ec:	c3                   	ret    

f01075ed <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f01075ed:	55                   	push   %ebp
f01075ee:	89 e5                	mov    %esp,%ebp
f01075f0:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f01075f3:	83 ec 04             	sub    $0x4,%esp
f01075f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01075f9:	50                   	push   %eax
f01075fa:	ff 75 0c             	pushl  0xc(%ebp)
f01075fd:	ff 75 08             	pushl  0x8(%ebp)
f0107600:	e8 08 00 00 00       	call   f010760d <__static_cpt>
f0107605:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0107608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010760b:	c9                   	leave  
f010760c:	c3                   	ret    

f010760d <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010760d:	55                   	push   %ebp
f010760e:	89 e5                	mov    %esp,%ebp
f0107610:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107613:	83 ec 0c             	sub    $0xc,%esp
f0107616:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107619:	50                   	push   %eax
f010761a:	e8 06 fd ff ff       	call   f0107325 <allocate_frame>
f010761f:	83 c4 10             	add    $0x10,%esp
f0107622:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107625:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107628:	83 ec 0c             	sub    $0xc,%esp
f010762b:	50                   	push   %eax
f010762c:	e8 28 f8 ff ff       	call   f0106e59 <to_physical_address>
f0107631:	83 c4 10             	add    $0x10,%esp
f0107634:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0107637:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010763a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010763d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107640:	c1 e8 0c             	shr    $0xc,%eax
f0107643:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107646:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010764b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010764e:	72 17                	jb     f0107667 <__static_cpt+0x5a>
f0107650:	ff 75 ec             	pushl  -0x14(%ebp)
f0107653:	68 ac 28 13 f0       	push   $0xf01328ac
f0107658:	68 2f 01 00 00       	push   $0x12f
f010765d:	68 ef 27 13 f0       	push   $0xf01327ef
f0107662:	e8 49 8b ff ff       	call   f01001b0 <_panic>
f0107667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010766a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010766f:	89 c2                	mov    %eax,%edx
f0107671:	8b 45 10             	mov    0x10(%ebp),%eax
f0107674:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107676:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107679:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010767f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107682:	c1 e8 16             	shr    $0x16,%eax
f0107685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010768c:	8b 45 08             	mov    0x8(%ebp),%eax
f010768f:	01 d0                	add    %edx,%eax
f0107691:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107694:	83 ca 07             	or     $0x7,%edx
f0107697:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0107699:	8b 45 10             	mov    0x10(%ebp),%eax
f010769c:	8b 00                	mov    (%eax),%eax
f010769e:	83 ec 04             	sub    $0x4,%esp
f01076a1:	68 00 10 00 00       	push   $0x1000
f01076a6:	6a 00                	push   $0x0
f01076a8:	50                   	push   %eax
f01076a9:	e8 40 7b 02 00       	call   f012f1ee <memset>
f01076ae:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01076b1:	0f 20 d8             	mov    %cr3,%eax
f01076b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01076b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076ba:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01076bd:	90                   	nop
f01076be:	c9                   	leave  
f01076bf:	c3                   	ret    

f01076c0 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01076c0:	55                   	push   %ebp
f01076c1:	89 e5                	mov    %esp,%ebp
f01076c3:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01076c6:	ff 75 0c             	pushl  0xc(%ebp)
f01076c9:	e8 8b f7 ff ff       	call   f0106e59 <to_physical_address>
f01076ce:	83 c4 04             	add    $0x4,%esp
f01076d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01076d4:	83 ec 04             	sub    $0x4,%esp
f01076d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076da:	50                   	push   %eax
f01076db:	ff 75 10             	pushl  0x10(%ebp)
f01076de:	ff 75 08             	pushl  0x8(%ebp)
f01076e1:	e8 01 fe ff ff       	call   f01074e7 <get_page_table>
f01076e6:	83 c4 10             	add    $0x10,%esp
f01076e9:	83 f8 01             	cmp    $0x1,%eax
f01076ec:	75 15                	jne    f0107703 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f01076ee:	83 ec 04             	sub    $0x4,%esp
f01076f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076f4:	50                   	push   %eax
f01076f5:	ff 75 10             	pushl  0x10(%ebp)
f01076f8:	ff 75 08             	pushl  0x8(%ebp)
f01076fb:	e8 0d ff ff ff       	call   f010760d <__static_cpt>
f0107700:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107703:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107706:	8b 55 10             	mov    0x10(%ebp),%edx
f0107709:	c1 ea 0c             	shr    $0xc,%edx
f010770c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107712:	c1 e2 02             	shl    $0x2,%edx
f0107715:	01 d0                	add    %edx,%eax
f0107717:	8b 00                	mov    (%eax),%eax
f0107719:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010771c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010771f:	83 e0 01             	and    $0x1,%eax
f0107722:	85 c0                	test   %eax,%eax
f0107724:	74 25                	je     f010774b <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0107726:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107729:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010772e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107731:	75 07                	jne    f010773a <map_frame+0x7a>
			return 0;
f0107733:	b8 00 00 00 00       	mov    $0x0,%eax
f0107738:	eb 43                	jmp    f010777d <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010773a:	83 ec 08             	sub    $0x8,%esp
f010773d:	ff 75 10             	pushl  0x10(%ebp)
f0107740:	ff 75 08             	pushl  0x8(%ebp)
f0107743:	e8 a7 00 00 00       	call   f01077ef <unmap_frame>
f0107748:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010774b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774e:	8b 40 08             	mov    0x8(%eax),%eax
f0107751:	40                   	inc    %eax
f0107752:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107755:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0107759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010775c:	8b 55 10             	mov    0x10(%ebp),%edx
f010775f:	c1 ea 0c             	shr    $0xc,%edx
f0107762:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107768:	c1 e2 02             	shl    $0x2,%edx
f010776b:	01 c2                	add    %eax,%edx
f010776d:	8b 45 14             	mov    0x14(%ebp),%eax
f0107770:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107773:	83 c8 01             	or     $0x1,%eax
f0107776:	89 02                	mov    %eax,(%edx)

	return 0;
f0107778:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010777d:	c9                   	leave  
f010777e:	c3                   	ret    

f010777f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f010777f:	55                   	push   %ebp
f0107780:	89 e5                	mov    %esp,%ebp
f0107782:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107785:	83 ec 04             	sub    $0x4,%esp
f0107788:	ff 75 10             	pushl  0x10(%ebp)
f010778b:	ff 75 0c             	pushl  0xc(%ebp)
f010778e:	ff 75 08             	pushl  0x8(%ebp)
f0107791:	e8 51 fd ff ff       	call   f01074e7 <get_page_table>
f0107796:	83 c4 10             	add    $0x10,%esp
f0107799:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010779c:	8b 45 10             	mov    0x10(%ebp),%eax
f010779f:	8b 00                	mov    (%eax),%eax
f01077a1:	85 c0                	test   %eax,%eax
f01077a3:	74 43                	je     f01077e8 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01077a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077a8:	c1 e8 0c             	shr    $0xc,%eax
f01077ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01077b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01077b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01077b6:	8b 00                	mov    (%eax),%eax
f01077b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01077bb:	c1 e2 02             	shl    $0x2,%edx
f01077be:	01 d0                	add    %edx,%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01077c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01077c9:	74 16                	je     f01077e1 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01077cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077d3:	83 ec 0c             	sub    $0xc,%esp
f01077d6:	50                   	push   %eax
f01077d7:	e8 90 f6 ff ff       	call   f0106e6c <to_frame_info>
f01077dc:	83 c4 10             	add    $0x10,%esp
f01077df:	eb 0c                	jmp    f01077ed <get_frame_info+0x6e>
		}
		return 0;
f01077e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01077e6:	eb 05                	jmp    f01077ed <get_frame_info+0x6e>
	}
	return 0;
f01077e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01077ed:	c9                   	leave  
f01077ee:	c3                   	ret    

f01077ef <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f01077ef:	55                   	push   %ebp
f01077f0:	89 e5                	mov    %esp,%ebp
f01077f2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01077f5:	83 ec 04             	sub    $0x4,%esp
f01077f8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01077fb:	50                   	push   %eax
f01077fc:	ff 75 0c             	pushl  0xc(%ebp)
f01077ff:	ff 75 08             	pushl  0x8(%ebp)
f0107802:	e8 78 ff ff ff       	call   f010777f <get_frame_info>
f0107807:	83 c4 10             	add    $0x10,%esp
f010780a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010780d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107811:	74 60                	je     f0107873 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107813:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107816:	8a 40 14             	mov    0x14(%eax),%al
f0107819:	84 c0                	test   %al,%al
f010781b:	74 1c                	je     f0107839 <unmap_frame+0x4a>
f010781d:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107824:	77 13                	ja     f0107839 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0107826:	83 ec 08             	sub    $0x8,%esp
f0107829:	ff 75 0c             	pushl  0xc(%ebp)
f010782c:	68 dc 28 13 f0       	push   $0xf01328dc
f0107831:	e8 fb 95 ff ff       	call   f0100e31 <cprintf>
f0107836:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0107839:	83 ec 0c             	sub    $0xc,%esp
f010783c:	ff 75 f4             	pushl  -0xc(%ebp)
f010783f:	e8 73 fc ff ff       	call   f01074b7 <decrement_references>
f0107844:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010784a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010784d:	c1 ea 0c             	shr    $0xc,%edx
f0107850:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107856:	c1 e2 02             	shl    $0x2,%edx
f0107859:	01 d0                	add    %edx,%eax
f010785b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107861:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	50                   	push   %eax
f0107868:	ff 75 08             	pushl  0x8(%ebp)
f010786b:	e8 4e f6 ff ff       	call   f0106ebe <tlb_invalidate>
f0107870:	83 c4 10             	add    $0x10,%esp
	}
}
f0107873:	90                   	nop
f0107874:	c9                   	leave  
f0107875:	c3                   	ret    

f0107876 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107876:	55                   	push   %ebp
f0107877:	89 e5                	mov    %esp,%ebp
f0107879:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010787c:	ff 75 0c             	pushl  0xc(%ebp)
f010787f:	e8 d5 f5 ff ff       	call   f0106e59 <to_physical_address>
f0107884:	83 c4 04             	add    $0x4,%esp
f0107887:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010788a:	8b 45 10             	mov    0x10(%ebp),%eax
f010788d:	c1 e8 16             	shr    $0x16,%eax
f0107890:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107897:	8b 45 08             	mov    0x8(%ebp),%eax
f010789a:	01 d0                	add    %edx,%eax
f010789c:	8b 00                	mov    (%eax),%eax
f010789e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01078ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078af:	c1 e8 0c             	shr    $0xc,%eax
f01078b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01078b5:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01078ba:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01078bd:	72 17                	jb     f01078d6 <loadtime_map_frame+0x60>
f01078bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01078c2:	68 ac 28 13 f0       	push   $0xf01328ac
f01078c7:	68 e5 01 00 00       	push   $0x1e5
f01078cc:	68 ef 27 13 f0       	push   $0xf01327ef
f01078d1:	e8 da 88 ff ff       	call   f01001b0 <_panic>
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01078de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f01078e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e5:	75 15                	jne    f01078fc <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f01078e7:	83 ec 04             	sub    $0x4,%esp
f01078ea:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01078ed:	50                   	push   %eax
f01078ee:	ff 75 10             	pushl  0x10(%ebp)
f01078f1:	ff 75 08             	pushl  0x8(%ebp)
f01078f4:	e8 14 fd ff ff       	call   f010760d <__static_cpt>
f01078f9:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f01078fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078ff:	8b 40 08             	mov    0x8(%eax),%eax
f0107902:	40                   	inc    %eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010790a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010790d:	8b 55 10             	mov    0x10(%ebp),%edx
f0107910:	c1 ea 0c             	shr    $0xc,%edx
f0107913:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107919:	c1 e2 02             	shl    $0x2,%edx
f010791c:	01 c2                	add    %eax,%edx
f010791e:	8b 45 14             	mov    0x14(%ebp),%eax
f0107921:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107924:	83 c8 01             	or     $0x1,%eax
f0107927:	89 02                	mov    %eax,(%edx)

	return 0;
f0107929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	57                   	push   %edi
f0107934:	56                   	push   %esi
f0107935:	53                   	push   %ebx
f0107936:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107940:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107947:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f010794e:	a1 d8 bd 2b f0       	mov    0xf02bbdd8,%eax
f0107953:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107956:	eb 1a                	jmp    f0107972 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107958:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795b:	8a 40 14             	mov    0x14(%eax),%al
f010795e:	84 c0                	test   %al,%al
f0107960:	74 05                	je     f0107967 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107962:	ff 45 e8             	incl   -0x18(%ebp)
f0107965:	eb 03                	jmp    f010796a <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107967:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010796a:	a1 e0 bd 2b f0       	mov    0xf02bbde0,%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107976:	74 07                	je     f010797f <calculate_available_frames+0x4f>
f0107978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010797b:	8b 00                	mov    (%eax),%eax
f010797d:	eb 05                	jmp    f0107984 <calculate_available_frames+0x54>
f010797f:	b8 00 00 00 00       	mov    $0x0,%eax
f0107984:	a3 e0 bd 2b f0       	mov    %eax,0xf02bbde0
f0107989:	a1 e0 bd 2b f0       	mov    0xf02bbde0,%eax
f010798e:	85 c0                	test   %eax,%eax
f0107990:	75 c6                	jne    f0107958 <calculate_available_frames+0x28>
f0107992:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107996:	75 c0                	jne    f0107958 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107998:	a1 40 3a 25 f0       	mov    0xf0253a40,%eax
f010799d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079a0:	eb 0b                	jmp    f01079ad <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01079a2:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01079a5:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f01079aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079b1:	74 07                	je     f01079ba <calculate_available_frames+0x8a>
f01079b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b6:	8b 00                	mov    (%eax),%eax
f01079b8:	eb 05                	jmp    f01079bf <calculate_available_frames+0x8f>
f01079ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01079bf:	a3 48 3a 25 f0       	mov    %eax,0xf0253a48
f01079c4:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f01079c9:	85 c0                	test   %eax,%eax
f01079cb:	75 d5                	jne    f01079a2 <calculate_available_frames+0x72>
f01079cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079d1:	75 cf                	jne    f01079a2 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01079d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01079d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01079df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01079e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01079e8:	89 c3                	mov    %eax,%ebx
f01079ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01079ed:	ba 03 00 00 00       	mov    $0x3,%edx
f01079f2:	89 df                	mov    %ebx,%edi
f01079f4:	89 c6                	mov    %eax,%esi
f01079f6:	89 d1                	mov    %edx,%ecx
f01079f8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01079fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01079fd:	83 c4 20             	add    $0x20,%esp
f0107a00:	5b                   	pop    %ebx
f0107a01:	5e                   	pop    %esi
f0107a02:	5f                   	pop    %edi
f0107a03:	5d                   	pop    %ebp
f0107a04:	c2 04 00             	ret    $0x4

f0107a07 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107a07:	55                   	push   %ebp
f0107a08:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a0d:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0107a13:	29 d0                	sub    %edx,%eax
f0107a15:	c1 f8 02             	sar    $0x2,%eax
f0107a18:	89 c2                	mov    %eax,%edx
f0107a1a:	89 d0                	mov    %edx,%eax
f0107a1c:	c1 e0 03             	shl    $0x3,%eax
f0107a1f:	01 d0                	add    %edx,%eax
f0107a21:	c1 e0 03             	shl    $0x3,%eax
f0107a24:	01 d0                	add    %edx,%eax
f0107a26:	c1 e0 03             	shl    $0x3,%eax
f0107a29:	01 d0                	add    %edx,%eax
f0107a2b:	c1 e0 03             	shl    $0x3,%eax
f0107a2e:	01 d0                	add    %edx,%eax
f0107a30:	89 c1                	mov    %eax,%ecx
f0107a32:	c1 e1 0f             	shl    $0xf,%ecx
f0107a35:	01 c8                	add    %ecx,%eax
f0107a37:	c1 e0 03             	shl    $0x3,%eax
f0107a3a:	01 d0                	add    %edx,%eax
f0107a3c:	f7 d8                	neg    %eax
}
f0107a3e:	5d                   	pop    %ebp
f0107a3f:	c3                   	ret    

f0107a40 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107a40:	55                   	push   %ebp
f0107a41:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107a43:	ff 75 08             	pushl  0x8(%ebp)
f0107a46:	e8 bc ff ff ff       	call   f0107a07 <to_frame_number>
f0107a4b:	83 c4 04             	add    $0x4,%esp
f0107a4e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107a51:	c9                   	leave  
f0107a52:	c3                   	ret    

f0107a53 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107a53:	55                   	push   %ebp
f0107a54:	89 e5                	mov    %esp,%ebp
f0107a56:	53                   	push   %ebx
f0107a57:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a5d:	c1 e8 0c             	shr    $0xc,%eax
f0107a60:	89 c2                	mov    %eax,%edx
f0107a62:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0107a67:	39 c2                	cmp    %eax,%edx
f0107a69:	72 14                	jb     f0107a7f <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a6b:	83 ec 04             	sub    $0x4,%esp
f0107a6e:	68 00 29 13 f0       	push   $0xf0132900
f0107a73:	6a 55                	push   $0x55
f0107a75:	68 25 29 13 f0       	push   $0xf0132925
f0107a7a:	e8 31 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a7f:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a88:	c1 e8 0c             	shr    $0xc,%eax
f0107a8b:	89 c2                	mov    %eax,%edx
f0107a8d:	89 d0                	mov    %edx,%eax
f0107a8f:	01 c0                	add    %eax,%eax
f0107a91:	01 d0                	add    %edx,%eax
f0107a93:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a9a:	01 d8                	add    %ebx,%eax
f0107a9c:	01 d0                	add    %edx,%eax
f0107a9e:	01 c8                	add    %ecx,%eax
}
f0107aa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107aa3:	c9                   	leave  
f0107aa4:	c3                   	ret    

f0107aa5 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107aa5:	55                   	push   %ebp
f0107aa6:	89 e5                	mov    %esp,%ebp
f0107aa8:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107ab2:	eb 5f                	jmp    f0107b13 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107ab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ab7:	89 d0                	mov    %edx,%eax
f0107ab9:	01 c0                	add    %eax,%eax
f0107abb:	01 d0                	add    %edx,%eax
f0107abd:	01 c0                	add    %eax,%eax
f0107abf:	01 d0                	add    %edx,%eax
f0107ac1:	c1 e0 02             	shl    $0x2,%eax
f0107ac4:	01 d0                	add    %edx,%eax
f0107ac6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107acd:	01 d0                	add    %edx,%eax
f0107acf:	c1 e0 04             	shl    $0x4,%eax
f0107ad2:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107ad7:	83 ec 04             	sub    $0x4,%esp
f0107ada:	68 50 10 00 00       	push   $0x1050
f0107adf:	6a 00                	push   $0x0
f0107ae1:	50                   	push   %eax
f0107ae2:	e8 07 77 02 00       	call   f012f1ee <memset>
f0107ae7:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107aed:	89 d0                	mov    %edx,%eax
f0107aef:	01 c0                	add    %eax,%eax
f0107af1:	01 d0                	add    %edx,%eax
f0107af3:	01 c0                	add    %eax,%eax
f0107af5:	01 d0                	add    %edx,%eax
f0107af7:	c1 e0 02             	shl    $0x2,%eax
f0107afa:	01 d0                	add    %edx,%eax
f0107afc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b03:	01 d0                	add    %edx,%eax
f0107b05:	c1 e0 04             	shl    $0x4,%eax
f0107b08:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107b0d:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b10:	ff 45 f4             	incl   -0xc(%ebp)
f0107b13:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107b17:	7e 9b                	jle    f0107ab4 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107b19:	90                   	nop
f0107b1a:	c9                   	leave  
f0107b1b:	c3                   	ret    

f0107b1c <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107b1c:	55                   	push   %ebp
f0107b1d:	89 e5                	mov    %esp,%ebp
f0107b1f:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107b22:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107b30:	eb 34                	jmp    f0107b66 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107b32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b35:	89 d0                	mov    %edx,%eax
f0107b37:	01 c0                	add    %eax,%eax
f0107b39:	01 d0                	add    %edx,%eax
f0107b3b:	01 c0                	add    %eax,%eax
f0107b3d:	01 d0                	add    %edx,%eax
f0107b3f:	c1 e0 02             	shl    $0x2,%eax
f0107b42:	01 d0                	add    %edx,%eax
f0107b44:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b4b:	01 d0                	add    %edx,%eax
f0107b4d:	c1 e0 04             	shl    $0x4,%eax
f0107b50:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107b55:	8a 00                	mov    (%eax),%al
f0107b57:	84 c0                	test   %al,%al
f0107b59:	74 08                	je     f0107b63 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b61:	eb 09                	jmp    f0107b6c <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b63:	ff 45 f0             	incl   -0x10(%ebp)
f0107b66:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b6a:	7e c6                	jle    f0107b32 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b6c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b70:	75 0a                	jne    f0107b7c <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b72:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b77:	e9 8b 00 00 00       	jmp    f0107c07 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b7f:	89 d0                	mov    %edx,%eax
f0107b81:	01 c0                	add    %eax,%eax
f0107b83:	01 d0                	add    %edx,%eax
f0107b85:	01 c0                	add    %eax,%eax
f0107b87:	01 d0                	add    %edx,%eax
f0107b89:	c1 e0 02             	shl    $0x2,%eax
f0107b8c:	01 d0                	add    %edx,%eax
f0107b8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b95:	01 d0                	add    %edx,%eax
f0107b97:	c1 e0 04             	shl    $0x4,%eax
f0107b9a:	8d 90 80 3a 25 f0    	lea    -0xfdac580(%eax),%edx
f0107ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ba3:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107ba5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ba8:	89 d0                	mov    %edx,%eax
f0107baa:	01 c0                	add    %eax,%eax
f0107bac:	01 d0                	add    %edx,%eax
f0107bae:	01 c0                	add    %eax,%eax
f0107bb0:	01 d0                	add    %edx,%eax
f0107bb2:	c1 e0 02             	shl    $0x2,%eax
f0107bb5:	01 d0                	add    %edx,%eax
f0107bb7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bbe:	01 d0                	add    %edx,%eax
f0107bc0:	c1 e0 04             	shl    $0x4,%eax
f0107bc3:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107bc8:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bce:	89 d0                	mov    %edx,%eax
f0107bd0:	01 c0                	add    %eax,%eax
f0107bd2:	01 d0                	add    %edx,%eax
f0107bd4:	01 c0                	add    %eax,%eax
f0107bd6:	01 d0                	add    %edx,%eax
f0107bd8:	c1 e0 02             	shl    $0x2,%eax
f0107bdb:	01 d0                	add    %edx,%eax
f0107bdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107be4:	01 d0                	add    %edx,%eax
f0107be6:	c1 e0 04             	shl    $0x4,%eax
f0107be9:	83 c0 50             	add    $0x50,%eax
f0107bec:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107bf1:	83 ec 04             	sub    $0x4,%esp
f0107bf4:	68 00 10 00 00       	push   $0x1000
f0107bf9:	6a 00                	push   $0x0
f0107bfb:	50                   	push   %eax
f0107bfc:	e8 ed 75 02 00       	call   f012f1ee <memset>
f0107c01:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107c07:	c9                   	leave  
f0107c08:	c3                   	ret    

f0107c09 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107c09:	55                   	push   %ebp
f0107c0a:	89 e5                	mov    %esp,%ebp
f0107c0c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107c0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107c16:	e9 95 00 00 00       	jmp    f0107cb0 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107c1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c1e:	89 d0                	mov    %edx,%eax
f0107c20:	01 c0                	add    %eax,%eax
f0107c22:	01 d0                	add    %edx,%eax
f0107c24:	01 c0                	add    %eax,%eax
f0107c26:	01 d0                	add    %edx,%eax
f0107c28:	c1 e0 02             	shl    $0x2,%eax
f0107c2b:	01 d0                	add    %edx,%eax
f0107c2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c34:	01 d0                	add    %edx,%eax
f0107c36:	c1 e0 04             	shl    $0x4,%eax
f0107c39:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107c3e:	8a 00                	mov    (%eax),%al
f0107c40:	84 c0                	test   %al,%al
f0107c42:	75 68                	jne    f0107cac <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107c44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c47:	89 d0                	mov    %edx,%eax
f0107c49:	01 c0                	add    %eax,%eax
f0107c4b:	01 d0                	add    %edx,%eax
f0107c4d:	01 c0                	add    %eax,%eax
f0107c4f:	01 d0                	add    %edx,%eax
f0107c51:	c1 e0 02             	shl    $0x2,%eax
f0107c54:	01 d0                	add    %edx,%eax
f0107c56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c5d:	01 d0                	add    %edx,%eax
f0107c5f:	c1 e0 04             	shl    $0x4,%eax
f0107c62:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107c67:	8b 00                	mov    (%eax),%eax
f0107c69:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c6c:	75 3f                	jne    f0107cad <get_share_object_ID+0xa4>
f0107c6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c71:	89 d0                	mov    %edx,%eax
f0107c73:	01 c0                	add    %eax,%eax
f0107c75:	01 d0                	add    %edx,%eax
f0107c77:	01 c0                	add    %eax,%eax
f0107c79:	01 d0                	add    %edx,%eax
f0107c7b:	c1 e0 02             	shl    $0x2,%eax
f0107c7e:	01 d0                	add    %edx,%eax
f0107c80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c87:	01 d0                	add    %edx,%eax
f0107c89:	c1 e0 04             	shl    $0x4,%eax
f0107c8c:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107c91:	83 c0 04             	add    $0x4,%eax
f0107c94:	83 ec 08             	sub    $0x8,%esp
f0107c97:	50                   	push   %eax
f0107c98:	ff 75 0c             	pushl  0xc(%ebp)
f0107c9b:	e8 6c 74 02 00       	call   f012f10c <strcmp>
f0107ca0:	83 c4 10             	add    $0x10,%esp
f0107ca3:	85 c0                	test   %eax,%eax
f0107ca5:	75 06                	jne    f0107cad <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107caa:	eb 13                	jmp    f0107cbf <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107cac:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107cad:	ff 45 f4             	incl   -0xc(%ebp)
f0107cb0:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107cb4:	0f 8e 61 ff ff ff    	jle    f0107c1b <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107cba:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107cbf:	c9                   	leave  
f0107cc0:	c3                   	ret    

f0107cc1 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107cc1:	55                   	push   %ebp
f0107cc2:	89 e5                	mov    %esp,%ebp
f0107cc4:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107cc7:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107ccb:	76 0a                	jbe    f0107cd7 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107ccd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107cd2:	e9 93 00 00 00       	jmp    f0107d6a <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107cd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cda:	89 d0                	mov    %edx,%eax
f0107cdc:	01 c0                	add    %eax,%eax
f0107cde:	01 d0                	add    %edx,%eax
f0107ce0:	01 c0                	add    %eax,%eax
f0107ce2:	01 d0                	add    %edx,%eax
f0107ce4:	c1 e0 02             	shl    $0x2,%eax
f0107ce7:	01 d0                	add    %edx,%eax
f0107ce9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cf0:	01 d0                	add    %edx,%eax
f0107cf2:	c1 e0 04             	shl    $0x4,%eax
f0107cf5:	83 c0 50             	add    $0x50,%eax
f0107cf8:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107cfd:	83 ec 0c             	sub    $0xc,%esp
f0107d00:	50                   	push   %eax
f0107d01:	e8 3e 01 00 00       	call   f0107e44 <clear_frames_storage>
f0107d06:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107d09:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	01 c0                	add    %eax,%eax
f0107d14:	01 d0                	add    %edx,%eax
f0107d16:	c1 e0 02             	shl    $0x2,%eax
f0107d19:	01 d0                	add    %edx,%eax
f0107d1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d22:	01 d0                	add    %edx,%eax
f0107d24:	c1 e0 04             	shl    $0x4,%eax
f0107d27:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107d2c:	83 ec 04             	sub    $0x4,%esp
f0107d2f:	68 50 10 00 00       	push   $0x1050
f0107d34:	6a 00                	push   $0x0
f0107d36:	50                   	push   %eax
f0107d37:	e8 b2 74 02 00       	call   f012f1ee <memset>
f0107d3c:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107d3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d42:	89 d0                	mov    %edx,%eax
f0107d44:	01 c0                	add    %eax,%eax
f0107d46:	01 d0                	add    %edx,%eax
f0107d48:	01 c0                	add    %eax,%eax
f0107d4a:	01 d0                	add    %edx,%eax
f0107d4c:	c1 e0 02             	shl    $0x2,%eax
f0107d4f:	01 d0                	add    %edx,%eax
f0107d51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d58:	01 d0                	add    %edx,%eax
f0107d5a:	c1 e0 04             	shl    $0x4,%eax
f0107d5d:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107d62:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d6a:	c9                   	leave  
f0107d6b:	c3                   	ret    

f0107d6c <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d6c:	55                   	push   %ebp
f0107d6d:	89 e5                	mov    %esp,%ebp
f0107d6f:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d72:	83 ec 0c             	sub    $0xc,%esp
f0107d75:	68 00 10 00 00       	push   $0x1000
f0107d7a:	e8 e0 01 00 00       	call   f0107f5f <kmalloc>
f0107d7f:	83 c4 10             	add    $0x10,%esp
f0107d82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d89:	75 17                	jne    f0107da2 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d8b:	83 ec 04             	sub    $0x4,%esp
f0107d8e:	68 3f 29 13 f0       	push   $0xf013293f
f0107d93:	68 a6 00 00 00       	push   $0xa6
f0107d98:	68 5c 29 13 f0       	push   $0xf013295c
f0107d9d:	e8 0e 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107da5:	c9                   	leave  
f0107da6:	c3                   	ret    

f0107da7 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107da7:	55                   	push   %ebp
f0107da8:	89 e5                	mov    %esp,%ebp
f0107daa:	53                   	push   %ebx
f0107dab:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107dae:	8b 45 10             	mov    0x10(%ebp),%eax
f0107db1:	c1 e0 0c             	shl    $0xc,%eax
f0107db4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107db7:	83 ec 04             	sub    $0x4,%esp
f0107dba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dbd:	50                   	push   %eax
f0107dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dc1:	ff 75 08             	pushl  0x8(%ebp)
f0107dc4:	e8 1e f7 ff ff       	call   f01074e7 <get_page_table>
f0107dc9:	83 c4 10             	add    $0x10,%esp
f0107dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107dcf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107dd3:	75 15                	jne    f0107dea <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107dd5:	83 ec 04             	sub    $0x4,%esp
f0107dd8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107ddb:	50                   	push   %eax
f0107ddc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ddf:	ff 75 08             	pushl  0x8(%ebp)
f0107de2:	e8 26 f8 ff ff       	call   f010760d <__static_cpt>
f0107de7:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ded:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107df0:	c1 ea 0c             	shr    $0xc,%edx
f0107df3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107df9:	c1 e2 02             	shl    $0x2,%edx
f0107dfc:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107dff:	83 ec 0c             	sub    $0xc,%esp
f0107e02:	ff 75 0c             	pushl  0xc(%ebp)
f0107e05:	e8 36 fc ff ff       	call   f0107a40 <to_physical_address>
f0107e0a:	83 c4 10             	add    $0x10,%esp
f0107e0d:	83 c8 01             	or     $0x1,%eax
f0107e10:	89 03                	mov    %eax,(%ebx)
}
f0107e12:	90                   	nop
f0107e13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e16:	c9                   	leave  
f0107e17:	c3                   	ret    

f0107e18 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107e18:	55                   	push   %ebp
f0107e19:	89 e5                	mov    %esp,%ebp
f0107e1b:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e21:	c1 e0 0c             	shl    $0xc,%eax
f0107e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107e27:	83 ec 04             	sub    $0x4,%esp
f0107e2a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e2d:	50                   	push   %eax
f0107e2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e31:	ff 75 08             	pushl  0x8(%ebp)
f0107e34:	e8 46 f9 ff ff       	call   f010777f <get_frame_info>
f0107e39:	83 c4 10             	add    $0x10,%esp
f0107e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107e42:	c9                   	leave  
f0107e43:	c3                   	ret    

f0107e44 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107e44:	55                   	push   %ebp
f0107e45:	89 e5                	mov    %esp,%ebp
f0107e47:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107e4a:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107e58:	eb 5b                	jmp    f0107eb5 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e67:	01 d0                	add    %edx,%eax
f0107e69:	8b 00                	mov    (%eax),%eax
f0107e6b:	85 c0                	test   %eax,%eax
f0107e6d:	74 43                	je     f0107eb2 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e7c:	01 d0                	add    %edx,%eax
f0107e7e:	8b 00                	mov    (%eax),%eax
f0107e80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e85:	83 ec 0c             	sub    $0xc,%esp
f0107e88:	50                   	push   %eax
f0107e89:	e8 c5 fb ff ff       	call   f0107a53 <to_frame_info>
f0107e8e:	83 c4 10             	add    $0x10,%esp
f0107e91:	83 ec 0c             	sub    $0xc,%esp
f0107e94:	50                   	push   %eax
f0107e95:	e8 a3 f5 ff ff       	call   f010743d <free_frame>
f0107e9a:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107eaa:	01 d0                	add    %edx,%eax
f0107eac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107eb2:	ff 45 f4             	incl   -0xc(%ebp)
f0107eb5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107ebc:	7e 9c                	jle    f0107e5a <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107ebe:	90                   	nop
f0107ebf:	c9                   	leave  
f0107ec0:	c3                   	ret    

f0107ec1 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107ec1:	55                   	push   %ebp
f0107ec2:	89 e5                	mov    %esp,%ebp
f0107ec4:	83 ec 18             	sub    $0x18,%esp
f0107ec7:	8b 45 14             	mov    0x14(%ebp),%eax
f0107eca:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107ecd:	83 ec 04             	sub    $0x4,%esp
f0107ed0:	68 80 29 13 f0       	push   $0xf0132980
f0107ed5:	68 f6 00 00 00       	push   $0xf6
f0107eda:	68 5c 29 13 f0       	push   $0xf013295c
f0107edf:	e8 cc 82 ff ff       	call   f01001b0 <_panic>

f0107ee4 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107ee4:	55                   	push   %ebp
f0107ee5:	89 e5                	mov    %esp,%ebp
f0107ee7:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107eea:	83 ec 04             	sub    $0x4,%esp
f0107eed:	68 b4 29 13 f0       	push   $0xf01329b4
f0107ef2:	68 02 01 00 00       	push   $0x102
f0107ef7:	68 5c 29 13 f0       	push   $0xf013295c
f0107efc:	e8 af 82 ff ff       	call   f01001b0 <_panic>

f0107f01 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107f01:	55                   	push   %ebp
f0107f02:	89 e5                	mov    %esp,%ebp
f0107f04:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 e8 29 13 f0       	push   $0xf01329e8
f0107f0f:	68 0c 01 00 00       	push   $0x10c
f0107f14:	68 5c 29 13 f0       	push   $0xf013295c
f0107f19:	e8 92 82 ff ff       	call   f01001b0 <_panic>

f0107f1e <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107f1e:	55                   	push   %ebp
f0107f1f:	89 e5                	mov    %esp,%ebp
f0107f21:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107f24:	83 ec 04             	sub    $0x4,%esp
f0107f27:	68 18 2a 13 f0       	push   $0xf0132a18
f0107f2c:	68 1b 01 00 00       	push   $0x11b
f0107f31:	68 5c 29 13 f0       	push   $0xf013295c
f0107f36:	e8 75 82 ff ff       	call   f01001b0 <_panic>

f0107f3b <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107f3b:	55                   	push   %ebp
f0107f3c:	89 e5                	mov    %esp,%ebp
f0107f3e:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107f41:	83 ec 04             	sub    $0x4,%esp
f0107f44:	68 48 2a 13 f0       	push   $0xf0132a48
f0107f49:	6a 13                	push   $0x13
f0107f4b:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107f50:	e8 5b 82 ff ff       	call   f01001b0 <_panic>

f0107f55 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107f55:	55                   	push   %ebp
f0107f56:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107f58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107f5d:	5d                   	pop    %ebp
f0107f5e:	c3                   	ret    

f0107f5f <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107f5f:	55                   	push   %ebp
f0107f60:	89 e5                	mov    %esp,%ebp
f0107f62:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107f65:	83 ec 04             	sub    $0x4,%esp
f0107f68:	68 70 2a 13 f0       	push   $0xf0132a70
f0107f6d:	6a 36                	push   $0x36
f0107f6f:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107f74:	e8 94 83 ff ff       	call   f010030d <_panic_into_prompt>

f0107f79 <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107f79:	55                   	push   %ebp
f0107f7a:	89 e5                	mov    %esp,%ebp
f0107f7c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107f7f:	83 ec 04             	sub    $0x4,%esp
f0107f82:	68 98 2a 13 f0       	push   $0xf0132a98
f0107f87:	6a 3f                	push   $0x3f
f0107f89:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107f8e:	e8 1d 82 ff ff       	call   f01001b0 <_panic>

f0107f93 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107f93:	55                   	push   %ebp
f0107f94:	89 e5                	mov    %esp,%ebp
f0107f96:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107f99:	83 ec 04             	sub    $0x4,%esp
f0107f9c:	68 bc 2a 13 f0       	push   $0xf0132abc
f0107fa1:	6a 47                	push   $0x47
f0107fa3:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107fa8:	e8 03 82 ff ff       	call   f01001b0 <_panic>

f0107fad <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107fad:	55                   	push   %ebp
f0107fae:	89 e5                	mov    %esp,%ebp
f0107fb0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107fb3:	83 ec 04             	sub    $0x4,%esp
f0107fb6:	68 f0 2a 13 f0       	push   $0xf0132af0
f0107fbb:	6a 54                	push   $0x54
f0107fbd:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107fc2:	e8 e9 81 ff ff       	call   f01001b0 <_panic>

f0107fc7 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107fc7:	55                   	push   %ebp
f0107fc8:	89 e5                	mov    %esp,%ebp
f0107fca:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fcd:	83 ec 04             	sub    $0x4,%esp
f0107fd0:	68 25 2b 13 f0       	push   $0xf0132b25
f0107fd5:	6a 5d                	push   $0x5d
f0107fd7:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107fdc:	e8 cf 81 ff ff       	call   f01001b0 <_panic>

f0107fe1 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107fe1:	55                   	push   %ebp
f0107fe2:	89 e5                	mov    %esp,%ebp
f0107fe4:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fe7:	83 ec 04             	sub    $0x4,%esp
f0107fea:	68 25 2b 13 f0       	push   $0xf0132b25
f0107fef:	6a 63                	push   $0x63
f0107ff1:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0107ff6:	e8 b5 81 ff ff       	call   f01001b0 <_panic>

f0107ffb <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107ffb:	55                   	push   %ebp
f0107ffc:	89 e5                	mov    %esp,%ebp
f0107ffe:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108001:	83 ec 04             	sub    $0x4,%esp
f0108004:	68 25 2b 13 f0       	push   $0xf0132b25
f0108009:	6a 68                	push   $0x68
f010800b:	68 5c 2a 13 f0       	push   $0xf0132a5c
f0108010:	e8 9b 81 ff ff       	call   f01001b0 <_panic>

f0108015 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108015:	55                   	push   %ebp
f0108016:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0108018:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f010801d:	5d                   	pop    %ebp
f010801e:	c3                   	ret    

f010801f <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f010801f:	55                   	push   %ebp
f0108020:	89 e5                	mov    %esp,%ebp
f0108022:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108025:	83 ec 04             	sub    $0x4,%esp
f0108028:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010802b:	50                   	push   %eax
f010802c:	ff 75 0c             	pushl  0xc(%ebp)
f010802f:	ff 75 08             	pushl  0x8(%ebp)
f0108032:	e8 b0 f4 ff ff       	call   f01074e7 <get_page_table>
f0108037:	83 c4 10             	add    $0x10,%esp
f010803a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010803d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108040:	85 c0                	test   %eax,%eax
f0108042:	74 64                	je     f01080a8 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108044:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108047:	8b 55 0c             	mov    0xc(%ebp),%edx
f010804a:	c1 ea 0c             	shr    $0xc,%edx
f010804d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108053:	c1 e2 02             	shl    $0x2,%edx
f0108056:	01 c2                	add    %eax,%edx
f0108058:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010805b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010805e:	c1 e9 0c             	shr    $0xc,%ecx
f0108061:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108067:	c1 e1 02             	shl    $0x2,%ecx
f010806a:	01 c8                	add    %ecx,%eax
f010806c:	8b 00                	mov    (%eax),%eax
f010806e:	0b 45 10             	or     0x10(%ebp),%eax
f0108071:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108073:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108076:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108079:	c1 ea 0c             	shr    $0xc,%edx
f010807c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108082:	c1 e2 02             	shl    $0x2,%edx
f0108085:	01 d0                	add    %edx,%eax
f0108087:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010808a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010808d:	c1 e9 0c             	shr    $0xc,%ecx
f0108090:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108096:	c1 e1 02             	shl    $0x2,%ecx
f0108099:	01 ca                	add    %ecx,%edx
f010809b:	8b 12                	mov    (%edx),%edx
f010809d:	8b 4d 14             	mov    0x14(%ebp),%ecx
f01080a0:	f7 d1                	not    %ecx
f01080a2:	21 ca                	and    %ecx,%edx
f01080a4:	89 10                	mov    %edx,(%eax)
f01080a6:	eb 27                	jmp    f01080cf <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f01080a8:	83 ec 08             	sub    $0x8,%esp
f01080ab:	ff 75 0c             	pushl  0xc(%ebp)
f01080ae:	68 38 2b 13 f0       	push   $0xf0132b38
f01080b3:	e8 79 8d ff ff       	call   f0100e31 <cprintf>
f01080b8:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f01080bb:	83 ec 04             	sub    $0x4,%esp
f01080be:	68 60 2b 13 f0       	push   $0xf0132b60
f01080c3:	6a 1c                	push   $0x1c
f01080c5:	68 d4 2b 13 f0       	push   $0xf0132bd4
f01080ca:	e8 e1 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080d2:	83 ec 08             	sub    $0x8,%esp
f01080d5:	50                   	push   %eax
f01080d6:	6a 00                	push   $0x0
f01080d8:	e8 e1 ed ff ff       	call   f0106ebe <tlb_invalidate>
f01080dd:	83 c4 10             	add    $0x10,%esp
}
f01080e0:	90                   	nop
f01080e1:	c9                   	leave  
f01080e2:	c3                   	ret    

f01080e3 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01080e3:	55                   	push   %ebp
f01080e4:	89 e5                	mov    %esp,%ebp
f01080e6:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01080e9:	83 ec 04             	sub    $0x4,%esp
f01080ec:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01080ef:	50                   	push   %eax
f01080f0:	ff 75 0c             	pushl  0xc(%ebp)
f01080f3:	ff 75 08             	pushl  0x8(%ebp)
f01080f6:	e8 ec f3 ff ff       	call   f01074e7 <get_page_table>
f01080fb:	83 c4 10             	add    $0x10,%esp
f01080fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108101:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108104:	85 c0                	test   %eax,%eax
f0108106:	74 1d                	je     f0108125 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108108:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010810b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010810e:	c1 ea 0c             	shr    $0xc,%edx
f0108111:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108117:	c1 e2 02             	shl    $0x2,%edx
f010811a:	01 d0                	add    %edx,%eax
f010811c:	8b 00                	mov    (%eax),%eax
f010811e:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108123:	eb 05                	jmp    f010812a <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108125:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010812a:	c9                   	leave  
f010812b:	c3                   	ret    

f010812c <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f010812c:	55                   	push   %ebp
f010812d:	89 e5                	mov    %esp,%ebp
f010812f:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108132:	83 ec 04             	sub    $0x4,%esp
f0108135:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108138:	50                   	push   %eax
f0108139:	ff 75 0c             	pushl  0xc(%ebp)
f010813c:	ff 75 08             	pushl  0x8(%ebp)
f010813f:	e8 a3 f3 ff ff       	call   f01074e7 <get_page_table>
f0108144:	83 c4 10             	add    $0x10,%esp
f0108147:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010814a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010814d:	85 c0                	test   %eax,%eax
f010814f:	74 46                	je     f0108197 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108151:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108154:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108157:	c1 ea 0c             	shr    $0xc,%edx
f010815a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108160:	c1 e2 02             	shl    $0x2,%edx
f0108163:	01 d0                	add    %edx,%eax
f0108165:	8b 00                	mov    (%eax),%eax
f0108167:	83 ec 04             	sub    $0x4,%esp
f010816a:	50                   	push   %eax
f010816b:	ff 75 0c             	pushl  0xc(%ebp)
f010816e:	68 f0 2b 13 f0       	push   $0xf0132bf0
f0108173:	e8 b9 8c ff ff       	call   f0100e31 <cprintf>
f0108178:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010817b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108181:	c1 ea 0c             	shr    $0xc,%edx
f0108184:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010818a:	c1 e2 02             	shl    $0x2,%edx
f010818d:	01 d0                	add    %edx,%eax
f010818f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108195:	eb 14                	jmp    f01081ab <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108197:	83 ec 04             	sub    $0x4,%esp
f010819a:	68 18 2c 13 f0       	push   $0xf0132c18
f010819f:	6a 47                	push   $0x47
f01081a1:	68 d4 2b 13 f0       	push   $0xf0132bd4
f01081a6:	e8 05 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01081ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ae:	83 ec 08             	sub    $0x8,%esp
f01081b1:	50                   	push   %eax
f01081b2:	6a 00                	push   $0x0
f01081b4:	e8 05 ed ff ff       	call   f0106ebe <tlb_invalidate>
f01081b9:	83 c4 10             	add    $0x10,%esp
}
f01081bc:	90                   	nop
f01081bd:	c9                   	leave  
f01081be:	c3                   	ret    

f01081bf <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01081bf:	55                   	push   %ebp
f01081c0:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01081c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081c5:	c1 e8 16             	shr    $0x16,%eax
f01081c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01081d2:	01 d0                	add    %edx,%eax
f01081d4:	8b 00                	mov    (%eax),%eax
f01081d6:	83 e0 20             	and    $0x20,%eax
f01081d9:	85 c0                	test   %eax,%eax
f01081db:	0f 95 c0             	setne  %al
f01081de:	0f b6 c0             	movzbl %al,%eax
}
f01081e1:	5d                   	pop    %ebp
f01081e2:	c3                   	ret    

f01081e3 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01081e3:	55                   	push   %ebp
f01081e4:	89 e5                	mov    %esp,%ebp
f01081e6:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01081e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ec:	c1 e8 16             	shr    $0x16,%eax
f01081ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081f9:	01 d0                	add    %edx,%eax
f01081fb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081fe:	c1 ea 16             	shr    $0x16,%edx
f0108201:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108208:	8b 55 08             	mov    0x8(%ebp),%edx
f010820b:	01 ca                	add    %ecx,%edx
f010820d:	8b 12                	mov    (%edx),%edx
f010820f:	83 e2 df             	and    $0xffffffdf,%edx
f0108212:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108214:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108217:	83 ec 08             	sub    $0x8,%esp
f010821a:	50                   	push   %eax
f010821b:	6a 00                	push   $0x0
f010821d:	e8 9c ec ff ff       	call   f0106ebe <tlb_invalidate>
f0108222:	83 c4 10             	add    $0x10,%esp
}
f0108225:	90                   	nop
f0108226:	c9                   	leave  
f0108227:	c3                   	ret    

f0108228 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108228:	55                   	push   %ebp
f0108229:	89 e5                	mov    %esp,%ebp
f010822b:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f010822e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108231:	c1 e8 16             	shr    $0x16,%eax
f0108234:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010823b:	8b 45 08             	mov    0x8(%ebp),%eax
f010823e:	01 d0                	add    %edx,%eax
f0108240:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108246:	0f 20 d8             	mov    %cr3,%eax
f0108249:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010824c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010824f:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108252:	90                   	nop
f0108253:	c9                   	leave  
f0108254:	c3                   	ret    

f0108255 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108255:	55                   	push   %ebp
f0108256:	89 e5                	mov    %esp,%ebp
f0108258:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010825b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108262:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108269:	eb 22                	jmp    f010828d <env_page_ws_get_size+0x38>
f010826b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010826e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108271:	89 d0                	mov    %edx,%eax
f0108273:	01 c0                	add    %eax,%eax
f0108275:	01 d0                	add    %edx,%eax
f0108277:	c1 e0 03             	shl    $0x3,%eax
f010827a:	01 c8                	add    %ecx,%eax
f010827c:	05 bc 00 00 00       	add    $0xbc,%eax
f0108281:	8a 00                	mov    (%eax),%al
f0108283:	84 c0                	test   %al,%al
f0108285:	75 03                	jne    f010828a <env_page_ws_get_size+0x35>
f0108287:	ff 45 f8             	incl   -0x8(%ebp)
f010828a:	ff 45 fc             	incl   -0x4(%ebp)
f010828d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108290:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108296:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108299:	39 c2                	cmp    %eax,%edx
f010829b:	77 ce                	ja     f010826b <env_page_ws_get_size+0x16>
	return counter;
f010829d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01082a0:	c9                   	leave  
f01082a1:	c3                   	ret    

f01082a2 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01082a2:	55                   	push   %ebp
f01082a3:	89 e5                	mov    %esp,%ebp
f01082a5:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01082a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01082af:	eb 4e                	jmp    f01082ff <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f01082b1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01082b7:	89 d0                	mov    %edx,%eax
f01082b9:	01 c0                	add    %eax,%eax
f01082bb:	01 d0                	add    %edx,%eax
f01082bd:	c1 e0 03             	shl    $0x3,%eax
f01082c0:	01 c8                	add    %ecx,%eax
f01082c2:	05 b8 00 00 00       	add    $0xb8,%eax
f01082c7:	8b 00                	mov    (%eax),%eax
f01082c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082cf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082d4:	89 c2                	mov    %eax,%edx
f01082d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01082dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01082df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082e4:	39 c2                	cmp    %eax,%edx
f01082e6:	75 14                	jne    f01082fc <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f01082e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082eb:	83 ec 08             	sub    $0x8,%esp
f01082ee:	50                   	push   %eax
f01082ef:	ff 75 08             	pushl  0x8(%ebp)
f01082f2:	e8 c8 00 00 00       	call   f01083bf <env_page_ws_clear_entry>
f01082f7:	83 c4 10             	add    $0x10,%esp
			break;
f01082fa:	eb 13                	jmp    f010830f <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01082fc:	ff 45 f4             	incl   -0xc(%ebp)
f01082ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108302:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108308:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010830b:	39 c2                	cmp    %eax,%edx
f010830d:	77 a2                	ja     f01082b1 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f010830f:	90                   	nop
f0108310:	c9                   	leave  
f0108311:	c3                   	ret    

f0108312 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108312:	55                   	push   %ebp
f0108313:	89 e5                	mov    %esp,%ebp
f0108315:	53                   	push   %ebx
f0108316:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108319:	8b 45 08             	mov    0x8(%ebp),%eax
f010831c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108322:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108325:	77 16                	ja     f010833d <env_page_ws_set_entry+0x2b>
f0108327:	68 90 2c 13 f0       	push   $0xf0132c90
f010832c:	68 c6 2c 13 f0       	push   $0xf0132cc6
f0108331:	6a 77                	push   $0x77
f0108333:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108338:	e8 73 7e ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010833d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108344:	76 16                	jbe    f010835c <env_page_ws_set_entry+0x4a>
f0108346:	68 fc 2c 13 f0       	push   $0xf0132cfc
f010834b:	68 c6 2c 13 f0       	push   $0xf0132cc6
f0108350:	6a 78                	push   $0x78
f0108352:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108357:	e8 54 7e ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010835c:	8b 45 10             	mov    0x10(%ebp),%eax
f010835f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108365:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010836a:	89 c1                	mov    %eax,%ecx
f010836c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010836f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108372:	89 d0                	mov    %edx,%eax
f0108374:	01 c0                	add    %eax,%eax
f0108376:	01 d0                	add    %edx,%eax
f0108378:	c1 e0 03             	shl    $0x3,%eax
f010837b:	01 d8                	add    %ebx,%eax
f010837d:	05 b8 00 00 00       	add    $0xb8,%eax
f0108382:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108384:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108387:	8b 55 0c             	mov    0xc(%ebp),%edx
f010838a:	89 d0                	mov    %edx,%eax
f010838c:	01 c0                	add    %eax,%eax
f010838e:	01 d0                	add    %edx,%eax
f0108390:	c1 e0 03             	shl    $0x3,%eax
f0108393:	01 c8                	add    %ecx,%eax
f0108395:	05 bc 00 00 00       	add    $0xbc,%eax
f010839a:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010839d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083a3:	89 d0                	mov    %edx,%eax
f01083a5:	01 c0                	add    %eax,%eax
f01083a7:	01 d0                	add    %edx,%eax
f01083a9:	c1 e0 03             	shl    $0x3,%eax
f01083ac:	01 c8                	add    %ecx,%eax
f01083ae:	05 c0 00 00 00       	add    $0xc0,%eax
f01083b3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f01083b9:	90                   	nop
}
f01083ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01083bd:	c9                   	leave  
f01083be:	c3                   	ret    

f01083bf <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01083bf:	55                   	push   %ebp
f01083c0:	89 e5                	mov    %esp,%ebp
f01083c2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01083c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083d1:	77 19                	ja     f01083ec <env_page_ws_clear_entry+0x2d>
f01083d3:	68 30 2d 13 f0       	push   $0xf0132d30
f01083d8:	68 c6 2c 13 f0       	push   $0xf0132cc6
f01083dd:	68 83 00 00 00       	push   $0x83
f01083e2:	68 dc 2c 13 f0       	push   $0xf0132cdc
f01083e7:	e8 c4 7d ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01083ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ef:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083f2:	89 d0                	mov    %edx,%eax
f01083f4:	01 c0                	add    %eax,%eax
f01083f6:	01 d0                	add    %edx,%eax
f01083f8:	c1 e0 03             	shl    $0x3,%eax
f01083fb:	01 c8                	add    %ecx,%eax
f01083fd:	05 b8 00 00 00       	add    $0xb8,%eax
f0108402:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108408:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010840b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010840e:	89 d0                	mov    %edx,%eax
f0108410:	01 c0                	add    %eax,%eax
f0108412:	01 d0                	add    %edx,%eax
f0108414:	c1 e0 03             	shl    $0x3,%eax
f0108417:	01 c8                	add    %ecx,%eax
f0108419:	05 bc 00 00 00       	add    $0xbc,%eax
f010841e:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108421:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108424:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108427:	89 d0                	mov    %edx,%eax
f0108429:	01 c0                	add    %eax,%eax
f010842b:	01 d0                	add    %edx,%eax
f010842d:	c1 e0 03             	shl    $0x3,%eax
f0108430:	01 c8                	add    %ecx,%eax
f0108432:	05 c0 00 00 00       	add    $0xc0,%eax
f0108437:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010843d:	90                   	nop
f010843e:	c9                   	leave  
f010843f:	c3                   	ret    

f0108440 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108440:	55                   	push   %ebp
f0108441:	89 e5                	mov    %esp,%ebp
f0108443:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108446:	8b 45 08             	mov    0x8(%ebp),%eax
f0108449:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010844f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108452:	77 19                	ja     f010846d <env_page_ws_get_virtual_address+0x2d>
f0108454:	68 30 2d 13 f0       	push   $0xf0132d30
f0108459:	68 c6 2c 13 f0       	push   $0xf0132cc6
f010845e:	68 8b 00 00 00       	push   $0x8b
f0108463:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108468:	e8 43 7d ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010846d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108470:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108473:	89 d0                	mov    %edx,%eax
f0108475:	01 c0                	add    %eax,%eax
f0108477:	01 d0                	add    %edx,%eax
f0108479:	c1 e0 03             	shl    $0x3,%eax
f010847c:	01 c8                	add    %ecx,%eax
f010847e:	05 b8 00 00 00       	add    $0xb8,%eax
f0108483:	8b 00                	mov    (%eax),%eax
f0108485:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010848b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108490:	c9                   	leave  
f0108491:	c3                   	ret    

f0108492 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108492:	55                   	push   %ebp
f0108493:	89 e5                	mov    %esp,%ebp
f0108495:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108498:	8b 45 08             	mov    0x8(%ebp),%eax
f010849b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01084a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01084a4:	77 19                	ja     f01084bf <env_page_ws_get_time_stamp+0x2d>
f01084a6:	68 30 2d 13 f0       	push   $0xf0132d30
f01084ab:	68 c6 2c 13 f0       	push   $0xf0132cc6
f01084b0:	68 91 00 00 00       	push   $0x91
f01084b5:	68 dc 2c 13 f0       	push   $0xf0132cdc
f01084ba:	e8 f1 7c ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01084bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084c5:	89 d0                	mov    %edx,%eax
f01084c7:	01 c0                	add    %eax,%eax
f01084c9:	01 d0                	add    %edx,%eax
f01084cb:	c1 e0 03             	shl    $0x3,%eax
f01084ce:	01 c8                	add    %ecx,%eax
f01084d0:	05 c0 00 00 00       	add    $0xc0,%eax
f01084d5:	8b 00                	mov    (%eax),%eax
}
f01084d7:	c9                   	leave  
f01084d8:	c3                   	ret    

f01084d9 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01084d9:	55                   	push   %ebp
f01084da:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f01084dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084e2:	89 d0                	mov    %edx,%eax
f01084e4:	01 c0                	add    %eax,%eax
f01084e6:	01 d0                	add    %edx,%eax
f01084e8:	c1 e0 03             	shl    $0x3,%eax
f01084eb:	01 c8                	add    %ecx,%eax
f01084ed:	05 bc 00 00 00       	add    $0xbc,%eax
f01084f2:	8a 00                	mov    (%eax),%al
f01084f4:	0f b6 c0             	movzbl %al,%eax
}
f01084f7:	5d                   	pop    %ebp
f01084f8:	c3                   	ret    

f01084f9 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f01084f9:	55                   	push   %ebp
f01084fa:	89 e5                	mov    %esp,%ebp
f01084fc:	53                   	push   %ebx
f01084fd:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108500:	83 ec 0c             	sub    $0xc,%esp
f0108503:	6a 02                	push   $0x2
f0108505:	e8 39 53 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f010850a:	83 c4 10             	add    $0x10,%esp
f010850d:	85 c0                	test   %eax,%eax
f010850f:	0f 84 fe 00 00 00    	je     f0108613 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010851c:	83 ec 0c             	sub    $0xc,%esp
f010851f:	68 68 2d 13 f0       	push   $0xf0132d68
f0108524:	e8 08 89 ff ff       	call   f0100e31 <cprintf>
f0108529:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010852c:	8b 45 08             	mov    0x8(%ebp),%eax
f010852f:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0108535:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108538:	eb 2c                	jmp    f0108566 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010853a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010853d:	8b 10                	mov    (%eax),%edx
f010853f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108542:	8d 48 01             	lea    0x1(%eax),%ecx
f0108545:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108548:	83 ec 04             	sub    $0x4,%esp
f010854b:	52                   	push   %edx
f010854c:	50                   	push   %eax
f010854d:	68 82 2d 13 f0       	push   $0xf0132d82
f0108552:	e8 da 88 ff ff       	call   f0100e31 <cprintf>
f0108557:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010855a:	8b 45 08             	mov    0x8(%ebp),%eax
f010855d:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108563:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108566:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010856a:	74 08                	je     f0108574 <env_page_ws_print+0x7b>
f010856c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010856f:	8b 40 10             	mov    0x10(%eax),%eax
f0108572:	eb 05                	jmp    f0108579 <env_page_ws_print+0x80>
f0108574:	b8 00 00 00 00       	mov    $0x0,%eax
f0108579:	8b 55 08             	mov    0x8(%ebp),%edx
f010857c:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0108582:	8b 45 08             	mov    0x8(%ebp),%eax
f0108585:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f010858b:	85 c0                	test   %eax,%eax
f010858d:	75 ab                	jne    f010853a <env_page_ws_print+0x41>
f010858f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108593:	75 a5                	jne    f010853a <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108595:	83 ec 0c             	sub    $0xc,%esp
f0108598:	68 8a 2d 13 f0       	push   $0xf0132d8a
f010859d:	e8 8f 88 ff ff       	call   f0100e31 <cprintf>
f01085a2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a8:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01085ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085b1:	eb 2c                	jmp    f01085df <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01085b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085b6:	8b 10                	mov    (%eax),%edx
f01085b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085bb:	8d 48 01             	lea    0x1(%eax),%ecx
f01085be:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01085c1:	83 ec 04             	sub    $0x4,%esp
f01085c4:	52                   	push   %edx
f01085c5:	50                   	push   %eax
f01085c6:	68 82 2d 13 f0       	push   $0xf0132d82
f01085cb:	e8 61 88 ff ff       	call   f0100e31 <cprintf>
f01085d0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01085d6:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01085dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01085e3:	74 08                	je     f01085ed <env_page_ws_print+0xf4>
f01085e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085e8:	8b 40 10             	mov    0x10(%eax),%eax
f01085eb:	eb 05                	jmp    f01085f2 <env_page_ws_print+0xf9>
f01085ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01085f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01085f5:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01085fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01085fe:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108604:	85 c0                	test   %eax,%eax
f0108606:	75 ab                	jne    f01085b3 <env_page_ws_print+0xba>
f0108608:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010860c:	75 a5                	jne    f01085b3 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010860e:	e9 a2 01 00 00       	jmp    f01087b5 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108613:	83 ec 0c             	sub    $0xc,%esp
f0108616:	68 a5 2d 13 f0       	push   $0xf0132da5
f010861b:	e8 11 88 ff ff       	call   f0100e31 <cprintf>
f0108620:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108623:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010862a:	e9 74 01 00 00       	jmp    f01087a3 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010862f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108632:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108635:	89 d0                	mov    %edx,%eax
f0108637:	01 c0                	add    %eax,%eax
f0108639:	01 d0                	add    %edx,%eax
f010863b:	c1 e0 03             	shl    $0x3,%eax
f010863e:	01 c8                	add    %ecx,%eax
f0108640:	05 bc 00 00 00       	add    $0xbc,%eax
f0108645:	8a 00                	mov    (%eax),%al
f0108647:	84 c0                	test   %al,%al
f0108649:	74 43                	je     f010868e <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010864b:	83 ec 0c             	sub    $0xc,%esp
f010864e:	68 af 2d 13 f0       	push   $0xf0132daf
f0108653:	e8 d9 87 ff ff       	call   f0100e31 <cprintf>
f0108658:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010865b:	8b 45 08             	mov    0x8(%ebp),%eax
f010865e:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108664:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108667:	75 10                	jne    f0108679 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0108669:	83 ec 0c             	sub    $0xc,%esp
f010866c:	68 be 2d 13 f0       	push   $0xf0132dbe
f0108671:	e8 bb 87 ff ff       	call   f0100e31 <cprintf>
f0108676:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108679:	83 ec 0c             	sub    $0xc,%esp
f010867c:	68 c4 2d 13 f0       	push   $0xf0132dc4
f0108681:	e8 ab 87 ff ff       	call   f0100e31 <cprintf>
f0108686:	83 c4 10             	add    $0x10,%esp
				continue;
f0108689:	e9 12 01 00 00       	jmp    f01087a0 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010868e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108691:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108694:	89 d0                	mov    %edx,%eax
f0108696:	01 c0                	add    %eax,%eax
f0108698:	01 d0                	add    %edx,%eax
f010869a:	c1 e0 03             	shl    $0x3,%eax
f010869d:	01 c8                	add    %ecx,%eax
f010869f:	05 b8 00 00 00       	add    $0xb8,%eax
f01086a4:	8b 00                	mov    (%eax),%eax
f01086a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01086a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086af:	89 d0                	mov    %edx,%eax
f01086b1:	01 c0                	add    %eax,%eax
f01086b3:	01 d0                	add    %edx,%eax
f01086b5:	c1 e0 03             	shl    $0x3,%eax
f01086b8:	01 c8                	add    %ecx,%eax
f01086ba:	05 c0 00 00 00       	add    $0xc0,%eax
f01086bf:	8b 00                	mov    (%eax),%eax
f01086c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01086c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01086c7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01086cd:	83 ec 08             	sub    $0x8,%esp
f01086d0:	ff 75 e8             	pushl  -0x18(%ebp)
f01086d3:	50                   	push   %eax
f01086d4:	e8 0a fa ff ff       	call   f01080e3 <pt_get_page_permissions>
f01086d9:	83 c4 10             	add    $0x10,%esp
f01086dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01086df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086e2:	83 e0 40             	and    $0x40,%eax
f01086e5:	85 c0                	test   %eax,%eax
f01086e7:	0f 95 c0             	setne  %al
f01086ea:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01086ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086f0:	83 e0 20             	and    $0x20,%eax
f01086f3:	85 c0                	test   %eax,%eax
f01086f5:	0f 95 c0             	setne  %al
f01086f8:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01086fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086fe:	25 00 02 00 00       	and    $0x200,%eax
f0108703:	85 c0                	test   %eax,%eax
f0108705:	0f 95 c0             	setne  %al
f0108708:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010870b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010870e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108711:	89 d0                	mov    %edx,%eax
f0108713:	01 c0                	add    %eax,%eax
f0108715:	01 d0                	add    %edx,%eax
f0108717:	c1 e0 03             	shl    $0x3,%eax
f010871a:	01 c8                	add    %ecx,%eax
f010871c:	05 b8 00 00 00       	add    $0xb8,%eax
f0108721:	8b 00                	mov    (%eax),%eax
f0108723:	83 ec 04             	sub    $0x4,%esp
f0108726:	50                   	push   %eax
f0108727:	ff 75 ec             	pushl  -0x14(%ebp)
f010872a:	68 c6 2d 13 f0       	push   $0xf0132dc6
f010872f:	e8 fd 86 ff ff       	call   f0100e31 <cprintf>
f0108734:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108737:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010873a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010873d:	89 d0                	mov    %edx,%eax
f010873f:	01 c0                	add    %eax,%eax
f0108741:	01 d0                	add    %edx,%eax
f0108743:	c1 e0 03             	shl    $0x3,%eax
f0108746:	01 c8                	add    %ecx,%eax
f0108748:	05 c4 00 00 00       	add    $0xc4,%eax
f010874d:	8b 18                	mov    (%eax),%ebx
f010874f:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108753:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0108757:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010875b:	83 ec 08             	sub    $0x8,%esp
f010875e:	53                   	push   %ebx
f010875f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108762:	51                   	push   %ecx
f0108763:	52                   	push   %edx
f0108764:	50                   	push   %eax
f0108765:	68 d8 2d 13 f0       	push   $0xf0132dd8
f010876a:	e8 c2 86 ff ff       	call   f0100e31 <cprintf>
f010876f:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108772:	8b 45 08             	mov    0x8(%ebp),%eax
f0108775:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010877b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010877e:	75 10                	jne    f0108790 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f0108780:	83 ec 0c             	sub    $0xc,%esp
f0108783:	68 1f 2e 13 f0       	push   $0xf0132e1f
f0108788:	e8 a4 86 ff ff       	call   f0100e31 <cprintf>
f010878d:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108790:	83 ec 0c             	sub    $0xc,%esp
f0108793:	68 c4 2d 13 f0       	push   $0xf0132dc4
f0108798:	e8 94 86 ff ff       	call   f0100e31 <cprintf>
f010879d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01087a0:	ff 45 ec             	incl   -0x14(%ebp)
f01087a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01087a6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01087ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01087af:	0f 87 7a fe ff ff    	ja     f010862f <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01087b5:	90                   	nop
f01087b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01087b9:	c9                   	leave  
f01087ba:	c3                   	ret    

f01087bb <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01087bb:	55                   	push   %ebp
f01087bc:	89 e5                	mov    %esp,%ebp
f01087be:	53                   	push   %ebx
f01087bf:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01087c2:	83 ec 0c             	sub    $0xc,%esp
f01087c5:	68 24 2e 13 f0       	push   $0xf0132e24
f01087ca:	e8 62 86 ff ff       	call   f0100e31 <cprintf>
f01087cf:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01087d2:	83 ec 0c             	sub    $0xc,%esp
f01087d5:	68 59 2e 13 f0       	push   $0xf0132e59
f01087da:	e8 52 86 ff ff       	call   f0100e31 <cprintf>
f01087df:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01087e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01087e9:	e9 19 01 00 00       	jmp    f0108907 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f01087ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f4:	89 d0                	mov    %edx,%eax
f01087f6:	01 c0                	add    %eax,%eax
f01087f8:	01 d0                	add    %edx,%eax
f01087fa:	c1 e0 03             	shl    $0x3,%eax
f01087fd:	01 c8                	add    %ecx,%eax
f01087ff:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108804:	8a 00                	mov    (%eax),%al
f0108806:	84 c0                	test   %al,%al
f0108808:	74 43                	je     f010884d <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f010880a:	83 ec 0c             	sub    $0xc,%esp
f010880d:	68 af 2d 13 f0       	push   $0xf0132daf
f0108812:	e8 1a 86 ff ff       	call   f0100e31 <cprintf>
f0108817:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010881a:	8b 45 08             	mov    0x8(%ebp),%eax
f010881d:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108823:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108826:	75 10                	jne    f0108838 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0108828:	83 ec 0c             	sub    $0xc,%esp
f010882b:	68 be 2d 13 f0       	push   $0xf0132dbe
f0108830:	e8 fc 85 ff ff       	call   f0100e31 <cprintf>
f0108835:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108838:	83 ec 0c             	sub    $0xc,%esp
f010883b:	68 c4 2d 13 f0       	push   $0xf0132dc4
f0108840:	e8 ec 85 ff ff       	call   f0100e31 <cprintf>
f0108845:	83 c4 10             	add    $0x10,%esp
			continue;
f0108848:	e9 b7 00 00 00       	jmp    f0108904 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010884d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108850:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108853:	89 d0                	mov    %edx,%eax
f0108855:	01 c0                	add    %eax,%eax
f0108857:	01 d0                	add    %edx,%eax
f0108859:	c1 e0 03             	shl    $0x3,%eax
f010885c:	01 c8                	add    %ecx,%eax
f010885e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108863:	8b 00                	mov    (%eax),%eax
f0108865:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108868:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010886b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010886e:	89 d0                	mov    %edx,%eax
f0108870:	01 c0                	add    %eax,%eax
f0108872:	01 d0                	add    %edx,%eax
f0108874:	c1 e0 03             	shl    $0x3,%eax
f0108877:	01 c8                	add    %ecx,%eax
f0108879:	05 80 d5 01 00       	add    $0x1d580,%eax
f010887e:	8b 00                	mov    (%eax),%eax
f0108880:	83 ec 04             	sub    $0x4,%esp
f0108883:	50                   	push   %eax
f0108884:	ff 75 f4             	pushl  -0xc(%ebp)
f0108887:	68 64 2e 13 f0       	push   $0xf0132e64
f010888c:	e8 a0 85 ff ff       	call   f0100e31 <cprintf>
f0108891:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108894:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108897:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010889a:	89 d0                	mov    %edx,%eax
f010889c:	01 c0                	add    %eax,%eax
f010889e:	01 d0                	add    %edx,%eax
f01088a0:	c1 e0 03             	shl    $0x3,%eax
f01088a3:	01 c8                	add    %ecx,%eax
f01088a5:	05 88 d5 01 00       	add    $0x1d588,%eax
f01088aa:	8b 18                	mov    (%eax),%ebx
f01088ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01088af:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01088b5:	83 ec 08             	sub    $0x8,%esp
f01088b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01088bb:	50                   	push   %eax
f01088bc:	e8 fe f8 ff ff       	call   f01081bf <pd_is_table_used>
f01088c1:	83 c4 10             	add    $0x10,%esp
f01088c4:	83 ec 04             	sub    $0x4,%esp
f01088c7:	53                   	push   %ebx
f01088c8:	50                   	push   %eax
f01088c9:	68 7c 2e 13 f0       	push   $0xf0132e7c
f01088ce:	e8 5e 85 ff ff       	call   f0100e31 <cprintf>
f01088d3:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01088d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01088d9:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f01088df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01088e2:	75 10                	jne    f01088f4 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f01088e4:	83 ec 0c             	sub    $0xc,%esp
f01088e7:	68 1f 2e 13 f0       	push   $0xf0132e1f
f01088ec:	e8 40 85 ff ff       	call   f0100e31 <cprintf>
f01088f1:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01088f4:	83 ec 0c             	sub    $0xc,%esp
f01088f7:	68 c4 2d 13 f0       	push   $0xf0132dc4
f01088fc:	e8 30 85 ff ff       	call   f0100e31 <cprintf>
f0108901:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108904:	ff 45 f4             	incl   -0xc(%ebp)
f0108907:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010890b:	0f 86 dd fe ff ff    	jbe    f01087ee <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108911:	90                   	nop
f0108912:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108915:	c9                   	leave  
f0108916:	c3                   	ret    

f0108917 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108917:	55                   	push   %ebp
f0108918:	89 e5                	mov    %esp,%ebp
f010891a:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010891d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108924:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010892b:	eb 22                	jmp    f010894f <env_table_ws_get_size+0x38>
f010892d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108930:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108933:	89 d0                	mov    %edx,%eax
f0108935:	01 c0                	add    %eax,%eax
f0108937:	01 d0                	add    %edx,%eax
f0108939:	c1 e0 03             	shl    $0x3,%eax
f010893c:	01 c8                	add    %ecx,%eax
f010893e:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108943:	8a 00                	mov    (%eax),%al
f0108945:	84 c0                	test   %al,%al
f0108947:	75 03                	jne    f010894c <env_table_ws_get_size+0x35>
f0108949:	ff 45 f8             	incl   -0x8(%ebp)
f010894c:	ff 45 fc             	incl   -0x4(%ebp)
f010894f:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108953:	7e d8                	jle    f010892d <env_table_ws_get_size+0x16>
	return counter;
f0108955:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108958:	c9                   	leave  
f0108959:	c3                   	ret    

f010895a <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010895a:	55                   	push   %ebp
f010895b:	89 e5                	mov    %esp,%ebp
f010895d:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108960:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108967:	eb 4e                	jmp    f01089b7 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108969:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010896c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010896f:	89 d0                	mov    %edx,%eax
f0108971:	01 c0                	add    %eax,%eax
f0108973:	01 d0                	add    %edx,%eax
f0108975:	c1 e0 03             	shl    $0x3,%eax
f0108978:	01 c8                	add    %ecx,%eax
f010897a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010897f:	8b 00                	mov    (%eax),%eax
f0108981:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108984:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108987:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010898c:	89 c2                	mov    %eax,%edx
f010898e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108991:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108994:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108997:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010899c:	39 c2                	cmp    %eax,%edx
f010899e:	75 14                	jne    f01089b4 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01089a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089a3:	83 ec 08             	sub    $0x8,%esp
f01089a6:	50                   	push   %eax
f01089a7:	ff 75 08             	pushl  0x8(%ebp)
f01089aa:	e8 bc 00 00 00       	call   f0108a6b <env_table_ws_clear_entry>
f01089af:	83 c4 10             	add    $0x10,%esp
			break;
f01089b2:	eb 09                	jmp    f01089bd <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01089b4:	ff 45 f4             	incl   -0xc(%ebp)
f01089b7:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01089bb:	7e ac                	jle    f0108969 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01089bd:	90                   	nop
f01089be:	c9                   	leave  
f01089bf:	c3                   	ret    

f01089c0 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01089c0:	55                   	push   %ebp
f01089c1:	89 e5                	mov    %esp,%ebp
f01089c3:	53                   	push   %ebx
f01089c4:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089c7:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089cb:	76 19                	jbe    f01089e6 <env_table_ws_set_entry+0x26>
f01089cd:	68 a0 2e 13 f0       	push   $0xf0132ea0
f01089d2:	68 c6 2c 13 f0       	push   $0xf0132cc6
f01089d7:	68 07 01 00 00       	push   $0x107
f01089dc:	68 dc 2c 13 f0       	push   $0xf0132cdc
f01089e1:	e8 ca 77 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01089e6:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01089ed:	76 19                	jbe    f0108a08 <env_table_ws_set_entry+0x48>
f01089ef:	68 fc 2c 13 f0       	push   $0xf0132cfc
f01089f4:	68 c6 2c 13 f0       	push   $0xf0132cc6
f01089f9:	68 08 01 00 00       	push   $0x108
f01089fe:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108a03:	e8 a8 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108a08:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a11:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a16:	89 c1                	mov    %eax,%ecx
f0108a18:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108a1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a1e:	89 d0                	mov    %edx,%eax
f0108a20:	01 c0                	add    %eax,%eax
f0108a22:	01 d0                	add    %edx,%eax
f0108a24:	c1 e0 03             	shl    $0x3,%eax
f0108a27:	01 d8                	add    %ebx,%eax
f0108a29:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a2e:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108a30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a36:	89 d0                	mov    %edx,%eax
f0108a38:	01 c0                	add    %eax,%eax
f0108a3a:	01 d0                	add    %edx,%eax
f0108a3c:	c1 e0 03             	shl    $0x3,%eax
f0108a3f:	01 c8                	add    %ecx,%eax
f0108a41:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108a46:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108a49:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a4f:	89 d0                	mov    %edx,%eax
f0108a51:	01 c0                	add    %eax,%eax
f0108a53:	01 d0                	add    %edx,%eax
f0108a55:	c1 e0 03             	shl    $0x3,%eax
f0108a58:	01 c8                	add    %ecx,%eax
f0108a5a:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108a5f:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108a65:	90                   	nop
}
f0108a66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108a69:	c9                   	leave  
f0108a6a:	c3                   	ret    

f0108a6b <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108a6b:	55                   	push   %ebp
f0108a6c:	89 e5                	mov    %esp,%ebp
f0108a6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a71:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a75:	76 19                	jbe    f0108a90 <env_table_ws_clear_entry+0x25>
f0108a77:	68 a0 2e 13 f0       	push   $0xf0132ea0
f0108a7c:	68 c6 2c 13 f0       	push   $0xf0132cc6
f0108a81:	68 13 01 00 00       	push   $0x113
f0108a86:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108a8b:	e8 20 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108a90:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a93:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a96:	89 d0                	mov    %edx,%eax
f0108a98:	01 c0                	add    %eax,%eax
f0108a9a:	01 d0                	add    %edx,%eax
f0108a9c:	c1 e0 03             	shl    $0x3,%eax
f0108a9f:	01 c8                	add    %ecx,%eax
f0108aa1:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108aa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108aac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ab2:	89 d0                	mov    %edx,%eax
f0108ab4:	01 c0                	add    %eax,%eax
f0108ab6:	01 d0                	add    %edx,%eax
f0108ab8:	c1 e0 03             	shl    $0x3,%eax
f0108abb:	01 c8                	add    %ecx,%eax
f0108abd:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108ac2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108ac5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108acb:	89 d0                	mov    %edx,%eax
f0108acd:	01 c0                	add    %eax,%eax
f0108acf:	01 d0                	add    %edx,%eax
f0108ad1:	c1 e0 03             	shl    $0x3,%eax
f0108ad4:	01 c8                	add    %ecx,%eax
f0108ad6:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108adb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108ae1:	90                   	nop
f0108ae2:	c9                   	leave  
f0108ae3:	c3                   	ret    

f0108ae4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108ae4:	55                   	push   %ebp
f0108ae5:	89 e5                	mov    %esp,%ebp
f0108ae7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108aea:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108aee:	76 19                	jbe    f0108b09 <env_table_ws_get_virtual_address+0x25>
f0108af0:	68 a0 2e 13 f0       	push   $0xf0132ea0
f0108af5:	68 c6 2c 13 f0       	push   $0xf0132cc6
f0108afa:	68 1b 01 00 00       	push   $0x11b
f0108aff:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108b04:	e8 a7 76 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108b09:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b0f:	89 d0                	mov    %edx,%eax
f0108b11:	01 c0                	add    %eax,%eax
f0108b13:	01 d0                	add    %edx,%eax
f0108b15:	c1 e0 03             	shl    $0x3,%eax
f0108b18:	01 c8                	add    %ecx,%eax
f0108b1a:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108b1f:	8b 00                	mov    (%eax),%eax
f0108b21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b27:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108b2c:	c9                   	leave  
f0108b2d:	c3                   	ret    

f0108b2e <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108b2e:	55                   	push   %ebp
f0108b2f:	89 e5                	mov    %esp,%ebp
f0108b31:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b34:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b38:	76 19                	jbe    f0108b53 <env_table_ws_get_time_stamp+0x25>
f0108b3a:	68 a0 2e 13 f0       	push   $0xf0132ea0
f0108b3f:	68 c6 2c 13 f0       	push   $0xf0132cc6
f0108b44:	68 22 01 00 00       	push   $0x122
f0108b49:	68 dc 2c 13 f0       	push   $0xf0132cdc
f0108b4e:	e8 5d 76 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108b53:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b56:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b59:	89 d0                	mov    %edx,%eax
f0108b5b:	01 c0                	add    %eax,%eax
f0108b5d:	01 d0                	add    %edx,%eax
f0108b5f:	c1 e0 03             	shl    $0x3,%eax
f0108b62:	01 c8                	add    %ecx,%eax
f0108b64:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108b69:	8b 00                	mov    (%eax),%eax
}
f0108b6b:	c9                   	leave  
f0108b6c:	c3                   	ret    

f0108b6d <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108b6d:	55                   	push   %ebp
f0108b6e:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108b70:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b76:	89 d0                	mov    %edx,%eax
f0108b78:	01 c0                	add    %eax,%eax
f0108b7a:	01 d0                	add    %edx,%eax
f0108b7c:	c1 e0 03             	shl    $0x3,%eax
f0108b7f:	01 c8                	add    %ecx,%eax
f0108b81:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108b86:	8a 00                	mov    (%eax),%al
f0108b88:	0f b6 c0             	movzbl %al,%eax
}
f0108b8b:	5d                   	pop    %ebp
f0108b8c:	c3                   	ret    

f0108b8d <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108b8d:	55                   	push   %ebp
f0108b8e:	89 e5                	mov    %esp,%ebp
f0108b90:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0108b93:	83 ec 04             	sub    $0x4,%esp
f0108b96:	68 d4 2e 13 f0       	push   $0xf0132ed4
f0108b9b:	6a 1f                	push   $0x1f
f0108b9d:	68 02 2f 13 f0       	push   $0xf0132f02
f0108ba2:	e8 09 76 ff ff       	call   f01001b0 <_panic>

f0108ba7 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108ba7:	55                   	push   %ebp
f0108ba8:	89 e5                	mov    %esp,%ebp
f0108baa:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108bad:	83 ec 04             	sub    $0x4,%esp
f0108bb0:	68 20 2f 13 f0       	push   $0xf0132f20
f0108bb5:	6a 32                	push   $0x32
f0108bb7:	68 02 2f 13 f0       	push   $0xf0132f02
f0108bbc:	e8 ef 75 ff ff       	call   f01001b0 <_panic>

f0108bc1 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108bc1:	55                   	push   %ebp
f0108bc2:	89 e5                	mov    %esp,%ebp
f0108bc4:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0108bc7:	83 ec 04             	sub    $0x4,%esp
f0108bca:	68 50 2f 13 f0       	push   $0xf0132f50
f0108bcf:	6a 41                	push   $0x41
f0108bd1:	68 02 2f 13 f0       	push   $0xf0132f02
f0108bd6:	e8 d5 75 ff ff       	call   f01001b0 <_panic>

f0108bdb <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108bdb:	55                   	push   %ebp
f0108bdc:	89 e5                	mov    %esp,%ebp
f0108bde:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108be1:	83 ec 04             	sub    $0x4,%esp
f0108be4:	68 7c 2f 13 f0       	push   $0xf0132f7c
f0108be9:	6a 4e                	push   $0x4e
f0108beb:	68 02 2f 13 f0       	push   $0xf0132f02
f0108bf0:	e8 bb 75 ff ff       	call   f01001b0 <_panic>

f0108bf5 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bf5:	55                   	push   %ebp
f0108bf6:	89 e5                	mov    %esp,%ebp
f0108bf8:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bfb:	83 ec 04             	sub    $0x4,%esp
f0108bfe:	68 ac 2f 13 f0       	push   $0xf0132fac
f0108c03:	6a 57                	push   $0x57
f0108c05:	68 02 2f 13 f0       	push   $0xf0132f02
f0108c0a:	e8 a1 75 ff ff       	call   f01001b0 <_panic>

f0108c0f <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108c0f:	55                   	push   %ebp
f0108c10:	89 e5                	mov    %esp,%ebp
f0108c12:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108c15:	83 ec 04             	sub    $0x4,%esp
f0108c18:	68 e4 2f 13 f0       	push   $0xf0132fe4
f0108c1d:	6a 63                	push   $0x63
f0108c1f:	68 02 2f 13 f0       	push   $0xf0132f02
f0108c24:	e8 87 75 ff ff       	call   f01001b0 <_panic>

f0108c29 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c29:	55                   	push   %ebp
f0108c2a:	89 e5                	mov    %esp,%ebp
f0108c2c:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c2f:	e8 20 50 02 00       	call   f012dc54 <inctst>
	return;
f0108c34:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108c35:	c9                   	leave  
f0108c36:	c3                   	ret    

f0108c37 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c37:	55                   	push   %ebp
f0108c38:	89 e5                	mov    %esp,%ebp
f0108c3a:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c3d:	e8 12 50 02 00       	call   f012dc54 <inctst>
	return;
f0108c42:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108c43:	c9                   	leave  
f0108c44:	c3                   	ret    

f0108c45 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c45:	55                   	push   %ebp
f0108c46:	89 e5                	mov    %esp,%ebp
f0108c48:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108c4b:	83 ec 04             	sub    $0x4,%esp
f0108c4e:	68 1c 30 13 f0       	push   $0xf013301c
f0108c53:	68 99 00 00 00       	push   $0x99
f0108c58:	68 02 2f 13 f0       	push   $0xf0132f02
f0108c5d:	e8 4e 75 ff ff       	call   f01001b0 <_panic>

f0108c62 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c62:	55                   	push   %ebp
f0108c63:	89 e5                	mov    %esp,%ebp
f0108c65:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c68:	83 ec 04             	sub    $0x4,%esp
f0108c6b:	68 5c 30 13 f0       	push   $0xf013305c
f0108c70:	68 a3 00 00 00       	push   $0xa3
f0108c75:	68 02 2f 13 f0       	push   $0xf0132f02
f0108c7a:	e8 31 75 ff ff       	call   f01001b0 <_panic>

f0108c7f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108c7f:	55                   	push   %ebp
f0108c80:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c85:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0108c8b:	29 d0                	sub    %edx,%eax
f0108c8d:	c1 f8 02             	sar    $0x2,%eax
f0108c90:	89 c2                	mov    %eax,%edx
f0108c92:	89 d0                	mov    %edx,%eax
f0108c94:	c1 e0 03             	shl    $0x3,%eax
f0108c97:	01 d0                	add    %edx,%eax
f0108c99:	c1 e0 03             	shl    $0x3,%eax
f0108c9c:	01 d0                	add    %edx,%eax
f0108c9e:	c1 e0 03             	shl    $0x3,%eax
f0108ca1:	01 d0                	add    %edx,%eax
f0108ca3:	c1 e0 03             	shl    $0x3,%eax
f0108ca6:	01 d0                	add    %edx,%eax
f0108ca8:	89 c1                	mov    %eax,%ecx
f0108caa:	c1 e1 0f             	shl    $0xf,%ecx
f0108cad:	01 c8                	add    %ecx,%eax
f0108caf:	c1 e0 03             	shl    $0x3,%eax
f0108cb2:	01 d0                	add    %edx,%eax
f0108cb4:	f7 d8                	neg    %eax
}
f0108cb6:	5d                   	pop    %ebp
f0108cb7:	c3                   	ret    

f0108cb8 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108cb8:	55                   	push   %ebp
f0108cb9:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108cbb:	ff 75 08             	pushl  0x8(%ebp)
f0108cbe:	e8 bc ff ff ff       	call   f0108c7f <to_frame_number>
f0108cc3:	83 c4 04             	add    $0x4,%esp
f0108cc6:	c1 e0 0c             	shl    $0xc,%eax
}
f0108cc9:	c9                   	leave  
f0108cca:	c3                   	ret    

f0108ccb <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108ccb:	55                   	push   %ebp
f0108ccc:	89 e5                	mov    %esp,%ebp
f0108cce:	57                   	push   %edi
f0108ccf:	56                   	push   %esi
f0108cd0:	53                   	push   %ebx
f0108cd1:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108cd7:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108cde:	83 ec 0c             	sub    $0xc,%esp
f0108ce1:	ff 75 08             	pushl  0x8(%ebp)
f0108ce4:	e8 df 21 00 00       	call   f010aec8 <get_user_program_info>
f0108ce9:	83 c4 10             	add    $0x10,%esp
f0108cec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108cef:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108cf3:	75 0a                	jne    f0108cff <env_create+0x34>
f0108cf5:	b8 00 00 00 00       	mov    $0x0,%eax
f0108cfa:	e9 45 0c 00 00       	jmp    f0109944 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108cff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d02:	8b 40 08             	mov    0x8(%eax),%eax
f0108d05:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108d08:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108d0f:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108d12:	83 ec 0c             	sub    $0xc,%esp
f0108d15:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0108d1b:	50                   	push   %eax
f0108d1c:	e8 aa 0f 00 00       	call   f0109ccb <allocate_environment>
f0108d21:	83 c4 10             	add    $0x10,%esp
f0108d24:	85 c0                	test   %eax,%eax
f0108d26:	79 0a                	jns    f0108d32 <env_create+0x67>
	{
		return 0;
f0108d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d2d:	e9 12 0c 00 00       	jmp    f0109944 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108d32:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d35:	8b 00                	mov    (%eax),%eax
f0108d37:	83 ec 0c             	sub    $0xc,%esp
f0108d3a:	50                   	push   %eax
f0108d3b:	e8 c0 62 02 00       	call   f012f000 <strlen>
f0108d40:	83 c4 10             	add    $0x10,%esp
f0108d43:	83 f8 3f             	cmp    $0x3f,%eax
f0108d46:	7f 1d                	jg     f0108d65 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108d48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d4b:	8b 00                	mov    (%eax),%eax
f0108d4d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d53:	83 c2 5c             	add    $0x5c,%edx
f0108d56:	83 ec 08             	sub    $0x8,%esp
f0108d59:	50                   	push   %eax
f0108d5a:	52                   	push   %edx
f0108d5b:	e8 ef 62 02 00       	call   f012f04f <strcpy>
f0108d60:	83 c4 10             	add    $0x10,%esp
f0108d63:	eb 1d                	jmp    f0108d82 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d68:	8b 00                	mov    (%eax),%eax
f0108d6a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d70:	83 c2 5c             	add    $0x5c,%edx
f0108d73:	83 ec 04             	sub    $0x4,%esp
f0108d76:	6a 3f                	push   $0x3f
f0108d78:	50                   	push   %eax
f0108d79:	52                   	push   %edx
f0108d7a:	e8 fe 62 02 00       	call   f012f07d <strncpy>
f0108d7f:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108d82:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108d89:	00 00 00 

		allocate_frame(&p) ;
f0108d8c:	83 ec 0c             	sub    $0xc,%esp
f0108d8f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0108d95:	50                   	push   %eax
f0108d96:	e8 8a e5 ff ff       	call   f0107325 <allocate_frame>
f0108d9b:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108d9e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108da4:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108daa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108db0:	83 ec 0c             	sub    $0xc,%esp
f0108db3:	50                   	push   %eax
f0108db4:	e8 ff fe ff ff       	call   f0108cb8 <to_physical_address>
f0108db9:	83 c4 10             	add    $0x10,%esp
f0108dbc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108dbf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dc2:	c1 e8 0c             	shr    $0xc,%eax
f0108dc5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108dc8:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0108dcd:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108dd0:	72 17                	jb     f0108de9 <env_create+0x11e>
f0108dd2:	ff 75 b0             	pushl  -0x50(%ebp)
f0108dd5:	68 88 30 13 f0       	push   $0xf0133088
f0108dda:	68 8a 00 00 00       	push   $0x8a
f0108ddf:	68 b7 30 13 f0       	push   $0xf01330b7
f0108de4:	e8 c7 73 ff ff       	call   f01001b0 <_panic>
f0108de9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108df1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108df4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108dfa:	83 ec 0c             	sub    $0xc,%esp
f0108dfd:	50                   	push   %eax
f0108dfe:	e8 b5 fe ff ff       	call   f0108cb8 <to_physical_address>
f0108e03:	83 c4 10             	add    $0x10,%esp
f0108e06:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108e09:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e12:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108e18:	83 ec 0c             	sub    $0xc,%esp
f0108e1b:	6a 02                	push   $0x2
f0108e1d:	e8 21 4a 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f0108e22:	83 c4 10             	add    $0x10,%esp
f0108e25:	85 c0                	test   %eax,%eax
f0108e27:	74 21                	je     f0108e4a <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108e29:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e2f:	8b 55 10             	mov    0x10(%ebp),%edx
f0108e32:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108e38:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e3e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e41:	2b 55 10             	sub    0x10(%ebp),%edx
f0108e44:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108e4a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108e4e:	75 12                	jne    f0108e62 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108e50:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e56:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108e5d:	00 00 00 
f0108e60:	eb 0f                	jmp    f0108e71 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108e62:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e68:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e6b:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108e71:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e77:	83 ec 04             	sub    $0x4,%esp
f0108e7a:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108e7d:	ff 75 a8             	pushl  -0x58(%ebp)
f0108e80:	50                   	push   %eax
f0108e81:	e8 95 16 00 00       	call   f010a51b <initialize_environment>
f0108e86:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108e89:	0f 20 d8             	mov    %cr3,%eax
f0108e8c:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108e8f:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108e92:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108e95:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e9b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108ea1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108ea7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ead:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108eb0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108eb7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108ebe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ec4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108eca:	48                   	dec    %eax
f0108ecb:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ece:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108ed5:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108ed8:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108ede:	83 ec 08             	sub    $0x8,%esp
f0108ee1:	ff 75 b8             	pushl  -0x48(%ebp)
f0108ee4:	50                   	push   %eax
f0108ee5:	e8 9a 1d 00 00       	call   f010ac84 <PROGRAM_SEGMENT_FIRST>
f0108eea:	83 c4 0c             	add    $0xc,%esp
f0108eed:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108ef3:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108ef9:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108efe:	89 c7                	mov    %eax,%edi
f0108f00:	89 d6                	mov    %edx,%esi
f0108f02:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108f04:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108f0a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108f0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f10:	8b 40 10             	mov    0x10(%eax),%eax
f0108f13:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108f16:	75 07                	jne    f0108f1f <env_create+0x254>
f0108f18:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108f1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f25:	e9 24 03 00 00       	jmp    f010924e <env_create+0x583>
	{
		segment_counter++;
f0108f2a:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108f2d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108f34:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108f37:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f3d:	83 ec 0c             	sub    $0xc,%esp
f0108f40:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108f46:	52                   	push   %edx
f0108f47:	ff 75 dc             	pushl  -0x24(%ebp)
f0108f4a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108f50:	52                   	push   %edx
f0108f51:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108f54:	50                   	push   %eax
f0108f55:	e8 2f 0e 00 00       	call   f0109d89 <program_segment_alloc_map_copy_workingset>
f0108f5a:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108f5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108f63:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108f66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f69:	8b 00                	mov    (%eax),%eax
f0108f6b:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108f6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f71:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f74:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108f77:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f7a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108f7d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108f80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f85:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108f88:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108f8f:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108f92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108f95:	01 d0                	add    %edx,%eax
f0108f97:	48                   	dec    %eax
f0108f98:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108f9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108fa3:	f7 75 84             	divl   -0x7c(%ebp)
f0108fa6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108fa9:	29 d0                	sub    %edx,%eax
f0108fab:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108fb1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fb4:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108fb7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108fbd:	a1 48 be 2b f0       	mov    0xf02bbe48,%eax
f0108fc2:	83 ec 04             	sub    $0x4,%esp
f0108fc5:	68 00 10 00 00       	push   $0x1000
f0108fca:	6a 00                	push   $0x0
f0108fcc:	50                   	push   %eax
f0108fcd:	e8 1c 62 02 00       	call   f012f1ee <memset>
f0108fd2:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108fd5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108fd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108fdb:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0108fe1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108fe7:	01 d0                	add    %edx,%eax
f0108fe9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fec:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fef:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108ff2:	eb 13                	jmp    f0109007 <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108ff7:	8a 10                	mov    (%eax),%dl
f0108ff9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ffc:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108ffe:	ff 45 cc             	incl   -0x34(%ebp)
f0109001:	ff 45 d4             	incl   -0x2c(%ebp)
f0109004:	ff 45 d0             	incl   -0x30(%ebp)
f0109007:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010900a:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109010:	72 e2                	jb     f0108ff4 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109012:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0109018:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010901e:	83 ec 04             	sub    $0x4,%esp
f0109021:	52                   	push   %edx
f0109022:	ff 75 88             	pushl  -0x78(%ebp)
f0109025:	50                   	push   %eax
f0109026:	e8 a0 ae ff ff       	call   f0103ecb <pf_add_env_page>
f010902b:	83 c4 10             	add    $0x10,%esp
f010902e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109031:	75 17                	jne    f010904a <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109033:	83 ec 04             	sub    $0x4,%esp
f0109036:	68 d4 30 13 f0       	push   $0xf01330d4
f010903b:	68 de 00 00 00       	push   $0xde
f0109040:	68 b7 30 13 f0       	push   $0xf01330b7
f0109045:	e8 66 71 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010904a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010904d:	8b 50 04             	mov    0x4(%eax),%edx
f0109050:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109053:	01 d0                	add    %edx,%eax
f0109055:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010905b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109061:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109066:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010906c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010906f:	8b 50 04             	mov    0x4(%eax),%edx
f0109072:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109075:	01 d0                	add    %edx,%eax
f0109077:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010907d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109083:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109086:	eb 43                	jmp    f01090cb <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109088:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010908b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109091:	83 ec 04             	sub    $0x4,%esp
f0109094:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109097:	52                   	push   %edx
f0109098:	50                   	push   %eax
f0109099:	e8 2d ae ff ff       	call   f0103ecb <pf_add_env_page>
f010909e:	83 c4 10             	add    $0x10,%esp
f01090a1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090a4:	75 17                	jne    f01090bd <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090a6:	83 ec 04             	sub    $0x4,%esp
f01090a9:	68 d4 30 13 f0       	push   $0xf01330d4
f01090ae:	68 eb 00 00 00       	push   $0xeb
f01090b3:	68 b7 30 13 f0       	push   $0xf01330b7
f01090b8:	e8 f3 70 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01090bd:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01090c4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01090cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090ce:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f01090d4:	72 b2                	jb     f0109088 <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01090d6:	a1 48 be 2b f0       	mov    0xf02bbe48,%eax
f01090db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01090de:	83 ec 04             	sub    $0x4,%esp
f01090e1:	68 00 10 00 00       	push   $0x1000
f01090e6:	6a 00                	push   $0x0
f01090e8:	ff 75 d0             	pushl  -0x30(%ebp)
f01090eb:	e8 fe 60 02 00       	call   f012f1ee <memset>
f01090f0:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01090f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01090fc:	eb 13                	jmp    f0109111 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f01090fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109101:	8a 10                	mov    (%eax),%dl
f0109103:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109106:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109108:	ff 45 cc             	incl   -0x34(%ebp)
f010910b:	ff 45 d4             	incl   -0x2c(%ebp)
f010910e:	ff 45 d0             	incl   -0x30(%ebp)
f0109111:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109114:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f010911a:	72 e2                	jb     f01090fe <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010911c:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0109122:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109128:	83 ec 04             	sub    $0x4,%esp
f010912b:	52                   	push   %edx
f010912c:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109132:	50                   	push   %eax
f0109133:	e8 93 ad ff ff       	call   f0103ecb <pf_add_env_page>
f0109138:	83 c4 10             	add    $0x10,%esp
f010913b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010913e:	75 17                	jne    f0109157 <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109140:	83 ec 04             	sub    $0x4,%esp
f0109143:	68 d4 30 13 f0       	push   $0xf01330d4
f0109148:	68 fa 00 00 00       	push   $0xfa
f010914d:	68 b7 30 13 f0       	push   $0xf01330b7
f0109152:	e8 59 70 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109157:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010915e:	10 00 00 
f0109161:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109164:	8b 50 04             	mov    0x4(%eax),%edx
f0109167:	8b 45 90             	mov    -0x70(%ebp),%eax
f010916a:	01 c2                	add    %eax,%edx
f010916c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109172:	01 d0                	add    %edx,%eax
f0109174:	48                   	dec    %eax
f0109175:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010917b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109181:	ba 00 00 00 00       	mov    $0x0,%edx
f0109186:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010918c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109192:	29 d0                	sub    %edx,%eax
f0109194:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010919a:	8b 50 08             	mov    0x8(%eax),%edx
f010919d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01091a0:	01 d0                	add    %edx,%eax
f01091a2:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01091a5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091ab:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01091b2:	eb 41                	jmp    f01091f5 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01091b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01091ba:	83 ec 04             	sub    $0x4,%esp
f01091bd:	6a 01                	push   $0x1
f01091bf:	ff 75 c8             	pushl  -0x38(%ebp)
f01091c2:	50                   	push   %eax
f01091c3:	e8 cd ab ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01091c8:	83 c4 10             	add    $0x10,%esp
f01091cb:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091ce:	75 17                	jne    f01091e7 <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091d0:	83 ec 04             	sub    $0x4,%esp
f01091d3:	68 d4 30 13 f0       	push   $0xf01330d4
f01091d8:	68 07 01 00 00       	push   $0x107
f01091dd:	68 b7 30 13 f0       	push   $0xf01330b7
f01091e2:	e8 c9 6f ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091e7:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091ee:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01091f5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01091fc:	10 00 00 
f01091ff:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109205:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010920b:	01 d0                	add    %edx,%eax
f010920d:	48                   	dec    %eax
f010920e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109214:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010921a:	ba 00 00 00 00       	mov    $0x0,%edx
f010921f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109225:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010922b:	29 d0                	sub    %edx,%eax
f010922d:	89 c2                	mov    %eax,%edx
f010922f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109232:	39 c2                	cmp    %eax,%edx
f0109234:	0f 87 7a ff ff ff    	ja     f01091b4 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010923a:	83 ec 08             	sub    $0x8,%esp
f010923d:	ff 75 b8             	pushl  -0x48(%ebp)
f0109240:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109243:	e8 31 19 00 00       	call   f010ab79 <PROGRAM_SEGMENT_NEXT>
f0109248:	83 c4 10             	add    $0x10,%esp
f010924b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010924e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109252:	0f 85 d2 fc ff ff    	jne    f0108f2a <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f0109258:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010925f:	e9 a7 00 00 00       	jmp    f010930b <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109264:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010926a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010926d:	89 d0                	mov    %edx,%eax
f010926f:	01 c0                	add    %eax,%eax
f0109271:	01 d0                	add    %edx,%eax
f0109273:	c1 e0 03             	shl    $0x3,%eax
f0109276:	01 c8                	add    %ecx,%eax
f0109278:	05 bc 00 00 00       	add    $0xbc,%eax
f010927d:	8a 00                	mov    (%eax),%al
f010927f:	84 c0                	test   %al,%al
f0109281:	0f 85 81 00 00 00    	jne    f0109308 <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109287:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010928d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109290:	89 d0                	mov    %edx,%eax
f0109292:	01 c0                	add    %eax,%eax
f0109294:	01 d0                	add    %edx,%eax
f0109296:	c1 e0 03             	shl    $0x3,%eax
f0109299:	01 c8                	add    %ecx,%eax
f010929b:	05 b8 00 00 00       	add    $0xb8,%eax
f01092a0:	8b 00                	mov    (%eax),%eax
f01092a2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01092a8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092ae:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01092b4:	83 ec 04             	sub    $0x4,%esp
f01092b7:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f01092bd:	52                   	push   %edx
f01092be:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f01092c4:	50                   	push   %eax
f01092c5:	e8 1d e2 ff ff       	call   f01074e7 <get_page_table>
f01092ca:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01092cd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01092d3:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f01092d9:	c1 ea 0c             	shr    $0xc,%edx
f01092dc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01092e2:	c1 e2 02             	shl    $0x2,%edx
f01092e5:	01 d0                	add    %edx,%eax
f01092e7:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f01092ed:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f01092f3:	c1 e9 0c             	shr    $0xc,%ecx
f01092f6:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01092fc:	c1 e1 02             	shl    $0x2,%ecx
f01092ff:	01 ca                	add    %ecx,%edx
f0109301:	8b 12                	mov    (%edx),%edx
f0109303:	83 e2 bf             	and    $0xffffffbf,%edx
f0109306:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109308:	ff 45 c4             	incl   -0x3c(%ebp)
f010930b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109311:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0109317:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010931a:	39 c2                	cmp    %eax,%edx
f010931c:	0f 87 42 ff ff ff    	ja     f0109264 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109322:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109325:	8b 50 08             	mov    0x8(%eax),%edx
f0109328:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010932e:	83 ec 08             	sub    $0x8,%esp
f0109331:	52                   	push   %edx
f0109332:	50                   	push   %eax
f0109333:	e8 01 18 00 00       	call   f010ab39 <set_environment_entry_point>
f0109338:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010933b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109341:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f0109348:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010934b:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0109352:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109355:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010935c:	e9 3c 05 00 00       	jmp    f010989d <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0109361:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0109368:	00 00 00 
		allocate_frame(&pp);
f010936b:	83 ec 0c             	sub    $0xc,%esp
f010936e:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109374:	50                   	push   %eax
f0109375:	e8 ab df ff ff       	call   f0107325 <allocate_frame>
f010937a:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010937d:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0109383:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109389:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010938f:	6a 06                	push   $0x6
f0109391:	ff 75 c0             	pushl  -0x40(%ebp)
f0109394:	52                   	push   %edx
f0109395:	50                   	push   %eax
f0109396:	e8 db e4 ff ff       	call   f0107876 <loadtime_map_frame>
f010939b:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010939e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01093a1:	83 ec 04             	sub    $0x4,%esp
f01093a4:	68 00 10 00 00       	push   $0x1000
f01093a9:	6a 00                	push   $0x0
f01093ab:	50                   	push   %eax
f01093ac:	e8 3d 5e 02 00       	call   f012f1ee <memset>
f01093b1:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01093b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093ba:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f01093c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093c6:	83 ec 04             	sub    $0x4,%esp
f01093c9:	ff 75 c0             	pushl  -0x40(%ebp)
f01093cc:	52                   	push   %edx
f01093cd:	50                   	push   %eax
f01093ce:	e8 3f ef ff ff       	call   f0108312 <env_page_ws_set_entry>
f01093d3:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f01093d6:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093dc:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f01093e2:	8d 48 01             	lea    0x1(%eax),%ecx
f01093e5:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f01093eb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f01093f1:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01093f7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093fd:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109403:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109409:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f010940f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109414:	f7 f3                	div    %ebx
f0109416:	89 d0                	mov    %edx,%eax
f0109418:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010941e:	83 ec 0c             	sub    $0xc,%esp
f0109421:	6a 02                	push   $0x2
f0109423:	e8 1b 44 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f0109428:	83 c4 10             	add    $0x10,%esp
f010942b:	85 c0                	test   %eax,%eax
f010942d:	0f 84 46 04 00 00    	je     f0109879 <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109433:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109439:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010943f:	89 d0                	mov    %edx,%eax
f0109441:	01 c0                	add    %eax,%eax
f0109443:	01 d0                	add    %edx,%eax
f0109445:	c1 e0 03             	shl    $0x3,%eax
f0109448:	05 b0 00 00 00       	add    $0xb0,%eax
f010944d:	01 c8                	add    %ecx,%eax
f010944f:	83 c0 08             	add    $0x8,%eax
f0109452:	85 c0                	test   %eax,%eax
f0109454:	75 17                	jne    f010946d <env_create+0x7a2>
f0109456:	83 ec 04             	sub    $0x4,%esp
f0109459:	68 19 31 13 f0       	push   $0xf0133119
f010945e:	68 67 01 00 00       	push   $0x167
f0109463:	68 b7 30 13 f0       	push   $0xf01330b7
f0109468:	e8 43 6d ff ff       	call   f01001b0 <_panic>
f010946d:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109473:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109479:	89 d0                	mov    %edx,%eax
f010947b:	01 c0                	add    %eax,%eax
f010947d:	01 d0                	add    %edx,%eax
f010947f:	c1 e0 03             	shl    $0x3,%eax
f0109482:	01 c8                	add    %ecx,%eax
f0109484:	05 c8 00 00 00       	add    $0xc8,%eax
f0109489:	8b 00                	mov    (%eax),%eax
f010948b:	85 c0                	test   %eax,%eax
f010948d:	74 41                	je     f01094d0 <env_create+0x805>
f010948f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109495:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010949b:	89 d0                	mov    %edx,%eax
f010949d:	01 c0                	add    %eax,%eax
f010949f:	01 d0                	add    %edx,%eax
f01094a1:	c1 e0 03             	shl    $0x3,%eax
f01094a4:	01 c8                	add    %ecx,%eax
f01094a6:	05 c8 00 00 00       	add    $0xc8,%eax
f01094ab:	8b 10                	mov    (%eax),%edx
f01094ad:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094b3:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094b9:	89 c8                	mov    %ecx,%eax
f01094bb:	01 c0                	add    %eax,%eax
f01094bd:	01 c8                	add    %ecx,%eax
f01094bf:	c1 e0 03             	shl    $0x3,%eax
f01094c2:	01 d8                	add    %ebx,%eax
f01094c4:	05 cc 00 00 00       	add    $0xcc,%eax
f01094c9:	8b 00                	mov    (%eax),%eax
f01094cb:	89 42 14             	mov    %eax,0x14(%edx)
f01094ce:	eb 2a                	jmp    f01094fa <env_create+0x82f>
f01094d0:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01094d6:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094dc:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094e2:	89 c8                	mov    %ecx,%eax
f01094e4:	01 c0                	add    %eax,%eax
f01094e6:	01 c8                	add    %ecx,%eax
f01094e8:	c1 e0 03             	shl    $0x3,%eax
f01094eb:	01 d8                	add    %ebx,%eax
f01094ed:	05 cc 00 00 00       	add    $0xcc,%eax
f01094f2:	8b 00                	mov    (%eax),%eax
f01094f4:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f01094fa:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109500:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109506:	89 d0                	mov    %edx,%eax
f0109508:	01 c0                	add    %eax,%eax
f010950a:	01 d0                	add    %edx,%eax
f010950c:	c1 e0 03             	shl    $0x3,%eax
f010950f:	01 c8                	add    %ecx,%eax
f0109511:	05 cc 00 00 00       	add    $0xcc,%eax
f0109516:	8b 00                	mov    (%eax),%eax
f0109518:	85 c0                	test   %eax,%eax
f010951a:	74 41                	je     f010955d <env_create+0x892>
f010951c:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109522:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109528:	89 d0                	mov    %edx,%eax
f010952a:	01 c0                	add    %eax,%eax
f010952c:	01 d0                	add    %edx,%eax
f010952e:	c1 e0 03             	shl    $0x3,%eax
f0109531:	01 c8                	add    %ecx,%eax
f0109533:	05 cc 00 00 00       	add    $0xcc,%eax
f0109538:	8b 10                	mov    (%eax),%edx
f010953a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109540:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109546:	89 c8                	mov    %ecx,%eax
f0109548:	01 c0                	add    %eax,%eax
f010954a:	01 c8                	add    %ecx,%eax
f010954c:	c1 e0 03             	shl    $0x3,%eax
f010954f:	01 d8                	add    %ebx,%eax
f0109551:	05 c8 00 00 00       	add    $0xc8,%eax
f0109556:	8b 00                	mov    (%eax),%eax
f0109558:	89 42 10             	mov    %eax,0x10(%edx)
f010955b:	eb 2a                	jmp    f0109587 <env_create+0x8bc>
f010955d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109563:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109569:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010956f:	89 c8                	mov    %ecx,%eax
f0109571:	01 c0                	add    %eax,%eax
f0109573:	01 c8                	add    %ecx,%eax
f0109575:	c1 e0 03             	shl    $0x3,%eax
f0109578:	01 d8                	add    %ebx,%eax
f010957a:	05 c8 00 00 00       	add    $0xc8,%eax
f010957f:	8b 00                	mov    (%eax),%eax
f0109581:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f0109587:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010958d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109593:	89 d0                	mov    %edx,%eax
f0109595:	01 c0                	add    %eax,%eax
f0109597:	01 d0                	add    %edx,%eax
f0109599:	c1 e0 03             	shl    $0x3,%eax
f010959c:	01 c8                	add    %ecx,%eax
f010959e:	05 c8 00 00 00       	add    $0xc8,%eax
f01095a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095a9:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01095af:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095b5:	89 d0                	mov    %edx,%eax
f01095b7:	01 c0                	add    %eax,%eax
f01095b9:	01 d0                	add    %edx,%eax
f01095bb:	c1 e0 03             	shl    $0x3,%eax
f01095be:	01 c8                	add    %ecx,%eax
f01095c0:	05 cc 00 00 00       	add    $0xcc,%eax
f01095c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095cb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095d1:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f01095d7:	4a                   	dec    %edx
f01095d8:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01095de:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095e4:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01095ea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095f0:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f01095f6:	39 c2                	cmp    %eax,%edx
f01095f8:	0f 83 40 01 00 00    	jae    f010973e <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01095fe:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109604:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010960a:	89 d0                	mov    %edx,%eax
f010960c:	01 c0                	add    %eax,%eax
f010960e:	01 d0                	add    %edx,%eax
f0109610:	c1 e0 03             	shl    $0x3,%eax
f0109613:	05 b0 00 00 00       	add    $0xb0,%eax
f0109618:	01 c8                	add    %ecx,%eax
f010961a:	83 c0 08             	add    $0x8,%eax
f010961d:	85 c0                	test   %eax,%eax
f010961f:	75 17                	jne    f0109638 <env_create+0x96d>
f0109621:	83 ec 04             	sub    $0x4,%esp
f0109624:	68 38 31 13 f0       	push   $0xf0133138
f0109629:	68 6c 01 00 00       	push   $0x16c
f010962e:	68 b7 30 13 f0       	push   $0xf01330b7
f0109633:	e8 78 6b ff ff       	call   f01001b0 <_panic>
f0109638:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010963e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109644:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010964a:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109650:	89 d8                	mov    %ebx,%eax
f0109652:	01 c0                	add    %eax,%eax
f0109654:	01 d8                	add    %ebx,%eax
f0109656:	c1 e0 03             	shl    $0x3,%eax
f0109659:	01 d0                	add    %edx,%eax
f010965b:	05 c8 00 00 00       	add    $0xc8,%eax
f0109660:	89 08                	mov    %ecx,(%eax)
f0109662:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109668:	89 c8                	mov    %ecx,%eax
f010966a:	01 c0                	add    %eax,%eax
f010966c:	01 c8                	add    %ecx,%eax
f010966e:	c1 e0 03             	shl    $0x3,%eax
f0109671:	01 d0                	add    %edx,%eax
f0109673:	05 c8 00 00 00       	add    $0xc8,%eax
f0109678:	8b 00                	mov    (%eax),%eax
f010967a:	85 c0                	test   %eax,%eax
f010967c:	74 30                	je     f01096ae <env_create+0x9e3>
f010967e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109684:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010968a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109690:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109696:	89 c8                	mov    %ecx,%eax
f0109698:	01 c0                	add    %eax,%eax
f010969a:	01 c8                	add    %ecx,%eax
f010969c:	c1 e0 03             	shl    $0x3,%eax
f010969f:	05 b0 00 00 00       	add    $0xb0,%eax
f01096a4:	01 d8                	add    %ebx,%eax
f01096a6:	83 c0 08             	add    $0x8,%eax
f01096a9:	89 42 14             	mov    %eax,0x14(%edx)
f01096ac:	eb 2b                	jmp    f01096d9 <env_create+0xa0e>
f01096ae:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096b4:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096ba:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096c0:	89 c8                	mov    %ecx,%eax
f01096c2:	01 c0                	add    %eax,%eax
f01096c4:	01 c8                	add    %ecx,%eax
f01096c6:	c1 e0 03             	shl    $0x3,%eax
f01096c9:	05 b0 00 00 00       	add    $0xb0,%eax
f01096ce:	01 d8                	add    %ebx,%eax
f01096d0:	83 c0 08             	add    $0x8,%eax
f01096d3:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f01096d9:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096df:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096e5:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096eb:	89 c8                	mov    %ecx,%eax
f01096ed:	01 c0                	add    %eax,%eax
f01096ef:	01 c8                	add    %ecx,%eax
f01096f1:	c1 e0 03             	shl    $0x3,%eax
f01096f4:	05 b0 00 00 00       	add    $0xb0,%eax
f01096f9:	01 d8                	add    %ebx,%eax
f01096fb:	83 c0 08             	add    $0x8,%eax
f01096fe:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f0109704:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010970a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109710:	89 d0                	mov    %edx,%eax
f0109712:	01 c0                	add    %eax,%eax
f0109714:	01 d0                	add    %edx,%eax
f0109716:	c1 e0 03             	shl    $0x3,%eax
f0109719:	01 c8                	add    %ecx,%eax
f010971b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109720:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109726:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010972c:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109732:	42                   	inc    %edx
f0109733:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f0109739:	e9 3b 01 00 00       	jmp    f0109879 <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010973e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109744:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010974a:	89 d0                	mov    %edx,%eax
f010974c:	01 c0                	add    %eax,%eax
f010974e:	01 d0                	add    %edx,%eax
f0109750:	c1 e0 03             	shl    $0x3,%eax
f0109753:	05 b0 00 00 00       	add    $0xb0,%eax
f0109758:	01 c8                	add    %ecx,%eax
f010975a:	83 c0 08             	add    $0x8,%eax
f010975d:	85 c0                	test   %eax,%eax
f010975f:	75 17                	jne    f0109778 <env_create+0xaad>
f0109761:	83 ec 04             	sub    $0x4,%esp
f0109764:	68 38 31 13 f0       	push   $0xf0133138
f0109769:	68 70 01 00 00       	push   $0x170
f010976e:	68 b7 30 13 f0       	push   $0xf01330b7
f0109773:	e8 38 6a ff ff       	call   f01001b0 <_panic>
f0109778:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010977e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109784:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010978a:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109790:	89 d8                	mov    %ebx,%eax
f0109792:	01 c0                	add    %eax,%eax
f0109794:	01 d8                	add    %ebx,%eax
f0109796:	c1 e0 03             	shl    $0x3,%eax
f0109799:	01 d0                	add    %edx,%eax
f010979b:	05 c8 00 00 00       	add    $0xc8,%eax
f01097a0:	89 08                	mov    %ecx,(%eax)
f01097a2:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097a8:	89 c8                	mov    %ecx,%eax
f01097aa:	01 c0                	add    %eax,%eax
f01097ac:	01 c8                	add    %ecx,%eax
f01097ae:	c1 e0 03             	shl    $0x3,%eax
f01097b1:	01 d0                	add    %edx,%eax
f01097b3:	05 c8 00 00 00       	add    $0xc8,%eax
f01097b8:	8b 00                	mov    (%eax),%eax
f01097ba:	85 c0                	test   %eax,%eax
f01097bc:	74 30                	je     f01097ee <env_create+0xb23>
f01097be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097c4:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f01097ca:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097d0:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097d6:	89 c8                	mov    %ecx,%eax
f01097d8:	01 c0                	add    %eax,%eax
f01097da:	01 c8                	add    %ecx,%eax
f01097dc:	c1 e0 03             	shl    $0x3,%eax
f01097df:	05 b0 00 00 00       	add    $0xb0,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	83 c0 08             	add    $0x8,%eax
f01097e9:	89 42 14             	mov    %eax,0x14(%edx)
f01097ec:	eb 2b                	jmp    f0109819 <env_create+0xb4e>
f01097ee:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01097f4:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097fa:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109800:	89 c8                	mov    %ecx,%eax
f0109802:	01 c0                	add    %eax,%eax
f0109804:	01 c8                	add    %ecx,%eax
f0109806:	c1 e0 03             	shl    $0x3,%eax
f0109809:	05 b0 00 00 00       	add    $0xb0,%eax
f010980e:	01 d8                	add    %ebx,%eax
f0109810:	83 c0 08             	add    $0x8,%eax
f0109813:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f0109819:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010981f:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109825:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010982b:	89 c8                	mov    %ecx,%eax
f010982d:	01 c0                	add    %eax,%eax
f010982f:	01 c8                	add    %ecx,%eax
f0109831:	c1 e0 03             	shl    $0x3,%eax
f0109834:	05 b0 00 00 00       	add    $0xb0,%eax
f0109839:	01 d8                	add    %ebx,%eax
f010983b:	83 c0 08             	add    $0x8,%eax
f010983e:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109844:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010984a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109850:	89 d0                	mov    %edx,%eax
f0109852:	01 c0                	add    %eax,%eax
f0109854:	01 d0                	add    %edx,%eax
f0109856:	c1 e0 03             	shl    $0x3,%eax
f0109859:	01 c8                	add    %ecx,%eax
f010985b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109860:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109866:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010986c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0109872:	42                   	inc    %edx
f0109873:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109879:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010987f:	83 ec 04             	sub    $0x4,%esp
f0109882:	6a 01                	push   $0x1
f0109884:	ff 75 c0             	pushl  -0x40(%ebp)
f0109887:	50                   	push   %eax
f0109888:	e8 08 a5 ff ff       	call   f0103d95 <pf_add_empty_env_page>
f010988d:	83 c4 10             	add    $0x10,%esp
f0109890:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109896:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010989d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01098a0:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f01098a6:	0f 83 b5 fa ff ff    	jae    f0109361 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01098ac:	83 ec 0c             	sub    $0xc,%esp
f01098af:	6a 02                	push   $0x2
f01098b1:	e8 8d 3f 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f01098b6:	83 c4 10             	add    $0x10,%esp
f01098b9:	85 c0                	test   %eax,%eax
f01098bb:	74 75                	je     f0109932 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f01098bd:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01098c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098ca:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01098d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098d3:	eb 2e                	jmp    f0109903 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01098d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01098d8:	8b 10                	mov    (%eax),%edx
f01098da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098e0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01098e6:	6a 01                	push   $0x1
f01098e8:	6a 00                	push   $0x0
f01098ea:	52                   	push   %edx
f01098eb:	50                   	push   %eax
f01098ec:	e8 2e e7 ff ff       	call   f010801f <pt_set_page_permissions>
f01098f1:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01098f4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098fa:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109900:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109903:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109909:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010990d:	74 08                	je     f0109917 <env_create+0xc4c>
f010990f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109912:	8b 52 10             	mov    0x10(%edx),%edx
f0109915:	eb 05                	jmp    f010991c <env_create+0xc51>
f0109917:	ba 00 00 00 00       	mov    $0x0,%edx
f010991c:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109922:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109928:	85 c0                	test   %eax,%eax
f010992a:	75 a9                	jne    f01098d5 <env_create+0xc0a>
f010992c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109930:	75 a3                	jne    f01098d5 <env_create+0xc0a>
f0109932:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109935:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0109938:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010993b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010993e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109944:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109947:	5b                   	pop    %ebx
f0109948:	5e                   	pop    %esi
f0109949:	5f                   	pop    %edi
f010994a:	5d                   	pop    %ebp
f010994b:	c3                   	ret    

f010994c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010994c:	55                   	push   %ebp
f010994d:	89 e5                	mov    %esp,%ebp
f010994f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109952:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109957:	3b 45 08             	cmp    0x8(%ebp),%eax
f010995a:	74 2e                	je     f010998a <env_run+0x3e>
	{
		curenv = e ;
f010995c:	8b 45 08             	mov    0x8(%ebp),%eax
f010995f:	a3 74 31 25 f0       	mov    %eax,0xf0253174
		curenv->env_runs++ ;
f0109964:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109969:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f010996f:	42                   	inc    %edx
f0109970:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109976:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010997b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109981:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109987:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010998a:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010998f:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109996:	e8 5c b1 ff ff       	call   f0104af7 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010999b:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01099a0:	83 ec 0c             	sub    $0xc,%esp
f01099a3:	50                   	push   %eax
f01099a4:	e8 f5 00 00 00       	call   f0109a9e <env_pop_tf>

f01099a9 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01099a9:	55                   	push   %ebp
f01099aa:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f01099ac:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f01099ad:	5d                   	pop    %ebp
f01099ae:	c3                   	ret    

f01099af <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01099af:	55                   	push   %ebp
f01099b0:	89 e5                	mov    %esp,%ebp
f01099b2:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01099b5:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01099ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01099bd:	83 ec 0c             	sub    $0xc,%esp
f01099c0:	50                   	push   %eax
f01099c1:	e8 0b ba ff ff       	call   f01053d1 <sched_exit_env>
f01099c6:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01099c9:	e8 4b c8 ff ff       	call   f0106219 <fos_scheduler>

f01099ce <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01099ce:	55                   	push   %ebp
f01099cf:	89 e5                	mov    %esp,%ebp
f01099d1:	53                   	push   %ebx
f01099d2:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01099d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01099d9:	75 15                	jne    f01099f0 <envid2env+0x22>
		*env_store = curenv;
f01099db:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f01099e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099e4:	89 10                	mov    %edx,(%eax)
		return 0;
f01099e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01099eb:	e9 a9 00 00 00       	jmp    f0109a99 <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01099f0:	8b 1d 70 31 25 f0    	mov    0xf0253170,%ebx
f01099f6:	83 ec 0c             	sub    $0xc,%esp
f01099f9:	6a 08                	push   $0x8
f01099fb:	e8 8b 43 02 00       	call   f012dd8b <nearest_pow2_ceil>
f0109a00:	83 c4 10             	add    $0x10,%esp
f0109a03:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a09:	21 c2                	and    %eax,%edx
f0109a0b:	89 d0                	mov    %edx,%eax
f0109a0d:	01 c0                	add    %eax,%eax
f0109a0f:	01 d0                	add    %edx,%eax
f0109a11:	01 c0                	add    %eax,%eax
f0109a13:	01 d0                	add    %edx,%eax
f0109a15:	c1 e0 02             	shl    $0x2,%eax
f0109a18:	01 d0                	add    %edx,%eax
f0109a1a:	01 c0                	add    %eax,%eax
f0109a1c:	01 d0                	add    %edx,%eax
f0109a1e:	c1 e0 02             	shl    $0x2,%eax
f0109a21:	01 d0                	add    %edx,%eax
f0109a23:	c1 e0 02             	shl    $0x2,%eax
f0109a26:	01 d0                	add    %edx,%eax
f0109a28:	c1 e0 02             	shl    $0x2,%eax
f0109a2b:	01 d0                	add    %edx,%eax
f0109a2d:	c1 e0 05             	shl    $0x5,%eax
f0109a30:	01 d8                	add    %ebx,%eax
f0109a32:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a38:	8b 40 54             	mov    0x54(%eax),%eax
f0109a3b:	85 c0                	test   %eax,%eax
f0109a3d:	74 0b                	je     f0109a4a <envid2env+0x7c>
f0109a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a42:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a45:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a48:	74 10                	je     f0109a5a <envid2env+0x8c>
		*env_store = 0;
f0109a4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a53:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a58:	eb 3f                	jmp    f0109a99 <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109a5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109a5e:	74 2c                	je     f0109a8c <envid2env+0xbe>
f0109a60:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a65:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109a68:	74 22                	je     f0109a8c <envid2env+0xbe>
f0109a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a6d:	8b 50 50             	mov    0x50(%eax),%edx
f0109a70:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a75:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a78:	39 c2                	cmp    %eax,%edx
f0109a7a:	74 10                	je     f0109a8c <envid2env+0xbe>
		*env_store = 0;
f0109a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a85:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a8a:	eb 0d                	jmp    f0109a99 <envid2env+0xcb>
	}

	*env_store = e;
f0109a8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a92:	89 10                	mov    %edx,(%eax)
	return 0;
f0109a94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109a99:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109a9c:	c9                   	leave  
f0109a9d:	c3                   	ret    

f0109a9e <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109a9e:	55                   	push   %ebp
f0109a9f:	89 e5                	mov    %esp,%ebp
f0109aa1:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109aa4:	8b 65 08             	mov    0x8(%ebp),%esp
f0109aa7:	61                   	popa   
f0109aa8:	07                   	pop    %es
f0109aa9:	1f                   	pop    %ds
f0109aaa:	83 c4 08             	add    $0x8,%esp
f0109aad:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109aae:	83 ec 04             	sub    $0x4,%esp
f0109ab1:	68 5b 31 13 f0       	push   $0xf013315b
f0109ab6:	68 23 02 00 00       	push   $0x223
f0109abb:	68 b7 30 13 f0       	push   $0xf01330b7
f0109ac0:	e8 eb 66 ff ff       	call   f01001b0 <_panic>

f0109ac5 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109ac5:	55                   	push   %ebp
f0109ac6:	89 e5                	mov    %esp,%ebp
f0109ac8:	53                   	push   %ebx
f0109ac9:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109acc:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109ad3:	e9 e3 01 00 00       	jmp    f0109cbb <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109ad8:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109ade:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ae1:	89 d0                	mov    %edx,%eax
f0109ae3:	01 c0                	add    %eax,%eax
f0109ae5:	01 d0                	add    %edx,%eax
f0109ae7:	01 c0                	add    %eax,%eax
f0109ae9:	01 d0                	add    %edx,%eax
f0109aeb:	c1 e0 02             	shl    $0x2,%eax
f0109aee:	01 d0                	add    %edx,%eax
f0109af0:	01 c0                	add    %eax,%eax
f0109af2:	01 d0                	add    %edx,%eax
f0109af4:	c1 e0 02             	shl    $0x2,%eax
f0109af7:	01 d0                	add    %edx,%eax
f0109af9:	c1 e0 02             	shl    $0x2,%eax
f0109afc:	01 d0                	add    %edx,%eax
f0109afe:	c1 e0 02             	shl    $0x2,%eax
f0109b01:	01 d0                	add    %edx,%eax
f0109b03:	c1 e0 05             	shl    $0x5,%eax
f0109b06:	01 c8                	add    %ecx,%eax
f0109b08:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109b0f:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b18:	89 d0                	mov    %edx,%eax
f0109b1a:	01 c0                	add    %eax,%eax
f0109b1c:	01 d0                	add    %edx,%eax
f0109b1e:	01 c0                	add    %eax,%eax
f0109b20:	01 d0                	add    %edx,%eax
f0109b22:	c1 e0 02             	shl    $0x2,%eax
f0109b25:	01 d0                	add    %edx,%eax
f0109b27:	01 c0                	add    %eax,%eax
f0109b29:	01 d0                	add    %edx,%eax
f0109b2b:	c1 e0 02             	shl    $0x2,%eax
f0109b2e:	01 d0                	add    %edx,%eax
f0109b30:	c1 e0 02             	shl    $0x2,%eax
f0109b33:	01 d0                	add    %edx,%eax
f0109b35:	c1 e0 02             	shl    $0x2,%eax
f0109b38:	01 d0                	add    %edx,%eax
f0109b3a:	c1 e0 05             	shl    $0x5,%eax
f0109b3d:	01 c8                	add    %ecx,%eax
f0109b3f:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109b46:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b4f:	89 d0                	mov    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	01 c0                	add    %eax,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 02             	shl    $0x2,%eax
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	01 c0                	add    %eax,%eax
f0109b60:	01 d0                	add    %edx,%eax
f0109b62:	c1 e0 02             	shl    $0x2,%eax
f0109b65:	01 d0                	add    %edx,%eax
f0109b67:	c1 e0 02             	shl    $0x2,%eax
f0109b6a:	01 d0                	add    %edx,%eax
f0109b6c:	c1 e0 02             	shl    $0x2,%eax
f0109b6f:	01 d0                	add    %edx,%eax
f0109b71:	c1 e0 05             	shl    $0x5,%eax
f0109b74:	01 c8                	add    %ecx,%eax
f0109b76:	85 c0                	test   %eax,%eax
f0109b78:	75 17                	jne    f0109b91 <env_init+0xcc>
f0109b7a:	83 ec 04             	sub    $0x4,%esp
f0109b7d:	68 38 31 13 f0       	push   $0xf0133138
f0109b82:	68 3f 02 00 00       	push   $0x23f
f0109b87:	68 b7 30 13 f0       	push   $0xf01330b7
f0109b8c:	e8 1f 66 ff ff       	call   f01001b0 <_panic>
f0109b91:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b9a:	89 d0                	mov    %edx,%eax
f0109b9c:	01 c0                	add    %eax,%eax
f0109b9e:	01 d0                	add    %edx,%eax
f0109ba0:	01 c0                	add    %eax,%eax
f0109ba2:	01 d0                	add    %edx,%eax
f0109ba4:	c1 e0 02             	shl    $0x2,%eax
f0109ba7:	01 d0                	add    %edx,%eax
f0109ba9:	01 c0                	add    %eax,%eax
f0109bab:	01 d0                	add    %edx,%eax
f0109bad:	c1 e0 02             	shl    $0x2,%eax
f0109bb0:	01 d0                	add    %edx,%eax
f0109bb2:	c1 e0 02             	shl    $0x2,%eax
f0109bb5:	01 d0                	add    %edx,%eax
f0109bb7:	c1 e0 02             	shl    $0x2,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 05             	shl    $0x5,%eax
f0109bbf:	01 c8                	add    %ecx,%eax
f0109bc1:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109bc7:	89 50 44             	mov    %edx,0x44(%eax)
f0109bca:	8b 40 44             	mov    0x44(%eax),%eax
f0109bcd:	85 c0                	test   %eax,%eax
f0109bcf:	74 3b                	je     f0109c0c <env_init+0x147>
f0109bd1:	8b 0d 78 31 25 f0    	mov    0xf0253178,%ecx
f0109bd7:	8b 1d 70 31 25 f0    	mov    0xf0253170,%ebx
f0109bdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109be0:	89 d0                	mov    %edx,%eax
f0109be2:	01 c0                	add    %eax,%eax
f0109be4:	01 d0                	add    %edx,%eax
f0109be6:	01 c0                	add    %eax,%eax
f0109be8:	01 d0                	add    %edx,%eax
f0109bea:	c1 e0 02             	shl    $0x2,%eax
f0109bed:	01 d0                	add    %edx,%eax
f0109bef:	01 c0                	add    %eax,%eax
f0109bf1:	01 d0                	add    %edx,%eax
f0109bf3:	c1 e0 02             	shl    $0x2,%eax
f0109bf6:	01 d0                	add    %edx,%eax
f0109bf8:	c1 e0 02             	shl    $0x2,%eax
f0109bfb:	01 d0                	add    %edx,%eax
f0109bfd:	c1 e0 02             	shl    $0x2,%eax
f0109c00:	01 d0                	add    %edx,%eax
f0109c02:	c1 e0 05             	shl    $0x5,%eax
f0109c05:	01 d8                	add    %ebx,%eax
f0109c07:	89 41 48             	mov    %eax,0x48(%ecx)
f0109c0a:	eb 35                	jmp    f0109c41 <env_init+0x17c>
f0109c0c:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c15:	89 d0                	mov    %edx,%eax
f0109c17:	01 c0                	add    %eax,%eax
f0109c19:	01 d0                	add    %edx,%eax
f0109c1b:	01 c0                	add    %eax,%eax
f0109c1d:	01 d0                	add    %edx,%eax
f0109c1f:	c1 e0 02             	shl    $0x2,%eax
f0109c22:	01 d0                	add    %edx,%eax
f0109c24:	01 c0                	add    %eax,%eax
f0109c26:	01 d0                	add    %edx,%eax
f0109c28:	c1 e0 02             	shl    $0x2,%eax
f0109c2b:	01 d0                	add    %edx,%eax
f0109c2d:	c1 e0 02             	shl    $0x2,%eax
f0109c30:	01 d0                	add    %edx,%eax
f0109c32:	c1 e0 02             	shl    $0x2,%eax
f0109c35:	01 d0                	add    %edx,%eax
f0109c37:	c1 e0 05             	shl    $0x5,%eax
f0109c3a:	01 c8                	add    %ecx,%eax
f0109c3c:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f0109c41:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c4a:	89 d0                	mov    %edx,%eax
f0109c4c:	01 c0                	add    %eax,%eax
f0109c4e:	01 d0                	add    %edx,%eax
f0109c50:	01 c0                	add    %eax,%eax
f0109c52:	01 d0                	add    %edx,%eax
f0109c54:	c1 e0 02             	shl    $0x2,%eax
f0109c57:	01 d0                	add    %edx,%eax
f0109c59:	01 c0                	add    %eax,%eax
f0109c5b:	01 d0                	add    %edx,%eax
f0109c5d:	c1 e0 02             	shl    $0x2,%eax
f0109c60:	01 d0                	add    %edx,%eax
f0109c62:	c1 e0 02             	shl    $0x2,%eax
f0109c65:	01 d0                	add    %edx,%eax
f0109c67:	c1 e0 02             	shl    $0x2,%eax
f0109c6a:	01 d0                	add    %edx,%eax
f0109c6c:	c1 e0 05             	shl    $0x5,%eax
f0109c6f:	01 c8                	add    %ecx,%eax
f0109c71:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f0109c76:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c7f:	89 d0                	mov    %edx,%eax
f0109c81:	01 c0                	add    %eax,%eax
f0109c83:	01 d0                	add    %edx,%eax
f0109c85:	01 c0                	add    %eax,%eax
f0109c87:	01 d0                	add    %edx,%eax
f0109c89:	c1 e0 02             	shl    $0x2,%eax
f0109c8c:	01 d0                	add    %edx,%eax
f0109c8e:	01 c0                	add    %eax,%eax
f0109c90:	01 d0                	add    %edx,%eax
f0109c92:	c1 e0 02             	shl    $0x2,%eax
f0109c95:	01 d0                	add    %edx,%eax
f0109c97:	c1 e0 02             	shl    $0x2,%eax
f0109c9a:	01 d0                	add    %edx,%eax
f0109c9c:	c1 e0 02             	shl    $0x2,%eax
f0109c9f:	01 d0                	add    %edx,%eax
f0109ca1:	c1 e0 05             	shl    $0x5,%eax
f0109ca4:	01 c8                	add    %ecx,%eax
f0109ca6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109cad:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f0109cb2:	40                   	inc    %eax
f0109cb3:	a3 84 31 25 f0       	mov    %eax,0xf0253184
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109cb8:	ff 4d f4             	decl   -0xc(%ebp)
f0109cbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cbf:	0f 89 13 fe ff ff    	jns    f0109ad8 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109cc5:	90                   	nop
f0109cc6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109cc9:	c9                   	leave  
f0109cca:	c3                   	ret    

f0109ccb <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109ccb:	55                   	push   %ebp
f0109ccc:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109cce:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109cd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd7:	89 10                	mov    %edx,(%eax)
f0109cd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cdc:	8b 00                	mov    (%eax),%eax
f0109cde:	85 c0                	test   %eax,%eax
f0109ce0:	75 07                	jne    f0109ce9 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109ce2:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109ce7:	eb 11                	jmp    f0109cfa <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109ce9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cec:	8b 00                	mov    (%eax),%eax
f0109cee:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109cfa:	5d                   	pop    %ebp
f0109cfb:	c3                   	ret    

f0109cfc <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109cfc:	55                   	push   %ebp
f0109cfd:	89 e5                	mov    %esp,%ebp
f0109cff:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109d02:	83 ec 04             	sub    $0x4,%esp
f0109d05:	68 a0 da 01 00       	push   $0x1daa0
f0109d0a:	6a 00                	push   $0x0
f0109d0c:	ff 75 08             	pushl  0x8(%ebp)
f0109d0f:	e8 da 54 02 00       	call   f012f1ee <memset>
f0109d14:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109d17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d1a:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109d21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d25:	75 17                	jne    f0109d3e <free_environment+0x42>
f0109d27:	83 ec 04             	sub    $0x4,%esp
f0109d2a:	68 38 31 13 f0       	push   $0xf0133138
f0109d2f:	68 5c 02 00 00       	push   $0x25c
f0109d34:	68 b7 30 13 f0       	push   $0xf01330b7
f0109d39:	e8 72 64 ff ff       	call   f01001b0 <_panic>
f0109d3e:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d47:	89 50 44             	mov    %edx,0x44(%eax)
f0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4d:	8b 40 44             	mov    0x44(%eax),%eax
f0109d50:	85 c0                	test   %eax,%eax
f0109d52:	74 0d                	je     f0109d61 <free_environment+0x65>
f0109d54:	a1 78 31 25 f0       	mov    0xf0253178,%eax
f0109d59:	8b 55 08             	mov    0x8(%ebp),%edx
f0109d5c:	89 50 48             	mov    %edx,0x48(%eax)
f0109d5f:	eb 08                	jmp    f0109d69 <free_environment+0x6d>
f0109d61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d64:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f0109d69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6c:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f0109d71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d74:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d7b:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f0109d80:	40                   	inc    %eax
f0109d81:	a3 84 31 25 f0       	mov    %eax,0xf0253184
}
f0109d86:	90                   	nop
f0109d87:	c9                   	leave  
f0109d88:	c3                   	ret    

f0109d89 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109d89:	55                   	push   %ebp
f0109d8a:	89 e5                	mov    %esp,%ebp
f0109d8c:	53                   	push   %ebx
f0109d8d:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109d90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d93:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109d99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d9c:	8b 40 08             	mov    0x8(%eax),%eax
f0109d9f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109da2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109da9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109dac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109daf:	01 c2                	add    %eax,%edx
f0109db1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109db4:	01 d0                	add    %edx,%eax
f0109db6:	48                   	dec    %eax
f0109db7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109dba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0109dc2:	f7 75 dc             	divl   -0x24(%ebp)
f0109dc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109dc8:	29 d0                	sub    %edx,%eax
f0109dca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109dd0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109dd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109dd6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109dde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109de5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109dec:	8b 45 10             	mov    0x10(%ebp),%eax
f0109def:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109df5:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109dfc:	0f 85 38 06 00 00    	jne    f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
f0109e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e05:	83 c0 5c             	add    $0x5c,%eax
f0109e08:	83 ec 08             	sub    $0x8,%esp
f0109e0b:	68 67 31 13 f0       	push   $0xf0133167
f0109e10:	50                   	push   %eax
f0109e11:	e8 f6 52 02 00       	call   f012f10c <strcmp>
f0109e16:	83 c4 10             	add    $0x10,%esp
f0109e19:	85 c0                	test   %eax,%eax
f0109e1b:	0f 84 19 06 00 00    	je     f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109e21:	8b 45 14             	mov    0x14(%ebp),%eax
f0109e24:	83 f8 06             	cmp    $0x6,%eax
f0109e27:	76 05                	jbe    f0109e2e <program_segment_alloc_map_copy_workingset+0xa5>
f0109e29:	b8 06 00 00 00       	mov    $0x6,%eax
f0109e2e:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109e31:	e9 04 06 00 00       	jmp    f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109e36:	83 ec 0c             	sub    $0xc,%esp
f0109e39:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109e3c:	50                   	push   %eax
f0109e3d:	e8 e3 d4 ff ff       	call   f0107325 <allocate_frame>
f0109e42:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109e45:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109e51:	6a 06                	push   $0x6
f0109e53:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e56:	52                   	push   %edx
f0109e57:	50                   	push   %eax
f0109e58:	e8 19 da ff ff       	call   f0107876 <loadtime_map_frame>
f0109e5d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109e60:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e63:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e69:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e6c:	89 d0                	mov    %edx,%eax
f0109e6e:	01 c0                	add    %eax,%eax
f0109e70:	01 d0                	add    %edx,%eax
f0109e72:	c1 e0 03             	shl    $0x3,%eax
f0109e75:	01 c8                	add    %ecx,%eax
f0109e77:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e80:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109e82:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e85:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e8b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e8e:	89 d0                	mov    %edx,%eax
f0109e90:	01 c0                	add    %eax,%eax
f0109e92:	01 d0                	add    %edx,%eax
f0109e94:	c1 e0 03             	shl    $0x3,%eax
f0109e97:	01 c8                	add    %ecx,%eax
f0109e99:	05 bc 00 00 00       	add    $0xbc,%eax
f0109e9e:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109eaa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ead:	89 d0                	mov    %edx,%eax
f0109eaf:	01 c0                	add    %eax,%eax
f0109eb1:	01 d0                	add    %edx,%eax
f0109eb3:	c1 e0 03             	shl    $0x3,%eax
f0109eb6:	01 c8                	add    %ecx,%eax
f0109eb8:	05 c0 00 00 00       	add    $0xc0,%eax
f0109ebd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109ec3:	83 ec 0c             	sub    $0xc,%esp
f0109ec6:	6a 02                	push   $0x2
f0109ec8:	e8 76 39 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f0109ecd:	83 c4 10             	add    $0x10,%esp
f0109ed0:	85 c0                	test   %eax,%eax
f0109ed2:	0f 84 2c 04 00 00    	je     f010a304 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109edb:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ee1:	89 d0                	mov    %edx,%eax
f0109ee3:	01 c0                	add    %eax,%eax
f0109ee5:	01 d0                	add    %edx,%eax
f0109ee7:	c1 e0 03             	shl    $0x3,%eax
f0109eea:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef3:	01 d0                	add    %edx,%eax
f0109ef5:	83 c0 08             	add    $0x8,%eax
f0109ef8:	85 c0                	test   %eax,%eax
f0109efa:	75 17                	jne    f0109f13 <program_segment_alloc_map_copy_workingset+0x18a>
f0109efc:	83 ec 04             	sub    $0x4,%esp
f0109eff:	68 19 31 13 f0       	push   $0xf0133119
f0109f04:	68 9f 02 00 00       	push   $0x29f
f0109f09:	68 b7 30 13 f0       	push   $0xf01330b7
f0109f0e:	e8 9d 62 ff ff       	call   f01001b0 <_panic>
f0109f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f16:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f1c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f1f:	89 d0                	mov    %edx,%eax
f0109f21:	01 c0                	add    %eax,%eax
f0109f23:	01 d0                	add    %edx,%eax
f0109f25:	c1 e0 03             	shl    $0x3,%eax
f0109f28:	01 c8                	add    %ecx,%eax
f0109f2a:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f2f:	8b 00                	mov    (%eax),%eax
f0109f31:	85 c0                	test   %eax,%eax
f0109f33:	74 41                	je     f0109f76 <program_segment_alloc_map_copy_workingset+0x1ed>
f0109f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f38:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f3e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f41:	89 d0                	mov    %edx,%eax
f0109f43:	01 c0                	add    %eax,%eax
f0109f45:	01 d0                	add    %edx,%eax
f0109f47:	c1 e0 03             	shl    $0x3,%eax
f0109f4a:	01 c8                	add    %ecx,%eax
f0109f4c:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f51:	8b 10                	mov    (%eax),%edx
f0109f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f56:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109f5c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109f5f:	89 c8                	mov    %ecx,%eax
f0109f61:	01 c0                	add    %eax,%eax
f0109f63:	01 c8                	add    %ecx,%eax
f0109f65:	c1 e0 03             	shl    $0x3,%eax
f0109f68:	01 d8                	add    %ebx,%eax
f0109f6a:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f6f:	8b 00                	mov    (%eax),%eax
f0109f71:	89 42 14             	mov    %eax,0x14(%edx)
f0109f74:	eb 27                	jmp    f0109f9d <program_segment_alloc_map_copy_workingset+0x214>
f0109f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f79:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f7f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f82:	89 d0                	mov    %edx,%eax
f0109f84:	01 c0                	add    %eax,%eax
f0109f86:	01 d0                	add    %edx,%eax
f0109f88:	c1 e0 03             	shl    $0x3,%eax
f0109f8b:	01 c8                	add    %ecx,%eax
f0109f8d:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f92:	8b 10                	mov    (%eax),%edx
f0109f94:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f97:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109f9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fa6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fa9:	89 d0                	mov    %edx,%eax
f0109fab:	01 c0                	add    %eax,%eax
f0109fad:	01 d0                	add    %edx,%eax
f0109faf:	c1 e0 03             	shl    $0x3,%eax
f0109fb2:	01 c8                	add    %ecx,%eax
f0109fb4:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fb9:	8b 00                	mov    (%eax),%eax
f0109fbb:	85 c0                	test   %eax,%eax
f0109fbd:	74 41                	je     f010a000 <program_segment_alloc_map_copy_workingset+0x277>
f0109fbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fc8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fcb:	89 d0                	mov    %edx,%eax
f0109fcd:	01 c0                	add    %eax,%eax
f0109fcf:	01 d0                	add    %edx,%eax
f0109fd1:	c1 e0 03             	shl    $0x3,%eax
f0109fd4:	01 c8                	add    %ecx,%eax
f0109fd6:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fdb:	8b 10                	mov    (%eax),%edx
f0109fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe0:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109fe6:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109fe9:	89 c8                	mov    %ecx,%eax
f0109feb:	01 c0                	add    %eax,%eax
f0109fed:	01 c8                	add    %ecx,%eax
f0109fef:	c1 e0 03             	shl    $0x3,%eax
f0109ff2:	01 d8                	add    %ebx,%eax
f0109ff4:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ff9:	8b 00                	mov    (%eax),%eax
f0109ffb:	89 42 10             	mov    %eax,0x10(%edx)
f0109ffe:	eb 27                	jmp    f010a027 <program_segment_alloc_map_copy_workingset+0x29e>
f010a000:	8b 45 08             	mov    0x8(%ebp),%eax
f010a003:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a009:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a00c:	89 d0                	mov    %edx,%eax
f010a00e:	01 c0                	add    %eax,%eax
f010a010:	01 d0                	add    %edx,%eax
f010a012:	c1 e0 03             	shl    $0x3,%eax
f010a015:	01 c8                	add    %ecx,%eax
f010a017:	05 c8 00 00 00       	add    $0xc8,%eax
f010a01c:	8b 10                	mov    (%eax),%edx
f010a01e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a021:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a027:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a030:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 c8 00 00 00       	add    $0xc8,%eax
f010a043:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a049:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a052:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a055:	89 d0                	mov    %edx,%eax
f010a057:	01 c0                	add    %eax,%eax
f010a059:	01 d0                	add    %edx,%eax
f010a05b:	c1 e0 03             	shl    $0x3,%eax
f010a05e:	01 c8                	add    %ecx,%eax
f010a060:	05 cc 00 00 00       	add    $0xcc,%eax
f010a065:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a06b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a06e:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a074:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a077:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07a:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a080:	8b 45 08             	mov    0x8(%ebp),%eax
f010a083:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a089:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a092:	48                   	dec    %eax
f010a093:	39 c2                	cmp    %eax,%edx
f010a095:	0f 83 37 01 00 00    	jae    f010a1d2 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a09b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a09e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0a4:	89 d0                	mov    %edx,%eax
f010a0a6:	01 c0                	add    %eax,%eax
f010a0a8:	01 d0                	add    %edx,%eax
f010a0aa:	c1 e0 03             	shl    $0x3,%eax
f010a0ad:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a0b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b6:	01 d0                	add    %edx,%eax
f010a0b8:	83 c0 08             	add    $0x8,%eax
f010a0bb:	85 c0                	test   %eax,%eax
f010a0bd:	75 17                	jne    f010a0d6 <program_segment_alloc_map_copy_workingset+0x34d>
f010a0bf:	83 ec 04             	sub    $0x4,%esp
f010a0c2:	68 38 31 13 f0       	push   $0xf0133138
f010a0c7:	68 a3 02 00 00       	push   $0x2a3
f010a0cc:	68 b7 30 13 f0       	push   $0xf01330b7
f010a0d1:	e8 da 60 ff ff       	call   f01001b0 <_panic>
f010a0d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d9:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e2:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a0e8:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a0eb:	89 d0                	mov    %edx,%eax
f010a0ed:	01 c0                	add    %eax,%eax
f010a0ef:	01 d0                	add    %edx,%eax
f010a0f1:	c1 e0 03             	shl    $0x3,%eax
f010a0f4:	01 d8                	add    %ebx,%eax
f010a0f6:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0fb:	89 08                	mov    %ecx,(%eax)
f010a0fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a100:	89 d0                	mov    %edx,%eax
f010a102:	01 c0                	add    %eax,%eax
f010a104:	01 d0                	add    %edx,%eax
f010a106:	c1 e0 03             	shl    $0x3,%eax
f010a109:	01 c8                	add    %ecx,%eax
f010a10b:	05 c8 00 00 00       	add    $0xc8,%eax
f010a110:	8b 00                	mov    (%eax),%eax
f010a112:	85 c0                	test   %eax,%eax
f010a114:	74 2e                	je     f010a144 <program_segment_alloc_map_copy_workingset+0x3bb>
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a11f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a122:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a128:	89 c8                	mov    %ecx,%eax
f010a12a:	01 c0                	add    %eax,%eax
f010a12c:	01 c8                	add    %ecx,%eax
f010a12e:	c1 e0 03             	shl    $0x3,%eax
f010a131:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a137:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13a:	01 c8                	add    %ecx,%eax
f010a13c:	83 c0 08             	add    $0x8,%eax
f010a13f:	89 42 14             	mov    %eax,0x14(%edx)
f010a142:	eb 29                	jmp    f010a16d <program_segment_alloc_map_copy_workingset+0x3e4>
f010a144:	8b 45 08             	mov    0x8(%ebp),%eax
f010a147:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a14d:	89 d0                	mov    %edx,%eax
f010a14f:	01 c0                	add    %eax,%eax
f010a151:	01 d0                	add    %edx,%eax
f010a153:	c1 e0 03             	shl    $0x3,%eax
f010a156:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a15c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15f:	01 d0                	add    %edx,%eax
f010a161:	8d 50 08             	lea    0x8(%eax),%edx
f010a164:	8b 45 08             	mov    0x8(%ebp),%eax
f010a167:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a16d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a170:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a176:	89 d0                	mov    %edx,%eax
f010a178:	01 c0                	add    %eax,%eax
f010a17a:	01 d0                	add    %edx,%eax
f010a17c:	c1 e0 03             	shl    $0x3,%eax
f010a17f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a185:	8b 45 08             	mov    0x8(%ebp),%eax
f010a188:	01 d0                	add    %edx,%eax
f010a18a:	8d 50 08             	lea    0x8(%eax),%edx
f010a18d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a190:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a196:	8b 45 08             	mov    0x8(%ebp),%eax
f010a199:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a19f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1a2:	89 d0                	mov    %edx,%eax
f010a1a4:	01 c0                	add    %eax,%eax
f010a1a6:	01 d0                	add    %edx,%eax
f010a1a8:	c1 e0 03             	shl    $0x3,%eax
f010a1ab:	01 c8                	add    %ecx,%eax
f010a1ad:	05 cc 00 00 00       	add    $0xcc,%eax
f010a1b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a1c1:	8d 50 01             	lea    0x1(%eax),%edx
f010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c7:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a1cd:	e9 32 01 00 00       	jmp    f010a304 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d5:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1db:	89 d0                	mov    %edx,%eax
f010a1dd:	01 c0                	add    %eax,%eax
f010a1df:	01 d0                	add    %edx,%eax
f010a1e1:	c1 e0 03             	shl    $0x3,%eax
f010a1e4:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a1ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ed:	01 d0                	add    %edx,%eax
f010a1ef:	83 c0 08             	add    $0x8,%eax
f010a1f2:	85 c0                	test   %eax,%eax
f010a1f4:	75 17                	jne    f010a20d <program_segment_alloc_map_copy_workingset+0x484>
f010a1f6:	83 ec 04             	sub    $0x4,%esp
f010a1f9:	68 38 31 13 f0       	push   $0xf0133138
f010a1fe:	68 a8 02 00 00       	push   $0x2a8
f010a203:	68 b7 30 13 f0       	push   $0xf01330b7
f010a208:	e8 a3 5f ff ff       	call   f01001b0 <_panic>
f010a20d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a210:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a216:	8b 45 08             	mov    0x8(%ebp),%eax
f010a219:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a21f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a222:	89 d0                	mov    %edx,%eax
f010a224:	01 c0                	add    %eax,%eax
f010a226:	01 d0                	add    %edx,%eax
f010a228:	c1 e0 03             	shl    $0x3,%eax
f010a22b:	01 d8                	add    %ebx,%eax
f010a22d:	05 c8 00 00 00       	add    $0xc8,%eax
f010a232:	89 08                	mov    %ecx,(%eax)
f010a234:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a237:	89 d0                	mov    %edx,%eax
f010a239:	01 c0                	add    %eax,%eax
f010a23b:	01 d0                	add    %edx,%eax
f010a23d:	c1 e0 03             	shl    $0x3,%eax
f010a240:	01 c8                	add    %ecx,%eax
f010a242:	05 c8 00 00 00       	add    $0xc8,%eax
f010a247:	8b 00                	mov    (%eax),%eax
f010a249:	85 c0                	test   %eax,%eax
f010a24b:	74 2e                	je     f010a27b <program_segment_alloc_map_copy_workingset+0x4f2>
f010a24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a250:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a256:	8b 45 08             	mov    0x8(%ebp),%eax
f010a259:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a25f:	89 c8                	mov    %ecx,%eax
f010a261:	01 c0                	add    %eax,%eax
f010a263:	01 c8                	add    %ecx,%eax
f010a265:	c1 e0 03             	shl    $0x3,%eax
f010a268:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a26e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a271:	01 c8                	add    %ecx,%eax
f010a273:	83 c0 08             	add    $0x8,%eax
f010a276:	89 42 14             	mov    %eax,0x14(%edx)
f010a279:	eb 29                	jmp    f010a2a4 <program_segment_alloc_map_copy_workingset+0x51b>
f010a27b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a284:	89 d0                	mov    %edx,%eax
f010a286:	01 c0                	add    %eax,%eax
f010a288:	01 d0                	add    %edx,%eax
f010a28a:	c1 e0 03             	shl    $0x3,%eax
f010a28d:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	01 d0                	add    %edx,%eax
f010a298:	8d 50 08             	lea    0x8(%eax),%edx
f010a29b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29e:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a2a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a7:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2ad:	89 d0                	mov    %edx,%eax
f010a2af:	01 c0                	add    %eax,%eax
f010a2b1:	01 d0                	add    %edx,%eax
f010a2b3:	c1 e0 03             	shl    $0x3,%eax
f010a2b6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2bf:	01 d0                	add    %edx,%eax
f010a2c1:	8d 50 08             	lea    0x8(%eax),%edx
f010a2c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c7:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2d6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2d9:	89 d0                	mov    %edx,%eax
f010a2db:	01 c0                	add    %eax,%eax
f010a2dd:	01 d0                	add    %edx,%eax
f010a2df:	c1 e0 03             	shl    $0x3,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	05 cc 00 00 00       	add    $0xcc,%eax
f010a2e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f2:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a2f8:	8d 50 01             	lea    0x1(%eax),%edx
f010a2fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fe:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a304:	8b 45 08             	mov    0x8(%ebp),%eax
f010a307:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a30d:	8d 50 01             	lea    0x1(%eax),%edx
f010a310:	8b 45 08             	mov    0x8(%ebp),%eax
f010a313:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a319:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31c:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a322:	8b 55 08             	mov    0x8(%ebp),%edx
f010a325:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a32b:	ba 00 00 00 00       	mov    $0x0,%edx
f010a330:	f7 f1                	div    %ecx
f010a332:	8b 45 08             	mov    0x8(%ebp),%eax
f010a335:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a33e:	c1 e8 16             	shr    $0x16,%eax
f010a341:	89 c2                	mov    %eax,%edx
f010a343:	8b 45 18             	mov    0x18(%ebp),%eax
f010a346:	8b 00                	mov    (%eax),%eax
f010a348:	39 c2                	cmp    %eax,%edx
f010a34a:	0f 84 d3 00 00 00    	je     f010a423 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a350:	8b 45 08             	mov    0x8(%ebp),%eax
f010a353:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a359:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a35c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a35f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a362:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a367:	89 c1                	mov    %eax,%ecx
f010a369:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a36c:	89 d0                	mov    %edx,%eax
f010a36e:	01 c0                	add    %eax,%eax
f010a370:	01 d0                	add    %edx,%eax
f010a372:	c1 e0 03             	shl    $0x3,%eax
f010a375:	01 d8                	add    %ebx,%eax
f010a377:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a37c:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a381:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a387:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a38a:	89 d0                	mov    %edx,%eax
f010a38c:	01 c0                	add    %eax,%eax
f010a38e:	01 d0                	add    %edx,%eax
f010a390:	c1 e0 03             	shl    $0x3,%eax
f010a393:	01 c8                	add    %ecx,%eax
f010a395:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a39a:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a39d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a0:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a3a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3a9:	89 d0                	mov    %edx,%eax
f010a3ab:	01 c0                	add    %eax,%eax
f010a3ad:	01 d0                	add    %edx,%eax
f010a3af:	c1 e0 03             	shl    $0x3,%eax
f010a3b2:	01 c8                	add    %ecx,%eax
f010a3b4:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a3b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a3bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c2:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3c8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ce:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a3d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3dd:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3e7:	f7 f1                	div    %ecx
f010a3e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ec:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a3f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f5:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3fb:	85 c0                	test   %eax,%eax
f010a3fd:	75 17                	jne    f010a416 <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a3ff:	83 ec 04             	sub    $0x4,%esp
f010a402:	68 6c 31 13 f0       	push   $0xf013316c
f010a407:	68 c3 02 00 00       	push   $0x2c3
f010a40c:	68 b7 30 13 f0       	push   $0xf01330b7
f010a411:	e8 9a 5d ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a419:	c1 e8 16             	shr    $0x16,%eax
f010a41c:	89 c2                	mov    %eax,%edx
f010a41e:	8b 45 18             	mov    0x18(%ebp),%eax
f010a421:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a423:	8b 45 10             	mov    0x10(%ebp),%eax
f010a426:	8b 00                	mov    (%eax),%eax
f010a428:	8d 50 01             	lea    0x1(%eax),%edx
f010a42b:	8b 45 10             	mov    0x10(%ebp),%eax
f010a42e:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a430:	ff 45 f0             	incl   -0x10(%ebp)
f010a433:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a43a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a43d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a440:	73 0c                	jae    f010a44e <program_segment_alloc_map_copy_workingset+0x6c5>
f010a442:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a445:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a448:	0f 82 e8 f9 ff ff    	jb     f0109e36 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a44e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a451:	8b 00                	mov    (%eax),%eax
f010a453:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a456:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a459:	8b 40 0c             	mov    0xc(%eax),%eax
f010a45c:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a45f:	eb 10                	jmp    f010a471 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a461:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a464:	8a 10                	mov    (%eax),%dl
f010a466:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a469:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a46b:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a46e:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a471:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a474:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a477:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a47a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a47f:	89 c2                	mov    %eax,%edx
f010a481:	8b 45 10             	mov    0x10(%ebp),%eax
f010a484:	8b 00                	mov    (%eax),%eax
f010a486:	c1 e0 0c             	shl    $0xc,%eax
f010a489:	01 c2                	add    %eax,%edx
f010a48b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a48e:	39 c2                	cmp    %eax,%edx
f010a490:	76 1d                	jbe    f010a4af <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a492:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a495:	8b 50 04             	mov    0x4(%eax),%edx
f010a498:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a49b:	01 c2                	add    %eax,%edx
f010a49d:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a4a0:	39 c2                	cmp    %eax,%edx
f010a4a2:	77 bd                	ja     f010a461 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4a4:	eb 09                	jmp    f010a4af <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a4a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4a9:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a4ac:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a4b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a4b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a4b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a4bd:	89 c2                	mov    %eax,%edx
f010a4bf:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4c2:	8b 00                	mov    (%eax),%eax
f010a4c4:	c1 e0 0c             	shl    $0xc,%eax
f010a4c7:	01 c2                	add    %eax,%edx
f010a4c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4cc:	39 c2                	cmp    %eax,%edx
f010a4ce:	77 d6                	ja     f010a4a6 <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a4d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a4d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a4d8:	c9                   	leave  
f010a4d9:	c3                   	ret    

f010a4da <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a4da:	55                   	push   %ebp
f010a4db:	89 e5                	mov    %esp,%ebp
f010a4dd:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a4e0:	83 ec 0c             	sub    $0xc,%esp
f010a4e3:	68 00 10 00 00       	push   $0x1000
f010a4e8:	e8 72 da ff ff       	call   f0107f5f <kmalloc>
f010a4ed:	83 c4 10             	add    $0x10,%esp
f010a4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a4f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4f7:	75 17                	jne    f010a510 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a4f9:	83 ec 04             	sub    $0x4,%esp
f010a4fc:	68 0f 32 13 f0       	push   $0xf013320f
f010a501:	68 ff 02 00 00       	push   $0x2ff
f010a506:	68 b7 30 13 f0       	push   $0xf01330b7
f010a50b:	e8 a0 5c ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a510:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a513:	c9                   	leave  
f010a514:	c3                   	ret    

f010a515 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a515:	55                   	push   %ebp
f010a516:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("not implemented yet");
}
f010a518:	90                   	nop
f010a519:	5d                   	pop    %ebp
f010a51a:	c3                   	ret    

f010a51b <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a51b:	55                   	push   %ebp
f010a51c:	89 e5                	mov    %esp,%ebp
f010a51e:	53                   	push   %ebx
f010a51f:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a522:	8b 45 08             	mov    0x8(%ebp),%eax
f010a525:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a528:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a52e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a531:	8b 55 10             	mov    0x10(%ebp),%edx
f010a534:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a53a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a541:	eb 1a                	jmp    f010a55d <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a543:	8b 45 08             	mov    0x8(%ebp),%eax
f010a546:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a54c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a54f:	c1 e2 02             	shl    $0x2,%edx
f010a552:	01 d0                	add    %edx,%eax
f010a554:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a55a:	ff 45 f4             	incl   -0xc(%ebp)
f010a55d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a560:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a565:	76 dc                	jbe    f010a543 <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a567:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a56e:	eb 25                	jmp    f010a595 <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a570:	8b 45 08             	mov    0x8(%ebp),%eax
f010a573:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a579:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a57c:	c1 e2 02             	shl    $0x2,%edx
f010a57f:	01 c2                	add    %eax,%edx
f010a581:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f010a586:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a589:	c1 e1 02             	shl    $0x2,%ecx
f010a58c:	01 c8                	add    %ecx,%eax
f010a58e:	8b 00                	mov    (%eax),%eax
f010a590:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a592:	ff 45 f4             	incl   -0xc(%ebp)
f010a595:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a59c:	7e d2                	jle    f010a570 <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a59e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a1:	8b 15 70 31 25 f0    	mov    0xf0253170,%edx
f010a5a7:	29 d0                	sub    %edx,%eax
f010a5a9:	c1 f8 05             	sar    $0x5,%eax
f010a5ac:	89 c2                	mov    %eax,%edx
f010a5ae:	89 d0                	mov    %edx,%eax
f010a5b0:	c1 e0 03             	shl    $0x3,%eax
f010a5b3:	01 d0                	add    %edx,%eax
f010a5b5:	01 c0                	add    %eax,%eax
f010a5b7:	01 d0                	add    %edx,%eax
f010a5b9:	c1 e0 06             	shl    $0x6,%eax
f010a5bc:	01 d0                	add    %edx,%eax
f010a5be:	89 c1                	mov    %eax,%ecx
f010a5c0:	c1 e1 04             	shl    $0x4,%ecx
f010a5c3:	01 c8                	add    %ecx,%eax
f010a5c5:	c1 e0 03             	shl    $0x3,%eax
f010a5c8:	01 d0                	add    %edx,%eax
f010a5ca:	01 c0                	add    %eax,%eax
f010a5cc:	01 d0                	add    %edx,%eax
f010a5ce:	89 c1                	mov    %eax,%ecx
f010a5d0:	c1 e1 04             	shl    $0x4,%ecx
f010a5d3:	01 c8                	add    %ecx,%eax
f010a5d5:	c1 e0 03             	shl    $0x3,%eax
f010a5d8:	01 d0                	add    %edx,%eax
f010a5da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a5e1:	01 d0                	add    %edx,%eax
f010a5e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a5e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a5e9:	89 d0                	mov    %edx,%eax
f010a5eb:	01 c0                	add    %eax,%eax
f010a5ed:	01 d0                	add    %edx,%eax
f010a5ef:	01 c0                	add    %eax,%eax
f010a5f1:	01 d0                	add    %edx,%eax
f010a5f3:	c1 e0 02             	shl    $0x2,%eax
f010a5f6:	01 d0                	add    %edx,%eax
f010a5f8:	01 c0                	add    %eax,%eax
f010a5fa:	01 d0                	add    %edx,%eax
f010a5fc:	c1 e0 02             	shl    $0x2,%eax
f010a5ff:	01 d0                	add    %edx,%eax
f010a601:	c1 e0 02             	shl    $0x2,%eax
f010a604:	01 d0                	add    %edx,%eax
f010a606:	c1 e0 02             	shl    $0x2,%eax
f010a609:	01 d0                	add    %edx,%eax
f010a60b:	c1 e0 05             	shl    $0x5,%eax
f010a60e:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a613:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a619:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61c:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a622:	83 ec 0c             	sub    $0xc,%esp
f010a625:	6a 02                	push   $0x2
f010a627:	e8 17 32 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f010a62c:	83 c4 10             	add    $0x10,%esp
f010a62f:	85 c0                	test   %eax,%eax
f010a631:	0f 84 34 01 00 00    	je     f010a76b <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a637:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a63e:	e9 14 01 00 00       	jmp    f010a757 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a643:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a646:	89 d0                	mov    %edx,%eax
f010a648:	01 c0                	add    %eax,%eax
f010a64a:	01 d0                	add    %edx,%eax
f010a64c:	c1 e0 03             	shl    $0x3,%eax
f010a64f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a655:	8b 45 08             	mov    0x8(%ebp),%eax
f010a658:	01 d0                	add    %edx,%eax
f010a65a:	83 c0 08             	add    $0x8,%eax
f010a65d:	85 c0                	test   %eax,%eax
f010a65f:	75 17                	jne    f010a678 <initialize_environment+0x15d>
f010a661:	83 ec 04             	sub    $0x4,%esp
f010a664:	68 38 31 13 f0       	push   $0xf0133138
f010a669:	68 45 03 00 00       	push   $0x345
f010a66e:	68 b7 30 13 f0       	push   $0xf01330b7
f010a673:	e8 38 5b ff ff       	call   f01001b0 <_panic>
f010a678:	8b 45 08             	mov    0x8(%ebp),%eax
f010a67b:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a681:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a684:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a687:	89 c8                	mov    %ecx,%eax
f010a689:	01 c0                	add    %eax,%eax
f010a68b:	01 c8                	add    %ecx,%eax
f010a68d:	c1 e0 03             	shl    $0x3,%eax
f010a690:	01 d8                	add    %ebx,%eax
f010a692:	05 c8 00 00 00       	add    $0xc8,%eax
f010a697:	89 10                	mov    %edx,(%eax)
f010a699:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a69c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a69f:	89 d0                	mov    %edx,%eax
f010a6a1:	01 c0                	add    %eax,%eax
f010a6a3:	01 d0                	add    %edx,%eax
f010a6a5:	c1 e0 03             	shl    $0x3,%eax
f010a6a8:	01 c8                	add    %ecx,%eax
f010a6aa:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6af:	8b 00                	mov    (%eax),%eax
f010a6b1:	85 c0                	test   %eax,%eax
f010a6b3:	74 28                	je     f010a6dd <initialize_environment+0x1c2>
f010a6b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b8:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a6be:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6c1:	89 c8                	mov    %ecx,%eax
f010a6c3:	01 c0                	add    %eax,%eax
f010a6c5:	01 c8                	add    %ecx,%eax
f010a6c7:	c1 e0 03             	shl    $0x3,%eax
f010a6ca:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	01 c8                	add    %ecx,%eax
f010a6d5:	83 c0 08             	add    $0x8,%eax
f010a6d8:	89 42 14             	mov    %eax,0x14(%edx)
f010a6db:	eb 23                	jmp    f010a700 <initialize_environment+0x1e5>
f010a6dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6e0:	89 d0                	mov    %edx,%eax
f010a6e2:	01 c0                	add    %eax,%eax
f010a6e4:	01 d0                	add    %edx,%eax
f010a6e6:	c1 e0 03             	shl    $0x3,%eax
f010a6e9:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a6ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f2:	01 d0                	add    %edx,%eax
f010a6f4:	8d 50 08             	lea    0x8(%eax),%edx
f010a6f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fa:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a700:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a703:	89 d0                	mov    %edx,%eax
f010a705:	01 c0                	add    %eax,%eax
f010a707:	01 d0                	add    %edx,%eax
f010a709:	c1 e0 03             	shl    $0x3,%eax
f010a70c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a712:	8b 45 08             	mov    0x8(%ebp),%eax
f010a715:	01 d0                	add    %edx,%eax
f010a717:	8d 50 08             	lea    0x8(%eax),%edx
f010a71a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71d:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a723:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a726:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a729:	89 d0                	mov    %edx,%eax
f010a72b:	01 c0                	add    %eax,%eax
f010a72d:	01 d0                	add    %edx,%eax
f010a72f:	c1 e0 03             	shl    $0x3,%eax
f010a732:	01 c8                	add    %ecx,%eax
f010a734:	05 cc 00 00 00       	add    $0xcc,%eax
f010a739:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a73f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a742:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a748:	8d 50 01             	lea    0x1(%eax),%edx
f010a74b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74e:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a754:	ff 45 f0             	incl   -0x10(%ebp)
f010a757:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75a:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a760:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a763:	39 c2                	cmp    %eax,%edx
f010a765:	0f 87 d8 fe ff ff    	ja     f010a643 <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a76b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a772:	eb 54                	jmp    f010a7c8 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a774:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a777:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a77a:	89 d0                	mov    %edx,%eax
f010a77c:	01 c0                	add    %eax,%eax
f010a77e:	01 d0                	add    %edx,%eax
f010a780:	c1 e0 03             	shl    $0x3,%eax
f010a783:	01 c8                	add    %ecx,%eax
f010a785:	05 b8 00 00 00       	add    $0xb8,%eax
f010a78a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a790:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a793:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a796:	89 d0                	mov    %edx,%eax
f010a798:	01 c0                	add    %eax,%eax
f010a79a:	01 d0                	add    %edx,%eax
f010a79c:	c1 e0 03             	shl    $0x3,%eax
f010a79f:	01 c8                	add    %ecx,%eax
f010a7a1:	05 bc 00 00 00       	add    $0xbc,%eax
f010a7a6:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7af:	89 d0                	mov    %edx,%eax
f010a7b1:	01 c0                	add    %eax,%eax
f010a7b3:	01 d0                	add    %edx,%eax
f010a7b5:	c1 e0 03             	shl    $0x3,%eax
f010a7b8:	01 c8                	add    %ecx,%eax
f010a7ba:	05 c0 00 00 00       	add    $0xc0,%eax
f010a7bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7c5:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cb:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a7d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7d4:	39 c2                	cmp    %eax,%edx
f010a7d6:	77 9c                	ja     f010a774 <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7db:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a7e2:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7ec:	eb 54                	jmp    f010a842 <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7f4:	89 d0                	mov    %edx,%eax
f010a7f6:	01 c0                	add    %eax,%eax
f010a7f8:	01 d0                	add    %edx,%eax
f010a7fa:	c1 e0 03             	shl    $0x3,%eax
f010a7fd:	01 c8                	add    %ecx,%eax
f010a7ff:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a804:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a80a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a80d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a810:	89 d0                	mov    %edx,%eax
f010a812:	01 c0                	add    %eax,%eax
f010a814:	01 d0                	add    %edx,%eax
f010a816:	c1 e0 03             	shl    $0x3,%eax
f010a819:	01 c8                	add    %ecx,%eax
f010a81b:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a820:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a823:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a829:	89 d0                	mov    %edx,%eax
f010a82b:	01 c0                	add    %eax,%eax
f010a82d:	01 d0                	add    %edx,%eax
f010a82f:	c1 e0 03             	shl    $0x3,%eax
f010a832:	01 c8                	add    %ecx,%eax
f010a834:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a839:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a83f:	ff 45 f4             	incl   -0xc(%ebp)
f010a842:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a846:	7e a6                	jle    f010a7ee <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a852:	00 00 00 

	e->pageFaultsCounter=0;
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a85f:	00 00 00 
	e->tableFaultsCounter=0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a86c:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a879:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a886:	00 00 00 

	e->nModifiedPages=0;
f010a889:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88c:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a893:	00 00 00 
	e->nNotModifiedPages=0;
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a8a0:	00 00 00 
	e->nClocks = 0;
f010a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a6:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a8ad:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a8ba:	00 00 00 
	e->nPageOut = 0;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a8c7:	00 00 00 
	e->nNewPageAdded = 0;
f010a8ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8cd:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a8d4:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a8d7:	83 ec 04             	sub    $0x4,%esp
f010a8da:	68 00 00 00 82       	push   $0x82000000
f010a8df:	68 00 00 00 80       	push   $0x80000000
f010a8e4:	ff 75 08             	pushl  0x8(%ebp)
f010a8e7:	e8 29 fc ff ff       	call   f010a515 <initialize_uheap_dynamic_allocator>
f010a8ec:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8ef:	83 ec 0c             	sub    $0xc,%esp
f010a8f2:	ff 75 08             	pushl  0x8(%ebp)
f010a8f5:	e8 09 00 00 00       	call   f010a903 <complete_environment_initialization>
f010a8fa:	83 c4 10             	add    $0x10,%esp
}
f010a8fd:	90                   	nop
f010a8fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a901:	c9                   	leave  
f010a902:	c3                   	ret    

f010a903 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a903:	55                   	push   %ebp
f010a904:	89 e5                	mov    %esp,%ebp
f010a906:	53                   	push   %ebx
f010a907:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a90a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a913:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a919:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91c:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a922:	83 c8 03             	or     $0x3,%eax
f010a925:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a927:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a930:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a936:	8b 45 08             	mov    0x8(%ebp),%eax
f010a939:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a93f:	83 c8 05             	or     $0x5,%eax
f010a942:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a944:	8b 45 08             	mov    0x8(%ebp),%eax
f010a947:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a94e:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a951:	8b 45 08             	mov    0x8(%ebp),%eax
f010a954:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a95b:	00 00 00 
	e->disk_env_tabledir = 0;
f010a95e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a961:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a968:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a96b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96e:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a975:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a978:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97b:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a97e:	83 ec 0c             	sub    $0xc,%esp
f010a981:	6a 08                	push   $0x8
f010a983:	e8 38 34 02 00       	call   f012ddc0 <log2_ceil>
f010a988:	83 c4 10             	add    $0x10,%esp
f010a98b:	ba 01 00 00 00       	mov    $0x1,%edx
f010a990:	88 c1                	mov    %al,%cl
f010a992:	d3 e2                	shl    %cl,%edx
f010a994:	89 d0                	mov    %edx,%eax
f010a996:	01 d8                	add    %ebx,%eax
f010a998:	89 c3                	mov    %eax,%ebx
f010a99a:	83 ec 0c             	sub    $0xc,%esp
f010a99d:	6a 08                	push   $0x8
f010a99f:	e8 e7 33 02 00       	call   f012dd8b <nearest_pow2_ceil>
f010a9a4:	83 c4 10             	add    $0x10,%esp
f010a9a7:	f7 d8                	neg    %eax
f010a9a9:	21 d8                	and    %ebx,%eax
f010a9ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a9ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9b2:	7f 1b                	jg     f010a9cf <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a9b4:	83 ec 0c             	sub    $0xc,%esp
f010a9b7:	6a 08                	push   $0x8
f010a9b9:	e8 02 34 02 00       	call   f012ddc0 <log2_ceil>
f010a9be:	83 c4 10             	add    $0x10,%esp
f010a9c1:	ba 01 00 00 00       	mov    $0x1,%edx
f010a9c6:	88 c1                	mov    %al,%cl
f010a9c8:	d3 e2                	shl    %cl,%edx
f010a9ca:	89 d0                	mov    %edx,%eax
f010a9cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a9cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d2:	8b 15 70 31 25 f0    	mov    0xf0253170,%edx
f010a9d8:	29 d0                	sub    %edx,%eax
f010a9da:	c1 f8 05             	sar    $0x5,%eax
f010a9dd:	89 c2                	mov    %eax,%edx
f010a9df:	89 d0                	mov    %edx,%eax
f010a9e1:	c1 e0 03             	shl    $0x3,%eax
f010a9e4:	01 d0                	add    %edx,%eax
f010a9e6:	01 c0                	add    %eax,%eax
f010a9e8:	01 d0                	add    %edx,%eax
f010a9ea:	c1 e0 06             	shl    $0x6,%eax
f010a9ed:	01 d0                	add    %edx,%eax
f010a9ef:	89 c1                	mov    %eax,%ecx
f010a9f1:	c1 e1 04             	shl    $0x4,%ecx
f010a9f4:	01 c8                	add    %ecx,%eax
f010a9f6:	c1 e0 03             	shl    $0x3,%eax
f010a9f9:	01 d0                	add    %edx,%eax
f010a9fb:	01 c0                	add    %eax,%eax
f010a9fd:	01 d0                	add    %edx,%eax
f010a9ff:	89 c1                	mov    %eax,%ecx
f010aa01:	c1 e1 04             	shl    $0x4,%ecx
f010aa04:	01 c8                	add    %ecx,%eax
f010aa06:	c1 e0 03             	shl    $0x3,%eax
f010aa09:	01 d0                	add    %edx,%eax
f010aa0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010aa12:	01 d0                	add    %edx,%eax
f010aa14:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aa17:	89 c2                	mov    %eax,%edx
f010aa19:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa1c:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aa1f:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010aa24:	85 c0                	test   %eax,%eax
f010aa26:	75 0c                	jne    f010aa34 <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010aa28:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa2b:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aa32:	eb 0e                	jmp    f010aa42 <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aa34:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010aa39:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa42:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa45:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4f:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aa56:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa59:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5c:	83 ec 04             	sub    $0x4,%esp
f010aa5f:	6a 44                	push   $0x44
f010aa61:	6a 00                	push   $0x0
f010aa63:	50                   	push   %eax
f010aa64:	e8 85 47 02 00       	call   f012f1ee <memset>
f010aa69:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6f:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa75:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa78:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa81:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa87:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa91:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa94:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9d:	8b 40 38             	mov    0x38(%eax),%eax
f010aaa0:	80 cc 02             	or     $0x2,%ah
f010aaa3:	89 c2                	mov    %eax,%edx
f010aaa5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa8:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aaab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aaaf:	75 17                	jne    f010aac8 <complete_environment_initialization+0x1c5>
f010aab1:	83 ec 04             	sub    $0x4,%esp
f010aab4:	68 19 31 13 f0       	push   $0xf0133119
f010aab9:	68 b1 03 00 00       	push   $0x3b1
f010aabe:	68 b7 30 13 f0       	push   $0xf01330b7
f010aac3:	e8 e8 56 ff ff       	call   f01001b0 <_panic>
f010aac8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aacb:	8b 40 44             	mov    0x44(%eax),%eax
f010aace:	85 c0                	test   %eax,%eax
f010aad0:	74 11                	je     f010aae3 <complete_environment_initialization+0x1e0>
f010aad2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad5:	8b 40 44             	mov    0x44(%eax),%eax
f010aad8:	8b 55 08             	mov    0x8(%ebp),%edx
f010aadb:	8b 52 48             	mov    0x48(%edx),%edx
f010aade:	89 50 48             	mov    %edx,0x48(%eax)
f010aae1:	eb 0b                	jmp    f010aaee <complete_environment_initialization+0x1eb>
f010aae3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae6:	8b 40 48             	mov    0x48(%eax),%eax
f010aae9:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f010aaee:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf1:	8b 40 48             	mov    0x48(%eax),%eax
f010aaf4:	85 c0                	test   %eax,%eax
f010aaf6:	74 11                	je     f010ab09 <complete_environment_initialization+0x206>
f010aaf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aafb:	8b 40 48             	mov    0x48(%eax),%eax
f010aafe:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab01:	8b 52 44             	mov    0x44(%edx),%edx
f010ab04:	89 50 44             	mov    %edx,0x44(%eax)
f010ab07:	eb 0b                	jmp    f010ab14 <complete_environment_initialization+0x211>
f010ab09:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab0c:	8b 40 44             	mov    0x44(%eax),%eax
f010ab0f:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f010ab14:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab17:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ab1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab21:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ab28:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f010ab2d:	48                   	dec    %eax
f010ab2e:	a3 84 31 25 f0       	mov    %eax,0xf0253184
	return ;
f010ab33:	90                   	nop
}
f010ab34:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ab37:	c9                   	leave  
f010ab38:	c3                   	ret    

f010ab39 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab39:	55                   	push   %ebp
f010ab3a:	89 e5                	mov    %esp,%ebp
f010ab3c:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab42:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab48:	8b 00                	mov    (%eax),%eax
f010ab4a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab4f:	74 17                	je     f010ab68 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab51:	83 ec 04             	sub    $0x4,%esp
f010ab54:	68 2c 32 13 f0       	push   $0xf013322c
f010ab59:	68 bd 03 00 00       	push   $0x3bd
f010ab5e:	68 b7 30 13 f0       	push   $0xf01330b7
f010ab63:	e8 48 56 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab6b:	8b 40 18             	mov    0x18(%eax),%eax
f010ab6e:	89 c2                	mov    %eax,%edx
f010ab70:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab73:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab76:	90                   	nop
f010ab77:	c9                   	leave  
f010ab78:	c3                   	ret    

f010ab79 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ab79:	55                   	push   %ebp
f010ab7a:	89 e5                	mov    %esp,%ebp
f010ab7c:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ab7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab82:	8b 40 10             	mov    0x10(%eax),%eax
f010ab85:	8d 48 01             	lea    0x1(%eax),%ecx
f010ab88:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab8b:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ab8e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab91:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab9a:	8b 00                	mov    (%eax),%eax
f010ab9c:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aba1:	74 17                	je     f010abba <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010aba3:	83 ec 04             	sub    $0x4,%esp
f010aba6:	68 2c 32 13 f0       	push   $0xf013322c
f010abab:	68 cc 03 00 00       	push   $0x3cc
f010abb0:	68 b7 30 13 f0       	push   $0xf01330b7
f010abb5:	e8 f6 55 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010abba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abbd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010abc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abc3:	01 d0                	add    %edx,%eax
f010abc5:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010abc8:	eb 0f                	jmp    f010abd9 <PROGRAM_SEGMENT_NEXT+0x60>
f010abca:	8b 45 08             	mov    0x8(%ebp),%eax
f010abcd:	8b 40 10             	mov    0x10(%eax),%eax
f010abd0:	8d 50 01             	lea    0x1(%eax),%edx
f010abd3:	8b 45 08             	mov    0x8(%ebp),%eax
f010abd6:	89 50 10             	mov    %edx,0x10(%eax)
f010abd9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abdc:	8b 40 10             	mov    0x10(%eax),%eax
f010abdf:	c1 e0 05             	shl    $0x5,%eax
f010abe2:	89 c2                	mov    %eax,%edx
f010abe4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abe7:	01 d0                	add    %edx,%eax
f010abe9:	8b 00                	mov    (%eax),%eax
f010abeb:	83 f8 01             	cmp    $0x1,%eax
f010abee:	74 13                	je     f010ac03 <PROGRAM_SEGMENT_NEXT+0x8a>
f010abf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf3:	8b 50 10             	mov    0x10(%eax),%edx
f010abf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abf9:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abfc:	0f b7 c0             	movzwl %ax,%eax
f010abff:	39 c2                	cmp    %eax,%edx
f010ac01:	72 c7                	jb     f010abca <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ac03:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac06:	8b 40 10             	mov    0x10(%eax),%eax
f010ac09:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ac0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac0f:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac12:	0f b7 c0             	movzwl %ax,%eax
f010ac15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac18:	7e 63                	jle    f010ac7d <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac1d:	c1 e0 05             	shl    $0x5,%eax
f010ac20:	89 c2                	mov    %eax,%edx
f010ac22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac25:	01 d0                	add    %edx,%eax
f010ac27:	8b 50 04             	mov    0x4(%eax),%edx
f010ac2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac2d:	01 c2                	add    %eax,%edx
f010ac2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac32:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ac34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac37:	c1 e0 05             	shl    $0x5,%eax
f010ac3a:	89 c2                	mov    %eax,%edx
f010ac3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac3f:	01 d0                	add    %edx,%eax
f010ac41:	8b 50 14             	mov    0x14(%eax),%edx
f010ac44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac47:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ac4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac4d:	c1 e0 05             	shl    $0x5,%eax
f010ac50:	89 c2                	mov    %eax,%edx
f010ac52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac55:	01 d0                	add    %edx,%eax
f010ac57:	8b 50 10             	mov    0x10(%eax),%edx
f010ac5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac5d:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ac60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac63:	c1 e0 05             	shl    $0x5,%eax
f010ac66:	89 c2                	mov    %eax,%edx
f010ac68:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac6b:	01 d0                	add    %edx,%eax
f010ac6d:	8b 40 08             	mov    0x8(%eax),%eax
f010ac70:	89 c2                	mov    %eax,%edx
f010ac72:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac75:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ac78:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac7b:	eb 05                	jmp    f010ac82 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ac7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac82:	c9                   	leave  
f010ac83:	c3                   	ret    

f010ac84 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ac84:	55                   	push   %ebp
f010ac85:	89 e5                	mov    %esp,%ebp
f010ac87:	57                   	push   %edi
f010ac88:	56                   	push   %esi
f010ac89:	53                   	push   %ebx
f010ac8a:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ac8d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac94:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac9d:	8b 00                	mov    (%eax),%eax
f010ac9f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aca4:	74 17                	je     f010acbd <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010aca6:	83 ec 04             	sub    $0x4,%esp
f010aca9:	68 2c 32 13 f0       	push   $0xf013322c
f010acae:	68 e8 03 00 00       	push   $0x3e8
f010acb3:	68 b7 30 13 f0       	push   $0xf01330b7
f010acb8:	e8 f3 54 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acc0:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acc6:	01 d0                	add    %edx,%eax
f010acc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010accb:	eb 07                	jmp    f010acd4 <PROGRAM_SEGMENT_FIRST+0x50>
f010accd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acd0:	40                   	inc    %eax
f010acd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010acd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acd7:	c1 e0 05             	shl    $0x5,%eax
f010acda:	89 c2                	mov    %eax,%edx
f010acdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acdf:	01 d0                	add    %edx,%eax
f010ace1:	8b 00                	mov    (%eax),%eax
f010ace3:	83 f8 01             	cmp    $0x1,%eax
f010ace6:	74 10                	je     f010acf8 <PROGRAM_SEGMENT_FIRST+0x74>
f010ace8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010aceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acee:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acf1:	0f b7 c0             	movzwl %ax,%eax
f010acf4:	39 c2                	cmp    %eax,%edx
f010acf6:	72 d5                	jb     f010accd <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010acf8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acfb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010acfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad01:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad04:	0f b7 c0             	movzwl %ax,%eax
f010ad07:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ad0a:	7e 68                	jle    f010ad74 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad0f:	c1 e0 05             	shl    $0x5,%eax
f010ad12:	89 c2                	mov    %eax,%edx
f010ad14:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad17:	01 d0                	add    %edx,%eax
f010ad19:	8b 50 04             	mov    0x4(%eax),%edx
f010ad1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad1f:	01 d0                	add    %edx,%eax
f010ad21:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ad24:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad27:	c1 e0 05             	shl    $0x5,%eax
f010ad2a:	89 c2                	mov    %eax,%edx
f010ad2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad2f:	01 d0                	add    %edx,%eax
f010ad31:	8b 40 14             	mov    0x14(%eax),%eax
f010ad34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ad37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad3a:	c1 e0 05             	shl    $0x5,%eax
f010ad3d:	89 c2                	mov    %eax,%edx
f010ad3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad42:	01 d0                	add    %edx,%eax
f010ad44:	8b 40 10             	mov    0x10(%eax),%eax
f010ad47:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ad4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad4d:	c1 e0 05             	shl    $0x5,%eax
f010ad50:	89 c2                	mov    %eax,%edx
f010ad52:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad55:	01 d0                	add    %edx,%eax
f010ad57:	8b 40 08             	mov    0x8(%eax),%eax
f010ad5a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ad5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad60:	89 c3                	mov    %eax,%ebx
f010ad62:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad65:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad6a:	89 df                	mov    %ebx,%edi
f010ad6c:	89 c6                	mov    %eax,%esi
f010ad6e:	89 d1                	mov    %edx,%ecx
f010ad70:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ad72:	eb 1c                	jmp    f010ad90 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ad74:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	89 c3                	mov    %eax,%ebx
f010ad80:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad83:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad88:	89 df                	mov    %ebx,%edi
f010ad8a:	89 c6                	mov    %eax,%esi
f010ad8c:	89 d1                	mov    %edx,%ecx
f010ad8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ad90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad93:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ad96:	5b                   	pop    %ebx
f010ad97:	5e                   	pop    %esi
f010ad98:	5f                   	pop    %edi
f010ad99:	5d                   	pop    %ebp
f010ad9a:	c2 04 00             	ret    $0x4

f010ad9d <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010ad9d:	55                   	push   %ebp
f010ad9e:	89 e5                	mov    %esp,%ebp
f010ada0:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ada3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010adaa:	a1 40 3a 25 f0       	mov    0xf0253a40,%eax
f010adaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010adb2:	e9 c6 00 00 00       	jmp    f010ae7d <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010adb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adba:	8b 40 10             	mov    0x10(%eax),%eax
f010adbd:	3b 45 08             	cmp    0x8(%ebp),%eax
f010adc0:	0f 85 af 00 00 00    	jne    f010ae75 <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010adc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adc9:	8b 50 0c             	mov    0xc(%eax),%edx
f010adcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adcf:	8b 40 10             	mov    0x10(%eax),%eax
f010add2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010add8:	83 ec 08             	sub    $0x8,%esp
f010addb:	52                   	push   %edx
f010addc:	50                   	push   %eax
f010addd:	e8 4a d3 ff ff       	call   f010812c <pt_clear_page_table_entry>
f010ade2:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010ade5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ade9:	75 17                	jne    f010ae02 <cleanup_buffers+0x65>
f010adeb:	83 ec 04             	sub    $0x4,%esp
f010adee:	68 19 31 13 f0       	push   $0xf0133119
f010adf3:	68 0f 04 00 00       	push   $0x40f
f010adf8:	68 b7 30 13 f0       	push   $0xf01330b7
f010adfd:	e8 ae 53 ff ff       	call   f01001b0 <_panic>
f010ae02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae05:	8b 00                	mov    (%eax),%eax
f010ae07:	85 c0                	test   %eax,%eax
f010ae09:	74 10                	je     f010ae1b <cleanup_buffers+0x7e>
f010ae0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae0e:	8b 00                	mov    (%eax),%eax
f010ae10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae13:	8b 52 04             	mov    0x4(%edx),%edx
f010ae16:	89 50 04             	mov    %edx,0x4(%eax)
f010ae19:	eb 0b                	jmp    f010ae26 <cleanup_buffers+0x89>
f010ae1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae1e:	8b 40 04             	mov    0x4(%eax),%eax
f010ae21:	a3 44 3a 25 f0       	mov    %eax,0xf0253a44
f010ae26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae29:	8b 40 04             	mov    0x4(%eax),%eax
f010ae2c:	85 c0                	test   %eax,%eax
f010ae2e:	74 0f                	je     f010ae3f <cleanup_buffers+0xa2>
f010ae30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae33:	8b 40 04             	mov    0x4(%eax),%eax
f010ae36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae39:	8b 12                	mov    (%edx),%edx
f010ae3b:	89 10                	mov    %edx,(%eax)
f010ae3d:	eb 0a                	jmp    f010ae49 <cleanup_buffers+0xac>
f010ae3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae42:	8b 00                	mov    (%eax),%eax
f010ae44:	a3 40 3a 25 f0       	mov    %eax,0xf0253a40
f010ae49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ae52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ae5c:	a1 4c 3a 25 f0       	mov    0xf0253a4c,%eax
f010ae61:	48                   	dec    %eax
f010ae62:	a3 4c 3a 25 f0       	mov    %eax,0xf0253a4c

			free_frame(ptr_fi);
f010ae67:	83 ec 0c             	sub    $0xc,%esp
f010ae6a:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae6d:	e8 cb c5 ff ff       	call   f010743d <free_frame>
f010ae72:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae75:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f010ae7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae81:	74 07                	je     f010ae8a <cleanup_buffers+0xed>
f010ae83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae86:	8b 00                	mov    (%eax),%eax
f010ae88:	eb 05                	jmp    f010ae8f <cleanup_buffers+0xf2>
f010ae8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae8f:	a3 48 3a 25 f0       	mov    %eax,0xf0253a48
f010ae94:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f010ae99:	85 c0                	test   %eax,%eax
f010ae9b:	0f 85 16 ff ff ff    	jne    f010adb7 <cleanup_buffers+0x1a>
f010aea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aea5:	0f 85 0c ff ff ff    	jne    f010adb7 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010aeab:	90                   	nop
f010aeac:	c9                   	leave  
f010aead:	c3                   	ret    

f010aeae <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010aeae:	55                   	push   %ebp
f010aeaf:	89 e5                	mov    %esp,%ebp
f010aeb1:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010aeb4:	83 ec 04             	sub    $0x4,%esp
f010aeb7:	68 42 32 13 f0       	push   $0xf0133242
f010aebc:	6a 0b                	push   $0xb
f010aebe:	68 52 32 13 f0       	push   $0xf0133252
f010aec3:	e8 e8 52 ff ff       	call   f01001b0 <_panic>

f010aec8 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010aec8:	55                   	push   %ebp
f010aec9:	89 e5                	mov    %esp,%ebp
f010aecb:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aece:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aed5:	eb 29                	jmp    f010af00 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010aed7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeda:	89 d0                	mov    %edx,%eax
f010aedc:	01 c0                	add    %eax,%eax
f010aede:	01 d0                	add    %edx,%eax
f010aee0:	c1 e0 02             	shl    $0x2,%eax
f010aee3:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
f010aee8:	8b 00                	mov    (%eax),%eax
f010aeea:	83 ec 08             	sub    $0x8,%esp
f010aeed:	50                   	push   %eax
f010aeee:	ff 75 08             	pushl  0x8(%ebp)
f010aef1:	e8 16 42 02 00       	call   f012f10c <strcmp>
f010aef6:	83 c4 10             	add    $0x10,%esp
f010aef9:	85 c0                	test   %eax,%eax
f010aefb:	74 0f                	je     f010af0c <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aefd:	ff 45 f4             	incl   -0xc(%ebp)
f010af00:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af05:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af08:	7c cd                	jl     f010aed7 <get_user_program_info+0xf>
f010af0a:	eb 01                	jmp    f010af0d <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010af0c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af0d:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af12:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af15:	75 1a                	jne    f010af31 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010af17:	83 ec 08             	sub    $0x8,%esp
f010af1a:	ff 75 08             	pushl  0x8(%ebp)
f010af1d:	68 de 33 13 f0       	push   $0xf01333de
f010af22:	e8 0a 5f ff ff       	call   f0100e31 <cprintf>
f010af27:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af2a:	b8 00 00 00 00       	mov    $0x0,%eax
f010af2f:	eb 11                	jmp    f010af42 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010af31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af34:	89 d0                	mov    %edx,%eax
f010af36:	01 c0                	add    %eax,%eax
f010af38:	01 d0                	add    %edx,%eax
f010af3a:	c1 e0 02             	shl    $0x2,%eax
f010af3d:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
}
f010af42:	c9                   	leave  
f010af43:	c3                   	ret    

f010af44 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010af44:	55                   	push   %ebp
f010af45:	89 e5                	mov    %esp,%ebp
f010af47:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af51:	eb 2d                	jmp    f010af80 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010af53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af56:	89 d0                	mov    %edx,%eax
f010af58:	01 c0                	add    %eax,%eax
f010af5a:	01 d0                	add    %edx,%eax
f010af5c:	c1 e0 02             	shl    $0x2,%eax
f010af5f:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
f010af64:	8b 00                	mov    (%eax),%eax
f010af66:	8b 55 08             	mov    0x8(%ebp),%edx
f010af69:	83 c2 5c             	add    $0x5c,%edx
f010af6c:	83 ec 08             	sub    $0x8,%esp
f010af6f:	50                   	push   %eax
f010af70:	52                   	push   %edx
f010af71:	e8 96 41 02 00       	call   f012f10c <strcmp>
f010af76:	83 c4 10             	add    $0x10,%esp
f010af79:	85 c0                	test   %eax,%eax
f010af7b:	74 0f                	je     f010af8c <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af7d:	ff 45 f4             	incl   -0xc(%ebp)
f010af80:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af85:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af88:	7c c9                	jl     f010af53 <get_user_program_info_by_env+0xf>
f010af8a:	eb 01                	jmp    f010af8d <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010af8c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af8d:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af92:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af95:	75 17                	jne    f010afae <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010af97:	83 ec 0c             	sub    $0xc,%esp
f010af9a:	68 f9 33 13 f0       	push   $0xf01333f9
f010af9f:	e8 8d 5e ff ff       	call   f0100e31 <cprintf>
f010afa4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afa7:	b8 00 00 00 00       	mov    $0x0,%eax
f010afac:	eb 11                	jmp    f010afbf <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010afae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afb1:	89 d0                	mov    %edx,%eax
f010afb3:	01 c0                	add    %eax,%eax
f010afb5:	01 d0                	add    %edx,%eax
f010afb7:	c1 e0 02             	shl    $0x2,%eax
f010afba:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
}
f010afbf:	c9                   	leave  
f010afc0:	c3                   	ret    

f010afc1 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010afc1:	55                   	push   %ebp
f010afc2:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010afc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc7:	83 f8 13             	cmp    $0x13,%eax
f010afca:	77 0c                	ja     f010afd8 <trapname+0x17>
		return excnames[trapno];
f010afcc:	8b 45 08             	mov    0x8(%ebp),%eax
f010afcf:	8b 04 85 40 38 13 f0 	mov    -0xfecc7c0(,%eax,4),%eax
f010afd6:	eb 12                	jmp    f010afea <trapname+0x29>
	if (trapno == T_SYSCALL)
f010afd8:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010afdc:	75 07                	jne    f010afe5 <trapname+0x24>
		return "System call";
f010afde:	b8 20 34 13 f0       	mov    $0xf0133420,%eax
f010afe3:	eb 05                	jmp    f010afea <trapname+0x29>
	return "(unknown trap)";
f010afe5:	b8 2c 34 13 f0       	mov    $0xf013342c,%eax
}
f010afea:	5d                   	pop    %ebp
f010afeb:	c3                   	ret    

f010afec <idt_init>:


void
idt_init(void)
{
f010afec:	55                   	push   %ebp
f010afed:	89 e5                	mov    %esp,%ebp
f010afef:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010aff2:	b8 86 c6 10 f0       	mov    $0xf010c686,%eax
f010aff7:	66 a3 10 32 25 f0    	mov    %ax,0xf0253210
f010affd:	66 c7 05 12 32 25 f0 	movw   $0x8,0xf0253212
f010b004:	08 00 
f010b006:	a0 14 32 25 f0       	mov    0xf0253214,%al
f010b00b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b00e:	a2 14 32 25 f0       	mov    %al,0xf0253214
f010b013:	a0 14 32 25 f0       	mov    0xf0253214,%al
f010b018:	83 e0 1f             	and    $0x1f,%eax
f010b01b:	a2 14 32 25 f0       	mov    %al,0xf0253214
f010b020:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b025:	83 e0 f0             	and    $0xfffffff0,%eax
f010b028:	83 c8 0e             	or     $0xe,%eax
f010b02b:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b030:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b035:	83 e0 ef             	and    $0xffffffef,%eax
f010b038:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b03d:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b042:	83 e0 9f             	and    $0xffffff9f,%eax
f010b045:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b04a:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b04f:	83 c8 80             	or     $0xffffff80,%eax
f010b052:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b057:	b8 86 c6 10 f0       	mov    $0xf010c686,%eax
f010b05c:	c1 e8 10             	shr    $0x10,%eax
f010b05f:	66 a3 16 32 25 f0    	mov    %ax,0xf0253216
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b065:	b8 8e c6 10 f0       	mov    $0xf010c68e,%eax
f010b06a:	66 a3 20 33 25 f0    	mov    %ax,0xf0253320
f010b070:	66 c7 05 22 33 25 f0 	movw   $0x8,0xf0253322
f010b077:	08 00 
f010b079:	a0 24 33 25 f0       	mov    0xf0253324,%al
f010b07e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b081:	a2 24 33 25 f0       	mov    %al,0xf0253324
f010b086:	a0 24 33 25 f0       	mov    0xf0253324,%al
f010b08b:	83 e0 1f             	and    $0x1f,%eax
f010b08e:	a2 24 33 25 f0       	mov    %al,0xf0253324
f010b093:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b098:	83 e0 f0             	and    $0xfffffff0,%eax
f010b09b:	83 c8 0e             	or     $0xe,%eax
f010b09e:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0a3:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b0a8:	83 e0 ef             	and    $0xffffffef,%eax
f010b0ab:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0b0:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b0b5:	83 c8 60             	or     $0x60,%eax
f010b0b8:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0bd:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b0c2:	83 c8 80             	or     $0xffffff80,%eax
f010b0c5:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0ca:	b8 8e c6 10 f0       	mov    $0xf010c68e,%eax
f010b0cf:	c1 e8 10             	shr    $0x10,%eax
f010b0d2:	66 a3 26 33 25 f0    	mov    %ax,0xf0253326
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b0d8:	b8 98 c6 10 f0       	mov    $0xf010c698,%eax
f010b0dd:	66 a3 e0 31 25 f0    	mov    %ax,0xf02531e0
f010b0e3:	66 c7 05 e2 31 25 f0 	movw   $0x8,0xf02531e2
f010b0ea:	08 00 
f010b0ec:	a0 e4 31 25 f0       	mov    0xf02531e4,%al
f010b0f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0f4:	a2 e4 31 25 f0       	mov    %al,0xf02531e4
f010b0f9:	a0 e4 31 25 f0       	mov    0xf02531e4,%al
f010b0fe:	83 e0 1f             	and    $0x1f,%eax
f010b101:	a2 e4 31 25 f0       	mov    %al,0xf02531e4
f010b106:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b10b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b10e:	83 c8 0e             	or     $0xe,%eax
f010b111:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b116:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b11b:	83 e0 ef             	and    $0xffffffef,%eax
f010b11e:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b123:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b128:	83 e0 9f             	and    $0xffffff9f,%eax
f010b12b:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b130:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b135:	83 c8 80             	or     $0xffffff80,%eax
f010b138:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b13d:	b8 98 c6 10 f0       	mov    $0xf010c698,%eax
f010b142:	c1 e8 10             	shr    $0x10,%eax
f010b145:	66 a3 e6 31 25 f0    	mov    %ax,0xf02531e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b14b:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b150:	66 a3 a0 31 25 f0    	mov    %ax,0xf02531a0
f010b156:	66 c7 05 a2 31 25 f0 	movw   $0x8,0xf02531a2
f010b15d:	08 00 
f010b15f:	a0 a4 31 25 f0       	mov    0xf02531a4,%al
f010b164:	83 e0 e0             	and    $0xffffffe0,%eax
f010b167:	a2 a4 31 25 f0       	mov    %al,0xf02531a4
f010b16c:	a0 a4 31 25 f0       	mov    0xf02531a4,%al
f010b171:	83 e0 1f             	and    $0x1f,%eax
f010b174:	a2 a4 31 25 f0       	mov    %al,0xf02531a4
f010b179:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b17e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b181:	83 c8 0e             	or     $0xe,%eax
f010b184:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b189:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b18e:	83 e0 ef             	and    $0xffffffef,%eax
f010b191:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b196:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b19b:	83 c8 60             	or     $0x60,%eax
f010b19e:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b1a3:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b1a8:	83 c8 80             	or     $0xffffff80,%eax
f010b1ab:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b1b0:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b1b5:	c1 e8 10             	shr    $0x10,%eax
f010b1b8:	66 a3 a6 31 25 f0    	mov    %ax,0xf02531a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b1be:	b8 aa c6 10 f0       	mov    $0xf010c6aa,%eax
f010b1c3:	66 a3 a8 31 25 f0    	mov    %ax,0xf02531a8
f010b1c9:	66 c7 05 aa 31 25 f0 	movw   $0x8,0xf02531aa
f010b1d0:	08 00 
f010b1d2:	a0 ac 31 25 f0       	mov    0xf02531ac,%al
f010b1d7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1da:	a2 ac 31 25 f0       	mov    %al,0xf02531ac
f010b1df:	a0 ac 31 25 f0       	mov    0xf02531ac,%al
f010b1e4:	83 e0 1f             	and    $0x1f,%eax
f010b1e7:	a2 ac 31 25 f0       	mov    %al,0xf02531ac
f010b1ec:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b1f1:	83 c8 0f             	or     $0xf,%eax
f010b1f4:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b1f9:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b1fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b201:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b206:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b20b:	83 c8 60             	or     $0x60,%eax
f010b20e:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b213:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b218:	83 c8 80             	or     $0xffffff80,%eax
f010b21b:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b220:	b8 aa c6 10 f0       	mov    $0xf010c6aa,%eax
f010b225:	c1 e8 10             	shr    $0x10,%eax
f010b228:	66 a3 ae 31 25 f0    	mov    %ax,0xf02531ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b22e:	b8 b4 c6 10 f0       	mov    $0xf010c6b4,%eax
f010b233:	66 a3 b0 31 25 f0    	mov    %ax,0xf02531b0
f010b239:	66 c7 05 b2 31 25 f0 	movw   $0x8,0xf02531b2
f010b240:	08 00 
f010b242:	a0 b4 31 25 f0       	mov    0xf02531b4,%al
f010b247:	83 e0 e0             	and    $0xffffffe0,%eax
f010b24a:	a2 b4 31 25 f0       	mov    %al,0xf02531b4
f010b24f:	a0 b4 31 25 f0       	mov    0xf02531b4,%al
f010b254:	83 e0 1f             	and    $0x1f,%eax
f010b257:	a2 b4 31 25 f0       	mov    %al,0xf02531b4
f010b25c:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b261:	83 e0 f0             	and    $0xfffffff0,%eax
f010b264:	83 c8 0e             	or     $0xe,%eax
f010b267:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b26c:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b271:	83 e0 ef             	and    $0xffffffef,%eax
f010b274:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b279:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b27e:	83 c8 60             	or     $0x60,%eax
f010b281:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b286:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b28b:	83 c8 80             	or     $0xffffff80,%eax
f010b28e:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b293:	b8 b4 c6 10 f0       	mov    $0xf010c6b4,%eax
f010b298:	c1 e8 10             	shr    $0x10,%eax
f010b29b:	66 a3 b6 31 25 f0    	mov    %ax,0xf02531b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b2a1:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010b2a6:	66 a3 b8 31 25 f0    	mov    %ax,0xf02531b8
f010b2ac:	66 c7 05 ba 31 25 f0 	movw   $0x8,0xf02531ba
f010b2b3:	08 00 
f010b2b5:	a0 bc 31 25 f0       	mov    0xf02531bc,%al
f010b2ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2bd:	a2 bc 31 25 f0       	mov    %al,0xf02531bc
f010b2c2:	a0 bc 31 25 f0       	mov    0xf02531bc,%al
f010b2c7:	83 e0 1f             	and    $0x1f,%eax
f010b2ca:	a2 bc 31 25 f0       	mov    %al,0xf02531bc
f010b2cf:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2d4:	83 c8 0f             	or     $0xf,%eax
f010b2d7:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b2dc:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2e1:	83 e0 ef             	and    $0xffffffef,%eax
f010b2e4:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b2e9:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2ee:	83 c8 60             	or     $0x60,%eax
f010b2f1:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b2f6:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2fb:	83 c8 80             	or     $0xffffff80,%eax
f010b2fe:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b303:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010b308:	c1 e8 10             	shr    $0x10,%eax
f010b30b:	66 a3 be 31 25 f0    	mov    %ax,0xf02531be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b311:	b8 c8 c6 10 f0       	mov    $0xf010c6c8,%eax
f010b316:	66 a3 c0 31 25 f0    	mov    %ax,0xf02531c0
f010b31c:	66 c7 05 c2 31 25 f0 	movw   $0x8,0xf02531c2
f010b323:	08 00 
f010b325:	a0 c4 31 25 f0       	mov    0xf02531c4,%al
f010b32a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b32d:	a2 c4 31 25 f0       	mov    %al,0xf02531c4
f010b332:	a0 c4 31 25 f0       	mov    0xf02531c4,%al
f010b337:	83 e0 1f             	and    $0x1f,%eax
f010b33a:	a2 c4 31 25 f0       	mov    %al,0xf02531c4
f010b33f:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b344:	83 c8 0f             	or     $0xf,%eax
f010b347:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b34c:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b351:	83 e0 ef             	and    $0xffffffef,%eax
f010b354:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b359:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b35e:	83 c8 60             	or     $0x60,%eax
f010b361:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b366:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b36b:	83 c8 80             	or     $0xffffff80,%eax
f010b36e:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b373:	b8 c8 c6 10 f0       	mov    $0xf010c6c8,%eax
f010b378:	c1 e8 10             	shr    $0x10,%eax
f010b37b:	66 a3 c6 31 25 f0    	mov    %ax,0xf02531c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b381:	b8 d2 c6 10 f0       	mov    $0xf010c6d2,%eax
f010b386:	66 a3 c8 31 25 f0    	mov    %ax,0xf02531c8
f010b38c:	66 c7 05 ca 31 25 f0 	movw   $0x8,0xf02531ca
f010b393:	08 00 
f010b395:	a0 cc 31 25 f0       	mov    0xf02531cc,%al
f010b39a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b39d:	a2 cc 31 25 f0       	mov    %al,0xf02531cc
f010b3a2:	a0 cc 31 25 f0       	mov    0xf02531cc,%al
f010b3a7:	83 e0 1f             	and    $0x1f,%eax
f010b3aa:	a2 cc 31 25 f0       	mov    %al,0xf02531cc
f010b3af:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3b4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3b7:	83 c8 0e             	or     $0xe,%eax
f010b3ba:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3bf:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3c4:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c7:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3cc:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3d1:	83 c8 60             	or     $0x60,%eax
f010b3d4:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3d9:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3de:	83 c8 80             	or     $0xffffff80,%eax
f010b3e1:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3e6:	b8 d2 c6 10 f0       	mov    $0xf010c6d2,%eax
f010b3eb:	c1 e8 10             	shr    $0x10,%eax
f010b3ee:	66 a3 ce 31 25 f0    	mov    %ax,0xf02531ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b3f4:	b8 dc c6 10 f0       	mov    $0xf010c6dc,%eax
f010b3f9:	66 a3 d0 31 25 f0    	mov    %ax,0xf02531d0
f010b3ff:	66 c7 05 d2 31 25 f0 	movw   $0x8,0xf02531d2
f010b406:	08 00 
f010b408:	a0 d4 31 25 f0       	mov    0xf02531d4,%al
f010b40d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b410:	a2 d4 31 25 f0       	mov    %al,0xf02531d4
f010b415:	a0 d4 31 25 f0       	mov    0xf02531d4,%al
f010b41a:	83 e0 1f             	and    $0x1f,%eax
f010b41d:	a2 d4 31 25 f0       	mov    %al,0xf02531d4
f010b422:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b427:	83 e0 f0             	and    $0xfffffff0,%eax
f010b42a:	83 c8 0e             	or     $0xe,%eax
f010b42d:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b432:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b437:	83 e0 ef             	and    $0xffffffef,%eax
f010b43a:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b43f:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b444:	83 c8 60             	or     $0x60,%eax
f010b447:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b44c:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b451:	83 c8 80             	or     $0xffffff80,%eax
f010b454:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b459:	b8 dc c6 10 f0       	mov    $0xf010c6dc,%eax
f010b45e:	c1 e8 10             	shr    $0x10,%eax
f010b461:	66 a3 d6 31 25 f0    	mov    %ax,0xf02531d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b467:	b8 e6 c6 10 f0       	mov    $0xf010c6e6,%eax
f010b46c:	66 a3 d8 31 25 f0    	mov    %ax,0xf02531d8
f010b472:	66 c7 05 da 31 25 f0 	movw   $0x8,0xf02531da
f010b479:	08 00 
f010b47b:	a0 dc 31 25 f0       	mov    0xf02531dc,%al
f010b480:	83 e0 e0             	and    $0xffffffe0,%eax
f010b483:	a2 dc 31 25 f0       	mov    %al,0xf02531dc
f010b488:	a0 dc 31 25 f0       	mov    0xf02531dc,%al
f010b48d:	83 e0 1f             	and    $0x1f,%eax
f010b490:	a2 dc 31 25 f0       	mov    %al,0xf02531dc
f010b495:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b49a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b49d:	83 c8 0e             	or     $0xe,%eax
f010b4a0:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4a5:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b4aa:	83 e0 ef             	and    $0xffffffef,%eax
f010b4ad:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4b2:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b4b7:	83 c8 60             	or     $0x60,%eax
f010b4ba:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4bf:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b4c4:	83 c8 80             	or     $0xffffff80,%eax
f010b4c7:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4cc:	b8 e6 c6 10 f0       	mov    $0xf010c6e6,%eax
f010b4d1:	c1 e8 10             	shr    $0x10,%eax
f010b4d4:	66 a3 de 31 25 f0    	mov    %ax,0xf02531de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b4da:	b8 f0 c6 10 f0       	mov    $0xf010c6f0,%eax
f010b4df:	66 a3 f0 31 25 f0    	mov    %ax,0xf02531f0
f010b4e5:	66 c7 05 f2 31 25 f0 	movw   $0x8,0xf02531f2
f010b4ec:	08 00 
f010b4ee:	a0 f4 31 25 f0       	mov    0xf02531f4,%al
f010b4f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f6:	a2 f4 31 25 f0       	mov    %al,0xf02531f4
f010b4fb:	a0 f4 31 25 f0       	mov    0xf02531f4,%al
f010b500:	83 e0 1f             	and    $0x1f,%eax
f010b503:	a2 f4 31 25 f0       	mov    %al,0xf02531f4
f010b508:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b50d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b510:	83 c8 0e             	or     $0xe,%eax
f010b513:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b518:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b51d:	83 e0 ef             	and    $0xffffffef,%eax
f010b520:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b525:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b52a:	83 c8 60             	or     $0x60,%eax
f010b52d:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b532:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b537:	83 c8 80             	or     $0xffffff80,%eax
f010b53a:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b53f:	b8 f0 c6 10 f0       	mov    $0xf010c6f0,%eax
f010b544:	c1 e8 10             	shr    $0x10,%eax
f010b547:	66 a3 f6 31 25 f0    	mov    %ax,0xf02531f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b54d:	b8 f8 c6 10 f0       	mov    $0xf010c6f8,%eax
f010b552:	66 a3 f8 31 25 f0    	mov    %ax,0xf02531f8
f010b558:	66 c7 05 fa 31 25 f0 	movw   $0x8,0xf02531fa
f010b55f:	08 00 
f010b561:	a0 fc 31 25 f0       	mov    0xf02531fc,%al
f010b566:	83 e0 e0             	and    $0xffffffe0,%eax
f010b569:	a2 fc 31 25 f0       	mov    %al,0xf02531fc
f010b56e:	a0 fc 31 25 f0       	mov    0xf02531fc,%al
f010b573:	83 e0 1f             	and    $0x1f,%eax
f010b576:	a2 fc 31 25 f0       	mov    %al,0xf02531fc
f010b57b:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b580:	83 e0 f0             	and    $0xfffffff0,%eax
f010b583:	83 c8 0e             	or     $0xe,%eax
f010b586:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b58b:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b590:	83 e0 ef             	and    $0xffffffef,%eax
f010b593:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b598:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b59d:	83 c8 60             	or     $0x60,%eax
f010b5a0:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b5a5:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b5aa:	83 c8 80             	or     $0xffffff80,%eax
f010b5ad:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b5b2:	b8 f8 c6 10 f0       	mov    $0xf010c6f8,%eax
f010b5b7:	c1 e8 10             	shr    $0x10,%eax
f010b5ba:	66 a3 fe 31 25 f0    	mov    %ax,0xf02531fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b5c0:	b8 fc c6 10 f0       	mov    $0xf010c6fc,%eax
f010b5c5:	66 a3 00 32 25 f0    	mov    %ax,0xf0253200
f010b5cb:	66 c7 05 02 32 25 f0 	movw   $0x8,0xf0253202
f010b5d2:	08 00 
f010b5d4:	a0 04 32 25 f0       	mov    0xf0253204,%al
f010b5d9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5dc:	a2 04 32 25 f0       	mov    %al,0xf0253204
f010b5e1:	a0 04 32 25 f0       	mov    0xf0253204,%al
f010b5e6:	83 e0 1f             	and    $0x1f,%eax
f010b5e9:	a2 04 32 25 f0       	mov    %al,0xf0253204
f010b5ee:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b5f3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f6:	83 c8 0e             	or     $0xe,%eax
f010b5f9:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b5fe:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b603:	83 e0 ef             	and    $0xffffffef,%eax
f010b606:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b60b:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b610:	83 c8 60             	or     $0x60,%eax
f010b613:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b618:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b61d:	83 c8 80             	or     $0xffffff80,%eax
f010b620:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b625:	b8 fc c6 10 f0       	mov    $0xf010c6fc,%eax
f010b62a:	c1 e8 10             	shr    $0x10,%eax
f010b62d:	66 a3 06 32 25 f0    	mov    %ax,0xf0253206
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b633:	b8 00 c7 10 f0       	mov    $0xf010c700,%eax
f010b638:	66 a3 08 32 25 f0    	mov    %ax,0xf0253208
f010b63e:	66 c7 05 0a 32 25 f0 	movw   $0x8,0xf025320a
f010b645:	08 00 
f010b647:	a0 0c 32 25 f0       	mov    0xf025320c,%al
f010b64c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b64f:	a2 0c 32 25 f0       	mov    %al,0xf025320c
f010b654:	a0 0c 32 25 f0       	mov    0xf025320c,%al
f010b659:	83 e0 1f             	and    $0x1f,%eax
f010b65c:	a2 0c 32 25 f0       	mov    %al,0xf025320c
f010b661:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b666:	83 e0 f0             	and    $0xfffffff0,%eax
f010b669:	83 c8 0e             	or     $0xe,%eax
f010b66c:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b671:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b676:	83 e0 ef             	and    $0xffffffef,%eax
f010b679:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b67e:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b683:	83 c8 60             	or     $0x60,%eax
f010b686:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b68b:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b690:	83 c8 80             	or     $0xffffff80,%eax
f010b693:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b698:	b8 00 c7 10 f0       	mov    $0xf010c700,%eax
f010b69d:	c1 e8 10             	shr    $0x10,%eax
f010b6a0:	66 a3 0e 32 25 f0    	mov    %ax,0xf025320e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b6a6:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b6ab:	66 a3 20 32 25 f0    	mov    %ax,0xf0253220
f010b6b1:	66 c7 05 22 32 25 f0 	movw   $0x8,0xf0253222
f010b6b8:	08 00 
f010b6ba:	a0 24 32 25 f0       	mov    0xf0253224,%al
f010b6bf:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6c2:	a2 24 32 25 f0       	mov    %al,0xf0253224
f010b6c7:	a0 24 32 25 f0       	mov    0xf0253224,%al
f010b6cc:	83 e0 1f             	and    $0x1f,%eax
f010b6cf:	a2 24 32 25 f0       	mov    %al,0xf0253224
f010b6d4:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b6d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6dc:	83 c8 0e             	or     $0xe,%eax
f010b6df:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b6e4:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b6e9:	83 e0 ef             	and    $0xffffffef,%eax
f010b6ec:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b6f1:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b6f6:	83 c8 60             	or     $0x60,%eax
f010b6f9:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b6fe:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b703:	83 c8 80             	or     $0xffffff80,%eax
f010b706:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b70b:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b710:	c1 e8 10             	shr    $0x10,%eax
f010b713:	66 a3 26 32 25 f0    	mov    %ax,0xf0253226
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b719:	b8 0a c7 10 f0       	mov    $0xf010c70a,%eax
f010b71e:	66 a3 28 32 25 f0    	mov    %ax,0xf0253228
f010b724:	66 c7 05 2a 32 25 f0 	movw   $0x8,0xf025322a
f010b72b:	08 00 
f010b72d:	a0 2c 32 25 f0       	mov    0xf025322c,%al
f010b732:	83 e0 e0             	and    $0xffffffe0,%eax
f010b735:	a2 2c 32 25 f0       	mov    %al,0xf025322c
f010b73a:	a0 2c 32 25 f0       	mov    0xf025322c,%al
f010b73f:	83 e0 1f             	and    $0x1f,%eax
f010b742:	a2 2c 32 25 f0       	mov    %al,0xf025322c
f010b747:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b74c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b74f:	83 c8 0e             	or     $0xe,%eax
f010b752:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b757:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b75c:	83 e0 ef             	and    $0xffffffef,%eax
f010b75f:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b764:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b769:	83 c8 60             	or     $0x60,%eax
f010b76c:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b771:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b776:	83 c8 80             	or     $0xffffff80,%eax
f010b779:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b77e:	b8 0a c7 10 f0       	mov    $0xf010c70a,%eax
f010b783:	c1 e8 10             	shr    $0x10,%eax
f010b786:	66 a3 2e 32 25 f0    	mov    %ax,0xf025322e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b78c:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b791:	66 a3 30 32 25 f0    	mov    %ax,0xf0253230
f010b797:	66 c7 05 32 32 25 f0 	movw   $0x8,0xf0253232
f010b79e:	08 00 
f010b7a0:	a0 34 32 25 f0       	mov    0xf0253234,%al
f010b7a5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a8:	a2 34 32 25 f0       	mov    %al,0xf0253234
f010b7ad:	a0 34 32 25 f0       	mov    0xf0253234,%al
f010b7b2:	83 e0 1f             	and    $0x1f,%eax
f010b7b5:	a2 34 32 25 f0       	mov    %al,0xf0253234
f010b7ba:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7bf:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7c2:	83 c8 0e             	or     $0xe,%eax
f010b7c5:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7ca:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7cf:	83 e0 ef             	and    $0xffffffef,%eax
f010b7d2:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7d7:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7dc:	83 c8 60             	or     $0x60,%eax
f010b7df:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7e4:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7e9:	83 c8 80             	or     $0xffffff80,%eax
f010b7ec:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7f1:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b7f6:	c1 e8 10             	shr    $0x10,%eax
f010b7f9:	66 a3 36 32 25 f0    	mov    %ax,0xf0253236
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b7ff:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b804:	66 a3 38 32 25 f0    	mov    %ax,0xf0253238
f010b80a:	66 c7 05 3a 32 25 f0 	movw   $0x8,0xf025323a
f010b811:	08 00 
f010b813:	a0 3c 32 25 f0       	mov    0xf025323c,%al
f010b818:	83 e0 e0             	and    $0xffffffe0,%eax
f010b81b:	a2 3c 32 25 f0       	mov    %al,0xf025323c
f010b820:	a0 3c 32 25 f0       	mov    0xf025323c,%al
f010b825:	83 e0 1f             	and    $0x1f,%eax
f010b828:	a2 3c 32 25 f0       	mov    %al,0xf025323c
f010b82d:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b832:	83 e0 f0             	and    $0xfffffff0,%eax
f010b835:	83 c8 0e             	or     $0xe,%eax
f010b838:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b83d:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b842:	83 e0 ef             	and    $0xffffffef,%eax
f010b845:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b84a:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b84f:	83 c8 60             	or     $0x60,%eax
f010b852:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b857:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b85c:	83 c8 80             	or     $0xffffff80,%eax
f010b85f:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b864:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b869:	c1 e8 10             	shr    $0x10,%eax
f010b86c:	66 a3 3e 32 25 f0    	mov    %ax,0xf025323e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b872:	b8 1a c7 10 f0       	mov    $0xf010c71a,%eax
f010b877:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010b87d:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010b884:	08 00 
f010b886:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b88b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b88e:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b893:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b898:	83 e0 1f             	and    $0x1f,%eax
f010b89b:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b8a0:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8a5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a8:	83 c8 0e             	or     $0xe,%eax
f010b8ab:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8b0:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8b5:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b8:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8bd:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8c2:	83 c8 60             	or     $0x60,%eax
f010b8c5:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8ca:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8cf:	83 c8 80             	or     $0xffffff80,%eax
f010b8d2:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8d7:	b8 1a c7 10 f0       	mov    $0xf010c71a,%eax
f010b8dc:	c1 e8 10             	shr    $0x10,%eax
f010b8df:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b8e5:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b8ea:	66 a3 a8 32 25 f0    	mov    %ax,0xf02532a8
f010b8f0:	66 c7 05 aa 32 25 f0 	movw   $0x8,0xf02532aa
f010b8f7:	08 00 
f010b8f9:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b8fe:	83 e0 e0             	and    $0xffffffe0,%eax
f010b901:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b906:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b90b:	83 e0 1f             	and    $0x1f,%eax
f010b90e:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b913:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b918:	83 e0 f0             	and    $0xfffffff0,%eax
f010b91b:	83 c8 0e             	or     $0xe,%eax
f010b91e:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b923:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b928:	83 e0 ef             	and    $0xffffffef,%eax
f010b92b:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b930:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b935:	83 c8 60             	or     $0x60,%eax
f010b938:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b93d:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b942:	83 c8 80             	or     $0xffffff80,%eax
f010b945:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b94a:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b94f:	c1 e8 10             	shr    $0x10,%eax
f010b952:	66 a3 ae 32 25 f0    	mov    %ax,0xf02532ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b958:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b95d:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b963:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010b96a:	08 00 
f010b96c:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b971:	83 e0 e0             	and    $0xffffffe0,%eax
f010b974:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b979:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b97e:	83 e0 1f             	and    $0x1f,%eax
f010b981:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b986:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b98b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b98e:	83 c8 0e             	or     $0xe,%eax
f010b991:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b996:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b99b:	83 e0 ef             	and    $0xffffffef,%eax
f010b99e:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b9a3:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b9a8:	83 c8 60             	or     $0x60,%eax
f010b9ab:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b9b0:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b9b5:	83 c8 80             	or     $0xffffff80,%eax
f010b9b8:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b9bd:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b9c2:	c1 e8 10             	shr    $0x10,%eax
f010b9c5:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b9cb:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010b9d0:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010b9d6:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010b9dd:	08 00 
f010b9df:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b9e4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e7:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b9ec:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b9f1:	83 e0 1f             	and    $0x1f,%eax
f010b9f4:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b9f9:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b9fe:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba01:	83 c8 0e             	or     $0xe,%eax
f010ba04:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba09:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba0e:	83 e0 ef             	and    $0xffffffef,%eax
f010ba11:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba16:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba1b:	83 c8 60             	or     $0x60,%eax
f010ba1e:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba23:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba28:	83 c8 80             	or     $0xffffff80,%eax
f010ba2b:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba30:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010ba35:	c1 e8 10             	shr    $0x10,%eax
f010ba38:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010ba3e:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010ba43:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010ba49:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010ba50:	08 00 
f010ba52:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010ba57:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba5a:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010ba5f:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010ba64:	83 e0 1f             	and    $0x1f,%eax
f010ba67:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010ba6c:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba71:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba74:	83 c8 0e             	or     $0xe,%eax
f010ba77:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010ba7c:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba81:	83 e0 ef             	and    $0xffffffef,%eax
f010ba84:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010ba89:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba8e:	83 c8 60             	or     $0x60,%eax
f010ba91:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010ba96:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba9b:	83 c8 80             	or     $0xffffff80,%eax
f010ba9e:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010baa3:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010baa8:	c1 e8 10             	shr    $0x10,%eax
f010baab:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bab1:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010bab6:	66 a3 c8 32 25 f0    	mov    %ax,0xf02532c8
f010babc:	66 c7 05 ca 32 25 f0 	movw   $0x8,0xf02532ca
f010bac3:	08 00 
f010bac5:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010baca:	83 e0 e0             	and    $0xffffffe0,%eax
f010bacd:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010bad2:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010bad7:	83 e0 1f             	and    $0x1f,%eax
f010bada:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010badf:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bae4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae7:	83 c8 0e             	or     $0xe,%eax
f010baea:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010baef:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010baf4:	83 e0 ef             	and    $0xffffffef,%eax
f010baf7:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bafc:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb01:	83 c8 60             	or     $0x60,%eax
f010bb04:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bb09:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb0e:	83 c8 80             	or     $0xffffff80,%eax
f010bb11:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bb16:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010bb1b:	c1 e8 10             	shr    $0x10,%eax
f010bb1e:	66 a3 ce 32 25 f0    	mov    %ax,0xf02532ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bb24:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010bb29:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010bb2f:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010bb36:	08 00 
f010bb38:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010bb3d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb40:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010bb45:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010bb4a:	83 e0 1f             	and    $0x1f,%eax
f010bb4d:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010bb52:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb57:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb5a:	83 c8 0e             	or     $0xe,%eax
f010bb5d:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb62:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb67:	83 e0 ef             	and    $0xffffffef,%eax
f010bb6a:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb6f:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb74:	83 c8 60             	or     $0x60,%eax
f010bb77:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb7c:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb81:	83 c8 80             	or     $0xffffff80,%eax
f010bb84:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb89:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010bb8e:	c1 e8 10             	shr    $0x10,%eax
f010bb91:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bb97:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010bb9c:	66 a3 d8 32 25 f0    	mov    %ax,0xf02532d8
f010bba2:	66 c7 05 da 32 25 f0 	movw   $0x8,0xf02532da
f010bba9:	08 00 
f010bbab:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010bbb0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbb3:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010bbb8:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010bbbd:	83 e0 1f             	and    $0x1f,%eax
f010bbc0:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010bbc5:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbca:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbcd:	83 c8 0e             	or     $0xe,%eax
f010bbd0:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbd5:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbda:	83 e0 ef             	and    $0xffffffef,%eax
f010bbdd:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbe2:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbe7:	83 c8 60             	or     $0x60,%eax
f010bbea:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbef:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbf4:	83 c8 80             	or     $0xffffff80,%eax
f010bbf7:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbfc:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010bc01:	c1 e8 10             	shr    $0x10,%eax
f010bc04:	66 a3 de 32 25 f0    	mov    %ax,0xf02532de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bc0a:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010bc0f:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010bc15:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010bc1c:	08 00 
f010bc1e:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010bc23:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc26:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010bc2b:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010bc30:	83 e0 1f             	and    $0x1f,%eax
f010bc33:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010bc38:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc3d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc40:	83 c8 0e             	or     $0xe,%eax
f010bc43:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc48:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc4d:	83 e0 ef             	and    $0xffffffef,%eax
f010bc50:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc55:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc5a:	83 c8 60             	or     $0x60,%eax
f010bc5d:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc62:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc67:	83 c8 80             	or     $0xffffff80,%eax
f010bc6a:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc6f:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010bc74:	c1 e8 10             	shr    $0x10,%eax
f010bc77:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc7d:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bc82:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010bc88:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010bc8f:	08 00 
f010bc91:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010bc96:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc99:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010bc9e:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010bca3:	83 e0 1f             	and    $0x1f,%eax
f010bca6:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010bcab:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bcb0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcb3:	83 c8 0e             	or     $0xe,%eax
f010bcb6:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bcbb:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bcc0:	83 e0 ef             	and    $0xffffffef,%eax
f010bcc3:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bcc8:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bccd:	83 c8 60             	or     $0x60,%eax
f010bcd0:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bcd5:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bcda:	83 c8 80             	or     $0xffffff80,%eax
f010bcdd:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bce2:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bce7:	c1 e8 10             	shr    $0x10,%eax
f010bcea:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bcf0:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bcf5:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010bcfb:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010bd02:	08 00 
f010bd04:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010bd09:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd0c:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010bd11:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010bd16:	83 e0 1f             	and    $0x1f,%eax
f010bd19:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010bd1e:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd23:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd26:	83 c8 0e             	or     $0xe,%eax
f010bd29:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd2e:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd33:	83 e0 ef             	and    $0xffffffef,%eax
f010bd36:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd3b:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd40:	83 c8 60             	or     $0x60,%eax
f010bd43:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd48:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd4d:	83 c8 80             	or     $0xffffff80,%eax
f010bd50:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd55:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bd5a:	c1 e8 10             	shr    $0x10,%eax
f010bd5d:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bd63:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bd68:	66 a3 f8 32 25 f0    	mov    %ax,0xf02532f8
f010bd6e:	66 c7 05 fa 32 25 f0 	movw   $0x8,0xf02532fa
f010bd75:	08 00 
f010bd77:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010bd7c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd7f:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010bd84:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010bd89:	83 e0 1f             	and    $0x1f,%eax
f010bd8c:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010bd91:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bd96:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd99:	83 c8 0e             	or     $0xe,%eax
f010bd9c:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bda1:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bda6:	83 e0 ef             	and    $0xffffffef,%eax
f010bda9:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bdae:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bdb3:	83 c8 60             	or     $0x60,%eax
f010bdb6:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bdbb:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bdc0:	83 c8 80             	or     $0xffffff80,%eax
f010bdc3:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bdc8:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bdcd:	c1 e8 10             	shr    $0x10,%eax
f010bdd0:	66 a3 fe 32 25 f0    	mov    %ax,0xf02532fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bdd6:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010bddb:	66 a3 00 33 25 f0    	mov    %ax,0xf0253300
f010bde1:	66 c7 05 02 33 25 f0 	movw   $0x8,0xf0253302
f010bde8:	08 00 
f010bdea:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010bdef:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdf2:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010bdf7:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010bdfc:	83 e0 1f             	and    $0x1f,%eax
f010bdff:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010be04:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be09:	83 e0 f0             	and    $0xfffffff0,%eax
f010be0c:	83 c8 0e             	or     $0xe,%eax
f010be0f:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be14:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be19:	83 e0 ef             	and    $0xffffffef,%eax
f010be1c:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be21:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be26:	83 c8 60             	or     $0x60,%eax
f010be29:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be2e:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be33:	83 c8 80             	or     $0xffffff80,%eax
f010be36:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be3b:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010be40:	c1 e8 10             	shr    $0x10,%eax
f010be43:	66 a3 06 33 25 f0    	mov    %ax,0xf0253306
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010be49:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010be4e:	66 a3 08 33 25 f0    	mov    %ax,0xf0253308
f010be54:	66 c7 05 0a 33 25 f0 	movw   $0x8,0xf025330a
f010be5b:	08 00 
f010be5d:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010be62:	83 e0 e0             	and    $0xffffffe0,%eax
f010be65:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010be6a:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010be6f:	83 e0 1f             	and    $0x1f,%eax
f010be72:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010be77:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010be7c:	83 e0 f0             	and    $0xfffffff0,%eax
f010be7f:	83 c8 0e             	or     $0xe,%eax
f010be82:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010be87:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010be8c:	83 e0 ef             	and    $0xffffffef,%eax
f010be8f:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010be94:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010be99:	83 c8 60             	or     $0x60,%eax
f010be9c:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010bea1:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010bea6:	83 c8 80             	or     $0xffffff80,%eax
f010bea9:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010beae:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010beb3:	c1 e8 10             	shr    $0x10,%eax
f010beb6:	66 a3 0e 33 25 f0    	mov    %ax,0xf025330e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bebc:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bec1:	66 a3 10 33 25 f0    	mov    %ax,0xf0253310
f010bec7:	66 c7 05 12 33 25 f0 	movw   $0x8,0xf0253312
f010bece:	08 00 
f010bed0:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010bed5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed8:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010bedd:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010bee2:	83 e0 1f             	and    $0x1f,%eax
f010bee5:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010beea:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010beef:	83 e0 f0             	and    $0xfffffff0,%eax
f010bef2:	83 c8 0e             	or     $0xe,%eax
f010bef5:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010befa:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010beff:	83 e0 ef             	and    $0xffffffef,%eax
f010bf02:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf07:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bf0c:	83 c8 60             	or     $0x60,%eax
f010bf0f:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf14:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bf19:	83 c8 80             	or     $0xffffff80,%eax
f010bf1c:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf21:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bf26:	c1 e8 10             	shr    $0x10,%eax
f010bf29:	66 a3 16 33 25 f0    	mov    %ax,0xf0253316
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bf2f:	b8 74 c7 10 f0       	mov    $0xf010c774,%eax
f010bf34:	66 a3 18 33 25 f0    	mov    %ax,0xf0253318
f010bf3a:	66 c7 05 1a 33 25 f0 	movw   $0x8,0xf025331a
f010bf41:	08 00 
f010bf43:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010bf48:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf4b:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010bf50:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010bf55:	83 e0 1f             	and    $0x1f,%eax
f010bf58:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010bf5d:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf62:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf65:	83 c8 0e             	or     $0xe,%eax
f010bf68:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf6d:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf72:	83 e0 ef             	and    $0xffffffef,%eax
f010bf75:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf7a:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf7f:	83 c8 60             	or     $0x60,%eax
f010bf82:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf87:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf8c:	83 c8 80             	or     $0xffffff80,%eax
f010bf8f:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf94:	b8 74 c7 10 f0       	mov    $0xf010c774,%eax
f010bf99:	c1 e8 10             	shr    $0x10,%eax
f010bf9c:	66 a3 1e 33 25 f0    	mov    %ax,0xf025331e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bfa2:	c7 05 c4 39 25 f0 00 	movl   $0xefc00000,0xf02539c4
f010bfa9:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bfac:	66 c7 05 c8 39 25 f0 	movw   $0x10,0xf02539c8
f010bfb3:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bfb5:	66 c7 05 a8 e9 18 f0 	movw   $0x68,0xf018e9a8
f010bfbc:	68 00 
f010bfbe:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010bfc3:	66 a3 aa e9 18 f0    	mov    %ax,0xf018e9aa
f010bfc9:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010bfce:	c1 e8 10             	shr    $0x10,%eax
f010bfd1:	a2 ac e9 18 f0       	mov    %al,0xf018e9ac
f010bfd6:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010bfdb:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfde:	83 c8 09             	or     $0x9,%eax
f010bfe1:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010bfe6:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010bfeb:	83 c8 10             	or     $0x10,%eax
f010bfee:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010bff3:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010bff8:	83 e0 9f             	and    $0xffffff9f,%eax
f010bffb:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c000:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c005:	83 c8 80             	or     $0xffffff80,%eax
f010c008:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c00d:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c012:	83 e0 f0             	and    $0xfffffff0,%eax
f010c015:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c01a:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c01f:	83 e0 ef             	and    $0xffffffef,%eax
f010c022:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c027:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c02c:	83 e0 df             	and    $0xffffffdf,%eax
f010c02f:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c034:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c039:	83 c8 40             	or     $0x40,%eax
f010c03c:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c041:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c046:	83 e0 7f             	and    $0x7f,%eax
f010c049:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c04e:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010c053:	c1 e8 18             	shr    $0x18,%eax
f010c056:	a2 af e9 18 f0       	mov    %al,0xf018e9af
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c05b:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c060:	83 e0 ef             	and    $0xffffffef,%eax
f010c063:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c068:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c06e:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c072:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c075:	0f 01 1d 70 ea 18 f0 	lidtl  0xf018ea70
}
f010c07c:	90                   	nop
f010c07d:	c9                   	leave  
f010c07e:	c3                   	ret    

f010c07f <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c07f:	55                   	push   %ebp
f010c080:	89 e5                	mov    %esp,%ebp
f010c082:	53                   	push   %ebx
f010c083:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c086:	83 ec 08             	sub    $0x8,%esp
f010c089:	ff 75 08             	pushl  0x8(%ebp)
f010c08c:	68 3b 34 13 f0       	push   $0xf013343b
f010c091:	e8 9b 4d ff ff       	call   f0100e31 <cprintf>
f010c096:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c099:	8b 45 08             	mov    0x8(%ebp),%eax
f010c09c:	83 ec 0c             	sub    $0xc,%esp
f010c09f:	50                   	push   %eax
f010c0a0:	e8 fd 00 00 00       	call   f010c1a2 <print_regs>
f010c0a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c0a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0ab:	8b 40 20             	mov    0x20(%eax),%eax
f010c0ae:	0f b7 c0             	movzwl %ax,%eax
f010c0b1:	83 ec 08             	sub    $0x8,%esp
f010c0b4:	50                   	push   %eax
f010c0b5:	68 4d 34 13 f0       	push   $0xf013344d
f010c0ba:	e8 72 4d ff ff       	call   f0100e31 <cprintf>
f010c0bf:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c0c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c5:	8b 40 24             	mov    0x24(%eax),%eax
f010c0c8:	0f b7 c0             	movzwl %ax,%eax
f010c0cb:	83 ec 08             	sub    $0x8,%esp
f010c0ce:	50                   	push   %eax
f010c0cf:	68 60 34 13 f0       	push   $0xf0133460
f010c0d4:	e8 58 4d ff ff       	call   f0100e31 <cprintf>
f010c0d9:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c0dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0df:	8b 58 28             	mov    0x28(%eax),%ebx
f010c0e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0e5:	8b 40 28             	mov    0x28(%eax),%eax
f010c0e8:	83 ec 0c             	sub    $0xc,%esp
f010c0eb:	50                   	push   %eax
f010c0ec:	e8 d0 ee ff ff       	call   f010afc1 <trapname>
f010c0f1:	83 c4 10             	add    $0x10,%esp
f010c0f4:	89 c2                	mov    %eax,%edx
f010c0f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f9:	8b 40 28             	mov    0x28(%eax),%eax
f010c0fc:	53                   	push   %ebx
f010c0fd:	52                   	push   %edx
f010c0fe:	50                   	push   %eax
f010c0ff:	68 73 34 13 f0       	push   $0xf0133473
f010c104:	e8 28 4d ff ff       	call   f0100e31 <cprintf>
f010c109:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c10f:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c112:	83 ec 08             	sub    $0x8,%esp
f010c115:	50                   	push   %eax
f010c116:	68 8a 34 13 f0       	push   $0xf013348a
f010c11b:	e8 11 4d ff ff       	call   f0100e31 <cprintf>
f010c120:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c123:	8b 45 08             	mov    0x8(%ebp),%eax
f010c126:	8b 40 30             	mov    0x30(%eax),%eax
f010c129:	83 ec 08             	sub    $0x8,%esp
f010c12c:	50                   	push   %eax
f010c12d:	68 99 34 13 f0       	push   $0xf0133499
f010c132:	e8 fa 4c ff ff       	call   f0100e31 <cprintf>
f010c137:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c13a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c13d:	8b 40 34             	mov    0x34(%eax),%eax
f010c140:	0f b7 c0             	movzwl %ax,%eax
f010c143:	83 ec 08             	sub    $0x8,%esp
f010c146:	50                   	push   %eax
f010c147:	68 a8 34 13 f0       	push   $0xf01334a8
f010c14c:	e8 e0 4c ff ff       	call   f0100e31 <cprintf>
f010c151:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c154:	8b 45 08             	mov    0x8(%ebp),%eax
f010c157:	8b 40 38             	mov    0x38(%eax),%eax
f010c15a:	83 ec 08             	sub    $0x8,%esp
f010c15d:	50                   	push   %eax
f010c15e:	68 bb 34 13 f0       	push   $0xf01334bb
f010c163:	e8 c9 4c ff ff       	call   f0100e31 <cprintf>
f010c168:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c16b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c16e:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c171:	83 ec 08             	sub    $0x8,%esp
f010c174:	50                   	push   %eax
f010c175:	68 ca 34 13 f0       	push   $0xf01334ca
f010c17a:	e8 b2 4c ff ff       	call   f0100e31 <cprintf>
f010c17f:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c182:	8b 45 08             	mov    0x8(%ebp),%eax
f010c185:	8b 40 40             	mov    0x40(%eax),%eax
f010c188:	0f b7 c0             	movzwl %ax,%eax
f010c18b:	83 ec 08             	sub    $0x8,%esp
f010c18e:	50                   	push   %eax
f010c18f:	68 d9 34 13 f0       	push   $0xf01334d9
f010c194:	e8 98 4c ff ff       	call   f0100e31 <cprintf>
f010c199:	83 c4 10             	add    $0x10,%esp
}
f010c19c:	90                   	nop
f010c19d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c1a0:	c9                   	leave  
f010c1a1:	c3                   	ret    

f010c1a2 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c1a2:	55                   	push   %ebp
f010c1a3:	89 e5                	mov    %esp,%ebp
f010c1a5:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ab:	8b 00                	mov    (%eax),%eax
f010c1ad:	83 ec 08             	sub    $0x8,%esp
f010c1b0:	50                   	push   %eax
f010c1b1:	68 ec 34 13 f0       	push   $0xf01334ec
f010c1b6:	e8 76 4c ff ff       	call   f0100e31 <cprintf>
f010c1bb:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1c1:	8b 40 04             	mov    0x4(%eax),%eax
f010c1c4:	83 ec 08             	sub    $0x8,%esp
f010c1c7:	50                   	push   %eax
f010c1c8:	68 fb 34 13 f0       	push   $0xf01334fb
f010c1cd:	e8 5f 4c ff ff       	call   f0100e31 <cprintf>
f010c1d2:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c1d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d8:	8b 40 08             	mov    0x8(%eax),%eax
f010c1db:	83 ec 08             	sub    $0x8,%esp
f010c1de:	50                   	push   %eax
f010c1df:	68 0a 35 13 f0       	push   $0xf013350a
f010c1e4:	e8 48 4c ff ff       	call   f0100e31 <cprintf>
f010c1e9:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c1ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ef:	8b 40 0c             	mov    0xc(%eax),%eax
f010c1f2:	83 ec 08             	sub    $0x8,%esp
f010c1f5:	50                   	push   %eax
f010c1f6:	68 19 35 13 f0       	push   $0xf0133519
f010c1fb:	e8 31 4c ff ff       	call   f0100e31 <cprintf>
f010c200:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c203:	8b 45 08             	mov    0x8(%ebp),%eax
f010c206:	8b 40 10             	mov    0x10(%eax),%eax
f010c209:	83 ec 08             	sub    $0x8,%esp
f010c20c:	50                   	push   %eax
f010c20d:	68 28 35 13 f0       	push   $0xf0133528
f010c212:	e8 1a 4c ff ff       	call   f0100e31 <cprintf>
f010c217:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c21a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21d:	8b 40 14             	mov    0x14(%eax),%eax
f010c220:	83 ec 08             	sub    $0x8,%esp
f010c223:	50                   	push   %eax
f010c224:	68 37 35 13 f0       	push   $0xf0133537
f010c229:	e8 03 4c ff ff       	call   f0100e31 <cprintf>
f010c22e:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c231:	8b 45 08             	mov    0x8(%ebp),%eax
f010c234:	8b 40 18             	mov    0x18(%eax),%eax
f010c237:	83 ec 08             	sub    $0x8,%esp
f010c23a:	50                   	push   %eax
f010c23b:	68 46 35 13 f0       	push   $0xf0133546
f010c240:	e8 ec 4b ff ff       	call   f0100e31 <cprintf>
f010c245:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c248:	8b 45 08             	mov    0x8(%ebp),%eax
f010c24b:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c24e:	83 ec 08             	sub    $0x8,%esp
f010c251:	50                   	push   %eax
f010c252:	68 55 35 13 f0       	push   $0xf0133555
f010c257:	e8 d5 4b ff ff       	call   f0100e31 <cprintf>
f010c25c:	83 c4 10             	add    $0x10,%esp
}
f010c25f:	90                   	nop
f010c260:	c9                   	leave  
f010c261:	c3                   	ret    

f010c262 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c262:	55                   	push   %ebp
f010c263:	89 e5                	mov    %esp,%ebp
f010c265:	57                   	push   %edi
f010c266:	56                   	push   %esi
f010c267:	53                   	push   %ebx
f010c268:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c26e:	8b 40 28             	mov    0x28(%eax),%eax
f010c271:	83 f8 0e             	cmp    $0xe,%eax
f010c274:	75 29                	jne    f010c29f <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c276:	83 ec 0c             	sub    $0xc,%esp
f010c279:	6a 01                	push   $0x1
f010c27b:	e8 c3 15 00 00       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f010c280:	83 c4 10             	add    $0x10,%esp
f010c283:	85 c0                	test   %eax,%eax
f010c285:	74 05                	je     f010c28c <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c287:	e8 79 a1 ff ff       	call   f0106405 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c28c:	83 ec 0c             	sub    $0xc,%esp
f010c28f:	ff 75 08             	pushl  0x8(%ebp)
f010c292:	e8 51 02 00 00       	call   f010c4e8 <fault_handler>
f010c297:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c29a:	e9 bb 00 00 00       	jmp    f010c35a <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c29f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a2:	8b 40 28             	mov    0x28(%eax),%eax
f010c2a5:	83 f8 30             	cmp    $0x30,%eax
f010c2a8:	75 42                	jne    f010c2ec <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c2aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ad:	8b 78 04             	mov    0x4(%eax),%edi
f010c2b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b3:	8b 30                	mov    (%eax),%esi
f010c2b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b8:	8b 58 10             	mov    0x10(%eax),%ebx
f010c2bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2be:	8b 48 18             	mov    0x18(%eax),%ecx
f010c2c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c4:	8b 50 14             	mov    0x14(%eax),%edx
f010c2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ca:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c2cd:	83 ec 08             	sub    $0x8,%esp
f010c2d0:	57                   	push   %edi
f010c2d1:	56                   	push   %esi
f010c2d2:	53                   	push   %ebx
f010c2d3:	51                   	push   %ecx
f010c2d4:	52                   	push   %edx
f010c2d5:	50                   	push   %eax
f010c2d6:	e8 a7 0b 00 00       	call   f010ce82 <syscall>
f010c2db:	83 c4 20             	add    $0x20,%esp
f010c2de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c2e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2e7:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c2ea:	eb 6e                	jmp    f010c35a <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c2ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ef:	8b 40 28             	mov    0x28(%eax),%eax
f010c2f2:	83 f8 08             	cmp    $0x8,%eax
f010c2f5:	75 17                	jne    f010c30e <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c2f7:	83 ec 04             	sub    $0x4,%esp
f010c2fa:	68 64 35 13 f0       	push   $0xf0133564
f010c2ff:	68 e7 00 00 00       	push   $0xe7
f010c304:	68 73 35 13 f0       	push   $0xf0133573
f010c309:	e8 a2 3e ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c30e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c311:	8b 40 28             	mov    0x28(%eax),%eax
f010c314:	83 f8 20             	cmp    $0x20,%eax
f010c317:	75 07                	jne    f010c320 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c319:	e8 aa a0 ff ff       	call   f01063c8 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c31e:	eb 3a                	jmp    f010c35a <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c320:	8b 45 08             	mov    0x8(%ebp),%eax
f010c323:	8b 40 34             	mov    0x34(%eax),%eax
f010c326:	66 83 f8 08          	cmp    $0x8,%ax
f010c32a:	75 17                	jne    f010c343 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c32c:	83 ec 04             	sub    $0x4,%esp
f010c32f:	68 84 35 13 f0       	push   $0xf0133584
f010c334:	68 f4 00 00 00       	push   $0xf4
f010c339:	68 73 35 13 f0       	push   $0xf0133573
f010c33e:	e8 6d 3e ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c343:	83 ec 04             	sub    $0x4,%esp
f010c346:	68 a0 35 13 f0       	push   $0xf01335a0
f010c34b:	68 f8 00 00 00       	push   $0xf8
f010c350:	68 73 35 13 f0       	push   $0xf0133573
f010c355:	e8 56 3e ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c35a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c35d:	5b                   	pop    %ebx
f010c35e:	5e                   	pop    %esi
f010c35f:	5f                   	pop    %edi
f010c360:	5d                   	pop    %ebp
f010c361:	c3                   	ret    

f010c362 <trap>:

void trap(struct Trapframe *tf)
{
f010c362:	55                   	push   %ebp
f010c363:	89 e5                	mov    %esp,%ebp
f010c365:	57                   	push   %edi
f010c366:	56                   	push   %esi
f010c367:	53                   	push   %ebx
f010c368:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c36b:	e8 5c 87 ff ff       	call   f0104acc <kclock_stop>

	int userTrap = 0;
f010c370:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c377:	8b 45 08             	mov    0x8(%ebp),%eax
f010c37a:	8b 40 34             	mov    0x34(%eax),%eax
f010c37d:	0f b7 c0             	movzwl %ax,%eax
f010c380:	83 e0 03             	and    $0x3,%eax
f010c383:	83 f8 03             	cmp    $0x3,%eax
f010c386:	75 49                	jne    f010c3d1 <trap+0x6f>
		assert(curenv);
f010c388:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c38d:	85 c0                	test   %eax,%eax
f010c38f:	75 19                	jne    f010c3aa <trap+0x48>
f010c391:	68 bf 35 13 f0       	push   $0xf01335bf
f010c396:	68 c6 35 13 f0       	push   $0xf01335c6
f010c39b:	68 06 01 00 00       	push   $0x106
f010c3a0:	68 73 35 13 f0       	push   $0xf0133573
f010c3a5:	e8 06 3e ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c3aa:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c3b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b3:	89 c3                	mov    %eax,%ebx
f010c3b5:	b8 11 00 00 00       	mov    $0x11,%eax
f010c3ba:	89 d7                	mov    %edx,%edi
f010c3bc:	89 de                	mov    %ebx,%esi
f010c3be:	89 c1                	mov    %eax,%ecx
f010c3c0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c3c2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c3c7:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c3ca:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c3d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d4:	8b 40 28             	mov    0x28(%eax),%eax
f010c3d7:	83 f8 20             	cmp    $0x20,%eax
f010c3da:	75 40                	jne    f010c41c <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c3dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3e0:	0f 84 a6 00 00 00    	je     f010c48c <trap+0x12a>
		{
			assert(curenv);
f010c3e6:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c3eb:	85 c0                	test   %eax,%eax
f010c3ed:	75 19                	jne    f010c408 <trap+0xa6>
f010c3ef:	68 bf 35 13 f0       	push   $0xf01335bf
f010c3f4:	68 c6 35 13 f0       	push   $0xf01335c6
f010c3f9:	68 12 01 00 00       	push   $0x112
f010c3fe:	68 73 35 13 f0       	push   $0xf0133573
f010c403:	e8 a8 3d ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c408:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c40d:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c413:	42                   	inc    %edx
f010c414:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c41a:	eb 70                	jmp    f010c48c <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c41c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c41f:	8b 40 28             	mov    0x28(%eax),%eax
f010c422:	83 f8 0e             	cmp    $0xe,%eax
f010c425:	75 65                	jne    f010c48c <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c427:	a0 28 3a 25 f0       	mov    0xf0253a28,%al
f010c42c:	84 c0                	test   %al,%al
f010c42e:	74 5c                	je     f010c48c <trap+0x12a>
			if (userTrap){
f010c430:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c434:	74 2c                	je     f010c462 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c436:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c43b:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c441:	8b 52 30             	mov    0x30(%edx),%edx
f010c444:	89 d1                	mov    %edx,%ecx
f010c446:	8a 15 28 3a 25 f0    	mov    0xf0253a28,%dl
f010c44c:	0f b6 d2             	movzbl %dl,%edx
f010c44f:	01 ca                	add    %ecx,%edx
f010c451:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c454:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c459:	83 ec 0c             	sub    $0xc,%esp
f010c45c:	50                   	push   %eax
f010c45d:	e8 ea d4 ff ff       	call   f010994c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c462:	8b 45 08             	mov    0x8(%ebp),%eax
f010c465:	8b 40 30             	mov    0x30(%eax),%eax
f010c468:	89 c2                	mov    %eax,%edx
f010c46a:	a0 28 3a 25 f0       	mov    0xf0253a28,%al
f010c46f:	0f b6 c0             	movzbl %al,%eax
f010c472:	01 d0                	add    %edx,%eax
f010c474:	89 c2                	mov    %eax,%edx
f010c476:	8b 45 08             	mov    0x8(%ebp),%eax
f010c479:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c47c:	e8 76 86 ff ff       	call   f0104af7 <kclock_resume>
				env_pop_tf(tf);
f010c481:	83 ec 0c             	sub    $0xc,%esp
f010c484:	ff 75 08             	pushl  0x8(%ebp)
f010c487:	e8 12 d6 ff ff       	call   f0109a9e <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c48c:	83 ec 0c             	sub    $0xc,%esp
f010c48f:	ff 75 08             	pushl  0x8(%ebp)
f010c492:	e8 cb fd ff ff       	call   f010c262 <trap_dispatch>
f010c497:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c49a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c49e:	74 3d                	je     f010c4dd <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c4a0:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4a5:	85 c0                	test   %eax,%eax
f010c4a7:	74 0d                	je     f010c4b6 <trap+0x154>
f010c4a9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4ae:	8b 40 54             	mov    0x54(%eax),%eax
f010c4b1:	83 f8 02             	cmp    $0x2,%eax
f010c4b4:	74 19                	je     f010c4cf <trap+0x16d>
f010c4b6:	68 dc 35 13 f0       	push   $0xf01335dc
f010c4bb:	68 c6 35 13 f0       	push   $0xf01335c6
f010c4c0:	68 27 01 00 00       	push   $0x127
f010c4c5:	68 73 35 13 f0       	push   $0xf0133573
f010c4ca:	e8 e1 3c ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c4cf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4d4:	83 ec 0c             	sub    $0xc,%esp
f010c4d7:	50                   	push   %eax
f010c4d8:	e8 6f d4 ff ff       	call   f010994c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c4dd:	83 ec 0c             	sub    $0xc,%esp
f010c4e0:	ff 75 08             	pushl  0x8(%ebp)
f010c4e3:	e8 b6 d5 ff ff       	call   f0109a9e <env_pop_tf>

f010c4e8 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c4e8:	55                   	push   %ebp
f010c4e9:	89 e5                	mov    %esp,%ebp
f010c4eb:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c4ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c4f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4f8:	8b 40 34             	mov    0x34(%eax),%eax
f010c4fb:	0f b7 c0             	movzwl %ax,%eax
f010c4fe:	83 e0 03             	and    $0x3,%eax
f010c501:	83 f8 03             	cmp    $0x3,%eax
f010c504:	75 07                	jne    f010c50d <fault_handler+0x25>
		userTrap = 1;
f010c506:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c50d:	0f 20 d0             	mov    %cr2,%eax
f010c510:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c513:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c516:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c519:	a1 a0 39 25 f0       	mov    0xf02539a0,%eax
f010c51e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c521:	75 2b                	jne    f010c54e <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c523:	a0 a4 39 25 f0       	mov    0xf02539a4,%al
f010c528:	40                   	inc    %eax
f010c529:	a2 a4 39 25 f0       	mov    %al,0xf02539a4
		if (num_repeated_fault == 3)
f010c52e:	a0 a4 39 25 f0       	mov    0xf02539a4,%al
f010c533:	3c 03                	cmp    $0x3,%al
f010c535:	75 1e                	jne    f010c555 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c537:	ff 75 ec             	pushl  -0x14(%ebp)
f010c53a:	68 0c 36 13 f0       	push   $0xf013360c
f010c53f:	68 4a 01 00 00       	push   $0x14a
f010c544:	68 73 35 13 f0       	push   $0xf0133573
f010c549:	e8 62 3c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c54e:	c6 05 a4 39 25 f0 00 	movb   $0x0,0xf02539a4
	}
	last_fault_va = fault_va ;
f010c555:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c558:	a3 a0 39 25 f0       	mov    %eax,0xf02539a0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c55d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c561:	75 29                	jne    f010c58c <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c563:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c56a:	77 40                	ja     f010c5ac <fault_handler+0xc4>
f010c56c:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c573:	76 37                	jbe    f010c5ac <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c575:	83 ec 04             	sub    $0x4,%esp
f010c578:	68 58 36 13 f0       	push   $0xf0133658
f010c57d:	68 56 01 00 00       	push   $0x156
f010c582:	68 73 35 13 f0       	push   $0xf0133573
f010c587:	e8 24 3c ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c58c:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c593:	76 17                	jbe    f010c5ac <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c595:	83 ec 04             	sub    $0x4,%esp
f010c598:	68 7c 36 13 f0       	push   $0xf013367c
f010c59d:	68 5c 01 00 00       	push   $0x15c
f010c5a2:	68 73 35 13 f0       	push   $0xf0133573
f010c5a7:	e8 04 3c ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c5ac:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c5b1:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c5b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5b7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c5c0:	c1 ea 16             	shr    $0x16,%edx
f010c5c3:	c1 e2 02             	shl    $0x2,%edx
f010c5c6:	01 d0                	add    %edx,%eax
f010c5c8:	8b 00                	mov    (%eax),%eax
f010c5ca:	83 e0 01             	and    $0x1,%eax
f010c5cd:	85 c0                	test   %eax,%eax
f010c5cf:	75 28                	jne    f010c5f9 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c5d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5d4:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c5da:	8d 50 01             	lea    0x1(%eax),%edx
f010c5dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5e0:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c5e6:	83 ec 08             	sub    $0x8,%esp
f010c5e9:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5ec:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5ef:	e8 34 13 00 00       	call   f010d928 <table_fault_handler>
f010c5f4:	83 c4 10             	add    $0x10,%esp
f010c5f7:	eb 7e                	jmp    f010c677 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c5f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5fc:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c602:	83 ec 08             	sub    $0x8,%esp
f010c605:	ff 75 ec             	pushl  -0x14(%ebp)
f010c608:	50                   	push   %eax
f010c609:	e8 d5 ba ff ff       	call   f01080e3 <pt_get_page_permissions>
f010c60e:	83 c4 10             	add    $0x10,%esp
f010c611:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c617:	83 e0 01             	and    $0x1,%eax
f010c61a:	85 c0                	test   %eax,%eax
f010c61c:	74 17                	je     f010c635 <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c61e:	ff 75 ec             	pushl  -0x14(%ebp)
f010c621:	68 a0 36 13 f0       	push   $0xf01336a0
f010c626:	68 7b 01 00 00       	push   $0x17b
f010c62b:	68 73 35 13 f0       	push   $0xf0133573
f010c630:	e8 7b 3b ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c635:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c638:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c63e:	8d 50 01             	lea    0x1(%eax),%edx
f010c641:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c644:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c64a:	e8 b7 12 00 00       	call   f010d906 <isBufferingEnabled>
f010c64f:	84 c0                	test   %al,%al
f010c651:	74 13                	je     f010c666 <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c653:	83 ec 08             	sub    $0x8,%esp
f010c656:	ff 75 ec             	pushl  -0x14(%ebp)
f010c659:	ff 75 e8             	pushl  -0x18(%ebp)
f010c65c:	e8 6a 13 00 00       	call   f010d9cb <__page_fault_handler_with_buffering>
f010c661:	83 c4 10             	add    $0x10,%esp
f010c664:	eb 11                	jmp    f010c677 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c666:	83 ec 08             	sub    $0x8,%esp
f010c669:	ff 75 ec             	pushl  -0x14(%ebp)
f010c66c:	ff 75 e8             	pushl  -0x18(%ebp)
f010c66f:	e8 d9 12 00 00       	call   f010d94d <page_fault_handler>
f010c674:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c677:	0f 20 d8             	mov    %cr3,%eax
f010c67a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c67d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c680:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c683:	90                   	nop
f010c684:	c9                   	leave  
f010c685:	c3                   	ret    

f010c686 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c686:	6a 0e                	push   $0xe
f010c688:	e9 ed 00 00 00       	jmp    f010c77a <_alltraps>
f010c68d:	90                   	nop

f010c68e <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c68e:	6a 00                	push   $0x0
f010c690:	6a 30                	push   $0x30
f010c692:	e9 e3 00 00 00       	jmp    f010c77a <_alltraps>
f010c697:	90                   	nop

f010c698 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c698:	6a 08                	push   $0x8
f010c69a:	e9 db 00 00 00       	jmp    f010c77a <_alltraps>
f010c69f:	90                   	nop

f010c6a0 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c6a0:	6a 00                	push   $0x0
f010c6a2:	6a 00                	push   $0x0
f010c6a4:	e9 d1 00 00 00       	jmp    f010c77a <_alltraps>
f010c6a9:	90                   	nop

f010c6aa <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c6aa:	6a 00                	push   $0x0
f010c6ac:	6a 01                	push   $0x1
f010c6ae:	e9 c7 00 00 00       	jmp    f010c77a <_alltraps>
f010c6b3:	90                   	nop

f010c6b4 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c6b4:	6a 00                	push   $0x0
f010c6b6:	6a 02                	push   $0x2
f010c6b8:	e9 bd 00 00 00       	jmp    f010c77a <_alltraps>
f010c6bd:	90                   	nop

f010c6be <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c6be:	6a 00                	push   $0x0
f010c6c0:	6a 03                	push   $0x3
f010c6c2:	e9 b3 00 00 00       	jmp    f010c77a <_alltraps>
f010c6c7:	90                   	nop

f010c6c8 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c6c8:	6a 00                	push   $0x0
f010c6ca:	6a 04                	push   $0x4
f010c6cc:	e9 a9 00 00 00       	jmp    f010c77a <_alltraps>
f010c6d1:	90                   	nop

f010c6d2 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c6d2:	6a 00                	push   $0x0
f010c6d4:	6a 05                	push   $0x5
f010c6d6:	e9 9f 00 00 00       	jmp    f010c77a <_alltraps>
f010c6db:	90                   	nop

f010c6dc <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c6dc:	6a 00                	push   $0x0
f010c6de:	6a 06                	push   $0x6
f010c6e0:	e9 95 00 00 00       	jmp    f010c77a <_alltraps>
f010c6e5:	90                   	nop

f010c6e6 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c6e6:	6a 00                	push   $0x0
f010c6e8:	6a 07                	push   $0x7
f010c6ea:	e9 8b 00 00 00       	jmp    f010c77a <_alltraps>
f010c6ef:	90                   	nop

f010c6f0 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c6f0:	6a 0a                	push   $0xa
f010c6f2:	e9 83 00 00 00       	jmp    f010c77a <_alltraps>
f010c6f7:	90                   	nop

f010c6f8 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c6f8:	6a 0b                	push   $0xb
f010c6fa:	eb 7e                	jmp    f010c77a <_alltraps>

f010c6fc <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c6fc:	6a 0c                	push   $0xc
f010c6fe:	eb 7a                	jmp    f010c77a <_alltraps>

f010c700 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c700:	6a 0d                	push   $0xd
f010c702:	eb 76                	jmp    f010c77a <_alltraps>

f010c704 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c704:	6a 00                	push   $0x0
f010c706:	6a 10                	push   $0x10
f010c708:	eb 70                	jmp    f010c77a <_alltraps>

f010c70a <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c70a:	6a 11                	push   $0x11
f010c70c:	eb 6c                	jmp    f010c77a <_alltraps>

f010c70e <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c70e:	6a 00                	push   $0x0
f010c710:	6a 12                	push   $0x12
f010c712:	eb 66                	jmp    f010c77a <_alltraps>

f010c714 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c714:	6a 00                	push   $0x0
f010c716:	6a 13                	push   $0x13
f010c718:	eb 60                	jmp    f010c77a <_alltraps>

f010c71a <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c71a:	6a 00                	push   $0x0
f010c71c:	6a 20                	push   $0x20
f010c71e:	eb 5a                	jmp    f010c77a <_alltraps>

f010c720 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c720:	6a 00                	push   $0x0
f010c722:	6a 21                	push   $0x21
f010c724:	eb 54                	jmp    f010c77a <_alltraps>

f010c726 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c726:	6a 00                	push   $0x0
f010c728:	6a 22                	push   $0x22
f010c72a:	eb 4e                	jmp    f010c77a <_alltraps>

f010c72c <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c72c:	6a 00                	push   $0x0
f010c72e:	6a 23                	push   $0x23
f010c730:	eb 48                	jmp    f010c77a <_alltraps>

f010c732 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c732:	6a 00                	push   $0x0
f010c734:	6a 24                	push   $0x24
f010c736:	eb 42                	jmp    f010c77a <_alltraps>

f010c738 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c738:	6a 00                	push   $0x0
f010c73a:	6a 25                	push   $0x25
f010c73c:	eb 3c                	jmp    f010c77a <_alltraps>

f010c73e <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c73e:	6a 00                	push   $0x0
f010c740:	6a 26                	push   $0x26
f010c742:	eb 36                	jmp    f010c77a <_alltraps>

f010c744 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c744:	6a 00                	push   $0x0
f010c746:	6a 27                	push   $0x27
f010c748:	eb 30                	jmp    f010c77a <_alltraps>

f010c74a <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c74a:	6a 00                	push   $0x0
f010c74c:	6a 28                	push   $0x28
f010c74e:	eb 2a                	jmp    f010c77a <_alltraps>

f010c750 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c750:	6a 00                	push   $0x0
f010c752:	6a 29                	push   $0x29
f010c754:	eb 24                	jmp    f010c77a <_alltraps>

f010c756 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c756:	6a 00                	push   $0x0
f010c758:	6a 2a                	push   $0x2a
f010c75a:	eb 1e                	jmp    f010c77a <_alltraps>

f010c75c <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c75c:	6a 00                	push   $0x0
f010c75e:	6a 2b                	push   $0x2b
f010c760:	eb 18                	jmp    f010c77a <_alltraps>

f010c762 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c762:	6a 00                	push   $0x0
f010c764:	6a 2c                	push   $0x2c
f010c766:	eb 12                	jmp    f010c77a <_alltraps>

f010c768 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c768:	6a 00                	push   $0x0
f010c76a:	6a 2d                	push   $0x2d
f010c76c:	eb 0c                	jmp    f010c77a <_alltraps>

f010c76e <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c76e:	6a 00                	push   $0x0
f010c770:	6a 2e                	push   $0x2e
f010c772:	eb 06                	jmp    f010c77a <_alltraps>

f010c774 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c774:	6a 00                	push   $0x0
f010c776:	6a 2f                	push   $0x2f
f010c778:	eb 00                	jmp    f010c77a <_alltraps>

f010c77a <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c77a:	1e                   	push   %ds
push %es
f010c77b:	06                   	push   %es
pushal
f010c77c:	60                   	pusha  

mov $(GD_KD), %ax
f010c77d:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c781:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c783:	8e c0                	mov    %eax,%es

push %esp
f010c785:	54                   	push   %esp

call trap
f010c786:	e8 d7 fb ff ff       	call   f010c362 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c78b:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c78c:	61                   	popa   
pop %es
f010c78d:	07                   	pop    %es
pop %ds
f010c78e:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c78f:	83 c4 08             	add    $0x8,%esp

iret
f010c792:	cf                   	iret   

f010c793 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c793:	55                   	push   %ebp
f010c794:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c796:	8b 45 08             	mov    0x8(%ebp),%eax
f010c799:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f010c79f:	29 d0                	sub    %edx,%eax
f010c7a1:	c1 f8 02             	sar    $0x2,%eax
f010c7a4:	89 c2                	mov    %eax,%edx
f010c7a6:	89 d0                	mov    %edx,%eax
f010c7a8:	c1 e0 03             	shl    $0x3,%eax
f010c7ab:	01 d0                	add    %edx,%eax
f010c7ad:	c1 e0 03             	shl    $0x3,%eax
f010c7b0:	01 d0                	add    %edx,%eax
f010c7b2:	c1 e0 03             	shl    $0x3,%eax
f010c7b5:	01 d0                	add    %edx,%eax
f010c7b7:	c1 e0 03             	shl    $0x3,%eax
f010c7ba:	01 d0                	add    %edx,%eax
f010c7bc:	89 c1                	mov    %eax,%ecx
f010c7be:	c1 e1 0f             	shl    $0xf,%ecx
f010c7c1:	01 c8                	add    %ecx,%eax
f010c7c3:	c1 e0 03             	shl    $0x3,%eax
f010c7c6:	01 d0                	add    %edx,%eax
f010c7c8:	f7 d8                	neg    %eax
}
f010c7ca:	5d                   	pop    %ebp
f010c7cb:	c3                   	ret    

f010c7cc <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c7cc:	55                   	push   %ebp
f010c7cd:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c7cf:	ff 75 08             	pushl  0x8(%ebp)
f010c7d2:	e8 bc ff ff ff       	call   f010c793 <to_frame_number>
f010c7d7:	83 c4 04             	add    $0x4,%esp
f010c7da:	c1 e0 0c             	shl    $0xc,%eax
}
f010c7dd:	c9                   	leave  
f010c7de:	c3                   	ret    

f010c7df <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c7df:	55                   	push   %ebp
f010c7e0:	89 e5                	mov    %esp,%ebp
f010c7e2:	83 ec 18             	sub    $0x18,%esp
f010c7e5:	8b 45 10             	mov    0x10(%ebp),%eax
f010c7e8:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c7eb:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c7ef:	74 23                	je     f010c814 <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c7f1:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c7f6:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7f9:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c7ff:	83 c2 5c             	add    $0x5c,%edx
f010c802:	83 ec 04             	sub    $0x4,%esp
f010c805:	50                   	push   %eax
f010c806:	52                   	push   %edx
f010c807:	68 90 38 13 f0       	push   $0xf0133890
f010c80c:	e8 20 46 ff ff       	call   f0100e31 <cprintf>
f010c811:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c814:	83 ec 04             	sub    $0x4,%esp
f010c817:	ff 75 08             	pushl  0x8(%ebp)
f010c81a:	ff 75 0c             	pushl  0xc(%ebp)
f010c81d:	68 99 38 13 f0       	push   $0xf0133899
f010c822:	e8 0a 46 ff ff       	call   f0100e31 <cprintf>
f010c827:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c82a:	90                   	nop
f010c82b:	c9                   	leave  
f010c82c:	c3                   	ret    

f010c82d <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c82d:	55                   	push   %ebp
f010c82e:	89 e5                	mov    %esp,%ebp
f010c830:	83 ec 18             	sub    $0x18,%esp
f010c833:	8b 45 08             	mov    0x8(%ebp),%eax
f010c836:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c839:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c83d:	83 ec 08             	sub    $0x8,%esp
f010c840:	50                   	push   %eax
f010c841:	68 9e 38 13 f0       	push   $0xf013389e
f010c846:	e8 e6 45 ff ff       	call   f0100e31 <cprintf>
f010c84b:	83 c4 10             	add    $0x10,%esp
}
f010c84e:	90                   	nop
f010c84f:	c9                   	leave  
f010c850:	c3                   	ret    

f010c851 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c851:	55                   	push   %ebp
f010c852:	89 e5                	mov    %esp,%ebp
f010c854:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c857:	e8 0b 44 ff ff       	call   f0100c67 <cons_getc2>
f010c85c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c85f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c862:	c9                   	leave  
f010c863:	c3                   	ret    

f010c864 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c864:	55                   	push   %ebp
f010c865:	89 e5                	mov    %esp,%ebp
f010c867:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c86a:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c86f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c872:	83 ec 0c             	sub    $0xc,%esp
f010c875:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c878:	50                   	push   %eax
f010c879:	e8 a7 aa ff ff       	call   f0107325 <allocate_frame>
f010c87e:	83 c4 10             	add    $0x10,%esp
f010c881:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c884:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c888:	75 08                	jne    f010c892 <__sys_allocate_page+0x2e>
		return r ;
f010c88a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c88d:	e9 d3 00 00 00       	jmp    f010c965 <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c892:	8b 45 08             	mov    0x8(%ebp),%eax
f010c895:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c89a:	77 0c                	ja     f010c8a8 <__sys_allocate_page+0x44>
f010c89c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c89f:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c8a4:	85 c0                	test   %eax,%eax
f010c8a6:	74 0a                	je     f010c8b2 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c8a8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8ad:	e9 b3 00 00 00       	jmp    f010c965 <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c8b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8b5:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c8ba:	83 f8 04             	cmp    $0x4,%eax
f010c8bd:	74 0a                	je     f010c8c9 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c8bf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8c4:	e9 9c 00 00 00       	jmp    f010c965 <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c8c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c8cc:	83 ec 0c             	sub    $0xc,%esp
f010c8cf:	50                   	push   %eax
f010c8d0:	e8 f7 fe ff ff       	call   f010c7cc <to_physical_address>
f010c8d5:	83 c4 10             	add    $0x10,%esp
f010c8d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c8db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8de:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c8e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8e4:	c1 e8 0c             	shr    $0xc,%eax
f010c8e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c8ea:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010c8ef:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c8f2:	72 17                	jb     f010c90b <__sys_allocate_page+0xa7>
f010c8f4:	ff 75 e8             	pushl  -0x18(%ebp)
f010c8f7:	68 a4 38 13 f0       	push   $0xf01338a4
f010c8fc:	68 8d 00 00 00       	push   $0x8d
f010c901:	68 d3 38 13 f0       	push   $0xf01338d3
f010c906:	e8 a5 38 ff ff       	call   f01001b0 <_panic>
f010c90b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c90e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c913:	83 ec 04             	sub    $0x4,%esp
f010c916:	68 00 10 00 00       	push   $0x1000
f010c91b:	6a 00                	push   $0x0
f010c91d:	50                   	push   %eax
f010c91e:	e8 cb 28 02 00       	call   f012f1ee <memset>
f010c923:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c926:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c92c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c92f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c935:	ff 75 0c             	pushl  0xc(%ebp)
f010c938:	51                   	push   %ecx
f010c939:	52                   	push   %edx
f010c93a:	50                   	push   %eax
f010c93b:	e8 80 ad ff ff       	call   f01076c0 <map_frame>
f010c940:	83 c4 10             	add    $0x10,%esp
f010c943:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c946:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c94a:	75 14                	jne    f010c960 <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c94c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c94f:	83 ec 0c             	sub    $0xc,%esp
f010c952:	50                   	push   %eax
f010c953:	e8 5f ab ff ff       	call   f01074b7 <decrement_references>
f010c958:	83 c4 10             	add    $0x10,%esp
		return r;
f010c95b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c95e:	eb 05                	jmp    f010c965 <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c960:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c965:	c9                   	leave  
f010c966:	c3                   	ret    

f010c967 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c967:	55                   	push   %ebp
f010c968:	89 e5                	mov    %esp,%ebp
f010c96a:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c96d:	83 ec 04             	sub    $0x4,%esp
f010c970:	68 e7 38 13 f0       	push   $0xf01338e7
f010c975:	68 b4 00 00 00       	push   $0xb4
f010c97a:	68 d3 38 13 f0       	push   $0xf01338d3
f010c97f:	e8 2c 38 ff ff       	call   f01001b0 <_panic>

f010c984 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c984:	55                   	push   %ebp
f010c985:	89 e5                	mov    %esp,%ebp
f010c987:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c98a:	83 ec 04             	sub    $0x4,%esp
f010c98d:	68 08 39 13 f0       	push   $0xf0133908
f010c992:	68 c5 00 00 00       	push   $0xc5
f010c997:	68 d3 38 13 f0       	push   $0xf01338d3
f010c99c:	e8 0f 38 ff ff       	call   f01001b0 <_panic>

f010c9a1 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c9a1:	55                   	push   %ebp
f010c9a2:	89 e5                	mov    %esp,%ebp
f010c9a4:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c9a7:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c9ac:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c9b2:	83 ec 04             	sub    $0x4,%esp
f010c9b5:	ff 75 0c             	pushl  0xc(%ebp)
f010c9b8:	ff 75 08             	pushl  0x8(%ebp)
f010c9bb:	50                   	push   %eax
f010c9bc:	e8 4e c2 ff ff       	call   f0108c0f <calculate_required_frames>
f010c9c1:	83 c4 10             	add    $0x10,%esp
}
f010c9c4:	c9                   	leave  
f010c9c5:	c3                   	ret    

f010c9c6 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c9c6:	55                   	push   %ebp
f010c9c7:	89 e5                	mov    %esp,%ebp
f010c9c9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9cc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9cf:	83 ec 0c             	sub    $0xc,%esp
f010c9d2:	50                   	push   %eax
f010c9d3:	e8 58 af ff ff       	call   f0107930 <calculate_available_frames>
f010c9d8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c9db:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9e1:	01 d0                	add    %edx,%eax
}
f010c9e3:	c9                   	leave  
f010c9e4:	c3                   	ret    

f010c9e5 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c9e5:	55                   	push   %ebp
f010c9e6:	89 e5                	mov    %esp,%ebp
f010c9e8:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9eb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9ee:	83 ec 0c             	sub    $0xc,%esp
f010c9f1:	50                   	push   %eax
f010c9f2:	e8 39 af ff ff       	call   f0107930 <calculate_available_frames>
f010c9f7:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c9fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c9fd:	c9                   	leave  
f010c9fe:	c3                   	ret    

f010c9ff <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c9ff:	55                   	push   %ebp
f010ca00:	89 e5                	mov    %esp,%ebp
f010ca02:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca05:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca08:	83 ec 0c             	sub    $0xc,%esp
f010ca0b:	50                   	push   %eax
f010ca0c:	e8 1f af ff ff       	call   f0107930 <calculate_available_frames>
f010ca11:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ca14:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010ca17:	c9                   	leave  
f010ca18:	c3                   	ret    

f010ca19 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010ca19:	55                   	push   %ebp
f010ca1a:	89 e5                	mov    %esp,%ebp
f010ca1c:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010ca1f:	83 ec 0c             	sub    $0xc,%esp
f010ca22:	ff 75 08             	pushl  0x8(%ebp)
f010ca25:	e8 fa 14 02 00       	call   f012df24 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010ca2a:	83 c4 10             	add    $0x10,%esp
}
f010ca2d:	c9                   	leave  
f010ca2e:	c3                   	ret    

f010ca2f <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010ca2f:	55                   	push   %ebp
f010ca30:	89 e5                	mov    %esp,%ebp
f010ca32:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010ca35:	e8 42 14 02 00       	call   f012de7c <scarce_memory>
}
f010ca3a:	90                   	nop
f010ca3b:	c9                   	leave  
f010ca3c:	c3                   	ret    

f010ca3d <sys_clearFFL>:

void sys_clearFFL()
{
f010ca3d:	55                   	push   %ebp
f010ca3e:	89 e5                	mov    %esp,%ebp
f010ca40:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ca43:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f010ca48:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ca4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca52:	eb 12                	jmp    f010ca66 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ca54:	83 ec 0c             	sub    $0xc,%esp
f010ca57:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca5a:	50                   	push   %eax
f010ca5b:	e8 c5 a8 ff ff       	call   f0107325 <allocate_frame>
f010ca60:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca63:	ff 45 f4             	incl   -0xc(%ebp)
f010ca66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca69:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ca6c:	7c e6                	jl     f010ca54 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ca6e:	90                   	nop
f010ca6f:	c9                   	leave  
f010ca70:	c3                   	ret    

f010ca71 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ca71:	55                   	push   %ebp
f010ca72:	89 e5                	mov    %esp,%ebp
f010ca74:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ca77:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ca7c:	83 ec 0c             	sub    $0xc,%esp
f010ca7f:	50                   	push   %eax
f010ca80:	e8 28 7b ff ff       	call   f01045ad <pf_calculate_allocated_pages>
f010ca85:	83 c4 10             	add    $0x10,%esp
}
f010ca88:	c9                   	leave  
f010ca89:	c3                   	ret    

f010ca8a <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010ca8a:	55                   	push   %ebp
f010ca8b:	89 e5                	mov    %esp,%ebp
f010ca8d:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010ca90:	e8 71 0e 00 00       	call   f010d906 <isBufferingEnabled>
f010ca95:	84 c0                	test   %al,%al
f010ca97:	74 19                	je     f010cab2 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ca99:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ca9e:	83 ec 04             	sub    $0x4,%esp
f010caa1:	ff 75 0c             	pushl  0xc(%ebp)
f010caa4:	ff 75 08             	pushl  0x8(%ebp)
f010caa7:	50                   	push   %eax
f010caa8:	e8 98 c1 ff ff       	call   f0108c45 <__free_user_mem_with_buffering>
f010caad:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cab0:	eb 18                	jmp    f010caca <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cab2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cab7:	83 ec 04             	sub    $0x4,%esp
f010caba:	ff 75 0c             	pushl  0xc(%ebp)
f010cabd:	ff 75 08             	pushl  0x8(%ebp)
f010cac0:	50                   	push   %eax
f010cac1:	e8 71 c1 ff ff       	call   f0108c37 <free_user_mem>
f010cac6:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cac9:	90                   	nop
}
f010caca:	c9                   	leave  
f010cacb:	c3                   	ret    

f010cacc <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cacc:	55                   	push   %ebp
f010cacd:	89 e5                	mov    %esp,%ebp
f010cacf:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cad2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cad7:	83 ec 04             	sub    $0x4,%esp
f010cada:	ff 75 0c             	pushl  0xc(%ebp)
f010cadd:	ff 75 08             	pushl  0x8(%ebp)
f010cae0:	50                   	push   %eax
f010cae1:	e8 43 c1 ff ff       	call   f0108c29 <allocate_user_mem>
f010cae6:	83 c4 10             	add    $0x10,%esp
	return;
f010cae9:	90                   	nop
}
f010caea:	c9                   	leave  
f010caeb:	c3                   	ret    

f010caec <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010caec:	55                   	push   %ebp
f010caed:	89 e5                	mov    %esp,%ebp
f010caef:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010caf2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010caf7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cafd:	ff 75 10             	pushl  0x10(%ebp)
f010cb00:	ff 75 0c             	pushl  0xc(%ebp)
f010cb03:	ff 75 08             	pushl  0x8(%ebp)
f010cb06:	50                   	push   %eax
f010cb07:	e8 cf c0 ff ff       	call   f0108bdb <allocate_chunk>
f010cb0c:	83 c4 10             	add    $0x10,%esp
	return;
f010cb0f:	90                   	nop
}
f010cb10:	c9                   	leave  
f010cb11:	c3                   	ret    

f010cb12 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cb12:	55                   	push   %ebp
f010cb13:	89 e5                	mov    %esp,%ebp
f010cb15:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cb18:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb1d:	ff 75 10             	pushl  0x10(%ebp)
f010cb20:	ff 75 0c             	pushl  0xc(%ebp)
f010cb23:	ff 75 08             	pushl  0x8(%ebp)
f010cb26:	50                   	push   %eax
f010cb27:	e8 36 c1 ff ff       	call   f0108c62 <move_user_mem>
f010cb2c:	83 c4 10             	add    $0x10,%esp
	return;
f010cb2f:	90                   	nop
}
f010cb30:	c9                   	leave  
f010cb31:	c3                   	ret    

f010cb32 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cb32:	55                   	push   %ebp
f010cb33:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cb35:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
}
f010cb3a:	5d                   	pop    %ebp
f010cb3b:	c3                   	ret    

f010cb3c <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cb3c:	55                   	push   %ebp
f010cb3d:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cb3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb42:	a3 ec bd 2b f0       	mov    %eax,0xf02bbdec
}
f010cb47:	90                   	nop
f010cb48:	5d                   	pop    %ebp
f010cb49:	c3                   	ret    

f010cb4a <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cb4a:	55                   	push   %ebp
f010cb4b:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cb4d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb52:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010cb58:	8b 52 38             	mov    0x38(%edx),%edx
f010cb5b:	80 e6 fd             	and    $0xfd,%dh
f010cb5e:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb61:	90                   	nop
f010cb62:	5d                   	pop    %ebp
f010cb63:	c3                   	ret    

f010cb64 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cb64:	55                   	push   %ebp
f010cb65:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cb67:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb6c:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010cb72:	8b 52 38             	mov    0x38(%edx),%edx
f010cb75:	80 ce 02             	or     $0x2,%dh
f010cb78:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb7b:	90                   	nop
f010cb7c:	5d                   	pop    %ebp
f010cb7d:	c3                   	ret    

f010cb7e <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cb7e:	55                   	push   %ebp
f010cb7f:	89 e5                	mov    %esp,%ebp
f010cb81:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cb84:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb89:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb8c:	83 ec 04             	sub    $0x4,%esp
f010cb8f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb92:	ff 75 08             	pushl  0x8(%ebp)
f010cb95:	50                   	push   %eax
f010cb96:	e8 03 11 00 00       	call   f010dc9e <createSemaphore>
f010cb9b:	83 c4 10             	add    $0x10,%esp
}
f010cb9e:	c9                   	leave  
f010cb9f:	c3                   	ret    

f010cba0 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cba0:	55                   	push   %ebp
f010cba1:	89 e5                	mov    %esp,%ebp
f010cba3:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cba6:	83 ec 08             	sub    $0x8,%esp
f010cba9:	ff 75 0c             	pushl  0xc(%ebp)
f010cbac:	ff 75 08             	pushl  0x8(%ebp)
f010cbaf:	e8 07 11 00 00       	call   f010dcbb <waitSemaphore>
f010cbb4:	83 c4 10             	add    $0x10,%esp
}
f010cbb7:	90                   	nop
f010cbb8:	c9                   	leave  
f010cbb9:	c3                   	ret    

f010cbba <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cbba:	55                   	push   %ebp
f010cbbb:	89 e5                	mov    %esp,%ebp
f010cbbd:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cbc0:	83 ec 08             	sub    $0x8,%esp
f010cbc3:	ff 75 0c             	pushl  0xc(%ebp)
f010cbc6:	ff 75 08             	pushl  0x8(%ebp)
f010cbc9:	e8 0a 11 00 00       	call   f010dcd8 <signalSemaphore>
f010cbce:	83 c4 10             	add    $0x10,%esp
}
f010cbd1:	90                   	nop
f010cbd2:	c9                   	leave  
f010cbd3:	c3                   	ret    

f010cbd4 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cbd4:	55                   	push   %ebp
f010cbd5:	89 e5                	mov    %esp,%ebp
f010cbd7:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cbda:	83 ec 08             	sub    $0x8,%esp
f010cbdd:	ff 75 0c             	pushl  0xc(%ebp)
f010cbe0:	ff 75 08             	pushl  0x8(%ebp)
f010cbe3:	e8 5c 0f 00 00       	call   f010db44 <get_semaphore_object_ID>
f010cbe8:	83 c4 10             	add    $0x10,%esp
f010cbeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cbee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbf2:	78 06                	js     f010cbfa <sys_getSemaphoreValue+0x26>
f010cbf4:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cbf8:	7e 19                	jle    f010cc13 <sys_getSemaphoreValue+0x3f>
f010cbfa:	68 28 39 13 f0       	push   $0xf0133928
f010cbff:	68 4d 39 13 f0       	push   $0xf013394d
f010cc04:	68 4d 01 00 00       	push   $0x14d
f010cc09:	68 d3 38 13 f0       	push   $0xf01338d3
f010cc0e:	e8 9d 35 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010cc13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cc16:	89 d0                	mov    %edx,%eax
f010cc18:	c1 e0 02             	shl    $0x2,%eax
f010cc1b:	01 d0                	add    %edx,%eax
f010cc1d:	01 c0                	add    %eax,%eax
f010cc1f:	01 d0                	add    %edx,%eax
f010cc21:	01 c0                	add    %eax,%eax
f010cc23:	01 d0                	add    %edx,%eax
f010cc25:	c1 e0 02             	shl    $0x2,%eax
f010cc28:	05 34 9a 2b f0       	add    $0xf02b9a34,%eax
f010cc2d:	8b 00                	mov    (%eax),%eax
}
f010cc2f:	c9                   	leave  
f010cc30:	c3                   	ret    

f010cc31 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cc31:	55                   	push   %ebp
f010cc32:	89 e5                	mov    %esp,%ebp
f010cc34:	83 ec 18             	sub    $0x18,%esp
f010cc37:	8b 45 10             	mov    0x10(%ebp),%eax
f010cc3a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cc3d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cc41:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cc46:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc49:	83 ec 0c             	sub    $0xc,%esp
f010cc4c:	ff 75 14             	pushl  0x14(%ebp)
f010cc4f:	52                   	push   %edx
f010cc50:	ff 75 0c             	pushl  0xc(%ebp)
f010cc53:	ff 75 08             	pushl  0x8(%ebp)
f010cc56:	50                   	push   %eax
f010cc57:	e8 65 b2 ff ff       	call   f0107ec1 <createSharedObject>
f010cc5c:	83 c4 20             	add    $0x20,%esp
}
f010cc5f:	c9                   	leave  
f010cc60:	c3                   	ret    

f010cc61 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cc61:	55                   	push   %ebp
f010cc62:	89 e5                	mov    %esp,%ebp
f010cc64:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cc67:	83 ec 08             	sub    $0x8,%esp
f010cc6a:	ff 75 0c             	pushl  0xc(%ebp)
f010cc6d:	ff 75 08             	pushl  0x8(%ebp)
f010cc70:	e8 6f b2 ff ff       	call   f0107ee4 <getSizeOfSharedObject>
f010cc75:	83 c4 10             	add    $0x10,%esp
}
f010cc78:	c9                   	leave  
f010cc79:	c3                   	ret    

f010cc7a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc7a:	55                   	push   %ebp
f010cc7b:	89 e5                	mov    %esp,%ebp
f010cc7d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cc80:	83 ec 04             	sub    $0x4,%esp
f010cc83:	ff 75 10             	pushl  0x10(%ebp)
f010cc86:	ff 75 0c             	pushl  0xc(%ebp)
f010cc89:	ff 75 08             	pushl  0x8(%ebp)
f010cc8c:	e8 70 b2 ff ff       	call   f0107f01 <getSharedObject>
f010cc91:	83 c4 10             	add    $0x10,%esp
}
f010cc94:	c9                   	leave  
f010cc95:	c3                   	ret    

f010cc96 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cc96:	55                   	push   %ebp
f010cc97:	89 e5                	mov    %esp,%ebp
f010cc99:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cc9c:	83 ec 08             	sub    $0x8,%esp
f010cc9f:	ff 75 0c             	pushl  0xc(%ebp)
f010cca2:	ff 75 08             	pushl  0x8(%ebp)
f010cca5:	e8 74 b2 ff ff       	call   f0107f1e <freeSharedObject>
f010ccaa:	83 c4 10             	add    $0x10,%esp
}
f010ccad:	c9                   	leave  
f010ccae:	c3                   	ret    

f010ccaf <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ccaf:	55                   	push   %ebp
f010ccb0:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ccb2:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010ccb7:	5d                   	pop    %ebp
f010ccb8:	c3                   	ret    

f010ccb9 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ccb9:	55                   	push   %ebp
f010ccba:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ccbc:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ccc1:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ccc4:	5d                   	pop    %ebp
f010ccc5:	c3                   	ret    

f010ccc6 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010ccc6:	55                   	push   %ebp
f010ccc7:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010ccc9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ccce:	89 c2                	mov    %eax,%edx
f010ccd0:	a1 70 31 25 f0       	mov    0xf0253170,%eax
f010ccd5:	29 c2                	sub    %eax,%edx
f010ccd7:	89 d0                	mov    %edx,%eax
f010ccd9:	c1 f8 05             	sar    $0x5,%eax
f010ccdc:	89 c2                	mov    %eax,%edx
f010ccde:	89 d0                	mov    %edx,%eax
f010cce0:	c1 e0 03             	shl    $0x3,%eax
f010cce3:	01 d0                	add    %edx,%eax
f010cce5:	01 c0                	add    %eax,%eax
f010cce7:	01 d0                	add    %edx,%eax
f010cce9:	c1 e0 06             	shl    $0x6,%eax
f010ccec:	01 d0                	add    %edx,%eax
f010ccee:	89 c1                	mov    %eax,%ecx
f010ccf0:	c1 e1 04             	shl    $0x4,%ecx
f010ccf3:	01 c8                	add    %ecx,%eax
f010ccf5:	c1 e0 03             	shl    $0x3,%eax
f010ccf8:	01 d0                	add    %edx,%eax
f010ccfa:	01 c0                	add    %eax,%eax
f010ccfc:	01 d0                	add    %edx,%eax
f010ccfe:	89 c1                	mov    %eax,%ecx
f010cd00:	c1 e1 04             	shl    $0x4,%ecx
f010cd03:	01 c8                	add    %ecx,%eax
f010cd05:	c1 e0 03             	shl    $0x3,%eax
f010cd08:	01 d0                	add    %edx,%eax
f010cd0a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cd11:	01 d0                	add    %edx,%eax
}
f010cd13:	5d                   	pop    %ebp
f010cd14:	c3                   	ret    

f010cd15 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cd15:	55                   	push   %ebp
f010cd16:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cd18:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd1d:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cd20:	5d                   	pop    %ebp
f010cd21:	c3                   	ret    

f010cd22 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cd22:	55                   	push   %ebp
f010cd23:	89 e5                	mov    %esp,%ebp
f010cd25:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cd28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cd2c:	75 0a                	jne    f010cd38 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cd2e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd33:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cd36:	eb 22                	jmp    f010cd5a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cd38:	83 ec 04             	sub    $0x4,%esp
f010cd3b:	6a 00                	push   $0x0
f010cd3d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cd40:	50                   	push   %eax
f010cd41:	ff 75 08             	pushl  0x8(%ebp)
f010cd44:	e8 85 cc ff ff       	call   f01099ce <envid2env>
f010cd49:	83 c4 10             	add    $0x10,%esp
f010cd4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cd4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd53:	79 05                	jns    f010cd5a <sys_destroy_env+0x38>
	{
		return r;
f010cd55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd58:	eb 5e                	jmp    f010cdb8 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cd5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cd5d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd62:	39 c2                	cmp    %eax,%edx
f010cd64:	75 1b                	jne    f010cd81 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cd66:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd6e:	83 ec 08             	sub    $0x8,%esp
f010cd71:	50                   	push   %eax
f010cd72:	68 62 39 13 f0       	push   $0xf0133962
f010cd77:	e8 b5 40 ff ff       	call   f0100e31 <cprintf>
f010cd7c:	83 c4 10             	add    $0x10,%esp
f010cd7f:	eb 20                	jmp    f010cda1 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cd81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd84:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cd87:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd8c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd8f:	83 ec 04             	sub    $0x4,%esp
f010cd92:	52                   	push   %edx
f010cd93:	50                   	push   %eax
f010cd94:	68 7d 39 13 f0       	push   $0xf013397d
f010cd99:	e8 93 40 ff ff       	call   f0100e31 <cprintf>
f010cd9e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cda1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cda4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cda7:	83 ec 0c             	sub    $0xc,%esp
f010cdaa:	50                   	push   %eax
f010cdab:	e8 61 88 ff ff       	call   f0105611 <sched_kill_env>
f010cdb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cdb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cdb8:	c9                   	leave  
f010cdb9:	c3                   	ret    

f010cdba <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cdba:	55                   	push   %ebp
f010cdbb:	89 e5                	mov    %esp,%ebp
f010cdbd:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cdc0:	e8 ea cb ff ff       	call   f01099af <env_exit>
	//env_run_cmd_prmpt();
}
f010cdc5:	90                   	nop
f010cdc6:	c9                   	leave  
f010cdc7:	c3                   	ret    

f010cdc8 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cdc8:	55                   	push   %ebp
f010cdc9:	89 e5                	mov    %esp,%ebp
f010cdcb:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cdce:	ff 75 14             	pushl  0x14(%ebp)
f010cdd1:	ff 75 10             	pushl  0x10(%ebp)
f010cdd4:	ff 75 0c             	pushl  0xc(%ebp)
f010cdd7:	ff 75 08             	pushl  0x8(%ebp)
f010cdda:	e8 ec be ff ff       	call   f0108ccb <env_create>
f010cddf:	83 c4 10             	add    $0x10,%esp
f010cde2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cde5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cde9:	75 07                	jne    f010cdf2 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cdeb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cdf0:	eb 14                	jmp    f010ce06 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cdf2:	83 ec 0c             	sub    $0xc,%esp
f010cdf5:	ff 75 f4             	pushl  -0xc(%ebp)
f010cdf8:	e8 36 85 ff ff       	call   f0105333 <sched_new_env>
f010cdfd:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ce00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce03:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ce06:	c9                   	leave  
f010ce07:	c3                   	ret    

f010ce08 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ce08:	55                   	push   %ebp
f010ce09:	89 e5                	mov    %esp,%ebp
f010ce0b:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ce0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce11:	83 ec 0c             	sub    $0xc,%esp
f010ce14:	50                   	push   %eax
f010ce15:	e8 36 85 ff ff       	call   f0105350 <sched_run_env>
f010ce1a:	83 c4 10             	add    $0x10,%esp
}
f010ce1d:	90                   	nop
f010ce1e:	c9                   	leave  
f010ce1f:	c3                   	ret    

f010ce20 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ce20:	55                   	push   %ebp
f010ce21:	89 e5                	mov    %esp,%ebp
f010ce23:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ce26:	0f 31                	rdtsc  
f010ce28:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ce2b:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ce2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce34:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ce37:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ce3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ce3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce40:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ce43:	89 01                	mov    %eax,(%ecx)
f010ce45:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ce48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce4b:	c9                   	leave  
f010ce4c:	c2 04 00             	ret    $0x4

f010ce4f <sys_rcr2>:

uint32 sys_rcr2()
{
f010ce4f:	55                   	push   %ebp
f010ce50:	89 e5                	mov    %esp,%ebp
f010ce52:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ce55:	0f 20 d0             	mov    %cr2,%eax
f010ce58:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ce5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ce5e:	90                   	nop
}
f010ce5f:	c9                   	leave  
f010ce60:	c3                   	ret    

f010ce61 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ce61:	55                   	push   %ebp
f010ce62:	89 e5                	mov    %esp,%ebp
f010ce64:	83 ec 04             	sub    $0x4,%esp
f010ce67:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce6a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ce6d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ce70:	a2 28 3a 25 f0       	mov    %al,0xf0253a28
}
f010ce75:	90                   	nop
f010ce76:	c9                   	leave  
f010ce77:	c3                   	ret    

f010ce78 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010ce78:	55                   	push   %ebp
f010ce79:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010ce7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010ce80:	5d                   	pop    %ebp
f010ce81:	c3                   	ret    

f010ce82 <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ce82:	55                   	push   %ebp
f010ce83:	89 e5                	mov    %esp,%ebp
f010ce85:	56                   	push   %esi
f010ce86:	53                   	push   %ebx
f010ce87:	83 ec 10             	sub    $0x10,%esp

	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010ce8a:	83 7d 08 32          	cmpl   $0x32,0x8(%ebp)
f010ce8e:	0f 87 1a 05 00 00    	ja     f010d3ae <syscall+0x52c>
f010ce94:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce97:	c1 e0 02             	shl    $0x2,%eax
f010ce9a:	05 98 39 13 f0       	add    $0xf0133998,%eax
f010ce9f:	8b 00                	mov    (%eax),%eax
f010cea1:	ff e0                	jmp    *%eax
	{
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:
	        return (uint32)sys_sbrk(a1);
f010cea3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cea6:	50                   	push   %eax
f010cea7:	e8 cc ff ff ff       	call   f010ce78 <sys_sbrk>
f010ceac:	83 c4 04             	add    $0x4,%esp
f010ceaf:	e9 ff 04 00 00       	jmp    f010d3b3 <syscall+0x531>
	        //return 0;
	        break;
	    case SYS_free_user_mem:
	    	if((uint32*)a1==NULL||(uint32*)a1==NULL){
f010ceb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ceb7:	85 c0                	test   %eax,%eax
f010ceb9:	74 07                	je     f010cec2 <syscall+0x40>
f010cebb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cebe:	85 c0                	test   %eax,%eax
f010cec0:	75 16                	jne    f010ced8 <syscall+0x56>
	    		sched_kill_env(curenv->env_id);
f010cec2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cec7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ceca:	83 ec 0c             	sub    $0xc,%esp
f010cecd:	50                   	push   %eax
f010cece:	e8 3e 87 ff ff       	call   f0105611 <sched_kill_env>
f010ced3:	83 c4 10             	add    $0x10,%esp
f010ced6:	eb 43                	jmp    f010cf1b <syscall+0x99>
	    	}
	    	else if(a1>=USER_LIMIT||a2>=PAGE_SIZE){
f010ced8:	81 7d 0c ff ff 7f ef 	cmpl   $0xef7fffff,0xc(%ebp)
f010cedf:	77 09                	ja     f010ceea <syscall+0x68>
f010cee1:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
f010cee8:	76 16                	jbe    f010cf00 <syscall+0x7e>
	    		    		sched_kill_env(curenv->env_id);
f010ceea:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ceef:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cef2:	83 ec 0c             	sub    $0xc,%esp
f010cef5:	50                   	push   %eax
f010cef6:	e8 16 87 ff ff       	call   f0105611 <sched_kill_env>
f010cefb:	83 c4 10             	add    $0x10,%esp
f010cefe:	eb 1b                	jmp    f010cf1b <syscall+0x99>
	    	else if(a1<0||a2<0){
	    		sched_kill_env(curenv->env_id);
	    	}

	    	else{
	        sys_free_user_mem(a1,a2);
f010cf00:	83 ec 08             	sub    $0x8,%esp
f010cf03:	ff 75 10             	pushl  0x10(%ebp)
f010cf06:	ff 75 0c             	pushl  0xc(%ebp)
f010cf09:	e8 7c fb ff ff       	call   f010ca8a <sys_free_user_mem>
f010cf0e:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010cf11:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf16:	e9 98 04 00 00       	jmp    f010d3b3 <syscall+0x531>
	    	}
	        break;
f010cf1b:	e9 8e 04 00 00       	jmp    f010d3ae <syscall+0x52c>
	    case SYS_allocate_user_mem:
	    	if((uint32*)a1==NULL||(uint32*)a1==NULL){
f010cf20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf23:	85 c0                	test   %eax,%eax
f010cf25:	74 07                	je     f010cf2e <syscall+0xac>
f010cf27:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf2a:	85 c0                	test   %eax,%eax
f010cf2c:	75 16                	jne    f010cf44 <syscall+0xc2>
	    		sched_kill_env(curenv->env_id);
f010cf2e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cf33:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf36:	83 ec 0c             	sub    $0xc,%esp
f010cf39:	50                   	push   %eax
f010cf3a:	e8 d2 86 ff ff       	call   f0105611 <sched_kill_env>
f010cf3f:	83 c4 10             	add    $0x10,%esp
f010cf42:	eb 65                	jmp    f010cfa9 <syscall+0x127>
	    	}
	    	else if(a1>=USER_LIMIT||a2>=USER_LIMIT-1024){
f010cf44:	81 7d 0c ff ff 7f ef 	cmpl   $0xef7fffff,0xc(%ebp)
f010cf4b:	77 09                	ja     f010cf56 <syscall+0xd4>
f010cf4d:	81 7d 10 ff fb 7f ef 	cmpl   $0xef7ffbff,0x10(%ebp)
f010cf54:	76 16                	jbe    f010cf6c <syscall+0xea>
	    		    		sched_kill_env(curenv->env_id);
f010cf56:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cf5b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf5e:	83 ec 0c             	sub    $0xc,%esp
f010cf61:	50                   	push   %eax
f010cf62:	e8 aa 86 ff ff       	call   f0105611 <sched_kill_env>
f010cf67:	83 c4 10             	add    $0x10,%esp
f010cf6a:	eb 3d                	jmp    f010cfa9 <syscall+0x127>
	    		    	}
	    	else if(a1<=0||a2<=0){
f010cf6c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010cf70:	74 06                	je     f010cf78 <syscall+0xf6>
f010cf72:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010cf76:	75 16                	jne    f010cf8e <syscall+0x10c>
	    		sched_kill_env(curenv->env_id);
f010cf78:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cf7d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf80:	83 ec 0c             	sub    $0xc,%esp
f010cf83:	50                   	push   %eax
f010cf84:	e8 88 86 ff ff       	call   f0105611 <sched_kill_env>
f010cf89:	83 c4 10             	add    $0x10,%esp
f010cf8c:	eb 1b                	jmp    f010cfa9 <syscall+0x127>
	    	}

	    	else{
	        sys_allocate_user_mem(a1,a2);
f010cf8e:	83 ec 08             	sub    $0x8,%esp
f010cf91:	ff 75 10             	pushl  0x10(%ebp)
f010cf94:	ff 75 0c             	pushl  0xc(%ebp)
f010cf97:	e8 30 fb ff ff       	call   f010cacc <sys_allocate_user_mem>
f010cf9c:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010cf9f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfa4:	e9 0a 04 00 00       	jmp    f010d3b3 <syscall+0x531>
	    	}
	        break;
f010cfa9:	e9 00 04 00 00       	jmp    f010d3ae <syscall+0x52c>
	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010cfae:	8b 45 14             	mov    0x14(%ebp),%eax
f010cfb1:	0f b6 d0             	movzbl %al,%edx
f010cfb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfb7:	83 ec 04             	sub    $0x4,%esp
f010cfba:	52                   	push   %edx
f010cfbb:	ff 75 10             	pushl  0x10(%ebp)
f010cfbe:	50                   	push   %eax
f010cfbf:	e8 1b f8 ff ff       	call   f010c7df <sys_cputs>
f010cfc4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfc7:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfcc:	e9 e2 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cfd1:	e8 7b f8 ff ff       	call   f010c851 <sys_cgetc>
f010cfd6:	e9 d8 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cfdb:	83 ec 08             	sub    $0x8,%esp
f010cfde:	ff 75 10             	pushl  0x10(%ebp)
f010cfe1:	ff 75 0c             	pushl  0xc(%ebp)
f010cfe4:	e8 b8 f9 ff ff       	call   f010c9a1 <sys_calculate_required_frames>
f010cfe9:	83 c4 10             	add    $0x10,%esp
f010cfec:	e9 c2 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cff1:	e8 d0 f9 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f010cff6:	e9 b8 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cffb:	e8 e5 f9 ff ff       	call   f010c9e5 <sys_calculate_modified_frames>
f010d000:	e9 ae 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d005:	e8 f5 f9 ff ff       	call   f010c9ff <sys_calculate_notmod_frames>
f010d00a:	e9 a4 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d00f:	e8 5d fa ff ff       	call   f010ca71 <sys_pf_calculate_allocated_pages>
f010d014:	e9 9a 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d019:	83 ec 0c             	sub    $0xc,%esp
f010d01c:	ff 75 0c             	pushl  0xc(%ebp)
f010d01f:	e8 f5 f9 ff ff       	call   f010ca19 <sys_calculate_pages_tobe_removed_ready_exit>
f010d024:	83 c4 10             	add    $0x10,%esp
f010d027:	e9 87 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d02c:	e8 fe f9 ff ff       	call   f010ca2f <sys_scarce_memory>
		return 0;
f010d031:	b8 00 00 00 00       	mov    $0x0,%eax
f010d036:	e9 78 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d03b:	83 ec 04             	sub    $0x4,%esp
f010d03e:	ff 75 14             	pushl  0x14(%ebp)
f010d041:	ff 75 10             	pushl  0x10(%ebp)
f010d044:	ff 75 0c             	pushl  0xc(%ebp)
f010d047:	e8 a0 fa ff ff       	call   f010caec <sys_allocate_chunk>
f010d04c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d04f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d054:	e9 5a 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d059:	8b 55 10             	mov    0x10(%ebp),%edx
f010d05c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d05f:	83 ec 08             	sub    $0x8,%esp
f010d062:	52                   	push   %edx
f010d063:	50                   	push   %eax
f010d064:	e8 fb f7 ff ff       	call   f010c864 <__sys_allocate_page>
f010d069:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d06c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d071:	e9 3d 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d076:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d079:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d07c:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d07f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d082:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d085:	83 ec 0c             	sub    $0xc,%esp
f010d088:	56                   	push   %esi
f010d089:	53                   	push   %ebx
f010d08a:	51                   	push   %ecx
f010d08b:	52                   	push   %edx
f010d08c:	50                   	push   %eax
f010d08d:	e8 d5 f8 ff ff       	call   f010c967 <__sys_map_frame>
f010d092:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d095:	b8 00 00 00 00       	mov    $0x0,%eax
f010d09a:	e9 14 03 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d09f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0a5:	83 ec 08             	sub    $0x8,%esp
f010d0a8:	52                   	push   %edx
f010d0a9:	50                   	push   %eax
f010d0aa:	e8 d5 f8 ff ff       	call   f010c984 <__sys_unmap_frame>
f010d0af:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d0b2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0b7:	e9 f7 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010d0bc:	e8 89 fa ff ff       	call   f010cb4a <sys_disable_interrupt>
		return 0;
f010d0c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0c6:	e9 e8 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d0cb:	e8 94 fa ff ff       	call   f010cb64 <sys_enable_interrupt>
		return 0;
f010d0d0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0d5:	e9 d9 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d0da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0dd:	0f be c0             	movsbl %al,%eax
f010d0e0:	83 ec 0c             	sub    $0xc,%esp
f010d0e3:	50                   	push   %eax
f010d0e4:	e8 44 f7 ff ff       	call   f010c82d <sys_cputc>
f010d0e9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d0ec:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0f1:	e9 bd 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d0f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0f9:	0f be c0             	movsbl %al,%eax
f010d0fc:	83 ec 0c             	sub    $0xc,%esp
f010d0ff:	50                   	push   %eax
f010d100:	e8 38 f9 ff ff       	call   f010ca3d <sys_clearFFL>
f010d105:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d108:	b8 00 00 00 00       	mov    $0x0,%eax
f010d10d:	e9 a1 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d112:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d115:	83 ec 08             	sub    $0x8,%esp
f010d118:	ff 75 10             	pushl  0x10(%ebp)
f010d11b:	50                   	push   %eax
f010d11c:	e8 5d fa ff ff       	call   f010cb7e <sys_createSemaphore>
f010d121:	83 c4 10             	add    $0x10,%esp
f010d124:	e9 8a 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d129:	8b 55 10             	mov    0x10(%ebp),%edx
f010d12c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d12f:	83 ec 08             	sub    $0x8,%esp
f010d132:	52                   	push   %edx
f010d133:	50                   	push   %eax
f010d134:	e8 67 fa ff ff       	call   f010cba0 <sys_waitSemaphore>
f010d139:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d13c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d141:	e9 6d 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d146:	8b 55 10             	mov    0x10(%ebp),%edx
f010d149:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d14c:	83 ec 08             	sub    $0x8,%esp
f010d14f:	52                   	push   %edx
f010d150:	50                   	push   %eax
f010d151:	e8 64 fa ff ff       	call   f010cbba <sys_signalSemaphore>
f010d156:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d159:	b8 00 00 00 00       	mov    $0x0,%eax
f010d15e:	e9 50 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d163:	8b 55 10             	mov    0x10(%ebp),%edx
f010d166:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d169:	83 ec 08             	sub    $0x8,%esp
f010d16c:	52                   	push   %edx
f010d16d:	50                   	push   %eax
f010d16e:	e8 61 fa ff ff       	call   f010cbd4 <sys_getSemaphoreValue>
f010d173:	83 c4 10             	add    $0x10,%esp
f010d176:	e9 38 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d17b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d17e:	8b 45 14             	mov    0x14(%ebp),%eax
f010d181:	0f b6 d0             	movzbl %al,%edx
f010d184:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d187:	51                   	push   %ecx
f010d188:	52                   	push   %edx
f010d189:	ff 75 10             	pushl  0x10(%ebp)
f010d18c:	50                   	push   %eax
f010d18d:	e8 9f fa ff ff       	call   f010cc31 <sys_createSharedObject>
f010d192:	83 c4 10             	add    $0x10,%esp
f010d195:	e9 19 02 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d19a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d19d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1a3:	83 ec 04             	sub    $0x4,%esp
f010d1a6:	51                   	push   %ecx
f010d1a7:	52                   	push   %edx
f010d1a8:	50                   	push   %eax
f010d1a9:	e8 cc fa ff ff       	call   f010cc7a <sys_getSharedObject>
f010d1ae:	83 c4 10             	add    $0x10,%esp
f010d1b1:	e9 fd 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d1b6:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1bc:	83 ec 08             	sub    $0x8,%esp
f010d1bf:	52                   	push   %edx
f010d1c0:	50                   	push   %eax
f010d1c1:	e8 d0 fa ff ff       	call   f010cc96 <sys_freeSharedObject>
f010d1c6:	83 c4 10             	add    $0x10,%esp
f010d1c9:	e9 e5 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d1ce:	8b 55 10             	mov    0x10(%ebp),%edx
f010d1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1d4:	83 ec 08             	sub    $0x8,%esp
f010d1d7:	52                   	push   %edx
f010d1d8:	50                   	push   %eax
f010d1d9:	e8 83 fa ff ff       	call   f010cc61 <sys_getSizeOfSharedObject>
f010d1de:	83 c4 10             	add    $0x10,%esp
f010d1e1:	e9 cd 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d1e6:	e8 c4 fa ff ff       	call   f010ccaf <sys_getMaxShares>
f010d1eb:	e9 c3 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d1f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1f3:	ff 75 18             	pushl  0x18(%ebp)
f010d1f6:	ff 75 14             	pushl  0x14(%ebp)
f010d1f9:	ff 75 10             	pushl  0x10(%ebp)
f010d1fc:	50                   	push   %eax
f010d1fd:	e8 c6 fb ff ff       	call   f010cdc8 <sys_create_env>
f010d202:	83 c4 10             	add    $0x10,%esp
f010d205:	e9 a9 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d20a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d20d:	83 ec 0c             	sub    $0xc,%esp
f010d210:	50                   	push   %eax
f010d211:	e8 f2 fb ff ff       	call   f010ce08 <sys_run_env>
f010d216:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d219:	b8 00 00 00 00       	mov    $0x0,%eax
f010d21e:	e9 90 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d223:	e8 9e fa ff ff       	call   f010ccc6 <sys_getenvindex>
f010d228:	e9 86 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d22d:	e8 87 fa ff ff       	call   f010ccb9 <sys_getenvid>
f010d232:	e9 7c 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d237:	e8 d9 fa ff ff       	call   f010cd15 <sys_getparentenvid>
f010d23c:	e9 72 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d241:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d244:	83 ec 0c             	sub    $0xc,%esp
f010d247:	50                   	push   %eax
f010d248:	e8 d5 fa ff ff       	call   f010cd22 <sys_destroy_env>
f010d24d:	83 c4 10             	add    $0x10,%esp
f010d250:	e9 5e 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d255:	e8 60 fb ff ff       	call   f010cdba <sys_exit_env>
		return 0;
f010d25a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d25f:	e9 4f 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d264:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d267:	83 ec 0c             	sub    $0xc,%esp
f010d26a:	50                   	push   %eax
f010d26b:	e8 b0 fb ff ff       	call   f010ce20 <sys_get_virtual_time>
f010d270:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d273:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d276:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d279:	8b 45 10             	mov    0x10(%ebp),%eax
f010d27c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d27f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d282:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d285:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d287:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d28a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d28d:	89 10                	mov    %edx,(%eax)
		return 0;
f010d28f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d294:	e9 1a 01 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d299:	83 ec 04             	sub    $0x4,%esp
f010d29c:	ff 75 14             	pushl  0x14(%ebp)
f010d29f:	ff 75 10             	pushl  0x10(%ebp)
f010d2a2:	ff 75 0c             	pushl  0xc(%ebp)
f010d2a5:	e8 68 f8 ff ff       	call   f010cb12 <sys_move_user_mem>
f010d2aa:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2ad:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2b2:	e9 fc 00 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d2b7:	e8 93 fb ff ff       	call   f010ce4f <sys_rcr2>
f010d2bc:	e9 f2 00 00 00       	jmp    f010d3b3 <syscall+0x531>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d2c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2c4:	0f b6 c0             	movzbl %al,%eax
f010d2c7:	83 ec 0c             	sub    $0xc,%esp
f010d2ca:	50                   	push   %eax
f010d2cb:	e8 91 fb ff ff       	call   f010ce61 <sys_bypassPageFault>
f010d2d0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2d3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2d8:	e9 d6 00 00 00       	jmp    f010d3b3 <syscall+0x531>

	case SYS_rsttst:
		rsttst();
f010d2dd:	e8 62 09 02 00       	call   f012dc44 <rsttst>
		return 0;
f010d2e2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e7:	e9 c7 00 00 00       	jmp    f010d3b3 <syscall+0x531>
	case SYS_inctst:
		inctst();
f010d2ec:	e8 63 09 02 00       	call   f012dc54 <inctst>
		return 0;
f010d2f1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2f6:	e9 b8 00 00 00       	jmp    f010d3b3 <syscall+0x531>
	case SYS_chktst:
		chktst(a1);
f010d2fb:	83 ec 0c             	sub    $0xc,%esp
f010d2fe:	ff 75 0c             	pushl  0xc(%ebp)
f010d301:	e8 4d 0a 02 00       	call   f012dd53 <chktst>
f010d306:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d309:	b8 00 00 00 00       	mov    $0x0,%eax
f010d30e:	e9 a0 00 00 00       	jmp    f010d3b3 <syscall+0x531>
	case SYS_gettst:
		return gettst();
f010d313:	e8 4d 09 02 00       	call   f012dc65 <gettst>
f010d318:	e9 96 00 00 00       	jmp    f010d3b3 <syscall+0x531>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d31d:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d320:	8b 45 18             	mov    0x18(%ebp),%eax
f010d323:	0f be c0             	movsbl %al,%eax
f010d326:	83 ec 0c             	sub    $0xc,%esp
f010d329:	52                   	push   %edx
f010d32a:	50                   	push   %eax
f010d32b:	ff 75 14             	pushl  0x14(%ebp)
f010d32e:	ff 75 10             	pushl  0x10(%ebp)
f010d331:	ff 75 0c             	pushl  0xc(%ebp)
f010d334:	e8 36 09 02 00       	call   f012dc6f <tst>
f010d339:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d33c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d341:	eb 70                	jmp    f010d3b3 <syscall+0x531>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d343:	e8 ea f7 ff ff       	call   f010cb32 <sys_get_heap_strategy>
f010d348:	eb 69                	jmp    f010d3b3 <syscall+0x531>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d34a:	83 ec 0c             	sub    $0xc,%esp
f010d34d:	ff 75 0c             	pushl  0xc(%ebp)
f010d350:	e8 e7 f7 ff ff       	call   f010cb3c <sys_set_uheap_strategy>
f010d355:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d358:	b8 00 00 00 00       	mov    $0x0,%eax
f010d35d:	eb 54                	jmp    f010d3b3 <syscall+0x531>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d35f:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d362:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d365:	8b 55 10             	mov    0x10(%ebp),%edx
f010d368:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d36b:	53                   	push   %ebx
f010d36c:	51                   	push   %ecx
f010d36d:	52                   	push   %edx
f010d36e:	50                   	push   %eax
f010d36f:	e8 a2 47 00 00       	call   f0111b16 <sys_check_LRU_lists>
f010d374:	83 c4 10             	add    $0x10,%esp
f010d377:	eb 3a                	jmp    f010d3b3 <syscall+0x531>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d379:	8b 55 10             	mov    0x10(%ebp),%edx
f010d37c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d37f:	83 ec 08             	sub    $0x8,%esp
f010d382:	52                   	push   %edx
f010d383:	50                   	push   %eax
f010d384:	e8 0f 49 00 00       	call   f0111c98 <sys_check_LRU_lists_free>
f010d389:	83 c4 10             	add    $0x10,%esp
f010d38c:	eb 25                	jmp    f010d3b3 <syscall+0x531>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d38e:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d391:	8b 55 10             	mov    0x10(%ebp),%edx
f010d394:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d397:	51                   	push   %ecx
f010d398:	ff 75 14             	pushl  0x14(%ebp)
f010d39b:	52                   	push   %edx
f010d39c:	50                   	push   %eax
f010d39d:	e8 61 4a 00 00       	call   f0111e03 <sys_check_WS_list>
f010d3a2:	83 c4 10             	add    $0x10,%esp
f010d3a5:	eb 0c                	jmp    f010d3b3 <syscall+0x531>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d3a7:	b8 03 00 00 00       	mov    $0x3,%eax
f010d3ac:	eb 05                	jmp    f010d3b3 <syscall+0x531>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d3ae:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d3b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d3b6:	5b                   	pop    %ebx
f010d3b7:	5e                   	pop    %esi
f010d3b8:	5d                   	pop    %ebp
f010d3b9:	c3                   	ret    

f010d3ba <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d3ba:	55                   	push   %ebp
f010d3bb:	89 e5                	mov    %esp,%ebp
f010d3bd:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d3c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3c3:	8b 00                	mov    (%eax),%eax
f010d3c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d3c8:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3cb:	8b 00                	mov    (%eax),%eax
f010d3cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d3d7:	e9 ca 00 00 00       	jmp    f010d4a6 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d3dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d3df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d3e2:	01 d0                	add    %edx,%eax
f010d3e4:	89 c2                	mov    %eax,%edx
f010d3e6:	c1 ea 1f             	shr    $0x1f,%edx
f010d3e9:	01 d0                	add    %edx,%eax
f010d3eb:	d1 f8                	sar    %eax
f010d3ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d3f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d3f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d3f6:	eb 03                	jmp    f010d3fb <stab_binsearch+0x41>
			m--;
f010d3f8:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d3fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d401:	7c 1e                	jl     f010d421 <stab_binsearch+0x67>
f010d403:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d406:	89 d0                	mov    %edx,%eax
f010d408:	01 c0                	add    %eax,%eax
f010d40a:	01 d0                	add    %edx,%eax
f010d40c:	c1 e0 02             	shl    $0x2,%eax
f010d40f:	89 c2                	mov    %eax,%edx
f010d411:	8b 45 08             	mov    0x8(%ebp),%eax
f010d414:	01 d0                	add    %edx,%eax
f010d416:	8a 40 04             	mov    0x4(%eax),%al
f010d419:	0f b6 c0             	movzbl %al,%eax
f010d41c:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d41f:	75 d7                	jne    f010d3f8 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d421:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d424:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d427:	7d 09                	jge    f010d432 <stab_binsearch+0x78>
			l = true_m + 1;
f010d429:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d42c:	40                   	inc    %eax
f010d42d:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d430:	eb 74                	jmp    f010d4a6 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d432:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d439:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d43c:	89 d0                	mov    %edx,%eax
f010d43e:	01 c0                	add    %eax,%eax
f010d440:	01 d0                	add    %edx,%eax
f010d442:	c1 e0 02             	shl    $0x2,%eax
f010d445:	89 c2                	mov    %eax,%edx
f010d447:	8b 45 08             	mov    0x8(%ebp),%eax
f010d44a:	01 d0                	add    %edx,%eax
f010d44c:	8b 40 08             	mov    0x8(%eax),%eax
f010d44f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d452:	73 11                	jae    f010d465 <stab_binsearch+0xab>
			*region_left = m;
f010d454:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d457:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d45a:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d45c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d45f:	40                   	inc    %eax
f010d460:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d463:	eb 41                	jmp    f010d4a6 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d465:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d468:	89 d0                	mov    %edx,%eax
f010d46a:	01 c0                	add    %eax,%eax
f010d46c:	01 d0                	add    %edx,%eax
f010d46e:	c1 e0 02             	shl    $0x2,%eax
f010d471:	89 c2                	mov    %eax,%edx
f010d473:	8b 45 08             	mov    0x8(%ebp),%eax
f010d476:	01 d0                	add    %edx,%eax
f010d478:	8b 40 08             	mov    0x8(%eax),%eax
f010d47b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d47e:	76 14                	jbe    f010d494 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d480:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d483:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d486:	8b 45 10             	mov    0x10(%ebp),%eax
f010d489:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d48b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d48e:	48                   	dec    %eax
f010d48f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d492:	eb 12                	jmp    f010d4a6 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d494:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d497:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d49a:	89 10                	mov    %edx,(%eax)
			l = m;
f010d49c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d49f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d4a2:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d4a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d4a9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d4ac:	0f 8e 2a ff ff ff    	jle    f010d3dc <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d4b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d4b6:	75 0f                	jne    f010d4c7 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d4b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4bb:	8b 00                	mov    (%eax),%eax
f010d4bd:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d4c0:	8b 45 10             	mov    0x10(%ebp),%eax
f010d4c3:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d4c5:	eb 3d                	jmp    f010d504 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d4c7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d4ca:	8b 00                	mov    (%eax),%eax
f010d4cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d4cf:	eb 03                	jmp    f010d4d4 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d4d1:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d4d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4d7:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d4d9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d4dc:	7d 1e                	jge    f010d4fc <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d4de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d4e1:	89 d0                	mov    %edx,%eax
f010d4e3:	01 c0                	add    %eax,%eax
f010d4e5:	01 d0                	add    %edx,%eax
f010d4e7:	c1 e0 02             	shl    $0x2,%eax
f010d4ea:	89 c2                	mov    %eax,%edx
f010d4ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4ef:	01 d0                	add    %edx,%eax
f010d4f1:	8a 40 04             	mov    0x4(%eax),%al
f010d4f4:	0f b6 c0             	movzbl %al,%eax
f010d4f7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d4fa:	75 d5                	jne    f010d4d1 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d4fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d502:	89 10                	mov    %edx,(%eax)
	}
}
f010d504:	90                   	nop
f010d505:	c9                   	leave  
f010d506:	c3                   	ret    

f010d507 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d507:	55                   	push   %ebp
f010d508:	89 e5                	mov    %esp,%ebp
f010d50a:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d50d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d510:	c7 00 64 3a 13 f0    	movl   $0xf0133a64,(%eax)
	info->eip_line = 0;
f010d516:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d519:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d520:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d523:	c7 40 08 64 3a 13 f0 	movl   $0xf0133a64,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d52a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d52d:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d534:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d537:	8b 55 08             	mov    0x8(%ebp),%edx
f010d53a:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d53d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d540:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d547:	8b 45 08             	mov    0x8(%ebp),%eax
f010d54a:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d54f:	76 1e                	jbe    f010d56f <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d551:	c7 45 f4 4c bb 13 f0 	movl   $0xf013bb4c,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d558:	c7 45 f0 08 83 17 f0 	movl   $0xf0178308,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d55f:	c7 45 ec 09 83 17 f0 	movl   $0xf0178309,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d566:	c7 45 e8 1d 56 18 f0 	movl   $0xf018561d,-0x18(%ebp)
f010d56d:	eb 2a                	jmp    f010d599 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d56f:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d576:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d579:	8b 00                	mov    (%eax),%eax
f010d57b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d57e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d581:	8b 40 04             	mov    0x4(%eax),%eax
f010d584:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d587:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d58a:	8b 40 08             	mov    0x8(%eax),%eax
f010d58d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d590:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d593:	8b 40 0c             	mov    0xc(%eax),%eax
f010d596:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d599:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d59c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d59f:	76 0a                	jbe    f010d5ab <debuginfo_eip+0xa4>
f010d5a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5a4:	48                   	dec    %eax
f010d5a5:	8a 00                	mov    (%eax),%al
f010d5a7:	84 c0                	test   %al,%al
f010d5a9:	74 0a                	je     f010d5b5 <debuginfo_eip+0xae>
		return -1;
f010d5ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d5b0:	e9 01 02 00 00       	jmp    f010d7b6 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d5b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d5bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d5bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5c2:	29 c2                	sub    %eax,%edx
f010d5c4:	89 d0                	mov    %edx,%eax
f010d5c6:	c1 f8 02             	sar    $0x2,%eax
f010d5c9:	89 c2                	mov    %eax,%edx
f010d5cb:	89 d0                	mov    %edx,%eax
f010d5cd:	c1 e0 02             	shl    $0x2,%eax
f010d5d0:	01 d0                	add    %edx,%eax
f010d5d2:	c1 e0 02             	shl    $0x2,%eax
f010d5d5:	01 d0                	add    %edx,%eax
f010d5d7:	c1 e0 02             	shl    $0x2,%eax
f010d5da:	01 d0                	add    %edx,%eax
f010d5dc:	89 c1                	mov    %eax,%ecx
f010d5de:	c1 e1 08             	shl    $0x8,%ecx
f010d5e1:	01 c8                	add    %ecx,%eax
f010d5e3:	89 c1                	mov    %eax,%ecx
f010d5e5:	c1 e1 10             	shl    $0x10,%ecx
f010d5e8:	01 c8                	add    %ecx,%eax
f010d5ea:	01 c0                	add    %eax,%eax
f010d5ec:	01 d0                	add    %edx,%eax
f010d5ee:	48                   	dec    %eax
f010d5ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d5f2:	ff 75 08             	pushl  0x8(%ebp)
f010d5f5:	6a 64                	push   $0x64
f010d5f7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d5fa:	50                   	push   %eax
f010d5fb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d5fe:	50                   	push   %eax
f010d5ff:	ff 75 f4             	pushl  -0xc(%ebp)
f010d602:	e8 b3 fd ff ff       	call   f010d3ba <stab_binsearch>
f010d607:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d60a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d60d:	85 c0                	test   %eax,%eax
f010d60f:	75 0a                	jne    f010d61b <debuginfo_eip+0x114>
		return -1;
f010d611:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d616:	e9 9b 01 00 00       	jmp    f010d7b6 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d61b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d61e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d621:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d624:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d627:	ff 75 08             	pushl  0x8(%ebp)
f010d62a:	6a 24                	push   $0x24
f010d62c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d62f:	50                   	push   %eax
f010d630:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d633:	50                   	push   %eax
f010d634:	ff 75 f4             	pushl  -0xc(%ebp)
f010d637:	e8 7e fd ff ff       	call   f010d3ba <stab_binsearch>
f010d63c:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d63f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d642:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d645:	39 c2                	cmp    %eax,%edx
f010d647:	0f 8f 86 00 00 00    	jg     f010d6d3 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d64d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d650:	89 c2                	mov    %eax,%edx
f010d652:	89 d0                	mov    %edx,%eax
f010d654:	01 c0                	add    %eax,%eax
f010d656:	01 d0                	add    %edx,%eax
f010d658:	c1 e0 02             	shl    $0x2,%eax
f010d65b:	89 c2                	mov    %eax,%edx
f010d65d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d660:	01 d0                	add    %edx,%eax
f010d662:	8b 00                	mov    (%eax),%eax
f010d664:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d667:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d66a:	29 d1                	sub    %edx,%ecx
f010d66c:	89 ca                	mov    %ecx,%edx
f010d66e:	39 d0                	cmp    %edx,%eax
f010d670:	73 22                	jae    f010d694 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d672:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d675:	89 c2                	mov    %eax,%edx
f010d677:	89 d0                	mov    %edx,%eax
f010d679:	01 c0                	add    %eax,%eax
f010d67b:	01 d0                	add    %edx,%eax
f010d67d:	c1 e0 02             	shl    $0x2,%eax
f010d680:	89 c2                	mov    %eax,%edx
f010d682:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d685:	01 d0                	add    %edx,%eax
f010d687:	8b 10                	mov    (%eax),%edx
f010d689:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d68c:	01 c2                	add    %eax,%edx
f010d68e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d691:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d694:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d697:	89 c2                	mov    %eax,%edx
f010d699:	89 d0                	mov    %edx,%eax
f010d69b:	01 c0                	add    %eax,%eax
f010d69d:	01 d0                	add    %edx,%eax
f010d69f:	c1 e0 02             	shl    $0x2,%eax
f010d6a2:	89 c2                	mov    %eax,%edx
f010d6a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6a7:	01 d0                	add    %edx,%eax
f010d6a9:	8b 50 08             	mov    0x8(%eax),%edx
f010d6ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6af:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d6b2:	8b 55 08             	mov    0x8(%ebp),%edx
f010d6b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6b8:	8b 40 10             	mov    0x10(%eax),%eax
f010d6bb:	29 c2                	sub    %eax,%edx
f010d6bd:	89 d0                	mov    %edx,%eax
f010d6bf:	c1 f8 02             	sar    $0x2,%eax
f010d6c2:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d6c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d6c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d6cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d6ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d6d1:	eb 15                	jmp    f010d6e8 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d6d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6d6:	8b 55 08             	mov    0x8(%ebp),%edx
f010d6d9:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d6dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d6df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d6e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d6e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d6e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6eb:	8b 40 08             	mov    0x8(%eax),%eax
f010d6ee:	83 ec 08             	sub    $0x8,%esp
f010d6f1:	6a 3a                	push   $0x3a
f010d6f3:	50                   	push   %eax
f010d6f4:	e8 c9 1a 02 00       	call   f012f1c2 <strfind>
f010d6f9:	83 c4 10             	add    $0x10,%esp
f010d6fc:	89 c2                	mov    %eax,%edx
f010d6fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d701:	8b 40 08             	mov    0x8(%eax),%eax
f010d704:	29 c2                	sub    %eax,%edx
f010d706:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d709:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d70c:	eb 03                	jmp    f010d711 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d70e:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d711:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d714:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d717:	7c 4e                	jl     f010d767 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d719:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d71c:	89 d0                	mov    %edx,%eax
f010d71e:	01 c0                	add    %eax,%eax
f010d720:	01 d0                	add    %edx,%eax
f010d722:	c1 e0 02             	shl    $0x2,%eax
f010d725:	89 c2                	mov    %eax,%edx
f010d727:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d72a:	01 d0                	add    %edx,%eax
f010d72c:	8a 40 04             	mov    0x4(%eax),%al
f010d72f:	3c 84                	cmp    $0x84,%al
f010d731:	74 34                	je     f010d767 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d733:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d736:	89 d0                	mov    %edx,%eax
f010d738:	01 c0                	add    %eax,%eax
f010d73a:	01 d0                	add    %edx,%eax
f010d73c:	c1 e0 02             	shl    $0x2,%eax
f010d73f:	89 c2                	mov    %eax,%edx
f010d741:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d744:	01 d0                	add    %edx,%eax
f010d746:	8a 40 04             	mov    0x4(%eax),%al
f010d749:	3c 64                	cmp    $0x64,%al
f010d74b:	75 c1                	jne    f010d70e <debuginfo_eip+0x207>
f010d74d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d750:	89 d0                	mov    %edx,%eax
f010d752:	01 c0                	add    %eax,%eax
f010d754:	01 d0                	add    %edx,%eax
f010d756:	c1 e0 02             	shl    $0x2,%eax
f010d759:	89 c2                	mov    %eax,%edx
f010d75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d75e:	01 d0                	add    %edx,%eax
f010d760:	8b 40 08             	mov    0x8(%eax),%eax
f010d763:	85 c0                	test   %eax,%eax
f010d765:	74 a7                	je     f010d70e <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d767:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d76a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d76d:	7c 42                	jl     f010d7b1 <debuginfo_eip+0x2aa>
f010d76f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d772:	89 d0                	mov    %edx,%eax
f010d774:	01 c0                	add    %eax,%eax
f010d776:	01 d0                	add    %edx,%eax
f010d778:	c1 e0 02             	shl    $0x2,%eax
f010d77b:	89 c2                	mov    %eax,%edx
f010d77d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d780:	01 d0                	add    %edx,%eax
f010d782:	8b 00                	mov    (%eax),%eax
f010d784:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d787:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d78a:	29 d1                	sub    %edx,%ecx
f010d78c:	89 ca                	mov    %ecx,%edx
f010d78e:	39 d0                	cmp    %edx,%eax
f010d790:	73 1f                	jae    f010d7b1 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d792:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d795:	89 d0                	mov    %edx,%eax
f010d797:	01 c0                	add    %eax,%eax
f010d799:	01 d0                	add    %edx,%eax
f010d79b:	c1 e0 02             	shl    $0x2,%eax
f010d79e:	89 c2                	mov    %eax,%edx
f010d7a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7a3:	01 d0                	add    %edx,%eax
f010d7a5:	8b 10                	mov    (%eax),%edx
f010d7a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7aa:	01 c2                	add    %eax,%edx
f010d7ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7af:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d7b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d7b6:	c9                   	leave  
f010d7b7:	c3                   	ret    

f010d7b8 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d7b8:	55                   	push   %ebp
f010d7b9:	89 e5                	mov    %esp,%ebp
f010d7bb:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d7be:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d7c2:	74 1c                	je     f010d7e0 <setPageReplacmentAlgorithmLRU+0x28>
f010d7c4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d7c8:	74 16                	je     f010d7e0 <setPageReplacmentAlgorithmLRU+0x28>
f010d7ca:	68 70 3a 13 f0       	push   $0xf0133a70
f010d7cf:	68 ba 3a 13 f0       	push   $0xf0133aba
f010d7d4:	6a 18                	push   $0x18
f010d7d6:	68 cf 3a 13 f0       	push   $0xf0133acf
f010d7db:	e8 d0 29 ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d7e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7e3:	a3 4c be 2b f0       	mov    %eax,0xf02bbe4c
}
f010d7e8:	90                   	nop
f010d7e9:	c9                   	leave  
f010d7ea:	c3                   	ret    

f010d7eb <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d7eb:	55                   	push   %ebp
f010d7ec:	89 e5                	mov    %esp,%ebp
f010d7ee:	c7 05 4c be 2b f0 03 	movl   $0x3,0xf02bbe4c
f010d7f5:	00 00 00 
f010d7f8:	90                   	nop
f010d7f9:	5d                   	pop    %ebp
f010d7fa:	c3                   	ret    

f010d7fb <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d7fb:	55                   	push   %ebp
f010d7fc:	89 e5                	mov    %esp,%ebp
f010d7fe:	c7 05 4c be 2b f0 04 	movl   $0x4,0xf02bbe4c
f010d805:	00 00 00 
f010d808:	90                   	nop
f010d809:	5d                   	pop    %ebp
f010d80a:	c3                   	ret    

f010d80b <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d80b:	55                   	push   %ebp
f010d80c:	89 e5                	mov    %esp,%ebp
f010d80e:	c7 05 4c be 2b f0 05 	movl   $0x5,0xf02bbe4c
f010d815:	00 00 00 
f010d818:	90                   	nop
f010d819:	5d                   	pop    %ebp
f010d81a:	c3                   	ret    

f010d81b <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d81b:	55                   	push   %ebp
f010d81c:	89 e5                	mov    %esp,%ebp
f010d81e:	c7 05 4c be 2b f0 07 	movl   $0x7,0xf02bbe4c
f010d825:	00 00 00 
f010d828:	90                   	nop
f010d829:	5d                   	pop    %ebp
f010d82a:	c3                   	ret    

f010d82b <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d82b:	55                   	push   %ebp
f010d82c:	89 e5                	mov    %esp,%ebp
f010d82e:	c7 05 4c be 2b f0 06 	movl   $0x6,0xf02bbe4c
f010d835:	00 00 00 
f010d838:	8b 45 08             	mov    0x8(%ebp),%eax
f010d83b:	a3 5c 3a 25 f0       	mov    %eax,0xf0253a5c
f010d840:	90                   	nop
f010d841:	5d                   	pop    %ebp
f010d842:	c3                   	ret    

f010d843 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d843:	55                   	push   %ebp
f010d844:	89 e5                	mov    %esp,%ebp
f010d846:	8b 15 4c be 2b f0    	mov    0xf02bbe4c,%edx
f010d84c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d84f:	39 c2                	cmp    %eax,%edx
f010d851:	0f 94 c0             	sete   %al
f010d854:	0f b6 c0             	movzbl %al,%eax
f010d857:	5d                   	pop    %ebp
f010d858:	c3                   	ret    

f010d859 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d859:	55                   	push   %ebp
f010d85a:	89 e5                	mov    %esp,%ebp
f010d85c:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d861:	83 f8 03             	cmp    $0x3,%eax
f010d864:	75 07                	jne    f010d86d <isPageReplacmentAlgorithmCLOCK+0x14>
f010d866:	b8 01 00 00 00       	mov    $0x1,%eax
f010d86b:	eb 05                	jmp    f010d872 <isPageReplacmentAlgorithmCLOCK+0x19>
f010d86d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d872:	5d                   	pop    %ebp
f010d873:	c3                   	ret    

f010d874 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d874:	55                   	push   %ebp
f010d875:	89 e5                	mov    %esp,%ebp
f010d877:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d87c:	83 f8 04             	cmp    $0x4,%eax
f010d87f:	75 07                	jne    f010d888 <isPageReplacmentAlgorithmFIFO+0x14>
f010d881:	b8 01 00 00 00       	mov    $0x1,%eax
f010d886:	eb 05                	jmp    f010d88d <isPageReplacmentAlgorithmFIFO+0x19>
f010d888:	b8 00 00 00 00       	mov    $0x0,%eax
f010d88d:	5d                   	pop    %ebp
f010d88e:	c3                   	ret    

f010d88f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d88f:	55                   	push   %ebp
f010d890:	89 e5                	mov    %esp,%ebp
f010d892:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d897:	83 f8 05             	cmp    $0x5,%eax
f010d89a:	75 07                	jne    f010d8a3 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d89c:	b8 01 00 00 00       	mov    $0x1,%eax
f010d8a1:	eb 05                	jmp    f010d8a8 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d8a3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8a8:	5d                   	pop    %ebp
f010d8a9:	c3                   	ret    

f010d8aa <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d8aa:	55                   	push   %ebp
f010d8ab:	89 e5                	mov    %esp,%ebp
f010d8ad:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d8b2:	83 f8 07             	cmp    $0x7,%eax
f010d8b5:	75 07                	jne    f010d8be <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d8b7:	b8 01 00 00 00       	mov    $0x1,%eax
f010d8bc:	eb 05                	jmp    f010d8c3 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d8be:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8c3:	5d                   	pop    %ebp
f010d8c4:	c3                   	ret    

f010d8c5 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d8c5:	55                   	push   %ebp
f010d8c6:	89 e5                	mov    %esp,%ebp
f010d8c8:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d8cd:	83 f8 06             	cmp    $0x6,%eax
f010d8d0:	75 07                	jne    f010d8d9 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d8d2:	b8 01 00 00 00       	mov    $0x1,%eax
f010d8d7:	eb 05                	jmp    f010d8de <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d8d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8de:	5d                   	pop    %ebp
f010d8df:	c3                   	ret    

f010d8e0 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d8e0:	55                   	push   %ebp
f010d8e1:	89 e5                	mov    %esp,%ebp
f010d8e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8e6:	a3 0c be 2b f0       	mov    %eax,0xf02bbe0c
f010d8eb:	90                   	nop
f010d8ec:	5d                   	pop    %ebp
f010d8ed:	c3                   	ret    

f010d8ee <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d8ee:	55                   	push   %ebp
f010d8ef:	89 e5                	mov    %esp,%ebp
f010d8f1:	a1 0c be 2b f0       	mov    0xf02bbe0c,%eax
f010d8f6:	5d                   	pop    %ebp
f010d8f7:	c3                   	ret    

f010d8f8 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d8f8:	55                   	push   %ebp
f010d8f9:	89 e5                	mov    %esp,%ebp
f010d8fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8fe:	a3 64 be 2b f0       	mov    %eax,0xf02bbe64
f010d903:	90                   	nop
f010d904:	5d                   	pop    %ebp
f010d905:	c3                   	ret    

f010d906 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d906:	55                   	push   %ebp
f010d907:	89 e5                	mov    %esp,%ebp
f010d909:	a1 64 be 2b f0       	mov    0xf02bbe64,%eax
f010d90e:	5d                   	pop    %ebp
f010d90f:	c3                   	ret    

f010d910 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d910:	55                   	push   %ebp
f010d911:	89 e5                	mov    %esp,%ebp
f010d913:	8b 45 08             	mov    0x8(%ebp),%eax
f010d916:	a3 74 be 2b f0       	mov    %eax,0xf02bbe74
f010d91b:	90                   	nop
f010d91c:	5d                   	pop    %ebp
f010d91d:	c3                   	ret    

f010d91e <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d91e:	55                   	push   %ebp
f010d91f:	89 e5                	mov    %esp,%ebp
f010d921:	a1 74 be 2b f0       	mov    0xf02bbe74,%eax
f010d926:	5d                   	pop    %ebp
f010d927:	c3                   	ret    

f010d928 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d928:	55                   	push   %ebp
f010d929:	89 e5                	mov    %esp,%ebp
f010d92b:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d931:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d937:	83 ec 04             	sub    $0x4,%esp
f010d93a:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d93d:	52                   	push   %edx
f010d93e:	ff 75 0c             	pushl  0xc(%ebp)
f010d941:	50                   	push   %eax
f010d942:	e8 c6 9c ff ff       	call   f010760d <__static_cpt>
f010d947:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d94a:	90                   	nop
f010d94b:	c9                   	leave  
f010d94c:	c3                   	ret    

f010d94d <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d94d:	55                   	push   %ebp
f010d94e:	89 e5                	mov    %esp,%ebp
f010d950:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d953:	83 ec 0c             	sub    $0xc,%esp
f010d956:	ff 75 08             	pushl  0x8(%ebp)
f010d959:	e8 f7 a8 ff ff       	call   f0108255 <env_page_ws_get_size>
f010d95e:	83 c4 10             	add    $0x10,%esp
f010d961:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d964:	8b 45 08             	mov    0x8(%ebp),%eax
f010d967:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d96d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d970:	76 14                	jbe    f010d986 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d972:	83 ec 04             	sub    $0x4,%esp
f010d975:	68 ec 3a 13 f0       	push   $0xf0133aec
f010d97a:	6a 55                	push   $0x55
f010d97c:	68 cf 3a 13 f0       	push   $0xf0133acf
f010d981:	e8 2a 28 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d986:	e8 e9 fe ff ff       	call   f010d874 <isPageReplacmentAlgorithmFIFO>
f010d98b:	85 c0                	test   %eax,%eax
f010d98d:	74 14                	je     f010d9a3 <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d98f:	83 ec 04             	sub    $0x4,%esp
f010d992:	68 28 3b 13 f0       	push   $0xf0133b28
f010d997:	6a 61                	push   $0x61
f010d999:	68 cf 3a 13 f0       	push   $0xf0133acf
f010d99e:	e8 0d 28 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d9a3:	83 ec 0c             	sub    $0xc,%esp
f010d9a6:	6a 02                	push   $0x2
f010d9a8:	e8 96 fe ff ff       	call   f010d843 <isPageReplacmentAlgorithmLRU>
f010d9ad:	83 c4 10             	add    $0x10,%esp
f010d9b0:	85 c0                	test   %eax,%eax
f010d9b2:	74 14                	je     f010d9c8 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d9b4:	83 ec 04             	sub    $0x4,%esp
f010d9b7:	68 6c 3b 13 f0       	push   $0xf0133b6c
f010d9bc:	6a 67                	push   $0x67
f010d9be:	68 cf 3a 13 f0       	push   $0xf0133acf
f010d9c3:	e8 e8 27 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d9c8:	90                   	nop
f010d9c9:	c9                   	leave  
f010d9ca:	c3                   	ret    

f010d9cb <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d9cb:	55                   	push   %ebp
f010d9cc:	89 e5                	mov    %esp,%ebp
f010d9ce:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d9d1:	83 ec 04             	sub    $0x4,%esp
f010d9d4:	68 b0 3b 13 f0       	push   $0xf0133bb0
f010d9d9:	6a 70                	push   $0x70
f010d9db:	68 cf 3a 13 f0       	push   $0xf0133acf
f010d9e0:	e8 cb 27 ff ff       	call   f01001b0 <_panic>

f010d9e5 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d9e5:	55                   	push   %ebp
f010d9e6:	89 e5                	mov    %esp,%ebp
f010d9e8:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d9f2:	e9 aa 00 00 00       	jmp    f010daa1 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d9f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d9fa:	89 d0                	mov    %edx,%eax
f010d9fc:	c1 e0 02             	shl    $0x2,%eax
f010d9ff:	01 d0                	add    %edx,%eax
f010da01:	01 c0                	add    %eax,%eax
f010da03:	01 d0                	add    %edx,%eax
f010da05:	01 c0                	add    %eax,%eax
f010da07:	01 d0                	add    %edx,%eax
f010da09:	c1 e0 02             	shl    $0x2,%eax
f010da0c:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010da11:	83 ec 04             	sub    $0x4,%esp
f010da14:	6a 5c                	push   $0x5c
f010da16:	6a 00                	push   $0x0
f010da18:	50                   	push   %eax
f010da19:	e8 d0 17 02 00       	call   f012f1ee <memset>
f010da1e:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010da21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da24:	89 d0                	mov    %edx,%eax
f010da26:	c1 e0 02             	shl    $0x2,%eax
f010da29:	01 d0                	add    %edx,%eax
f010da2b:	01 c0                	add    %eax,%eax
f010da2d:	01 d0                	add    %edx,%eax
f010da2f:	01 c0                	add    %eax,%eax
f010da31:	01 d0                	add    %edx,%eax
f010da33:	c1 e0 02             	shl    $0x2,%eax
f010da36:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010da3b:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010da3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da41:	89 d0                	mov    %edx,%eax
f010da43:	c1 e0 02             	shl    $0x2,%eax
f010da46:	01 d0                	add    %edx,%eax
f010da48:	01 c0                	add    %eax,%eax
f010da4a:	01 d0                	add    %edx,%eax
f010da4c:	01 c0                	add    %eax,%eax
f010da4e:	01 d0                	add    %edx,%eax
f010da50:	c1 e0 02             	shl    $0x2,%eax
f010da53:	05 24 9a 2b f0       	add    $0xf02b9a24,%eax
f010da58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010da5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da61:	89 d0                	mov    %edx,%eax
f010da63:	c1 e0 02             	shl    $0x2,%eax
f010da66:	01 d0                	add    %edx,%eax
f010da68:	01 c0                	add    %eax,%eax
f010da6a:	01 d0                	add    %edx,%eax
f010da6c:	01 c0                	add    %eax,%eax
f010da6e:	01 d0                	add    %edx,%eax
f010da70:	c1 e0 02             	shl    $0x2,%eax
f010da73:	05 28 9a 2b f0       	add    $0xf02b9a28,%eax
f010da78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010da7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da81:	89 d0                	mov    %edx,%eax
f010da83:	c1 e0 02             	shl    $0x2,%eax
f010da86:	01 d0                	add    %edx,%eax
f010da88:	01 c0                	add    %eax,%eax
f010da8a:	01 d0                	add    %edx,%eax
f010da8c:	01 c0                	add    %eax,%eax
f010da8e:	01 d0                	add    %edx,%eax
f010da90:	c1 e0 02             	shl    $0x2,%eax
f010da93:	05 30 9a 2b f0       	add    $0xf02b9a30,%eax
f010da98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010da9e:	ff 45 f4             	incl   -0xc(%ebp)
f010daa1:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010daa5:	0f 8e 4c ff ff ff    	jle    f010d9f7 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010daab:	90                   	nop
f010daac:	c9                   	leave  
f010daad:	c3                   	ret    

f010daae <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010daae:	55                   	push   %ebp
f010daaf:	89 e5                	mov    %esp,%ebp
f010dab1:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010dab4:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dabb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010dac2:	eb 2b                	jmp    f010daef <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010dac4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010dac7:	89 d0                	mov    %edx,%eax
f010dac9:	c1 e0 02             	shl    $0x2,%eax
f010dacc:	01 d0                	add    %edx,%eax
f010dace:	01 c0                	add    %eax,%eax
f010dad0:	01 d0                	add    %edx,%eax
f010dad2:	01 c0                	add    %eax,%eax
f010dad4:	01 d0                	add    %edx,%eax
f010dad6:	c1 e0 02             	shl    $0x2,%eax
f010dad9:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010dade:	8a 00                	mov    (%eax),%al
f010dae0:	84 c0                	test   %al,%al
f010dae2:	74 08                	je     f010daec <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010dae4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dae7:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010daea:	eb 09                	jmp    f010daf5 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010daec:	ff 45 f8             	incl   -0x8(%ebp)
f010daef:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010daf3:	7e cf                	jle    f010dac4 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010daf5:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010daf9:	75 07                	jne    f010db02 <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010dafb:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010db00:	eb 40                	jmp    f010db42 <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010db02:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010db05:	89 d0                	mov    %edx,%eax
f010db07:	c1 e0 02             	shl    $0x2,%eax
f010db0a:	01 d0                	add    %edx,%eax
f010db0c:	01 c0                	add    %eax,%eax
f010db0e:	01 d0                	add    %edx,%eax
f010db10:	01 c0                	add    %eax,%eax
f010db12:	01 d0                	add    %edx,%eax
f010db14:	c1 e0 02             	shl    $0x2,%eax
f010db17:	8d 90 e0 99 2b f0    	lea    -0xfd46620(%eax),%edx
f010db1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010db20:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010db22:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010db25:	89 d0                	mov    %edx,%eax
f010db27:	c1 e0 02             	shl    $0x2,%eax
f010db2a:	01 d0                	add    %edx,%eax
f010db2c:	01 c0                	add    %eax,%eax
f010db2e:	01 d0                	add    %edx,%eax
f010db30:	01 c0                	add    %eax,%eax
f010db32:	01 d0                	add    %edx,%eax
f010db34:	c1 e0 02             	shl    $0x2,%eax
f010db37:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010db3c:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010db3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010db42:	c9                   	leave  
f010db43:	c3                   	ret    

f010db44 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010db44:	55                   	push   %ebp
f010db45:	89 e5                	mov    %esp,%ebp
f010db47:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010db4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010db51:	eb 7a                	jmp    f010dbcd <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010db53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010db56:	89 d0                	mov    %edx,%eax
f010db58:	c1 e0 02             	shl    $0x2,%eax
f010db5b:	01 d0                	add    %edx,%eax
f010db5d:	01 c0                	add    %eax,%eax
f010db5f:	01 d0                	add    %edx,%eax
f010db61:	01 c0                	add    %eax,%eax
f010db63:	01 d0                	add    %edx,%eax
f010db65:	c1 e0 02             	shl    $0x2,%eax
f010db68:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010db6d:	8a 00                	mov    (%eax),%al
f010db6f:	84 c0                	test   %al,%al
f010db71:	75 56                	jne    f010dbc9 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010db73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010db76:	89 d0                	mov    %edx,%eax
f010db78:	c1 e0 02             	shl    $0x2,%eax
f010db7b:	01 d0                	add    %edx,%eax
f010db7d:	01 c0                	add    %eax,%eax
f010db7f:	01 d0                	add    %edx,%eax
f010db81:	01 c0                	add    %eax,%eax
f010db83:	01 d0                	add    %edx,%eax
f010db85:	c1 e0 02             	shl    $0x2,%eax
f010db88:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010db8d:	8b 00                	mov    (%eax),%eax
f010db8f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010db92:	75 36                	jne    f010dbca <get_semaphore_object_ID+0x86>
f010db94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010db97:	89 d0                	mov    %edx,%eax
f010db99:	c1 e0 02             	shl    $0x2,%eax
f010db9c:	01 d0                	add    %edx,%eax
f010db9e:	01 c0                	add    %eax,%eax
f010dba0:	01 d0                	add    %edx,%eax
f010dba2:	01 c0                	add    %eax,%eax
f010dba4:	01 d0                	add    %edx,%eax
f010dba6:	c1 e0 02             	shl    $0x2,%eax
f010dba9:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010dbae:	83 c0 04             	add    $0x4,%eax
f010dbb1:	83 ec 08             	sub    $0x8,%esp
f010dbb4:	50                   	push   %eax
f010dbb5:	ff 75 0c             	pushl  0xc(%ebp)
f010dbb8:	e8 4f 15 02 00       	call   f012f10c <strcmp>
f010dbbd:	83 c4 10             	add    $0x10,%esp
f010dbc0:	85 c0                	test   %eax,%eax
f010dbc2:	75 06                	jne    f010dbca <get_semaphore_object_ID+0x86>
		{
			return i;
f010dbc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dbc7:	eb 0f                	jmp    f010dbd8 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010dbc9:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010dbca:	ff 45 f4             	incl   -0xc(%ebp)
f010dbcd:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010dbd1:	7e 80                	jle    f010db53 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010dbd3:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010dbd8:	c9                   	leave  
f010dbd9:	c3                   	ret    

f010dbda <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010dbda:	55                   	push   %ebp
f010dbdb:	89 e5                	mov    %esp,%ebp
f010dbdd:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010dbe0:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010dbe4:	76 0a                	jbe    f010dbf0 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010dbe6:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010dbeb:	e9 ac 00 00 00       	jmp    f010dc9c <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010dbf0:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbf3:	89 d0                	mov    %edx,%eax
f010dbf5:	c1 e0 02             	shl    $0x2,%eax
f010dbf8:	01 d0                	add    %edx,%eax
f010dbfa:	01 c0                	add    %eax,%eax
f010dbfc:	01 d0                	add    %edx,%eax
f010dbfe:	01 c0                	add    %eax,%eax
f010dc00:	01 d0                	add    %edx,%eax
f010dc02:	c1 e0 02             	shl    $0x2,%eax
f010dc05:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010dc0a:	83 ec 04             	sub    $0x4,%esp
f010dc0d:	6a 5c                	push   $0x5c
f010dc0f:	6a 00                	push   $0x0
f010dc11:	50                   	push   %eax
f010dc12:	e8 d7 15 02 00       	call   f012f1ee <memset>
f010dc17:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010dc1a:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc1d:	89 d0                	mov    %edx,%eax
f010dc1f:	c1 e0 02             	shl    $0x2,%eax
f010dc22:	01 d0                	add    %edx,%eax
f010dc24:	01 c0                	add    %eax,%eax
f010dc26:	01 d0                	add    %edx,%eax
f010dc28:	01 c0                	add    %eax,%eax
f010dc2a:	01 d0                	add    %edx,%eax
f010dc2c:	c1 e0 02             	shl    $0x2,%eax
f010dc2f:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010dc34:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010dc37:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc3a:	89 d0                	mov    %edx,%eax
f010dc3c:	c1 e0 02             	shl    $0x2,%eax
f010dc3f:	01 d0                	add    %edx,%eax
f010dc41:	01 c0                	add    %eax,%eax
f010dc43:	01 d0                	add    %edx,%eax
f010dc45:	01 c0                	add    %eax,%eax
f010dc47:	01 d0                	add    %edx,%eax
f010dc49:	c1 e0 02             	shl    $0x2,%eax
f010dc4c:	05 24 9a 2b f0       	add    $0xf02b9a24,%eax
f010dc51:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dc57:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc5a:	89 d0                	mov    %edx,%eax
f010dc5c:	c1 e0 02             	shl    $0x2,%eax
f010dc5f:	01 d0                	add    %edx,%eax
f010dc61:	01 c0                	add    %eax,%eax
f010dc63:	01 d0                	add    %edx,%eax
f010dc65:	01 c0                	add    %eax,%eax
f010dc67:	01 d0                	add    %edx,%eax
f010dc69:	c1 e0 02             	shl    $0x2,%eax
f010dc6c:	05 28 9a 2b f0       	add    $0xf02b9a28,%eax
f010dc71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dc77:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc7a:	89 d0                	mov    %edx,%eax
f010dc7c:	c1 e0 02             	shl    $0x2,%eax
f010dc7f:	01 d0                	add    %edx,%eax
f010dc81:	01 c0                	add    %eax,%eax
f010dc83:	01 d0                	add    %edx,%eax
f010dc85:	01 c0                	add    %eax,%eax
f010dc87:	01 d0                	add    %edx,%eax
f010dc89:	c1 e0 02             	shl    $0x2,%eax
f010dc8c:	05 30 9a 2b f0       	add    $0xf02b9a30,%eax
f010dc91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010dc97:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dc9c:	c9                   	leave  
f010dc9d:	c3                   	ret    

f010dc9e <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010dc9e:	55                   	push   %ebp
f010dc9f:	89 e5                	mov    %esp,%ebp
f010dca1:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010dca4:	83 ec 04             	sub    $0x4,%esp
f010dca7:	68 d4 3b 13 f0       	push   $0xf0133bd4
f010dcac:	68 95 00 00 00       	push   $0x95
f010dcb1:	68 02 3c 13 f0       	push   $0xf0133c02
f010dcb6:	e8 f5 24 ff ff       	call   f01001b0 <_panic>

f010dcbb <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dcbb:	55                   	push   %ebp
f010dcbc:	89 e5                	mov    %esp,%ebp
f010dcbe:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010dcc1:	83 ec 04             	sub    $0x4,%esp
f010dcc4:	68 20 3c 13 f0       	push   $0xf0133c20
f010dcc9:	68 9e 00 00 00       	push   $0x9e
f010dcce:	68 02 3c 13 f0       	push   $0xf0133c02
f010dcd3:	e8 d8 24 ff ff       	call   f01001b0 <_panic>

f010dcd8 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010dcd8:	55                   	push   %ebp
f010dcd9:	89 e5                	mov    %esp,%ebp
f010dcdb:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010dcde:	83 ec 04             	sub    $0x4,%esp
f010dce1:	68 4c 3c 13 f0       	push   $0xf0133c4c
f010dce6:	68 a6 00 00 00       	push   $0xa6
f010dceb:	68 02 3c 13 f0       	push   $0xf0133c02
f010dcf0:	e8 bb 24 ff ff       	call   f01001b0 <_panic>

f010dcf5 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010dcf5:	55                   	push   %ebp
f010dcf6:	89 e5                	mov    %esp,%ebp
f010dcf8:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f010dcff:	00 00 00 
f010dd02:	90                   	nop
f010dd03:	5d                   	pop    %ebp
f010dd04:	c3                   	ret    

f010dd05 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010dd05:	55                   	push   %ebp
f010dd06:	89 e5                	mov    %esp,%ebp
f010dd08:	c7 05 18 be 2b f0 02 	movl   $0x2,0xf02bbe18
f010dd0f:	00 00 00 
f010dd12:	90                   	nop
f010dd13:	5d                   	pop    %ebp
f010dd14:	c3                   	ret    

f010dd15 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010dd15:	55                   	push   %ebp
f010dd16:	89 e5                	mov    %esp,%ebp
f010dd18:	c7 05 18 be 2b f0 03 	movl   $0x3,0xf02bbe18
f010dd1f:	00 00 00 
f010dd22:	90                   	nop
f010dd23:	5d                   	pop    %ebp
f010dd24:	c3                   	ret    

f010dd25 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010dd25:	55                   	push   %ebp
f010dd26:	89 e5                	mov    %esp,%ebp
f010dd28:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010dd2d:	83 f8 01             	cmp    $0x1,%eax
f010dd30:	75 04                	jne    f010dd36 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010dd32:	b0 01                	mov    $0x1,%al
f010dd34:	eb 02                	jmp    f010dd38 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010dd36:	b0 00                	mov    $0x0,%al
f010dd38:	5d                   	pop    %ebp
f010dd39:	c3                   	ret    

f010dd3a <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010dd3a:	55                   	push   %ebp
f010dd3b:	89 e5                	mov    %esp,%ebp
f010dd3d:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010dd42:	83 f8 02             	cmp    $0x2,%eax
f010dd45:	75 04                	jne    f010dd4b <isKHeapPlacementStrategyBESTFIT+0x11>
f010dd47:	b0 01                	mov    $0x1,%al
f010dd49:	eb 02                	jmp    f010dd4d <isKHeapPlacementStrategyBESTFIT+0x13>
f010dd4b:	b0 00                	mov    $0x0,%al
f010dd4d:	5d                   	pop    %ebp
f010dd4e:	c3                   	ret    

f010dd4f <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010dd4f:	55                   	push   %ebp
f010dd50:	89 e5                	mov    %esp,%ebp
f010dd52:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010dd57:	83 f8 03             	cmp    $0x3,%eax
f010dd5a:	75 04                	jne    f010dd60 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010dd5c:	b0 01                	mov    $0x1,%al
f010dd5e:	eb 02                	jmp    f010dd62 <isKHeapPlacementStrategyNEXTFIT+0x13>
f010dd60:	b0 00                	mov    $0x0,%al
f010dd62:	5d                   	pop    %ebp
f010dd63:	c3                   	ret    

f010dd64 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010dd64:	55                   	push   %ebp
f010dd65:	89 e5                	mov    %esp,%ebp
f010dd67:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dd6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dd71:	eb 26                	jmp    f010dd99 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010dd73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dd7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd80:	01 c2                	add    %eax,%edx
f010dd82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd85:	40                   	inc    %eax
f010dd86:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010dd8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd90:	01 c8                	add    %ecx,%eax
f010dd92:	8b 00                	mov    (%eax),%eax
f010dd94:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dd96:	ff 45 f4             	incl   -0xc(%ebp)
f010dd99:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd9c:	48                   	dec    %eax
f010dd9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dda0:	7f d1                	jg     f010dd73 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010dda2:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010dda5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010ddac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010ddb3:	eb 35                	jmp    f010ddea <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010ddb5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ddb8:	89 d0                	mov    %edx,%eax
f010ddba:	01 c0                	add    %eax,%eax
f010ddbc:	01 d0                	add    %edx,%eax
f010ddbe:	c1 e0 02             	shl    $0x2,%eax
f010ddc1:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010ddc6:	8b 10                	mov    (%eax),%edx
f010ddc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddcb:	8b 00                	mov    (%eax),%eax
f010ddcd:	83 ec 08             	sub    $0x8,%esp
f010ddd0:	52                   	push   %edx
f010ddd1:	50                   	push   %eax
f010ddd2:	e8 35 13 02 00       	call   f012f10c <strcmp>
f010ddd7:	83 c4 10             	add    $0x10,%esp
f010ddda:	85 c0                	test   %eax,%eax
f010dddc:	75 09                	jne    f010dde7 <tst_handler+0x83>
		{
			test_found = 1;
f010ddde:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010dde5:	eb 0f                	jmp    f010ddf6 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dde7:	ff 45 ec             	incl   -0x14(%ebp)
f010ddea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dded:	a1 1c eb 18 f0       	mov    0xf018eb1c,%eax
f010ddf2:	39 c2                	cmp    %eax,%edx
f010ddf4:	72 bf                	jb     f010ddb5 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010ddf6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ddfa:	74 29                	je     f010de25 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010ddfc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ddff:	89 d0                	mov    %edx,%eax
f010de01:	01 c0                	add    %eax,%eax
f010de03:	01 d0                	add    %edx,%eax
f010de05:	c1 e0 02             	shl    $0x2,%eax
f010de08:	05 88 ea 18 f0       	add    $0xf018ea88,%eax
f010de0d:	8b 00                	mov    (%eax),%eax
f010de0f:	83 ec 08             	sub    $0x8,%esp
f010de12:	ff 75 0c             	pushl  0xc(%ebp)
f010de15:	ff 75 08             	pushl  0x8(%ebp)
f010de18:	ff d0                	call   *%eax
f010de1a:	83 c4 10             	add    $0x10,%esp
f010de1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010de20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010de23:	eb 1b                	jmp    f010de40 <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010de25:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de28:	8b 00                	mov    (%eax),%eax
f010de2a:	83 ec 08             	sub    $0x8,%esp
f010de2d:	50                   	push   %eax
f010de2e:	68 00 3f 13 f0       	push   $0xf0133f00
f010de33:	e8 f9 2f ff ff       	call   f0100e31 <cprintf>
f010de38:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de3b:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010de40:	c9                   	leave  
f010de41:	c3                   	ret    

f010de42 <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010de42:	55                   	push   %ebp
f010de43:	89 e5                	mov    %esp,%ebp
f010de45:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010de48:	e8 3c 71 01 00       	call   f0124f89 <test_three_creation_functions>
	return 0;
f010de4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de52:	c9                   	leave  
f010de53:	c3                   	ret    

f010de54 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010de54:	55                   	push   %ebp
f010de55:	89 e5                	mov    %esp,%ebp
f010de57:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010de5a:	e8 fe 92 00 00       	call   f011715d <test_priority_normal_and_higher>
	return 0;
f010de5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de64:	c9                   	leave  
f010de65:	c3                   	ret    

f010de66 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010de66:	55                   	push   %ebp
f010de67:	89 e5                	mov    %esp,%ebp
f010de69:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010de6c:	e8 56 9d 00 00       	call   f0117bc7 <test_priority_normal_and_lower>
	return 0;
f010de71:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de76:	c9                   	leave  
f010de77:	c3                   	ret    

f010de78 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010de78:	55                   	push   %ebp
f010de79:	89 e5                	mov    %esp,%ebp
f010de7b:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010de7e:	e8 1a 73 01 00       	call   f012519d <test_kfreeall>
	return 0;
f010de83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de88:	c9                   	leave  
f010de89:	c3                   	ret    

f010de8a <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010de8a:	55                   	push   %ebp
f010de8b:	89 e5                	mov    %esp,%ebp
f010de8d:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010de90:	e8 a2 87 01 00       	call   f0126637 <test_kexpand>
	return 0;
f010de95:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010de9a:	c9                   	leave  
f010de9b:	c3                   	ret    

f010de9c <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010de9c:	55                   	push   %ebp
f010de9d:	89 e5                	mov    %esp,%ebp
f010de9f:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010dea2:	e8 61 93 01 00       	call   f0127208 <test_kshrink>
	return 0;
f010dea7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010deac:	c9                   	leave  
f010dead:	c3                   	ret    

f010deae <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010deae:	55                   	push   %ebp
f010deaf:	89 e5                	mov    %esp,%ebp
f010deb1:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010deb4:	e8 56 a0 01 00       	call   f0127f0f <test_kfreelast>
	return 0;
f010deb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010debe:	c9                   	leave  
f010debf:	c3                   	ret    

f010dec0 <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010dec0:	55                   	push   %ebp
f010dec1:	89 e5                	mov    %esp,%ebp
f010dec3:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010dec6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dec9:	83 c0 04             	add    $0x4,%eax
f010decc:	8b 00                	mov    (%eax),%eax
f010dece:	83 ec 04             	sub    $0x4,%esp
f010ded1:	6a 0a                	push   $0xa
f010ded3:	6a 00                	push   $0x0
f010ded5:	50                   	push   %eax
f010ded6:	e8 85 14 02 00       	call   f012f360 <strtol>
f010dedb:	83 c4 10             	add    $0x10,%esp
f010dede:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010dee1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010dee8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010deef:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f010def4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010def7:	eb 3b                	jmp    f010df34 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010def9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010defc:	83 c0 5c             	add    $0x5c,%eax
f010deff:	83 ec 08             	sub    $0x8,%esp
f010df02:	68 13 3f 13 f0       	push   $0xf0133f13
f010df07:	50                   	push   %eax
f010df08:	e8 ff 11 02 00       	call   f012f10c <strcmp>
f010df0d:	83 c4 10             	add    $0x10,%esp
f010df10:	85 c0                	test   %eax,%eax
f010df12:	75 12                	jne    f010df26 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010df14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010df18:	74 07                	je     f010df21 <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010df1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010df21:	ff 45 f4             	incl   -0xc(%ebp)
f010df24:	eb 06                	jmp    f010df2c <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010df26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010df2a:	74 31                	je     f010df5d <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010df2c:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010df31:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010df34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010df38:	74 08                	je     f010df42 <tst_sc_MLFQ+0x82>
f010df3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df3d:	8b 40 44             	mov    0x44(%eax),%eax
f010df40:	eb 05                	jmp    f010df47 <tst_sc_MLFQ+0x87>
f010df42:	b8 00 00 00 00       	mov    $0x0,%eax
f010df47:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f010df4c:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010df51:	85 c0                	test   %eax,%eax
f010df53:	75 a4                	jne    f010def9 <tst_sc_MLFQ+0x39>
f010df55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010df59:	75 9e                	jne    f010def9 <tst_sc_MLFQ+0x39>
f010df5b:	eb 01                	jmp    f010df5e <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010df5d:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010df5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df61:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010df64:	75 12                	jne    f010df78 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010df66:	83 ec 0c             	sub    $0xc,%esp
f010df69:	68 1c 3f 13 f0       	push   $0xf0133f1c
f010df6e:	e8 be 2e ff ff       	call   f0100e31 <cprintf>
f010df73:	83 c4 10             	add    $0x10,%esp
f010df76:	eb 17                	jmp    f010df8f <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010df78:	83 ec 04             	sub    $0x4,%esp
f010df7b:	68 55 3f 13 f0       	push   $0xf0133f55
f010df80:	68 94 00 00 00       	push   $0x94
f010df85:	68 6b 3f 13 f0       	push   $0xf0133f6b
f010df8a:	e8 21 22 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010df8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df94:	c9                   	leave  
f010df95:	c3                   	ret    

f010df96 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010df96:	55                   	push   %ebp
f010df97:	89 e5                	mov    %esp,%ebp
f010df99:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010df9c:	e8 7f 3e 00 00       	call   f0111e20 <TestAutoCompleteCommand>
f010dfa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010dfa4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfa9:	c9                   	leave  
f010dfaa:	c3                   	ret    

f010dfab <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010dfab:	55                   	push   %ebp
f010dfac:	89 e5                	mov    %esp,%ebp
f010dfae:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010dfb1:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dfb5:	74 1a                	je     f010dfd1 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010dfb7:	83 ec 0c             	sub    $0xc,%esp
f010dfba:	68 84 3f 13 f0       	push   $0xf0133f84
f010dfbf:	e8 6d 2e ff ff       	call   f0100e31 <cprintf>
f010dfc4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfc7:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfcc:	e9 2f 01 00 00       	jmp    f010e100 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010dfd1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfd4:	83 c0 04             	add    $0x4,%eax
f010dfd7:	8b 00                	mov    (%eax),%eax
f010dfd9:	83 ec 08             	sub    $0x8,%esp
f010dfdc:	68 c1 3f 13 f0       	push   $0xf0133fc1
f010dfe1:	50                   	push   %eax
f010dfe2:	e8 25 11 02 00       	call   f012f10c <strcmp>
f010dfe7:	83 c4 10             	add    $0x10,%esp
f010dfea:	85 c0                	test   %eax,%eax
f010dfec:	75 0a                	jne    f010dff8 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010dfee:	e8 80 06 00 00       	call   f010e673 <test_initialize_dynamic_allocator>
f010dff3:	e9 03 01 00 00       	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010dff8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dffb:	83 c0 04             	add    $0x4,%eax
f010dffe:	8b 00                	mov    (%eax),%eax
f010e000:	83 ec 08             	sub    $0x8,%esp
f010e003:	68 c6 3f 13 f0       	push   $0xf0133fc6
f010e008:	50                   	push   %eax
f010e009:	e8 fe 10 02 00       	call   f012f10c <strcmp>
f010e00e:	83 c4 10             	add    $0x10,%esp
f010e011:	85 c0                	test   %eax,%eax
f010e013:	75 0a                	jne    f010e01f <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010e015:	e8 a1 0a 00 00       	call   f010eabb <test_alloc_block_FF>
f010e01a:	e9 dc 00 00 00       	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010e01f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e022:	83 c0 04             	add    $0x4,%eax
f010e025:	8b 00                	mov    (%eax),%eax
f010e027:	83 ec 08             	sub    $0x8,%esp
f010e02a:	68 ce 3f 13 f0       	push   $0xf0133fce
f010e02f:	50                   	push   %eax
f010e030:	e8 d7 10 02 00       	call   f012f10c <strcmp>
f010e035:	83 c4 10             	add    $0x10,%esp
f010e038:	85 c0                	test   %eax,%eax
f010e03a:	75 0a                	jne    f010e046 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010e03c:	e8 84 0e 00 00       	call   f010eec5 <test_alloc_block_BF>
f010e041:	e9 b5 00 00 00       	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010e046:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e049:	83 c0 04             	add    $0x4,%eax
f010e04c:	8b 00                	mov    (%eax),%eax
f010e04e:	83 ec 08             	sub    $0x8,%esp
f010e051:	68 d6 3f 13 f0       	push   $0xf0133fd6
f010e056:	50                   	push   %eax
f010e057:	e8 b0 10 02 00       	call   f012f10c <strcmp>
f010e05c:	83 c4 10             	add    $0x10,%esp
f010e05f:	85 c0                	test   %eax,%eax
f010e061:	75 0a                	jne    f010e06d <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010e063:	e8 b3 12 00 00       	call   f010f31b <test_alloc_block_NF>
f010e068:	e9 8e 00 00 00       	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010e06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e070:	83 c0 04             	add    $0x4,%eax
f010e073:	8b 00                	mov    (%eax),%eax
f010e075:	83 ec 08             	sub    $0x8,%esp
f010e078:	68 de 3f 13 f0       	push   $0xf0133fde
f010e07d:	50                   	push   %eax
f010e07e:	e8 89 10 02 00       	call   f012f10c <strcmp>
f010e083:	83 c4 10             	add    $0x10,%esp
f010e086:	85 c0                	test   %eax,%eax
f010e088:	75 07                	jne    f010e091 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010e08a:	e8 92 12 00 00       	call   f010f321 <test_free_block_FF>
f010e08f:	eb 6a                	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010e091:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e094:	83 c0 04             	add    $0x4,%eax
f010e097:	8b 00                	mov    (%eax),%eax
f010e099:	83 ec 08             	sub    $0x8,%esp
f010e09c:	68 e5 3f 13 f0       	push   $0xf0133fe5
f010e0a1:	50                   	push   %eax
f010e0a2:	e8 65 10 02 00       	call   f012f10c <strcmp>
f010e0a7:	83 c4 10             	add    $0x10,%esp
f010e0aa:	85 c0                	test   %eax,%eax
f010e0ac:	75 07                	jne    f010e0b5 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010e0ae:	e8 d3 20 00 00       	call   f0110186 <test_free_block_BF>
f010e0b3:	eb 46                	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010e0b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0b8:	83 c0 04             	add    $0x4,%eax
f010e0bb:	8b 00                	mov    (%eax),%eax
f010e0bd:	83 ec 08             	sub    $0x8,%esp
f010e0c0:	68 ec 3f 13 f0       	push   $0xf0133fec
f010e0c5:	50                   	push   %eax
f010e0c6:	e8 41 10 02 00       	call   f012f10c <strcmp>
f010e0cb:	83 c4 10             	add    $0x10,%esp
f010e0ce:	85 c0                	test   %eax,%eax
f010e0d0:	75 07                	jne    f010e0d9 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010e0d2:	e8 c1 2e 00 00       	call   f0110f98 <test_free_block_NF>
f010e0d7:	eb 22                	jmp    f010e0fb <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010e0d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0dc:	83 c0 04             	add    $0x4,%eax
f010e0df:	8b 00                	mov    (%eax),%eax
f010e0e1:	83 ec 08             	sub    $0x8,%esp
f010e0e4:	68 f3 3f 13 f0       	push   $0xf0133ff3
f010e0e9:	50                   	push   %eax
f010e0ea:	e8 1d 10 02 00       	call   f012f10c <strcmp>
f010e0ef:	83 c4 10             	add    $0x10,%esp
f010e0f2:	85 c0                	test   %eax,%eax
f010e0f4:	75 05                	jne    f010e0fb <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010e0f6:	e8 a6 2f 00 00       	call   f01110a1 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010e0fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e100:	c9                   	leave  
f010e101:	c3                   	ret    

f010e102 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010e102:	55                   	push   %ebp
f010e103:	89 e5                	mov    %esp,%ebp
f010e105:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e108:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e10c:	74 1a                	je     f010e128 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010e10e:	83 ec 0c             	sub    $0xc,%esp
f010e111:	68 00 40 13 f0       	push   $0xf0134000
f010e116:	e8 16 2d ff ff       	call   f0100e31 <cprintf>
f010e11b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e11e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e123:	e9 e1 00 00 00       	jmp    f010e209 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010e128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e12b:	83 c0 04             	add    $0x4,%eax
f010e12e:	8b 00                	mov    (%eax),%eax
f010e130:	83 ec 08             	sub    $0x8,%esp
f010e133:	68 39 40 13 f0       	push   $0xf0134039
f010e138:	50                   	push   %eax
f010e139:	e8 ce 0f 02 00       	call   f012f10c <strcmp>
f010e13e:	83 c4 10             	add    $0x10,%esp
f010e141:	85 c0                	test   %eax,%eax
f010e143:	75 0a                	jne    f010e14f <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010e145:	e8 dc 43 00 00       	call   f0112526 <test_cut_paste_pages>
f010e14a:	e9 b5 00 00 00       	jmp    f010e204 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010e14f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e152:	83 c0 04             	add    $0x4,%eax
f010e155:	8b 00                	mov    (%eax),%eax
f010e157:	83 ec 08             	sub    $0x8,%esp
f010e15a:	68 42 40 13 f0       	push   $0xf0134042
f010e15f:	50                   	push   %eax
f010e160:	e8 a7 0f 02 00       	call   f012f10c <strcmp>
f010e165:	83 c4 10             	add    $0x10,%esp
f010e168:	85 c0                	test   %eax,%eax
f010e16a:	75 0a                	jne    f010e176 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e16c:	e8 06 4e 00 00       	call   f0112f77 <test_copy_paste_chunk>
f010e171:	e9 8e 00 00 00       	jmp    f010e204 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e176:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e179:	83 c0 04             	add    $0x4,%eax
f010e17c:	8b 00                	mov    (%eax),%eax
f010e17e:	83 ec 08             	sub    $0x8,%esp
f010e181:	68 4c 40 13 f0       	push   $0xf013404c
f010e186:	50                   	push   %eax
f010e187:	e8 80 0f 02 00       	call   f012f10c <strcmp>
f010e18c:	83 c4 10             	add    $0x10,%esp
f010e18f:	85 c0                	test   %eax,%eax
f010e191:	75 07                	jne    f010e19a <tst_chunks+0x98>
	{
		test_share_chunk();
f010e193:	e8 e3 5e 00 00       	call   f011407b <test_share_chunk>
f010e198:	eb 6a                	jmp    f010e204 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e19a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e19d:	83 c0 04             	add    $0x4,%eax
f010e1a0:	8b 00                	mov    (%eax),%eax
f010e1a2:	83 ec 08             	sub    $0x8,%esp
f010e1a5:	68 52 40 13 f0       	push   $0xf0134052
f010e1aa:	50                   	push   %eax
f010e1ab:	e8 5c 0f 02 00       	call   f012f10c <strcmp>
f010e1b0:	83 c4 10             	add    $0x10,%esp
f010e1b3:	85 c0                	test   %eax,%eax
f010e1b5:	75 07                	jne    f010e1be <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e1b7:	e8 ed 68 00 00       	call   f0114aa9 <test_allocate_chunk>
f010e1bc:	eb 46                	jmp    f010e204 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e1be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1c1:	83 c0 04             	add    $0x4,%eax
f010e1c4:	8b 00                	mov    (%eax),%eax
f010e1c6:	83 ec 08             	sub    $0x8,%esp
f010e1c9:	68 5b 40 13 f0       	push   $0xf013405b
f010e1ce:	50                   	push   %eax
f010e1cf:	e8 38 0f 02 00       	call   f012f10c <strcmp>
f010e1d4:	83 c4 10             	add    $0x10,%esp
f010e1d7:	85 c0                	test   %eax,%eax
f010e1d9:	75 07                	jne    f010e1e2 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e1db:	e8 d6 71 00 00       	call   f01153b6 <test_calculate_required_frames>
f010e1e0:	eb 22                	jmp    f010e204 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e1e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e5:	83 c0 04             	add    $0x4,%eax
f010e1e8:	8b 00                	mov    (%eax),%eax
f010e1ea:	83 ec 08             	sub    $0x8,%esp
f010e1ed:	68 6a 40 13 f0       	push   $0xf013406a
f010e1f2:	50                   	push   %eax
f010e1f3:	e8 14 0f 02 00       	call   f012f10c <strcmp>
f010e1f8:	83 c4 10             	add    $0x10,%esp
f010e1fb:	85 c0                	test   %eax,%eax
f010e1fd:	75 05                	jne    f010e204 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e1ff:	e8 2c 7a 00 00       	call   f0115c30 <test_calculate_allocated_space>
	}
	return 0;
f010e204:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e209:	c9                   	leave  
f010e20a:	c3                   	ret    

f010e20b <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e20b:	55                   	push   %ebp
f010e20c:	89 e5                	mov    %esp,%ebp
f010e20e:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e211:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e215:	74 1a                	je     f010e231 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e217:	83 ec 0c             	sub    $0xc,%esp
f010e21a:	68 7c 40 13 f0       	push   $0xf013407c
f010e21f:	e8 0d 2c ff ff       	call   f0100e31 <cprintf>
f010e224:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e227:	b8 00 00 00 00       	mov    $0x0,%eax
f010e22c:	e9 ba 00 00 00       	jmp    f010e2eb <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e231:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e234:	83 c0 04             	add    $0x4,%eax
f010e237:	8b 00                	mov    (%eax),%eax
f010e239:	83 ec 08             	sub    $0x8,%esp
f010e23c:	68 b2 40 13 f0       	push   $0xf01340b2
f010e241:	50                   	push   %eax
f010e242:	e8 c5 0e 02 00       	call   f012f10c <strcmp>
f010e247:	83 c4 10             	add    $0x10,%esp
f010e24a:	85 c0                	test   %eax,%eax
f010e24c:	75 0a                	jne    f010e258 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e24e:	e8 52 3d 00 00       	call   f0111fa5 <test_pt_set_page_permissions>
f010e253:	e9 8e 00 00 00       	jmp    f010e2e6 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e258:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e25b:	83 c0 04             	add    $0x4,%eax
f010e25e:	8b 00                	mov    (%eax),%eax
f010e260:	83 ec 08             	sub    $0x8,%esp
f010e263:	68 ba 40 13 f0       	push   $0xf01340ba
f010e268:	50                   	push   %eax
f010e269:	e8 9e 0e 02 00       	call   f012f10c <strcmp>
f010e26e:	83 c4 10             	add    $0x10,%esp
f010e271:	85 c0                	test   %eax,%eax
f010e273:	75 07                	jne    f010e27c <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e275:	e8 8e 3f 00 00       	call   f0112208 <test_pt_set_page_permissions_invalid_va>
f010e27a:	eb 6a                	jmp    f010e2e6 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e27c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e27f:	83 c0 04             	add    $0x4,%eax
f010e282:	8b 00                	mov    (%eax),%eax
f010e284:	83 ec 08             	sub    $0x8,%esp
f010e287:	68 c2 40 13 f0       	push   $0xf01340c2
f010e28c:	50                   	push   %eax
f010e28d:	e8 7a 0e 02 00       	call   f012f10c <strcmp>
f010e292:	83 c4 10             	add    $0x10,%esp
f010e295:	85 c0                	test   %eax,%eax
f010e297:	75 07                	jne    f010e2a0 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e299:	e8 b3 3f 00 00       	call   f0112251 <test_pt_get_page_permissions>
f010e29e:	eb 46                	jmp    f010e2e6 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e2a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2a3:	83 c0 04             	add    $0x4,%eax
f010e2a6:	8b 00                	mov    (%eax),%eax
f010e2a8:	83 ec 08             	sub    $0x8,%esp
f010e2ab:	68 ca 40 13 f0       	push   $0xf01340ca
f010e2b0:	50                   	push   %eax
f010e2b1:	e8 56 0e 02 00       	call   f012f10c <strcmp>
f010e2b6:	83 c4 10             	add    $0x10,%esp
f010e2b9:	85 c0                	test   %eax,%eax
f010e2bb:	75 07                	jne    f010e2c4 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e2bd:	e8 d3 40 00 00       	call   f0112395 <test_pt_clear_page_table_entry>
f010e2c2:	eb 22                	jmp    f010e2e6 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e2c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2c7:	83 c0 04             	add    $0x4,%eax
f010e2ca:	8b 00                	mov    (%eax),%eax
f010e2cc:	83 ec 08             	sub    $0x8,%esp
f010e2cf:	68 d1 40 13 f0       	push   $0xf01340d1
f010e2d4:	50                   	push   %eax
f010e2d5:	e8 32 0e 02 00       	call   f012f10c <strcmp>
f010e2da:	83 c4 10             	add    $0x10,%esp
f010e2dd:	85 c0                	test   %eax,%eax
f010e2df:	75 05                	jne    f010e2e6 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e2e1:	e8 08 42 00 00       	call   f01124ee <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e2e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2eb:	c9                   	leave  
f010e2ec:	c3                   	ret    

f010e2ed <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e2ed:	55                   	push   %ebp
f010e2ee:	89 e5                	mov    %esp,%ebp
f010e2f0:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e2f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2f6:	83 c0 08             	add    $0x8,%eax
f010e2f9:	8b 00                	mov    (%eax),%eax
f010e2fb:	83 ec 08             	sub    $0x8,%esp
f010e2fe:	68 d8 40 13 f0       	push   $0xf01340d8
f010e303:	50                   	push   %eax
f010e304:	e8 03 0e 02 00       	call   f012f10c <strcmp>
f010e309:	83 c4 10             	add    $0x10,%esp
f010e30c:	85 c0                	test   %eax,%eax
f010e30e:	75 20                	jne    f010e330 <tst_kheap+0x43>
f010e310:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e314:	74 1a                	je     f010e330 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e316:	83 ec 0c             	sub    $0xc,%esp
f010e319:	68 e0 40 13 f0       	push   $0xf01340e0
f010e31e:	e8 0e 2b ff ff       	call   f0100e31 <cprintf>
f010e323:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e326:	b8 00 00 00 00       	mov    $0x0,%eax
f010e32b:	e9 41 03 00 00       	jmp    f010e671 <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e330:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e333:	83 c0 08             	add    $0x8,%eax
f010e336:	8b 00                	mov    (%eax),%eax
f010e338:	83 ec 08             	sub    $0x8,%esp
f010e33b:	68 d8 40 13 f0       	push   $0xf01340d8
f010e340:	50                   	push   %eax
f010e341:	e8 c6 0d 02 00       	call   f012f10c <strcmp>
f010e346:	83 c4 10             	add    $0x10,%esp
f010e349:	85 c0                	test   %eax,%eax
f010e34b:	74 20                	je     f010e36d <tst_kheap+0x80>
f010e34d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e351:	74 1a                	je     f010e36d <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e353:	83 ec 0c             	sub    $0xc,%esp
f010e356:	68 30 41 13 f0       	push   $0xf0134130
f010e35b:	e8 d1 2a ff ff       	call   f0100e31 <cprintf>
f010e360:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e363:	b8 00 00 00 00       	mov    $0x0,%eax
f010e368:	e9 04 03 00 00       	jmp    f010e671 <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e36d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e370:	83 c0 04             	add    $0x4,%eax
f010e373:	8b 00                	mov    (%eax),%eax
f010e375:	83 ec 08             	sub    $0x8,%esp
f010e378:	68 75 41 13 f0       	push   $0xf0134175
f010e37d:	50                   	push   %eax
f010e37e:	e8 89 0d 02 00       	call   f012f10c <strcmp>
f010e383:	83 c4 10             	add    $0x10,%esp
f010e386:	85 c0                	test   %eax,%eax
f010e388:	74 1d                	je     f010e3a7 <tst_kheap+0xba>
f010e38a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e38d:	83 c0 04             	add    $0x4,%eax
f010e390:	8b 00                	mov    (%eax),%eax
f010e392:	83 ec 08             	sub    $0x8,%esp
f010e395:	68 78 41 13 f0       	push   $0xf0134178
f010e39a:	50                   	push   %eax
f010e39b:	e8 6c 0d 02 00       	call   f012f10c <strcmp>
f010e3a0:	83 c4 10             	add    $0x10,%esp
f010e3a3:	85 c0                	test   %eax,%eax
f010e3a5:	75 1a                	jne    f010e3c1 <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e3a7:	e8 49 f9 ff ff       	call   f010dcf5 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e3ac:	83 ec 0c             	sub    $0xc,%esp
f010e3af:	68 7c 41 13 f0       	push   $0xf013417c
f010e3b4:	e8 78 2a ff ff       	call   f0100e31 <cprintf>
f010e3b9:	83 c4 10             	add    $0x10,%esp
f010e3bc:	e9 a0 00 00 00       	jmp    f010e461 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e3c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3c4:	83 c0 04             	add    $0x4,%eax
f010e3c7:	8b 00                	mov    (%eax),%eax
f010e3c9:	83 ec 08             	sub    $0x8,%esp
f010e3cc:	68 a9 41 13 f0       	push   $0xf01341a9
f010e3d1:	50                   	push   %eax
f010e3d2:	e8 35 0d 02 00       	call   f012f10c <strcmp>
f010e3d7:	83 c4 10             	add    $0x10,%esp
f010e3da:	85 c0                	test   %eax,%eax
f010e3dc:	74 1d                	je     f010e3fb <tst_kheap+0x10e>
f010e3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3e1:	83 c0 04             	add    $0x4,%eax
f010e3e4:	8b 00                	mov    (%eax),%eax
f010e3e6:	83 ec 08             	sub    $0x8,%esp
f010e3e9:	68 ac 41 13 f0       	push   $0xf01341ac
f010e3ee:	50                   	push   %eax
f010e3ef:	e8 18 0d 02 00       	call   f012f10c <strcmp>
f010e3f4:	83 c4 10             	add    $0x10,%esp
f010e3f7:	85 c0                	test   %eax,%eax
f010e3f9:	75 17                	jne    f010e412 <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e3fb:	e8 05 f9 ff ff       	call   f010dd05 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e400:	83 ec 0c             	sub    $0xc,%esp
f010e403:	68 b0 41 13 f0       	push   $0xf01341b0
f010e408:	e8 24 2a ff ff       	call   f0100e31 <cprintf>
f010e40d:	83 c4 10             	add    $0x10,%esp
f010e410:	eb 4f                	jmp    f010e461 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e412:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e415:	83 c0 04             	add    $0x4,%eax
f010e418:	8b 00                	mov    (%eax),%eax
f010e41a:	83 ec 08             	sub    $0x8,%esp
f010e41d:	68 dc 41 13 f0       	push   $0xf01341dc
f010e422:	50                   	push   %eax
f010e423:	e8 e4 0c 02 00       	call   f012f10c <strcmp>
f010e428:	83 c4 10             	add    $0x10,%esp
f010e42b:	85 c0                	test   %eax,%eax
f010e42d:	74 1d                	je     f010e44c <tst_kheap+0x15f>
f010e42f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e432:	83 c0 04             	add    $0x4,%eax
f010e435:	8b 00                	mov    (%eax),%eax
f010e437:	83 ec 08             	sub    $0x8,%esp
f010e43a:	68 df 41 13 f0       	push   $0xf01341df
f010e43f:	50                   	push   %eax
f010e440:	e8 c7 0c 02 00       	call   f012f10c <strcmp>
f010e445:	83 c4 10             	add    $0x10,%esp
f010e448:	85 c0                	test   %eax,%eax
f010e44a:	75 15                	jne    f010e461 <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e44c:	e8 c4 f8 ff ff       	call   f010dd15 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e451:	83 ec 0c             	sub    $0xc,%esp
f010e454:	68 e4 41 13 f0       	push   $0xf01341e4
f010e459:	e8 d3 29 ff ff       	call   f0100e31 <cprintf>
f010e45e:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e461:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e464:	83 c0 08             	add    $0x8,%eax
f010e467:	8b 00                	mov    (%eax),%eax
f010e469:	83 ec 08             	sub    $0x8,%esp
f010e46c:	68 d8 40 13 f0       	push   $0xf01340d8
f010e471:	50                   	push   %eax
f010e472:	e8 95 0c 02 00       	call   f012f10c <strcmp>
f010e477:	83 c4 10             	add    $0x10,%esp
f010e47a:	85 c0                	test   %eax,%eax
f010e47c:	0f 85 13 01 00 00    	jne    f010e595 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e482:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e485:	83 c0 0c             	add    $0xc,%eax
f010e488:	8b 00                	mov    (%eax),%eax
f010e48a:	83 ec 04             	sub    $0x4,%esp
f010e48d:	6a 0a                	push   $0xa
f010e48f:	6a 00                	push   $0x0
f010e491:	50                   	push   %eax
f010e492:	e8 c9 0e 02 00       	call   f012f360 <strtol>
f010e497:	83 c4 10             	add    $0x10,%esp
f010e49a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e49d:	e8 83 f8 ff ff       	call   f010dd25 <isKHeapPlacementStrategyFIRSTFIT>
f010e4a2:	84 c0                	test   %al,%al
f010e4a4:	74 54                	je     f010e4fa <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e4a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e4aa:	75 1a                	jne    f010e4c6 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e4ac:	83 ec 0c             	sub    $0xc,%esp
f010e4af:	68 10 42 13 f0       	push   $0xf0134210
f010e4b4:	e8 78 29 ff ff       	call   f0100e31 <cprintf>
f010e4b9:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e4bc:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4c1:	e9 ab 01 00 00       	jmp    f010e671 <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e4c6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e4ca:	75 0a                	jne    f010e4d6 <tst_kheap+0x1e9>
				test_kmalloc();
f010e4cc:	e8 58 a1 00 00       	call   f0118629 <test_kmalloc>
f010e4d1:	e9 b5 00 00 00       	jmp    f010e58b <tst_kheap+0x29e>
			else if (testNum == 2)
f010e4d6:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e4da:	75 0a                	jne    f010e4e6 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e4dc:	e8 95 e3 00 00       	call   f011c876 <test_kmalloc_firstfit1>
f010e4e1:	e9 a5 00 00 00       	jmp    f010e58b <tst_kheap+0x29e>
			else if (testNum == 3)
f010e4e6:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e4ea:	0f 85 9b 00 00 00    	jne    f010e58b <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e4f0:	e8 2f f4 00 00       	call   f011d924 <test_kmalloc_firstfit2>
f010e4f5:	e9 91 00 00 00       	jmp    f010e58b <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e4fa:	e8 3b f8 ff ff       	call   f010dd3a <isKHeapPlacementStrategyBESTFIT>
f010e4ff:	84 c0                	test   %al,%al
f010e501:	74 47                	je     f010e54a <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e503:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e507:	75 1a                	jne    f010e523 <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e509:	83 ec 0c             	sub    $0xc,%esp
f010e50c:	68 60 42 13 f0       	push   $0xf0134260
f010e511:	e8 1b 29 ff ff       	call   f0100e31 <cprintf>
f010e516:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e519:	b8 00 00 00 00       	mov    $0x0,%eax
f010e51e:	e9 4e 01 00 00       	jmp    f010e671 <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e523:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e527:	75 07                	jne    f010e530 <tst_kheap+0x243>
				test_kmalloc();
f010e529:	e8 fb a0 00 00       	call   f0118629 <test_kmalloc>
f010e52e:	eb 5b                	jmp    f010e58b <tst_kheap+0x29e>
			else if (testNum == 2)
f010e530:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e534:	75 07                	jne    f010e53d <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e536:	e8 b7 c3 00 00       	call   f011a8f2 <test_kmalloc_bestfit1>
f010e53b:	eb 4e                	jmp    f010e58b <tst_kheap+0x29e>
			else if (testNum == 3)
f010e53d:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e541:	75 48                	jne    f010e58b <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e543:	e8 42 d3 00 00       	call   f011b88a <test_kmalloc_bestfit2>
f010e548:	eb 41                	jmp    f010e58b <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e54a:	e8 00 f8 ff ff       	call   f010dd4f <isKHeapPlacementStrategyNEXTFIT>
f010e54f:	84 c0                	test   %al,%al
f010e551:	74 38                	je     f010e58b <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e553:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e557:	75 1a                	jne    f010e573 <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e559:	83 ec 0c             	sub    $0xc,%esp
f010e55c:	68 b0 42 13 f0       	push   $0xf01342b0
f010e561:	e8 cb 28 ff ff       	call   f0100e31 <cprintf>
f010e566:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e569:	b8 00 00 00 00       	mov    $0x0,%eax
f010e56e:	e9 fe 00 00 00       	jmp    f010e671 <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e573:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e577:	75 07                	jne    f010e580 <tst_kheap+0x293>
				test_kmalloc();
f010e579:	e8 ab a0 00 00       	call   f0118629 <test_kmalloc>
f010e57e:	eb 0b                	jmp    f010e58b <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e580:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e584:	75 05                	jne    f010e58b <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e586:	e8 aa b0 00 00       	call   f0119635 <test_kmalloc_nextfit>
		}
		return 0;
f010e58b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e590:	e9 dc 00 00 00       	jmp    f010e671 <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e595:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e598:	83 c0 08             	add    $0x8,%eax
f010e59b:	8b 00                	mov    (%eax),%eax
f010e59d:	83 ec 08             	sub    $0x8,%esp
f010e5a0:	68 fe 42 13 f0       	push   $0xf01342fe
f010e5a5:	50                   	push   %eax
f010e5a6:	e8 61 0b 02 00       	call   f012f10c <strcmp>
f010e5ab:	83 c4 10             	add    $0x10,%esp
f010e5ae:	85 c0                	test   %eax,%eax
f010e5b0:	75 28                	jne    f010e5da <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e5b2:	e8 83 f7 ff ff       	call   f010dd3a <isKHeapPlacementStrategyBESTFIT>
f010e5b7:	84 c0                	test   %al,%al
f010e5b9:	75 09                	jne    f010e5c4 <tst_kheap+0x2d7>
f010e5bb:	e8 65 f7 ff ff       	call   f010dd25 <isKHeapPlacementStrategyFIRSTFIT>
f010e5c0:	84 c0                	test   %al,%al
f010e5c2:	74 07                	je     f010e5cb <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e5c4:	e8 14 30 01 00       	call   f01215dd <test_kfree_bestfirstfit>
f010e5c9:	eb 05                	jmp    f010e5d0 <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e5cb:	e8 1b 12 01 00       	call   f011f7eb <test_kfree>
		}
		return 0;
f010e5d0:	b8 00 00 00 00       	mov    $0x0,%eax
f010e5d5:	e9 97 00 00 00       	jmp    f010e671 <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e5da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5dd:	83 c0 08             	add    $0x8,%eax
f010e5e0:	8b 00                	mov    (%eax),%eax
f010e5e2:	83 ec 08             	sub    $0x8,%esp
f010e5e5:	68 04 43 13 f0       	push   $0xf0134304
f010e5ea:	50                   	push   %eax
f010e5eb:	e8 1c 0b 02 00       	call   f012f10c <strcmp>
f010e5f0:	83 c4 10             	add    $0x10,%esp
f010e5f3:	85 c0                	test   %eax,%eax
f010e5f5:	75 0c                	jne    f010e603 <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e5f7:	e8 8b 47 01 00       	call   f0122d87 <test_kheap_phys_addr>
		return 0;
f010e5fc:	b8 00 00 00 00       	mov    $0x0,%eax
f010e601:	eb 6e                	jmp    f010e671 <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e603:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e606:	83 c0 08             	add    $0x8,%eax
f010e609:	8b 00                	mov    (%eax),%eax
f010e60b:	83 ec 08             	sub    $0x8,%esp
f010e60e:	68 0e 43 13 f0       	push   $0xf013430e
f010e613:	50                   	push   %eax
f010e614:	e8 f3 0a 02 00       	call   f012f10c <strcmp>
f010e619:	83 c4 10             	add    $0x10,%esp
f010e61c:	85 c0                	test   %eax,%eax
f010e61e:	75 0c                	jne    f010e62c <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e620:	e8 a0 58 01 00       	call   f0123ec5 <test_kheap_virt_addr>
		return 0;
f010e625:	b8 00 00 00 00       	mov    $0x0,%eax
f010e62a:	eb 45                	jmp    f010e671 <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e62c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e62f:	83 c0 08             	add    $0x8,%eax
f010e632:	8b 00                	mov    (%eax),%eax
f010e634:	83 ec 08             	sub    $0x8,%esp
f010e637:	68 18 43 13 f0       	push   $0xf0134318
f010e63c:	50                   	push   %eax
f010e63d:	e8 ca 0a 02 00       	call   f012f10c <strcmp>
f010e642:	83 c4 10             	add    $0x10,%esp
f010e645:	85 c0                	test   %eax,%eax
f010e647:	75 23                	jne    f010e66c <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e649:	e8 01 f7 ff ff       	call   f010dd4f <isKHeapPlacementStrategyNEXTFIT>
f010e64e:	84 c0                	test   %al,%al
f010e650:	74 05                	je     f010e657 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e652:	e8 11 ba 01 00       	call   f012a068 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e657:	e8 de f6 ff ff       	call   f010dd3a <isKHeapPlacementStrategyBESTFIT>
f010e65c:	84 c0                	test   %al,%al
f010e65e:	74 05                	je     f010e665 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e660:	e8 97 d7 01 00       	call   f012bdfc <test_krealloc_BF>
		}
		return 0;
f010e665:	b8 00 00 00 00       	mov    $0x0,%eax
f010e66a:	eb 05                	jmp    f010e671 <tst_kheap+0x384>
	}
	return 0;
f010e66c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e671:	c9                   	leave  
f010e672:	c3                   	ret    

f010e673 <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e673:	55                   	push   %ebp
f010e674:	89 e5                	mov    %esp,%ebp
f010e676:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e679:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e683:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e68c:	83 c0 04             	add    $0x4,%eax
f010e68f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e695:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e69c:	83 ec 08             	sub    $0x8,%esp
f010e69f:	ff 75 f0             	pushl  -0x10(%ebp)
f010e6a2:	68 00 00 00 f6       	push   $0xf6000000
f010e6a7:	e8 d5 14 02 00       	call   f012fb81 <initialize_dynamic_allocator>
f010e6ac:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e6af:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e6b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6b9:	8a 40 04             	mov    0x4(%eax),%al
f010e6bc:	3c 01                	cmp    $0x1,%al
f010e6be:	75 0a                	jne    f010e6ca <test_initialize_dynamic_allocator+0x57>
f010e6c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6c3:	8b 00                	mov    (%eax),%eax
f010e6c5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e6c8:	74 14                	je     f010e6de <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e6ca:	83 ec 04             	sub    $0x4,%esp
f010e6cd:	68 24 43 13 f0       	push   $0xf0134324
f010e6d2:	6a 29                	push   $0x29
f010e6d4:	68 50 43 13 f0       	push   $0xf0134350
f010e6d9:	e8 d2 1a ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e6de:	83 ec 0c             	sub    $0xc,%esp
f010e6e1:	68 74 43 13 f0       	push   $0xf0134374
f010e6e6:	e8 46 27 ff ff       	call   f0100e31 <cprintf>
f010e6eb:	83 c4 10             	add    $0x10,%esp
}
f010e6ee:	90                   	nop
f010e6ef:	c9                   	leave  
f010e6f0:	c3                   	ret    

f010e6f1 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e6f1:	55                   	push   %ebp
f010e6f2:	89 e5                	mov    %esp,%ebp
f010e6f4:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e6f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e6fe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e705:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e70c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e70f:	83 ec 08             	sub    $0x8,%esp
f010e712:	50                   	push   %eax
f010e713:	68 00 00 00 f6       	push   $0xf6000000
f010e718:	e8 64 14 02 00       	call   f012fb81 <initialize_dynamic_allocator>
f010e71d:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e720:	83 ec 0c             	sub    $0xc,%esp
f010e723:	68 c4 43 13 f0       	push   $0xf01343c4
f010e728:	e8 04 27 ff ff       	call   f0100e31 <cprintf>
f010e72d:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e730:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e737:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e73a:	89 c2                	mov    %eax,%edx
f010e73c:	01 d2                	add    %edx,%edx
f010e73e:	01 d0                	add    %edx,%eax
f010e740:	83 ec 08             	sub    $0x8,%esp
f010e743:	ff 75 08             	pushl  0x8(%ebp)
f010e746:	50                   	push   %eax
f010e747:	e8 1c 13 02 00       	call   f012fa68 <alloc_block>
f010e74c:	83 c4 10             	add    $0x10,%esp
f010e74f:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e752:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e756:	74 17                	je     f010e76f <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e758:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e75f:	83 ec 0c             	sub    $0xc,%esp
f010e762:	68 00 44 13 f0       	push   $0xf0134400
f010e767:	e8 c5 26 ff ff       	call   f0100e31 <cprintf>
f010e76c:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e76f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e772:	83 ec 08             	sub    $0x8,%esp
f010e775:	ff 75 08             	pushl  0x8(%ebp)
f010e778:	50                   	push   %eax
f010e779:	e8 ea 12 02 00       	call   f012fa68 <alloc_block>
f010e77e:	83 c4 10             	add    $0x10,%esp
f010e781:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e784:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e788:	74 17                	je     f010e7a1 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e78a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e791:	83 ec 0c             	sub    $0xc,%esp
f010e794:	68 58 44 13 f0       	push   $0xf0134458
f010e799:	e8 93 26 ff ff       	call   f0100e31 <cprintf>
f010e79e:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e7a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e7a5:	74 04                	je     f010e7ab <test_initial_alloc+0xba>
	{
		eval += 5;
f010e7a7:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e7ab:	83 ec 0c             	sub    $0xc,%esp
f010e7ae:	68 b0 44 13 f0       	push   $0xf01344b0
f010e7b3:	e8 79 26 ff ff       	call   f0100e31 <cprintf>
f010e7b8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e7bb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e7c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e7c9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e7d0:	eb 2a                	jmp    f010e7fc <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e7d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e7d5:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f010e7dc:	89 d0                	mov    %edx,%eax
f010e7de:	c1 e0 02             	shl    $0x2,%eax
f010e7e1:	01 d0                	add    %edx,%eax
f010e7e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e7ea:	01 d0                	add    %edx,%eax
f010e7ec:	c1 e0 03             	shl    $0x3,%eax
f010e7ef:	89 c2                	mov    %eax,%edx
f010e7f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e7f4:	01 d0                	add    %edx,%eax
f010e7f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e7f9:	ff 45 e8             	incl   -0x18(%ebp)
f010e7fc:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e800:	7e d0                	jle    f010e7d2 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e802:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e805:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e808:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e80b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e80f:	7f 17                	jg     f010e828 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e811:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e818:	83 ec 0c             	sub    $0xc,%esp
f010e81b:	68 fc 44 13 f0       	push   $0xf01344fc
f010e820:	e8 0c 26 ff ff       	call   f0100e31 <cprintf>
f010e825:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e828:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e82f:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e836:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e83d:	e9 fc 00 00 00       	jmp    f010e93e <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e842:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e849:	e9 e0 00 00 00       	jmp    f010e92e <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e84e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e851:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010e858:	83 e8 10             	sub    $0x10,%eax
f010e85b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e85e:	83 ec 08             	sub    $0x8,%esp
f010e861:	ff 75 08             	pushl  0x8(%ebp)
f010e864:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e867:	e8 fc 11 02 00       	call   f012fa68 <alloc_block>
f010e86c:	83 c4 10             	add    $0x10,%esp
f010e86f:	89 c2                	mov    %eax,%edx
f010e871:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e874:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010e87b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e87e:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010e885:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e888:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e88b:	d1 e8                	shr    %eax
f010e88d:	89 c2                	mov    %eax,%edx
f010e88f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e892:	01 c2                	add    %eax,%edx
f010e894:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e897:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e89e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8a1:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e8a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8a7:	01 c2                	add    %eax,%edx
f010e8a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8ac:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e8b3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e8b7:	74 0b                	je     f010e8c4 <test_initial_alloc+0x1d3>
f010e8b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8bc:	83 c0 10             	add    $0x10,%eax
f010e8bf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e8c2:	74 27                	je     f010e8eb <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e8c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e8c8:	74 21                	je     f010e8eb <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e8ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e8d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8d4:	83 c0 10             	add    $0x10,%eax
f010e8d7:	ff 75 cc             	pushl  -0x34(%ebp)
f010e8da:	50                   	push   %eax
f010e8db:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e8de:	68 78 45 13 f0       	push   $0xf0134578
f010e8e3:	e8 49 25 ff ff       	call   f0100e31 <cprintf>
f010e8e8:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e8eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8ee:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010e8f5:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e8f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8fb:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010e902:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e905:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e908:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e90b:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010e912:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e915:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e918:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e91b:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010e922:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e925:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e928:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e92b:	ff 45 d8             	incl   -0x28(%ebp)
f010e92e:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e935:	0f 8e 13 ff ff ff    	jle    f010e84e <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e93b:	ff 45 dc             	incl   -0x24(%ebp)
f010e93e:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e942:	0f 8e fa fe ff ff    	jle    f010e842 <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e948:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e94c:	74 04                	je     f010e952 <test_initial_alloc+0x261>
	{
		eval += 20;
f010e94e:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e952:	83 ec 0c             	sub    $0xc,%esp
f010e955:	68 dc 45 13 f0       	push   $0xf01345dc
f010e95a:	e8 d2 24 ff ff       	call   f0100e31 <cprintf>
f010e95f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e962:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e969:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e96c:	83 e8 10             	sub    $0x10,%eax
f010e96f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e972:	83 ec 08             	sub    $0x8,%esp
f010e975:	ff 75 08             	pushl  0x8(%ebp)
f010e978:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e97b:	e8 e8 10 02 00       	call   f012fa68 <alloc_block>
f010e980:	83 c4 10             	add    $0x10,%esp
f010e983:	89 c2                	mov    %eax,%edx
f010e985:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e988:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010e98f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e992:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010e999:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e99c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e99f:	d1 e8                	shr    %eax
f010e9a1:	89 c2                	mov    %eax,%edx
f010e9a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9a6:	01 c2                	add    %eax,%edx
f010e9a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9ab:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e9b2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e9b5:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e9b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e9bb:	01 c2                	add    %eax,%edx
f010e9bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9c0:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e9c7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e9cb:	74 0b                	je     f010e9d8 <test_initial_alloc+0x2e7>
f010e9cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9d0:	83 c0 10             	add    $0x10,%eax
f010e9d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e9d6:	74 17                	je     f010e9ef <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e9d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e9df:	83 ec 0c             	sub    $0xc,%esp
f010e9e2:	68 28 46 13 f0       	push   $0xf0134628
f010e9e7:	e8 45 24 ff ff       	call   f0100e31 <cprintf>
f010e9ec:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e9ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9f2:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010e9f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9fc:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e9ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea02:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010ea09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea0c:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010ea0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea12:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010ea19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea1c:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010ea1f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ea23:	74 04                	je     f010ea29 <test_initial_alloc+0x338>
	{
		eval += 5;
f010ea25:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ea29:	83 ec 0c             	sub    $0xc,%esp
f010ea2c:	68 70 46 13 f0       	push   $0xf0134670
f010ea31:	e8 fb 23 ff ff       	call   f0100e31 <cprintf>
f010ea36:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ea39:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010ea40:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ea47:	eb 5b                	jmp    f010eaa4 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010ea49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ea4c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010ea53:	66 8b 00             	mov    (%eax),%ax
f010ea56:	98                   	cwtl   
f010ea57:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ea5a:	75 26                	jne    f010ea82 <test_initial_alloc+0x391>
f010ea5c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ea5f:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f010ea66:	66 8b 00             	mov    (%eax),%ax
f010ea69:	98                   	cwtl   
f010ea6a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ea6d:	75 13                	jne    f010ea82 <test_initial_alloc+0x391>
f010ea6f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ea72:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f010ea79:	66 8b 00             	mov    (%eax),%ax
f010ea7c:	98                   	cwtl   
f010ea7d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ea80:	74 1f                	je     f010eaa1 <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010ea82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010ea89:	83 ec 04             	sub    $0x4,%esp
f010ea8c:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ea8f:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ea92:	68 a4 46 13 f0       	push   $0xf01346a4
f010ea97:	e8 95 23 ff ff       	call   f0100e31 <cprintf>
f010ea9c:	83 c4 10             	add    $0x10,%esp
			break;
f010ea9f:	eb 0b                	jmp    f010eaac <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010eaa1:	ff 45 d4             	incl   -0x2c(%ebp)
f010eaa4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eaa7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010eaaa:	7c 9d                	jl     f010ea49 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010eaac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eab0:	74 04                	je     f010eab6 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010eab2:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010eab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010eab9:	c9                   	leave  
f010eaba:	c3                   	ret    

f010eabb <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010eabb:	55                   	push   %ebp
f010eabc:	89 e5                	mov    %esp,%ebp
f010eabe:	57                   	push   %edi
f010eabf:	56                   	push   %esi
f010eac0:	53                   	push   %ebx
f010eac1:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010eac7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010eace:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ead5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010eadc:	83 ec 0c             	sub    $0xc,%esp
f010eadf:	68 f4 46 13 f0       	push   $0xf01346f4
f010eae4:	e8 48 23 ff ff       	call   f0100e31 <cprintf>
f010eae9:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010eaec:	83 ec 0c             	sub    $0xc,%esp
f010eaef:	68 30 47 13 f0       	push   $0xf0134730
f010eaf4:	e8 38 23 ff ff       	call   f0100e31 <cprintf>
f010eaf9:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010eafc:	83 ec 0c             	sub    $0xc,%esp
f010eaff:	68 f4 46 13 f0       	push   $0xf01346f4
f010eb04:	e8 28 23 ff ff       	call   f0100e31 <cprintf>
f010eb09:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010eb0c:	83 ec 0c             	sub    $0xc,%esp
f010eb0f:	6a 01                	push   $0x1
f010eb11:	e8 db fb ff ff       	call   f010e6f1 <test_initial_alloc>
f010eb16:	83 c4 10             	add    $0x10,%esp
f010eb19:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010eb1c:	83 ec 0c             	sub    $0xc,%esp
f010eb1f:	68 6c 47 13 f0       	push   $0xf013476c
f010eb24:	e8 08 23 ff ff       	call   f0100e31 <cprintf>
f010eb29:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010eb2c:	83 ec 0c             	sub    $0xc,%esp
f010eb2f:	68 a4 47 13 f0       	push   $0xf01347a4
f010eb34:	e8 f8 22 ff ff       	call   f0100e31 <cprintf>
f010eb39:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010eb3c:	83 ec 0c             	sub    $0xc,%esp
f010eb3f:	68 6c 47 13 f0       	push   $0xf013476c
f010eb44:	e8 e8 22 ff ff       	call   f0100e31 <cprintf>
f010eb49:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eb4c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010eb53:	eb 2c                	jmp    f010eb81 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010eb55:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010eb58:	89 d0                	mov    %edx,%eax
f010eb5a:	c1 e0 02             	shl    $0x2,%eax
f010eb5d:	01 d0                	add    %edx,%eax
f010eb5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010eb66:	01 d0                	add    %edx,%eax
f010eb68:	c1 e0 03             	shl    $0x3,%eax
f010eb6b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010eb72:	83 ec 0c             	sub    $0xc,%esp
f010eb75:	50                   	push   %eax
f010eb76:	e8 34 14 02 00       	call   f012ffaf <free_block>
f010eb7b:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eb7e:	ff 45 dc             	incl   -0x24(%ebp)
f010eb81:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010eb85:	7e ce                	jle    f010eb55 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010eb87:	83 ec 0c             	sub    $0xc,%esp
f010eb8a:	68 c4 43 13 f0       	push   $0xf01343c4
f010eb8f:	e8 9d 22 ff ff       	call   f0100e31 <cprintf>
f010eb94:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eb97:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eb9e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eba5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ebac:	eb 1f                	jmp    f010ebcd <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010ebae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ebb1:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010ebb8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ebbb:	76 0d                	jbe    f010ebca <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010ebbd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ebc0:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010ebc7:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ebca:	ff 45 d4             	incl   -0x2c(%ebp)
f010ebcd:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010ebd1:	7e db                	jle    f010ebae <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010ebd3:	83 ec 08             	sub    $0x8,%esp
f010ebd6:	6a 01                	push   $0x1
f010ebd8:	ff 75 d8             	pushl  -0x28(%ebp)
f010ebdb:	e8 88 0e 02 00       	call   f012fa68 <alloc_block>
f010ebe0:	83 c4 10             	add    $0x10,%esp
f010ebe3:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010ebe6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ebea:	74 17                	je     f010ec03 <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010ebec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010ebf3:	83 ec 0c             	sub    $0xc,%esp
f010ebf6:	68 dc 47 13 f0       	push   $0xf01347dc
f010ebfb:	e8 31 22 ff ff       	call   f0100e31 <cprintf>
f010ec00:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010ec03:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ec07:	74 04                	je     f010ec0d <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010ec09:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010ec0d:	83 ec 0c             	sub    $0xc,%esp
f010ec10:	68 54 48 13 f0       	push   $0xf0134854
f010ec15:	e8 17 22 ff ff       	call   f0100e31 <cprintf>
f010ec1a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ec1d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010ec24:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ec27:	bb 14 4a 13 f0       	mov    $0xf0134a14,%ebx
f010ec2c:	ba 03 00 00 00       	mov    $0x3,%edx
f010ec31:	89 c7                	mov    %eax,%edi
f010ec33:	89 de                	mov    %ebx,%esi
f010ec35:	89 d1                	mov    %edx,%ecx
f010ec37:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ec39:	a1 40 b6 2d f0       	mov    0xf02db640,%eax
f010ec3e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010ec41:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010ec48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ec4b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010ec4e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010ec51:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ec56:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ec59:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ec60:	e9 c6 00 00 00       	jmp    f010ed2b <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ec65:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec68:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010ec6c:	83 e8 10             	sub    $0x10,%eax
f010ec6f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010ec72:	83 ec 08             	sub    $0x8,%esp
f010ec75:	6a 01                	push   $0x1
f010ec77:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ec7a:	e8 e9 0d 02 00       	call   f012fa68 <alloc_block>
f010ec7f:	83 c4 10             	add    $0x10,%esp
f010ec82:	89 c2                	mov    %eax,%edx
f010ec84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec87:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010ec8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec8e:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ec92:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010ec95:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec98:	d1 e8                	shr    %eax
f010ec9a:	89 c2                	mov    %eax,%edx
f010ec9c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec9f:	01 c2                	add    %eax,%edx
f010eca1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eca4:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010eca8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ecab:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ecae:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ecb1:	01 c2                	add    %eax,%edx
f010ecb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ecb6:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ecbd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ecc0:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ecc4:	85 c0                	test   %eax,%eax
f010ecc6:	74 12                	je     f010ecda <test_alloc_block_FF+0x21f>
f010ecc8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eccb:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010eccf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ecd2:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ecd6:	39 c2                	cmp    %eax,%edx
f010ecd8:	74 27                	je     f010ed01 <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010ecda:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010ece1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ece4:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ece8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eceb:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ecef:	52                   	push   %edx
f010ecf0:	50                   	push   %eax
f010ecf1:	ff 75 d0             	pushl  -0x30(%ebp)
f010ecf4:	68 b0 48 13 f0       	push   $0xf01348b0
f010ecf9:	e8 33 21 ff ff       	call   f0100e31 <cprintf>
f010ecfe:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ed01:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed04:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed08:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ed0d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed10:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed14:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ed19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed1c:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed23:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ed28:	ff 45 d0             	incl   -0x30(%ebp)
f010ed2b:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010ed2f:	0f 8e 30 ff ff ff    	jle    f010ec65 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010ed35:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ed39:	74 04                	je     f010ed3f <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010ed3b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010ed3f:	83 ec 0c             	sub    $0xc,%esp
f010ed42:	68 dc 45 13 f0       	push   $0xf01345dc
f010ed47:	e8 e5 20 ff ff       	call   f0100e31 <cprintf>
f010ed4c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ed4f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010ed56:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010ed5d:	83 ec 08             	sub    $0x8,%esp
f010ed60:	6a 01                	push   $0x1
f010ed62:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ed65:	e8 fe 0c 02 00       	call   f012fa68 <alloc_block>
f010ed6a:	83 c4 10             	add    $0x10,%esp
f010ed6d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010ed70:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ed73:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010ed76:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed79:	d1 e8                	shr    %eax
f010ed7b:	89 c2                	mov    %eax,%edx
f010ed7d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed80:	01 d0                	add    %edx,%eax
f010ed82:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010ed85:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed88:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ed8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ed8e:	01 d0                	add    %edx,%eax
f010ed90:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010ed93:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010ed96:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ed99:	01 d0                	add    %edx,%eax
f010ed9b:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010eda0:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010eda3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eda7:	74 08                	je     f010edb1 <test_alloc_block_FF+0x2f6>
f010eda9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010edac:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010edaf:	74 1d                	je     f010edce <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010edb1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010edb8:	83 ec 04             	sub    $0x4,%esp
f010edbb:	ff 75 c8             	pushl  -0x38(%ebp)
f010edbe:	ff 75 bc             	pushl  -0x44(%ebp)
f010edc1:	68 14 49 13 f0       	push   $0xf0134914
f010edc6:	e8 66 20 ff ff       	call   f0100e31 <cprintf>
f010edcb:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010edce:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010edd1:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010edd6:	8b 45 90             	mov    -0x70(%ebp),%eax
f010edd9:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010edde:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ede1:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ede6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010edea:	74 04                	je     f010edf0 <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010edec:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010edf0:	83 ec 0c             	sub    $0xc,%esp
f010edf3:	68 70 46 13 f0       	push   $0xf0134670
f010edf8:	e8 34 20 ff ff       	call   f0100e31 <cprintf>
f010edfd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ee00:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010ee07:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ee0e:	e9 82 00 00 00       	jmp    f010ee95 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010ee13:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee16:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ee1a:	66 8b 00             	mov    (%eax),%ax
f010ee1d:	66 3d 61 01          	cmp    $0x161,%ax
f010ee21:	75 23                	jne    f010ee46 <test_alloc_block_FF+0x38b>
f010ee23:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee26:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ee2a:	66 8b 00             	mov    (%eax),%ax
f010ee2d:	66 3d 61 01          	cmp    $0x161,%ax
f010ee31:	75 13                	jne    f010ee46 <test_alloc_block_FF+0x38b>
f010ee33:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee36:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ee3d:	66 8b 00             	mov    (%eax),%ax
f010ee40:	66 3d 61 01          	cmp    $0x161,%ax
f010ee44:	74 4c                	je     f010ee92 <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010ee46:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010ee4d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee50:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ee57:	66 8b 00             	mov    (%eax),%ax
f010ee5a:	0f bf c8             	movswl %ax,%ecx
f010ee5d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee60:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ee64:	66 8b 00             	mov    (%eax),%ax
f010ee67:	0f bf d0             	movswl %ax,%edx
f010ee6a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee6d:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ee71:	66 8b 00             	mov    (%eax),%ax
f010ee74:	98                   	cwtl   
f010ee75:	83 ec 08             	sub    $0x8,%esp
f010ee78:	51                   	push   %ecx
f010ee79:	52                   	push   %edx
f010ee7a:	50                   	push   %eax
f010ee7b:	68 61 01 00 00       	push   $0x161
f010ee80:	ff 75 cc             	pushl  -0x34(%ebp)
f010ee83:	68 74 49 13 f0       	push   $0xf0134974
f010ee88:	e8 a4 1f ff ff       	call   f0100e31 <cprintf>
f010ee8d:	83 c4 20             	add    $0x20,%esp
			break;
f010ee90:	eb 0d                	jmp    f010ee9f <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010ee92:	ff 45 cc             	incl   -0x34(%ebp)
f010ee95:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010ee99:	0f 8e 74 ff ff ff    	jle    f010ee13 <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010ee9f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eea3:	74 04                	je     f010eea9 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010eea5:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010eea9:	83 ec 08             	sub    $0x8,%esp
f010eeac:	ff 75 e4             	pushl  -0x1c(%ebp)
f010eeaf:	68 e0 49 13 f0       	push   $0xf01349e0
f010eeb4:	e8 78 1f ff ff       	call   f0100e31 <cprintf>
f010eeb9:	83 c4 10             	add    $0x10,%esp
}
f010eebc:	90                   	nop
f010eebd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eec0:	5b                   	pop    %ebx
f010eec1:	5e                   	pop    %esi
f010eec2:	5f                   	pop    %edi
f010eec3:	5d                   	pop    %ebp
f010eec4:	c3                   	ret    

f010eec5 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010eec5:	55                   	push   %ebp
f010eec6:	89 e5                	mov    %esp,%ebp
f010eec8:	57                   	push   %edi
f010eec9:	56                   	push   %esi
f010eeca:	53                   	push   %ebx
f010eecb:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010eed1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010eed8:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010eedf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010eee6:	83 ec 0c             	sub    $0xc,%esp
f010eee9:	68 20 4a 13 f0       	push   $0xf0134a20
f010eeee:	e8 3e 1f ff ff       	call   f0100e31 <cprintf>
f010eef3:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010eef6:	83 ec 0c             	sub    $0xc,%esp
f010eef9:	68 54 4a 13 f0       	push   $0xf0134a54
f010eefe:	e8 2e 1f ff ff       	call   f0100e31 <cprintf>
f010ef03:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ef06:	83 ec 0c             	sub    $0xc,%esp
f010ef09:	68 20 4a 13 f0       	push   $0xf0134a20
f010ef0e:	e8 1e 1f ff ff       	call   f0100e31 <cprintf>
f010ef13:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010ef16:	83 ec 0c             	sub    $0xc,%esp
f010ef19:	6a 03                	push   $0x3
f010ef1b:	e8 d1 f7 ff ff       	call   f010e6f1 <test_initial_alloc>
f010ef20:	83 c4 10             	add    $0x10,%esp
f010ef23:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010ef26:	83 ec 0c             	sub    $0xc,%esp
f010ef29:	68 20 4a 13 f0       	push   $0xf0134a20
f010ef2e:	e8 fe 1e ff ff       	call   f0100e31 <cprintf>
f010ef33:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010ef36:	83 ec 0c             	sub    $0xc,%esp
f010ef39:	68 88 4a 13 f0       	push   $0xf0134a88
f010ef3e:	e8 ee 1e ff ff       	call   f0100e31 <cprintf>
f010ef43:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ef46:	83 ec 0c             	sub    $0xc,%esp
f010ef49:	68 20 4a 13 f0       	push   $0xf0134a20
f010ef4e:	e8 de 1e ff ff       	call   f0100e31 <cprintf>
f010ef53:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ef56:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ef5d:	eb 2c                	jmp    f010ef8b <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ef5f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ef62:	89 d0                	mov    %edx,%eax
f010ef64:	c1 e0 02             	shl    $0x2,%eax
f010ef67:	01 d0                	add    %edx,%eax
f010ef69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ef70:	01 d0                	add    %edx,%eax
f010ef72:	c1 e0 03             	shl    $0x3,%eax
f010ef75:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010ef7c:	83 ec 0c             	sub    $0xc,%esp
f010ef7f:	50                   	push   %eax
f010ef80:	e8 2a 10 02 00       	call   f012ffaf <free_block>
f010ef85:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ef88:	ff 45 dc             	incl   -0x24(%ebp)
f010ef8b:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ef8f:	7e ce                	jle    f010ef5f <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ef91:	83 ec 0c             	sub    $0xc,%esp
f010ef94:	68 c4 43 13 f0       	push   $0xf01343c4
f010ef99:	e8 93 1e ff ff       	call   f0100e31 <cprintf>
f010ef9e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010efa1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010efa8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010efaf:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010efb6:	eb 1f                	jmp    f010efd7 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010efb8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010efbb:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010efc2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010efc5:	76 0d                	jbe    f010efd4 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010efc7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010efca:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010efd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010efd4:	ff 45 d4             	incl   -0x2c(%ebp)
f010efd7:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010efdb:	7e db                	jle    f010efb8 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010efdd:	83 ec 08             	sub    $0x8,%esp
f010efe0:	6a 03                	push   $0x3
f010efe2:	ff 75 d8             	pushl  -0x28(%ebp)
f010efe5:	e8 7e 0a 02 00       	call   f012fa68 <alloc_block>
f010efea:	83 c4 10             	add    $0x10,%esp
f010efed:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eff0:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eff4:	74 17                	je     f010f00d <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010eff6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010effd:	83 ec 0c             	sub    $0xc,%esp
f010f000:	68 bc 4a 13 f0       	push   $0xf0134abc
f010f005:	e8 27 1e ff ff       	call   f0100e31 <cprintf>
f010f00a:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010f00d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f011:	74 04                	je     f010f017 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010f013:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010f017:	83 ec 0c             	sub    $0xc,%esp
f010f01a:	68 54 48 13 f0       	push   $0xf0134854
f010f01f:	e8 0d 1e ff ff       	call   f0100e31 <cprintf>
f010f024:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f027:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010f02e:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f031:	bb e0 4c 13 f0       	mov    $0xf0134ce0,%ebx
f010f036:	ba 05 00 00 00       	mov    $0x5,%edx
f010f03b:	89 c7                	mov    %eax,%edi
f010f03d:	89 de                	mov    %ebx,%esi
f010f03f:	89 d1                	mov    %edx,%ecx
f010f041:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010f043:	a1 e0 ac 2d f0       	mov    0xf02dace0,%eax
f010f048:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010f04b:	a1 00 b0 2d f0       	mov    0xf02db000,%eax
f010f050:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010f053:	a1 40 b6 2d f0       	mov    0xf02db640,%eax
f010f058:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010f05b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f05e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010f061:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f064:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f067:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f06a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010f06d:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f070:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f073:	01 d0                	add    %edx,%eax
f010f075:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f078:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f07f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f086:	e9 de 00 00 00       	jmp    f010f169 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010f08b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f08e:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010f092:	83 e8 10             	sub    $0x10,%eax
f010f095:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010f098:	83 ec 08             	sub    $0x8,%esp
f010f09b:	6a 03                	push   $0x3
f010f09d:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f0a0:	e8 c3 09 02 00       	call   f012fa68 <alloc_block>
f010f0a5:	83 c4 10             	add    $0x10,%esp
f010f0a8:	89 c2                	mov    %eax,%edx
f010f0aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0ad:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010f0b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0b7:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f0be:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010f0c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0c4:	d1 e8                	shr    %eax
f010f0c6:	89 c2                	mov    %eax,%edx
f010f0c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0cb:	01 c2                	add    %eax,%edx
f010f0cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0d0:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010f0d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0da:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f0dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0e0:	01 c2                	add    %eax,%edx
f010f0e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0e5:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010f0ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0ef:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f0f6:	85 c0                	test   %eax,%eax
f010f0f8:	74 15                	je     f010f10f <test_alloc_block_BF+0x24a>
f010f0fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0fd:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f104:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f107:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f10b:	39 c2                	cmp    %eax,%edx
f010f10d:	74 2a                	je     f010f139 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010f10f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f116:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f119:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f120:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f123:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f127:	52                   	push   %edx
f010f128:	50                   	push   %eax
f010f129:	ff 75 d0             	pushl  -0x30(%ebp)
f010f12c:	68 34 4b 13 f0       	push   $0xf0134b34
f010f131:	e8 fb 1c ff ff       	call   f0100e31 <cprintf>
f010f136:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f139:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f13c:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f143:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f148:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f14b:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f152:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f157:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f15a:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f161:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f166:	ff 45 d0             	incl   -0x30(%ebp)
f010f169:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f16d:	0f 8e 18 ff ff ff    	jle    f010f08b <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f173:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f177:	74 04                	je     f010f17d <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f179:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f17d:	83 ec 0c             	sub    $0xc,%esp
f010f180:	68 98 4b 13 f0       	push   $0xf0134b98
f010f185:	e8 a7 1c ff ff       	call   f0100e31 <cprintf>
f010f18a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f18d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f194:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f19b:	83 ec 08             	sub    $0x8,%esp
f010f19e:	6a 03                	push   $0x3
f010f1a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f1a3:	e8 c0 08 02 00       	call   f012fa68 <alloc_block>
f010f1a8:	83 c4 10             	add    $0x10,%esp
f010f1ab:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f1ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f1b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f1b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f1b7:	d1 e8                	shr    %eax
f010f1b9:	89 c2                	mov    %eax,%edx
f010f1bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f1be:	01 d0                	add    %edx,%eax
f010f1c0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f1c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f1c9:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f1cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f1cf:	01 d0                	add    %edx,%eax
f010f1d1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f1d7:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f1da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f1dd:	01 c2                	add    %eax,%edx
f010f1df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f1e2:	01 d0                	add    %edx,%eax
f010f1e4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f1e7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f1eb:	74 08                	je     f010f1f5 <test_alloc_block_BF+0x330>
f010f1ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f1f0:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f1f3:	74 1d                	je     f010f212 <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f1f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f1fc:	83 ec 04             	sub    $0x4,%esp
f010f1ff:	ff 75 c8             	pushl  -0x38(%ebp)
f010f202:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f205:	68 dc 4b 13 f0       	push   $0xf0134bdc
f010f20a:	e8 22 1c ff ff       	call   f0100e31 <cprintf>
f010f20f:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f212:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f215:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f21a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f220:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f225:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f22b:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f230:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f234:	74 04                	je     f010f23a <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f236:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f23a:	83 ec 0c             	sub    $0xc,%esp
f010f23d:	68 70 46 13 f0       	push   $0xf0134670
f010f242:	e8 ea 1b ff ff       	call   f0100e31 <cprintf>
f010f247:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f24a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f251:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f258:	e9 8e 00 00 00       	jmp    f010f2eb <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f25d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f260:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f267:	66 8b 00             	mov    (%eax),%ax
f010f26a:	66 3d 61 01          	cmp    $0x161,%ax
f010f26e:	75 26                	jne    f010f296 <test_alloc_block_BF+0x3d1>
f010f270:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f273:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f27a:	66 8b 00             	mov    (%eax),%ax
f010f27d:	66 3d 61 01          	cmp    $0x161,%ax
f010f281:	75 13                	jne    f010f296 <test_alloc_block_BF+0x3d1>
f010f283:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f286:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f28d:	66 8b 00             	mov    (%eax),%ax
f010f290:	66 3d 61 01          	cmp    $0x161,%ax
f010f294:	74 52                	je     f010f2e8 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f296:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f29d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2a0:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f2a7:	66 8b 00             	mov    (%eax),%ax
f010f2aa:	0f bf c8             	movswl %ax,%ecx
f010f2ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2b0:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f2b7:	66 8b 00             	mov    (%eax),%ax
f010f2ba:	0f bf d0             	movswl %ax,%edx
f010f2bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2c0:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f2c7:	66 8b 00             	mov    (%eax),%ax
f010f2ca:	98                   	cwtl   
f010f2cb:	83 ec 08             	sub    $0x8,%esp
f010f2ce:	51                   	push   %ecx
f010f2cf:	52                   	push   %edx
f010f2d0:	50                   	push   %eax
f010f2d1:	68 61 01 00 00       	push   $0x161
f010f2d6:	ff 75 cc             	pushl  -0x34(%ebp)
f010f2d9:	68 40 4c 13 f0       	push   $0xf0134c40
f010f2de:	e8 4e 1b ff ff       	call   f0100e31 <cprintf>
f010f2e3:	83 c4 20             	add    $0x20,%esp
			break;
f010f2e6:	eb 0d                	jmp    f010f2f5 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f2e8:	ff 45 cc             	incl   -0x34(%ebp)
f010f2eb:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f2ef:	0f 8e 68 ff ff ff    	jle    f010f25d <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f2f5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f2f9:	74 04                	je     f010f2ff <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f2fb:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f2ff:	83 ec 08             	sub    $0x8,%esp
f010f302:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f305:	68 ac 4c 13 f0       	push   $0xf0134cac
f010f30a:	e8 22 1b ff ff       	call   f0100e31 <cprintf>
f010f30f:	83 c4 10             	add    $0x10,%esp
}
f010f312:	90                   	nop
f010f313:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f316:	5b                   	pop    %ebx
f010f317:	5e                   	pop    %esi
f010f318:	5f                   	pop    %edi
f010f319:	5d                   	pop    %ebp
f010f31a:	c3                   	ret    

f010f31b <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f31b:	55                   	push   %ebp
f010f31c:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f31e:	90                   	nop
f010f31f:	5d                   	pop    %ebp
f010f320:	c3                   	ret    

f010f321 <test_free_block_FF>:

void test_free_block_FF()
{
f010f321:	55                   	push   %ebp
f010f322:	89 e5                	mov    %esp,%ebp
f010f324:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f327:	83 ec 0c             	sub    $0xc,%esp
f010f32a:	68 f4 4c 13 f0       	push   $0xf0134cf4
f010f32f:	e8 fd 1a ff ff       	call   f0100e31 <cprintf>
f010f334:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f337:	83 ec 0c             	sub    $0xc,%esp
f010f33a:	68 34 4d 13 f0       	push   $0xf0134d34
f010f33f:	e8 ed 1a ff ff       	call   f0100e31 <cprintf>
f010f344:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f347:	83 ec 0c             	sub    $0xc,%esp
f010f34a:	68 f4 4c 13 f0       	push   $0xf0134cf4
f010f34f:	e8 dd 1a ff ff       	call   f0100e31 <cprintf>
f010f354:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f357:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f35e:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f365:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f368:	83 ec 08             	sub    $0x8,%esp
f010f36b:	50                   	push   %eax
f010f36c:	68 00 00 00 f6       	push   $0xf6000000
f010f371:	e8 0b 08 02 00       	call   f012fb81 <initialize_dynamic_allocator>
f010f376:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f379:	83 ec 0c             	sub    $0xc,%esp
f010f37c:	68 74 4d 13 f0       	push   $0xf0134d74
f010f381:	e8 ab 1a ff ff       	call   f0100e31 <cprintf>
f010f386:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f389:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f390:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f397:	eb 2a                	jmp    f010f3c3 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f399:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f39c:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f010f3a3:	89 d0                	mov    %edx,%eax
f010f3a5:	c1 e0 02             	shl    $0x2,%eax
f010f3a8:	01 d0                	add    %edx,%eax
f010f3aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f3b1:	01 d0                	add    %edx,%eax
f010f3b3:	c1 e0 03             	shl    $0x3,%eax
f010f3b6:	89 c2                	mov    %eax,%edx
f010f3b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3bb:	01 d0                	add    %edx,%eax
f010f3bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f3c0:	ff 45 e8             	incl   -0x18(%ebp)
f010f3c3:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f3c7:	7e d0                	jle    f010f399 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f3c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f3cc:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f3cf:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f3d2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f3d6:	7f 17                	jg     f010f3ef <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f3d8:	83 ec 04             	sub    $0x4,%esp
f010f3db:	68 cc 4d 13 f0       	push   $0xf0134dcc
f010f3e0:	68 fe 01 00 00       	push   $0x1fe
f010f3e5:	68 50 43 13 f0       	push   $0xf0134350
f010f3ea:	e8 c1 0d ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f3ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f3f6:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f3fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f404:	e9 f8 00 00 00       	jmp    f010f501 <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f409:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f410:	e9 dc 00 00 00       	jmp    f010f4f1 <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f415:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f418:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f41f:	83 e8 10             	sub    $0x10,%eax
f010f422:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f425:	83 ec 08             	sub    $0x8,%esp
f010f428:	6a 01                	push   $0x1
f010f42a:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f42d:	e8 36 06 02 00       	call   f012fa68 <alloc_block>
f010f432:	83 c4 10             	add    $0x10,%esp
f010f435:	89 c2                	mov    %eax,%edx
f010f437:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f43a:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010f441:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f444:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f44b:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f44e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f451:	d1 e8                	shr    %eax
f010f453:	89 c2                	mov    %eax,%edx
f010f455:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f458:	01 c2                	add    %eax,%edx
f010f45a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f45d:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f464:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f467:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f46a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f46d:	01 c2                	add    %eax,%edx
f010f46f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f472:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f479:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f47d:	74 0b                	je     f010f48a <test_free_block_FF+0x169>
f010f47f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f482:	83 c0 10             	add    $0x10,%eax
f010f485:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f488:	74 24                	je     f010f4ae <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f48a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f48d:	83 c0 10             	add    $0x10,%eax
f010f490:	83 ec 08             	sub    $0x8,%esp
f010f493:	ff 75 c0             	pushl  -0x40(%ebp)
f010f496:	50                   	push   %eax
f010f497:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f49a:	68 44 4e 13 f0       	push   $0xf0134e44
f010f49f:	68 0d 02 00 00       	push   $0x20d
f010f4a4:	68 50 43 13 f0       	push   $0xf0134350
f010f4a9:	e8 02 0d ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f4ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4b1:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f4b8:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f4bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4be:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010f4c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4c8:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f4cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ce:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010f4d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4d8:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f4db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4de:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010f4e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4e8:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f4eb:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f4ee:	ff 45 d8             	incl   -0x28(%ebp)
f010f4f1:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f4f8:	0f 8e 17 ff ff ff    	jle    f010f415 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f4fe:	ff 45 dc             	incl   -0x24(%ebp)
f010f501:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f505:	0f 8e fe fe ff ff    	jle    f010f409 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f50b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f50e:	83 e8 10             	sub    $0x10,%eax
f010f511:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f514:	83 ec 08             	sub    $0x8,%esp
f010f517:	6a 01                	push   $0x1
f010f519:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f51c:	e8 47 05 02 00       	call   f012fa68 <alloc_block>
f010f521:	83 c4 10             	add    $0x10,%esp
f010f524:	89 c2                	mov    %eax,%edx
f010f526:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f529:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010f530:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f533:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f53a:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f53d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f540:	d1 e8                	shr    %eax
f010f542:	89 c2                	mov    %eax,%edx
f010f544:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f547:	01 c2                	add    %eax,%edx
f010f549:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f54c:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f553:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f556:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f559:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f55c:	01 c2                	add    %eax,%edx
f010f55e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f561:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f568:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f56c:	74 0b                	je     f010f579 <test_free_block_FF+0x258>
f010f56e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f571:	83 c0 10             	add    $0x10,%eax
f010f574:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f577:	74 17                	je     f010f590 <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f579:	83 ec 04             	sub    $0x4,%esp
f010f57c:	68 a8 4e 13 f0       	push   $0xf0134ea8
f010f581:	68 1e 02 00 00       	push   $0x21e
f010f586:	68 50 43 13 f0       	push   $0xf0134350
f010f58b:	e8 20 0c ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f590:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f593:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010f59a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f59d:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f5a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5a3:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010f5aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5ad:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f5b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5b3:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010f5ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5bd:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f5c0:	83 ec 0c             	sub    $0xc,%esp
f010f5c3:	68 f0 4e 13 f0       	push   $0xf0134ef0
f010f5c8:	e8 64 18 ff ff       	call   f0100e31 <cprintf>
f010f5cd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f5d0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f5d7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f5de:	eb 5b                	jmp    f010f63b <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f5e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f5e3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f5ea:	66 8b 00             	mov    (%eax),%ax
f010f5ed:	98                   	cwtl   
f010f5ee:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f5f1:	75 26                	jne    f010f619 <test_free_block_FF+0x2f8>
f010f5f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f5f6:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f010f5fd:	66 8b 00             	mov    (%eax),%ax
f010f600:	98                   	cwtl   
f010f601:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f604:	75 13                	jne    f010f619 <test_free_block_FF+0x2f8>
f010f606:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f609:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f010f610:	66 8b 00             	mov    (%eax),%ax
f010f613:	98                   	cwtl   
f010f614:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f617:	74 1f                	je     f010f638 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f619:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f620:	83 ec 04             	sub    $0x4,%esp
f010f623:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f626:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f629:	68 24 4f 13 f0       	push   $0xf0134f24
f010f62e:	e8 fe 17 ff ff       	call   f0100e31 <cprintf>
f010f633:	83 c4 10             	add    $0x10,%esp
			break;
f010f636:	eb 0b                	jmp    f010f643 <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f638:	ff 45 d4             	incl   -0x2c(%ebp)
f010f63b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f63e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f641:	7c 9d                	jl     f010f5e0 <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f643:	83 ec 0c             	sub    $0xc,%esp
f010f646:	68 74 4f 13 f0       	push   $0xf0134f74
f010f64b:	e8 e1 17 ff ff       	call   f0100e31 <cprintf>
f010f650:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f653:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f65a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f661:	e9 e4 00 00 00       	jmp    f010f74a <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f666:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f669:	89 d0                	mov    %edx,%eax
f010f66b:	c1 e0 02             	shl    $0x2,%eax
f010f66e:	01 d0                	add    %edx,%eax
f010f670:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f677:	01 d0                	add    %edx,%eax
f010f679:	c1 e0 03             	shl    $0x3,%eax
f010f67c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f683:	83 ec 0c             	sub    $0xc,%esp
f010f686:	50                   	push   %eax
f010f687:	e8 23 09 02 00       	call   f012ffaf <free_block>
f010f68c:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f68f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f692:	89 d0                	mov    %edx,%eax
f010f694:	c1 e0 02             	shl    $0x2,%eax
f010f697:	01 d0                	add    %edx,%eax
f010f699:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f6a0:	01 d0                	add    %edx,%eax
f010f6a2:	c1 e0 03             	shl    $0x3,%eax
f010f6a5:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f6ac:	83 ec 0c             	sub    $0xc,%esp
f010f6af:	50                   	push   %eax
f010f6b0:	e8 86 03 02 00       	call   f012fa3b <get_block_size>
f010f6b5:	83 c4 10             	add    $0x10,%esp
f010f6b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f6bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f6be:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f6c5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f6c8:	74 2b                	je     f010f6f5 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f6ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f6ce:	74 25                	je     f010f6f5 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f6d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f6d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f6da:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f6e1:	ff 75 bc             	pushl  -0x44(%ebp)
f010f6e4:	50                   	push   %eax
f010f6e5:	ff 75 d0             	pushl  -0x30(%ebp)
f010f6e8:	68 a4 4f 13 f0       	push   $0xf0134fa4
f010f6ed:	e8 3f 17 ff ff       	call   f0100e31 <cprintf>
f010f6f2:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f6f5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f6f8:	89 d0                	mov    %edx,%eax
f010f6fa:	c1 e0 02             	shl    $0x2,%eax
f010f6fd:	01 d0                	add    %edx,%eax
f010f6ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f706:	01 d0                	add    %edx,%eax
f010f708:	c1 e0 03             	shl    $0x3,%eax
f010f70b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f712:	83 ec 0c             	sub    $0xc,%esp
f010f715:	50                   	push   %eax
f010f716:	e8 36 03 02 00       	call   f012fa51 <is_free_block>
f010f71b:	83 c4 10             	add    $0x10,%esp
f010f71e:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f721:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f725:	74 20                	je     f010f747 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f727:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f72b:	74 1a                	je     f010f747 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f72d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f734:	83 ec 08             	sub    $0x8,%esp
f010f737:	ff 75 d0             	pushl  -0x30(%ebp)
f010f73a:	68 08 50 13 f0       	push   $0xf0135008
f010f73f:	e8 ed 16 ff ff       	call   f0100e31 <cprintf>
f010f744:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f747:	ff 45 d0             	incl   -0x30(%ebp)
f010f74a:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f74e:	0f 8e 12 ff ff ff    	jle    f010f666 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f754:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f758:	74 04                	je     f010f75e <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f75a:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f75e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f765:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f010f76a:	83 ec 0c             	sub    $0xc,%esp
f010f76d:	50                   	push   %eax
f010f76e:	e8 3c 08 02 00       	call   f012ffaf <free_block>
f010f773:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f776:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f010f77b:	83 ec 0c             	sub    $0xc,%esp
f010f77e:	50                   	push   %eax
f010f77f:	e8 b7 02 02 00       	call   f012fa3b <get_block_size>
f010f784:	83 c4 10             	add    $0x10,%esp
f010f787:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f78a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f78d:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f790:	74 1d                	je     f010f7af <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f792:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f799:	83 ec 04             	sub    $0x4,%esp
f010f79c:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f79f:	ff 75 c8             	pushl  -0x38(%ebp)
f010f7a2:	68 60 50 13 f0       	push   $0xf0135060
f010f7a7:	e8 85 16 ff ff       	call   f0100e31 <cprintf>
f010f7ac:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f7af:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f010f7b4:	83 ec 0c             	sub    $0xc,%esp
f010f7b7:	50                   	push   %eax
f010f7b8:	e8 94 02 02 00       	call   f012fa51 <is_free_block>
f010f7bd:	83 c4 10             	add    $0x10,%esp
f010f7c0:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f7c3:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f7c7:	74 17                	je     f010f7e0 <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f7c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f7d0:	83 ec 0c             	sub    $0xc,%esp
f010f7d3:	68 c0 50 13 f0       	push   $0xf01350c0
f010f7d8:	e8 54 16 ff ff       	call   f0100e31 <cprintf>
f010f7dd:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f7e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f7e3:	83 e8 10             	sub    $0x10,%eax
f010f7e6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f7e9:	83 ec 08             	sub    $0x8,%esp
f010f7ec:	6a 01                	push   $0x1
f010f7ee:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f7f1:	e8 72 02 02 00       	call   f012fa68 <alloc_block>
f010f7f6:	83 c4 10             	add    $0x10,%esp
f010f7f9:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f7fc:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f800:	74 0b                	je     f010f80d <test_free_block_FF+0x4ec>
f010f802:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f805:	83 c0 10             	add    $0x10,%eax
f010f808:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f80b:	74 17                	je     f010f824 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f80d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f814:	83 ec 0c             	sub    $0xc,%esp
f010f817:	68 18 51 13 f0       	push   $0xf0135118
f010f81c:	e8 10 16 ff ff       	call   f0100e31 <cprintf>
f010f821:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f824:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f010f829:	83 ec 0c             	sub    $0xc,%esp
f010f82c:	50                   	push   %eax
f010f82d:	e8 7d 07 02 00       	call   f012ffaf <free_block>
f010f832:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f835:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f010f83a:	83 ec 0c             	sub    $0xc,%esp
f010f83d:	50                   	push   %eax
f010f83e:	e8 f8 01 02 00       	call   f012fa3b <get_block_size>
f010f843:	83 c4 10             	add    $0x10,%esp
f010f846:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f849:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f010f84e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f851:	74 20                	je     f010f873 <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f853:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f85a:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f010f85f:	83 ec 04             	sub    $0x4,%esp
f010f862:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f865:	50                   	push   %eax
f010f866:	68 64 51 13 f0       	push   $0xf0135164
f010f86b:	e8 c1 15 ff ff       	call   f0100e31 <cprintf>
f010f870:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f873:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f010f878:	83 ec 0c             	sub    $0xc,%esp
f010f87b:	50                   	push   %eax
f010f87c:	e8 d0 01 02 00       	call   f012fa51 <is_free_block>
f010f881:	83 c4 10             	add    $0x10,%esp
f010f884:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f887:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f88b:	74 17                	je     f010f8a4 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f88d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f894:	83 ec 0c             	sub    $0xc,%esp
f010f897:	68 c4 51 13 f0       	push   $0xf01351c4
f010f89c:	e8 90 15 ff ff       	call   f0100e31 <cprintf>
f010f8a1:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f8a4:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f8a9:	83 e8 10             	sub    $0x10,%eax
f010f8ac:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f8af:	83 ec 08             	sub    $0x8,%esp
f010f8b2:	6a 01                	push   $0x1
f010f8b4:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f8b7:	e8 ac 01 02 00       	call   f012fa68 <alloc_block>
f010f8bc:	83 c4 10             	add    $0x10,%esp
f010f8bf:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f8c2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f8c6:	74 09                	je     f010f8d1 <test_free_block_FF+0x5b0>
f010f8c8:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f8cf:	74 17                	je     f010f8e8 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f8d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f8d8:	83 ec 0c             	sub    $0xc,%esp
f010f8db:	68 1c 52 13 f0       	push   $0xf013521c
f010f8e0:	e8 4c 15 ff ff       	call   f0100e31 <cprintf>
f010f8e5:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f8e8:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f010f8ed:	83 ec 0c             	sub    $0xc,%esp
f010f8f0:	50                   	push   %eax
f010f8f1:	e8 b9 06 02 00       	call   f012ffaf <free_block>
f010f8f6:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f8f9:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f010f8fe:	83 ec 0c             	sub    $0xc,%esp
f010f901:	50                   	push   %eax
f010f902:	e8 34 01 02 00       	call   f012fa3b <get_block_size>
f010f907:	83 c4 10             	add    $0x10,%esp
f010f90a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f90d:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f912:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f915:	74 20                	je     f010f937 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f917:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f91e:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f923:	83 ec 04             	sub    $0x4,%esp
f010f926:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f929:	50                   	push   %eax
f010f92a:	68 68 52 13 f0       	push   $0xf0135268
f010f92f:	e8 fd 14 ff ff       	call   f0100e31 <cprintf>
f010f934:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f937:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f010f93c:	83 ec 0c             	sub    $0xc,%esp
f010f93f:	50                   	push   %eax
f010f940:	e8 0c 01 02 00       	call   f012fa51 <is_free_block>
f010f945:	83 c4 10             	add    $0x10,%esp
f010f948:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f94b:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f94f:	74 17                	je     f010f968 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f951:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f958:	83 ec 0c             	sub    $0xc,%esp
f010f95b:	68 c8 52 13 f0       	push   $0xf01352c8
f010f960:	e8 cc 14 ff ff       	call   f0100e31 <cprintf>
f010f965:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f968:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f96c:	74 04                	je     f010f972 <test_free_block_FF+0x651>
	{
		eval += 10;
f010f96e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f972:	83 ec 0c             	sub    $0xc,%esp
f010f975:	68 20 53 13 f0       	push   $0xf0135320
f010f97a:	e8 b2 14 ff ff       	call   f0100e31 <cprintf>
f010f97f:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f982:	83 ec 0c             	sub    $0xc,%esp
f010f985:	68 5c 53 13 f0       	push   $0xf013535c
f010f98a:	e8 a2 14 ff ff       	call   f0100e31 <cprintf>
f010f98f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f992:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f999:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f9a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9a3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f9aa:	83 ec 0c             	sub    $0xc,%esp
f010f9ad:	50                   	push   %eax
f010f9ae:	e8 fc 05 02 00       	call   f012ffaf <free_block>
f010f9b3:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f9b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9b9:	48                   	dec    %eax
f010f9ba:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f9c1:	83 ec 0c             	sub    $0xc,%esp
f010f9c4:	50                   	push   %eax
f010f9c5:	e8 71 00 02 00       	call   f012fa3b <get_block_size>
f010f9ca:	83 c4 10             	add    $0x10,%esp
f010f9cd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f9d0:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f010f9d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f9d9:	01 d0                	add    %edx,%eax
f010f9db:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f9de:	74 26                	je     f010fa06 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f9e0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f9e7:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f010f9ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f9f0:	01 d0                	add    %edx,%eax
f010f9f2:	83 ec 04             	sub    $0x4,%esp
f010f9f5:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f9f8:	50                   	push   %eax
f010f9f9:	68 74 53 13 f0       	push   $0xf0135374
f010f9fe:	e8 2e 14 ff ff       	call   f0100e31 <cprintf>
f010fa03:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fa06:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa09:	48                   	dec    %eax
f010fa0a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fa11:	83 ec 0c             	sub    $0xc,%esp
f010fa14:	50                   	push   %eax
f010fa15:	e8 37 00 02 00       	call   f012fa51 <is_free_block>
f010fa1a:	83 c4 10             	add    $0x10,%esp
f010fa1d:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fa20:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fa24:	74 17                	je     f010fa3d <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010fa26:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fa2d:	83 ec 0c             	sub    $0xc,%esp
f010fa30:	68 d4 53 13 f0       	push   $0xf01353d4
f010fa35:	e8 f7 13 ff ff       	call   f0100e31 <cprintf>
f010fa3a:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fa3d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa40:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fa47:	83 ec 0c             	sub    $0xc,%esp
f010fa4a:	50                   	push   %eax
f010fa4b:	e8 eb ff 01 00       	call   f012fa3b <get_block_size>
f010fa50:	83 c4 10             	add    $0x10,%esp
f010fa53:	85 c0                	test   %eax,%eax
f010fa55:	75 1a                	jne    f010fa71 <test_free_block_FF+0x750>
f010fa57:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa5a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fa61:	83 ec 0c             	sub    $0xc,%esp
f010fa64:	50                   	push   %eax
f010fa65:	e8 e7 ff 01 00       	call   f012fa51 <is_free_block>
f010fa6a:	83 c4 10             	add    $0x10,%esp
f010fa6d:	84 c0                	test   %al,%al
f010fa6f:	74 17                	je     f010fa88 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010fa71:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fa78:	83 ec 0c             	sub    $0xc,%esp
f010fa7b:	68 2c 54 13 f0       	push   $0xf013542c
f010fa80:	e8 ac 13 ff ff       	call   f0100e31 <cprintf>
f010fa85:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010fa88:	83 ec 0c             	sub    $0xc,%esp
f010fa8b:	68 96 54 13 f0       	push   $0xf0135496
f010fa90:	e8 9c 13 ff ff       	call   f0100e31 <cprintf>
f010fa95:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010fa98:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fa9f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010faa2:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010faa9:	83 ec 0c             	sub    $0xc,%esp
f010faac:	50                   	push   %eax
f010faad:	e8 fd 04 02 00       	call   f012ffaf <free_block>
f010fab2:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fab5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fab8:	48                   	dec    %eax
f010fab9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fac0:	83 ec 0c             	sub    $0xc,%esp
f010fac3:	50                   	push   %eax
f010fac4:	e8 72 ff 01 00       	call   f012fa3b <get_block_size>
f010fac9:	83 c4 10             	add    $0x10,%esp
f010facc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010facf:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f010fad5:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f010fada:	01 d0                	add    %edx,%eax
f010fadc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fadf:	74 28                	je     f010fb09 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010fae1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010fae8:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f010faee:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f010faf3:	01 d0                	add    %edx,%eax
f010faf5:	83 ec 04             	sub    $0x4,%esp
f010faf8:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fafb:	50                   	push   %eax
f010fafc:	68 b0 54 13 f0       	push   $0xf01354b0
f010fb01:	e8 2b 13 ff ff       	call   f0100e31 <cprintf>
f010fb06:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fb09:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb0c:	48                   	dec    %eax
f010fb0d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fb14:	83 ec 0c             	sub    $0xc,%esp
f010fb17:	50                   	push   %eax
f010fb18:	e8 34 ff 01 00       	call   f012fa51 <is_free_block>
f010fb1d:	83 c4 10             	add    $0x10,%esp
f010fb20:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fb23:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fb27:	74 17                	je     f010fb40 <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010fb29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fb30:	83 ec 0c             	sub    $0xc,%esp
f010fb33:	68 10 55 13 f0       	push   $0xf0135510
f010fb38:	e8 f4 12 ff ff       	call   f0100e31 <cprintf>
f010fb3d:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fb40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb43:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fb4a:	83 ec 0c             	sub    $0xc,%esp
f010fb4d:	50                   	push   %eax
f010fb4e:	e8 e8 fe 01 00       	call   f012fa3b <get_block_size>
f010fb53:	83 c4 10             	add    $0x10,%esp
f010fb56:	85 c0                	test   %eax,%eax
f010fb58:	75 1a                	jne    f010fb74 <test_free_block_FF+0x853>
f010fb5a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb5d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fb64:	83 ec 0c             	sub    $0xc,%esp
f010fb67:	50                   	push   %eax
f010fb68:	e8 e4 fe 01 00       	call   f012fa51 <is_free_block>
f010fb6d:	83 c4 10             	add    $0x10,%esp
f010fb70:	84 c0                	test   %al,%al
f010fb72:	74 17                	je     f010fb8b <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010fb74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fb7b:	83 ec 0c             	sub    $0xc,%esp
f010fb7e:	68 68 55 13 f0       	push   $0xf0135568
f010fb83:	e8 a9 12 ff ff       	call   f0100e31 <cprintf>
f010fb88:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fb8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fb8f:	74 04                	je     f010fb95 <test_free_block_FF+0x874>
	{
		eval += 15;
f010fb91:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010fb95:	83 ec 0c             	sub    $0xc,%esp
f010fb98:	68 d4 55 13 f0       	push   $0xf01355d4
f010fb9d:	e8 8f 12 ff ff       	call   f0100e31 <cprintf>
f010fba2:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010fba5:	83 ec 0c             	sub    $0xc,%esp
f010fba8:	68 0c 56 13 f0       	push   $0xf013560c
f010fbad:	e8 7f 12 ff ff       	call   f0100e31 <cprintf>
f010fbb2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fbb5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010fbbc:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fbc3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbc6:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fbcd:	83 ec 0c             	sub    $0xc,%esp
f010fbd0:	50                   	push   %eax
f010fbd1:	e8 d9 03 02 00       	call   f012ffaf <free_block>
f010fbd6:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fbd9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbdc:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fbe3:	83 ec 0c             	sub    $0xc,%esp
f010fbe6:	50                   	push   %eax
f010fbe7:	e8 4f fe 01 00       	call   f012fa3b <get_block_size>
f010fbec:	83 c4 10             	add    $0x10,%esp
f010fbef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010fbf2:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fbf8:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010fbfd:	01 d0                	add    %edx,%eax
f010fbff:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fc02:	74 28                	je     f010fc2c <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010fc04:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010fc0b:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fc11:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010fc16:	01 d0                	add    %edx,%eax
f010fc18:	83 ec 04             	sub    $0x4,%esp
f010fc1b:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fc1e:	50                   	push   %eax
f010fc1f:	68 b0 54 13 f0       	push   $0xf01354b0
f010fc24:	e8 08 12 ff ff       	call   f0100e31 <cprintf>
f010fc29:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fc2c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc2f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fc36:	83 ec 0c             	sub    $0xc,%esp
f010fc39:	50                   	push   %eax
f010fc3a:	e8 12 fe 01 00       	call   f012fa51 <is_free_block>
f010fc3f:	83 c4 10             	add    $0x10,%esp
f010fc42:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fc45:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fc49:	74 17                	je     f010fc62 <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010fc4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fc52:	83 ec 0c             	sub    $0xc,%esp
f010fc55:	68 10 55 13 f0       	push   $0xf0135510
f010fc5a:	e8 d2 11 ff ff       	call   f0100e31 <cprintf>
f010fc5f:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fc62:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc65:	40                   	inc    %eax
f010fc66:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fc6d:	83 ec 0c             	sub    $0xc,%esp
f010fc70:	50                   	push   %eax
f010fc71:	e8 c5 fd 01 00       	call   f012fa3b <get_block_size>
f010fc76:	83 c4 10             	add    $0x10,%esp
f010fc79:	85 c0                	test   %eax,%eax
f010fc7b:	75 1b                	jne    f010fc98 <test_free_block_FF+0x977>
f010fc7d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc80:	40                   	inc    %eax
f010fc81:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fc88:	83 ec 0c             	sub    $0xc,%esp
f010fc8b:	50                   	push   %eax
f010fc8c:	e8 c0 fd 01 00       	call   f012fa51 <is_free_block>
f010fc91:	83 c4 10             	add    $0x10,%esp
f010fc94:	84 c0                	test   %al,%al
f010fc96:	74 17                	je     f010fcaf <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010fc98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fc9f:	83 ec 0c             	sub    $0xc,%esp
f010fca2:	68 68 55 13 f0       	push   $0xf0135568
f010fca7:	e8 85 11 ff ff       	call   f0100e31 <cprintf>
f010fcac:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010fcaf:	83 ec 0c             	sub    $0xc,%esp
f010fcb2:	68 21 56 13 f0       	push   $0xf0135621
f010fcb7:	e8 75 11 ff ff       	call   f0100e31 <cprintf>
f010fcbc:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010fcbf:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fcc6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcc9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fcd0:	83 ec 0c             	sub    $0xc,%esp
f010fcd3:	50                   	push   %eax
f010fcd4:	e8 d6 02 02 00       	call   f012ffaf <free_block>
f010fcd9:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fcdc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcdf:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fce6:	83 ec 0c             	sub    $0xc,%esp
f010fce9:	50                   	push   %eax
f010fcea:	e8 4c fd 01 00       	call   f012fa3b <get_block_size>
f010fcef:	83 c4 10             	add    $0x10,%esp
f010fcf2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010fcf5:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fcfb:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f010fd00:	01 d0                	add    %edx,%eax
f010fd02:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fd05:	74 28                	je     f010fd2f <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010fd07:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010fd0e:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fd14:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f010fd19:	01 d0                	add    %edx,%eax
f010fd1b:	83 ec 04             	sub    $0x4,%esp
f010fd1e:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fd21:	50                   	push   %eax
f010fd22:	68 3c 56 13 f0       	push   $0xf013563c
f010fd27:	e8 05 11 ff ff       	call   f0100e31 <cprintf>
f010fd2c:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fd2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd32:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fd39:	83 ec 0c             	sub    $0xc,%esp
f010fd3c:	50                   	push   %eax
f010fd3d:	e8 0f fd 01 00       	call   f012fa51 <is_free_block>
f010fd42:	83 c4 10             	add    $0x10,%esp
f010fd45:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fd48:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fd4c:	74 17                	je     f010fd65 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010fd4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fd55:	83 ec 0c             	sub    $0xc,%esp
f010fd58:	68 a0 56 13 f0       	push   $0xf01356a0
f010fd5d:	e8 cf 10 ff ff       	call   f0100e31 <cprintf>
f010fd62:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fd65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd68:	40                   	inc    %eax
f010fd69:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fd70:	83 ec 0c             	sub    $0xc,%esp
f010fd73:	50                   	push   %eax
f010fd74:	e8 c2 fc 01 00       	call   f012fa3b <get_block_size>
f010fd79:	83 c4 10             	add    $0x10,%esp
f010fd7c:	85 c0                	test   %eax,%eax
f010fd7e:	75 1b                	jne    f010fd9b <test_free_block_FF+0xa7a>
f010fd80:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd83:	40                   	inc    %eax
f010fd84:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fd8b:	83 ec 0c             	sub    $0xc,%esp
f010fd8e:	50                   	push   %eax
f010fd8f:	e8 bd fc 01 00       	call   f012fa51 <is_free_block>
f010fd94:	83 c4 10             	add    $0x10,%esp
f010fd97:	84 c0                	test   %al,%al
f010fd99:	74 17                	je     f010fdb2 <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010fd9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fda2:	83 ec 0c             	sub    $0xc,%esp
f010fda5:	68 f8 56 13 f0       	push   $0xf01356f8
f010fdaa:	e8 82 10 ff ff       	call   f0100e31 <cprintf>
f010fdaf:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fdb2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fdb6:	74 04                	je     f010fdbc <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010fdb8:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010fdbc:	83 ec 0c             	sub    $0xc,%esp
f010fdbf:	68 64 57 13 f0       	push   $0xf0135764
f010fdc4:	e8 68 10 ff ff       	call   f0100e31 <cprintf>
f010fdc9:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fdcc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010fdd3:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fdda:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fddd:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fde4:	83 ec 0c             	sub    $0xc,%esp
f010fde7:	50                   	push   %eax
f010fde8:	e8 c2 01 02 00       	call   f012ffaf <free_block>
f010fded:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010fdf0:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fdf7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdfa:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fe01:	83 ec 0c             	sub    $0xc,%esp
f010fe04:	50                   	push   %eax
f010fe05:	e8 a5 01 02 00       	call   f012ffaf <free_block>
f010fe0a:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fe0d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe10:	48                   	dec    %eax
f010fe11:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fe18:	83 ec 0c             	sub    $0xc,%esp
f010fe1b:	50                   	push   %eax
f010fe1c:	e8 1a fc 01 00       	call   f012fa3b <get_block_size>
f010fe21:	83 c4 10             	add    $0x10,%esp
f010fe24:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010fe27:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f010fe2d:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f010fe32:	01 c2                	add    %eax,%edx
f010fe34:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f010fe39:	01 d0                	add    %edx,%eax
f010fe3b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fe3e:	74 2f                	je     f010fe6f <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010fe40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010fe47:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f010fe4d:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f010fe52:	01 c2                	add    %eax,%edx
f010fe54:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f010fe59:	01 d0                	add    %edx,%eax
f010fe5b:	83 ec 04             	sub    $0x4,%esp
f010fe5e:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fe61:	50                   	push   %eax
f010fe62:	68 a4 57 13 f0       	push   $0xf01357a4
f010fe67:	e8 c5 0f ff ff       	call   f0100e31 <cprintf>
f010fe6c:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fe6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe72:	48                   	dec    %eax
f010fe73:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fe7a:	83 ec 0c             	sub    $0xc,%esp
f010fe7d:	50                   	push   %eax
f010fe7e:	e8 ce fb 01 00       	call   f012fa51 <is_free_block>
f010fe83:	83 c4 10             	add    $0x10,%esp
f010fe86:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fe89:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fe8d:	74 17                	je     f010fea6 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010fe8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fe96:	83 ec 0c             	sub    $0xc,%esp
f010fe99:	68 08 58 13 f0       	push   $0xf0135808
f010fe9e:	e8 8e 0f ff ff       	call   f0100e31 <cprintf>
f010fea3:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fea6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fea9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010feb0:	83 ec 0c             	sub    $0xc,%esp
f010feb3:	50                   	push   %eax
f010feb4:	e8 82 fb 01 00       	call   f012fa3b <get_block_size>
f010feb9:	83 c4 10             	add    $0x10,%esp
f010febc:	85 c0                	test   %eax,%eax
f010febe:	75 50                	jne    f010ff10 <test_free_block_FF+0xbef>
f010fec0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fec3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010feca:	83 ec 0c             	sub    $0xc,%esp
f010fecd:	50                   	push   %eax
f010fece:	e8 7e fb 01 00       	call   f012fa51 <is_free_block>
f010fed3:	83 c4 10             	add    $0x10,%esp
f010fed6:	84 c0                	test   %al,%al
f010fed8:	75 36                	jne    f010ff10 <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010feda:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fedd:	40                   	inc    %eax
f010fede:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fee5:	83 ec 0c             	sub    $0xc,%esp
f010fee8:	50                   	push   %eax
f010fee9:	e8 4d fb 01 00       	call   f012fa3b <get_block_size>
f010feee:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fef1:	85 c0                	test   %eax,%eax
f010fef3:	75 1b                	jne    f010ff10 <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fef5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fef8:	40                   	inc    %eax
f010fef9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010ff00:	83 ec 0c             	sub    $0xc,%esp
f010ff03:	50                   	push   %eax
f010ff04:	e8 48 fb 01 00       	call   f012fa51 <is_free_block>
f010ff09:	83 c4 10             	add    $0x10,%esp
f010ff0c:	84 c0                	test   %al,%al
f010ff0e:	74 17                	je     f010ff27 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010ff10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010ff17:	83 ec 0c             	sub    $0xc,%esp
f010ff1a:	68 60 58 13 f0       	push   $0xf0135860
f010ff1f:	e8 0d 0f ff ff       	call   f0100e31 <cprintf>
f010ff24:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff2b:	74 04                	je     f010ff31 <test_free_block_FF+0xc10>
	{
		eval += 20;
f010ff2d:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010ff31:	83 ec 0c             	sub    $0xc,%esp
f010ff34:	68 cc 58 13 f0       	push   $0xf01358cc
f010ff39:	e8 f3 0e ff ff       	call   f0100e31 <cprintf>
f010ff3e:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010ff41:	83 ec 0c             	sub    $0xc,%esp
f010ff44:	68 10 59 13 f0       	push   $0xf0135910
f010ff49:	e8 e3 0e ff ff       	call   f0100e31 <cprintf>
f010ff4e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff51:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010ff58:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff5f:	83 ec 08             	sub    $0x8,%esp
f010ff62:	6a 01                	push   $0x1
f010ff64:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff67:	e8 fc fa 01 00       	call   f012fa68 <alloc_block>
f010ff6c:	83 c4 10             	add    $0x10,%esp
f010ff6f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010ff72:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff79:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff7d:	74 08                	je     f010ff87 <test_free_block_FF+0xc66>
f010ff7f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff82:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff85:	74 1d                	je     f010ffa4 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010ff87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff8e:	83 ec 04             	sub    $0x4,%esp
f010ff91:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff94:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff97:	68 38 59 13 f0       	push   $0xf0135938
f010ff9c:	e8 90 0e ff ff       	call   f0100e31 <cprintf>
f010ffa1:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010ffa4:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ffab:	83 ec 08             	sub    $0x8,%esp
f010ffae:	6a 01                	push   $0x1
f010ffb0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ffb3:	e8 b0 fa 01 00       	call   f012fa68 <alloc_block>
f010ffb8:	83 c4 10             	add    $0x10,%esp
f010ffbb:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010ffbe:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ffc5:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ffc9:	74 08                	je     f010ffd3 <test_free_block_FF+0xcb2>
f010ffcb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ffce:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ffd1:	74 1d                	je     f010fff0 <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010ffd3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ffda:	83 ec 04             	sub    $0x4,%esp
f010ffdd:	ff 75 c0             	pushl  -0x40(%ebp)
f010ffe0:	ff 75 a8             	pushl  -0x58(%ebp)
f010ffe3:	68 9c 59 13 f0       	push   $0xf013599c
f010ffe8:	e8 44 0e ff ff       	call   f0100e31 <cprintf>
f010ffed:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010fff0:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fff7:	83 ec 08             	sub    $0x8,%esp
f010fffa:	6a 01                	push   $0x1
f010fffc:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ffff:	e8 64 fa 01 00       	call   f012fa68 <alloc_block>
f0110004:	83 c4 10             	add    $0x10,%esp
f0110007:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f011000a:	a1 9c a6 2d f0       	mov    0xf02da69c,%eax
f011000f:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110012:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110016:	74 08                	je     f0110020 <test_free_block_FF+0xcff>
f0110018:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011001b:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f011001e:	74 1d                	je     f011003d <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f0110020:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110027:	83 ec 04             	sub    $0x4,%esp
f011002a:	ff 75 c0             	pushl  -0x40(%ebp)
f011002d:	ff 75 a8             	pushl  -0x58(%ebp)
f0110030:	68 00 5a 13 f0       	push   $0xf0135a00
f0110035:	e8 f7 0d ff ff       	call   f0100e31 <cprintf>
f011003a:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011003d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110041:	74 04                	je     f0110047 <test_free_block_FF+0xd26>
	{
		eval += 10;
f0110043:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110047:	83 ec 0c             	sub    $0xc,%esp
f011004a:	68 64 5a 13 f0       	push   $0xf0135a64
f011004f:	e8 dd 0d ff ff       	call   f0100e31 <cprintf>
f0110054:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110057:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f011005e:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110065:	83 ec 08             	sub    $0x8,%esp
f0110068:	6a 01                	push   $0x1
f011006a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011006d:	e8 f6 f9 01 00       	call   f012fa68 <alloc_block>
f0110072:	83 c4 10             	add    $0x10,%esp
f0110075:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110078:	a1 f8 af 2d f0       	mov    0xf02daff8,%eax
f011007d:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110080:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110084:	74 08                	je     f011008e <test_free_block_FF+0xd6d>
f0110086:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110089:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f011008c:	74 1d                	je     f01100ab <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f011008e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110095:	83 ec 04             	sub    $0x4,%esp
f0110098:	ff 75 c0             	pushl  -0x40(%ebp)
f011009b:	ff 75 a8             	pushl  -0x58(%ebp)
f011009e:	68 94 5a 13 f0       	push   $0xf0135a94
f01100a3:	e8 89 0d ff ff       	call   f0100e31 <cprintf>
f01100a8:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01100ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01100af:	74 04                	je     f01100b5 <test_free_block_FF+0xd94>
	{
		eval += 10;
f01100b1:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f01100b5:	83 ec 0c             	sub    $0xc,%esp
f01100b8:	68 f8 5a 13 f0       	push   $0xf0135af8
f01100bd:	e8 6f 0d ff ff       	call   f0100e31 <cprintf>
f01100c2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01100c5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f01100cc:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01100d3:	83 ec 08             	sub    $0x8,%esp
f01100d6:	6a 01                	push   $0x1
f01100d8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01100db:	e8 88 f9 01 00       	call   f012fa68 <alloc_block>
f01100e0:	83 c4 10             	add    $0x10,%esp
f01100e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f01100e6:	a1 c0 a9 2d f0       	mov    0xf02da9c0,%eax
f01100eb:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f01100ee:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01100f2:	74 08                	je     f01100fc <test_free_block_FF+0xddb>
f01100f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01100f7:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f01100fa:	74 1d                	je     f0110119 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f01100fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110103:	83 ec 04             	sub    $0x4,%esp
f0110106:	ff 75 c0             	pushl  -0x40(%ebp)
f0110109:	ff 75 a8             	pushl  -0x58(%ebp)
f011010c:	68 94 5a 13 f0       	push   $0xf0135a94
f0110111:	e8 1b 0d ff ff       	call   f0100e31 <cprintf>
f0110116:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f0110119:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110120:	83 ec 08             	sub    $0x8,%esp
f0110123:	6a 01                	push   $0x1
f0110125:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110128:	e8 3b f9 01 00       	call   f012fa68 <alloc_block>
f011012d:	83 c4 10             	add    $0x10,%esp
f0110130:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110133:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f0110138:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011013b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011013f:	74 08                	je     f0110149 <test_free_block_FF+0xe28>
f0110141:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110144:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110147:	74 1d                	je     f0110166 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f0110149:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110150:	83 ec 04             	sub    $0x4,%esp
f0110153:	ff 75 c0             	pushl  -0x40(%ebp)
f0110156:	ff 75 a8             	pushl  -0x58(%ebp)
f0110159:	68 20 5b 13 f0       	push   $0xf0135b20
f011015e:	e8 ce 0c ff ff       	call   f0100e31 <cprintf>
f0110163:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110166:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011016a:	74 04                	je     f0110170 <test_free_block_FF+0xe4f>
	{
		eval += 10;
f011016c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0110170:	83 ec 08             	sub    $0x8,%esp
f0110173:	ff 75 f4             	pushl  -0xc(%ebp)
f0110176:	68 84 5b 13 f0       	push   $0xf0135b84
f011017b:	e8 b1 0c ff ff       	call   f0100e31 <cprintf>
f0110180:	83 c4 10             	add    $0x10,%esp

}
f0110183:	90                   	nop
f0110184:	c9                   	leave  
f0110185:	c3                   	ret    

f0110186 <test_free_block_BF>:

void test_free_block_BF()
{
f0110186:	55                   	push   %ebp
f0110187:	89 e5                	mov    %esp,%ebp
f0110189:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f011018c:	83 ec 0c             	sub    $0xc,%esp
f011018f:	68 f4 4c 13 f0       	push   $0xf0134cf4
f0110194:	e8 98 0c ff ff       	call   f0100e31 <cprintf>
f0110199:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f011019c:	83 ec 0c             	sub    $0xc,%esp
f011019f:	68 34 4d 13 f0       	push   $0xf0134d34
f01101a4:	e8 88 0c ff ff       	call   f0100e31 <cprintf>
f01101a9:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f01101ac:	83 ec 0c             	sub    $0xc,%esp
f01101af:	68 f4 4c 13 f0       	push   $0xf0134cf4
f01101b4:	e8 78 0c ff ff       	call   f0100e31 <cprintf>
f01101b9:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f01101bc:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01101c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01101c6:	83 ec 08             	sub    $0x8,%esp
f01101c9:	50                   	push   %eax
f01101ca:	68 00 00 00 f6       	push   $0xf6000000
f01101cf:	e8 ad f9 01 00       	call   f012fb81 <initialize_dynamic_allocator>
f01101d4:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f01101d7:	83 ec 0c             	sub    $0xc,%esp
f01101da:	68 74 4d 13 f0       	push   $0xf0134d74
f01101df:	e8 4d 0c ff ff       	call   f0100e31 <cprintf>
f01101e4:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f01101e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01101ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01101f5:	eb 2a                	jmp    f0110221 <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01101f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01101fa:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f0110201:	89 d0                	mov    %edx,%eax
f0110203:	c1 e0 02             	shl    $0x2,%eax
f0110206:	01 d0                	add    %edx,%eax
f0110208:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011020f:	01 d0                	add    %edx,%eax
f0110211:	c1 e0 03             	shl    $0x3,%eax
f0110214:	89 c2                	mov    %eax,%edx
f0110216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110219:	01 d0                	add    %edx,%eax
f011021b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f011021e:	ff 45 f0             	incl   -0x10(%ebp)
f0110221:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f0110225:	7e d0                	jle    f01101f7 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110227:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011022a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011022d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f0110230:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0110234:	7f 17                	jg     f011024d <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110236:	83 ec 04             	sub    $0x4,%esp
f0110239:	68 cc 4d 13 f0       	push   $0xf0134dcc
f011023e:	68 90 03 00 00       	push   $0x390
f0110243:	68 50 43 13 f0       	push   $0xf0134350
f0110248:	e8 63 ff fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f011024d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110254:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011025b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0110262:	e9 f8 00 00 00       	jmp    f011035f <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110267:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011026e:	e9 dc 00 00 00       	jmp    f011034f <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110273:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110276:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f011027d:	83 e8 10             	sub    $0x10,%eax
f0110280:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110283:	83 ec 08             	sub    $0x8,%esp
f0110286:	6a 03                	push   $0x3
f0110288:	ff 75 cc             	pushl  -0x34(%ebp)
f011028b:	e8 d8 f7 01 00       	call   f012fa68 <alloc_block>
f0110290:	83 c4 10             	add    $0x10,%esp
f0110293:	89 c2                	mov    %eax,%edx
f0110295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110298:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f011029f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102a2:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01102a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f01102ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102af:	d1 e8                	shr    %eax
f01102b1:	89 c2                	mov    %eax,%edx
f01102b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102b6:	01 c2                	add    %eax,%edx
f01102b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102bb:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01102c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102c5:	8d 50 fe             	lea    -0x2(%eax),%edx
f01102c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102cb:	01 c2                	add    %eax,%edx
f01102cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102d0:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01102d7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01102db:	74 0b                	je     f01102e8 <test_free_block_BF+0x162>
f01102dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01102e0:	83 c0 10             	add    $0x10,%eax
f01102e3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01102e6:	74 24                	je     f011030c <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f01102e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01102eb:	83 c0 10             	add    $0x10,%eax
f01102ee:	83 ec 08             	sub    $0x8,%esp
f01102f1:	ff 75 c8             	pushl  -0x38(%ebp)
f01102f4:	50                   	push   %eax
f01102f5:	ff 75 ec             	pushl  -0x14(%ebp)
f01102f8:	68 c0 5b 13 f0       	push   $0xf0135bc0
f01102fd:	68 9f 03 00 00       	push   $0x39f
f0110302:	68 50 43 13 f0       	push   $0xf0134350
f0110307:	e8 a4 fe fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f011030c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011030f:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0110316:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0110319:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011031c:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f0110323:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110326:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110329:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011032c:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f0110333:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110336:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110339:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011033c:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f0110343:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110346:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110349:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011034c:	ff 45 e0             	incl   -0x20(%ebp)
f011034f:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0110356:	0f 8e 17 ff ff ff    	jle    f0110273 <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011035c:	ff 45 e4             	incl   -0x1c(%ebp)
f011035f:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f0110363:	0f 8e fe fe ff ff    	jle    f0110267 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110369:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011036c:	83 e8 10             	sub    $0x10,%eax
f011036f:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110372:	83 ec 08             	sub    $0x8,%esp
f0110375:	6a 03                	push   $0x3
f0110377:	ff 75 cc             	pushl  -0x34(%ebp)
f011037a:	e8 e9 f6 01 00       	call   f012fa68 <alloc_block>
f011037f:	83 c4 10             	add    $0x10,%esp
f0110382:	89 c2                	mov    %eax,%edx
f0110384:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110387:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f011038e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110391:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110398:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f011039b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011039e:	d1 e8                	shr    %eax
f01103a0:	89 c2                	mov    %eax,%edx
f01103a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01103a5:	01 c2                	add    %eax,%edx
f01103a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103aa:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01103b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01103b4:	8d 50 fe             	lea    -0x2(%eax),%edx
f01103b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01103ba:	01 c2                	add    %eax,%edx
f01103bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103bf:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01103c6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01103ca:	74 0b                	je     f01103d7 <test_free_block_BF+0x251>
f01103cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01103cf:	83 c0 10             	add    $0x10,%eax
f01103d2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01103d5:	74 17                	je     f01103ee <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f01103d7:	83 ec 04             	sub    $0x4,%esp
f01103da:	68 24 5c 13 f0       	push   $0xf0135c24
f01103df:	68 b0 03 00 00       	push   $0x3b0
f01103e4:	68 50 43 13 f0       	push   $0xf0134350
f01103e9:	e8 c2 fd fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f01103ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103f1:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f01103f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103fb:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01103fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110401:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f0110408:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011040b:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f011040e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110411:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f0110418:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011041b:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f011041e:	83 ec 0c             	sub    $0xc,%esp
f0110421:	68 f0 4e 13 f0       	push   $0xf0134ef0
f0110426:	e8 06 0a ff ff       	call   f0100e31 <cprintf>
f011042b:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f011042e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110435:	eb 59                	jmp    f0110490 <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110437:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011043a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110441:	66 8b 00             	mov    (%eax),%ax
f0110444:	98                   	cwtl   
f0110445:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0110448:	75 26                	jne    f0110470 <test_free_block_BF+0x2ea>
f011044a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011044d:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0110454:	66 8b 00             	mov    (%eax),%ax
f0110457:	98                   	cwtl   
f0110458:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011045b:	75 13                	jne    f0110470 <test_free_block_BF+0x2ea>
f011045d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110460:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f0110467:	66 8b 00             	mov    (%eax),%ax
f011046a:	98                   	cwtl   
f011046b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011046e:	74 1d                	je     f011048d <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0110470:	83 ec 0c             	sub    $0xc,%esp
f0110473:	ff 75 dc             	pushl  -0x24(%ebp)
f0110476:	ff 75 dc             	pushl  -0x24(%ebp)
f0110479:	68 6c 5c 13 f0       	push   $0xf0135c6c
f011047e:	68 bc 03 00 00       	push   $0x3bc
f0110483:	68 50 43 13 f0       	push   $0xf0134350
f0110488:	e8 23 fd fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f011048d:	ff 45 dc             	incl   -0x24(%ebp)
f0110490:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110493:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110496:	7c 9f                	jl     f0110437 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110498:	83 ec 0c             	sub    $0xc,%esp
f011049b:	68 74 4f 13 f0       	push   $0xf0134f74
f01104a0:	e8 8c 09 ff ff       	call   f0100e31 <cprintf>
f01104a5:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01104a8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01104af:	e9 d8 00 00 00       	jmp    f011058c <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f01104b4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01104b7:	89 d0                	mov    %edx,%eax
f01104b9:	c1 e0 02             	shl    $0x2,%eax
f01104bc:	01 d0                	add    %edx,%eax
f01104be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01104c5:	01 d0                	add    %edx,%eax
f01104c7:	c1 e0 03             	shl    $0x3,%eax
f01104ca:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01104d1:	83 ec 0c             	sub    $0xc,%esp
f01104d4:	50                   	push   %eax
f01104d5:	e8 d5 fa 01 00       	call   f012ffaf <free_block>
f01104da:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01104dd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01104e0:	89 d0                	mov    %edx,%eax
f01104e2:	c1 e0 02             	shl    $0x2,%eax
f01104e5:	01 d0                	add    %edx,%eax
f01104e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01104ee:	01 d0                	add    %edx,%eax
f01104f0:	c1 e0 03             	shl    $0x3,%eax
f01104f3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01104fa:	83 ec 0c             	sub    $0xc,%esp
f01104fd:	50                   	push   %eax
f01104fe:	e8 38 f5 01 00       	call   f012fa3b <get_block_size>
f0110503:	83 c4 10             	add    $0x10,%esp
f0110506:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f0110509:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011050c:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0110513:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0110516:	74 28                	je     f0110540 <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110518:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011051b:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0110522:	83 ec 08             	sub    $0x8,%esp
f0110525:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110528:	50                   	push   %eax
f0110529:	ff 75 d8             	pushl  -0x28(%ebp)
f011052c:	68 bc 5c 13 f0       	push   $0xf0135cbc
f0110531:	68 c9 03 00 00       	push   $0x3c9
f0110536:	68 50 43 13 f0       	push   $0xf0134350
f011053b:	e8 70 fc fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f0110540:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110543:	89 d0                	mov    %edx,%eax
f0110545:	c1 e0 02             	shl    $0x2,%eax
f0110548:	01 d0                	add    %edx,%eax
f011054a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110551:	01 d0                	add    %edx,%eax
f0110553:	c1 e0 03             	shl    $0x3,%eax
f0110556:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011055d:	83 ec 0c             	sub    $0xc,%esp
f0110560:	50                   	push   %eax
f0110561:	e8 eb f4 01 00       	call   f012fa51 <is_free_block>
f0110566:	83 c4 10             	add    $0x10,%esp
f0110569:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f011056c:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f0110570:	74 17                	je     f0110589 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0110572:	ff 75 d8             	pushl  -0x28(%ebp)
f0110575:	68 1c 5d 13 f0       	push   $0xf0135d1c
f011057a:	68 cc 03 00 00       	push   $0x3cc
f011057f:	68 50 43 13 f0       	push   $0xf0134350
f0110584:	e8 27 fc fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110589:	ff 45 d8             	incl   -0x28(%ebp)
f011058c:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f0110590:	0f 8e 1e ff ff ff    	jle    f01104b4 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110596:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f011059b:	83 ec 0c             	sub    $0xc,%esp
f011059e:	50                   	push   %eax
f011059f:	e8 0b fa 01 00       	call   f012ffaf <free_block>
f01105a4:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f01105a7:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f01105ac:	83 ec 0c             	sub    $0xc,%esp
f01105af:	50                   	push   %eax
f01105b0:	e8 86 f4 01 00       	call   f012fa3b <get_block_size>
f01105b5:	83 c4 10             	add    $0x10,%esp
f01105b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f01105bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01105be:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f01105c1:	74 1d                	je     f01105e0 <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f01105c3:	83 ec 0c             	sub    $0xc,%esp
f01105c6:	ff 75 bc             	pushl  -0x44(%ebp)
f01105c9:	ff 75 d0             	pushl  -0x30(%ebp)
f01105cc:	68 74 5d 13 f0       	push   $0xf0135d74
f01105d1:	68 d3 03 00 00       	push   $0x3d3
f01105d6:	68 50 43 13 f0       	push   $0xf0134350
f01105db:	e8 d0 fb fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f01105e0:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f01105e5:	83 ec 0c             	sub    $0xc,%esp
f01105e8:	50                   	push   %eax
f01105e9:	e8 63 f4 01 00       	call   f012fa51 <is_free_block>
f01105ee:	83 c4 10             	add    $0x10,%esp
f01105f1:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01105f4:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01105f8:	74 17                	je     f0110611 <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01105fa:	83 ec 04             	sub    $0x4,%esp
f01105fd:	68 d4 5d 13 f0       	push   $0xf0135dd4
f0110602:	68 d6 03 00 00       	push   $0x3d6
f0110607:	68 50 43 13 f0       	push   $0xf0134350
f011060c:	e8 9f fb fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f0110611:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110614:	83 e8 10             	sub    $0x10,%eax
f0110617:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011061a:	83 ec 08             	sub    $0x8,%esp
f011061d:	6a 03                	push   $0x3
f011061f:	ff 75 cc             	pushl  -0x34(%ebp)
f0110622:	e8 41 f4 01 00       	call   f012fa68 <alloc_block>
f0110627:	83 c4 10             	add    $0x10,%esp
f011062a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011062d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110631:	74 0b                	je     f011063e <test_free_block_BF+0x4b8>
f0110633:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110636:	83 c0 10             	add    $0x10,%eax
f0110639:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011063c:	74 17                	je     f0110655 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f011063e:	83 ec 04             	sub    $0x4,%esp
f0110641:	68 28 5e 13 f0       	push   $0xf0135e28
f0110646:	68 dd 03 00 00       	push   $0x3dd
f011064b:	68 50 43 13 f0       	push   $0xf0134350
f0110650:	e8 5b fb fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110655:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f011065a:	83 ec 0c             	sub    $0xc,%esp
f011065d:	50                   	push   %eax
f011065e:	e8 4c f9 01 00       	call   f012ffaf <free_block>
f0110663:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f0110666:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f011066b:	83 ec 0c             	sub    $0xc,%esp
f011066e:	50                   	push   %eax
f011066f:	e8 c7 f3 01 00       	call   f012fa3b <get_block_size>
f0110674:	83 c4 10             	add    $0x10,%esp
f0110677:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f011067a:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f011067f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110682:	74 20                	je     f01106a4 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110684:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f0110689:	83 ec 0c             	sub    $0xc,%esp
f011068c:	ff 75 bc             	pushl  -0x44(%ebp)
f011068f:	50                   	push   %eax
f0110690:	68 74 5e 13 f0       	push   $0xf0135e74
f0110695:	68 e3 03 00 00       	push   $0x3e3
f011069a:	68 50 43 13 f0       	push   $0xf0134350
f011069f:	e8 0c fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f01106a4:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f01106a9:	83 ec 0c             	sub    $0xc,%esp
f01106ac:	50                   	push   %eax
f01106ad:	e8 9f f3 01 00       	call   f012fa51 <is_free_block>
f01106b2:	83 c4 10             	add    $0x10,%esp
f01106b5:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01106b8:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01106bc:	74 17                	je     f01106d5 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01106be:	83 ec 04             	sub    $0x4,%esp
f01106c1:	68 d4 5e 13 f0       	push   $0xf0135ed4
f01106c6:	68 e6 03 00 00       	push   $0x3e6
f01106cb:	68 50 43 13 f0       	push   $0xf0134350
f01106d0:	e8 db fa fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f01106d5:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f01106da:	83 e8 10             	sub    $0x10,%eax
f01106dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01106e0:	83 ec 08             	sub    $0x8,%esp
f01106e3:	6a 03                	push   $0x3
f01106e5:	ff 75 cc             	pushl  -0x34(%ebp)
f01106e8:	e8 7b f3 01 00       	call   f012fa68 <alloc_block>
f01106ed:	83 c4 10             	add    $0x10,%esp
f01106f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f01106f3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01106f7:	74 09                	je     f0110702 <test_free_block_BF+0x57c>
f01106f9:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f0110700:	74 17                	je     f0110719 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110702:	83 ec 04             	sub    $0x4,%esp
f0110705:	68 28 5f 13 f0       	push   $0xf0135f28
f011070a:	68 ed 03 00 00       	push   $0x3ed
f011070f:	68 50 43 13 f0       	push   $0xf0134350
f0110714:	e8 97 fa fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0110719:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f011071e:	83 ec 0c             	sub    $0xc,%esp
f0110721:	50                   	push   %eax
f0110722:	e8 88 f8 01 00       	call   f012ffaf <free_block>
f0110727:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f011072a:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f011072f:	83 ec 0c             	sub    $0xc,%esp
f0110732:	50                   	push   %eax
f0110733:	e8 03 f3 01 00       	call   f012fa3b <get_block_size>
f0110738:	83 c4 10             	add    $0x10,%esp
f011073b:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f011073e:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110743:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110746:	74 20                	je     f0110768 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f0110748:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f011074d:	83 ec 0c             	sub    $0xc,%esp
f0110750:	ff 75 bc             	pushl  -0x44(%ebp)
f0110753:	50                   	push   %eax
f0110754:	68 74 5f 13 f0       	push   $0xf0135f74
f0110759:	68 f3 03 00 00       	push   $0x3f3
f011075e:	68 50 43 13 f0       	push   $0xf0134350
f0110763:	e8 48 fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f0110768:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f011076d:	83 ec 0c             	sub    $0xc,%esp
f0110770:	50                   	push   %eax
f0110771:	e8 db f2 01 00       	call   f012fa51 <is_free_block>
f0110776:	83 c4 10             	add    $0x10,%esp
f0110779:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011077c:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110780:	74 17                	je     f0110799 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110782:	83 ec 04             	sub    $0x4,%esp
f0110785:	68 d4 5f 13 f0       	push   $0xf0135fd4
f011078a:	68 f6 03 00 00       	push   $0x3f6
f011078f:	68 50 43 13 f0       	push   $0xf0134350
f0110794:	e8 17 fa fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110799:	83 ec 0c             	sub    $0xc,%esp
f011079c:	68 20 53 13 f0       	push   $0xf0135320
f01107a1:	e8 8b 06 ff ff       	call   f0100e31 <cprintf>
f01107a6:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f01107a9:	83 ec 0c             	sub    $0xc,%esp
f01107ac:	68 5c 53 13 f0       	push   $0xf013535c
f01107b1:	e8 7b 06 ff ff       	call   f0100e31 <cprintf>
f01107b6:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f01107b9:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01107c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107c3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01107ca:	83 ec 0c             	sub    $0xc,%esp
f01107cd:	50                   	push   %eax
f01107ce:	e8 dc f7 01 00       	call   f012ffaf <free_block>
f01107d3:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01107d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107d9:	48                   	dec    %eax
f01107da:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01107e1:	83 ec 0c             	sub    $0xc,%esp
f01107e4:	50                   	push   %eax
f01107e5:	e8 51 f2 01 00       	call   f012fa3b <get_block_size>
f01107ea:	83 c4 10             	add    $0x10,%esp
f01107ed:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f01107f0:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f01107f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01107f9:	01 d0                	add    %edx,%eax
f01107fb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01107fe:	74 26                	je     f0110826 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f0110800:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f0110806:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110809:	01 d0                	add    %edx,%eax
f011080b:	83 ec 0c             	sub    $0xc,%esp
f011080e:	ff 75 bc             	pushl  -0x44(%ebp)
f0110811:	50                   	push   %eax
f0110812:	68 28 60 13 f0       	push   $0xf0136028
f0110817:	68 01 04 00 00       	push   $0x401
f011081c:	68 50 43 13 f0       	push   $0xf0134350
f0110821:	e8 8a f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110826:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110829:	48                   	dec    %eax
f011082a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110831:	83 ec 0c             	sub    $0xc,%esp
f0110834:	50                   	push   %eax
f0110835:	e8 17 f2 01 00       	call   f012fa51 <is_free_block>
f011083a:	83 c4 10             	add    $0x10,%esp
f011083d:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110840:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110844:	74 17                	je     f011085d <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110846:	83 ec 04             	sub    $0x4,%esp
f0110849:	68 88 60 13 f0       	push   $0xf0136088
f011084e:	68 04 04 00 00       	push   $0x404
f0110853:	68 50 43 13 f0       	push   $0xf0134350
f0110858:	e8 53 f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011085d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110860:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110867:	83 ec 0c             	sub    $0xc,%esp
f011086a:	50                   	push   %eax
f011086b:	e8 cb f1 01 00       	call   f012fa3b <get_block_size>
f0110870:	83 c4 10             	add    $0x10,%esp
f0110873:	85 c0                	test   %eax,%eax
f0110875:	75 1a                	jne    f0110891 <test_free_block_BF+0x70b>
f0110877:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011087a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110881:	83 ec 0c             	sub    $0xc,%esp
f0110884:	50                   	push   %eax
f0110885:	e8 c7 f1 01 00       	call   f012fa51 <is_free_block>
f011088a:	83 c4 10             	add    $0x10,%esp
f011088d:	84 c0                	test   %al,%al
f011088f:	74 17                	je     f01108a8 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110891:	83 ec 04             	sub    $0x4,%esp
f0110894:	68 dc 60 13 f0       	push   $0xf01360dc
f0110899:	68 07 04 00 00       	push   $0x407
f011089e:	68 50 43 13 f0       	push   $0xf0134350
f01108a3:	e8 08 f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f01108a8:	83 ec 0c             	sub    $0xc,%esp
f01108ab:	68 96 54 13 f0       	push   $0xf0135496
f01108b0:	e8 7c 05 ff ff       	call   f0100e31 <cprintf>
f01108b5:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f01108b8:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01108bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108c2:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01108c9:	83 ec 0c             	sub    $0xc,%esp
f01108cc:	50                   	push   %eax
f01108cd:	e8 dd f6 01 00       	call   f012ffaf <free_block>
f01108d2:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01108d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108d8:	48                   	dec    %eax
f01108d9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01108e0:	83 ec 0c             	sub    $0xc,%esp
f01108e3:	50                   	push   %eax
f01108e4:	e8 52 f1 01 00       	call   f012fa3b <get_block_size>
f01108e9:	83 c4 10             	add    $0x10,%esp
f01108ec:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f01108ef:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f01108f5:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f01108fa:	01 d0                	add    %edx,%eax
f01108fc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01108ff:	74 28                	je     f0110929 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f0110901:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f0110907:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f011090c:	01 d0                	add    %edx,%eax
f011090e:	83 ec 0c             	sub    $0xc,%esp
f0110911:	ff 75 bc             	pushl  -0x44(%ebp)
f0110914:	50                   	push   %eax
f0110915:	68 48 61 13 f0       	push   $0xf0136148
f011091a:	68 10 04 00 00       	push   $0x410
f011091f:	68 50 43 13 f0       	push   $0xf0134350
f0110924:	e8 87 f8 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110929:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011092c:	48                   	dec    %eax
f011092d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110934:	83 ec 0c             	sub    $0xc,%esp
f0110937:	50                   	push   %eax
f0110938:	e8 14 f1 01 00       	call   f012fa51 <is_free_block>
f011093d:	83 c4 10             	add    $0x10,%esp
f0110940:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110943:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110947:	74 17                	je     f0110960 <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110949:	83 ec 04             	sub    $0x4,%esp
f011094c:	68 a8 61 13 f0       	push   $0xf01361a8
f0110951:	68 13 04 00 00       	push   $0x413
f0110956:	68 50 43 13 f0       	push   $0xf0134350
f011095b:	e8 50 f8 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f0110960:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110963:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011096a:	83 ec 0c             	sub    $0xc,%esp
f011096d:	50                   	push   %eax
f011096e:	e8 c8 f0 01 00       	call   f012fa3b <get_block_size>
f0110973:	83 c4 10             	add    $0x10,%esp
f0110976:	85 c0                	test   %eax,%eax
f0110978:	75 1a                	jne    f0110994 <test_free_block_BF+0x80e>
f011097a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011097d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110984:	83 ec 0c             	sub    $0xc,%esp
f0110987:	50                   	push   %eax
f0110988:	e8 c4 f0 01 00       	call   f012fa51 <is_free_block>
f011098d:	83 c4 10             	add    $0x10,%esp
f0110990:	84 c0                	test   %al,%al
f0110992:	74 17                	je     f01109ab <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110994:	83 ec 04             	sub    $0x4,%esp
f0110997:	68 fc 61 13 f0       	push   $0xf01361fc
f011099c:	68 16 04 00 00       	push   $0x416
f01109a1:	68 50 43 13 f0       	push   $0xf0134350
f01109a6:	e8 05 f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f01109ab:	83 ec 0c             	sub    $0xc,%esp
f01109ae:	68 d4 55 13 f0       	push   $0xf01355d4
f01109b3:	e8 79 04 ff ff       	call   f0100e31 <cprintf>
f01109b8:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01109bb:	83 ec 0c             	sub    $0xc,%esp
f01109be:	68 0c 56 13 f0       	push   $0xf013560c
f01109c3:	e8 69 04 ff ff       	call   f0100e31 <cprintf>
f01109c8:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f01109cb:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01109d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109d5:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01109dc:	83 ec 0c             	sub    $0xc,%esp
f01109df:	50                   	push   %eax
f01109e0:	e8 ca f5 01 00       	call   f012ffaf <free_block>
f01109e5:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f01109e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109eb:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01109f2:	83 ec 0c             	sub    $0xc,%esp
f01109f5:	50                   	push   %eax
f01109f6:	e8 40 f0 01 00       	call   f012fa3b <get_block_size>
f01109fb:	83 c4 10             	add    $0x10,%esp
f01109fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f0110a01:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110a07:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110a0c:	01 d0                	add    %edx,%eax
f0110a0e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110a11:	74 28                	je     f0110a3b <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f0110a13:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110a19:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110a1e:	01 d0                	add    %edx,%eax
f0110a20:	83 ec 0c             	sub    $0xc,%esp
f0110a23:	ff 75 bc             	pushl  -0x44(%ebp)
f0110a26:	50                   	push   %eax
f0110a27:	68 48 61 13 f0       	push   $0xf0136148
f0110a2c:	68 20 04 00 00       	push   $0x420
f0110a31:	68 50 43 13 f0       	push   $0xf0134350
f0110a36:	e8 75 f7 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110a3b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a3e:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110a45:	83 ec 0c             	sub    $0xc,%esp
f0110a48:	50                   	push   %eax
f0110a49:	e8 03 f0 01 00       	call   f012fa51 <is_free_block>
f0110a4e:	83 c4 10             	add    $0x10,%esp
f0110a51:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110a54:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110a58:	74 17                	je     f0110a71 <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110a5a:	83 ec 04             	sub    $0x4,%esp
f0110a5d:	68 a8 61 13 f0       	push   $0xf01361a8
f0110a62:	68 23 04 00 00       	push   $0x423
f0110a67:	68 50 43 13 f0       	push   $0xf0134350
f0110a6c:	e8 3f f7 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110a71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a74:	40                   	inc    %eax
f0110a75:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110a7c:	83 ec 0c             	sub    $0xc,%esp
f0110a7f:	50                   	push   %eax
f0110a80:	e8 b6 ef 01 00       	call   f012fa3b <get_block_size>
f0110a85:	83 c4 10             	add    $0x10,%esp
f0110a88:	85 c0                	test   %eax,%eax
f0110a8a:	75 1b                	jne    f0110aa7 <test_free_block_BF+0x921>
f0110a8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a8f:	40                   	inc    %eax
f0110a90:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110a97:	83 ec 0c             	sub    $0xc,%esp
f0110a9a:	50                   	push   %eax
f0110a9b:	e8 b1 ef 01 00       	call   f012fa51 <is_free_block>
f0110aa0:	83 c4 10             	add    $0x10,%esp
f0110aa3:	84 c0                	test   %al,%al
f0110aa5:	74 17                	je     f0110abe <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110aa7:	83 ec 04             	sub    $0x4,%esp
f0110aaa:	68 fc 61 13 f0       	push   $0xf01361fc
f0110aaf:	68 26 04 00 00       	push   $0x426
f0110ab4:	68 50 43 13 f0       	push   $0xf0134350
f0110ab9:	e8 f2 f6 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0110abe:	83 ec 0c             	sub    $0xc,%esp
f0110ac1:	68 21 56 13 f0       	push   $0xf0135621
f0110ac6:	e8 66 03 ff ff       	call   f0100e31 <cprintf>
f0110acb:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0110ace:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110ad5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ad8:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110adf:	83 ec 0c             	sub    $0xc,%esp
f0110ae2:	50                   	push   %eax
f0110ae3:	e8 c7 f4 01 00       	call   f012ffaf <free_block>
f0110ae8:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110aeb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110aee:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110af5:	83 ec 0c             	sub    $0xc,%esp
f0110af8:	50                   	push   %eax
f0110af9:	e8 3d ef 01 00       	call   f012fa3b <get_block_size>
f0110afe:	83 c4 10             	add    $0x10,%esp
f0110b01:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110b04:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110b0a:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f0110b0f:	01 d0                	add    %edx,%eax
f0110b11:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110b14:	74 28                	je     f0110b3e <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110b16:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110b1c:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f0110b21:	01 d0                	add    %edx,%eax
f0110b23:	83 ec 0c             	sub    $0xc,%esp
f0110b26:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b29:	50                   	push   %eax
f0110b2a:	68 68 62 13 f0       	push   $0xf0136268
f0110b2f:	68 2f 04 00 00       	push   $0x42f
f0110b34:	68 50 43 13 f0       	push   $0xf0134350
f0110b39:	e8 72 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110b3e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b41:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110b48:	83 ec 0c             	sub    $0xc,%esp
f0110b4b:	50                   	push   %eax
f0110b4c:	e8 00 ef 01 00       	call   f012fa51 <is_free_block>
f0110b51:	83 c4 10             	add    $0x10,%esp
f0110b54:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110b57:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110b5b:	74 17                	je     f0110b74 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110b5d:	83 ec 04             	sub    $0x4,%esp
f0110b60:	68 c8 62 13 f0       	push   $0xf01362c8
f0110b65:	68 32 04 00 00       	push   $0x432
f0110b6a:	68 50 43 13 f0       	push   $0xf0134350
f0110b6f:	e8 3c f6 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110b74:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b77:	40                   	inc    %eax
f0110b78:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110b7f:	83 ec 0c             	sub    $0xc,%esp
f0110b82:	50                   	push   %eax
f0110b83:	e8 b3 ee 01 00       	call   f012fa3b <get_block_size>
f0110b88:	83 c4 10             	add    $0x10,%esp
f0110b8b:	85 c0                	test   %eax,%eax
f0110b8d:	75 1b                	jne    f0110baa <test_free_block_BF+0xa24>
f0110b8f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b92:	40                   	inc    %eax
f0110b93:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110b9a:	83 ec 0c             	sub    $0xc,%esp
f0110b9d:	50                   	push   %eax
f0110b9e:	e8 ae ee 01 00       	call   f012fa51 <is_free_block>
f0110ba3:	83 c4 10             	add    $0x10,%esp
f0110ba6:	84 c0                	test   %al,%al
f0110ba8:	74 17                	je     f0110bc1 <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110baa:	83 ec 04             	sub    $0x4,%esp
f0110bad:	68 20 63 13 f0       	push   $0xf0136320
f0110bb2:	68 35 04 00 00       	push   $0x435
f0110bb7:	68 50 43 13 f0       	push   $0xf0134350
f0110bbc:	e8 ef f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110bc1:	83 ec 0c             	sub    $0xc,%esp
f0110bc4:	68 64 57 13 f0       	push   $0xf0135764
f0110bc9:	e8 63 02 ff ff       	call   f0100e31 <cprintf>
f0110bce:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110bd1:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110bd8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bdb:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110be2:	83 ec 0c             	sub    $0xc,%esp
f0110be5:	50                   	push   %eax
f0110be6:	e8 c4 f3 01 00       	call   f012ffaf <free_block>
f0110beb:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110bee:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110bf5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bf8:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110bff:	83 ec 0c             	sub    $0xc,%esp
f0110c02:	50                   	push   %eax
f0110c03:	e8 a7 f3 01 00       	call   f012ffaf <free_block>
f0110c08:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110c0b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c0e:	48                   	dec    %eax
f0110c0f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110c16:	83 ec 0c             	sub    $0xc,%esp
f0110c19:	50                   	push   %eax
f0110c1a:	e8 1c ee 01 00       	call   f012fa3b <get_block_size>
f0110c1f:	83 c4 10             	add    $0x10,%esp
f0110c22:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110c25:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f0110c2b:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0110c30:	01 c2                	add    %eax,%edx
f0110c32:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f0110c37:	01 d0                	add    %edx,%eax
f0110c39:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110c3c:	74 2f                	je     f0110c6d <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110c3e:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f0110c44:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0110c49:	01 c2                	add    %eax,%edx
f0110c4b:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f0110c50:	01 d0                	add    %edx,%eax
f0110c52:	83 ec 0c             	sub    $0xc,%esp
f0110c55:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c58:	50                   	push   %eax
f0110c59:	68 8c 63 13 f0       	push   $0xf013638c
f0110c5e:	68 41 04 00 00       	push   $0x441
f0110c63:	68 50 43 13 f0       	push   $0xf0134350
f0110c68:	e8 43 f5 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110c6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c70:	48                   	dec    %eax
f0110c71:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110c78:	83 ec 0c             	sub    $0xc,%esp
f0110c7b:	50                   	push   %eax
f0110c7c:	e8 d0 ed 01 00       	call   f012fa51 <is_free_block>
f0110c81:	83 c4 10             	add    $0x10,%esp
f0110c84:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110c87:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110c8b:	74 17                	je     f0110ca4 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110c8d:	83 ec 04             	sub    $0x4,%esp
f0110c90:	68 ec 63 13 f0       	push   $0xf01363ec
f0110c95:	68 44 04 00 00       	push   $0x444
f0110c9a:	68 50 43 13 f0       	push   $0xf0134350
f0110c9f:	e8 0c f5 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110ca4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ca7:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110cae:	83 ec 0c             	sub    $0xc,%esp
f0110cb1:	50                   	push   %eax
f0110cb2:	e8 84 ed 01 00       	call   f012fa3b <get_block_size>
f0110cb7:	83 c4 10             	add    $0x10,%esp
f0110cba:	85 c0                	test   %eax,%eax
f0110cbc:	75 50                	jne    f0110d0e <test_free_block_BF+0xb88>
f0110cbe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110cc1:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110cc8:	83 ec 0c             	sub    $0xc,%esp
f0110ccb:	50                   	push   %eax
f0110ccc:	e8 80 ed 01 00       	call   f012fa51 <is_free_block>
f0110cd1:	83 c4 10             	add    $0x10,%esp
f0110cd4:	84 c0                	test   %al,%al
f0110cd6:	75 36                	jne    f0110d0e <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110cd8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110cdb:	40                   	inc    %eax
f0110cdc:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110ce3:	83 ec 0c             	sub    $0xc,%esp
f0110ce6:	50                   	push   %eax
f0110ce7:	e8 4f ed 01 00       	call   f012fa3b <get_block_size>
f0110cec:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110cef:	85 c0                	test   %eax,%eax
f0110cf1:	75 1b                	jne    f0110d0e <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110cf3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110cf6:	40                   	inc    %eax
f0110cf7:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110cfe:	83 ec 0c             	sub    $0xc,%esp
f0110d01:	50                   	push   %eax
f0110d02:	e8 4a ed 01 00       	call   f012fa51 <is_free_block>
f0110d07:	83 c4 10             	add    $0x10,%esp
f0110d0a:	84 c0                	test   %al,%al
f0110d0c:	74 17                	je     f0110d25 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110d0e:	83 ec 04             	sub    $0x4,%esp
f0110d11:	68 44 64 13 f0       	push   $0xf0136444
f0110d16:	68 48 04 00 00       	push   $0x448
f0110d1b:	68 50 43 13 f0       	push   $0xf0134350
f0110d20:	e8 8b f4 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110d25:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f0110d2c:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110d33:	83 ec 08             	sub    $0x8,%esp
f0110d36:	6a 03                	push   $0x3
f0110d38:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d3b:	e8 28 ed 01 00       	call   f012fa68 <alloc_block>
f0110d40:	83 c4 10             	add    $0x10,%esp
f0110d43:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110d46:	a1 40 b6 2d f0       	mov    0xf02db640,%eax
f0110d4b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f0110d4e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d52:	74 08                	je     f0110d5c <test_free_block_BF+0xbd6>
f0110d54:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d57:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d5a:	74 1d                	je     f0110d79 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d5c:	83 ec 0c             	sub    $0xc,%esp
f0110d5f:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d62:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d65:	68 b0 64 13 f0       	push   $0xf01364b0
f0110d6a:	68 55 04 00 00       	push   $0x455
f0110d6f:	68 50 43 13 f0       	push   $0xf0134350
f0110d74:	e8 37 f4 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110d79:	83 ec 0c             	sub    $0xc,%esp
f0110d7c:	68 cc 58 13 f0       	push   $0xf01358cc
f0110d81:	e8 ab 00 ff ff       	call   f0100e31 <cprintf>
f0110d86:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110d89:	83 ec 0c             	sub    $0xc,%esp
f0110d8c:	68 14 65 13 f0       	push   $0xf0136514
f0110d91:	e8 9b 00 ff ff       	call   f0100e31 <cprintf>
f0110d96:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110d99:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110da0:	83 ec 08             	sub    $0x8,%esp
f0110da3:	6a 03                	push   $0x3
f0110da5:	ff 75 cc             	pushl  -0x34(%ebp)
f0110da8:	e8 bb ec 01 00       	call   f012fa68 <alloc_block>
f0110dad:	83 c4 10             	add    $0x10,%esp
f0110db0:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110db3:	a1 c0 a9 2d f0       	mov    0xf02da9c0,%eax
f0110db8:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110dbb:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110dbf:	74 08                	je     f0110dc9 <test_free_block_BF+0xc43>
f0110dc1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110dc4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110dc7:	74 1d                	je     f0110de6 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110dc9:	83 ec 0c             	sub    $0xc,%esp
f0110dcc:	ff 75 c8             	pushl  -0x38(%ebp)
f0110dcf:	ff 75 b0             	pushl  -0x50(%ebp)
f0110dd2:	68 3c 65 13 f0       	push   $0xf013653c
f0110dd7:	68 60 04 00 00       	push   $0x460
f0110ddc:	68 50 43 13 f0       	push   $0xf0134350
f0110de1:	e8 ca f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110de6:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110ded:	83 ec 08             	sub    $0x8,%esp
f0110df0:	6a 03                	push   $0x3
f0110df2:	ff 75 cc             	pushl  -0x34(%ebp)
f0110df5:	e8 6e ec 01 00       	call   f012fa68 <alloc_block>
f0110dfa:	83 c4 10             	add    $0x10,%esp
f0110dfd:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110e00:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f0110e05:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e08:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e0c:	74 08                	je     f0110e16 <test_free_block_BF+0xc90>
f0110e0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e11:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e14:	74 1d                	je     f0110e33 <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e16:	83 ec 0c             	sub    $0xc,%esp
f0110e19:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e1c:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e1f:	68 a0 65 13 f0       	push   $0xf01365a0
f0110e24:	68 67 04 00 00       	push   $0x467
f0110e29:	68 50 43 13 f0       	push   $0xf0134350
f0110e2e:	e8 7d f3 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110e33:	83 ec 0c             	sub    $0xc,%esp
f0110e36:	68 64 5a 13 f0       	push   $0xf0135a64
f0110e3b:	e8 f1 ff fe ff       	call   f0100e31 <cprintf>
f0110e40:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110e43:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e4a:	83 ec 08             	sub    $0x8,%esp
f0110e4d:	6a 03                	push   $0x3
f0110e4f:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e52:	e8 11 ec 01 00       	call   f012fa68 <alloc_block>
f0110e57:	83 c4 10             	add    $0x10,%esp
f0110e5a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110e5d:	a1 f8 af 2d f0       	mov    0xf02daff8,%eax
f0110e62:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e65:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e69:	74 08                	je     f0110e73 <test_free_block_BF+0xced>
f0110e6b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e6e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e71:	74 1d                	je     f0110e90 <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e73:	83 ec 0c             	sub    $0xc,%esp
f0110e76:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e79:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e7c:	68 04 66 13 f0       	push   $0xf0136604
f0110e81:	68 6f 04 00 00       	push   $0x46f
f0110e86:	68 50 43 13 f0       	push   $0xf0134350
f0110e8b:	e8 20 f3 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110e90:	83 ec 0c             	sub    $0xc,%esp
f0110e93:	68 68 66 13 f0       	push   $0xf0136668
f0110e98:	e8 94 ff fe ff       	call   f0100e31 <cprintf>
f0110e9d:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110ea0:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110ea7:	83 ec 08             	sub    $0x8,%esp
f0110eaa:	6a 03                	push   $0x3
f0110eac:	ff 75 cc             	pushl  -0x34(%ebp)
f0110eaf:	e8 b4 eb 01 00       	call   f012fa68 <alloc_block>
f0110eb4:	83 c4 10             	add    $0x10,%esp
f0110eb7:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110eba:	a1 9c a6 2d f0       	mov    0xf02da69c,%eax
f0110ebf:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110ec2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110ec6:	74 08                	je     f0110ed0 <test_free_block_BF+0xd4a>
f0110ec8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110ecb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110ece:	74 1d                	je     f0110eed <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110ed0:	83 ec 0c             	sub    $0xc,%esp
f0110ed3:	ff 75 c8             	pushl  -0x38(%ebp)
f0110ed6:	ff 75 b0             	pushl  -0x50(%ebp)
f0110ed9:	68 90 66 13 f0       	push   $0xf0136690
f0110ede:	68 77 04 00 00       	push   $0x477
f0110ee3:	68 50 43 13 f0       	push   $0xf0134350
f0110ee8:	e8 c3 f2 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110eed:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110ef4:	83 ec 08             	sub    $0x8,%esp
f0110ef7:	6a 03                	push   $0x3
f0110ef9:	ff 75 cc             	pushl  -0x34(%ebp)
f0110efc:	e8 67 eb 01 00       	call   f012fa68 <alloc_block>
f0110f01:	83 c4 10             	add    $0x10,%esp
f0110f04:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110f07:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110f0e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110f12:	74 08                	je     f0110f1c <test_free_block_BF+0xd96>
f0110f14:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f17:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110f1a:	74 1d                	je     f0110f39 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110f1c:	83 ec 0c             	sub    $0xc,%esp
f0110f1f:	ff 75 c8             	pushl  -0x38(%ebp)
f0110f22:	ff 75 b0             	pushl  -0x50(%ebp)
f0110f25:	68 f4 66 13 f0       	push   $0xf01366f4
f0110f2a:	68 7e 04 00 00       	push   $0x47e
f0110f2f:	68 50 43 13 f0       	push   $0xf0134350
f0110f34:	e8 77 f2 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110f39:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110f40:	83 ec 08             	sub    $0x8,%esp
f0110f43:	6a 03                	push   $0x3
f0110f45:	ff 75 cc             	pushl  -0x34(%ebp)
f0110f48:	e8 1b eb 01 00       	call   f012fa68 <alloc_block>
f0110f4d:	83 c4 10             	add    $0x10,%esp
f0110f50:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110f53:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110f5a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110f5e:	74 08                	je     f0110f68 <test_free_block_BF+0xde2>
f0110f60:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f63:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110f66:	74 1d                	je     f0110f85 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110f68:	83 ec 0c             	sub    $0xc,%esp
f0110f6b:	ff 75 c8             	pushl  -0x38(%ebp)
f0110f6e:	ff 75 b0             	pushl  -0x50(%ebp)
f0110f71:	68 58 67 13 f0       	push   $0xf0136758
f0110f76:	68 85 04 00 00       	push   $0x485
f0110f7b:	68 50 43 13 f0       	push   $0xf0134350
f0110f80:	e8 2b f2 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110f85:	83 ec 0c             	sub    $0xc,%esp
f0110f88:	68 bc 67 13 f0       	push   $0xf01367bc
f0110f8d:	e8 9f fe fe ff       	call   f0100e31 <cprintf>
f0110f92:	83 c4 10             	add    $0x10,%esp

}
f0110f95:	90                   	nop
f0110f96:	c9                   	leave  
f0110f97:	c3                   	ret    

f0110f98 <test_free_block_NF>:

void test_free_block_NF()
{
f0110f98:	55                   	push   %ebp
f0110f99:	89 e5                	mov    %esp,%ebp
f0110f9b:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110f9e:	83 ec 04             	sub    $0x4,%esp
f0110fa1:	68 05 68 13 f0       	push   $0xf0136805
f0110fa6:	68 8e 04 00 00       	push   $0x48e
f0110fab:	68 50 43 13 f0       	push   $0xf0134350
f0110fb0:	e8 fb f1 fe ff       	call   f01001b0 <_panic>

f0110fb5 <findFreeBlockff>:
}
//my functions
//returns the address of the first freeblock
void *findFreeBlockff(){
f0110fb5:	55                   	push   %ebp
f0110fb6:	89 e5                	mov    %esp,%ebp
f0110fb8:	83 ec 18             	sub    $0x18,%esp
 struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f0110fbb:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f0110fc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110fc3:	eb 39                	jmp    f0110ffe <findFreeBlockff+0x49>
		if(iterator->is_free){
f0110fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fc8:	8a 40 04             	mov    0x4(%eax),%al
f0110fcb:	84 c0                	test   %al,%al
f0110fcd:	74 27                	je     f0110ff6 <findFreeBlockff+0x41>
			 struct BlockMetaData* address=(struct BlockMetaData*)((uint32)iterator+sizeOfMetaData());
f0110fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fd2:	83 c0 10             	add    $0x10,%eax
f0110fd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
			cprintf("found empty block at %x with size %x \n",address,iterator->size);
f0110fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fdb:	8b 00                	mov    (%eax),%eax
f0110fdd:	83 ec 04             	sub    $0x4,%esp
f0110fe0:	50                   	push   %eax
f0110fe1:	ff 75 f0             	pushl  -0x10(%ebp)
f0110fe4:	68 18 68 13 f0       	push   $0xf0136818
f0110fe9:	e8 43 fe fe ff       	call   f0100e31 <cprintf>
f0110fee:	83 c4 10             	add    $0x10,%esp
			 return address;
f0110ff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110ff4:	eb 44                	jmp    f011103a <findFreeBlockff+0x85>
}
//my functions
//returns the address of the first freeblock
void *findFreeBlockff(){
 struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f0110ff6:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f0110ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110ffe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111002:	74 08                	je     f011100c <findFreeBlockff+0x57>
f0111004:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111007:	8b 40 08             	mov    0x8(%eax),%eax
f011100a:	eb 05                	jmp    f0111011 <findFreeBlockff+0x5c>
f011100c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111011:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f0111016:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f011101b:	85 c0                	test   %eax,%eax
f011101d:	75 a6                	jne    f0110fc5 <findFreeBlockff+0x10>
f011101f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111023:	75 a0                	jne    f0110fc5 <findFreeBlockff+0x10>
			 struct BlockMetaData* address=(struct BlockMetaData*)((uint32)iterator+sizeOfMetaData());
			cprintf("found empty block at %x with size %x \n",address,iterator->size);
			 return address;
		}
	}
	cprintf("memory is full");
f0111025:	83 ec 0c             	sub    $0xc,%esp
f0111028:	68 3f 68 13 f0       	push   $0xf013683f
f011102d:	e8 ff fd fe ff       	call   f0100e31 <cprintf>
f0111032:	83 c4 10             	add    $0x10,%esp
	return NULL;
f0111035:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011103a:	c9                   	leave  
f011103b:	c3                   	ret    

f011103c <listFreeBlocks>:
void listFreeBlocks(){
f011103c:	55                   	push   %ebp
f011103d:	89 e5                	mov    %esp,%ebp
f011103f:	83 ec 18             	sub    $0x18,%esp
	struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f0111042:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f0111047:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011104a:	eb 2b                	jmp    f0111077 <listFreeBlocks+0x3b>
		if(iterator->is_free){
f011104c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011104f:	8a 40 04             	mov    0x4(%eax),%al
f0111052:	84 c0                	test   %al,%al
f0111054:	74 19                	je     f011106f <listFreeBlocks+0x33>
	cprintf("empty block at address %x with size %x \n",iterator,iterator->size);
f0111056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111059:	8b 00                	mov    (%eax),%eax
f011105b:	83 ec 04             	sub    $0x4,%esp
f011105e:	50                   	push   %eax
f011105f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111062:	68 50 68 13 f0       	push   $0xf0136850
f0111067:	e8 c5 fd fe ff       	call   f0100e31 <cprintf>
f011106c:	83 c4 10             	add    $0x10,%esp
	cprintf("memory is full");
	return NULL;
}
void listFreeBlocks(){
	struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f011106f:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f0111074:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111077:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011107b:	74 08                	je     f0111085 <listFreeBlocks+0x49>
f011107d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111080:	8b 40 08             	mov    0x8(%eax),%eax
f0111083:	eb 05                	jmp    f011108a <listFreeBlocks+0x4e>
f0111085:	b8 00 00 00 00       	mov    $0x0,%eax
f011108a:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f011108f:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f0111094:	85 c0                	test   %eax,%eax
f0111096:	75 b4                	jne    f011104c <listFreeBlocks+0x10>
f0111098:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011109c:	75 ae                	jne    f011104c <listFreeBlocks+0x10>
		if(iterator->is_free){
	cprintf("empty block at address %x with size %x \n",iterator,iterator->size);
		}
		}
}
f011109e:	90                   	nop
f011109f:	c9                   	leave  
f01110a0:	c3                   	ret    

f01110a1 <test_realloc_block_FF>:
void test_realloc_block_FF()
{
f01110a1:	55                   	push   %ebp
f01110a2:	89 e5                	mov    %esp,%ebp
f01110a4:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f01110a7:	83 ec 0c             	sub    $0xc,%esp
f01110aa:	68 7c 68 13 f0       	push   $0xf013687c
f01110af:	e8 7d fd fe ff       	call   f0100e31 <cprintf>
f01110b4:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f01110b7:	83 ec 0c             	sub    $0xc,%esp
f01110ba:	68 b4 68 13 f0       	push   $0xf01368b4
f01110bf:	e8 6d fd fe ff       	call   f0100e31 <cprintf>
f01110c4:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f01110c7:	83 ec 0c             	sub    $0xc,%esp
f01110ca:	68 ec 68 13 f0       	push   $0xf01368ec
f01110cf:	e8 5d fd fe ff       	call   f0100e31 <cprintf>
f01110d4:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f01110d7:	83 ec 0c             	sub    $0xc,%esp
f01110da:	68 7c 68 13 f0       	push   $0xf013687c
f01110df:	e8 4d fd fe ff       	call   f0100e31 <cprintf>
f01110e4:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f01110e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f01110ee:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01110f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01110f8:	83 ec 08             	sub    $0x8,%esp
f01110fb:	50                   	push   %eax
f01110fc:	68 00 00 00 f6       	push   $0xf6000000
f0111101:	e8 7b ea 01 00       	call   f012fb81 <initialize_dynamic_allocator>
f0111106:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0111109:	83 ec 0c             	sub    $0xc,%esp
f011110c:	68 24 69 13 f0       	push   $0xf0136924
f0111111:	e8 1b fd fe ff       	call   f0100e31 <cprintf>
f0111116:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111119:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int totalSizes = 0;
f0111120:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0111127:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011112e:	eb 2a                	jmp    f011115a <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0111130:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111133:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f011113a:	89 d0                	mov    %edx,%eax
f011113c:	c1 e0 02             	shl    $0x2,%eax
f011113f:	01 d0                	add    %edx,%eax
f0111141:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111148:	01 d0                	add    %edx,%eax
f011114a:	c1 e0 03             	shl    $0x3,%eax
f011114d:	89 c2                	mov    %eax,%edx
f011114f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111152:	01 d0                	add    %edx,%eax
f0111154:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;
	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0111157:	ff 45 e8             	incl   -0x18(%ebp)
f011115a:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f011115e:	7e d0                	jle    f0111130 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0111160:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111163:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0111166:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0111169:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011116d:	7f 17                	jg     f0111186 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f011116f:	83 ec 04             	sub    $0x4,%esp
f0111172:	68 54 69 13 f0       	push   $0xf0136954
f0111177:	68 c9 04 00 00       	push   $0x4c9
f011117c:	68 50 43 13 f0       	push   $0xf0134350
f0111181:	e8 2a f0 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0111186:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f011118d:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0111194:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011119b:	e9 f8 00 00 00       	jmp    f0111298 <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01111a0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01111a7:	e9 dc 00 00 00       	jmp    f0111288 <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f01111ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01111af:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01111b6:	83 e8 10             	sub    $0x10,%eax
f01111b9:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f01111bc:	83 ec 08             	sub    $0x8,%esp
f01111bf:	ff 75 c0             	pushl  -0x40(%ebp)
f01111c2:	6a 00                	push   $0x0
f01111c4:	e8 88 ee 01 00       	call   f0130051 <realloc_block_FF>
f01111c9:	83 c4 10             	add    $0x10,%esp
f01111cc:	89 c2                	mov    %eax,%edx
f01111ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01111d1:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f01111d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01111db:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01111e2:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f01111e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111e8:	d1 e8                	shr    %eax
f01111ea:	89 c2                	mov    %eax,%edx
f01111ec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01111ef:	01 c2                	add    %eax,%edx
f01111f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01111f4:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01111fb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111fe:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111201:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111204:	01 c2                	add    %eax,%edx
f0111206:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111209:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111210:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111214:	74 0b                	je     f0111221 <test_realloc_block_FF+0x180>
f0111216:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111219:	83 c0 10             	add    $0x10,%eax
f011121c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011121f:	74 24                	je     f0111245 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0111221:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111224:	83 c0 10             	add    $0x10,%eax
f0111227:	83 ec 08             	sub    $0x8,%esp
f011122a:	ff 75 bc             	pushl  -0x44(%ebp)
f011122d:	50                   	push   %eax
f011122e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111231:	68 d4 69 13 f0       	push   $0xf01369d4
f0111236:	68 d8 04 00 00       	push   $0x4d8
f011123b:	68 50 43 13 f0       	push   $0xf0134350
f0111240:	e8 6b ef fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0111245:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111248:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f011124f:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0111252:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111255:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f011125c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011125f:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0111262:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111265:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f011126c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011126f:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111272:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111275:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f011127c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011127f:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0111282:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111285:	ff 45 d8             	incl   -0x28(%ebp)
f0111288:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f011128f:	0f 8e 17 ff ff ff    	jle    f01111ac <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0111295:	ff 45 dc             	incl   -0x24(%ebp)
f0111298:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f011129c:	0f 8e fe fe ff ff    	jle    f01111a0 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f01112a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01112a5:	83 e8 10             	sub    $0x10,%eax
f01112a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f01112ab:	83 ec 08             	sub    $0x8,%esp
f01112ae:	ff 75 c0             	pushl  -0x40(%ebp)
f01112b1:	6a 00                	push   $0x0
f01112b3:	e8 99 ed 01 00       	call   f0130051 <realloc_block_FF>
f01112b8:	83 c4 10             	add    $0x10,%esp
f01112bb:	89 c2                	mov    %eax,%edx
f01112bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112c0:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f01112c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112ca:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01112d1:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01112d4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01112d7:	d1 e8                	shr    %eax
f01112d9:	89 c2                	mov    %eax,%edx
f01112db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01112de:	01 c2                	add    %eax,%edx
f01112e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112e3:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01112ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01112ed:	8d 50 fe             	lea    -0x2(%eax),%edx
f01112f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01112f3:	01 c2                	add    %eax,%edx
f01112f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01112f8:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01112ff:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111303:	74 0b                	je     f0111310 <test_realloc_block_FF+0x26f>
f0111305:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111308:	83 c0 10             	add    $0x10,%eax
f011130b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011130e:	74 17                	je     f0111327 <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0111310:	83 ec 04             	sub    $0x4,%esp
f0111313:	68 30 6a 13 f0       	push   $0xf0136a30
f0111318:	68 e9 04 00 00       	push   $0x4e9
f011131d:	68 50 43 13 f0       	push   $0xf0134350
f0111322:	e8 89 ee fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f0111327:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011132a:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f0111331:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111334:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0111337:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011133a:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f0111341:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111344:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0111347:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011134a:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f0111351:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111354:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111357:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011135e:	eb 59                	jmp    f01113b9 <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0111360:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111363:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011136a:	66 8b 00             	mov    (%eax),%ax
f011136d:	98                   	cwtl   
f011136e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111371:	75 26                	jne    f0111399 <test_realloc_block_FF+0x2f8>
f0111373:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111376:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f011137d:	66 8b 00             	mov    (%eax),%ax
f0111380:	98                   	cwtl   
f0111381:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111384:	75 13                	jne    f0111399 <test_realloc_block_FF+0x2f8>
f0111386:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111389:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f0111390:	66 8b 00             	mov    (%eax),%ax
f0111393:	98                   	cwtl   
f0111394:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111397:	74 1d                	je     f01113b6 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111399:	83 ec 0c             	sub    $0xc,%esp
f011139c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011139f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01113a2:	68 74 6a 13 f0       	push   $0xf0136a74
f01113a7:	68 f3 04 00 00       	push   $0x4f3
f01113ac:	68 50 43 13 f0       	push   $0xf0134350
f01113b1:	e8 fa ed fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01113b6:	ff 45 d4             	incl   -0x2c(%ebp)
f01113b9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01113bc:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01113bf:	7c 9f                	jl     f0111360 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01113c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113c5:	74 04                	je     f01113cb <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f01113c7:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f01113cb:	83 ec 0c             	sub    $0xc,%esp
f01113ce:	68 cc 6a 13 f0       	push   $0xf0136acc
f01113d3:	e8 59 fa fe ff       	call   f0100e31 <cprintf>
f01113d8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01113db:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01113e2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01113e9:	e9 fa 00 00 00       	jmp    f01114e8 <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f01113ee:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01113f1:	89 d0                	mov    %edx,%eax
f01113f3:	c1 e0 02             	shl    $0x2,%eax
f01113f6:	01 d0                	add    %edx,%eax
f01113f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01113ff:	01 d0                	add    %edx,%eax
f0111401:	c1 e0 03             	shl    $0x3,%eax
f0111404:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011140b:	83 ec 08             	sub    $0x8,%esp
f011140e:	6a 00                	push   $0x0
f0111410:	50                   	push   %eax
f0111411:	e8 3b ec 01 00       	call   f0130051 <realloc_block_FF>
f0111416:	83 c4 10             	add    $0x10,%esp
f0111419:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011141c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011141f:	89 d0                	mov    %edx,%eax
f0111421:	c1 e0 02             	shl    $0x2,%eax
f0111424:	01 d0                	add    %edx,%eax
f0111426:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011142d:	01 d0                	add    %edx,%eax
f011142f:	c1 e0 03             	shl    $0x3,%eax
f0111432:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111439:	83 ec 0c             	sub    $0xc,%esp
f011143c:	50                   	push   %eax
f011143d:	e8 f9 e5 01 00       	call   f012fa3b <get_block_size>
f0111442:	83 c4 10             	add    $0x10,%esp
f0111445:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f0111448:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011144b:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0111452:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0111455:	74 28                	je     f011147f <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0111457:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011145a:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0111461:	83 ec 08             	sub    $0x8,%esp
f0111464:	ff 75 b8             	pushl  -0x48(%ebp)
f0111467:	50                   	push   %eax
f0111468:	ff 75 d0             	pushl  -0x30(%ebp)
f011146b:	68 fc 6a 13 f0       	push   $0xf0136afc
f0111470:	68 07 05 00 00       	push   $0x507
f0111475:	68 50 43 13 f0       	push   $0xf0134350
f011147a:	e8 31 ed fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f011147f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111482:	89 d0                	mov    %edx,%eax
f0111484:	c1 e0 02             	shl    $0x2,%eax
f0111487:	01 d0                	add    %edx,%eax
f0111489:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111490:	01 d0                	add    %edx,%eax
f0111492:	c1 e0 03             	shl    $0x3,%eax
f0111495:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011149c:	83 ec 0c             	sub    $0xc,%esp
f011149f:	50                   	push   %eax
f01114a0:	e8 ac e5 01 00       	call   f012fa51 <is_free_block>
f01114a5:	83 c4 10             	add    $0x10,%esp
f01114a8:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f01114ab:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f01114af:	74 17                	je     f01114c8 <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01114b1:	ff 75 d0             	pushl  -0x30(%ebp)
f01114b4:	68 64 6b 13 f0       	push   $0xf0136b64
f01114b9:	68 0a 05 00 00       	push   $0x50a
f01114be:	68 50 43 13 f0       	push   $0xf0134350
f01114c3:	e8 e8 ec fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f01114c8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01114cc:	74 17                	je     f01114e5 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f01114ce:	ff 75 d0             	pushl  -0x30(%ebp)
f01114d1:	68 c0 6b 13 f0       	push   $0xf0136bc0
f01114d6:	68 0c 05 00 00       	push   $0x50c
f01114db:	68 50 43 13 f0       	push   $0xf0134350
f01114e0:	e8 cb ec fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01114e5:	ff 45 d0             	incl   -0x30(%ebp)
f01114e8:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f01114ec:	0f 8e fc fe ff ff    	jle    f01113ee <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f01114f2:	83 ec 08             	sub    $0x8,%esp
f01114f5:	6a 00                	push   $0x0
f01114f7:	6a 00                	push   $0x0
f01114f9:	e8 53 eb 01 00       	call   f0130051 <realloc_block_FF>
f01114fe:	83 c4 10             	add    $0x10,%esp
f0111501:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f0111504:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111508:	74 17                	je     f0111521 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f011150a:	83 ec 04             	sub    $0x4,%esp
f011150d:	68 f4 6b 13 f0       	push   $0xf0136bf4
f0111512:	68 12 05 00 00       	push   $0x512
f0111517:	68 50 43 13 f0       	push   $0xf0134350
f011151c:	e8 8f ec fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111521:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0111528:	eb 6b                	jmp    f0111595 <test_realloc_block_FF+0x4f4>
	{

		if (i % allocCntPerSize == 0)
f011152a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011152d:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0111532:	99                   	cltd   
f0111533:	f7 f9                	idiv   %ecx
f0111535:	89 d0                	mov    %edx,%eax
f0111537:	85 c0                	test   %eax,%eax
f0111539:	74 56                	je     f0111591 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011153b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011153e:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111545:	66 8b 00             	mov    (%eax),%ax
f0111548:	98                   	cwtl   
f0111549:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011154c:	75 26                	jne    f0111574 <test_realloc_block_FF+0x4d3>
f011154e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111551:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0111558:	66 8b 00             	mov    (%eax),%ax
f011155b:	98                   	cwtl   
f011155c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011155f:	75 13                	jne    f0111574 <test_realloc_block_FF+0x4d3>
f0111561:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111564:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f011156b:	66 8b 00             	mov    (%eax),%ax
f011156e:	98                   	cwtl   
f011156f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111572:	74 1e                	je     f0111592 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111574:	83 ec 0c             	sub    $0xc,%esp
f0111577:	ff 75 cc             	pushl  -0x34(%ebp)
f011157a:	ff 75 cc             	pushl  -0x34(%ebp)
f011157d:	68 28 6c 13 f0       	push   $0xf0136c28
f0111582:	68 1b 05 00 00       	push   $0x51b
f0111587:	68 50 43 13 f0       	push   $0xf0134350
f011158c:	e8 1f ec fe ff       	call   f01001b0 <_panic>
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{

		if (i % allocCntPerSize == 0)
			continue;
f0111591:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111592:	ff 45 cc             	incl   -0x34(%ebp)
f0111595:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111598:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011159b:	7c 8d                	jl     f011152a <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f011159d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01115a1:	74 04                	je     f01115a7 <test_realloc_block_FF+0x506>
	{
		eval += 10;
f01115a3:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f01115a7:	83 ec 0c             	sub    $0xc,%esp
f01115aa:	68 80 6c 13 f0       	push   $0xf0136c80
f01115af:	e8 7d f8 fe ff       	call   f0100e31 <cprintf>
f01115b4:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f01115b7:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f01115be:	83 ec 0c             	sub    $0xc,%esp
f01115c1:	68 b8 6c 13 f0       	push   $0xf0136cb8
f01115c6:	e8 66 f8 fe ff       	call   f0100e31 <cprintf>
f01115cb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01115ce:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{


		blockIndex = 4*allocCntPerSize - 1 ;
f01115d5:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f01115dc:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f01115e1:	8b 15 30 eb 18 f0    	mov    0xf018eb30,%edx
f01115e7:	d1 ea                	shr    %edx
f01115e9:	01 d0                	add    %edx,%eax
f01115eb:	83 e8 10             	sub    $0x10,%eax
f01115ee:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01115f1:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01115f4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115f7:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01115fe:	83 ec 08             	sub    $0x8,%esp
f0111601:	52                   	push   %edx
f0111602:	50                   	push   %eax
f0111603:	e8 49 ea 01 00       	call   f0130051 <realloc_block_FF>
f0111608:	83 c4 10             	add    $0x10,%esp
f011160b:	89 45 bc             	mov    %eax,-0x44(%ebp)


		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f011160e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111612:	74 0f                	je     f0111623 <test_realloc_block_FF+0x582>
f0111614:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111617:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011161e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111621:	74 25                	je     f0111648 <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f0111623:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011162a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011162d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111634:	83 ec 04             	sub    $0x4,%esp
f0111637:	ff 75 bc             	pushl  -0x44(%ebp)
f011163a:	50                   	push   %eax
f011163b:	68 f0 6c 13 f0       	push   $0xf0136cf0
f0111640:	e8 ec f7 fe ff       	call   f0100e31 <cprintf>
f0111645:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111648:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011164b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111652:	83 ec 0c             	sub    $0xc,%esp
f0111655:	50                   	push   %eax
f0111656:	e8 e0 e3 01 00       	call   f012fa3b <get_block_size>
f011165b:	83 c4 10             	add    $0x10,%esp
f011165e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111661:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111664:	8d 50 10             	lea    0x10(%eax),%edx
f0111667:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011166a:	39 c2                	cmp    %eax,%edx
f011166c:	74 21                	je     f011168f <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f011166e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111675:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111678:	83 c0 10             	add    $0x10,%eax
f011167b:	83 ec 04             	sub    $0x4,%esp
f011167e:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111681:	50                   	push   %eax
f0111682:	68 50 6d 13 f0       	push   $0xf0136d50
f0111687:	e8 a5 f7 fe ff       	call   f0100e31 <cprintf>
f011168c:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f011168f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111692:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111699:	83 ec 0c             	sub    $0xc,%esp
f011169c:	50                   	push   %eax
f011169d:	e8 af e3 01 00       	call   f012fa51 <is_free_block>
f01116a2:	83 c4 10             	add    $0x10,%esp
f01116a5:	0f be c0             	movsbl %al,%eax
f01116a8:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01116ab:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01116af:	74 17                	je     f01116c8 <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f01116b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01116b8:	83 ec 0c             	sub    $0xc,%esp
f01116bb:	68 bc 6d 13 f0       	push   $0xf0136dbc
f01116c0:	e8 6c f7 fe ff       	call   f0100e31 <cprintf>
f01116c5:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01116c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116cb:	40                   	inc    %eax
f01116cc:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01116d3:	83 ec 0c             	sub    $0xc,%esp
f01116d6:	50                   	push   %eax
f01116d7:	e8 5f e3 01 00       	call   f012fa3b <get_block_size>
f01116dc:	83 c4 10             	add    $0x10,%esp
f01116df:	85 c0                	test   %eax,%eax
f01116e1:	75 1b                	jne    f01116fe <test_realloc_block_FF+0x65d>
f01116e3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116e6:	40                   	inc    %eax
f01116e7:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01116ee:	83 ec 0c             	sub    $0xc,%esp
f01116f1:	50                   	push   %eax
f01116f2:	e8 5a e3 01 00       	call   f012fa51 <is_free_block>
f01116f7:	83 c4 10             	add    $0x10,%esp
f01116fa:	84 c0                	test   %al,%al
f01116fc:	74 17                	je     f0111715 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f01116fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111705:	83 ec 0c             	sub    $0xc,%esp
f0111708:	68 1c 6e 13 f0       	push   $0xf0136e1c
f011170d:	e8 1f f7 fe ff       	call   f0100e31 <cprintf>
f0111712:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111715:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111718:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011171f:	66 8b 00             	mov    (%eax),%ax
f0111722:	98                   	cwtl   
f0111723:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111726:	75 26                	jne    f011174e <test_realloc_block_FF+0x6ad>
f0111728:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011172b:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0111732:	66 8b 00             	mov    (%eax),%ax
f0111735:	98                   	cwtl   
f0111736:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111739:	75 13                	jne    f011174e <test_realloc_block_FF+0x6ad>
f011173b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011173e:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f0111745:	66 8b 00             	mov    (%eax),%ax
f0111748:	98                   	cwtl   
f0111749:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011174c:	74 1a                	je     f0111768 <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f011174e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111755:	83 ec 08             	sub    $0x8,%esp
f0111758:	ff 75 ac             	pushl  -0x54(%ebp)
f011175b:	68 90 6e 13 f0       	push   $0xf0136e90
f0111760:	e8 cc f6 fe ff       	call   f0100e31 <cprintf>
f0111765:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111768:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011176c:	74 04                	je     f0111772 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f011176e:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0111772:	83 ec 0c             	sub    $0xc,%esp
f0111775:	68 f0 6e 13 f0       	push   $0xf0136ef0
f011177a:	e8 b2 f6 fe ff       	call   f0100e31 <cprintf>
f011177f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111782:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0111789:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111790:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0111795:	8b 15 30 eb 18 f0    	mov    0xf018eb30,%edx
f011179b:	d1 ea                	shr    %edx
f011179d:	01 d0                	add    %edx,%eax
f011179f:	83 e8 10             	sub    $0x10,%eax
f01117a2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01117a5:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01117a8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117ab:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01117b2:	83 ec 08             	sub    $0x8,%esp
f01117b5:	52                   	push   %edx
f01117b6:	50                   	push   %eax
f01117b7:	e8 95 e8 01 00       	call   f0130051 <realloc_block_FF>
f01117bc:	83 c4 10             	add    $0x10,%esp
f01117bf:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01117c2:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01117c6:	74 0f                	je     f01117d7 <test_realloc_block_FF+0x736>
f01117c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117cb:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01117d2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01117d5:	74 25                	je     f01117fc <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f01117d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01117de:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117e1:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01117e8:	83 ec 04             	sub    $0x4,%esp
f01117eb:	ff 75 bc             	pushl  -0x44(%ebp)
f01117ee:	50                   	push   %eax
f01117ef:	68 2c 6f 13 f0       	push   $0xf0136f2c
f01117f4:	e8 38 f6 fe ff       	call   f0100e31 <cprintf>
f01117f9:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01117fc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117ff:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111806:	83 ec 0c             	sub    $0xc,%esp
f0111809:	50                   	push   %eax
f011180a:	e8 2c e2 01 00       	call   f012fa3b <get_block_size>
f011180f:	83 c4 10             	add    $0x10,%esp
f0111812:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111815:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111818:	8d 50 10             	lea    0x10(%eax),%edx
f011181b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011181e:	39 c2                	cmp    %eax,%edx
f0111820:	74 21                	je     f0111843 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f0111822:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111829:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011182c:	83 c0 10             	add    $0x10,%eax
f011182f:	83 ec 04             	sub    $0x4,%esp
f0111832:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111835:	50                   	push   %eax
f0111836:	68 8c 6f 13 f0       	push   $0xf0136f8c
f011183b:	e8 f1 f5 fe ff       	call   f0100e31 <cprintf>
f0111840:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111843:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111846:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011184d:	83 ec 0c             	sub    $0xc,%esp
f0111850:	50                   	push   %eax
f0111851:	e8 fb e1 01 00       	call   f012fa51 <is_free_block>
f0111856:	83 c4 10             	add    $0x10,%esp
f0111859:	0f be c0             	movsbl %al,%eax
f011185c:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f011185f:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111863:	74 17                	je     f011187c <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111865:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011186c:	83 ec 0c             	sub    $0xc,%esp
f011186f:	68 fc 6f 13 f0       	push   $0xf0136ffc
f0111874:	e8 b8 f5 fe ff       	call   f0100e31 <cprintf>
f0111879:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011187c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011187f:	40                   	inc    %eax
f0111880:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111887:	83 ec 0c             	sub    $0xc,%esp
f011188a:	50                   	push   %eax
f011188b:	e8 ab e1 01 00       	call   f012fa3b <get_block_size>
f0111890:	83 c4 10             	add    $0x10,%esp
f0111893:	85 c0                	test   %eax,%eax
f0111895:	75 1b                	jne    f01118b2 <test_realloc_block_FF+0x811>
f0111897:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011189a:	40                   	inc    %eax
f011189b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01118a2:	83 ec 0c             	sub    $0xc,%esp
f01118a5:	50                   	push   %eax
f01118a6:	e8 a6 e1 01 00       	call   f012fa51 <is_free_block>
f01118ab:	83 c4 10             	add    $0x10,%esp
f01118ae:	84 c0                	test   %al,%al
f01118b0:	74 17                	je     f01118c9 <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f01118b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f01118b9:	83 ec 0c             	sub    $0xc,%esp
f01118bc:	68 5c 70 13 f0       	push   $0xf013705c
f01118c1:	e8 6b f5 fe ff       	call   f0100e31 <cprintf>
f01118c6:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f01118c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118cc:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01118d3:	66 8b 00             	mov    (%eax),%ax
f01118d6:	98                   	cwtl   
f01118d7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118da:	75 26                	jne    f0111902 <test_realloc_block_FF+0x861>
f01118dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118df:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f01118e6:	66 8b 00             	mov    (%eax),%ax
f01118e9:	98                   	cwtl   
f01118ea:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118ed:	75 13                	jne    f0111902 <test_realloc_block_FF+0x861>
f01118ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118f2:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f01118f9:	66 8b 00             	mov    (%eax),%ax
f01118fc:	98                   	cwtl   
f01118fd:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111900:	74 1a                	je     f011191c <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f0111902:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111909:	83 ec 08             	sub    $0x8,%esp
f011190c:	ff 75 ac             	pushl  -0x54(%ebp)
f011190f:	68 d0 70 13 f0       	push   $0xf01370d0
f0111914:	e8 18 f5 fe ff       	call   f0100e31 <cprintf>
f0111919:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011191c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111920:	74 04                	je     f0111926 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f0111922:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0111926:	83 ec 0c             	sub    $0xc,%esp
f0111929:	68 30 71 13 f0       	push   $0xf0137130
f011192e:	e8 fe f4 fe ff       	call   f0100e31 <cprintf>
f0111933:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0111936:	83 ec 0c             	sub    $0xc,%esp
f0111939:	68 68 71 13 f0       	push   $0xf0137168
f011193e:	e8 ee f4 fe ff       	call   f0100e31 <cprintf>
f0111943:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111946:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f011194d:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f0111954:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0111959:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f011195c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011195f:	2d 10 04 00 00       	sub    $0x410,%eax
f0111964:	89 45 a8             	mov    %eax,-0x58(%ebp)
		cprintf("REALLOCATE to size %d\n",new_size ) ;
f0111967:	83 ec 08             	sub    $0x8,%esp
f011196a:	ff 75 a8             	pushl  -0x58(%ebp)
f011196d:	68 91 71 13 f0       	push   $0xf0137191
f0111972:	e8 ba f4 fe ff       	call   f0100e31 <cprintf>
f0111977:	83 c4 10             	add    $0x10,%esp
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f011197a:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011197d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111980:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111987:	83 ec 08             	sub    $0x8,%esp
f011198a:	52                   	push   %edx
f011198b:	50                   	push   %eax
f011198c:	e8 c0 e6 01 00       	call   f0130051 <realloc_block_FF>
f0111991:	83 c4 10             	add    $0x10,%esp
f0111994:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111997:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011199b:	74 0f                	je     f01119ac <test_realloc_block_FF+0x90b>
f011199d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01119a0:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01119a7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01119aa:	74 25                	je     f01119d1 <test_realloc_block_FF+0x930>
		{
			is_correct = 0;
f01119ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01119b3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01119b6:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01119bd:	83 ec 04             	sub    $0x4,%esp
f01119c0:	ff 75 bc             	pushl  -0x44(%ebp)
f01119c3:	50                   	push   %eax
f01119c4:	68 a8 71 13 f0       	push   $0xf01371a8
f01119c9:	e8 63 f4 fe ff       	call   f0100e31 <cprintf>
f01119ce:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01119d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01119d4:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01119db:	83 ec 0c             	sub    $0xc,%esp
f01119de:	50                   	push   %eax
f01119df:	e8 57 e0 01 00       	call   f012fa3b <get_block_size>
f01119e4:	83 c4 10             	add    $0x10,%esp
f01119e7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01119ea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01119ed:	8d 50 10             	lea    0x10(%eax),%edx
f01119f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01119f3:	39 c2                	cmp    %eax,%edx
f01119f5:	74 21                	je     f0111a18 <test_realloc_block_FF+0x977>
		{
			is_correct = 0;
f01119f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01119fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111a01:	83 c0 10             	add    $0x10,%eax
f0111a04:	83 ec 04             	sub    $0x4,%esp
f0111a07:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111a0a:	50                   	push   %eax
f0111a0b:	68 08 72 13 f0       	push   $0xf0137208
f0111a10:	e8 1c f4 fe ff       	call   f0100e31 <cprintf>
f0111a15:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111a18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a1b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111a22:	83 ec 0c             	sub    $0xc,%esp
f0111a25:	50                   	push   %eax
f0111a26:	e8 26 e0 01 00       	call   f012fa51 <is_free_block>
f0111a2b:	83 c4 10             	add    $0x10,%esp
f0111a2e:	0f be c0             	movsbl %al,%eax
f0111a31:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111a34:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111a38:	74 17                	je     f0111a51 <test_realloc_block_FF+0x9b0>
		{
			is_correct = 0;
f0111a3a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111a41:	83 ec 0c             	sub    $0xc,%esp
f0111a44:	68 78 72 13 f0       	push   $0xf0137278
f0111a49:	e8 e3 f3 fe ff       	call   f0100e31 <cprintf>
f0111a4e:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f0111a51:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111a54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111a57:	01 d0                	add    %edx,%eax
f0111a59:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f0111a5c:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f0111a63:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111a66:	8b 10                	mov    (%eax),%edx
f0111a68:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111a6b:	39 c2                	cmp    %eax,%edx
f0111a6d:	75 0a                	jne    f0111a79 <test_realloc_block_FF+0x9d8>
f0111a6f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111a72:	8a 40 04             	mov    0x4(%eax),%al
f0111a75:	3c 01                	cmp    $0x1,%al
f0111a77:	74 20                	je     f0111a99 <test_realloc_block_FF+0x9f8>
		{
			is_correct = 0;
f0111a79:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f0111a80:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111a83:	8b 00                	mov    (%eax),%eax
f0111a85:	83 ec 04             	sub    $0x4,%esp
f0111a88:	50                   	push   %eax
f0111a89:	ff 75 94             	pushl  -0x6c(%ebp)
f0111a8c:	68 d8 72 13 f0       	push   $0xf01372d8
f0111a91:	e8 9b f3 fe ff       	call   f0100e31 <cprintf>
f0111a96:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0111a99:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a9c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111aa3:	66 8b 00             	mov    (%eax),%ax
f0111aa6:	98                   	cwtl   
f0111aa7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111aaa:	75 13                	jne    f0111abf <test_realloc_block_FF+0xa1e>
f0111aac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111aaf:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0111ab6:	66 8b 00             	mov    (%eax),%ax
f0111ab9:	98                   	cwtl   
f0111aba:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111abd:	74 1a                	je     f0111ad9 <test_realloc_block_FF+0xa38>
		{
			is_correct = 0;
f0111abf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111ac6:	83 ec 08             	sub    $0x8,%esp
f0111ac9:	ff 75 ac             	pushl  -0x54(%ebp)
f0111acc:	68 50 73 13 f0       	push   $0xf0137350
f0111ad1:	e8 5b f3 fe ff       	call   f0100e31 <cprintf>
f0111ad6:	83 c4 10             	add    $0x10,%esp
		}

	}
	if (is_correct)
f0111ad9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111add:	74 04                	je     f0111ae3 <test_realloc_block_FF+0xa42>
		{
			eval += 30;
f0111adf:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
		}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111ae3:	83 ec 08             	sub    $0x8,%esp
f0111ae6:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ae9:	68 b0 73 13 f0       	push   $0xf01373b0
f0111aee:	e8 3e f3 fe ff       	call   f0100e31 <cprintf>
f0111af3:	83 c4 10             	add    $0x10,%esp

}
f0111af6:	90                   	nop
f0111af7:	c9                   	leave  
f0111af8:	c3                   	ret    

f0111af9 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0111af9:	55                   	push   %ebp
f0111afa:	89 e5                	mov    %esp,%ebp
f0111afc:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f0111aff:	83 ec 04             	sub    $0x4,%esp
f0111b02:	68 ef 73 13 f0       	push   $0xf01373ef
f0111b07:	68 c7 05 00 00       	push   $0x5c7
f0111b0c:	68 50 43 13 f0       	push   $0xf0134350
f0111b11:	e8 9a e6 fe ff       	call   f01001b0 <_panic>

f0111b16 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111b16:	55                   	push   %ebp
f0111b17:	89 e5                	mov    %esp,%ebp
f0111b19:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111b1c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0111b21:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111b24:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f0111b2b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0111b32:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111b36:	0f 84 a5 00 00 00    	je     f0111be1 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f0111b3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111b43:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111b46:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111b4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111b4f:	eb 4a                	jmp    f0111b9b <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0111b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111b54:	8b 00                	mov    (%eax),%eax
f0111b56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111b59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111b5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b61:	89 c2                	mov    %eax,%edx
f0111b63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111b66:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111b70:	01 c8                	add    %ecx,%eax
f0111b72:	8b 00                	mov    (%eax),%eax
f0111b74:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111b77:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111b7a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b7f:	39 c2                	cmp    %eax,%edx
f0111b81:	74 09                	je     f0111b8c <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111b83:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f0111b8a:	eb 3e                	jmp    f0111bca <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f0111b8c:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111b8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111b92:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111b9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111b9f:	74 08                	je     f0111ba9 <sys_check_LRU_lists+0x93>
f0111ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111ba4:	8b 40 10             	mov    0x10(%eax),%eax
f0111ba7:	eb 05                	jmp    f0111bae <sys_check_LRU_lists+0x98>
f0111ba9:	b8 00 00 00 00       	mov    $0x0,%eax
f0111bae:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111bb1:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111bba:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111bc0:	85 c0                	test   %eax,%eax
f0111bc2:	75 8d                	jne    f0111b51 <sys_check_LRU_lists+0x3b>
f0111bc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111bc8:	75 87                	jne    f0111b51 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0111bca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111bcd:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0111bd3:	8b 45 10             	mov    0x10(%ebp),%eax
f0111bd6:	39 c2                	cmp    %eax,%edx
f0111bd8:	74 07                	je     f0111be1 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f0111bda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0111be1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0111be5:	0f 84 a5 00 00 00    	je     f0111c90 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f0111beb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111bf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111bf5:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111bfe:	eb 4a                	jmp    f0111c4a <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0111c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111c03:	8b 00                	mov    (%eax),%eax
f0111c05:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111c08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111c0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111c10:	89 c2                	mov    %eax,%edx
f0111c12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111c15:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111c1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111c1f:	01 c8                	add    %ecx,%eax
f0111c21:	8b 00                	mov    (%eax),%eax
f0111c23:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111c26:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111c29:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111c2e:	39 c2                	cmp    %eax,%edx
f0111c30:	74 09                	je     f0111c3b <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f0111c32:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f0111c39:	eb 3e                	jmp    f0111c79 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f0111c3b:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111c3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c41:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111c47:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111c4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111c4e:	74 08                	je     f0111c58 <sys_check_LRU_lists+0x142>
f0111c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111c53:	8b 40 10             	mov    0x10(%eax),%eax
f0111c56:	eb 05                	jmp    f0111c5d <sys_check_LRU_lists+0x147>
f0111c58:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c5d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111c60:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111c66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c69:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111c6f:	85 c0                	test   %eax,%eax
f0111c71:	75 8d                	jne    f0111c00 <sys_check_LRU_lists+0xea>
f0111c73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111c77:	75 87                	jne    f0111c00 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c7c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111c82:	8b 45 14             	mov    0x14(%ebp),%eax
f0111c85:	39 c2                	cmp    %eax,%edx
f0111c87:	74 07                	je     f0111c90 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111c89:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0111c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111c93:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111c96:	c9                   	leave  
f0111c97:	c3                   	ret    

f0111c98 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111c98:	55                   	push   %ebp
f0111c99:	89 e5                	mov    %esp,%ebp
f0111c9b:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111c9e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0111ca3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111ca6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111cad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111cb0:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111cb6:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111cb9:	eb 65                	jmp    f0111d20 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111cbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111cc2:	eb 3a                	jmp    f0111cfe <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111cc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111cc7:	8b 00                	mov    (%eax),%eax
f0111cc9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111ccc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111ccf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111cd4:	89 c2                	mov    %eax,%edx
f0111cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111cd9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111ce0:	8b 45 08             	mov    0x8(%ebp),%eax
f0111ce3:	01 c8                	add    %ecx,%eax
f0111ce5:	8b 00                	mov    (%eax),%eax
f0111ce7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111cea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111ced:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111cf2:	39 c2                	cmp    %eax,%edx
f0111cf4:	75 05                	jne    f0111cfb <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111cf6:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111cf9:	eb 0b                	jmp    f0111d06 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111cfb:	ff 45 f4             	incl   -0xc(%ebp)
f0111cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111d01:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111d04:	7c be                	jl     f0111cc4 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111d06:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111d0a:	7e 08                	jle    f0111d14 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0111d0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111d0f:	e9 ed 00 00 00       	jmp    f0111e01 <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111d14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111d17:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111d1d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111d20:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111d24:	74 08                	je     f0111d2e <sys_check_LRU_lists_free+0x96>
f0111d26:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111d29:	8b 40 10             	mov    0x10(%eax),%eax
f0111d2c:	eb 05                	jmp    f0111d33 <sys_check_LRU_lists_free+0x9b>
f0111d2e:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d33:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111d36:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111d3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111d3f:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111d45:	85 c0                	test   %eax,%eax
f0111d47:	0f 85 6e ff ff ff    	jne    f0111cbb <sys_check_LRU_lists_free+0x23>
f0111d4d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111d51:	0f 85 64 ff ff ff    	jne    f0111cbb <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111d57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111d5a:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111d60:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111d63:	eb 62                	jmp    f0111dc7 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f0111d65:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0111d6c:	eb 3a                	jmp    f0111da8 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111d6e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111d71:	8b 00                	mov    (%eax),%eax
f0111d73:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111d76:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111d7e:	89 c2                	mov    %eax,%edx
f0111d80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111d83:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111d8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0111d8d:	01 c8                	add    %ecx,%eax
f0111d8f:	8b 00                	mov    (%eax),%eax
f0111d91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111d94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111d97:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111d9c:	39 c2                	cmp    %eax,%edx
f0111d9e:	75 05                	jne    f0111da5 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0111da0:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111da3:	eb 0b                	jmp    f0111db0 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111da5:	ff 45 f0             	incl   -0x10(%ebp)
f0111da8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111dab:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111dae:	7c be                	jl     f0111d6e <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111db0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111db4:	7e 05                	jle    f0111dbb <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111db6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111db9:	eb 46                	jmp    f0111e01 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111dbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111dbe:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111dc4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111dc7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111dcb:	74 08                	je     f0111dd5 <sys_check_LRU_lists_free+0x13d>
f0111dcd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111dd0:	8b 40 10             	mov    0x10(%eax),%eax
f0111dd3:	eb 05                	jmp    f0111dda <sys_check_LRU_lists_free+0x142>
f0111dd5:	b8 00 00 00 00       	mov    $0x0,%eax
f0111dda:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111ddd:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111de3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111de6:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111dec:	85 c0                	test   %eax,%eax
f0111dee:	0f 85 71 ff ff ff    	jne    f0111d65 <sys_check_LRU_lists_free+0xcd>
f0111df4:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111df8:	0f 85 67 ff ff ff    	jne    f0111d65 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111dfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111e01:	c9                   	leave  
f0111e02:	c3                   	ret    

f0111e03 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111e03:	55                   	push   %ebp
f0111e04:	89 e5                	mov    %esp,%ebp
f0111e06:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111e09:	83 ec 04             	sub    $0x4,%esp
f0111e0c:	68 04 74 13 f0       	push   $0xf0137404
f0111e11:	68 9c 00 00 00       	push   $0x9c
f0111e16:	68 4f 74 13 f0       	push   $0xf013744f
f0111e1b:	e8 90 e3 fe ff       	call   f01001b0 <_panic>

f0111e20 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111e20:	55                   	push   %ebp
f0111e21:	89 e5                	mov    %esp,%ebp
f0111e23:	57                   	push   %edi
f0111e24:	56                   	push   %esi
f0111e25:	53                   	push   %ebx
f0111e26:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111e2c:	83 ec 0c             	sub    $0xc,%esp
f0111e2f:	68 70 74 13 f0       	push   $0xf0137470
f0111e34:	e8 f8 ef fe ff       	call   f0100e31 <cprintf>
f0111e39:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111e3c:	83 ec 0c             	sub    $0xc,%esp
f0111e3f:	68 94 74 13 f0       	push   $0xf0137494
f0111e44:	e8 e8 ef fe ff       	call   f0100e31 <cprintf>
f0111e49:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111e4c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111e53:	83 ec 0c             	sub    $0xc,%esp
f0111e56:	68 b0 74 13 f0       	push   $0xf01374b0
f0111e5b:	e8 d1 ef fe ff       	call   f0100e31 <cprintf>
f0111e60:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111e63:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111e66:	bb 6a 75 13 f0       	mov    $0xf013756a,%ebx
f0111e6b:	ba 03 00 00 00       	mov    $0x3,%edx
f0111e70:	89 c7                	mov    %eax,%edi
f0111e72:	89 de                	mov    %ebx,%esi
f0111e74:	89 d1                	mov    %edx,%ecx
f0111e76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111e78:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111e7b:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111e80:	b8 00 00 00 00       	mov    $0x0,%eax
f0111e85:	89 d7                	mov    %edx,%edi
f0111e87:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111e89:	83 ec 0c             	sub    $0xc,%esp
f0111e8c:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111e8f:	50                   	push   %eax
f0111e90:	e8 2e fd fe ff       	call   f0101bc3 <execute_command>
f0111e95:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111e98:	83 ec 0c             	sub    $0xc,%esp
f0111e9b:	68 de 74 13 f0       	push   $0xf01374de
f0111ea0:	e8 8c ef fe ff       	call   f0100e31 <cprintf>
f0111ea5:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111ea8:	83 ec 0c             	sub    $0xc,%esp
f0111eab:	68 f4 74 13 f0       	push   $0xf01374f4
f0111eb0:	e8 7c ef fe ff       	call   f0100e31 <cprintf>
f0111eb5:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111eb8:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111ebf:	65 00 00 
f0111ec2:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111ec8:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111ecd:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ed2:	89 d7                	mov    %edx,%edi
f0111ed4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111ed6:	83 ec 0c             	sub    $0xc,%esp
f0111ed9:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111edf:	50                   	push   %eax
f0111ee0:	e8 de fc fe ff       	call   f0101bc3 <execute_command>
f0111ee5:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111ee8:	83 ec 0c             	sub    $0xc,%esp
f0111eeb:	68 de 74 13 f0       	push   $0xf01374de
f0111ef0:	e8 3c ef fe ff       	call   f0100e31 <cprintf>
f0111ef5:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111ef8:	83 ec 0c             	sub    $0xc,%esp
f0111efb:	68 1c 75 13 f0       	push   $0xf013751c
f0111f00:	e8 2c ef fe ff       	call   f0100e31 <cprintf>
f0111f05:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111f08:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111f0f:	75 00 00 
f0111f12:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111f18:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111f1d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f22:	89 d7                	mov    %edx,%edi
f0111f24:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111f26:	83 ec 0c             	sub    $0xc,%esp
f0111f29:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111f2f:	50                   	push   %eax
f0111f30:	e8 8e fc fe ff       	call   f0101bc3 <execute_command>
f0111f35:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111f38:	83 ec 0c             	sub    $0xc,%esp
f0111f3b:	68 de 74 13 f0       	push   $0xf01374de
f0111f40:	e8 ec ee fe ff       	call   f0100e31 <cprintf>
f0111f45:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111f48:	83 ec 0c             	sub    $0xc,%esp
f0111f4b:	68 44 75 13 f0       	push   $0xf0137544
f0111f50:	e8 dc ee fe ff       	call   f0100e31 <cprintf>
f0111f55:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111f58:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111f5f:	6d 6d 00 
f0111f62:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111f68:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111f6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f72:	89 d7                	mov    %edx,%edi
f0111f74:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111f76:	83 ec 0c             	sub    $0xc,%esp
f0111f79:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111f7f:	50                   	push   %eax
f0111f80:	e8 3e fc fe ff       	call   f0101bc3 <execute_command>
f0111f85:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111f88:	83 ec 0c             	sub    $0xc,%esp
f0111f8b:	68 de 74 13 f0       	push   $0xf01374de
f0111f90:	e8 9c ee fe ff       	call   f0100e31 <cprintf>
f0111f95:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111f98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111fa0:	5b                   	pop    %ebx
f0111fa1:	5e                   	pop    %esi
f0111fa2:	5f                   	pop    %edi
f0111fa3:	5d                   	pop    %ebp
f0111fa4:	c3                   	ret    

f0111fa5 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111fa5:	55                   	push   %ebp
f0111fa6:	89 e5                	mov    %esp,%ebp
f0111fa8:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111fab:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111fb2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111fb9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fc0:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111fc5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fc8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fcb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fce:	50                   	push   %eax
f0111fcf:	e8 4b 60 ff ff       	call   f010801f <pt_set_page_permissions>
f0111fd4:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fd7:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111fdc:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fdf:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fe2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fe5:	50                   	push   %eax
f0111fe6:	e8 b8 4d 00 00       	call   f0116da3 <CP>
f0111feb:	83 c4 10             	add    $0x10,%esp
f0111fee:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ff1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ff5:	74 14                	je     f011200b <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111ff7:	83 ec 04             	sub    $0x4,%esp
f0111ffa:	68 d0 75 13 f0       	push   $0xf01375d0
f0111fff:	6a 5a                	push   $0x5a
f0112001:	68 f2 75 13 f0       	push   $0xf01375f2
f0112006:	e8 a5 e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f011200b:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0112012:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0112019:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112020:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112025:	ff 75 ec             	pushl  -0x14(%ebp)
f0112028:	ff 75 f0             	pushl  -0x10(%ebp)
f011202b:	ff 75 f4             	pushl  -0xc(%ebp)
f011202e:	50                   	push   %eax
f011202f:	e8 eb 5f ff ff       	call   f010801f <pt_set_page_permissions>
f0112034:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112037:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011203c:	ff 75 ec             	pushl  -0x14(%ebp)
f011203f:	ff 75 f0             	pushl  -0x10(%ebp)
f0112042:	ff 75 f4             	pushl  -0xc(%ebp)
f0112045:	50                   	push   %eax
f0112046:	e8 58 4d 00 00       	call   f0116da3 <CP>
f011204b:	83 c4 10             	add    $0x10,%esp
f011204e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112051:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112055:	74 14                	je     f011206b <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0112057:	83 ec 04             	sub    $0x4,%esp
f011205a:	68 10 76 13 f0       	push   $0xf0137610
f011205f:	6a 66                	push   $0x66
f0112061:	68 f2 75 13 f0       	push   $0xf01375f2
f0112066:	e8 45 e1 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f011206b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0112072:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0112079:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112080:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112085:	ff 75 ec             	pushl  -0x14(%ebp)
f0112088:	ff 75 f0             	pushl  -0x10(%ebp)
f011208b:	ff 75 f4             	pushl  -0xc(%ebp)
f011208e:	50                   	push   %eax
f011208f:	e8 8b 5f ff ff       	call   f010801f <pt_set_page_permissions>
f0112094:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112097:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011209c:	ff 75 ec             	pushl  -0x14(%ebp)
f011209f:	ff 75 f0             	pushl  -0x10(%ebp)
f01120a2:	ff 75 f4             	pushl  -0xc(%ebp)
f01120a5:	50                   	push   %eax
f01120a6:	e8 f8 4c 00 00       	call   f0116da3 <CP>
f01120ab:	83 c4 10             	add    $0x10,%esp
f01120ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01120b1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01120b5:	74 14                	je     f01120cb <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01120b7:	83 ec 04             	sub    $0x4,%esp
f01120ba:	68 34 76 13 f0       	push   $0xf0137634
f01120bf:	6a 71                	push   $0x71
f01120c1:	68 f2 75 13 f0       	push   $0xf01375f2
f01120c6:	e8 e5 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01120cb:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01120d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01120d9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01120e0:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01120e5:	ff 75 ec             	pushl  -0x14(%ebp)
f01120e8:	ff 75 f0             	pushl  -0x10(%ebp)
f01120eb:	ff 75 f4             	pushl  -0xc(%ebp)
f01120ee:	50                   	push   %eax
f01120ef:	e8 2b 5f ff ff       	call   f010801f <pt_set_page_permissions>
f01120f4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01120f7:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01120fc:	ff 75 ec             	pushl  -0x14(%ebp)
f01120ff:	ff 75 f0             	pushl  -0x10(%ebp)
f0112102:	ff 75 f4             	pushl  -0xc(%ebp)
f0112105:	50                   	push   %eax
f0112106:	e8 98 4c 00 00       	call   f0116da3 <CP>
f011210b:	83 c4 10             	add    $0x10,%esp
f011210e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112111:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112115:	74 14                	je     f011212b <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0112117:	83 ec 04             	sub    $0x4,%esp
f011211a:	68 58 76 13 f0       	push   $0xf0137658
f011211f:	6a 7d                	push   $0x7d
f0112121:	68 f2 75 13 f0       	push   $0xf01375f2
f0112126:	e8 85 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f011212b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0112132:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0112139:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112140:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112145:	ff 75 ec             	pushl  -0x14(%ebp)
f0112148:	ff 75 f0             	pushl  -0x10(%ebp)
f011214b:	ff 75 f4             	pushl  -0xc(%ebp)
f011214e:	50                   	push   %eax
f011214f:	e8 cb 5e ff ff       	call   f010801f <pt_set_page_permissions>
f0112154:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112157:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011215c:	ff 75 ec             	pushl  -0x14(%ebp)
f011215f:	ff 75 f0             	pushl  -0x10(%ebp)
f0112162:	ff 75 f4             	pushl  -0xc(%ebp)
f0112165:	50                   	push   %eax
f0112166:	e8 38 4c 00 00       	call   f0116da3 <CP>
f011216b:	83 c4 10             	add    $0x10,%esp
f011216e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112171:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112175:	74 17                	je     f011218e <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0112177:	83 ec 04             	sub    $0x4,%esp
f011217a:	68 7c 76 13 f0       	push   $0xf013767c
f011217f:	68 89 00 00 00       	push   $0x89
f0112184:	68 f2 75 13 f0       	push   $0xf01375f2
f0112189:	e8 22 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011218e:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0112195:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f011219c:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01121a3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01121a8:	ff 75 ec             	pushl  -0x14(%ebp)
f01121ab:	ff 75 f0             	pushl  -0x10(%ebp)
f01121ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01121b1:	50                   	push   %eax
f01121b2:	e8 68 5e ff ff       	call   f010801f <pt_set_page_permissions>
f01121b7:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01121ba:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01121bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01121c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01121c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01121c8:	50                   	push   %eax
f01121c9:	e8 d5 4b 00 00       	call   f0116da3 <CP>
f01121ce:	83 c4 10             	add    $0x10,%esp
f01121d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01121d4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01121d8:	74 17                	je     f01121f1 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01121da:	83 ec 04             	sub    $0x4,%esp
f01121dd:	68 a0 76 13 f0       	push   $0xf01376a0
f01121e2:	68 95 00 00 00       	push   $0x95
f01121e7:	68 f2 75 13 f0       	push   $0xf01375f2
f01121ec:	e8 bf df fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01121f1:	83 ec 0c             	sub    $0xc,%esp
f01121f4:	68 cc 76 13 f0       	push   $0xf01376cc
f01121f9:	e8 33 ec fe ff       	call   f0100e31 <cprintf>
f01121fe:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112201:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112206:	c9                   	leave  
f0112207:	c3                   	ret    

f0112208 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0112208:	55                   	push   %ebp
f0112209:	89 e5                	mov    %esp,%ebp
f011220b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011220e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0112215:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011221c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112223:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112228:	ff 75 ec             	pushl  -0x14(%ebp)
f011222b:	ff 75 f0             	pushl  -0x10(%ebp)
f011222e:	ff 75 f4             	pushl  -0xc(%ebp)
f0112231:	50                   	push   %eax
f0112232:	e8 e8 5d ff ff       	call   f010801f <pt_set_page_permissions>
f0112237:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f011223a:	83 ec 04             	sub    $0x4,%esp
f011223d:	68 1c 77 13 f0       	push   $0xf013771c
f0112242:	68 a2 00 00 00       	push   $0xa2
f0112247:	68 f2 75 13 f0       	push   $0xf01375f2
f011224c:	e8 5f df fe ff       	call   f01001b0 <_panic>

f0112251 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0112251:	55                   	push   %ebp
f0112252:	89 e5                	mov    %esp,%ebp
f0112254:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0112257:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011225e:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112263:	83 ec 08             	sub    $0x8,%esp
f0112266:	ff 75 f4             	pushl  -0xc(%ebp)
f0112269:	50                   	push   %eax
f011226a:	e8 74 5e ff ff       	call   f01080e3 <pt_get_page_permissions>
f011226f:	83 c4 10             	add    $0x10,%esp
f0112272:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0112275:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0112279:	74 17                	je     f0112292 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f011227b:	83 ec 04             	sub    $0x4,%esp
f011227e:	68 b8 77 13 f0       	push   $0xf01377b8
f0112283:	68 b0 00 00 00       	push   $0xb0
f0112288:	68 f2 75 13 f0       	push   $0xf01375f2
f011228d:	e8 1e df fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0112292:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112299:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011229e:	83 ec 08             	sub    $0x8,%esp
f01122a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01122a4:	50                   	push   %eax
f01122a5:	e8 39 5e ff ff       	call   f01080e3 <pt_get_page_permissions>
f01122aa:	83 c4 10             	add    $0x10,%esp
f01122ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01122b0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01122b4:	74 17                	je     f01122cd <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01122b6:	83 ec 04             	sub    $0x4,%esp
f01122b9:	68 dc 77 13 f0       	push   $0xf01377dc
f01122be:	68 b8 00 00 00       	push   $0xb8
f01122c3:	68 f2 75 13 f0       	push   $0xf01375f2
f01122c8:	e8 e3 de fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01122cd:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01122d4:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01122d9:	83 ec 08             	sub    $0x8,%esp
f01122dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01122df:	50                   	push   %eax
f01122e0:	e8 fe 5d ff ff       	call   f01080e3 <pt_get_page_permissions>
f01122e5:	83 c4 10             	add    $0x10,%esp
f01122e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01122eb:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01122ef:	74 17                	je     f0112308 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01122f1:	83 ec 04             	sub    $0x4,%esp
f01122f4:	68 00 78 13 f0       	push   $0xf0137800
f01122f9:	68 c0 00 00 00       	push   $0xc0
f01122fe:	68 f2 75 13 f0       	push   $0xf01375f2
f0112303:	e8 a8 de fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f0112308:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011230f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112314:	83 ec 08             	sub    $0x8,%esp
f0112317:	ff 75 f4             	pushl  -0xc(%ebp)
f011231a:	50                   	push   %eax
f011231b:	e8 c3 5d ff ff       	call   f01080e3 <pt_get_page_permissions>
f0112320:	83 c4 10             	add    $0x10,%esp
f0112323:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112326:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011232a:	74 17                	je     f0112343 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f011232c:	83 ec 04             	sub    $0x4,%esp
f011232f:	68 24 78 13 f0       	push   $0xf0137824
f0112334:	68 c7 00 00 00       	push   $0xc7
f0112339:	68 f2 75 13 f0       	push   $0xf01375f2
f011233e:	e8 6d de fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112343:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011234a:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011234f:	83 ec 08             	sub    $0x8,%esp
f0112352:	ff 75 f4             	pushl  -0xc(%ebp)
f0112355:	50                   	push   %eax
f0112356:	e8 88 5d ff ff       	call   f01080e3 <pt_get_page_permissions>
f011235b:	83 c4 10             	add    $0x10,%esp
f011235e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0112361:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0112365:	74 17                	je     f011237e <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0112367:	83 ec 04             	sub    $0x4,%esp
f011236a:	68 48 78 13 f0       	push   $0xf0137848
f011236f:	68 ce 00 00 00       	push   $0xce
f0112374:	68 f2 75 13 f0       	push   $0xf01375f2
f0112379:	e8 32 de fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011237e:	83 ec 0c             	sub    $0xc,%esp
f0112381:	68 6c 78 13 f0       	push   $0xf013786c
f0112386:	e8 a6 ea fe ff       	call   f0100e31 <cprintf>
f011238b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011238e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112393:	c9                   	leave  
f0112394:	c3                   	ret    

f0112395 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0112395:	55                   	push   %ebp
f0112396:	89 e5                	mov    %esp,%ebp
f0112398:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011239b:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01123a2:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01123a7:	83 ec 08             	sub    $0x8,%esp
f01123aa:	ff 75 f4             	pushl  -0xc(%ebp)
f01123ad:	50                   	push   %eax
f01123ae:	e8 79 5d ff ff       	call   f010812c <pt_clear_page_table_entry>
f01123b3:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01123b6:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01123bb:	83 ec 08             	sub    $0x8,%esp
f01123be:	ff 75 f4             	pushl  -0xc(%ebp)
f01123c1:	50                   	push   %eax
f01123c2:	e8 38 49 00 00       	call   f0116cff <CE>
f01123c7:	83 c4 10             	add    $0x10,%esp
f01123ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01123cd:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01123d1:	74 17                	je     f01123ea <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01123d3:	83 ec 04             	sub    $0x4,%esp
f01123d6:	68 b4 78 13 f0       	push   $0xf01378b4
f01123db:	68 de 00 00 00       	push   $0xde
f01123e0:	68 f2 75 13 f0       	push   $0xf01375f2
f01123e5:	e8 c6 dd fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f01123ea:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01123f1:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01123f6:	83 ec 08             	sub    $0x8,%esp
f01123f9:	ff 75 f4             	pushl  -0xc(%ebp)
f01123fc:	50                   	push   %eax
f01123fd:	e8 2a 5d ff ff       	call   f010812c <pt_clear_page_table_entry>
f0112402:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112405:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011240a:	83 ec 08             	sub    $0x8,%esp
f011240d:	ff 75 f4             	pushl  -0xc(%ebp)
f0112410:	50                   	push   %eax
f0112411:	e8 e9 48 00 00       	call   f0116cff <CE>
f0112416:	83 c4 10             	add    $0x10,%esp
f0112419:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011241c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112420:	74 17                	je     f0112439 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0112422:	83 ec 04             	sub    $0x4,%esp
f0112425:	68 e0 78 13 f0       	push   $0xf01378e0
f011242a:	68 e6 00 00 00       	push   $0xe6
f011242f:	68 f2 75 13 f0       	push   $0xf01375f2
f0112434:	e8 77 dd fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0112439:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112440:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112445:	83 ec 08             	sub    $0x8,%esp
f0112448:	ff 75 f4             	pushl  -0xc(%ebp)
f011244b:	50                   	push   %eax
f011244c:	e8 db 5c ff ff       	call   f010812c <pt_clear_page_table_entry>
f0112451:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112454:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112459:	83 ec 08             	sub    $0x8,%esp
f011245c:	ff 75 f4             	pushl  -0xc(%ebp)
f011245f:	50                   	push   %eax
f0112460:	e8 9a 48 00 00       	call   f0116cff <CE>
f0112465:	83 c4 10             	add    $0x10,%esp
f0112468:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011246b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011246f:	74 17                	je     f0112488 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0112471:	83 ec 04             	sub    $0x4,%esp
f0112474:	68 0c 79 13 f0       	push   $0xf013790c
f0112479:	68 ee 00 00 00       	push   $0xee
f011247e:	68 f2 75 13 f0       	push   $0xf01375f2
f0112483:	e8 28 dd fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0112488:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011248f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112494:	83 ec 08             	sub    $0x8,%esp
f0112497:	ff 75 f4             	pushl  -0xc(%ebp)
f011249a:	50                   	push   %eax
f011249b:	e8 8c 5c ff ff       	call   f010812c <pt_clear_page_table_entry>
f01124a0:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01124a3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01124a8:	83 ec 08             	sub    $0x8,%esp
f01124ab:	ff 75 f4             	pushl  -0xc(%ebp)
f01124ae:	50                   	push   %eax
f01124af:	e8 4b 48 00 00       	call   f0116cff <CE>
f01124b4:	83 c4 10             	add    $0x10,%esp
f01124b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01124ba:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01124be:	74 17                	je     f01124d7 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01124c0:	83 ec 04             	sub    $0x4,%esp
f01124c3:	68 38 79 13 f0       	push   $0xf0137938
f01124c8:	68 f6 00 00 00       	push   $0xf6
f01124cd:	68 f2 75 13 f0       	push   $0xf01375f2
f01124d2:	e8 d9 dc fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01124d7:	83 ec 0c             	sub    $0xc,%esp
f01124da:	68 64 79 13 f0       	push   $0xf0137964
f01124df:	e8 4d e9 fe ff       	call   f0100e31 <cprintf>
f01124e4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01124e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01124ec:	c9                   	leave  
f01124ed:	c3                   	ret    

f01124ee <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01124ee:	55                   	push   %ebp
f01124ef:	89 e5                	mov    %esp,%ebp
f01124f1:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01124f4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01124fb:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112500:	83 ec 08             	sub    $0x8,%esp
f0112503:	ff 75 f4             	pushl  -0xc(%ebp)
f0112506:	50                   	push   %eax
f0112507:	e8 20 5c ff ff       	call   f010812c <pt_clear_page_table_entry>
f011250c:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011250f:	83 ec 04             	sub    $0x4,%esp
f0112512:	68 b0 79 13 f0       	push   $0xf01379b0
f0112517:	68 01 01 00 00       	push   $0x101
f011251c:	68 f2 75 13 f0       	push   $0xf01375f2
f0112521:	e8 8a dc fe ff       	call   f01001b0 <_panic>

f0112526 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112526:	55                   	push   %ebp
f0112527:	89 e5                	mov    %esp,%ebp
f0112529:	57                   	push   %edi
f011252a:	56                   	push   %esi
f011252b:	53                   	push   %ebx
f011252c:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112532:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112538:	bb f4 7c 13 f0       	mov    $0xf0137cf4,%ebx
f011253d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112542:	89 c7                	mov    %eax,%edi
f0112544:	89 de                	mov    %ebx,%esi
f0112546:	89 d1                	mov    %edx,%ecx
f0112548:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011254a:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112550:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112555:	b0 00                	mov    $0x0,%al
f0112557:	89 d7                	mov    %edx,%edi
f0112559:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011255b:	6a 00                	push   $0x0
f011255d:	6a 0a                	push   $0xa
f011255f:	6a 14                	push   $0x14
f0112561:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112567:	50                   	push   %eax
f0112568:	e8 5e 67 ff ff       	call   f0108ccb <env_create>
f011256d:	83 c4 10             	add    $0x10,%esp
f0112570:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112573:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112576:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011257c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011257f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112582:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112588:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011258b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011258e:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112591:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112598:	75 70 20 
f011259b:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01125a2:	00 00 00 
f01125a5:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f01125ab:	b9 03 00 00 00       	mov    $0x3,%ecx
f01125b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01125b5:	89 d7                	mov    %edx,%edi
f01125b7:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01125b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01125bc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01125bf:	83 ec 08             	sub    $0x8,%esp
f01125c2:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01125c8:	52                   	push   %edx
f01125c9:	50                   	push   %eax
f01125ca:	e8 d7 ce 01 00       	call   f012f4a6 <ltostr>
f01125cf:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01125d2:	83 ec 04             	sub    $0x4,%esp
f01125d5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01125db:	50                   	push   %eax
f01125dc:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01125e2:	50                   	push   %eax
f01125e3:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01125e9:	50                   	push   %eax
f01125ea:	e8 af cf 01 00       	call   f012f59e <strcconcat>
f01125ef:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01125f2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01125f9:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112600:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112607:	83 ec 0c             	sub    $0xc,%esp
f011260a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011260d:	e8 ee 48 00 00       	call   f0116f00 <ClearUserSpace>
f0112612:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112615:	83 ec 04             	sub    $0x4,%esp
f0112618:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011261e:	50                   	push   %eax
f011261f:	68 46 7a 13 f0       	push   $0xf0137a46
f0112624:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011262a:	50                   	push   %eax
f011262b:	e8 6e cf 01 00       	call   f012f59e <strcconcat>
f0112630:	83 c4 10             	add    $0x10,%esp
f0112633:	83 ec 0c             	sub    $0xc,%esp
f0112636:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011263c:	50                   	push   %eax
f011263d:	e8 81 f5 fe ff       	call   f0101bc3 <execute_command>
f0112642:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112645:	83 ec 04             	sub    $0x4,%esp
f0112648:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011264e:	50                   	push   %eax
f011264f:	68 51 7a 13 f0       	push   $0xf0137a51
f0112654:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011265a:	50                   	push   %eax
f011265b:	e8 3e cf 01 00       	call   f012f59e <strcconcat>
f0112660:	83 c4 10             	add    $0x10,%esp
f0112663:	83 ec 0c             	sub    $0xc,%esp
f0112666:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011266c:	50                   	push   %eax
f011266d:	e8 51 f5 fe ff       	call   f0101bc3 <execute_command>
f0112672:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112675:	83 ec 04             	sub    $0x4,%esp
f0112678:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011267e:	50                   	push   %eax
f011267f:	68 5c 7a 13 f0       	push   $0xf0137a5c
f0112684:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011268a:	50                   	push   %eax
f011268b:	e8 0e cf 01 00       	call   f012f59e <strcconcat>
f0112690:	83 c4 10             	add    $0x10,%esp
f0112693:	83 ec 0c             	sub    $0xc,%esp
f0112696:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011269c:	50                   	push   %eax
f011269d:	e8 21 f5 fe ff       	call   f0101bc3 <execute_command>
f01126a2:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01126a5:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01126ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126af:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01126b2:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01126b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126bc:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01126bf:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01126c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126c9:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01126cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126cf:	83 ec 08             	sub    $0x8,%esp
f01126d2:	50                   	push   %eax
f01126d3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126d6:	e8 8c 47 00 00       	call   f0116e67 <GP>
f01126db:	83 c4 10             	add    $0x10,%esp
f01126de:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01126e1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01126e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01126ef:	e8 d2 a2 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01126f4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01126f7:	83 ec 0c             	sub    $0xc,%esp
f01126fa:	68 68 7a 13 f0       	push   $0xf0137a68
f01126ff:	e8 2d e7 fe ff       	call   f0100e31 <cprintf>
f0112704:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112707:	6a 03                	push   $0x3
f0112709:	68 00 00 90 02       	push   $0x2900000
f011270e:	68 00 00 80 02       	push   $0x2800000
f0112713:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112716:	e8 72 64 ff ff       	call   f0108b8d <cut_paste_pages>
f011271b:	83 c4 10             	add    $0x10,%esp
f011271e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112721:	e8 a0 a2 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112726:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112729:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112730:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112734:	75 08                	jne    f011273e <test_cut_paste_pages+0x218>
f0112736:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112739:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011273c:	74 2b                	je     f0112769 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011273e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112741:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112744:	83 ec 0c             	sub    $0xc,%esp
f0112747:	50                   	push   %eax
f0112748:	ff 75 b4             	pushl  -0x4c(%ebp)
f011274b:	68 98 7a 13 f0       	push   $0xf0137a98
f0112750:	68 3a 01 00 00       	push   $0x13a
f0112755:	68 f2 75 13 f0       	push   $0xf01375f2
f011275a:	e8 5f dc fe ff       	call   f01003be <_warn>
f011275f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112762:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112769:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011276d:	74 04                	je     f0112773 <test_cut_paste_pages+0x24d>
f011276f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112773:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011277a:	83 ec 08             	sub    $0x8,%esp
f011277d:	6a 00                	push   $0x0
f011277f:	6a 01                	push   $0x1
f0112781:	6a 00                	push   $0x0
f0112783:	68 ff 0f 00 00       	push   $0xfff
f0112788:	ff 75 bc             	pushl  -0x44(%ebp)
f011278b:	6a 01                	push   $0x1
f011278d:	68 00 30 00 00       	push   $0x3000
f0112792:	68 00 00 90 02       	push   $0x2900000
f0112797:	68 00 00 80 02       	push   $0x2800000
f011279c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011279f:	e8 90 47 00 00       	call   f0116f34 <CCP>
f01127a4:	83 c4 30             	add    $0x30,%esp
f01127a7:	83 f8 01             	cmp    $0x1,%eax
f01127aa:	74 21                	je     f01127cd <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01127ac:	83 ec 04             	sub    $0x4,%esp
f01127af:	68 ec 7a 13 f0       	push   $0xf0137aec
f01127b4:	68 42 01 00 00       	push   $0x142
f01127b9:	68 f2 75 13 f0       	push   $0xf01375f2
f01127be:	e8 fb db fe ff       	call   f01003be <_warn>
f01127c3:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01127c6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01127cd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127d1:	74 04                	je     f01127d7 <test_cut_paste_pages+0x2b1>
f01127d3:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01127d7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01127de:	83 ec 04             	sub    $0x4,%esp
f01127e1:	6a 00                	push   $0x0
f01127e3:	68 00 00 90 02       	push   $0x2900000
f01127e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127eb:	e8 d5 41 00 00       	call   f01169c5 <CB>
f01127f0:	83 c4 10             	add    $0x10,%esp
f01127f3:	85 c0                	test   %eax,%eax
f01127f5:	0f 84 f6 00 00 00    	je     f01128f1 <test_cut_paste_pages+0x3cb>
f01127fb:	83 ec 04             	sub    $0x4,%esp
f01127fe:	6a 00                	push   $0x0
f0112800:	68 00 10 90 02       	push   $0x2901000
f0112805:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112808:	e8 b8 41 00 00       	call   f01169c5 <CB>
f011280d:	83 c4 10             	add    $0x10,%esp
f0112810:	85 c0                	test   %eax,%eax
f0112812:	0f 84 d9 00 00 00    	je     f01128f1 <test_cut_paste_pages+0x3cb>
f0112818:	83 ec 04             	sub    $0x4,%esp
f011281b:	6a 00                	push   $0x0
f011281d:	68 00 20 90 02       	push   $0x2902000
f0112822:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112825:	e8 9b 41 00 00       	call   f01169c5 <CB>
f011282a:	83 c4 10             	add    $0x10,%esp
f011282d:	85 c0                	test   %eax,%eax
f011282f:	0f 84 bc 00 00 00    	je     f01128f1 <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f0112835:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011283c:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112843:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011284a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011284d:	8a 00                	mov    (%eax),%al
f011284f:	3c 61                	cmp    $0x61,%al
f0112851:	75 12                	jne    f0112865 <test_cut_paste_pages+0x33f>
f0112853:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112856:	8a 00                	mov    (%eax),%al
f0112858:	3c 62                	cmp    $0x62,%al
f011285a:	75 09                	jne    f0112865 <test_cut_paste_pages+0x33f>
f011285c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011285f:	8a 00                	mov    (%eax),%al
f0112861:	3c 63                	cmp    $0x63,%al
f0112863:	74 21                	je     f0112886 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112865:	83 ec 04             	sub    $0x4,%esp
f0112868:	68 38 7b 13 f0       	push   $0xf0137b38
f011286d:	68 4f 01 00 00       	push   $0x14f
f0112872:	68 f2 75 13 f0       	push   $0xf01375f2
f0112877:	e8 42 db fe ff       	call   f01003be <_warn>
f011287c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011287f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112886:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011288a:	74 04                	je     f0112890 <test_cut_paste_pages+0x36a>
f011288c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112890:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112897:	83 ec 04             	sub    $0x4,%esp
f011289a:	6a 01                	push   $0x1
f011289c:	68 00 10 90 02       	push   $0x2901000
f01128a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128a4:	e8 1c 41 00 00       	call   f01169c5 <CB>
f01128a9:	83 c4 10             	add    $0x10,%esp
f01128ac:	85 c0                	test   %eax,%eax
f01128ae:	74 41                	je     f01128f1 <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f01128b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128b3:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01128b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128b9:	8a 00                	mov    (%eax),%al
f01128bb:	3c 79                	cmp    $0x79,%al
f01128bd:	74 21                	je     f01128e0 <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01128bf:	83 ec 04             	sub    $0x4,%esp
f01128c2:	68 38 7b 13 f0       	push   $0xf0137b38
f01128c7:	68 5a 01 00 00       	push   $0x15a
f01128cc:	68 f2 75 13 f0       	push   $0xf01375f2
f01128d1:	e8 e8 da fe ff       	call   f01003be <_warn>
f01128d6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01128d9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01128e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128e4:	74 04                	je     f01128ea <test_cut_paste_pages+0x3c4>
f01128e6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01128ea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01128f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01128f4:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01128f7:	6a 02                	push   $0x2
f01128f9:	68 00 f0 bf 02       	push   $0x2bff000
f01128fe:	68 00 10 90 02       	push   $0x2901000
f0112903:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112906:	e8 82 62 ff ff       	call   f0108b8d <cut_paste_pages>
f011290b:	83 c4 10             	add    $0x10,%esp
f011290e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112911:	e8 b0 a0 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112916:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112919:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011291d:	75 0b                	jne    f011292a <test_cut_paste_pages+0x404>
f011291f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112922:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112925:	83 f8 01             	cmp    $0x1,%eax
f0112928:	74 2b                	je     f0112955 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011292a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011292d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112930:	83 ec 0c             	sub    $0xc,%esp
f0112933:	50                   	push   %eax
f0112934:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112937:	68 98 7a 13 f0       	push   $0xf0137a98
f011293c:	68 6b 01 00 00       	push   $0x16b
f0112941:	68 f2 75 13 f0       	push   $0xf01375f2
f0112946:	e8 73 da fe ff       	call   f01003be <_warn>
f011294b:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011294e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112955:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112959:	74 04                	je     f011295f <test_cut_paste_pages+0x439>
f011295b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011295f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112966:	83 ec 08             	sub    $0x8,%esp
f0112969:	6a 00                	push   $0x0
f011296b:	6a 01                	push   $0x1
f011296d:	6a 00                	push   $0x0
f011296f:	68 ff 0f 00 00       	push   $0xfff
f0112974:	ff 75 bc             	pushl  -0x44(%ebp)
f0112977:	6a 01                	push   $0x1
f0112979:	68 00 20 00 00       	push   $0x2000
f011297e:	68 00 f0 bf 02       	push   $0x2bff000
f0112983:	68 00 10 90 02       	push   $0x2901000
f0112988:	ff 75 d4             	pushl  -0x2c(%ebp)
f011298b:	e8 a4 45 00 00       	call   f0116f34 <CCP>
f0112990:	83 c4 30             	add    $0x30,%esp
f0112993:	83 f8 01             	cmp    $0x1,%eax
f0112996:	74 21                	je     f01129b9 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112998:	83 ec 04             	sub    $0x4,%esp
f011299b:	68 ec 7a 13 f0       	push   $0xf0137aec
f01129a0:	68 73 01 00 00       	push   $0x173
f01129a5:	68 f2 75 13 f0       	push   $0xf01375f2
f01129aa:	e8 0f da fe ff       	call   f01003be <_warn>
f01129af:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01129b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01129b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129bd:	74 04                	je     f01129c3 <test_cut_paste_pages+0x49d>
f01129bf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01129c3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01129ca:	83 ec 04             	sub    $0x4,%esp
f01129cd:	6a 00                	push   $0x0
f01129cf:	68 ff f7 bf 02       	push   $0x2bff7ff
f01129d4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129d7:	e8 e9 3f 00 00       	call   f01169c5 <CB>
f01129dc:	83 c4 10             	add    $0x10,%esp
f01129df:	85 c0                	test   %eax,%eax
f01129e1:	74 6b                	je     f0112a4e <test_cut_paste_pages+0x528>
f01129e3:	83 ec 04             	sub    $0x4,%esp
f01129e6:	6a 00                	push   $0x0
f01129e8:	68 ff 0f c0 02       	push   $0x2c00fff
f01129ed:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129f0:	e8 d0 3f 00 00       	call   f01169c5 <CB>
f01129f5:	83 c4 10             	add    $0x10,%esp
f01129f8:	85 c0                	test   %eax,%eax
f01129fa:	74 52                	je     f0112a4e <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f01129fc:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112a03:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112a0a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a0d:	8a 00                	mov    (%eax),%al
f0112a0f:	3c 79                	cmp    $0x79,%al
f0112a11:	75 09                	jne    f0112a1c <test_cut_paste_pages+0x4f6>
f0112a13:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a16:	8a 00                	mov    (%eax),%al
f0112a18:	3c 63                	cmp    $0x63,%al
f0112a1a:	74 21                	je     f0112a3d <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112a1c:	83 ec 04             	sub    $0x4,%esp
f0112a1f:	68 38 7b 13 f0       	push   $0xf0137b38
f0112a24:	68 7f 01 00 00       	push   $0x17f
f0112a29:	68 f2 75 13 f0       	push   $0xf01375f2
f0112a2e:	e8 8b d9 fe ff       	call   f01003be <_warn>
f0112a33:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a36:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112a3d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a41:	74 04                	je     f0112a47 <test_cut_paste_pages+0x521>
f0112a43:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112a47:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112a4e:	83 ec 0c             	sub    $0xc,%esp
f0112a51:	68 71 7b 13 f0       	push   $0xf0137b71
f0112a56:	e8 d6 e3 fe ff       	call   f0100e31 <cprintf>
f0112a5b:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112a5e:	83 ec 0c             	sub    $0xc,%esp
f0112a61:	68 80 7b 13 f0       	push   $0xf0137b80
f0112a66:	e8 c6 e3 fe ff       	call   f0100e31 <cprintf>
f0112a6b:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112a6e:	83 ec 04             	sub    $0x4,%esp
f0112a71:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112a77:	50                   	push   %eax
f0112a78:	68 a9 7b 13 f0       	push   $0xf0137ba9
f0112a7d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112a83:	50                   	push   %eax
f0112a84:	e8 15 cb 01 00       	call   f012f59e <strcconcat>
f0112a89:	83 c4 10             	add    $0x10,%esp
f0112a8c:	83 ec 0c             	sub    $0xc,%esp
f0112a8f:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112a95:	50                   	push   %eax
f0112a96:	e8 28 f1 fe ff       	call   f0101bc3 <execute_command>
f0112a9b:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0112a9e:	83 ec 04             	sub    $0x4,%esp
f0112aa1:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112aa7:	50                   	push   %eax
f0112aa8:	68 b4 7b 13 f0       	push   $0xf0137bb4
f0112aad:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112ab3:	50                   	push   %eax
f0112ab4:	e8 e5 ca 01 00       	call   f012f59e <strcconcat>
f0112ab9:	83 c4 10             	add    $0x10,%esp
f0112abc:	83 ec 0c             	sub    $0xc,%esp
f0112abf:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112ac5:	50                   	push   %eax
f0112ac6:	e8 f8 f0 fe ff       	call   f0101bc3 <execute_command>
f0112acb:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112ace:	83 ec 04             	sub    $0x4,%esp
f0112ad1:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112ad7:	50                   	push   %eax
f0112ad8:	68 bf 7b 13 f0       	push   $0xf0137bbf
f0112add:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112ae3:	50                   	push   %eax
f0112ae4:	e8 b5 ca 01 00       	call   f012f59e <strcconcat>
f0112ae9:	83 c4 10             	add    $0x10,%esp
f0112aec:	83 ec 0c             	sub    $0xc,%esp
f0112aef:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112af5:	50                   	push   %eax
f0112af6:	e8 c8 f0 fe ff       	call   f0101bc3 <execute_command>
f0112afb:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112afe:	83 ec 04             	sub    $0x4,%esp
f0112b01:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112b07:	50                   	push   %eax
f0112b08:	68 ca 7b 13 f0       	push   $0xf0137bca
f0112b0d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112b13:	50                   	push   %eax
f0112b14:	e8 85 ca 01 00       	call   f012f59e <strcconcat>
f0112b19:	83 c4 10             	add    $0x10,%esp
f0112b1c:	83 ec 0c             	sub    $0xc,%esp
f0112b1f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112b25:	50                   	push   %eax
f0112b26:	e8 98 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b2b:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112b2e:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112b35:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b38:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112b3b:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112b42:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b45:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112b48:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112b4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b52:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112b55:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112b5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b5f:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112b62:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112b69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b6c:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112b6f:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112b76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b79:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112b7c:	83 ec 08             	sub    $0x8,%esp
f0112b7f:	68 00 00 c0 01       	push   $0x1c00000
f0112b84:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b87:	e8 db 42 00 00       	call   f0116e67 <GP>
f0112b8c:	83 c4 10             	add    $0x10,%esp
f0112b8f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112b92:	83 ec 08             	sub    $0x8,%esp
f0112b95:	68 00 00 40 01       	push   $0x1400000
f0112b9a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b9d:	e8 c5 42 00 00       	call   f0116e67 <GP>
f0112ba2:	83 c4 10             	add    $0x10,%esp
f0112ba5:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112ba8:	e8 19 9e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112bad:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112bb0:	6a 01                	push   $0x1
f0112bb2:	68 00 00 40 01       	push   $0x1400000
f0112bb7:	68 00 00 c0 01       	push   $0x1c00000
f0112bbc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bbf:	e8 c9 5f ff ff       	call   f0108b8d <cut_paste_pages>
f0112bc4:	83 c4 10             	add    $0x10,%esp
f0112bc7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112bca:	e8 f7 9d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112bcf:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112bd2:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112bd6:	75 08                	jne    f0112be0 <test_cut_paste_pages+0x6ba>
f0112bd8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112bdb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112bde:	74 2b                	je     f0112c0b <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112be0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112be3:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112be6:	83 ec 0c             	sub    $0xc,%esp
f0112be9:	50                   	push   %eax
f0112bea:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112bed:	68 d8 7b 13 f0       	push   $0xf0137bd8
f0112bf2:	68 a2 01 00 00       	push   $0x1a2
f0112bf7:	68 f2 75 13 f0       	push   $0xf01375f2
f0112bfc:	e8 bd d7 fe ff       	call   f01003be <_warn>
f0112c01:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112c04:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112c0b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c0f:	74 04                	je     f0112c15 <test_cut_paste_pages+0x6ef>
f0112c11:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112c15:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112c1c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112c23:	83 ec 08             	sub    $0x8,%esp
f0112c26:	6a 00                	push   $0x0
f0112c28:	68 ff 0f 00 00       	push   $0xfff
f0112c2d:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112c30:	68 ff 0f 00 00       	push   $0xfff
f0112c35:	ff 75 a0             	pushl  -0x60(%ebp)
f0112c38:	6a 01                	push   $0x1
f0112c3a:	68 00 10 00 00       	push   $0x1000
f0112c3f:	68 00 00 40 01       	push   $0x1400000
f0112c44:	68 00 00 c0 01       	push   $0x1c00000
f0112c49:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c4c:	e8 e3 42 00 00       	call   f0116f34 <CCP>
f0112c51:	83 c4 30             	add    $0x30,%esp
f0112c54:	83 f8 01             	cmp    $0x1,%eax
f0112c57:	74 28                	je     f0112c81 <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112c59:	83 ec 04             	sub    $0x4,%esp
f0112c5c:	68 ec 7a 13 f0       	push   $0xf0137aec
f0112c61:	68 ab 01 00 00       	push   $0x1ab
f0112c66:	68 f2 75 13 f0       	push   $0xf01375f2
f0112c6b:	e8 4e d7 fe ff       	call   f01003be <_warn>
f0112c70:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c73:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112c7a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112c81:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c85:	74 04                	je     f0112c8b <test_cut_paste_pages+0x765>
f0112c87:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112c8b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112c92:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112c96:	0f 84 92 00 00 00    	je     f0112d2e <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0112c9c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112ca3:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112caa:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112cb1:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112cb8:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112cbf:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112cc6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112cc9:	8a 00                	mov    (%eax),%al
f0112ccb:	3c 61                	cmp    $0x61,%al
f0112ccd:	75 2d                	jne    f0112cfc <test_cut_paste_pages+0x7d6>
f0112ccf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112cd2:	8a 00                	mov    (%eax),%al
f0112cd4:	3c 78                	cmp    $0x78,%al
f0112cd6:	75 24                	jne    f0112cfc <test_cut_paste_pages+0x7d6>
f0112cd8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112cdb:	8a 00                	mov    (%eax),%al
f0112cdd:	3c 62                	cmp    $0x62,%al
f0112cdf:	75 1b                	jne    f0112cfc <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ce1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ce4:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ce6:	3c 79                	cmp    $0x79,%al
f0112ce8:	75 12                	jne    f0112cfc <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112cea:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ced:	8a 00                	mov    (%eax),%al
f0112cef:	3c 63                	cmp    $0x63,%al
f0112cf1:	75 09                	jne    f0112cfc <test_cut_paste_pages+0x7d6>
f0112cf3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112cf6:	8a 00                	mov    (%eax),%al
f0112cf8:	3c 7a                	cmp    $0x7a,%al
f0112cfa:	74 21                	je     f0112d1d <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112cfc:	83 ec 04             	sub    $0x4,%esp
f0112cff:	68 38 7b 13 f0       	push   $0xf0137b38
f0112d04:	68 bd 01 00 00       	push   $0x1bd
f0112d09:	68 f2 75 13 f0       	push   $0xf01375f2
f0112d0e:	e8 ab d6 fe ff       	call   f01003be <_warn>
f0112d13:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d16:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112d1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d21:	74 04                	je     f0112d27 <test_cut_paste_pages+0x801>
f0112d23:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d27:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112d2e:	e8 93 9c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112d33:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112d36:	6a 03                	push   $0x3
f0112d38:	68 00 f0 bf 01       	push   $0x1bff000
f0112d3d:	68 00 00 40 01       	push   $0x1400000
f0112d42:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d45:	e8 43 5e ff ff       	call   f0108b8d <cut_paste_pages>
f0112d4a:	83 c4 10             	add    $0x10,%esp
f0112d4d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112d50:	e8 71 9c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112d55:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112d58:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112d5c:	75 08                	jne    f0112d66 <test_cut_paste_pages+0x840>
f0112d5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d61:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112d64:	74 2b                	je     f0112d91 <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112d66:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d69:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112d6c:	83 ec 0c             	sub    $0xc,%esp
f0112d6f:	50                   	push   %eax
f0112d70:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112d73:	68 d8 7b 13 f0       	push   $0xf0137bd8
f0112d78:	68 cc 01 00 00       	push   $0x1cc
f0112d7d:	68 f2 75 13 f0       	push   $0xf01375f2
f0112d82:	e8 37 d6 fe ff       	call   f01003be <_warn>
f0112d87:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112d8a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112d91:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d95:	74 04                	je     f0112d9b <test_cut_paste_pages+0x875>
f0112d97:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112d9b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112da2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112da9:	83 ec 04             	sub    $0x4,%esp
f0112dac:	6a 00                	push   $0x0
f0112dae:	68 00 00 40 01       	push   $0x1400000
f0112db3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112db6:	e8 0a 3c 00 00       	call   f01169c5 <CB>
f0112dbb:	83 c4 10             	add    $0x10,%esp
f0112dbe:	83 f8 01             	cmp    $0x1,%eax
f0112dc1:	0f 85 80 00 00 00    	jne    f0112e47 <test_cut_paste_pages+0x921>
f0112dc7:	83 ec 04             	sub    $0x4,%esp
f0112dca:	6a 00                	push   $0x0
f0112dcc:	68 00 10 40 01       	push   $0x1401000
f0112dd1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112dd4:	e8 ec 3b 00 00       	call   f01169c5 <CB>
f0112dd9:	83 c4 10             	add    $0x10,%esp
f0112ddc:	83 f8 01             	cmp    $0x1,%eax
f0112ddf:	75 66                	jne    f0112e47 <test_cut_paste_pages+0x921>
f0112de1:	83 ec 04             	sub    $0x4,%esp
f0112de4:	6a 00                	push   $0x0
f0112de6:	68 00 20 40 01       	push   $0x1402000
f0112deb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112dee:	e8 d2 3b 00 00       	call   f01169c5 <CB>
f0112df3:	83 c4 10             	add    $0x10,%esp
f0112df6:	83 f8 01             	cmp    $0x1,%eax
f0112df9:	75 4c                	jne    f0112e47 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112dfb:	83 ec 04             	sub    $0x4,%esp
f0112dfe:	6a 00                	push   $0x0
f0112e00:	68 00 f0 bf 01       	push   $0x1bff000
f0112e05:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e08:	e8 b8 3b 00 00       	call   f01169c5 <CB>
f0112e0d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112e10:	85 c0                	test   %eax,%eax
f0112e12:	75 33                	jne    f0112e47 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112e14:	83 ec 04             	sub    $0x4,%esp
f0112e17:	6a 00                	push   $0x0
f0112e19:	68 00 00 c0 01       	push   $0x1c00000
f0112e1e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e21:	e8 9f 3b 00 00       	call   f01169c5 <CB>
f0112e26:	83 c4 10             	add    $0x10,%esp
f0112e29:	83 f8 01             	cmp    $0x1,%eax
f0112e2c:	75 19                	jne    f0112e47 <test_cut_paste_pages+0x921>
f0112e2e:	83 ec 04             	sub    $0x4,%esp
f0112e31:	6a 00                	push   $0x0
f0112e33:	68 00 10 c0 01       	push   $0x1c01000
f0112e38:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e3b:	e8 85 3b 00 00       	call   f01169c5 <CB>
f0112e40:	83 c4 10             	add    $0x10,%esp
f0112e43:	85 c0                	test   %eax,%eax
f0112e45:	74 28                	je     f0112e6f <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112e47:	83 ec 04             	sub    $0x4,%esp
f0112e4a:	68 38 7c 13 f0       	push   $0xf0137c38
f0112e4f:	68 d5 01 00 00       	push   $0x1d5
f0112e54:	68 f2 75 13 f0       	push   $0xf01375f2
f0112e59:	e8 60 d5 fe ff       	call   f01003be <_warn>
f0112e5e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112e61:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112e68:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112e6f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e73:	74 04                	je     f0112e79 <test_cut_paste_pages+0x953>
f0112e75:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112e79:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112e80:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112e84:	0f 84 99 00 00 00    	je     f0112f23 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112e8a:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112e91:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112e98:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112e9f:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112ea6:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112ead:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112eb4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112eb7:	8a 00                	mov    (%eax),%al
f0112eb9:	3c 61                	cmp    $0x61,%al
f0112ebb:	75 2d                	jne    f0112eea <test_cut_paste_pages+0x9c4>
f0112ebd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ec0:	8a 00                	mov    (%eax),%al
f0112ec2:	3c 78                	cmp    $0x78,%al
f0112ec4:	75 24                	jne    f0112eea <test_cut_paste_pages+0x9c4>
f0112ec6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112ec9:	8a 00                	mov    (%eax),%al
f0112ecb:	3c 62                	cmp    $0x62,%al
f0112ecd:	75 1b                	jne    f0112eea <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ecf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ed2:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ed4:	3c 79                	cmp    $0x79,%al
f0112ed6:	75 12                	jne    f0112eea <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ed8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112edb:	8a 00                	mov    (%eax),%al
f0112edd:	3c 63                	cmp    $0x63,%al
f0112edf:	75 09                	jne    f0112eea <test_cut_paste_pages+0x9c4>
f0112ee1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112ee4:	8a 00                	mov    (%eax),%al
f0112ee6:	3c 7a                	cmp    $0x7a,%al
f0112ee8:	74 28                	je     f0112f12 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112eea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112ef1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112ef8:	83 ec 04             	sub    $0x4,%esp
f0112efb:	68 38 7b 13 f0       	push   $0xf0137b38
f0112f00:	68 e9 01 00 00       	push   $0x1e9
f0112f05:	68 f2 75 13 f0       	push   $0xf01375f2
f0112f0a:	e8 af d4 fe ff       	call   f01003be <_warn>
f0112f0f:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112f12:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f16:	74 04                	je     f0112f1c <test_cut_paste_pages+0x9f6>
f0112f18:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f1c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112f23:	83 ec 0c             	sub    $0xc,%esp
f0112f26:	68 71 7c 13 f0       	push   $0xf0137c71
f0112f2b:	e8 01 df fe ff       	call   f0100e31 <cprintf>
f0112f30:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112f33:	83 ec 08             	sub    $0x8,%esp
f0112f36:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112f39:	68 80 7c 13 f0       	push   $0xf0137c80
f0112f3e:	e8 ee de fe ff       	call   f0100e31 <cprintf>
f0112f43:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112f46:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112f4a:	75 10                	jne    f0112f5c <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112f4c:	83 ec 0c             	sub    $0xc,%esp
f0112f4f:	68 b4 7c 13 f0       	push   $0xf0137cb4
f0112f54:	e8 d8 de fe ff       	call   f0100e31 <cprintf>
f0112f59:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112f5c:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0112f61:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112f64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112f67:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112f6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112f6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112f72:	5b                   	pop    %ebx
f0112f73:	5e                   	pop    %esi
f0112f74:	5f                   	pop    %edi
f0112f75:	5d                   	pop    %ebp
f0112f76:	c3                   	ret    

f0112f77 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112f77:	55                   	push   %ebp
f0112f78:	89 e5                	mov    %esp,%ebp
f0112f7a:	57                   	push   %edi
f0112f7b:	56                   	push   %esi
f0112f7c:	53                   	push   %ebx
f0112f7d:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112f83:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112f89:	bb f4 7c 13 f0       	mov    $0xf0137cf4,%ebx
f0112f8e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f93:	89 c7                	mov    %eax,%edi
f0112f95:	89 de                	mov    %ebx,%esi
f0112f97:	89 d1                	mov    %edx,%ecx
f0112f99:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f9b:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112fa1:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112fa6:	b0 00                	mov    $0x0,%al
f0112fa8:	89 d7                	mov    %edx,%edi
f0112faa:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112fac:	6a 00                	push   $0x0
f0112fae:	6a 0a                	push   $0xa
f0112fb0:	6a 14                	push   $0x14
f0112fb2:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112fb8:	50                   	push   %eax
f0112fb9:	e8 0d 5d ff ff       	call   f0108ccb <env_create>
f0112fbe:	83 c4 10             	add    $0x10,%esp
f0112fc1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112fc4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112fc7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112fcd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112fd0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112fd3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112fd9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112fdf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112fe5:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112fe8:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112fef:	75 70 20 
f0112ff2:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112ff9:	00 00 00 
f0112ffc:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0113002:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113007:	b8 00 00 00 00       	mov    $0x0,%eax
f011300c:	89 d7                	mov    %edx,%edi
f011300e:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113010:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113013:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113016:	83 ec 08             	sub    $0x8,%esp
f0113019:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011301f:	52                   	push   %edx
f0113020:	50                   	push   %eax
f0113021:	e8 80 c4 01 00       	call   f012f4a6 <ltostr>
f0113026:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113029:	83 ec 04             	sub    $0x4,%esp
f011302c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113032:	50                   	push   %eax
f0113033:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0113039:	50                   	push   %eax
f011303a:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0113040:	50                   	push   %eax
f0113041:	e8 58 c5 01 00       	call   f012f59e <strcconcat>
f0113046:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0113049:	83 ec 0c             	sub    $0xc,%esp
f011304c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011304f:	e8 ac 3e 00 00       	call   f0116f00 <ClearUserSpace>
f0113054:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0113057:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f011305e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0113065:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011306c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0113073:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011307a:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0113081:	83 ec 0c             	sub    $0xc,%esp
f0113084:	68 28 7d 13 f0       	push   $0xf0137d28
f0113089:	e8 a3 dd fe ff       	call   f0100e31 <cprintf>
f011308e:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113091:	83 ec 04             	sub    $0x4,%esp
f0113094:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011309a:	50                   	push   %eax
f011309b:	68 5e 7d 13 f0       	push   $0xf0137d5e
f01130a0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130a6:	50                   	push   %eax
f01130a7:	e8 f2 c4 01 00       	call   f012f59e <strcconcat>
f01130ac:	83 c4 10             	add    $0x10,%esp
f01130af:	83 ec 0c             	sub    $0xc,%esp
f01130b2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01130b8:	50                   	push   %eax
f01130b9:	e8 05 eb fe ff       	call   f0101bc3 <execute_command>
f01130be:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01130c1:	83 ec 04             	sub    $0x4,%esp
f01130c4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01130ca:	50                   	push   %eax
f01130cb:	68 63 7d 13 f0       	push   $0xf0137d63
f01130d0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130d6:	50                   	push   %eax
f01130d7:	e8 c2 c4 01 00       	call   f012f59e <strcconcat>
f01130dc:	83 c4 10             	add    $0x10,%esp
f01130df:	83 ec 0c             	sub    $0xc,%esp
f01130e2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01130e8:	50                   	push   %eax
f01130e9:	e8 d5 ea fe ff       	call   f0101bc3 <execute_command>
f01130ee:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f01130f1:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01130f7:	bb 69 80 13 f0       	mov    $0xf0138069,%ebx
f01130fc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113101:	89 c7                	mov    %eax,%edi
f0113103:	89 de                	mov    %ebx,%esi
f0113105:	89 d1                	mov    %edx,%ecx
f0113107:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113109:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011310f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113114:	b0 00                	mov    $0x0,%al
f0113116:	89 d7                	mov    %edx,%edi
f0113118:	f3 aa                	rep stos %al,%es:(%edi)
f011311a:	83 ec 0c             	sub    $0xc,%esp
f011311d:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113123:	50                   	push   %eax
f0113124:	e8 9a ea fe ff       	call   f0101bc3 <execute_command>
f0113129:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f011312c:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113132:	bb cd 80 13 f0       	mov    $0xf01380cd,%ebx
f0113137:	ba 0f 00 00 00       	mov    $0xf,%edx
f011313c:	89 c7                	mov    %eax,%edi
f011313e:	89 de                	mov    %ebx,%esi
f0113140:	89 d1                	mov    %edx,%ecx
f0113142:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113144:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011314a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011314f:	b0 00                	mov    $0x0,%al
f0113151:	89 d7                	mov    %edx,%edi
f0113153:	f3 aa                	rep stos %al,%es:(%edi)
f0113155:	83 ec 0c             	sub    $0xc,%esp
f0113158:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011315e:	50                   	push   %eax
f011315f:	e8 5f ea fe ff       	call   f0101bc3 <execute_command>
f0113164:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0113167:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011316d:	bb 31 81 13 f0       	mov    $0xf0138131,%ebx
f0113172:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113177:	89 c7                	mov    %eax,%edi
f0113179:	89 de                	mov    %ebx,%esi
f011317b:	89 d1                	mov    %edx,%ecx
f011317d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011317f:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113185:	b9 55 00 00 00       	mov    $0x55,%ecx
f011318a:	b0 00                	mov    $0x0,%al
f011318c:	89 d7                	mov    %edx,%edi
f011318e:	f3 aa                	rep stos %al,%es:(%edi)
f0113190:	83 ec 0c             	sub    $0xc,%esp
f0113193:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113199:	50                   	push   %eax
f011319a:	e8 24 ea fe ff       	call   f0101bc3 <execute_command>
f011319f:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f01131a2:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01131a8:	bb 95 81 13 f0       	mov    $0xf0138195,%ebx
f01131ad:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131b2:	89 c7                	mov    %eax,%edi
f01131b4:	89 de                	mov    %ebx,%esi
f01131b6:	89 d1                	mov    %edx,%ecx
f01131b8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131ba:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01131c0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131c5:	b0 00                	mov    $0x0,%al
f01131c7:	89 d7                	mov    %edx,%edi
f01131c9:	f3 aa                	rep stos %al,%es:(%edi)
f01131cb:	83 ec 0c             	sub    $0xc,%esp
f01131ce:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01131d4:	50                   	push   %eax
f01131d5:	e8 e9 e9 fe ff       	call   f0101bc3 <execute_command>
f01131da:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f01131dd:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01131e3:	bb f9 81 13 f0       	mov    $0xf01381f9,%ebx
f01131e8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131ed:	89 c7                	mov    %eax,%edi
f01131ef:	89 de                	mov    %ebx,%esi
f01131f1:	89 d1                	mov    %edx,%ecx
f01131f3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131f5:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01131fb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113200:	b0 00                	mov    $0x0,%al
f0113202:	89 d7                	mov    %edx,%edi
f0113204:	f3 aa                	rep stos %al,%es:(%edi)
f0113206:	83 ec 0c             	sub    $0xc,%esp
f0113209:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011320f:	50                   	push   %eax
f0113210:	e8 ae e9 fe ff       	call   f0101bc3 <execute_command>
f0113215:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0113218:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011321e:	bb 5d 82 13 f0       	mov    $0xf013825d,%ebx
f0113223:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113228:	89 c7                	mov    %eax,%edi
f011322a:	89 de                	mov    %ebx,%esi
f011322c:	89 d1                	mov    %edx,%ecx
f011322e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113230:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113236:	b9 55 00 00 00       	mov    $0x55,%ecx
f011323b:	b0 00                	mov    $0x0,%al
f011323d:	89 d7                	mov    %edx,%edi
f011323f:	f3 aa                	rep stos %al,%es:(%edi)
f0113241:	83 ec 0c             	sub    $0xc,%esp
f0113244:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011324a:	50                   	push   %eax
f011324b:	e8 73 e9 fe ff       	call   f0101bc3 <execute_command>
f0113250:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0113253:	83 ec 04             	sub    $0x4,%esp
f0113256:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011325c:	50                   	push   %eax
f011325d:	68 6b 7d 13 f0       	push   $0xf0137d6b
f0113262:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113268:	50                   	push   %eax
f0113269:	e8 30 c3 01 00       	call   f012f59e <strcconcat>
f011326e:	83 c4 10             	add    $0x10,%esp
f0113271:	83 ec 0c             	sub    $0xc,%esp
f0113274:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011327a:	50                   	push   %eax
f011327b:	e8 43 e9 fe ff       	call   f0101bc3 <execute_command>
f0113280:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0113283:	83 ec 04             	sub    $0x4,%esp
f0113286:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011328c:	50                   	push   %eax
f011328d:	68 75 7d 13 f0       	push   $0xf0137d75
f0113292:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113298:	50                   	push   %eax
f0113299:	e8 00 c3 01 00       	call   f012f59e <strcconcat>
f011329e:	83 c4 10             	add    $0x10,%esp
f01132a1:	83 ec 0c             	sub    $0xc,%esp
f01132a4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01132aa:	50                   	push   %eax
f01132ab:	e8 13 e9 fe ff       	call   f0101bc3 <execute_command>
f01132b0:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f01132b3:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01132b9:	bb c1 82 13 f0       	mov    $0xf01382c1,%ebx
f01132be:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132c3:	89 c7                	mov    %eax,%edi
f01132c5:	89 de                	mov    %ebx,%esi
f01132c7:	89 d1                	mov    %edx,%ecx
f01132c9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132cb:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01132d1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132d6:	b0 00                	mov    $0x0,%al
f01132d8:	89 d7                	mov    %edx,%edi
f01132da:	f3 aa                	rep stos %al,%es:(%edi)
f01132dc:	83 ec 0c             	sub    $0xc,%esp
f01132df:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01132e5:	50                   	push   %eax
f01132e6:	e8 d8 e8 fe ff       	call   f0101bc3 <execute_command>
f01132eb:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01132ee:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01132f4:	bb 25 83 13 f0       	mov    $0xf0138325,%ebx
f01132f9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132fe:	89 c7                	mov    %eax,%edi
f0113300:	89 de                	mov    %ebx,%esi
f0113302:	89 d1                	mov    %edx,%ecx
f0113304:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113306:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011330c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113311:	b0 00                	mov    $0x0,%al
f0113313:	89 d7                	mov    %edx,%edi
f0113315:	f3 aa                	rep stos %al,%es:(%edi)
f0113317:	83 ec 0c             	sub    $0xc,%esp
f011331a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113320:	50                   	push   %eax
f0113321:	e8 9d e8 fe ff       	call   f0101bc3 <execute_command>
f0113326:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113329:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011332f:	bb 89 83 13 f0       	mov    $0xf0138389,%ebx
f0113334:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113339:	89 c7                	mov    %eax,%edi
f011333b:	89 de                	mov    %ebx,%esi
f011333d:	89 d1                	mov    %edx,%ecx
f011333f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113341:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113347:	b9 55 00 00 00       	mov    $0x55,%ecx
f011334c:	b0 00                	mov    $0x0,%al
f011334e:	89 d7                	mov    %edx,%edi
f0113350:	f3 aa                	rep stos %al,%es:(%edi)
f0113352:	83 ec 0c             	sub    $0xc,%esp
f0113355:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011335b:	50                   	push   %eax
f011335c:	e8 62 e8 fe ff       	call   f0101bc3 <execute_command>
f0113361:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0113364:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011336b:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0113372:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0113379:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0113380:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0113387:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011338e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113395:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f011339c:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01133a3:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01133aa:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01133b1:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01133b8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01133bb:	8a 00                	mov    (%eax),%al
f01133bd:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01133c3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01133c6:	8a 00                	mov    (%eax),%al
f01133c8:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01133ce:	8b 45 90             	mov    -0x70(%ebp),%eax
f01133d1:	8a 00                	mov    (%eax),%al
f01133d3:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01133d9:	e8 e8 95 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01133de:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01133e1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01133e4:	89 d0                	mov    %edx,%eax
f01133e6:	01 c0                	add    %eax,%eax
f01133e8:	01 d0                	add    %edx,%eax
f01133ea:	01 c0                	add    %eax,%eax
f01133ec:	50                   	push   %eax
f01133ed:	68 00 00 10 00       	push   $0x100000
f01133f2:	6a 00                	push   $0x0
f01133f4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01133f7:	e8 ab 57 ff ff       	call   f0108ba7 <copy_paste_chunk>
f01133fc:	83 c4 10             	add    $0x10,%esp
f01133ff:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113402:	e8 bf 95 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113407:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011340a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113411:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0113415:	75 08                	jne    f011341f <test_copy_paste_chunk+0x4a8>
f0113417:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011341a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011341d:	74 2b                	je     f011344a <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011341f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113422:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113425:	83 ec 0c             	sub    $0xc,%esp
f0113428:	50                   	push   %eax
f0113429:	ff 75 88             	pushl  -0x78(%ebp)
f011342c:	68 84 7d 13 f0       	push   $0xf0137d84
f0113431:	68 3c 02 00 00       	push   $0x23c
f0113436:	68 f2 75 13 f0       	push   $0xf01375f2
f011343b:	e8 7e cf fe ff       	call   f01003be <_warn>
f0113440:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113443:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011344a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011344e:	74 04                	je     f0113454 <test_copy_paste_chunk+0x4dd>
f0113450:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113454:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f011345b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011345e:	8a 00                	mov    (%eax),%al
f0113460:	3c 61                	cmp    $0x61,%al
f0113462:	75 75                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f0113464:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113467:	8a 00                	mov    (%eax),%al
f0113469:	3c 78                	cmp    $0x78,%al
f011346b:	75 6c                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f011346d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113470:	8a 00                	mov    (%eax),%al
f0113472:	3c 62                	cmp    $0x62,%al
f0113474:	75 63                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f0113476:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113479:	8a 00                	mov    (%eax),%al
f011347b:	3c 79                	cmp    $0x79,%al
f011347d:	75 5a                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f011347f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113482:	8a 00                	mov    (%eax),%al
f0113484:	3c 63                	cmp    $0x63,%al
f0113486:	75 51                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f0113488:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011348b:	8a 00                	mov    (%eax),%al
f011348d:	3c 7a                	cmp    $0x7a,%al
f011348f:	75 48                	jne    f01134d9 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0113491:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113494:	8a 00                	mov    (%eax),%al
f0113496:	3c 64                	cmp    $0x64,%al
f0113498:	75 3f                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f011349a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011349d:	8a 10                	mov    (%eax),%dl
f011349f:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01134a5:	38 c2                	cmp    %al,%dl
f01134a7:	75 30                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f01134a9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01134ac:	8a 00                	mov    (%eax),%al
f01134ae:	3c 65                	cmp    $0x65,%al
f01134b0:	75 27                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f01134b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01134b5:	8a 10                	mov    (%eax),%dl
f01134b7:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01134bd:	38 c2                	cmp    %al,%dl
f01134bf:	75 18                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f01134c1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01134c4:	8a 00                	mov    (%eax),%al
f01134c6:	3c 66                	cmp    $0x66,%al
f01134c8:	75 0f                	jne    f01134d9 <test_copy_paste_chunk+0x562>
f01134ca:	8b 45 90             	mov    -0x70(%ebp),%eax
f01134cd:	8a 10                	mov    (%eax),%dl
f01134cf:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01134d5:	38 c2                	cmp    %al,%dl
f01134d7:	74 21                	je     f01134fa <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01134d9:	83 ec 04             	sub    $0x4,%esp
f01134dc:	68 e8 7d 13 f0       	push   $0xf0137de8
f01134e1:	68 45 02 00 00       	push   $0x245
f01134e6:	68 f2 75 13 f0       	push   $0xf01375f2
f01134eb:	e8 ce ce fe ff       	call   f01003be <_warn>
f01134f0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01134fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01134fe:	74 04                	je     f0113504 <test_copy_paste_chunk+0x58d>
f0113500:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113504:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f011350b:	83 ec 0c             	sub    $0xc,%esp
f011350e:	68 22 7e 13 f0       	push   $0xf0137e22
f0113513:	e8 19 d9 fe ff       	call   f0100e31 <cprintf>
f0113518:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f011351b:	83 ec 0c             	sub    $0xc,%esp
f011351e:	68 34 7e 13 f0       	push   $0xf0137e34
f0113523:	e8 09 d9 fe ff       	call   f0100e31 <cprintf>
f0113528:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f011352b:	83 ec 04             	sub    $0x4,%esp
f011352e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113534:	50                   	push   %eax
f0113535:	68 6a 7e 13 f0       	push   $0xf0137e6a
f011353a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113540:	50                   	push   %eax
f0113541:	e8 58 c0 01 00       	call   f012f59e <strcconcat>
f0113546:	83 c4 10             	add    $0x10,%esp
f0113549:	83 ec 0c             	sub    $0xc,%esp
f011354c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113552:	50                   	push   %eax
f0113553:	e8 6b e6 fe ff       	call   f0101bc3 <execute_command>
f0113558:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f011355b:	83 ec 04             	sub    $0x4,%esp
f011355e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113564:	50                   	push   %eax
f0113565:	68 74 7e 13 f0       	push   $0xf0137e74
f011356a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113570:	50                   	push   %eax
f0113571:	e8 28 c0 01 00       	call   f012f59e <strcconcat>
f0113576:	83 c4 10             	add    $0x10,%esp
f0113579:	83 ec 0c             	sub    $0xc,%esp
f011357c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113582:	50                   	push   %eax
f0113583:	e8 3b e6 fe ff       	call   f0101bc3 <execute_command>
f0113588:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f011358b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113591:	bb ed 83 13 f0       	mov    $0xf01383ed,%ebx
f0113596:	ba 0f 00 00 00       	mov    $0xf,%edx
f011359b:	89 c7                	mov    %eax,%edi
f011359d:	89 de                	mov    %ebx,%esi
f011359f:	89 d1                	mov    %edx,%ecx
f01135a1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135a3:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01135a9:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135ae:	b0 00                	mov    $0x0,%al
f01135b0:	89 d7                	mov    %edx,%edi
f01135b2:	f3 aa                	rep stos %al,%es:(%edi)
f01135b4:	83 ec 0c             	sub    $0xc,%esp
f01135b7:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01135bd:	50                   	push   %eax
f01135be:	e8 00 e6 fe ff       	call   f0101bc3 <execute_command>
f01135c3:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01135c6:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01135cc:	bb 51 84 13 f0       	mov    $0xf0138451,%ebx
f01135d1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135d6:	89 c7                	mov    %eax,%edi
f01135d8:	89 de                	mov    %ebx,%esi
f01135da:	89 d1                	mov    %edx,%ecx
f01135dc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135de:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01135e4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135e9:	b0 00                	mov    $0x0,%al
f01135eb:	89 d7                	mov    %edx,%edi
f01135ed:	f3 aa                	rep stos %al,%es:(%edi)
f01135ef:	83 ec 0c             	sub    $0xc,%esp
f01135f2:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01135f8:	50                   	push   %eax
f01135f9:	e8 c5 e5 fe ff       	call   f0101bc3 <execute_command>
f01135fe:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113601:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113607:	bb b5 84 13 f0       	mov    $0xf01384b5,%ebx
f011360c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113611:	89 c7                	mov    %eax,%edi
f0113613:	89 de                	mov    %ebx,%esi
f0113615:	89 d1                	mov    %edx,%ecx
f0113617:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113619:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011361f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113624:	b0 00                	mov    $0x0,%al
f0113626:	89 d7                	mov    %edx,%edi
f0113628:	f3 aa                	rep stos %al,%es:(%edi)
f011362a:	83 ec 0c             	sub    $0xc,%esp
f011362d:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113633:	50                   	push   %eax
f0113634:	e8 8a e5 fe ff       	call   f0101bc3 <execute_command>
f0113639:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011363c:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113642:	bb 19 85 13 f0       	mov    $0xf0138519,%ebx
f0113647:	ba 0f 00 00 00       	mov    $0xf,%edx
f011364c:	89 c7                	mov    %eax,%edi
f011364e:	89 de                	mov    %ebx,%esi
f0113650:	89 d1                	mov    %edx,%ecx
f0113652:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113654:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011365a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011365f:	b0 00                	mov    $0x0,%al
f0113661:	89 d7                	mov    %edx,%edi
f0113663:	f3 aa                	rep stos %al,%es:(%edi)
f0113665:	83 ec 0c             	sub    $0xc,%esp
f0113668:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011366e:	50                   	push   %eax
f011366f:	e8 4f e5 fe ff       	call   f0101bc3 <execute_command>
f0113674:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113677:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011367d:	bb 7d 85 13 f0       	mov    $0xf013857d,%ebx
f0113682:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113687:	89 c7                	mov    %eax,%edi
f0113689:	89 de                	mov    %ebx,%esi
f011368b:	89 d1                	mov    %edx,%ecx
f011368d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011368f:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113695:	b9 55 00 00 00       	mov    $0x55,%ecx
f011369a:	b0 00                	mov    $0x0,%al
f011369c:	89 d7                	mov    %edx,%edi
f011369e:	f3 aa                	rep stos %al,%es:(%edi)
f01136a0:	83 ec 0c             	sub    $0xc,%esp
f01136a3:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01136a9:	50                   	push   %eax
f01136aa:	e8 14 e5 fe ff       	call   f0101bc3 <execute_command>
f01136af:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01136b2:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01136b8:	bb e1 85 13 f0       	mov    $0xf01385e1,%ebx
f01136bd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136c2:	89 c7                	mov    %eax,%edi
f01136c4:	89 de                	mov    %ebx,%esi
f01136c6:	89 d1                	mov    %edx,%ecx
f01136c8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136ca:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01136d0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136d5:	b0 00                	mov    $0x0,%al
f01136d7:	89 d7                	mov    %edx,%edi
f01136d9:	f3 aa                	rep stos %al,%es:(%edi)
f01136db:	83 ec 0c             	sub    $0xc,%esp
f01136de:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01136e4:	50                   	push   %eax
f01136e5:	e8 d9 e4 fe ff       	call   f0101bc3 <execute_command>
f01136ea:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01136ed:	83 ec 04             	sub    $0x4,%esp
f01136f0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01136f6:	50                   	push   %eax
f01136f7:	68 7e 7e 13 f0       	push   $0xf0137e7e
f01136fc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113702:	50                   	push   %eax
f0113703:	e8 96 be 01 00       	call   f012f59e <strcconcat>
f0113708:	83 c4 10             	add    $0x10,%esp
f011370b:	83 ec 0c             	sub    $0xc,%esp
f011370e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113714:	50                   	push   %eax
f0113715:	e8 a9 e4 fe ff       	call   f0101bc3 <execute_command>
f011371a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011371d:	83 ec 04             	sub    $0x4,%esp
f0113720:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113726:	50                   	push   %eax
f0113727:	68 88 7e 13 f0       	push   $0xf0137e88
f011372c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113732:	50                   	push   %eax
f0113733:	e8 66 be 01 00       	call   f012f59e <strcconcat>
f0113738:	83 c4 10             	add    $0x10,%esp
f011373b:	83 ec 0c             	sub    $0xc,%esp
f011373e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113744:	50                   	push   %eax
f0113745:	e8 79 e4 fe ff       	call   f0101bc3 <execute_command>
f011374a:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011374d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113753:	bb 45 86 13 f0       	mov    $0xf0138645,%ebx
f0113758:	ba 0f 00 00 00       	mov    $0xf,%edx
f011375d:	89 c7                	mov    %eax,%edi
f011375f:	89 de                	mov    %ebx,%esi
f0113761:	89 d1                	mov    %edx,%ecx
f0113763:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113765:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011376b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113770:	b0 00                	mov    $0x0,%al
f0113772:	89 d7                	mov    %edx,%edi
f0113774:	f3 aa                	rep stos %al,%es:(%edi)
f0113776:	83 ec 0c             	sub    $0xc,%esp
f0113779:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011377f:	50                   	push   %eax
f0113780:	e8 3e e4 fe ff       	call   f0101bc3 <execute_command>
f0113785:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113788:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011378e:	bb a9 86 13 f0       	mov    $0xf01386a9,%ebx
f0113793:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113798:	89 c7                	mov    %eax,%edi
f011379a:	89 de                	mov    %ebx,%esi
f011379c:	89 d1                	mov    %edx,%ecx
f011379e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01137a0:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01137a6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01137ab:	b0 00                	mov    $0x0,%al
f01137ad:	89 d7                	mov    %edx,%edi
f01137af:	f3 aa                	rep stos %al,%es:(%edi)
f01137b1:	83 ec 0c             	sub    $0xc,%esp
f01137b4:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01137ba:	50                   	push   %eax
f01137bb:	e8 03 e4 fe ff       	call   f0101bc3 <execute_command>
f01137c0:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01137c3:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01137c9:	bb 0d 87 13 f0       	mov    $0xf013870d,%ebx
f01137ce:	ba 0f 00 00 00       	mov    $0xf,%edx
f01137d3:	89 c7                	mov    %eax,%edi
f01137d5:	89 de                	mov    %ebx,%esi
f01137d7:	89 d1                	mov    %edx,%ecx
f01137d9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01137db:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01137e1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01137e6:	b0 00                	mov    $0x0,%al
f01137e8:	89 d7                	mov    %edx,%edi
f01137ea:	f3 aa                	rep stos %al,%es:(%edi)
f01137ec:	83 ec 0c             	sub    $0xc,%esp
f01137ef:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01137f5:	50                   	push   %eax
f01137f6:	e8 c8 e3 fe ff       	call   f0101bc3 <execute_command>
f01137fb:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01137fe:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113805:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011380c:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113813:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011381a:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113821:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113828:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011382f:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113836:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011383d:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113844:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011384b:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113852:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113855:	8a 00                	mov    (%eax),%al
f0113857:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011385d:	e8 64 91 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113862:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113865:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113868:	89 d0                	mov    %edx,%eax
f011386a:	01 c0                	add    %eax,%eax
f011386c:	01 d0                	add    %edx,%eax
f011386e:	01 c0                	add    %eax,%eax
f0113870:	50                   	push   %eax
f0113871:	68 00 00 40 00       	push   $0x400000
f0113876:	68 00 00 20 00       	push   $0x200000
f011387b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011387e:	e8 24 53 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113883:	83 c4 10             	add    $0x10,%esp
f0113886:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113889:	e8 38 91 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011388e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113891:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113898:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011389c:	75 08                	jne    f01138a6 <test_copy_paste_chunk+0x92f>
f011389e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01138a1:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01138a4:	74 2b                	je     f01138d1 <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01138a6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01138a9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01138ac:	83 ec 0c             	sub    $0xc,%esp
f01138af:	50                   	push   %eax
f01138b0:	ff 75 80             	pushl  -0x80(%ebp)
f01138b3:	68 94 7e 13 f0       	push   $0xf0137e94
f01138b8:	68 75 02 00 00       	push   $0x275
f01138bd:	68 f2 75 13 f0       	push   $0xf01375f2
f01138c2:	e8 f7 ca fe ff       	call   f01003be <_warn>
f01138c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01138ca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01138d1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138d5:	74 04                	je     f01138db <test_copy_paste_chunk+0x964>
f01138d7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138db:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01138e2:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01138e9:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01138ec:	83 ec 08             	sub    $0x8,%esp
f01138ef:	6a 01                	push   $0x1
f01138f1:	6a 07                	push   $0x7
f01138f3:	6a 07                	push   $0x7
f01138f5:	6a 07                	push   $0x7
f01138f7:	6a 07                	push   $0x7
f01138f9:	6a 01                	push   $0x1
f01138fb:	68 00 20 00 00       	push   $0x2000
f0113900:	68 00 00 40 00       	push   $0x400000
f0113905:	68 00 00 20 00       	push   $0x200000
f011390a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011390d:	e8 22 36 00 00       	call   f0116f34 <CCP>
f0113912:	83 c4 30             	add    $0x30,%esp
f0113915:	83 f8 01             	cmp    $0x1,%eax
f0113918:	74 2b                	je     f0113945 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011391a:	83 ec 04             	sub    $0x4,%esp
f011391d:	68 e8 7e 13 f0       	push   $0xf0137ee8
f0113922:	68 7e 02 00 00       	push   $0x27e
f0113927:	68 f2 75 13 f0       	push   $0xf01375f2
f011392c:	e8 8d ca fe ff       	call   f01003be <_warn>
f0113931:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113934:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011393b:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113942:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113945:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113949:	74 04                	je     f011394f <test_copy_paste_chunk+0x9d8>
f011394b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011394f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113956:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113959:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011395c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011395f:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113962:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113965:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113968:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011396b:	8a 00                	mov    (%eax),%al
f011396d:	3c 61                	cmp    $0x61,%al
f011396f:	75 69                	jne    f01139da <test_copy_paste_chunk+0xa63>
f0113971:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113974:	8a 00                	mov    (%eax),%al
f0113976:	3c 61                	cmp    $0x61,%al
f0113978:	75 60                	jne    f01139da <test_copy_paste_chunk+0xa63>
f011397a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011397d:	8a 00                	mov    (%eax),%al
f011397f:	3c 79                	cmp    $0x79,%al
f0113981:	75 57                	jne    f01139da <test_copy_paste_chunk+0xa63>
f0113983:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113986:	8a 00                	mov    (%eax),%al
f0113988:	3c 62                	cmp    $0x62,%al
f011398a:	75 4e                	jne    f01139da <test_copy_paste_chunk+0xa63>
f011398c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011398f:	8a 00                	mov    (%eax),%al
f0113991:	3c 63                	cmp    $0x63,%al
f0113993:	75 45                	jne    f01139da <test_copy_paste_chunk+0xa63>
f0113995:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113998:	8a 00                	mov    (%eax),%al
f011399a:	3c 7a                	cmp    $0x7a,%al
f011399c:	75 3c                	jne    f01139da <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011399e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01139a1:	8a 00                	mov    (%eax),%al
f01139a3:	3c 77                	cmp    $0x77,%al
f01139a5:	75 33                	jne    f01139da <test_copy_paste_chunk+0xa63>
f01139a7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01139aa:	8a 00                	mov    (%eax),%al
f01139ac:	3c 64                	cmp    $0x64,%al
f01139ae:	75 2a                	jne    f01139da <test_copy_paste_chunk+0xa63>
f01139b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01139b3:	8a 00                	mov    (%eax),%al
f01139b5:	3c 65                	cmp    $0x65,%al
f01139b7:	75 21                	jne    f01139da <test_copy_paste_chunk+0xa63>
f01139b9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01139bc:	8a 00                	mov    (%eax),%al
f01139be:	3c 65                	cmp    $0x65,%al
f01139c0:	75 18                	jne    f01139da <test_copy_paste_chunk+0xa63>
f01139c2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01139c5:	8a 00                	mov    (%eax),%al
f01139c7:	3c 66                	cmp    $0x66,%al
f01139c9:	75 0f                	jne    f01139da <test_copy_paste_chunk+0xa63>
f01139cb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01139ce:	8a 10                	mov    (%eax),%dl
f01139d0:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01139d6:	38 c2                	cmp    %al,%dl
f01139d8:	74 21                	je     f01139fb <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01139da:	83 ec 04             	sub    $0x4,%esp
f01139dd:	68 e8 7d 13 f0       	push   $0xf0137de8
f01139e2:	68 8c 02 00 00       	push   $0x28c
f01139e7:	68 f2 75 13 f0       	push   $0xf01375f2
f01139ec:	e8 cd c9 fe ff       	call   f01003be <_warn>
f01139f1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01139fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139ff:	74 04                	je     f0113a05 <test_copy_paste_chunk+0xa8e>
f0113a01:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113a05:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113a0c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113a0f:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a12:	e8 af 8f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113a17:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113a1a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113a1d:	89 c2                	mov    %eax,%edx
f0113a1f:	01 d2                	add    %edx,%edx
f0113a21:	01 d0                	add    %edx,%eax
f0113a23:	50                   	push   %eax
f0113a24:	68 00 08 20 00       	push   $0x200800
f0113a29:	68 00 08 40 00       	push   $0x400800
f0113a2e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113a31:	e8 71 51 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113a36:	83 c4 10             	add    $0x10,%esp
f0113a39:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a3c:	e8 85 8f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113a41:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113a44:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113a48:	75 08                	jne    f0113a52 <test_copy_paste_chunk+0xadb>
f0113a4a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a4d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113a50:	74 2b                	je     f0113a7d <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113a52:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a55:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113a58:	83 ec 0c             	sub    $0xc,%esp
f0113a5b:	50                   	push   %eax
f0113a5c:	ff 75 80             	pushl  -0x80(%ebp)
f0113a5f:	68 94 7e 13 f0       	push   $0xf0137e94
f0113a64:	68 9c 02 00 00       	push   $0x29c
f0113a69:	68 f2 75 13 f0       	push   $0xf01375f2
f0113a6e:	e8 4b c9 fe ff       	call   f01003be <_warn>
f0113a73:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a76:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113a7d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a81:	74 04                	je     f0113a87 <test_copy_paste_chunk+0xb10>
f0113a83:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a87:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113a8e:	83 ec 08             	sub    $0x8,%esp
f0113a91:	6a 01                	push   $0x1
f0113a93:	6a 07                	push   $0x7
f0113a95:	6a 07                	push   $0x7
f0113a97:	6a 07                	push   $0x7
f0113a99:	6a 07                	push   $0x7
f0113a9b:	6a 01                	push   $0x1
f0113a9d:	68 00 20 00 00       	push   $0x2000
f0113aa2:	68 00 00 20 00       	push   $0x200000
f0113aa7:	68 00 00 40 00       	push   $0x400000
f0113aac:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113aaf:	e8 80 34 00 00       	call   f0116f34 <CCP>
f0113ab4:	83 c4 30             	add    $0x30,%esp
f0113ab7:	83 f8 01             	cmp    $0x1,%eax
f0113aba:	74 21                	je     f0113add <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113abc:	83 ec 04             	sub    $0x4,%esp
f0113abf:	68 34 7f 13 f0       	push   $0xf0137f34
f0113ac4:	68 a4 02 00 00       	push   $0x2a4
f0113ac9:	68 f2 75 13 f0       	push   $0xf01375f2
f0113ace:	e8 eb c8 fe ff       	call   f01003be <_warn>
f0113ad3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ad6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113add:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ae1:	74 04                	je     f0113ae7 <test_copy_paste_chunk+0xb70>
f0113ae3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ae7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113aee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113af1:	8a 00                	mov    (%eax),%al
f0113af3:	3c 61                	cmp    $0x61,%al
f0113af5:	75 69                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113af7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113afa:	8a 00                	mov    (%eax),%al
f0113afc:	3c 61                	cmp    $0x61,%al
f0113afe:	75 60                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b03:	8a 00                	mov    (%eax),%al
f0113b05:	3c 79                	cmp    $0x79,%al
f0113b07:	75 57                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b09:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113b0c:	8a 00                	mov    (%eax),%al
f0113b0e:	3c 62                	cmp    $0x62,%al
f0113b10:	75 4e                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113b15:	8a 00                	mov    (%eax),%al
f0113b17:	3c 7a                	cmp    $0x7a,%al
f0113b19:	75 45                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b1b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113b1e:	8a 00                	mov    (%eax),%al
f0113b20:	3c 7a                	cmp    $0x7a,%al
f0113b22:	75 3c                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113b24:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113b27:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113b29:	3c 64                	cmp    $0x64,%al
f0113b2b:	75 33                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113b2d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113b30:	8a 00                	mov    (%eax),%al
f0113b32:	3c 64                	cmp    $0x64,%al
f0113b34:	75 2a                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b36:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113b39:	8a 00                	mov    (%eax),%al
f0113b3b:	3c 65                	cmp    $0x65,%al
f0113b3d:	75 21                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b3f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113b42:	8a 00                	mov    (%eax),%al
f0113b44:	3c 78                	cmp    $0x78,%al
f0113b46:	75 18                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b48:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113b4b:	8a 00                	mov    (%eax),%al
f0113b4d:	3c 66                	cmp    $0x66,%al
f0113b4f:	75 0f                	jne    f0113b60 <test_copy_paste_chunk+0xbe9>
f0113b51:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113b54:	8a 10                	mov    (%eax),%dl
f0113b56:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113b5c:	38 c2                	cmp    %al,%dl
f0113b5e:	74 21                	je     f0113b81 <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113b60:	83 ec 04             	sub    $0x4,%esp
f0113b63:	68 e8 7d 13 f0       	push   $0xf0137de8
f0113b68:	68 ad 02 00 00       	push   $0x2ad
f0113b6d:	68 f2 75 13 f0       	push   $0xf01375f2
f0113b72:	e8 47 c8 fe ff       	call   f01003be <_warn>
f0113b77:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b7a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113b81:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b85:	74 04                	je     f0113b8b <test_copy_paste_chunk+0xc14>
f0113b87:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113b8b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113b92:	83 ec 0c             	sub    $0xc,%esp
f0113b95:	68 7f 7f 13 f0       	push   $0xf0137f7f
f0113b9a:	e8 92 d2 fe ff       	call   f0100e31 <cprintf>
f0113b9f:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113ba2:	83 ec 0c             	sub    $0xc,%esp
f0113ba5:	68 90 7f 13 f0       	push   $0xf0137f90
f0113baa:	e8 82 d2 fe ff       	call   f0100e31 <cprintf>
f0113baf:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113bb2:	83 ec 04             	sub    $0x4,%esp
f0113bb5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113bbb:	50                   	push   %eax
f0113bbc:	68 c4 7f 13 f0       	push   $0xf0137fc4
f0113bc1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113bc7:	50                   	push   %eax
f0113bc8:	e8 d1 b9 01 00       	call   f012f59e <strcconcat>
f0113bcd:	83 c4 10             	add    $0x10,%esp
f0113bd0:	83 ec 0c             	sub    $0xc,%esp
f0113bd3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113bd9:	50                   	push   %eax
f0113bda:	e8 e4 df fe ff       	call   f0101bc3 <execute_command>
f0113bdf:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113be2:	83 ec 04             	sub    $0x4,%esp
f0113be5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113beb:	50                   	push   %eax
f0113bec:	68 ce 7f 13 f0       	push   $0xf0137fce
f0113bf1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113bf7:	50                   	push   %eax
f0113bf8:	e8 a1 b9 01 00       	call   f012f59e <strcconcat>
f0113bfd:	83 c4 10             	add    $0x10,%esp
f0113c00:	83 ec 0c             	sub    $0xc,%esp
f0113c03:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113c09:	50                   	push   %eax
f0113c0a:	e8 b4 df fe ff       	call   f0101bc3 <execute_command>
f0113c0f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113c12:	83 ec 04             	sub    $0x4,%esp
f0113c15:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113c1b:	50                   	push   %eax
f0113c1c:	68 d8 7f 13 f0       	push   $0xf0137fd8
f0113c21:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113c27:	50                   	push   %eax
f0113c28:	e8 71 b9 01 00       	call   f012f59e <strcconcat>
f0113c2d:	83 c4 10             	add    $0x10,%esp
f0113c30:	83 ec 0c             	sub    $0xc,%esp
f0113c33:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113c39:	50                   	push   %eax
f0113c3a:	e8 84 df fe ff       	call   f0101bc3 <execute_command>
f0113c3f:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113c42:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113c48:	bb 71 87 13 f0       	mov    $0xf0138771,%ebx
f0113c4d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113c52:	89 c7                	mov    %eax,%edi
f0113c54:	89 de                	mov    %ebx,%esi
f0113c56:	89 d1                	mov    %edx,%ecx
f0113c58:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113c5a:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113c60:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113c65:	b0 00                	mov    $0x0,%al
f0113c67:	89 d7                	mov    %edx,%edi
f0113c69:	f3 aa                	rep stos %al,%es:(%edi)
f0113c6b:	83 ec 0c             	sub    $0xc,%esp
f0113c6e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113c74:	50                   	push   %eax
f0113c75:	e8 49 df fe ff       	call   f0101bc3 <execute_command>
f0113c7a:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113c7d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113c83:	bb d5 87 13 f0       	mov    $0xf01387d5,%ebx
f0113c88:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113c8d:	89 c7                	mov    %eax,%edi
f0113c8f:	89 de                	mov    %ebx,%esi
f0113c91:	89 d1                	mov    %edx,%ecx
f0113c93:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113c95:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113c9b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113ca0:	b0 00                	mov    $0x0,%al
f0113ca2:	89 d7                	mov    %edx,%edi
f0113ca4:	f3 aa                	rep stos %al,%es:(%edi)
f0113ca6:	83 ec 0c             	sub    $0xc,%esp
f0113ca9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113caf:	50                   	push   %eax
f0113cb0:	e8 0e df fe ff       	call   f0101bc3 <execute_command>
f0113cb5:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113cb8:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113cbe:	bb 39 88 13 f0       	mov    $0xf0138839,%ebx
f0113cc3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113cc8:	89 c7                	mov    %eax,%edi
f0113cca:	89 de                	mov    %ebx,%esi
f0113ccc:	89 d1                	mov    %edx,%ecx
f0113cce:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113cd0:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113cd6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113cdb:	b0 00                	mov    $0x0,%al
f0113cdd:	89 d7                	mov    %edx,%edi
f0113cdf:	f3 aa                	rep stos %al,%es:(%edi)
f0113ce1:	83 ec 0c             	sub    $0xc,%esp
f0113ce4:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113cea:	50                   	push   %eax
f0113ceb:	e8 d3 de fe ff       	call   f0101bc3 <execute_command>
f0113cf0:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113cf3:	e8 ce 8c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113cf8:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113cfb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cfe:	89 d0                	mov    %edx,%eax
f0113d00:	01 c0                	add    %eax,%eax
f0113d02:	01 d0                	add    %edx,%eax
f0113d04:	c1 e0 02             	shl    $0x2,%eax
f0113d07:	50                   	push   %eax
f0113d08:	68 00 00 90 00       	push   $0x900000
f0113d0d:	68 00 00 80 00       	push   $0x800000
f0113d12:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d15:	e8 8d 4e ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113d1a:	83 c4 10             	add    $0x10,%esp
f0113d1d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d23:	e8 9e 8c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113d28:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113d2b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113d32:	75 0b                	jne    f0113d3f <test_copy_paste_chunk+0xdc8>
f0113d34:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d37:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d3a:	83 f8 03             	cmp    $0x3,%eax
f0113d3d:	74 2e                	je     f0113d6d <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d3f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d42:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d45:	83 ec 0c             	sub    $0xc,%esp
f0113d48:	50                   	push   %eax
f0113d49:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113d4f:	68 94 7e 13 f0       	push   $0xf0137e94
f0113d54:	68 cb 02 00 00       	push   $0x2cb
f0113d59:	68 f2 75 13 f0       	push   $0xf01375f2
f0113d5e:	e8 5b c6 fe ff       	call   f01003be <_warn>
f0113d63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d66:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113d6d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d71:	74 04                	je     f0113d77 <test_copy_paste_chunk+0xe00>
f0113d73:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d77:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113d7e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113d85:	83 ec 08             	sub    $0x8,%esp
f0113d88:	6a 01                	push   $0x1
f0113d8a:	6a 07                	push   $0x7
f0113d8c:	6a 07                	push   $0x7
f0113d8e:	6a 07                	push   $0x7
f0113d90:	6a 07                	push   $0x7
f0113d92:	6a 01                	push   $0x1
f0113d94:	68 00 30 00 00       	push   $0x3000
f0113d99:	68 00 00 90 00       	push   $0x900000
f0113d9e:	68 00 00 80 00       	push   $0x800000
f0113da3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113da6:	e8 89 31 00 00       	call   f0116f34 <CCP>
f0113dab:	83 c4 30             	add    $0x30,%esp
f0113dae:	83 f8 01             	cmp    $0x1,%eax
f0113db1:	74 28                	je     f0113ddb <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113db3:	83 ec 04             	sub    $0x4,%esp
f0113db6:	68 34 7f 13 f0       	push   $0xf0137f34
f0113dbb:	68 d4 02 00 00       	push   $0x2d4
f0113dc0:	68 f2 75 13 f0       	push   $0xf01375f2
f0113dc5:	e8 f4 c5 fe ff       	call   f01003be <_warn>
f0113dca:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113dcd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113dd4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113ddb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ddf:	74 04                	je     f0113de5 <test_copy_paste_chunk+0xe6e>
f0113de1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113de5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113dec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113df0:	0f 84 9e 00 00 00    	je     f0113e94 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113df6:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113dfd:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113e04:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113e0b:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113e12:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113e19:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113e20:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e23:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113e26:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113e29:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113e2c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e2f:	8a 00                	mov    (%eax),%al
f0113e31:	3c 61                	cmp    $0x61,%al
f0113e33:	75 2d                	jne    f0113e62 <test_copy_paste_chunk+0xeeb>
f0113e35:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e38:	8a 00                	mov    (%eax),%al
f0113e3a:	3c 61                	cmp    $0x61,%al
f0113e3c:	75 24                	jne    f0113e62 <test_copy_paste_chunk+0xeeb>
f0113e3e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e41:	8a 00                	mov    (%eax),%al
f0113e43:	3c 79                	cmp    $0x79,%al
f0113e45:	75 1b                	jne    f0113e62 <test_copy_paste_chunk+0xeeb>
f0113e47:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113e4a:	8a 00                	mov    (%eax),%al
f0113e4c:	3c 62                	cmp    $0x62,%al
f0113e4e:	75 12                	jne    f0113e62 <test_copy_paste_chunk+0xeeb>
f0113e50:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113e53:	8a 00                	mov    (%eax),%al
f0113e55:	3c 63                	cmp    $0x63,%al
f0113e57:	75 09                	jne    f0113e62 <test_copy_paste_chunk+0xeeb>
f0113e59:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113e5c:	8a 00                	mov    (%eax),%al
f0113e5e:	3c 7a                	cmp    $0x7a,%al
f0113e60:	74 21                	je     f0113e83 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113e62:	83 ec 04             	sub    $0x4,%esp
f0113e65:	68 e8 7d 13 f0       	push   $0xf0137de8
f0113e6a:	68 e6 02 00 00       	push   $0x2e6
f0113e6f:	68 f2 75 13 f0       	push   $0xf01375f2
f0113e74:	e8 45 c5 fe ff       	call   f01003be <_warn>
f0113e79:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e7c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113e83:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e87:	74 04                	je     f0113e8d <test_copy_paste_chunk+0xf16>
f0113e89:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113e8d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e94:	e8 2d 8b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113e99:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113e9c:	6a 00                	push   $0x0
f0113e9e:	6a 02                	push   $0x2
f0113ea0:	68 00 10 90 00       	push   $0x901000
f0113ea5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ea8:	e8 c9 2b 00 00       	call   f0116a76 <SB>
f0113ead:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113eb0:	6a 00                	push   $0x0
f0113eb2:	6a 02                	push   $0x2
f0113eb4:	68 00 20 90 00       	push   $0x902000
f0113eb9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ebc:	e8 b5 2b 00 00       	call   f0116a76 <SB>
f0113ec1:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113ec4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ec7:	c1 e0 03             	shl    $0x3,%eax
f0113eca:	50                   	push   %eax
f0113ecb:	68 00 f0 bf 00       	push   $0xbff000
f0113ed0:	68 00 10 90 00       	push   $0x901000
f0113ed5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ed8:	e8 ca 4c ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113edd:	83 c4 10             	add    $0x10,%esp
f0113ee0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ee6:	e8 db 8a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113eeb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113eee:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113ef5:	75 0b                	jne    f0113f02 <test_copy_paste_chunk+0xf8b>
f0113ef7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113efa:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113efd:	83 f8 03             	cmp    $0x3,%eax
f0113f00:	74 2e                	je     f0113f30 <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113f02:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113f05:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113f08:	83 ec 0c             	sub    $0xc,%esp
f0113f0b:	50                   	push   %eax
f0113f0c:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113f12:	68 94 7e 13 f0       	push   $0xf0137e94
f0113f17:	68 f6 02 00 00       	push   $0x2f6
f0113f1c:	68 f2 75 13 f0       	push   $0xf01375f2
f0113f21:	e8 98 c4 fe ff       	call   f01003be <_warn>
f0113f26:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f29:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113f30:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113f34:	74 04                	je     f0113f3a <test_copy_paste_chunk+0xfc3>
f0113f36:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f3a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113f41:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113f48:	83 ec 08             	sub    $0x8,%esp
f0113f4b:	6a 01                	push   $0x1
f0113f4d:	6a 07                	push   $0x7
f0113f4f:	6a 03                	push   $0x3
f0113f51:	6a 07                	push   $0x7
f0113f53:	6a 03                	push   $0x3
f0113f55:	6a 01                	push   $0x1
f0113f57:	68 00 20 00 00       	push   $0x2000
f0113f5c:	68 00 f0 bf 00       	push   $0xbff000
f0113f61:	68 00 10 90 00       	push   $0x901000
f0113f66:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113f69:	e8 c6 2f 00 00       	call   f0116f34 <CCP>
f0113f6e:	83 c4 30             	add    $0x30,%esp
f0113f71:	83 f8 01             	cmp    $0x1,%eax
f0113f74:	74 28                	je     f0113f9e <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113f76:	83 ec 04             	sub    $0x4,%esp
f0113f79:	68 34 7f 13 f0       	push   $0xf0137f34
f0113f7e:	68 ff 02 00 00       	push   $0x2ff
f0113f83:	68 f2 75 13 f0       	push   $0xf01375f2
f0113f88:	e8 31 c4 fe ff       	call   f01003be <_warn>
f0113f8d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113f97:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113f9e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113fa2:	74 04                	je     f0113fa8 <test_copy_paste_chunk+0x1031>
f0113fa4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113fa8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113faf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113fb3:	74 72                	je     f0114027 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113fb5:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113fbc:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113fc3:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113fca:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113fd1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fd4:	8a 00                	mov    (%eax),%al
f0113fd6:	3c 62                	cmp    $0x62,%al
f0113fd8:	75 1b                	jne    f0113ff5 <test_copy_paste_chunk+0x107e>
f0113fda:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fdd:	8a 00                	mov    (%eax),%al
f0113fdf:	3c 62                	cmp    $0x62,%al
f0113fe1:	75 12                	jne    f0113ff5 <test_copy_paste_chunk+0x107e>
f0113fe3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fe6:	8a 00                	mov    (%eax),%al
f0113fe8:	3c 7a                	cmp    $0x7a,%al
f0113fea:	75 09                	jne    f0113ff5 <test_copy_paste_chunk+0x107e>
f0113fec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113fef:	8a 00                	mov    (%eax),%al
f0113ff1:	3c 7a                	cmp    $0x7a,%al
f0113ff3:	74 21                	je     f0114016 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113ff5:	83 ec 04             	sub    $0x4,%esp
f0113ff8:	68 e8 7d 13 f0       	push   $0xf0137de8
f0113ffd:	68 0b 03 00 00       	push   $0x30b
f0114002:	68 f2 75 13 f0       	push   $0xf01375f2
f0114007:	e8 b2 c3 fe ff       	call   f01003be <_warn>
f011400c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011400f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0114016:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011401a:	74 04                	je     f0114020 <test_copy_paste_chunk+0x10a9>
f011401c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114020:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114027:	83 ec 0c             	sub    $0xc,%esp
f011402a:	68 e2 7f 13 f0       	push   $0xf0137fe2
f011402f:	e8 fd cd fe ff       	call   f0100e31 <cprintf>
f0114034:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0114037:	83 ec 08             	sub    $0x8,%esp
f011403a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011403d:	68 f4 7f 13 f0       	push   $0xf0137ff4
f0114042:	e8 ea cd fe ff       	call   f0100e31 <cprintf>
f0114047:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011404a:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011404e:	75 10                	jne    f0114060 <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0114050:	83 ec 0c             	sub    $0xc,%esp
f0114053:	68 28 80 13 f0       	push   $0xf0138028
f0114058:	e8 d4 cd fe ff       	call   f0100e31 <cprintf>
f011405d:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114060:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0114065:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114068:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011406b:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011406e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114073:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114076:	5b                   	pop    %ebx
f0114077:	5e                   	pop    %esi
f0114078:	5f                   	pop    %edi
f0114079:	5d                   	pop    %ebp
f011407a:	c3                   	ret    

f011407b <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f011407b:	55                   	push   %ebp
f011407c:	89 e5                	mov    %esp,%ebp
f011407e:	57                   	push   %edi
f011407f:	56                   	push   %esi
f0114080:	53                   	push   %ebx
f0114081:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114087:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011408d:	bb f4 7c 13 f0       	mov    $0xf0137cf4,%ebx
f0114092:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114097:	89 c7                	mov    %eax,%edi
f0114099:	89 de                	mov    %ebx,%esi
f011409b:	89 d1                	mov    %edx,%ecx
f011409d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011409f:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f01140a5:	b9 23 00 00 00       	mov    $0x23,%ecx
f01140aa:	b0 00                	mov    $0x0,%al
f01140ac:	89 d7                	mov    %edx,%edi
f01140ae:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01140b0:	6a 00                	push   $0x0
f01140b2:	6a 0a                	push   $0xa
f01140b4:	6a 14                	push   $0x14
f01140b6:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01140bc:	50                   	push   %eax
f01140bd:	e8 09 4c ff ff       	call   f0108ccb <env_create>
f01140c2:	83 c4 10             	add    $0x10,%esp
f01140c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01140c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01140cb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01140d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01140d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01140d7:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01140dd:	89 45 80             	mov    %eax,-0x80(%ebp)
f01140e0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01140e3:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01140e6:	83 ec 0c             	sub    $0xc,%esp
f01140e9:	ff 75 cc             	pushl  -0x34(%ebp)
f01140ec:	e8 0f 2e 00 00       	call   f0116f00 <ClearUserSpace>
f01140f1:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01140f4:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01140fb:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114102:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114109:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f011410d:	83 ec 0c             	sub    $0xc,%esp
f0114110:	68 a0 88 13 f0       	push   $0xf01388a0
f0114115:	e8 17 cd fe ff       	call   f0100e31 <cprintf>
f011411a:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f011411d:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0114124:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f011412b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011412e:	8a 00                	mov    (%eax),%al
f0114130:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0114136:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114139:	8a 00                	mov    (%eax),%al
f011413b:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114141:	e8 80 88 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114146:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0114149:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011414c:	89 d0                	mov    %edx,%eax
f011414e:	01 c0                	add    %eax,%eax
f0114150:	01 d0                	add    %edx,%eax
f0114152:	01 c0                	add    %eax,%eax
f0114154:	83 ec 0c             	sub    $0xc,%esp
f0114157:	6a 02                	push   $0x2
f0114159:	50                   	push   %eax
f011415a:	68 00 40 10 f0       	push   $0xf0104000
f011415f:	68 00 00 10 f0       	push   $0xf0100000
f0114164:	ff 75 cc             	pushl  -0x34(%ebp)
f0114167:	e8 55 4a ff ff       	call   f0108bc1 <share_chunk>
f011416c:	83 c4 20             	add    $0x20,%esp
f011416f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114172:	e8 4f 88 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114177:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011417a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011417e:	75 08                	jne    f0114188 <test_share_chunk+0x10d>
f0114180:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114183:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114186:	74 28                	je     f01141b0 <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0114188:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011418b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011418e:	83 ec 0c             	sub    $0xc,%esp
f0114191:	50                   	push   %eax
f0114192:	ff 75 b0             	pushl  -0x50(%ebp)
f0114195:	68 cc 88 13 f0       	push   $0xf01388cc
f011419a:	68 47 03 00 00       	push   $0x347
f011419f:	68 f2 75 13 f0       	push   $0xf01375f2
f01141a4:	e8 15 c2 fe ff       	call   f01003be <_warn>
f01141a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141b4:	74 04                	je     f01141ba <test_share_chunk+0x13f>
f01141b6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f01141be:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01141c1:	c1 e0 03             	shl    $0x3,%eax
f01141c4:	83 ec 08             	sub    $0x8,%esp
f01141c7:	68 fd 00 00 00       	push   $0xfd
f01141cc:	6a 07                	push   $0x7
f01141ce:	6a 03                	push   $0x3
f01141d0:	6a 07                	push   $0x7
f01141d2:	6a 03                	push   $0x3
f01141d4:	6a 01                	push   $0x1
f01141d6:	50                   	push   %eax
f01141d7:	68 00 40 10 f0       	push   $0xf0104000
f01141dc:	68 00 00 10 f0       	push   $0xf0100000
f01141e1:	ff 75 cc             	pushl  -0x34(%ebp)
f01141e4:	e8 4b 2d 00 00       	call   f0116f34 <CCP>
f01141e9:	83 c4 30             	add    $0x30,%esp
f01141ec:	85 c0                	test   %eax,%eax
f01141ee:	75 1e                	jne    f011420e <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141f0:	83 ec 04             	sub    $0x4,%esp
f01141f3:	68 28 89 13 f0       	push   $0xf0138928
f01141f8:	68 4f 03 00 00       	push   $0x34f
f01141fd:	68 f2 75 13 f0       	push   $0xf01375f2
f0114202:	e8 b7 c1 fe ff       	call   f01003be <_warn>
f0114207:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011420a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011420e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114212:	74 04                	je     f0114218 <test_share_chunk+0x19d>
f0114214:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0114218:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011421b:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f011421e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114221:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0114224:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114227:	8a 00                	mov    (%eax),%al
f0114229:	3c 41                	cmp    $0x41,%al
f011422b:	75 09                	jne    f0114236 <test_share_chunk+0x1bb>
f011422d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114230:	8a 00                	mov    (%eax),%al
f0114232:	3c 42                	cmp    $0x42,%al
f0114234:	74 1e                	je     f0114254 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114236:	83 ec 04             	sub    $0x4,%esp
f0114239:	68 70 89 13 f0       	push   $0xf0138970
f011423e:	68 59 03 00 00       	push   $0x359
f0114243:	68 f2 75 13 f0       	push   $0xf01375f2
f0114248:	e8 71 c1 fe ff       	call   f01003be <_warn>
f011424d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114250:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114254:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114258:	74 04                	je     f011425e <test_share_chunk+0x1e3>
f011425a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011425e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0114262:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0114268:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011426b:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f011426d:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0114273:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114276:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0114278:	83 ec 0c             	sub    $0xc,%esp
f011427b:	68 a5 89 13 f0       	push   $0xf01389a5
f0114280:	e8 ac cb fe ff       	call   f0100e31 <cprintf>
f0114285:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0114288:	83 ec 0c             	sub    $0xc,%esp
f011428b:	68 b4 89 13 f0       	push   $0xf01389b4
f0114290:	e8 9c cb fe ff       	call   f0100e31 <cprintf>
f0114295:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114298:	e8 29 87 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011429d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01142a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01142a3:	c1 e0 05             	shl    $0x5,%eax
f01142a6:	83 ec 0c             	sub    $0xc,%esp
f01142a9:	68 02 0e 00 00       	push   $0xe02
f01142ae:	50                   	push   %eax
f01142af:	68 00 00 00 40       	push   $0x40000000
f01142b4:	68 00 00 00 f0       	push   $0xf0000000
f01142b9:	ff 75 cc             	pushl  -0x34(%ebp)
f01142bc:	e8 00 49 ff ff       	call   f0108bc1 <share_chunk>
f01142c1:	83 c4 20             	add    $0x20,%esp
f01142c4:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01142c7:	e8 fa 86 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01142cc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01142cf:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01142d3:	75 1f                	jne    f01142f4 <test_share_chunk+0x279>
f01142d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142d8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142db:	89 c1                	mov    %eax,%ecx
f01142dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01142e0:	c1 e0 05             	shl    $0x5,%eax
f01142e3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01142e6:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01142ed:	99                   	cltd   
f01142ee:	f7 fb                	idiv   %ebx
f01142f0:	39 c1                	cmp    %eax,%ecx
f01142f2:	74 28                	je     f011431c <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01142f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142f7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142fa:	83 ec 0c             	sub    $0xc,%esp
f01142fd:	50                   	push   %eax
f01142fe:	ff 75 a8             	pushl  -0x58(%ebp)
f0114301:	68 f0 89 13 f0       	push   $0xf01389f0
f0114306:	68 71 03 00 00       	push   $0x371
f011430b:	68 f2 75 13 f0       	push   $0xf01375f2
f0114310:	e8 a9 c0 fe ff       	call   f01003be <_warn>
f0114315:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114318:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011431c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114320:	74 04                	je     f0114326 <test_share_chunk+0x2ab>
f0114322:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114326:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011432a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114331:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114334:	c1 e0 05             	shl    $0x5,%eax
f0114337:	83 ec 08             	sub    $0x8,%esp
f011433a:	6a 02                	push   $0x2
f011433c:	6a 07                	push   $0x7
f011433e:	6a 03                	push   $0x3
f0114340:	68 07 0e 00 00       	push   $0xe07
f0114345:	68 03 0e 00 00       	push   $0xe03
f011434a:	6a ff                	push   $0xffffffff
f011434c:	50                   	push   %eax
f011434d:	68 00 00 00 40       	push   $0x40000000
f0114352:	68 00 00 00 f0       	push   $0xf0000000
f0114357:	ff 75 cc             	pushl  -0x34(%ebp)
f011435a:	e8 d5 2b 00 00       	call   f0116f34 <CCP>
f011435f:	83 c4 30             	add    $0x30,%esp
f0114362:	85 c0                	test   %eax,%eax
f0114364:	75 25                	jne    f011438b <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114366:	83 ec 04             	sub    $0x4,%esp
f0114369:	68 28 89 13 f0       	push   $0xf0138928
f011436e:	68 7a 03 00 00       	push   $0x37a
f0114373:	68 f2 75 13 f0       	push   $0xf01375f2
f0114378:	e8 41 c0 fe ff       	call   f01003be <_warn>
f011437d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114380:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114384:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011438b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011438e:	89 d0                	mov    %edx,%eax
f0114390:	01 c0                	add    %eax,%eax
f0114392:	01 d0                	add    %edx,%eax
f0114394:	c1 e0 02             	shl    $0x2,%eax
f0114397:	83 ec 08             	sub    $0x8,%esp
f011439a:	6a 02                	push   $0x2
f011439c:	6a 07                	push   $0x7
f011439e:	6a 03                	push   $0x3
f01143a0:	68 07 0e 00 00       	push   $0xe07
f01143a5:	68 03 0e 00 00       	push   $0xe03
f01143aa:	6a 02                	push   $0x2
f01143ac:	50                   	push   %eax
f01143ad:	68 00 00 00 40       	push   $0x40000000
f01143b2:	68 00 00 00 f0       	push   $0xf0000000
f01143b7:	ff 75 cc             	pushl  -0x34(%ebp)
f01143ba:	e8 75 2b 00 00       	call   f0116f34 <CCP>
f01143bf:	83 c4 30             	add    $0x30,%esp
f01143c2:	85 c0                	test   %eax,%eax
f01143c4:	75 1e                	jne    f01143e4 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143c6:	83 ec 04             	sub    $0x4,%esp
f01143c9:	68 28 89 13 f0       	push   $0xf0138928
f01143ce:	68 81 03 00 00       	push   $0x381
f01143d3:	68 f2 75 13 f0       	push   $0xf01375f2
f01143d8:	e8 e1 bf fe ff       	call   f01003be <_warn>
f01143dd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143e0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143e4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143e8:	74 04                	je     f01143ee <test_share_chunk+0x373>
f01143ea:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143ee:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01143f2:	b8 6c e5 2d f0       	mov    $0xf02de56c,%eax
f01143f7:	05 00 00 00 10       	add    $0x10000000,%eax
f01143fc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01143ff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114402:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114407:	83 ec 08             	sub    $0x8,%esp
f011440a:	6a 02                	push   $0x2
f011440c:	6a 07                	push   $0x7
f011440e:	6a 03                	push   $0x3
f0114410:	68 07 0e 00 00       	push   $0xe07
f0114415:	68 03 0e 00 00       	push   $0xe03
f011441a:	6a 02                	push   $0x2
f011441c:	50                   	push   %eax
f011441d:	68 00 00 0a 40       	push   $0x400a0000
f0114422:	68 00 00 0a f0       	push   $0xf00a0000
f0114427:	ff 75 cc             	pushl  -0x34(%ebp)
f011442a:	e8 05 2b 00 00       	call   f0116f34 <CCP>
f011442f:	83 c4 30             	add    $0x30,%esp
f0114432:	85 c0                	test   %eax,%eax
f0114434:	75 1e                	jne    f0114454 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114436:	83 ec 04             	sub    $0x4,%esp
f0114439:	68 28 89 13 f0       	push   $0xf0138928
f011443e:	68 8b 03 00 00       	push   $0x38b
f0114443:	68 f2 75 13 f0       	push   $0xf01375f2
f0114448:	e8 71 bf fe ff       	call   f01003be <_warn>
f011444d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114450:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114454:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114458:	74 04                	je     f011445e <test_share_chunk+0x3e3>
f011445a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011445e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114462:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114466:	0f 84 a4 00 00 00    	je     f0114510 <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f011446c:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0114473:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114476:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0114479:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0114480:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114483:	8a 00                	mov    (%eax),%al
f0114485:	3c 41                	cmp    $0x41,%al
f0114487:	75 09                	jne    f0114492 <test_share_chunk+0x417>
f0114489:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011448c:	8a 00                	mov    (%eax),%al
f011448e:	3c 41                	cmp    $0x41,%al
f0114490:	74 1e                	je     f01144b0 <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114492:	83 ec 04             	sub    $0x4,%esp
f0114495:	68 70 89 13 f0       	push   $0xf0138970
f011449a:	68 98 03 00 00       	push   $0x398
f011449f:	68 f2 75 13 f0       	push   $0xf01375f2
f01144a4:	e8 15 bf fe ff       	call   f01003be <_warn>
f01144a9:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01144ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01144b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144b4:	74 04                	je     f01144ba <test_share_chunk+0x43f>
f01144b6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01144ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01144be:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01144c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144c8:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01144cb:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f01144d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144d5:	8a 00                	mov    (%eax),%al
f01144d7:	3c 43                	cmp    $0x43,%al
f01144d9:	75 09                	jne    f01144e4 <test_share_chunk+0x469>
f01144db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01144de:	8a 00                	mov    (%eax),%al
f01144e0:	3c 43                	cmp    $0x43,%al
f01144e2:	74 1e                	je     f0114502 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01144e4:	83 ec 04             	sub    $0x4,%esp
f01144e7:	68 70 89 13 f0       	push   $0xf0138970
f01144ec:	68 a3 03 00 00       	push   $0x3a3
f01144f1:	68 f2 75 13 f0       	push   $0xf01375f2
f01144f6:	e8 c3 be fe ff       	call   f01003be <_warn>
f01144fb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01144fe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114502:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114506:	74 04                	je     f011450c <test_share_chunk+0x491>
f0114508:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011450c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114510:	83 ec 0c             	sub    $0xc,%esp
f0114513:	68 7f 7f 13 f0       	push   $0xf0137f7f
f0114518:	e8 14 c9 fe ff       	call   f0100e31 <cprintf>
f011451d:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0114520:	83 ec 0c             	sub    $0xc,%esp
f0114523:	68 40 8a 13 f0       	push   $0xf0138a40
f0114528:	e8 04 c9 fe ff       	call   f0100e31 <cprintf>
f011452d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114530:	e8 91 84 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114535:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114538:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011453b:	89 d0                	mov    %edx,%eax
f011453d:	c1 e0 03             	shl    $0x3,%eax
f0114540:	01 d0                	add    %edx,%eax
f0114542:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0114549:	01 d0                	add    %edx,%eax
f011454b:	c1 e0 03             	shl    $0x3,%eax
f011454e:	83 ec 0c             	sub    $0xc,%esp
f0114551:	6a 06                	push   $0x6
f0114553:	50                   	push   %eax
f0114554:	6a 00                	push   $0x0
f0114556:	68 00 00 00 40       	push   $0x40000000
f011455b:	ff 75 cc             	pushl  -0x34(%ebp)
f011455e:	e8 5e 46 ff ff       	call   f0108bc1 <share_chunk>
f0114563:	83 c4 20             	add    $0x20,%esp
f0114566:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114569:	e8 58 84 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011456e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114571:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114575:	75 0b                	jne    f0114582 <test_share_chunk+0x507>
f0114577:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011457a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011457d:	83 f8 01             	cmp    $0x1,%eax
f0114580:	74 28                	je     f01145aa <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114582:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114585:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114588:	83 ec 0c             	sub    $0xc,%esp
f011458b:	50                   	push   %eax
f011458c:	ff 75 a0             	pushl  -0x60(%ebp)
f011458f:	68 f0 89 13 f0       	push   $0xf01389f0
f0114594:	68 b9 03 00 00       	push   $0x3b9
f0114599:	68 f2 75 13 f0       	push   $0xf01375f2
f011459e:	e8 1b be fe ff       	call   f01003be <_warn>
f01145a3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145aa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145ae:	74 04                	je     f01145b4 <test_share_chunk+0x539>
f01145b0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145b4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01145b8:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01145bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145c2:	05 00 80 02 00       	add    $0x28000,%eax
f01145c7:	c1 e0 02             	shl    $0x2,%eax
f01145ca:	83 ec 08             	sub    $0x8,%esp
f01145cd:	6a 02                	push   $0x2
f01145cf:	6a 07                	push   $0x7
f01145d1:	6a 03                	push   $0x3
f01145d3:	6a 07                	push   $0x7
f01145d5:	6a 07                	push   $0x7
f01145d7:	6a ff                	push   $0xffffffff
f01145d9:	50                   	push   %eax
f01145da:	6a 00                	push   $0x0
f01145dc:	68 00 00 00 40       	push   $0x40000000
f01145e1:	ff 75 cc             	pushl  -0x34(%ebp)
f01145e4:	e8 4b 29 00 00       	call   f0116f34 <CCP>
f01145e9:	83 c4 30             	add    $0x30,%esp
f01145ec:	85 c0                	test   %eax,%eax
f01145ee:	75 25                	jne    f0114615 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01145f0:	83 ec 04             	sub    $0x4,%esp
f01145f3:	68 28 89 13 f0       	push   $0xf0138928
f01145f8:	68 c2 03 00 00       	push   $0x3c2
f01145fd:	68 f2 75 13 f0       	push   $0xf01375f2
f0114602:	e8 b7 bd fe ff       	call   f01003be <_warn>
f0114607:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011460a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011460e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114615:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114618:	89 d0                	mov    %edx,%eax
f011461a:	01 c0                	add    %eax,%eax
f011461c:	01 d0                	add    %edx,%eax
f011461e:	c1 e0 02             	shl    $0x2,%eax
f0114621:	83 ec 08             	sub    $0x8,%esp
f0114624:	6a 02                	push   $0x2
f0114626:	6a 07                	push   $0x7
f0114628:	6a 03                	push   $0x3
f011462a:	6a 07                	push   $0x7
f011462c:	6a 07                	push   $0x7
f011462e:	6a 03                	push   $0x3
f0114630:	50                   	push   %eax
f0114631:	6a 00                	push   $0x0
f0114633:	68 00 00 00 40       	push   $0x40000000
f0114638:	ff 75 cc             	pushl  -0x34(%ebp)
f011463b:	e8 f4 28 00 00       	call   f0116f34 <CCP>
f0114640:	83 c4 30             	add    $0x30,%esp
f0114643:	85 c0                	test   %eax,%eax
f0114645:	75 1e                	jne    f0114665 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114647:	83 ec 04             	sub    $0x4,%esp
f011464a:	68 28 89 13 f0       	push   $0xf0138928
f011464f:	68 c9 03 00 00       	push   $0x3c9
f0114654:	68 f2 75 13 f0       	push   $0xf01375f2
f0114659:	e8 60 bd fe ff       	call   f01003be <_warn>
f011465e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114661:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114665:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114669:	74 04                	je     f011466f <test_share_chunk+0x5f4>
f011466b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011466f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114673:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114676:	89 d0                	mov    %edx,%eax
f0114678:	01 c0                	add    %eax,%eax
f011467a:	01 d0                	add    %edx,%eax
f011467c:	c1 e0 02             	shl    $0x2,%eax
f011467f:	f7 d8                	neg    %eax
f0114681:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114686:	83 ec 08             	sub    $0x8,%esp
f0114689:	6a 02                	push   $0x2
f011468b:	6a 07                	push   $0x7
f011468d:	6a 03                	push   $0x3
f011468f:	6a 07                	push   $0x7
f0114691:	6a 07                	push   $0x7
f0114693:	6a 02                	push   $0x2
f0114695:	50                   	push   %eax
f0114696:	68 00 30 00 00       	push   $0x3000
f011469b:	68 00 30 00 40       	push   $0x40003000
f01146a0:	ff 75 cc             	pushl  -0x34(%ebp)
f01146a3:	e8 8c 28 00 00       	call   f0116f34 <CCP>
f01146a8:	83 c4 30             	add    $0x30,%esp
f01146ab:	85 c0                	test   %eax,%eax
f01146ad:	75 1e                	jne    f01146cd <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146af:	83 ec 04             	sub    $0x4,%esp
f01146b2:	68 28 89 13 f0       	push   $0xf0138928
f01146b7:	68 d1 03 00 00       	push   $0x3d1
f01146bc:	68 f2 75 13 f0       	push   $0xf01375f2
f01146c1:	e8 f8 bc fe ff       	call   f01003be <_warn>
f01146c6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146d1:	74 04                	je     f01146d7 <test_share_chunk+0x65c>
f01146d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01146db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146de:	c1 e0 02             	shl    $0x2,%eax
f01146e1:	83 ec 08             	sub    $0x8,%esp
f01146e4:	6a 02                	push   $0x2
f01146e6:	6a 07                	push   $0x7
f01146e8:	6a 03                	push   $0x3
f01146ea:	6a 07                	push   $0x7
f01146ec:	6a 07                	push   $0x7
f01146ee:	6a 03                	push   $0x3
f01146f0:	50                   	push   %eax
f01146f1:	68 00 00 0a 00       	push   $0xa0000
f01146f6:	68 00 00 0a 40       	push   $0x400a0000
f01146fb:	ff 75 cc             	pushl  -0x34(%ebp)
f01146fe:	e8 31 28 00 00       	call   f0116f34 <CCP>
f0114703:	83 c4 30             	add    $0x30,%esp
f0114706:	85 c0                	test   %eax,%eax
f0114708:	75 1e                	jne    f0114728 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011470a:	83 ec 04             	sub    $0x4,%esp
f011470d:	68 28 89 13 f0       	push   $0xf0138928
f0114712:	68 d9 03 00 00       	push   $0x3d9
f0114717:	68 f2 75 13 f0       	push   $0xf01375f2
f011471c:	e8 9d bc fe ff       	call   f01003be <_warn>
f0114721:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114724:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114728:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011472c:	74 04                	je     f0114732 <test_share_chunk+0x6b7>
f011472e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114732:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114736:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011473a:	0f 84 92 00 00 00    	je     f01147d2 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f0114740:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114747:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011474e:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114755:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011475c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011475f:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114762:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114769:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114770:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114773:	8a 00                	mov    (%eax),%al
f0114775:	3c 41                	cmp    $0x41,%al
f0114777:	75 2d                	jne    f01147a6 <test_share_chunk+0x72b>
f0114779:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011477c:	8a 00                	mov    (%eax),%al
f011477e:	3c 41                	cmp    $0x41,%al
f0114780:	75 24                	jne    f01147a6 <test_share_chunk+0x72b>
f0114782:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114785:	8a 00                	mov    (%eax),%al
f0114787:	3c 41                	cmp    $0x41,%al
f0114789:	75 1b                	jne    f01147a6 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011478b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011478e:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114790:	3c 44                	cmp    $0x44,%al
f0114792:	75 12                	jne    f01147a6 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114794:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114797:	8a 00                	mov    (%eax),%al
f0114799:	3c 44                	cmp    $0x44,%al
f011479b:	75 09                	jne    f01147a6 <test_share_chunk+0x72b>
f011479d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01147a0:	8a 00                	mov    (%eax),%al
f01147a2:	3c 44                	cmp    $0x44,%al
f01147a4:	74 1e                	je     f01147c4 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01147a6:	83 ec 04             	sub    $0x4,%esp
f01147a9:	68 70 89 13 f0       	push   $0xf0138970
f01147ae:	68 eb 03 00 00       	push   $0x3eb
f01147b3:	68 f2 75 13 f0       	push   $0xf01375f2
f01147b8:	e8 01 bc fe ff       	call   f01003be <_warn>
f01147bd:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01147c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01147c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147c8:	74 04                	je     f01147ce <test_share_chunk+0x753>
f01147ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01147ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01147d2:	83 ec 0c             	sub    $0xc,%esp
f01147d5:	68 e2 7f 13 f0       	push   $0xf0137fe2
f01147da:	e8 52 c6 fe ff       	call   f0100e31 <cprintf>
f01147df:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01147e2:	83 ec 0c             	sub    $0xc,%esp
f01147e5:	68 7c 8a 13 f0       	push   $0xf0138a7c
f01147ea:	e8 42 c6 fe ff       	call   f0100e31 <cprintf>
f01147ef:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01147f2:	e8 cf 81 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01147f7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01147fa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01147fd:	89 d0                	mov    %edx,%eax
f01147ff:	01 c0                	add    %eax,%eax
f0114801:	01 d0                	add    %edx,%eax
f0114803:	01 c0                	add    %eax,%eax
f0114805:	01 d0                	add    %edx,%eax
f0114807:	83 ec 0c             	sub    $0xc,%esp
f011480a:	6a 04                	push   $0x4
f011480c:	50                   	push   %eax
f011480d:	68 00 fc 3f 00       	push   $0x3ffc00
f0114812:	68 00 fc 09 00       	push   $0x9fc00
f0114817:	ff 75 cc             	pushl  -0x34(%ebp)
f011481a:	e8 a2 43 ff ff       	call   f0108bc1 <share_chunk>
f011481f:	83 c4 20             	add    $0x20,%esp
f0114822:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114825:	e8 9c 81 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011482a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011482d:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114831:	75 0b                	jne    f011483e <test_share_chunk+0x7c3>
f0114833:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114836:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114839:	83 f8 01             	cmp    $0x1,%eax
f011483c:	74 28                	je     f0114866 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011483e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114841:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114844:	83 ec 0c             	sub    $0xc,%esp
f0114847:	50                   	push   %eax
f0114848:	ff 75 8c             	pushl  -0x74(%ebp)
f011484b:	68 f0 89 13 f0       	push   $0xf01389f0
f0114850:	68 01 04 00 00       	push   $0x401
f0114855:	68 f2 75 13 f0       	push   $0xf01375f2
f011485a:	e8 5f bb fe ff       	call   f01003be <_warn>
f011485f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114862:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114866:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011486a:	74 04                	je     f0114870 <test_share_chunk+0x7f5>
f011486c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114870:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114874:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011487b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011487e:	89 d0                	mov    %edx,%eax
f0114880:	01 c0                	add    %eax,%eax
f0114882:	01 d0                	add    %edx,%eax
f0114884:	c1 e0 02             	shl    $0x2,%eax
f0114887:	83 ec 08             	sub    $0x8,%esp
f011488a:	6a 02                	push   $0x2
f011488c:	6a 07                	push   $0x7
f011488e:	6a 07                	push   $0x7
f0114890:	6a 07                	push   $0x7
f0114892:	6a 05                	push   $0x5
f0114894:	6a ff                	push   $0xffffffff
f0114896:	50                   	push   %eax
f0114897:	68 00 f0 3f 00       	push   $0x3ff000
f011489c:	68 00 f0 09 00       	push   $0x9f000
f01148a1:	ff 75 cc             	pushl  -0x34(%ebp)
f01148a4:	e8 8b 26 00 00       	call   f0116f34 <CCP>
f01148a9:	83 c4 30             	add    $0x30,%esp
f01148ac:	85 c0                	test   %eax,%eax
f01148ae:	75 25                	jne    f01148d5 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01148b0:	83 ec 04             	sub    $0x4,%esp
f01148b3:	68 28 89 13 f0       	push   $0xf0138928
f01148b8:	68 0a 04 00 00       	push   $0x40a
f01148bd:	68 f2 75 13 f0       	push   $0xf01375f2
f01148c2:	e8 f7 ba fe ff       	call   f01003be <_warn>
f01148c7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01148ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01148ce:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01148d5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148d9:	74 04                	je     f01148df <test_share_chunk+0x864>
f01148db:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148df:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01148e3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148e6:	c1 e0 02             	shl    $0x2,%eax
f01148e9:	83 ec 08             	sub    $0x8,%esp
f01148ec:	6a 02                	push   $0x2
f01148ee:	6a 07                	push   $0x7
f01148f0:	6a 07                	push   $0x7
f01148f2:	6a 07                	push   $0x7
f01148f4:	6a 05                	push   $0x5
f01148f6:	6a 03                	push   $0x3
f01148f8:	50                   	push   %eax
f01148f9:	68 00 f0 3f 00       	push   $0x3ff000
f01148fe:	68 00 f0 09 00       	push   $0x9f000
f0114903:	ff 75 cc             	pushl  -0x34(%ebp)
f0114906:	e8 29 26 00 00       	call   f0116f34 <CCP>
f011490b:	83 c4 30             	add    $0x30,%esp
f011490e:	85 c0                	test   %eax,%eax
f0114910:	75 1e                	jne    f0114930 <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114912:	83 ec 04             	sub    $0x4,%esp
f0114915:	68 28 89 13 f0       	push   $0xf0138928
f011491a:	68 13 04 00 00       	push   $0x413
f011491f:	68 f2 75 13 f0       	push   $0xf01375f2
f0114924:	e8 95 ba fe ff       	call   f01003be <_warn>
f0114929:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011492c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114930:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114934:	74 04                	je     f011493a <test_share_chunk+0x8bf>
f0114936:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011493a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011493e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114941:	c1 e0 03             	shl    $0x3,%eax
f0114944:	83 ec 08             	sub    $0x8,%esp
f0114947:	6a 02                	push   $0x2
f0114949:	6a 07                	push   $0x7
f011494b:	6a 07                	push   $0x7
f011494d:	6a 07                	push   $0x7
f011494f:	6a 05                	push   $0x5
f0114951:	6a 04                	push   $0x4
f0114953:	50                   	push   %eax
f0114954:	68 00 00 40 00       	push   $0x400000
f0114959:	68 00 00 0a 00       	push   $0xa0000
f011495e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114961:	e8 ce 25 00 00       	call   f0116f34 <CCP>
f0114966:	83 c4 30             	add    $0x30,%esp
f0114969:	85 c0                	test   %eax,%eax
f011496b:	75 1e                	jne    f011498b <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011496d:	83 ec 04             	sub    $0x4,%esp
f0114970:	68 28 89 13 f0       	push   $0xf0138928
f0114975:	68 1b 04 00 00       	push   $0x41b
f011497a:	68 f2 75 13 f0       	push   $0xf01375f2
f011497f:	e8 3a ba fe ff       	call   f01003be <_warn>
f0114984:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114987:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011498b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011498f:	74 04                	je     f0114995 <test_share_chunk+0x91a>
f0114991:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114995:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114999:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011499d:	0f 84 b2 00 00 00    	je     f0114a55 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f01149a3:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01149aa:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01149b1:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01149b8:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01149bf:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01149c6:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01149cd:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01149d4:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01149db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01149de:	8a 00                	mov    (%eax),%al
f01149e0:	3c 44                	cmp    $0x44,%al
f01149e2:	75 45                	jne    f0114a29 <test_share_chunk+0x9ae>
f01149e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01149e7:	8a 00                	mov    (%eax),%al
f01149e9:	3c 44                	cmp    $0x44,%al
f01149eb:	75 3c                	jne    f0114a29 <test_share_chunk+0x9ae>
f01149ed:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01149f0:	8a 00                	mov    (%eax),%al
f01149f2:	3c 44                	cmp    $0x44,%al
f01149f4:	75 33                	jne    f0114a29 <test_share_chunk+0x9ae>
f01149f6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01149f9:	8a 00                	mov    (%eax),%al
f01149fb:	3c 44                	cmp    $0x44,%al
f01149fd:	75 2a                	jne    f0114a29 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01149ff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114a02:	8a 10                	mov    (%eax),%dl
f0114a04:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114a07:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114a09:	38 c2                	cmp    %al,%dl
f0114a0b:	75 1c                	jne    f0114a29 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114a0d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114a10:	8a 10                	mov    (%eax),%dl
f0114a12:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114a15:	8a 00                	mov    (%eax),%al
f0114a17:	38 c2                	cmp    %al,%dl
f0114a19:	75 0e                	jne    f0114a29 <test_share_chunk+0x9ae>
f0114a1b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114a1e:	8a 10                	mov    (%eax),%dl
f0114a20:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114a23:	8a 00                	mov    (%eax),%al
f0114a25:	38 c2                	cmp    %al,%dl
f0114a27:	74 1e                	je     f0114a47 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114a29:	83 ec 04             	sub    $0x4,%esp
f0114a2c:	68 70 89 13 f0       	push   $0xf0138970
f0114a31:	68 30 04 00 00       	push   $0x430
f0114a36:	68 f2 75 13 f0       	push   $0xf01375f2
f0114a3b:	e8 7e b9 fe ff       	call   f01003be <_warn>
f0114a40:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114a43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114a47:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a4b:	74 04                	je     f0114a51 <test_share_chunk+0x9d6>
f0114a4d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114a51:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114a55:	83 ec 0c             	sub    $0xc,%esp
f0114a58:	68 b4 8a 13 f0       	push   $0xf0138ab4
f0114a5d:	e8 cf c3 fe ff       	call   f0100e31 <cprintf>
f0114a62:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114a65:	83 ec 08             	sub    $0x8,%esp
f0114a68:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114a6b:	68 c4 8a 13 f0       	push   $0xf0138ac4
f0114a70:	e8 bc c3 fe ff       	call   f0100e31 <cprintf>
f0114a75:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114a78:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114a7c:	75 10                	jne    f0114a8e <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114a7e:	83 ec 0c             	sub    $0xc,%esp
f0114a81:	68 f4 8a 13 f0       	push   $0xf0138af4
f0114a86:	e8 a6 c3 fe ff       	call   f0100e31 <cprintf>
f0114a8b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114a8e:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0114a93:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114a96:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a99:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114a9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114aa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114aa4:	5b                   	pop    %ebx
f0114aa5:	5e                   	pop    %esi
f0114aa6:	5f                   	pop    %edi
f0114aa7:	5d                   	pop    %ebp
f0114aa8:	c3                   	ret    

f0114aa9 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114aa9:	55                   	push   %ebp
f0114aaa:	89 e5                	mov    %esp,%ebp
f0114aac:	57                   	push   %edi
f0114aad:	56                   	push   %esi
f0114aae:	53                   	push   %ebx
f0114aaf:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114ab5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114abb:	bb f4 7c 13 f0       	mov    $0xf0137cf4,%ebx
f0114ac0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114ac5:	89 c7                	mov    %eax,%edi
f0114ac7:	89 de                	mov    %ebx,%esi
f0114ac9:	89 d1                	mov    %edx,%ecx
f0114acb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114acd:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114ad3:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114ad8:	b0 00                	mov    $0x0,%al
f0114ada:	89 d7                	mov    %edx,%edi
f0114adc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114ade:	6a 00                	push   $0x0
f0114ae0:	6a 0a                	push   $0xa
f0114ae2:	6a 14                	push   $0x14
f0114ae4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114aea:	50                   	push   %eax
f0114aeb:	e8 db 41 ff ff       	call   f0108ccb <env_create>
f0114af0:	83 c4 10             	add    $0x10,%esp
f0114af3:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114af6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114af9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114aff:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114b02:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b05:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114b0b:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114b0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114b11:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114b14:	83 ec 0c             	sub    $0xc,%esp
f0114b17:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b1a:	e8 e1 23 00 00       	call   f0116f00 <ClearUserSpace>
f0114b1f:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114b22:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114b29:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114b30:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114b37:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114b3b:	83 ec 0c             	sub    $0xc,%esp
f0114b3e:	68 30 8b 13 f0       	push   $0xf0138b30
f0114b43:	e8 e9 c2 fe ff       	call   f0100e31 <cprintf>
f0114b48:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114b4b:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114b52:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114b59:	eb 03                	jmp    f0114b5e <test_allocate_chunk+0xb5>
f0114b5b:	ff 4d e4             	decl   -0x1c(%ebp)
f0114b5e:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114b65:	76 09                	jbe    f0114b70 <test_allocate_chunk+0xc7>
f0114b67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b6a:	8a 00                	mov    (%eax),%al
f0114b6c:	84 c0                	test   %al,%al
f0114b6e:	74 eb                	je     f0114b5b <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0114b70:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114b77:	75 06                	jne    f0114b7f <test_allocate_chunk+0xd6>
f0114b79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b7c:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0114b7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b82:	8a 00                	mov    (%eax),%al
f0114b84:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114b8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b8d:	8a 00                	mov    (%eax),%al
f0114b8f:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0114b95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b98:	8a 00                	mov    (%eax),%al
f0114b9a:	0f be c0             	movsbl %al,%eax
f0114b9d:	83 ec 08             	sub    $0x8,%esp
f0114ba0:	50                   	push   %eax
f0114ba1:	68 5a 8b 13 f0       	push   $0xf0138b5a
f0114ba6:	e8 86 c2 fe ff       	call   f0100e31 <cprintf>
f0114bab:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f0114bae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bb1:	8a 00                	mov    (%eax),%al
f0114bb3:	0f be c0             	movsbl %al,%eax
f0114bb6:	83 ec 08             	sub    $0x8,%esp
f0114bb9:	50                   	push   %eax
f0114bba:	68 66 8b 13 f0       	push   $0xf0138b66
f0114bbf:	e8 6d c2 fe ff       	call   f0100e31 <cprintf>
f0114bc4:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114bc7:	83 ec 08             	sub    $0x8,%esp
f0114bca:	68 00 f0 bf ef       	push   $0xefbff000
f0114bcf:	ff 75 cc             	pushl  -0x34(%ebp)
f0114bd2:	e8 90 22 00 00       	call   f0116e67 <GP>
f0114bd7:	83 c4 10             	add    $0x10,%esp
f0114bda:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114bdd:	e8 e4 7d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114be2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114be5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114be8:	c1 e0 02             	shl    $0x2,%eax
f0114beb:	6a 02                	push   $0x2
f0114bed:	50                   	push   %eax
f0114bee:	68 00 f0 bf ef       	push   $0xefbff000
f0114bf3:	ff 75 cc             	pushl  -0x34(%ebp)
f0114bf6:	e8 e0 3f ff ff       	call   f0108bdb <allocate_chunk>
f0114bfb:	83 c4 10             	add    $0x10,%esp
f0114bfe:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c01:	e8 c0 7d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114c06:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114c09:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114c0d:	75 08                	jne    f0114c17 <test_allocate_chunk+0x16e>
f0114c0f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c12:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114c15:	74 2a                	je     f0114c41 <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114c17:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c1a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c1d:	83 ec 08             	sub    $0x8,%esp
f0114c20:	6a 00                	push   $0x0
f0114c22:	50                   	push   %eax
f0114c23:	ff 75 b0             	pushl  -0x50(%ebp)
f0114c26:	68 74 8b 13 f0       	push   $0xf0138b74
f0114c2b:	68 70 04 00 00       	push   $0x470
f0114c30:	68 f2 75 13 f0       	push   $0xf01375f2
f0114c35:	e8 84 b7 fe ff       	call   f01003be <_warn>
f0114c3a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c3d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114c41:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c45:	74 04                	je     f0114c4b <test_allocate_chunk+0x1a2>
f0114c47:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114c4b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c4f:	e8 72 7d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114c54:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114c57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c5a:	01 c0                	add    %eax,%eax
f0114c5c:	89 c1                	mov    %eax,%ecx
f0114c5e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c61:	89 d0                	mov    %edx,%eax
f0114c63:	c1 e0 02             	shl    $0x2,%eax
f0114c66:	01 d0                	add    %edx,%eax
f0114c68:	f7 d8                	neg    %eax
f0114c6a:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114c6f:	6a 02                	push   $0x2
f0114c71:	51                   	push   %ecx
f0114c72:	50                   	push   %eax
f0114c73:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c76:	e8 60 3f ff ff       	call   f0108bdb <allocate_chunk>
f0114c7b:	83 c4 10             	add    $0x10,%esp
f0114c7e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c81:	e8 40 7d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114c86:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114c89:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114c8d:	75 08                	jne    f0114c97 <test_allocate_chunk+0x1ee>
f0114c8f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c92:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114c95:	74 2a                	je     f0114cc1 <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114c97:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c9a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c9d:	83 ec 08             	sub    $0x8,%esp
f0114ca0:	6a 00                	push   $0x0
f0114ca2:	50                   	push   %eax
f0114ca3:	ff 75 b0             	pushl  -0x50(%ebp)
f0114ca6:	68 74 8b 13 f0       	push   $0xf0138b74
f0114cab:	68 7e 04 00 00       	push   $0x47e
f0114cb0:	68 f2 75 13 f0       	push   $0xf01375f2
f0114cb5:	e8 04 b7 fe ff       	call   f01003be <_warn>
f0114cba:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cbd:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114cc1:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114cc5:	74 04                	je     f0114ccb <test_allocate_chunk+0x222>
f0114cc7:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114ccb:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114ccf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cd2:	c1 e0 02             	shl    $0x2,%eax
f0114cd5:	83 ec 08             	sub    $0x8,%esp
f0114cd8:	6a 03                	push   $0x3
f0114cda:	6a 00                	push   $0x0
f0114cdc:	6a 00                	push   $0x0
f0114cde:	68 ff 0f 00 00       	push   $0xfff
f0114ce3:	ff 75 b8             	pushl  -0x48(%ebp)
f0114ce6:	6a 01                	push   $0x1
f0114ce8:	50                   	push   %eax
f0114ce9:	68 00 f0 bf ef       	push   $0xefbff000
f0114cee:	6a 00                	push   $0x0
f0114cf0:	ff 75 cc             	pushl  -0x34(%ebp)
f0114cf3:	e8 3c 22 00 00       	call   f0116f34 <CCP>
f0114cf8:	83 c4 30             	add    $0x30,%esp
f0114cfb:	85 c0                	test   %eax,%eax
f0114cfd:	75 1e                	jne    f0114d1d <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114cff:	83 ec 04             	sub    $0x4,%esp
f0114d02:	68 dc 8b 13 f0       	push   $0xf0138bdc
f0114d07:	68 86 04 00 00       	push   $0x486
f0114d0c:	68 f2 75 13 f0       	push   $0xf01375f2
f0114d11:	e8 a8 b6 fe ff       	call   f01003be <_warn>
f0114d16:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d19:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114d1d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d21:	74 04                	je     f0114d27 <test_allocate_chunk+0x27e>
f0114d23:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114d27:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114d2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114d2e:	8a 10                	mov    (%eax),%dl
f0114d30:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114d36:	38 c2                	cmp    %al,%dl
f0114d38:	75 0f                	jne    f0114d49 <test_allocate_chunk+0x2a0>
f0114d3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114d3d:	8a 10                	mov    (%eax),%dl
f0114d3f:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114d45:	38 c2                	cmp    %al,%dl
f0114d47:	74 1e                	je     f0114d67 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114d49:	83 ec 04             	sub    $0x4,%esp
f0114d4c:	68 28 8c 13 f0       	push   $0xf0138c28
f0114d51:	68 8e 04 00 00       	push   $0x48e
f0114d56:	68 f2 75 13 f0       	push   $0xf01375f2
f0114d5b:	e8 5e b6 fe ff       	call   f01003be <_warn>
f0114d60:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d63:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114d67:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d6b:	74 04                	je     f0114d71 <test_allocate_chunk+0x2c8>
f0114d6d:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114d71:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114d75:	83 ec 0c             	sub    $0xc,%esp
f0114d78:	68 a5 89 13 f0       	push   $0xf01389a5
f0114d7d:	e8 af c0 fe ff       	call   f0100e31 <cprintf>
f0114d82:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114d85:	83 ec 0c             	sub    $0xc,%esp
f0114d88:	68 60 8c 13 f0       	push   $0xf0138c60
f0114d8d:	e8 9f c0 fe ff       	call   f0100e31 <cprintf>
f0114d92:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d95:	e8 2c 7c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114d9a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114d9d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114da0:	c1 e0 05             	shl    $0x5,%eax
f0114da3:	68 02 0e 00 00       	push   $0xe02
f0114da8:	50                   	push   %eax
f0114da9:	6a 00                	push   $0x0
f0114dab:	ff 75 cc             	pushl  -0x34(%ebp)
f0114dae:	e8 28 3e ff ff       	call   f0108bdb <allocate_chunk>
f0114db3:	83 c4 10             	add    $0x10,%esp
f0114db6:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114db9:	e8 08 7c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114dbe:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114dc1:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114dc5:	75 36                	jne    f0114dfd <test_allocate_chunk+0x354>
f0114dc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dca:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114dcd:	89 c1                	mov    %eax,%ecx
f0114dcf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dd2:	c1 e0 05             	shl    $0x5,%eax
f0114dd5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114dd8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ddf:	99                   	cltd   
f0114de0:	f7 fe                	idiv   %esi
f0114de2:	89 c3                	mov    %eax,%ebx
f0114de4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114de7:	c1 e0 05             	shl    $0x5,%eax
f0114dea:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ded:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114df4:	99                   	cltd   
f0114df5:	f7 fe                	idiv   %esi
f0114df7:	01 d8                	add    %ebx,%eax
f0114df9:	39 c1                	cmp    %eax,%ecx
f0114dfb:	74 54                	je     f0114e51 <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114dfd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e00:	c1 e0 05             	shl    $0x5,%eax
f0114e03:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114e06:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114e0d:	99                   	cltd   
f0114e0e:	f7 ff                	idiv   %edi
f0114e10:	89 c1                	mov    %eax,%ecx
f0114e12:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e15:	c1 e0 05             	shl    $0x5,%eax
f0114e18:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e1b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e22:	99                   	cltd   
f0114e23:	f7 fe                	idiv   %esi
f0114e25:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114e28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e2b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e2e:	83 ec 08             	sub    $0x8,%esp
f0114e31:	52                   	push   %edx
f0114e32:	50                   	push   %eax
f0114e33:	ff 75 a8             	pushl  -0x58(%ebp)
f0114e36:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0114e3b:	68 a3 04 00 00       	push   $0x4a3
f0114e40:	68 f2 75 13 f0       	push   $0xf01375f2
f0114e45:	e8 74 b5 fe ff       	call   f01003be <_warn>
f0114e4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e4d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114e51:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e55:	74 04                	je     f0114e5b <test_allocate_chunk+0x3b2>
f0114e57:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114e5b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114e5f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e66:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e69:	c1 e0 05             	shl    $0x5,%eax
f0114e6c:	83 ec 08             	sub    $0x8,%esp
f0114e6f:	6a 03                	push   $0x3
f0114e71:	6a 00                	push   $0x0
f0114e73:	6a 00                	push   $0x0
f0114e75:	68 07 0e 00 00       	push   $0xe07
f0114e7a:	68 03 0e 00 00       	push   $0xe03
f0114e7f:	6a 01                	push   $0x1
f0114e81:	50                   	push   %eax
f0114e82:	6a 00                	push   $0x0
f0114e84:	6a 00                	push   $0x0
f0114e86:	ff 75 cc             	pushl  -0x34(%ebp)
f0114e89:	e8 a6 20 00 00       	call   f0116f34 <CCP>
f0114e8e:	83 c4 30             	add    $0x30,%esp
f0114e91:	85 c0                	test   %eax,%eax
f0114e93:	75 25                	jne    f0114eba <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e95:	83 ec 04             	sub    $0x4,%esp
f0114e98:	68 dc 8b 13 f0       	push   $0xf0138bdc
f0114e9d:	68 ac 04 00 00       	push   $0x4ac
f0114ea2:	68 f2 75 13 f0       	push   $0xf01375f2
f0114ea7:	e8 12 b5 fe ff       	call   f01003be <_warn>
f0114eac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114eaf:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114eb3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114eba:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ebe:	74 04                	je     f0114ec4 <test_allocate_chunk+0x41b>
f0114ec0:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114ec4:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114ec8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114ecc:	74 5a                	je     f0114f28 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114ece:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ed1:	01 c0                	add    %eax,%eax
f0114ed3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114ed6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ed9:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114edc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114edf:	01 c0                	add    %eax,%eax
f0114ee1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114ee4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ee7:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114eea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114eed:	8a 00                	mov    (%eax),%al
f0114eef:	3c 4b                	cmp    $0x4b,%al
f0114ef1:	75 09                	jne    f0114efc <test_allocate_chunk+0x453>
f0114ef3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ef6:	8a 00                	mov    (%eax),%al
f0114ef8:	3c 4d                	cmp    $0x4d,%al
f0114efa:	74 1e                	je     f0114f1a <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114efc:	83 ec 04             	sub    $0x4,%esp
f0114eff:	68 28 8c 13 f0       	push   $0xf0138c28
f0114f04:	68 ba 04 00 00       	push   $0x4ba
f0114f09:	68 f2 75 13 f0       	push   $0xf01375f2
f0114f0e:	e8 ab b4 fe ff       	call   f01003be <_warn>
f0114f13:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114f16:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114f1a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f1e:	74 04                	je     f0114f24 <test_allocate_chunk+0x47b>
f0114f20:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114f24:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114f28:	83 ec 0c             	sub    $0xc,%esp
f0114f2b:	68 7f 7f 13 f0       	push   $0xf0137f7f
f0114f30:	e8 fc be fe ff       	call   f0100e31 <cprintf>
f0114f35:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114f38:	83 ec 0c             	sub    $0xc,%esp
f0114f3b:	68 00 8d 13 f0       	push   $0xf0138d00
f0114f40:	e8 ec be fe ff       	call   f0100e31 <cprintf>
f0114f45:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114f48:	e8 79 7a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114f4d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114f50:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f53:	c1 e0 06             	shl    $0x6,%eax
f0114f56:	89 c2                	mov    %eax,%edx
f0114f58:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f5b:	c1 e0 05             	shl    $0x5,%eax
f0114f5e:	6a 00                	push   $0x0
f0114f60:	52                   	push   %edx
f0114f61:	50                   	push   %eax
f0114f62:	ff 75 cc             	pushl  -0x34(%ebp)
f0114f65:	e8 71 3c ff ff       	call   f0108bdb <allocate_chunk>
f0114f6a:	83 c4 10             	add    $0x10,%esp
f0114f6d:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114f70:	e8 51 7a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114f75:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114f78:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114f7c:	75 36                	jne    f0114fb4 <test_allocate_chunk+0x50b>
f0114f7e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f81:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f84:	89 c1                	mov    %eax,%ecx
f0114f86:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f89:	c1 e0 06             	shl    $0x6,%eax
f0114f8c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f8f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114f96:	99                   	cltd   
f0114f97:	f7 ff                	idiv   %edi
f0114f99:	89 c3                	mov    %eax,%ebx
f0114f9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f9e:	c1 e0 06             	shl    $0x6,%eax
f0114fa1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114fa4:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114fab:	99                   	cltd   
f0114fac:	f7 fe                	idiv   %esi
f0114fae:	01 d8                	add    %ebx,%eax
f0114fb0:	39 c1                	cmp    %eax,%ecx
f0114fb2:	74 54                	je     f0115008 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114fb4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114fb7:	c1 e0 06             	shl    $0x6,%eax
f0114fba:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114fbd:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114fc4:	99                   	cltd   
f0114fc5:	f7 fb                	idiv   %ebx
f0114fc7:	89 c1                	mov    %eax,%ecx
f0114fc9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114fcc:	c1 e0 06             	shl    $0x6,%eax
f0114fcf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114fd2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114fd9:	99                   	cltd   
f0114fda:	f7 ff                	idiv   %edi
f0114fdc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114fdf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114fe2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114fe5:	83 ec 08             	sub    $0x8,%esp
f0114fe8:	52                   	push   %edx
f0114fe9:	50                   	push   %eax
f0114fea:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114fed:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0114ff2:	68 d0 04 00 00       	push   $0x4d0
f0114ff7:	68 f2 75 13 f0       	push   $0xf01375f2
f0114ffc:	e8 bd b3 fe ff       	call   f01003be <_warn>
f0115001:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115004:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0115008:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011500c:	74 04                	je     f0115012 <test_allocate_chunk+0x569>
f011500e:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0115012:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0115016:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011501d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115020:	c1 e0 06             	shl    $0x6,%eax
f0115023:	89 c2                	mov    %eax,%edx
f0115025:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115028:	c1 e0 05             	shl    $0x5,%eax
f011502b:	83 ec 08             	sub    $0x8,%esp
f011502e:	6a 03                	push   $0x3
f0115030:	6a 00                	push   $0x0
f0115032:	6a 00                	push   $0x0
f0115034:	68 07 0e 00 00       	push   $0xe07
f0115039:	6a 01                	push   $0x1
f011503b:	6a 01                	push   $0x1
f011503d:	52                   	push   %edx
f011503e:	50                   	push   %eax
f011503f:	6a 00                	push   $0x0
f0115041:	ff 75 cc             	pushl  -0x34(%ebp)
f0115044:	e8 eb 1e 00 00       	call   f0116f34 <CCP>
f0115049:	83 c4 30             	add    $0x30,%esp
f011504c:	85 c0                	test   %eax,%eax
f011504e:	75 25                	jne    f0115075 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115050:	83 ec 04             	sub    $0x4,%esp
f0115053:	68 dc 8b 13 f0       	push   $0xf0138bdc
f0115058:	68 d9 04 00 00       	push   $0x4d9
f011505d:	68 f2 75 13 f0       	push   $0xf01375f2
f0115062:	e8 57 b3 fe ff       	call   f01003be <_warn>
f0115067:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011506a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011506e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0115075:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115079:	74 04                	je     f011507f <test_allocate_chunk+0x5d6>
f011507b:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011507f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0115083:	83 ec 0c             	sub    $0xc,%esp
f0115086:	68 e2 7f 13 f0       	push   $0xf0137fe2
f011508b:	e8 a1 bd fe ff       	call   f0100e31 <cprintf>
f0115090:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0115093:	83 ec 0c             	sub    $0xc,%esp
f0115096:	68 40 8d 13 f0       	push   $0xf0138d40
f011509b:	e8 91 bd fe ff       	call   f0100e31 <cprintf>
f01150a0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01150a3:	e8 1e 79 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01150a8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01150ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150ae:	c1 e0 06             	shl    $0x6,%eax
f01150b1:	68 06 0e 00 00       	push   $0xe06
f01150b6:	50                   	push   %eax
f01150b7:	68 00 00 00 80       	push   $0x80000000
f01150bc:	ff 75 cc             	pushl  -0x34(%ebp)
f01150bf:	e8 17 3b ff ff       	call   f0108bdb <allocate_chunk>
f01150c4:	83 c4 10             	add    $0x10,%esp
f01150c7:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01150ca:	e8 f7 78 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01150cf:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01150d2:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01150d6:	75 36                	jne    f011510e <test_allocate_chunk+0x665>
f01150d8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150db:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150de:	89 c1                	mov    %eax,%ecx
f01150e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150e3:	c1 e0 06             	shl    $0x6,%eax
f01150e6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01150e9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01150f0:	99                   	cltd   
f01150f1:	f7 fb                	idiv   %ebx
f01150f3:	89 c3                	mov    %eax,%ebx
f01150f5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150f8:	c1 e0 06             	shl    $0x6,%eax
f01150fb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01150fe:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115105:	99                   	cltd   
f0115106:	f7 fe                	idiv   %esi
f0115108:	01 d8                	add    %ebx,%eax
f011510a:	39 c1                	cmp    %eax,%ecx
f011510c:	74 54                	je     f0115162 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f011510e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115111:	c1 e0 06             	shl    $0x6,%eax
f0115114:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115117:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011511e:	99                   	cltd   
f011511f:	f7 ff                	idiv   %edi
f0115121:	89 c1                	mov    %eax,%ecx
f0115123:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115126:	c1 e0 06             	shl    $0x6,%eax
f0115129:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011512c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115133:	99                   	cltd   
f0115134:	f7 fb                	idiv   %ebx
f0115136:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0115139:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011513c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011513f:	83 ec 08             	sub    $0x8,%esp
f0115142:	52                   	push   %edx
f0115143:	50                   	push   %eax
f0115144:	ff 75 9c             	pushl  -0x64(%ebp)
f0115147:	68 a0 8c 13 f0       	push   $0xf0138ca0
f011514c:	68 ef 04 00 00       	push   $0x4ef
f0115151:	68 f2 75 13 f0       	push   $0xf01375f2
f0115156:	e8 63 b2 fe ff       	call   f01003be <_warn>
f011515b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011515e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0115162:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115166:	74 04                	je     f011516c <test_allocate_chunk+0x6c3>
f0115168:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011516c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0115170:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115177:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011517a:	c1 e0 06             	shl    $0x6,%eax
f011517d:	83 ec 08             	sub    $0x8,%esp
f0115180:	6a 03                	push   $0x3
f0115182:	6a 00                	push   $0x0
f0115184:	6a 00                	push   $0x0
f0115186:	68 07 0e 00 00       	push   $0xe07
f011518b:	68 07 0e 00 00       	push   $0xe07
f0115190:	6a 01                	push   $0x1
f0115192:	50                   	push   %eax
f0115193:	68 00 00 00 80       	push   $0x80000000
f0115198:	6a 00                	push   $0x0
f011519a:	ff 75 cc             	pushl  -0x34(%ebp)
f011519d:	e8 92 1d 00 00       	call   f0116f34 <CCP>
f01151a2:	83 c4 30             	add    $0x30,%esp
f01151a5:	85 c0                	test   %eax,%eax
f01151a7:	75 25                	jne    f01151ce <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01151a9:	83 ec 04             	sub    $0x4,%esp
f01151ac:	68 dc 8b 13 f0       	push   $0xf0138bdc
f01151b1:	68 f8 04 00 00       	push   $0x4f8
f01151b6:	68 f2 75 13 f0       	push   $0xf01375f2
f01151bb:	e8 fe b1 fe ff       	call   f01003be <_warn>
f01151c0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01151c3:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01151c7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f01151ce:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01151d2:	74 04                	je     f01151d8 <test_allocate_chunk+0x72f>
f01151d4:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01151d8:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f01151dc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01151e0:	74 6f                	je     f0115251 <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01151e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01151e5:	01 c0                	add    %eax,%eax
f01151e7:	05 00 00 00 80       	add    $0x80000000,%eax
f01151ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01151ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01151f2:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f01151f5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01151f8:	89 d0                	mov    %edx,%eax
f01151fa:	c1 e0 02             	shl    $0x2,%eax
f01151fd:	01 d0                	add    %edx,%eax
f01151ff:	01 c0                	add    %eax,%eax
f0115201:	01 d0                	add    %edx,%eax
f0115203:	01 c0                	add    %eax,%eax
f0115205:	05 00 00 00 80       	add    $0x80000000,%eax
f011520a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011520d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115210:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0115213:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115216:	8a 00                	mov    (%eax),%al
f0115218:	3c 4b                	cmp    $0x4b,%al
f011521a:	75 09                	jne    f0115225 <test_allocate_chunk+0x77c>
f011521c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011521f:	8a 00                	mov    (%eax),%al
f0115221:	3c 4d                	cmp    $0x4d,%al
f0115223:	74 1e                	je     f0115243 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0115225:	83 ec 04             	sub    $0x4,%esp
f0115228:	68 28 8c 13 f0       	push   $0xf0138c28
f011522d:	68 06 05 00 00       	push   $0x506
f0115232:	68 f2 75 13 f0       	push   $0xf01375f2
f0115237:	e8 82 b1 fe ff       	call   f01003be <_warn>
f011523c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011523f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0115243:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115247:	74 04                	je     f011524d <test_allocate_chunk+0x7a4>
f0115249:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f011524d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0115251:	83 ec 0c             	sub    $0xc,%esp
f0115254:	68 b4 8a 13 f0       	push   $0xf0138ab4
f0115259:	e8 d3 bb fe ff       	call   f0100e31 <cprintf>
f011525e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0115261:	83 ec 0c             	sub    $0xc,%esp
f0115264:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0115269:	e8 c3 bb fe ff       	call   f0100e31 <cprintf>
f011526e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115271:	e8 50 77 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0115276:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0115279:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011527c:	89 d0                	mov    %edx,%eax
f011527e:	01 c0                	add    %eax,%eax
f0115280:	01 d0                	add    %edx,%eax
f0115282:	01 c0                	add    %eax,%eax
f0115284:	01 d0                	add    %edx,%eax
f0115286:	68 04 0e 00 00       	push   $0xe04
f011528b:	50                   	push   %eax
f011528c:	68 00 fc 3f 40       	push   $0x403ffc00
f0115291:	ff 75 cc             	pushl  -0x34(%ebp)
f0115294:	e8 42 39 ff ff       	call   f0108bdb <allocate_chunk>
f0115299:	83 c4 10             	add    $0x10,%esp
f011529c:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011529f:	e8 22 77 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01152a4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01152a7:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01152ab:	75 0b                	jne    f01152b8 <test_allocate_chunk+0x80f>
f01152ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01152b0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01152b3:	83 f8 05             	cmp    $0x5,%eax
f01152b6:	74 2a                	je     f01152e2 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01152b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01152bb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01152be:	83 ec 08             	sub    $0x8,%esp
f01152c1:	6a 05                	push   $0x5
f01152c3:	50                   	push   %eax
f01152c4:	ff 75 98             	pushl  -0x68(%ebp)
f01152c7:	68 a0 8c 13 f0       	push   $0xf0138ca0
f01152cc:	68 1d 05 00 00       	push   $0x51d
f01152d1:	68 f2 75 13 f0       	push   $0xf01375f2
f01152d6:	e8 e3 b0 fe ff       	call   f01003be <_warn>
f01152db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152de:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01152e2:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01152e6:	74 04                	je     f01152ec <test_allocate_chunk+0x843>
f01152e8:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01152ec:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01152f0:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01152f7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01152fa:	89 d0                	mov    %edx,%eax
f01152fc:	01 c0                	add    %eax,%eax
f01152fe:	01 d0                	add    %edx,%eax
f0115300:	c1 e0 02             	shl    $0x2,%eax
f0115303:	83 ec 08             	sub    $0x8,%esp
f0115306:	6a 03                	push   $0x3
f0115308:	6a 00                	push   $0x0
f011530a:	6a 00                	push   $0x0
f011530c:	68 07 0e 00 00       	push   $0xe07
f0115311:	68 05 0e 00 00       	push   $0xe05
f0115316:	6a 01                	push   $0x1
f0115318:	50                   	push   %eax
f0115319:	68 00 f0 3f 40       	push   $0x403ff000
f011531e:	6a 00                	push   $0x0
f0115320:	ff 75 cc             	pushl  -0x34(%ebp)
f0115323:	e8 0c 1c 00 00       	call   f0116f34 <CCP>
f0115328:	83 c4 30             	add    $0x30,%esp
f011532b:	85 c0                	test   %eax,%eax
f011532d:	75 25                	jne    f0115354 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011532f:	83 ec 04             	sub    $0x4,%esp
f0115332:	68 dc 8b 13 f0       	push   $0xf0138bdc
f0115337:	68 26 05 00 00       	push   $0x526
f011533c:	68 f2 75 13 f0       	push   $0xf01375f2
f0115341:	e8 78 b0 fe ff       	call   f01003be <_warn>
f0115346:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115349:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011534d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115354:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115358:	74 04                	je     f011535e <test_allocate_chunk+0x8b5>
f011535a:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011535e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115362:	83 ec 0c             	sub    $0xc,%esp
f0115365:	68 b3 8d 13 f0       	push   $0xf0138db3
f011536a:	e8 c2 ba fe ff       	call   f0100e31 <cprintf>
f011536f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115372:	83 ec 08             	sub    $0x8,%esp
f0115375:	ff 75 e0             	pushl  -0x20(%ebp)
f0115378:	68 c4 8d 13 f0       	push   $0xf0138dc4
f011537d:	e8 af ba fe ff       	call   f0100e31 <cprintf>
f0115382:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115385:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0115389:	75 10                	jne    f011539b <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f011538b:	83 ec 0c             	sub    $0xc,%esp
f011538e:	68 f8 8d 13 f0       	push   $0xf0138df8
f0115393:	e8 99 ba fe ff       	call   f0100e31 <cprintf>
f0115398:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011539b:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01153a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01153a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153a6:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01153a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01153ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01153b1:	5b                   	pop    %ebx
f01153b2:	5e                   	pop    %esi
f01153b3:	5f                   	pop    %edi
f01153b4:	5d                   	pop    %ebp
f01153b5:	c3                   	ret    

f01153b6 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01153b6:	55                   	push   %ebp
f01153b7:	89 e5                	mov    %esp,%ebp
f01153b9:	57                   	push   %edi
f01153ba:	56                   	push   %esi
f01153bb:	53                   	push   %ebx
f01153bc:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01153c2:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01153c5:	bb f4 7c 13 f0       	mov    $0xf0137cf4,%ebx
f01153ca:	ba 0f 00 00 00       	mov    $0xf,%edx
f01153cf:	89 c7                	mov    %eax,%edi
f01153d1:	89 de                	mov    %ebx,%esi
f01153d3:	89 d1                	mov    %edx,%ecx
f01153d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01153d7:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01153da:	b9 23 00 00 00       	mov    $0x23,%ecx
f01153df:	b0 00                	mov    $0x0,%al
f01153e1:	89 d7                	mov    %edx,%edi
f01153e3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01153e5:	6a 00                	push   $0x0
f01153e7:	6a 0a                	push   $0xa
f01153e9:	6a 14                	push   $0x14
f01153eb:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01153ee:	50                   	push   %eax
f01153ef:	e8 d7 38 ff ff       	call   f0108ccb <env_create>
f01153f4:	83 c4 10             	add    $0x10,%esp
f01153f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01153fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01153fd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115403:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115406:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115409:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011540f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115412:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115415:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115418:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011541f:	75 70 20 
f0115422:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115429:	00 00 00 
f011542c:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011542f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115434:	b8 00 00 00 00       	mov    $0x0,%eax
f0115439:	89 d7                	mov    %edx,%edi
f011543b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011543d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115440:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115443:	83 ec 08             	sub    $0x8,%esp
f0115446:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011544c:	52                   	push   %edx
f011544d:	50                   	push   %eax
f011544e:	e8 53 a0 01 00       	call   f012f4a6 <ltostr>
f0115453:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115456:	83 ec 04             	sub    $0x4,%esp
f0115459:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011545f:	50                   	push   %eax
f0115460:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115466:	50                   	push   %eax
f0115467:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011546d:	50                   	push   %eax
f011546e:	e8 2b a1 01 00       	call   f012f59e <strcconcat>
f0115473:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115476:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011547d:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115484:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011548b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0115492:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115496:	83 ec 0c             	sub    $0xc,%esp
f0115499:	ff 75 d8             	pushl  -0x28(%ebp)
f011549c:	e8 5f 1a 00 00       	call   f0116f00 <ClearUserSpace>
f01154a1:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01154a4:	83 ec 0c             	sub    $0xc,%esp
f01154a7:	68 38 8e 13 f0       	push   $0xf0138e38
f01154ac:	e8 80 b9 fe ff       	call   f0100e31 <cprintf>
f01154b1:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01154b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154b7:	c1 e0 03             	shl    $0x3,%eax
f01154ba:	83 ec 04             	sub    $0x4,%esp
f01154bd:	50                   	push   %eax
f01154be:	6a 00                	push   $0x0
f01154c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01154c3:	e8 47 37 ff ff       	call   f0108c0f <calculate_required_frames>
f01154c8:	83 c4 10             	add    $0x10,%esp
f01154cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01154ce:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01154d2:	74 23                	je     f01154f7 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01154d4:	83 ec 0c             	sub    $0xc,%esp
f01154d7:	6a 03                	push   $0x3
f01154d9:	ff 75 c8             	pushl  -0x38(%ebp)
f01154dc:	68 6c 8e 13 f0       	push   $0xf0138e6c
f01154e1:	68 5f 05 00 00       	push   $0x55f
f01154e6:	68 f2 75 13 f0       	push   $0xf01375f2
f01154eb:	e8 ce ae fe ff       	call   f01003be <_warn>
f01154f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154f3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154f7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154fb:	74 04                	je     f0115501 <test_calculate_required_frames+0x14b>
f01154fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115501:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0115505:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115508:	c1 e0 02             	shl    $0x2,%eax
f011550b:	83 ec 04             	sub    $0x4,%esp
f011550e:	50                   	push   %eax
f011550f:	6a 00                	push   $0x0
f0115511:	ff 75 d8             	pushl  -0x28(%ebp)
f0115514:	e8 f6 36 ff ff       	call   f0108c0f <calculate_required_frames>
f0115519:	83 c4 10             	add    $0x10,%esp
f011551c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011551f:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115526:	74 26                	je     f011554e <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115528:	83 ec 0c             	sub    $0xc,%esp
f011552b:	68 01 04 00 00       	push   $0x401
f0115530:	ff 75 c8             	pushl  -0x38(%ebp)
f0115533:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115538:	68 69 05 00 00       	push   $0x569
f011553d:	68 f2 75 13 f0       	push   $0xf01375f2
f0115542:	e8 77 ae fe ff       	call   f01003be <_warn>
f0115547:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011554a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011554e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115552:	74 04                	je     f0115558 <test_calculate_required_frames+0x1a2>
f0115554:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115558:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011555c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011555f:	c1 e0 0a             	shl    $0xa,%eax
f0115562:	83 ec 04             	sub    $0x4,%esp
f0115565:	50                   	push   %eax
f0115566:	6a 00                	push   $0x0
f0115568:	ff 75 d8             	pushl  -0x28(%ebp)
f011556b:	e8 9f 36 ff ff       	call   f0108c0f <calculate_required_frames>
f0115570:	83 c4 10             	add    $0x10,%esp
f0115573:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115576:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115579:	c1 e0 0a             	shl    $0xa,%eax
f011557c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011557f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115586:	99                   	cltd   
f0115587:	f7 fb                	idiv   %ebx
f0115589:	89 c1                	mov    %eax,%ecx
f011558b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011558e:	c1 e0 0a             	shl    $0xa,%eax
f0115591:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115594:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011559b:	99                   	cltd   
f011559c:	f7 fe                	idiv   %esi
f011559e:	01 c8                	add    %ecx,%eax
f01155a0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01155a3:	74 4c                	je     f01155f1 <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01155a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155a8:	c1 e0 0a             	shl    $0xa,%eax
f01155ab:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01155ae:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01155b5:	99                   	cltd   
f01155b6:	f7 fb                	idiv   %ebx
f01155b8:	89 c1                	mov    %eax,%ecx
f01155ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155bd:	c1 e0 0a             	shl    $0xa,%eax
f01155c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01155c3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01155ca:	99                   	cltd   
f01155cb:	f7 fe                	idiv   %esi
f01155cd:	01 c8                	add    %ecx,%eax
f01155cf:	83 ec 0c             	sub    $0xc,%esp
f01155d2:	50                   	push   %eax
f01155d3:	ff 75 c8             	pushl  -0x38(%ebp)
f01155d6:	68 6c 8e 13 f0       	push   $0xf0138e6c
f01155db:	68 73 05 00 00       	push   $0x573
f01155e0:	68 f2 75 13 f0       	push   $0xf01375f2
f01155e5:	e8 d4 ad fe ff       	call   f01003be <_warn>
f01155ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155f5:	74 04                	je     f01155fb <test_calculate_required_frames+0x245>
f01155f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01155ff:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115602:	89 d0                	mov    %edx,%eax
f0115604:	01 c0                	add    %eax,%eax
f0115606:	01 d0                	add    %edx,%eax
f0115608:	01 c0                	add    %eax,%eax
f011560a:	83 ec 04             	sub    $0x4,%esp
f011560d:	50                   	push   %eax
f011560e:	68 00 10 00 00       	push   $0x1000
f0115613:	ff 75 d8             	pushl  -0x28(%ebp)
f0115616:	e8 f4 35 ff ff       	call   f0108c0f <calculate_required_frames>
f011561b:	83 c4 10             	add    $0x10,%esp
f011561e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115621:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115625:	74 23                	je     f011564a <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115627:	83 ec 0c             	sub    $0xc,%esp
f011562a:	6a 03                	push   $0x3
f011562c:	ff 75 c8             	pushl  -0x38(%ebp)
f011562f:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115634:	68 7f 05 00 00       	push   $0x57f
f0115639:	68 f2 75 13 f0       	push   $0xf01375f2
f011563e:	e8 7b ad fe ff       	call   f01003be <_warn>
f0115643:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115646:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011564a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011564e:	74 04                	je     f0115654 <test_calculate_required_frames+0x29e>
f0115650:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115654:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115658:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011565b:	89 c2                	mov    %eax,%edx
f011565d:	01 d2                	add    %edx,%edx
f011565f:	01 d0                	add    %edx,%eax
f0115661:	83 ec 04             	sub    $0x4,%esp
f0115664:	50                   	push   %eax
f0115665:	68 00 18 00 00       	push   $0x1800
f011566a:	ff 75 d8             	pushl  -0x28(%ebp)
f011566d:	e8 9d 35 ff ff       	call   f0108c0f <calculate_required_frames>
f0115672:	83 c4 10             	add    $0x10,%esp
f0115675:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115678:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011567c:	74 23                	je     f01156a1 <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011567e:	83 ec 0c             	sub    $0xc,%esp
f0115681:	6a 03                	push   $0x3
f0115683:	ff 75 c8             	pushl  -0x38(%ebp)
f0115686:	68 6c 8e 13 f0       	push   $0xf0138e6c
f011568b:	68 89 05 00 00       	push   $0x589
f0115690:	68 f2 75 13 f0       	push   $0xf01375f2
f0115695:	e8 24 ad fe ff       	call   f01003be <_warn>
f011569a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011569d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156a1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156a5:	74 04                	je     f01156ab <test_calculate_required_frames+0x2f5>
f01156a7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156ab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01156af:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01156b2:	89 d0                	mov    %edx,%eax
f01156b4:	c1 e0 02             	shl    $0x2,%eax
f01156b7:	01 d0                	add    %edx,%eax
f01156b9:	01 c0                	add    %eax,%eax
f01156bb:	83 ec 04             	sub    $0x4,%esp
f01156be:	50                   	push   %eax
f01156bf:	68 00 00 40 00       	push   $0x400000
f01156c4:	ff 75 d8             	pushl  -0x28(%ebp)
f01156c7:	e8 43 35 ff ff       	call   f0108c0f <calculate_required_frames>
f01156cc:	83 c4 10             	add    $0x10,%esp
f01156cf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01156d2:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01156d9:	74 26                	je     f0115701 <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01156db:	83 ec 0c             	sub    $0xc,%esp
f01156de:	68 03 0a 00 00       	push   $0xa03
f01156e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01156e6:	68 6c 8e 13 f0       	push   $0xf0138e6c
f01156eb:	68 93 05 00 00       	push   $0x593
f01156f0:	68 f2 75 13 f0       	push   $0xf01375f2
f01156f5:	e8 c4 ac fe ff       	call   f01003be <_warn>
f01156fa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115701:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115705:	74 04                	je     f011570b <test_calculate_required_frames+0x355>
f0115707:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011570b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011570f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115712:	01 c0                	add    %eax,%eax
f0115714:	83 ec 04             	sub    $0x4,%esp
f0115717:	50                   	push   %eax
f0115718:	68 00 00 70 00       	push   $0x700000
f011571d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115720:	e8 ea 34 ff ff       	call   f0108c0f <calculate_required_frames>
f0115725:	83 c4 10             	add    $0x10,%esp
f0115728:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011572b:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115732:	74 26                	je     f011575a <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115734:	83 ec 0c             	sub    $0xc,%esp
f0115737:	68 02 02 00 00       	push   $0x202
f011573c:	ff 75 c8             	pushl  -0x38(%ebp)
f011573f:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115744:	68 9f 05 00 00       	push   $0x59f
f0115749:	68 f2 75 13 f0       	push   $0xf01375f2
f011574e:	e8 6b ac fe ff       	call   f01003be <_warn>
f0115753:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115756:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011575a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011575e:	74 04                	je     f0115764 <test_calculate_required_frames+0x3ae>
f0115760:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115764:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115768:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011576b:	83 ec 04             	sub    $0x4,%esp
f011576e:	50                   	push   %eax
f011576f:	68 ff ff 3f 00       	push   $0x3fffff
f0115774:	ff 75 d8             	pushl  -0x28(%ebp)
f0115777:	e8 93 34 ff ff       	call   f0108c0f <calculate_required_frames>
f011577c:	83 c4 10             	add    $0x10,%esp
f011577f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115782:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115786:	74 23                	je     f01157ab <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115788:	83 ec 0c             	sub    $0xc,%esp
f011578b:	6a 04                	push   $0x4
f011578d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115790:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115795:	68 a9 05 00 00       	push   $0x5a9
f011579a:	68 f2 75 13 f0       	push   $0xf01375f2
f011579f:	e8 1a ac fe ff       	call   f01003be <_warn>
f01157a4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157a7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01157ab:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157af:	74 04                	je     f01157b5 <test_calculate_required_frames+0x3ff>
f01157b1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01157b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01157b9:	83 ec 0c             	sub    $0xc,%esp
f01157bc:	68 a5 89 13 f0       	push   $0xf01389a5
f01157c1:	e8 6b b6 fe ff       	call   f0100e31 <cprintf>
f01157c6:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01157c9:	83 ec 0c             	sub    $0xc,%esp
f01157cc:	68 c4 8e 13 f0       	push   $0xf0138ec4
f01157d1:	e8 5b b6 fe ff       	call   f0100e31 <cprintf>
f01157d6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01157d9:	83 ec 04             	sub    $0x4,%esp
f01157dc:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01157e2:	50                   	push   %eax
f01157e3:	68 5e 7d 13 f0       	push   $0xf0137d5e
f01157e8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157ee:	50                   	push   %eax
f01157ef:	e8 aa 9d 01 00       	call   f012f59e <strcconcat>
f01157f4:	83 c4 10             	add    $0x10,%esp
f01157f7:	83 ec 0c             	sub    $0xc,%esp
f01157fa:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115800:	50                   	push   %eax
f0115801:	e8 bd c3 fe ff       	call   f0101bc3 <execute_command>
f0115806:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115809:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011580c:	c1 e0 03             	shl    $0x3,%eax
f011580f:	83 ec 04             	sub    $0x4,%esp
f0115812:	50                   	push   %eax
f0115813:	6a 00                	push   $0x0
f0115815:	ff 75 d8             	pushl  -0x28(%ebp)
f0115818:	e8 f2 33 ff ff       	call   f0108c0f <calculate_required_frames>
f011581d:	83 c4 10             	add    $0x10,%esp
f0115820:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115823:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011582a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011582d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115830:	74 24                	je     f0115856 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115832:	83 ec 0c             	sub    $0xc,%esp
f0115835:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115838:	ff 75 c8             	pushl  -0x38(%ebp)
f011583b:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115840:	68 bd 05 00 00       	push   $0x5bd
f0115845:	68 f2 75 13 f0       	push   $0xf01375f2
f011584a:	e8 6f ab fe ff       	call   f01003be <_warn>
f011584f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115852:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115856:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011585a:	74 04                	je     f0115860 <test_calculate_required_frames+0x4aa>
f011585c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115860:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115864:	83 ec 04             	sub    $0x4,%esp
f0115867:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011586d:	50                   	push   %eax
f011586e:	68 6b 7d 13 f0       	push   $0xf0137d6b
f0115873:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115879:	50                   	push   %eax
f011587a:	e8 1f 9d 01 00       	call   f012f59e <strcconcat>
f011587f:	83 c4 10             	add    $0x10,%esp
f0115882:	83 ec 0c             	sub    $0xc,%esp
f0115885:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011588b:	50                   	push   %eax
f011588c:	e8 32 c3 fe ff       	call   f0101bc3 <execute_command>
f0115891:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115894:	83 ec 04             	sub    $0x4,%esp
f0115897:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011589d:	50                   	push   %eax
f011589e:	68 f8 8e 13 f0       	push   $0xf0138ef8
f01158a3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158a9:	50                   	push   %eax
f01158aa:	e8 ef 9c 01 00       	call   f012f59e <strcconcat>
f01158af:	83 c4 10             	add    $0x10,%esp
f01158b2:	83 ec 0c             	sub    $0xc,%esp
f01158b5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01158bb:	50                   	push   %eax
f01158bc:	e8 02 c3 fe ff       	call   f0101bc3 <execute_command>
f01158c1:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01158c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01158c7:	c1 e0 03             	shl    $0x3,%eax
f01158ca:	83 ec 04             	sub    $0x4,%esp
f01158cd:	50                   	push   %eax
f01158ce:	6a 00                	push   $0x0
f01158d0:	ff 75 d8             	pushl  -0x28(%ebp)
f01158d3:	e8 37 33 ff ff       	call   f0108c0f <calculate_required_frames>
f01158d8:	83 c4 10             	add    $0x10,%esp
f01158db:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01158de:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01158e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01158e8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158eb:	74 24                	je     f0115911 <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01158ed:	83 ec 0c             	sub    $0xc,%esp
f01158f0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158f3:	ff 75 c8             	pushl  -0x38(%ebp)
f01158f6:	68 6c 8e 13 f0       	push   $0xf0138e6c
f01158fb:	68 cb 05 00 00       	push   $0x5cb
f0115900:	68 f2 75 13 f0       	push   $0xf01375f2
f0115905:	e8 b4 aa fe ff       	call   f01003be <_warn>
f011590a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011590d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115911:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115915:	74 04                	je     f011591b <test_calculate_required_frames+0x565>
f0115917:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011591b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011591f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115922:	c1 e0 0a             	shl    $0xa,%eax
f0115925:	83 ec 04             	sub    $0x4,%esp
f0115928:	50                   	push   %eax
f0115929:	6a 00                	push   $0x0
f011592b:	ff 75 d8             	pushl  -0x28(%ebp)
f011592e:	e8 dc 32 ff ff       	call   f0108c0f <calculate_required_frames>
f0115933:	83 c4 10             	add    $0x10,%esp
f0115936:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115939:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011593c:	c1 e0 0a             	shl    $0xa,%eax
f011593f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115942:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115949:	99                   	cltd   
f011594a:	f7 fb                	idiv   %ebx
f011594c:	89 c1                	mov    %eax,%ecx
f011594e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115951:	c1 e0 0a             	shl    $0xa,%eax
f0115954:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115957:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011595e:	99                   	cltd   
f011595f:	f7 fe                	idiv   %esi
f0115961:	01 c8                	add    %ecx,%eax
f0115963:	83 e8 05             	sub    $0x5,%eax
f0115966:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115969:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011596c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011596f:	74 24                	je     f0115995 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115971:	83 ec 0c             	sub    $0xc,%esp
f0115974:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115977:	ff 75 c8             	pushl  -0x38(%ebp)
f011597a:	68 6c 8e 13 f0       	push   $0xf0138e6c
f011597f:	68 d6 05 00 00       	push   $0x5d6
f0115984:	68 f2 75 13 f0       	push   $0xf01375f2
f0115989:	e8 30 aa fe ff       	call   f01003be <_warn>
f011598e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115991:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115995:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115999:	74 04                	je     f011599f <test_calculate_required_frames+0x5e9>
f011599b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011599f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01159a3:	83 ec 04             	sub    $0x4,%esp
f01159a6:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01159ac:	50                   	push   %eax
f01159ad:	68 04 8f 13 f0       	push   $0xf0138f04
f01159b2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01159b8:	50                   	push   %eax
f01159b9:	e8 e0 9b 01 00       	call   f012f59e <strcconcat>
f01159be:	83 c4 10             	add    $0x10,%esp
f01159c1:	83 ec 0c             	sub    $0xc,%esp
f01159c4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01159ca:	50                   	push   %eax
f01159cb:	e8 f3 c1 fe ff       	call   f0101bc3 <execute_command>
f01159d0:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01159d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01159d6:	89 c2                	mov    %eax,%edx
f01159d8:	01 d2                	add    %edx,%edx
f01159da:	01 d0                	add    %edx,%eax
f01159dc:	83 ec 04             	sub    $0x4,%esp
f01159df:	50                   	push   %eax
f01159e0:	68 00 18 00 00       	push   $0x1800
f01159e5:	ff 75 d8             	pushl  -0x28(%ebp)
f01159e8:	e8 22 32 ff ff       	call   f0108c0f <calculate_required_frames>
f01159ed:	83 c4 10             	add    $0x10,%esp
f01159f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01159f3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01159fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01159fd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115a00:	74 24                	je     f0115a26 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115a02:	83 ec 0c             	sub    $0xc,%esp
f0115a05:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115a08:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a0b:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115a10:	68 e5 05 00 00       	push   $0x5e5
f0115a15:	68 f2 75 13 f0       	push   $0xf01375f2
f0115a1a:	e8 9f a9 fe ff       	call   f01003be <_warn>
f0115a1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a2a:	74 04                	je     f0115a30 <test_calculate_required_frames+0x67a>
f0115a2c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115a34:	83 ec 04             	sub    $0x4,%esp
f0115a37:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115a3d:	50                   	push   %eax
f0115a3e:	68 c4 7f 13 f0       	push   $0xf0137fc4
f0115a43:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a49:	50                   	push   %eax
f0115a4a:	e8 4f 9b 01 00       	call   f012f59e <strcconcat>
f0115a4f:	83 c4 10             	add    $0x10,%esp
f0115a52:	83 ec 0c             	sub    $0xc,%esp
f0115a55:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115a5b:	50                   	push   %eax
f0115a5c:	e8 62 c1 fe ff       	call   f0101bc3 <execute_command>
f0115a61:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115a64:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115a67:	89 d0                	mov    %edx,%eax
f0115a69:	c1 e0 02             	shl    $0x2,%eax
f0115a6c:	01 d0                	add    %edx,%eax
f0115a6e:	01 c0                	add    %eax,%eax
f0115a70:	83 ec 04             	sub    $0x4,%esp
f0115a73:	50                   	push   %eax
f0115a74:	68 00 00 40 00       	push   $0x400000
f0115a79:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a7c:	e8 8e 31 ff ff       	call   f0108c0f <calculate_required_frames>
f0115a81:	83 c4 10             	add    $0x10,%esp
f0115a84:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115a87:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115a8e:	74 26                	je     f0115ab6 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115a90:	83 ec 0c             	sub    $0xc,%esp
f0115a93:	68 03 0a 00 00       	push   $0xa03
f0115a98:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a9b:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115aa0:	68 f1 05 00 00       	push   $0x5f1
f0115aa5:	68 f2 75 13 f0       	push   $0xf01375f2
f0115aaa:	e8 0f a9 fe ff       	call   f01003be <_warn>
f0115aaf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ab2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ab6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115aba:	74 04                	je     f0115ac0 <test_calculate_required_frames+0x70a>
f0115abc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ac0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115ac4:	83 ec 04             	sub    $0x4,%esp
f0115ac7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115acd:	50                   	push   %eax
f0115ace:	68 ce 7f 13 f0       	push   $0xf0137fce
f0115ad3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ad9:	50                   	push   %eax
f0115ada:	e8 bf 9a 01 00       	call   f012f59e <strcconcat>
f0115adf:	83 c4 10             	add    $0x10,%esp
f0115ae2:	83 ec 0c             	sub    $0xc,%esp
f0115ae5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115aeb:	50                   	push   %eax
f0115aec:	e8 d2 c0 fe ff       	call   f0101bc3 <execute_command>
f0115af1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115af4:	83 ec 04             	sub    $0x4,%esp
f0115af7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115afd:	50                   	push   %eax
f0115afe:	68 0c 8f 13 f0       	push   $0xf0138f0c
f0115b03:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b09:	50                   	push   %eax
f0115b0a:	e8 8f 9a 01 00       	call   f012f59e <strcconcat>
f0115b0f:	83 c4 10             	add    $0x10,%esp
f0115b12:	83 ec 0c             	sub    $0xc,%esp
f0115b15:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115b1b:	50                   	push   %eax
f0115b1c:	e8 a2 c0 fe ff       	call   f0101bc3 <execute_command>
f0115b21:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115b24:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b27:	01 c0                	add    %eax,%eax
f0115b29:	83 ec 04             	sub    $0x4,%esp
f0115b2c:	50                   	push   %eax
f0115b2d:	68 00 00 70 00       	push   $0x700000
f0115b32:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b35:	e8 d5 30 ff ff       	call   f0108c0f <calculate_required_frames>
f0115b3a:	83 c4 10             	add    $0x10,%esp
f0115b3d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115b40:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115b47:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115b4a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115b4d:	74 24                	je     f0115b73 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115b4f:	83 ec 0c             	sub    $0xc,%esp
f0115b52:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115b55:	ff 75 c8             	pushl  -0x38(%ebp)
f0115b58:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115b5d:	68 01 06 00 00       	push   $0x601
f0115b62:	68 f2 75 13 f0       	push   $0xf01375f2
f0115b67:	e8 52 a8 fe ff       	call   f01003be <_warn>
f0115b6c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b6f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b73:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b77:	74 04                	je     f0115b7d <test_calculate_required_frames+0x7c7>
f0115b79:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b7d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115b81:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b84:	83 ec 04             	sub    $0x4,%esp
f0115b87:	50                   	push   %eax
f0115b88:	68 ff ff 3f 00       	push   $0x3fffff
f0115b8d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b90:	e8 7a 30 ff ff       	call   f0108c0f <calculate_required_frames>
f0115b95:	83 c4 10             	add    $0x10,%esp
f0115b98:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115b9b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115ba2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115ba5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ba8:	74 24                	je     f0115bce <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115baa:	83 ec 0c             	sub    $0xc,%esp
f0115bad:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115bb0:	ff 75 c8             	pushl  -0x38(%ebp)
f0115bb3:	68 6c 8e 13 f0       	push   $0xf0138e6c
f0115bb8:	68 0c 06 00 00       	push   $0x60c
f0115bbd:	68 f2 75 13 f0       	push   $0xf01375f2
f0115bc2:	e8 f7 a7 fe ff       	call   f01003be <_warn>
f0115bc7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115bce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bd2:	74 04                	je     f0115bd8 <test_calculate_required_frames+0x822>
f0115bd4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115bd8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115bdc:	83 ec 0c             	sub    $0xc,%esp
f0115bdf:	68 7f 7f 13 f0       	push   $0xf0137f7f
f0115be4:	e8 48 b2 fe ff       	call   f0100e31 <cprintf>
f0115be9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115bec:	83 ec 08             	sub    $0x8,%esp
f0115bef:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115bf2:	68 18 8f 13 f0       	push   $0xf0138f18
f0115bf7:	e8 35 b2 fe ff       	call   f0100e31 <cprintf>
f0115bfc:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115bff:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115c03:	75 10                	jne    f0115c15 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115c05:	83 ec 0c             	sub    $0xc,%esp
f0115c08:	68 58 8f 13 f0       	push   $0xf0138f58
f0115c0d:	e8 1f b2 fe ff       	call   f0100e31 <cprintf>
f0115c12:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115c15:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0115c1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115c1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115c20:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115c23:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115c28:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115c2b:	5b                   	pop    %ebx
f0115c2c:	5e                   	pop    %esi
f0115c2d:	5f                   	pop    %edi
f0115c2e:	5d                   	pop    %ebp
f0115c2f:	c3                   	ret    

f0115c30 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115c30:	55                   	push   %ebp
f0115c31:	89 e5                	mov    %esp,%ebp
f0115c33:	57                   	push   %edi
f0115c34:	56                   	push   %esi
f0115c35:	53                   	push   %ebx
f0115c36:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115c3c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115c3f:	bb f4 7c 13 f0       	mov    $0xf0137cf4,%ebx
f0115c44:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115c49:	89 c7                	mov    %eax,%edi
f0115c4b:	89 de                	mov    %ebx,%esi
f0115c4d:	89 d1                	mov    %edx,%ecx
f0115c4f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115c51:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115c54:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115c59:	b0 00                	mov    $0x0,%al
f0115c5b:	89 d7                	mov    %edx,%edi
f0115c5d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115c5f:	6a 00                	push   $0x0
f0115c61:	6a 0a                	push   $0xa
f0115c63:	6a 14                	push   $0x14
f0115c65:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115c68:	50                   	push   %eax
f0115c69:	e8 5d 30 ff ff       	call   f0108ccb <env_create>
f0115c6e:	83 c4 10             	add    $0x10,%esp
f0115c71:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115c74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115c77:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115c7d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115c80:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115c83:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115c89:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115c8c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115c8f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115c92:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115c99:	75 70 20 
f0115c9c:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115ca3:	00 00 00 
f0115ca6:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115ca9:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115cae:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cb3:	89 d7                	mov    %edx,%edi
f0115cb5:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115cb7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115cba:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115cbd:	83 ec 08             	sub    $0x8,%esp
f0115cc0:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115cc6:	52                   	push   %edx
f0115cc7:	50                   	push   %eax
f0115cc8:	e8 d9 97 01 00       	call   f012f4a6 <ltostr>
f0115ccd:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115cd0:	83 ec 04             	sub    $0x4,%esp
f0115cd3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115cd9:	50                   	push   %eax
f0115cda:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115ce0:	50                   	push   %eax
f0115ce1:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115ce7:	50                   	push   %eax
f0115ce8:	e8 b1 98 01 00       	call   f012f59e <strcconcat>
f0115ced:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115cf0:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115cf7:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115cfe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115d05:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115d09:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d10:	00 00 00 
	uint32 num_tables = 0;
f0115d13:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d1a:	00 00 00 
	ClearUserSpace(proc_directory);
f0115d1d:	83 ec 0c             	sub    $0xc,%esp
f0115d20:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d23:	e8 d8 11 00 00       	call   f0116f00 <ClearUserSpace>
f0115d28:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115d2b:	83 ec 0c             	sub    $0xc,%esp
f0115d2e:	68 38 8e 13 f0       	push   $0xf0138e38
f0115d33:	e8 f9 b0 fe ff       	call   f0100e31 <cprintf>
f0115d38:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115d3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115d3e:	c1 e0 03             	shl    $0x3,%eax
f0115d41:	89 c2                	mov    %eax,%edx
f0115d43:	83 ec 0c             	sub    $0xc,%esp
f0115d46:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d4c:	50                   	push   %eax
f0115d4d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d53:	50                   	push   %eax
f0115d54:	52                   	push   %edx
f0115d55:	6a 00                	push   $0x0
f0115d57:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d5a:	e8 96 2e ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115d5f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d62:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d68:	85 c0                	test   %eax,%eax
f0115d6a:	74 27                	je     f0115d93 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d6c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d72:	83 ec 0c             	sub    $0xc,%esp
f0115d75:	6a 00                	push   $0x0
f0115d77:	50                   	push   %eax
f0115d78:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0115d7d:	68 41 06 00 00       	push   $0x641
f0115d82:	68 f2 75 13 f0       	push   $0xf01375f2
f0115d87:	e8 32 a6 fe ff       	call   f01003be <_warn>
f0115d8c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d8f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d93:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d99:	85 c0                	test   %eax,%eax
f0115d9b:	74 27                	je     f0115dc4 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d9d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115da3:	83 ec 0c             	sub    $0xc,%esp
f0115da6:	6a 00                	push   $0x0
f0115da8:	50                   	push   %eax
f0115da9:	68 04 90 13 f0       	push   $0xf0139004
f0115dae:	68 46 06 00 00       	push   $0x646
f0115db3:	68 f2 75 13 f0       	push   $0xf01375f2
f0115db8:	e8 01 a6 fe ff       	call   f01003be <_warn>
f0115dbd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dc0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115dc4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115dc8:	74 04                	je     f0115dce <test_calculate_allocated_space+0x19e>
f0115dca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115dd2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115dd9:	00 00 00 
		num_pages = 0;
f0115ddc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115de3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115de6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115de9:	c1 e0 02             	shl    $0x2,%eax
f0115dec:	89 c2                	mov    %eax,%edx
f0115dee:	83 ec 0c             	sub    $0xc,%esp
f0115df1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115df7:	50                   	push   %eax
f0115df8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115dfe:	50                   	push   %eax
f0115dff:	52                   	push   %edx
f0115e00:	6a 00                	push   $0x0
f0115e02:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e05:	e8 eb 2d ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115e0a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e0d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e13:	85 c0                	test   %eax,%eax
f0115e15:	74 27                	je     f0115e3e <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e17:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e1d:	83 ec 0c             	sub    $0xc,%esp
f0115e20:	6a 00                	push   $0x0
f0115e22:	50                   	push   %eax
f0115e23:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0115e28:	68 52 06 00 00       	push   $0x652
f0115e2d:	68 f2 75 13 f0       	push   $0xf01375f2
f0115e32:	e8 87 a5 fe ff       	call   f01003be <_warn>
f0115e37:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e3a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e3e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e44:	85 c0                	test   %eax,%eax
f0115e46:	74 27                	je     f0115e6f <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e48:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e4e:	83 ec 0c             	sub    $0xc,%esp
f0115e51:	6a 00                	push   $0x0
f0115e53:	50                   	push   %eax
f0115e54:	68 04 90 13 f0       	push   $0xf0139004
f0115e59:	68 57 06 00 00       	push   $0x657
f0115e5e:	68 f2 75 13 f0       	push   $0xf01375f2
f0115e63:	e8 56 a5 fe ff       	call   f01003be <_warn>
f0115e68:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e73:	74 04                	je     f0115e79 <test_calculate_allocated_space+0x249>
f0115e75:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e79:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115e7d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e84:	00 00 00 
		num_pages = 0;
f0115e87:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e8e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115e91:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e94:	c1 e0 0a             	shl    $0xa,%eax
f0115e97:	89 c2                	mov    %eax,%edx
f0115e99:	83 ec 0c             	sub    $0xc,%esp
f0115e9c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ea2:	50                   	push   %eax
f0115ea3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ea9:	50                   	push   %eax
f0115eaa:	52                   	push   %edx
f0115eab:	6a 00                	push   $0x0
f0115ead:	ff 75 d8             	pushl  -0x28(%ebp)
f0115eb0:	e8 40 2d ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115eb5:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115eb8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ebe:	85 c0                	test   %eax,%eax
f0115ec0:	74 27                	je     f0115ee9 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ec2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ec8:	83 ec 0c             	sub    $0xc,%esp
f0115ecb:	6a 00                	push   $0x0
f0115ecd:	50                   	push   %eax
f0115ece:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0115ed3:	68 63 06 00 00       	push   $0x663
f0115ed8:	68 f2 75 13 f0       	push   $0xf01375f2
f0115edd:	e8 dc a4 fe ff       	call   f01003be <_warn>
f0115ee2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ee5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ee9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eef:	85 c0                	test   %eax,%eax
f0115ef1:	74 27                	je     f0115f1a <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ef3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ef9:	83 ec 0c             	sub    $0xc,%esp
f0115efc:	6a 00                	push   $0x0
f0115efe:	50                   	push   %eax
f0115eff:	68 04 90 13 f0       	push   $0xf0139004
f0115f04:	68 68 06 00 00       	push   $0x668
f0115f09:	68 f2 75 13 f0       	push   $0xf01375f2
f0115f0e:	e8 ab a4 fe ff       	call   f01003be <_warn>
f0115f13:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f16:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f1a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f1e:	74 04                	je     f0115f24 <test_calculate_allocated_space+0x2f4>
f0115f20:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f24:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115f28:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f2f:	00 00 00 
		num_pages = 0;
f0115f32:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f39:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115f3c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115f3f:	89 d0                	mov    %edx,%eax
f0115f41:	01 c0                	add    %eax,%eax
f0115f43:	01 d0                	add    %edx,%eax
f0115f45:	01 c0                	add    %eax,%eax
f0115f47:	05 00 10 00 00       	add    $0x1000,%eax
f0115f4c:	89 c2                	mov    %eax,%edx
f0115f4e:	83 ec 0c             	sub    $0xc,%esp
f0115f51:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f57:	50                   	push   %eax
f0115f58:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f5e:	50                   	push   %eax
f0115f5f:	52                   	push   %edx
f0115f60:	68 00 10 00 00       	push   $0x1000
f0115f65:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f68:	e8 88 2c ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115f6d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f70:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f76:	85 c0                	test   %eax,%eax
f0115f78:	74 27                	je     f0115fa1 <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f80:	83 ec 0c             	sub    $0xc,%esp
f0115f83:	6a 00                	push   $0x0
f0115f85:	50                   	push   %eax
f0115f86:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0115f8b:	68 75 06 00 00       	push   $0x675
f0115f90:	68 f2 75 13 f0       	push   $0xf01375f2
f0115f95:	e8 24 a4 fe ff       	call   f01003be <_warn>
f0115f9a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f9d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115fa1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fa7:	85 c0                	test   %eax,%eax
f0115fa9:	74 27                	je     f0115fd2 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115fab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fb1:	83 ec 0c             	sub    $0xc,%esp
f0115fb4:	6a 00                	push   $0x0
f0115fb6:	50                   	push   %eax
f0115fb7:	68 04 90 13 f0       	push   $0xf0139004
f0115fbc:	68 7a 06 00 00       	push   $0x67a
f0115fc1:	68 f2 75 13 f0       	push   $0xf01375f2
f0115fc6:	e8 f3 a3 fe ff       	call   f01003be <_warn>
f0115fcb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115fd2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fd6:	74 04                	je     f0115fdc <test_calculate_allocated_space+0x3ac>
f0115fd8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115fdc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115fe0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fe7:	00 00 00 
		num_pages = 0;
f0115fea:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ff1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115ff4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ff7:	89 c2                	mov    %eax,%edx
f0115ff9:	01 d2                	add    %edx,%edx
f0115ffb:	01 d0                	add    %edx,%eax
f0115ffd:	05 00 18 00 00       	add    $0x1800,%eax
f0116002:	89 c2                	mov    %eax,%edx
f0116004:	83 ec 0c             	sub    $0xc,%esp
f0116007:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011600d:	50                   	push   %eax
f011600e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116014:	50                   	push   %eax
f0116015:	52                   	push   %edx
f0116016:	68 00 18 00 00       	push   $0x1800
f011601b:	ff 75 d8             	pushl  -0x28(%ebp)
f011601e:	e8 d2 2b ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116023:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116026:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011602c:	85 c0                	test   %eax,%eax
f011602e:	74 27                	je     f0116057 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116030:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116036:	83 ec 0c             	sub    $0xc,%esp
f0116039:	6a 00                	push   $0x0
f011603b:	50                   	push   %eax
f011603c:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116041:	68 86 06 00 00       	push   $0x686
f0116046:	68 f2 75 13 f0       	push   $0xf01375f2
f011604b:	e8 6e a3 fe ff       	call   f01003be <_warn>
f0116050:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116053:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116057:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011605d:	85 c0                	test   %eax,%eax
f011605f:	74 27                	je     f0116088 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116061:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116067:	83 ec 0c             	sub    $0xc,%esp
f011606a:	6a 00                	push   $0x0
f011606c:	50                   	push   %eax
f011606d:	68 04 90 13 f0       	push   $0xf0139004
f0116072:	68 8b 06 00 00       	push   $0x68b
f0116077:	68 f2 75 13 f0       	push   $0xf01375f2
f011607c:	e8 3d a3 fe ff       	call   f01003be <_warn>
f0116081:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116084:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116088:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011608c:	74 04                	je     f0116092 <test_calculate_allocated_space+0x462>
f011608e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116092:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0116096:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011609d:	00 00 00 
		num_pages = 0;
f01160a0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01160a7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01160aa:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01160ad:	89 d0                	mov    %edx,%eax
f01160af:	c1 e0 02             	shl    $0x2,%eax
f01160b2:	01 d0                	add    %edx,%eax
f01160b4:	01 c0                	add    %eax,%eax
f01160b6:	05 00 00 40 00       	add    $0x400000,%eax
f01160bb:	89 c2                	mov    %eax,%edx
f01160bd:	83 ec 0c             	sub    $0xc,%esp
f01160c0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160c6:	50                   	push   %eax
f01160c7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160cd:	50                   	push   %eax
f01160ce:	52                   	push   %edx
f01160cf:	68 00 00 40 00       	push   $0x400000
f01160d4:	ff 75 d8             	pushl  -0x28(%ebp)
f01160d7:	e8 19 2b ff ff       	call   f0108bf5 <calculate_allocated_space>
f01160dc:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01160df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160e5:	85 c0                	test   %eax,%eax
f01160e7:	74 27                	je     f0116110 <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01160e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160ef:	83 ec 0c             	sub    $0xc,%esp
f01160f2:	6a 00                	push   $0x0
f01160f4:	50                   	push   %eax
f01160f5:	68 a4 8f 13 f0       	push   $0xf0138fa4
f01160fa:	68 97 06 00 00       	push   $0x697
f01160ff:	68 f2 75 13 f0       	push   $0xf01375f2
f0116104:	e8 b5 a2 fe ff       	call   f01003be <_warn>
f0116109:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011610c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116110:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116116:	85 c0                	test   %eax,%eax
f0116118:	74 27                	je     f0116141 <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011611a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116120:	83 ec 0c             	sub    $0xc,%esp
f0116123:	6a 00                	push   $0x0
f0116125:	50                   	push   %eax
f0116126:	68 04 90 13 f0       	push   $0xf0139004
f011612b:	68 9c 06 00 00       	push   $0x69c
f0116130:	68 f2 75 13 f0       	push   $0xf01375f2
f0116135:	e8 84 a2 fe ff       	call   f01003be <_warn>
f011613a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011613d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116141:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116145:	74 04                	je     f011614b <test_calculate_allocated_space+0x51b>
f0116147:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011614b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011614f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116156:	00 00 00 
		num_pages = 0;
f0116159:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116160:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0116163:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116166:	05 00 00 38 00       	add    $0x380000,%eax
f011616b:	01 c0                	add    %eax,%eax
f011616d:	89 c2                	mov    %eax,%edx
f011616f:	83 ec 0c             	sub    $0xc,%esp
f0116172:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116178:	50                   	push   %eax
f0116179:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011617f:	50                   	push   %eax
f0116180:	52                   	push   %edx
f0116181:	68 00 00 70 00       	push   $0x700000
f0116186:	ff 75 d8             	pushl  -0x28(%ebp)
f0116189:	e8 67 2a ff ff       	call   f0108bf5 <calculate_allocated_space>
f011618e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116191:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116197:	85 c0                	test   %eax,%eax
f0116199:	74 27                	je     f01161c2 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011619b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161a1:	83 ec 0c             	sub    $0xc,%esp
f01161a4:	6a 00                	push   $0x0
f01161a6:	50                   	push   %eax
f01161a7:	68 a4 8f 13 f0       	push   $0xf0138fa4
f01161ac:	68 a9 06 00 00       	push   $0x6a9
f01161b1:	68 f2 75 13 f0       	push   $0xf01375f2
f01161b6:	e8 03 a2 fe ff       	call   f01003be <_warn>
f01161bb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161be:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01161c2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161c8:	85 c0                	test   %eax,%eax
f01161ca:	74 27                	je     f01161f3 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01161cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161d2:	83 ec 0c             	sub    $0xc,%esp
f01161d5:	6a 00                	push   $0x0
f01161d7:	50                   	push   %eax
f01161d8:	68 04 90 13 f0       	push   $0xf0139004
f01161dd:	68 ae 06 00 00       	push   $0x6ae
f01161e2:	68 f2 75 13 f0       	push   $0xf01375f2
f01161e7:	e8 d2 a1 fe ff       	call   f01003be <_warn>
f01161ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01161f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161f7:	74 04                	je     f01161fd <test_calculate_allocated_space+0x5cd>
f01161f9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01161fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0116201:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116208:	00 00 00 
		num_pages = 0;
f011620b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116212:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116215:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116218:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011621d:	89 c2                	mov    %eax,%edx
f011621f:	83 ec 0c             	sub    $0xc,%esp
f0116222:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116228:	50                   	push   %eax
f0116229:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011622f:	50                   	push   %eax
f0116230:	52                   	push   %edx
f0116231:	68 ff ff 3f 00       	push   $0x3fffff
f0116236:	ff 75 d8             	pushl  -0x28(%ebp)
f0116239:	e8 b7 29 ff ff       	call   f0108bf5 <calculate_allocated_space>
f011623e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116241:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116247:	85 c0                	test   %eax,%eax
f0116249:	74 27                	je     f0116272 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011624b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116251:	83 ec 0c             	sub    $0xc,%esp
f0116254:	6a 00                	push   $0x0
f0116256:	50                   	push   %eax
f0116257:	68 a4 8f 13 f0       	push   $0xf0138fa4
f011625c:	68 ba 06 00 00       	push   $0x6ba
f0116261:	68 f2 75 13 f0       	push   $0xf01375f2
f0116266:	e8 53 a1 fe ff       	call   f01003be <_warn>
f011626b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011626e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116272:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116278:	85 c0                	test   %eax,%eax
f011627a:	74 27                	je     f01162a3 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011627c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116282:	83 ec 0c             	sub    $0xc,%esp
f0116285:	6a 00                	push   $0x0
f0116287:	50                   	push   %eax
f0116288:	68 04 90 13 f0       	push   $0xf0139004
f011628d:	68 bf 06 00 00       	push   $0x6bf
f0116292:	68 f2 75 13 f0       	push   $0xf01375f2
f0116297:	e8 22 a1 fe ff       	call   f01003be <_warn>
f011629c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011629f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01162a3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162a7:	74 04                	je     f01162ad <test_calculate_allocated_space+0x67d>
f01162a9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01162ad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01162b1:	83 ec 0c             	sub    $0xc,%esp
f01162b4:	68 a5 89 13 f0       	push   $0xf01389a5
f01162b9:	e8 73 ab fe ff       	call   f0100e31 <cprintf>
f01162be:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01162c1:	83 ec 0c             	sub    $0xc,%esp
f01162c4:	68 c4 8e 13 f0       	push   $0xf0138ec4
f01162c9:	e8 63 ab fe ff       	call   f0100e31 <cprintf>
f01162ce:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01162d1:	83 ec 04             	sub    $0x4,%esp
f01162d4:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01162da:	50                   	push   %eax
f01162db:	68 5e 7d 13 f0       	push   $0xf0137d5e
f01162e0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01162e6:	50                   	push   %eax
f01162e7:	e8 b2 92 01 00       	call   f012f59e <strcconcat>
f01162ec:	83 c4 10             	add    $0x10,%esp
f01162ef:	83 ec 0c             	sub    $0xc,%esp
f01162f2:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01162f8:	50                   	push   %eax
f01162f9:	e8 c5 b8 fe ff       	call   f0101bc3 <execute_command>
f01162fe:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0116301:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116308:	00 00 00 
		num_pages = 0;
f011630b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116312:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0116315:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116318:	c1 e0 03             	shl    $0x3,%eax
f011631b:	89 c2                	mov    %eax,%edx
f011631d:	83 ec 0c             	sub    $0xc,%esp
f0116320:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116326:	50                   	push   %eax
f0116327:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011632d:	50                   	push   %eax
f011632e:	52                   	push   %edx
f011632f:	6a 00                	push   $0x0
f0116331:	ff 75 d8             	pushl  -0x28(%ebp)
f0116334:	e8 bc 28 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116339:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011633c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0116343:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011634a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116350:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116353:	74 28                	je     f011637d <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116355:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011635b:	83 ec 0c             	sub    $0xc,%esp
f011635e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116361:	50                   	push   %eax
f0116362:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116367:	68 d6 06 00 00       	push   $0x6d6
f011636c:	68 f2 75 13 f0       	push   $0xf01375f2
f0116371:	e8 48 a0 fe ff       	call   f01003be <_warn>
f0116376:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116379:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011637d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116383:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116386:	74 28                	je     f01163b0 <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116388:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011638e:	83 ec 0c             	sub    $0xc,%esp
f0116391:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116394:	50                   	push   %eax
f0116395:	68 04 90 13 f0       	push   $0xf0139004
f011639a:	68 db 06 00 00       	push   $0x6db
f011639f:	68 f2 75 13 f0       	push   $0xf01375f2
f01163a4:	e8 15 a0 fe ff       	call   f01003be <_warn>
f01163a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01163b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163b4:	74 04                	je     f01163ba <test_calculate_allocated_space+0x78a>
f01163b6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01163ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01163be:	83 ec 04             	sub    $0x4,%esp
f01163c1:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163c7:	50                   	push   %eax
f01163c8:	68 6b 7d 13 f0       	push   $0xf0137d6b
f01163cd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01163d3:	50                   	push   %eax
f01163d4:	e8 c5 91 01 00       	call   f012f59e <strcconcat>
f01163d9:	83 c4 10             	add    $0x10,%esp
f01163dc:	83 ec 0c             	sub    $0xc,%esp
f01163df:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163e5:	50                   	push   %eax
f01163e6:	e8 d8 b7 fe ff       	call   f0101bc3 <execute_command>
f01163eb:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01163ee:	83 ec 04             	sub    $0x4,%esp
f01163f1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01163f7:	50                   	push   %eax
f01163f8:	68 f8 8e 13 f0       	push   $0xf0138ef8
f01163fd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116403:	50                   	push   %eax
f0116404:	e8 95 91 01 00       	call   f012f59e <strcconcat>
f0116409:	83 c4 10             	add    $0x10,%esp
f011640c:	83 ec 0c             	sub    $0xc,%esp
f011640f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116415:	50                   	push   %eax
f0116416:	e8 a8 b7 fe ff       	call   f0101bc3 <execute_command>
f011641b:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011641e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116425:	00 00 00 
		num_pages = 0;
f0116428:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011642f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116432:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116435:	c1 e0 03             	shl    $0x3,%eax
f0116438:	89 c2                	mov    %eax,%edx
f011643a:	83 ec 0c             	sub    $0xc,%esp
f011643d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116443:	50                   	push   %eax
f0116444:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011644a:	50                   	push   %eax
f011644b:	52                   	push   %edx
f011644c:	6a 00                	push   $0x0
f011644e:	ff 75 d8             	pushl  -0x28(%ebp)
f0116451:	e8 9f 27 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116456:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116459:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116460:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116467:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011646d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116470:	74 28                	je     f011649a <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116472:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116478:	83 ec 0c             	sub    $0xc,%esp
f011647b:	ff 75 c8             	pushl  -0x38(%ebp)
f011647e:	50                   	push   %eax
f011647f:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116484:	68 ec 06 00 00       	push   $0x6ec
f0116489:	68 f2 75 13 f0       	push   $0xf01375f2
f011648e:	e8 2b 9f fe ff       	call   f01003be <_warn>
f0116493:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116496:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011649a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164a0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01164a3:	74 28                	je     f01164cd <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01164a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164ab:	83 ec 0c             	sub    $0xc,%esp
f01164ae:	ff 75 c4             	pushl  -0x3c(%ebp)
f01164b1:	50                   	push   %eax
f01164b2:	68 04 90 13 f0       	push   $0xf0139004
f01164b7:	68 f1 06 00 00       	push   $0x6f1
f01164bc:	68 f2 75 13 f0       	push   $0xf01375f2
f01164c1:	e8 f8 9e fe ff       	call   f01003be <_warn>
f01164c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01164cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01164d1:	74 04                	je     f01164d7 <test_calculate_allocated_space+0x8a7>
f01164d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01164d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01164db:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164e2:	00 00 00 
		num_pages = 0;
f01164e5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164ec:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01164ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01164f2:	c1 e0 0a             	shl    $0xa,%eax
f01164f5:	89 c2                	mov    %eax,%edx
f01164f7:	83 ec 0c             	sub    $0xc,%esp
f01164fa:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116500:	50                   	push   %eax
f0116501:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116507:	50                   	push   %eax
f0116508:	52                   	push   %edx
f0116509:	6a 00                	push   $0x0
f011650b:	ff 75 d8             	pushl  -0x28(%ebp)
f011650e:	e8 e2 26 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116513:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0116516:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011651d:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116524:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011652a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011652d:	74 28                	je     f0116557 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011652f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116535:	83 ec 0c             	sub    $0xc,%esp
f0116538:	ff 75 c8             	pushl  -0x38(%ebp)
f011653b:	50                   	push   %eax
f011653c:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116541:	68 ff 06 00 00       	push   $0x6ff
f0116546:	68 f2 75 13 f0       	push   $0xf01375f2
f011654b:	e8 6e 9e fe ff       	call   f01003be <_warn>
f0116550:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116553:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116557:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011655d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116560:	74 28                	je     f011658a <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116562:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116568:	83 ec 0c             	sub    $0xc,%esp
f011656b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011656e:	50                   	push   %eax
f011656f:	68 04 90 13 f0       	push   $0xf0139004
f0116574:	68 04 07 00 00       	push   $0x704
f0116579:	68 f2 75 13 f0       	push   $0xf01375f2
f011657e:	e8 3b 9e fe ff       	call   f01003be <_warn>
f0116583:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116586:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011658a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011658e:	74 04                	je     f0116594 <test_calculate_allocated_space+0x964>
f0116590:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116594:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0116598:	83 ec 04             	sub    $0x4,%esp
f011659b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165a1:	50                   	push   %eax
f01165a2:	68 04 8f 13 f0       	push   $0xf0138f04
f01165a7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01165ad:	50                   	push   %eax
f01165ae:	e8 eb 8f 01 00       	call   f012f59e <strcconcat>
f01165b3:	83 c4 10             	add    $0x10,%esp
f01165b6:	83 ec 0c             	sub    $0xc,%esp
f01165b9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165bf:	50                   	push   %eax
f01165c0:	e8 fe b5 fe ff       	call   f0101bc3 <execute_command>
f01165c5:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01165c8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01165cf:	00 00 00 
		num_pages = 0;
f01165d2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01165d9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01165dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01165df:	89 c2                	mov    %eax,%edx
f01165e1:	01 d2                	add    %edx,%edx
f01165e3:	01 d0                	add    %edx,%eax
f01165e5:	05 00 18 00 00       	add    $0x1800,%eax
f01165ea:	89 c2                	mov    %eax,%edx
f01165ec:	83 ec 0c             	sub    $0xc,%esp
f01165ef:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01165f5:	50                   	push   %eax
f01165f6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165fc:	50                   	push   %eax
f01165fd:	52                   	push   %edx
f01165fe:	68 00 18 00 00       	push   $0x1800
f0116603:	ff 75 d8             	pushl  -0x28(%ebp)
f0116606:	e8 ea 25 ff ff       	call   f0108bf5 <calculate_allocated_space>
f011660b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011660e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116615:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011661c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116622:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116625:	74 28                	je     f011664f <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116627:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011662d:	83 ec 0c             	sub    $0xc,%esp
f0116630:	ff 75 c8             	pushl  -0x38(%ebp)
f0116633:	50                   	push   %eax
f0116634:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116639:	68 15 07 00 00       	push   $0x715
f011663e:	68 f2 75 13 f0       	push   $0xf01375f2
f0116643:	e8 76 9d fe ff       	call   f01003be <_warn>
f0116648:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011664b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011664f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116655:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116658:	74 28                	je     f0116682 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011665a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116660:	83 ec 0c             	sub    $0xc,%esp
f0116663:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116666:	50                   	push   %eax
f0116667:	68 04 90 13 f0       	push   $0xf0139004
f011666c:	68 1a 07 00 00       	push   $0x71a
f0116671:	68 f2 75 13 f0       	push   $0xf01375f2
f0116676:	e8 43 9d fe ff       	call   f01003be <_warn>
f011667b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011667e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116682:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116686:	74 04                	je     f011668c <test_calculate_allocated_space+0xa5c>
f0116688:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011668c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116690:	83 ec 04             	sub    $0x4,%esp
f0116693:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116699:	50                   	push   %eax
f011669a:	68 c4 7f 13 f0       	push   $0xf0137fc4
f011669f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01166a5:	50                   	push   %eax
f01166a6:	e8 f3 8e 01 00       	call   f012f59e <strcconcat>
f01166ab:	83 c4 10             	add    $0x10,%esp
f01166ae:	83 ec 0c             	sub    $0xc,%esp
f01166b1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01166b7:	50                   	push   %eax
f01166b8:	e8 06 b5 fe ff       	call   f0101bc3 <execute_command>
f01166bd:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01166c0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01166c7:	00 00 00 
		num_pages = 0;
f01166ca:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01166d1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01166d4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01166d7:	89 d0                	mov    %edx,%eax
f01166d9:	c1 e0 02             	shl    $0x2,%eax
f01166dc:	01 d0                	add    %edx,%eax
f01166de:	01 c0                	add    %eax,%eax
f01166e0:	05 00 00 40 00       	add    $0x400000,%eax
f01166e5:	89 c2                	mov    %eax,%edx
f01166e7:	83 ec 0c             	sub    $0xc,%esp
f01166ea:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01166f0:	50                   	push   %eax
f01166f1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01166f7:	50                   	push   %eax
f01166f8:	52                   	push   %edx
f01166f9:	68 00 00 40 00       	push   $0x400000
f01166fe:	ff 75 d8             	pushl  -0x28(%ebp)
f0116701:	e8 ef 24 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116706:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116709:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116710:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116717:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011671d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116720:	74 28                	je     f011674a <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116722:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116728:	83 ec 0c             	sub    $0xc,%esp
f011672b:	ff 75 c8             	pushl  -0x38(%ebp)
f011672e:	50                   	push   %eax
f011672f:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116734:	68 2a 07 00 00       	push   $0x72a
f0116739:	68 f2 75 13 f0       	push   $0xf01375f2
f011673e:	e8 7b 9c fe ff       	call   f01003be <_warn>
f0116743:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116746:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011674a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116750:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116753:	74 28                	je     f011677d <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116755:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011675b:	83 ec 0c             	sub    $0xc,%esp
f011675e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116761:	50                   	push   %eax
f0116762:	68 04 90 13 f0       	push   $0xf0139004
f0116767:	68 2f 07 00 00       	push   $0x72f
f011676c:	68 f2 75 13 f0       	push   $0xf01375f2
f0116771:	e8 48 9c fe ff       	call   f01003be <_warn>
f0116776:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116779:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011677d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116781:	74 04                	je     f0116787 <test_calculate_allocated_space+0xb57>
f0116783:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116787:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011678b:	83 ec 04             	sub    $0x4,%esp
f011678e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116794:	50                   	push   %eax
f0116795:	68 ce 7f 13 f0       	push   $0xf0137fce
f011679a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01167a0:	50                   	push   %eax
f01167a1:	e8 f8 8d 01 00       	call   f012f59e <strcconcat>
f01167a6:	83 c4 10             	add    $0x10,%esp
f01167a9:	83 ec 0c             	sub    $0xc,%esp
f01167ac:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01167b2:	50                   	push   %eax
f01167b3:	e8 0b b4 fe ff       	call   f0101bc3 <execute_command>
f01167b8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01167bb:	83 ec 04             	sub    $0x4,%esp
f01167be:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01167c4:	50                   	push   %eax
f01167c5:	68 0c 8f 13 f0       	push   $0xf0138f0c
f01167ca:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01167d0:	50                   	push   %eax
f01167d1:	e8 c8 8d 01 00       	call   f012f59e <strcconcat>
f01167d6:	83 c4 10             	add    $0x10,%esp
f01167d9:	83 ec 0c             	sub    $0xc,%esp
f01167dc:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01167e2:	50                   	push   %eax
f01167e3:	e8 db b3 fe ff       	call   f0101bc3 <execute_command>
f01167e8:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01167eb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01167f2:	00 00 00 
		num_pages = 0;
f01167f5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01167fc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01167ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116802:	05 00 00 38 00       	add    $0x380000,%eax
f0116807:	01 c0                	add    %eax,%eax
f0116809:	89 c2                	mov    %eax,%edx
f011680b:	83 ec 0c             	sub    $0xc,%esp
f011680e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116814:	50                   	push   %eax
f0116815:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011681b:	50                   	push   %eax
f011681c:	52                   	push   %edx
f011681d:	68 00 00 70 00       	push   $0x700000
f0116822:	ff 75 d8             	pushl  -0x28(%ebp)
f0116825:	e8 cb 23 ff ff       	call   f0108bf5 <calculate_allocated_space>
f011682a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011682d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116834:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011683b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116841:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116844:	74 28                	je     f011686e <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116846:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011684c:	83 ec 0c             	sub    $0xc,%esp
f011684f:	ff 75 c8             	pushl  -0x38(%ebp)
f0116852:	50                   	push   %eax
f0116853:	68 a4 8f 13 f0       	push   $0xf0138fa4
f0116858:	68 41 07 00 00       	push   $0x741
f011685d:	68 f2 75 13 f0       	push   $0xf01375f2
f0116862:	e8 57 9b fe ff       	call   f01003be <_warn>
f0116867:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011686a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011686e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116874:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116877:	74 28                	je     f01168a1 <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116879:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011687f:	83 ec 0c             	sub    $0xc,%esp
f0116882:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116885:	50                   	push   %eax
f0116886:	68 04 90 13 f0       	push   $0xf0139004
f011688b:	68 46 07 00 00       	push   $0x746
f0116890:	68 f2 75 13 f0       	push   $0xf01375f2
f0116895:	e8 24 9b fe ff       	call   f01003be <_warn>
f011689a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011689d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01168a1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01168a5:	74 04                	je     f01168ab <test_calculate_allocated_space+0xc7b>
f01168a7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01168ab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01168af:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01168b6:	00 00 00 
		num_pages = 0;
f01168b9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01168c0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01168c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01168c6:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01168cb:	89 c2                	mov    %eax,%edx
f01168cd:	83 ec 0c             	sub    $0xc,%esp
f01168d0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01168d6:	50                   	push   %eax
f01168d7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01168dd:	50                   	push   %eax
f01168de:	52                   	push   %edx
f01168df:	68 ff ff 3f 00       	push   $0x3fffff
f01168e4:	ff 75 d8             	pushl  -0x28(%ebp)
f01168e7:	e8 09 23 ff ff       	call   f0108bf5 <calculate_allocated_space>
f01168ec:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01168ef:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01168f6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01168fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116903:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116906:	74 28                	je     f0116930 <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116908:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011690e:	83 ec 0c             	sub    $0xc,%esp
f0116911:	ff 75 c8             	pushl  -0x38(%ebp)
f0116914:	50                   	push   %eax
f0116915:	68 a4 8f 13 f0       	push   $0xf0138fa4
f011691a:	68 54 07 00 00       	push   $0x754
f011691f:	68 f2 75 13 f0       	push   $0xf01375f2
f0116924:	e8 95 9a fe ff       	call   f01003be <_warn>
f0116929:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011692c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116930:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116936:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116939:	74 28                	je     f0116963 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011693b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116941:	83 ec 0c             	sub    $0xc,%esp
f0116944:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116947:	50                   	push   %eax
f0116948:	68 04 90 13 f0       	push   $0xf0139004
f011694d:	68 59 07 00 00       	push   $0x759
f0116952:	68 f2 75 13 f0       	push   $0xf01375f2
f0116957:	e8 62 9a fe ff       	call   f01003be <_warn>
f011695c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011695f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116963:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116967:	74 04                	je     f011696d <test_calculate_allocated_space+0xd3d>
f0116969:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011696d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116971:	83 ec 0c             	sub    $0xc,%esp
f0116974:	68 7f 7f 13 f0       	push   $0xf0137f7f
f0116979:	e8 b3 a4 fe ff       	call   f0100e31 <cprintf>
f011697e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116981:	83 ec 08             	sub    $0x8,%esp
f0116984:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116987:	68 60 90 13 f0       	push   $0xf0139060
f011698c:	e8 a0 a4 fe ff       	call   f0100e31 <cprintf>
f0116991:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116994:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116998:	75 10                	jne    f01169aa <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011699a:	83 ec 0c             	sub    $0xc,%esp
f011699d:	68 a0 90 13 f0       	push   $0xf01390a0
f01169a2:	e8 8a a4 fe ff       	call   f0100e31 <cprintf>
f01169a7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01169aa:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01169af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01169b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01169b5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01169b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01169bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01169c0:	5b                   	pop    %ebx
f01169c1:	5e                   	pop    %esi
f01169c2:	5f                   	pop    %edi
f01169c3:	5d                   	pop    %ebp
f01169c4:	c3                   	ret    

f01169c5 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01169c5:	55                   	push   %ebp
f01169c6:	89 e5                	mov    %esp,%ebp
f01169c8:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01169cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01169ce:	ba 01 00 00 00       	mov    $0x1,%edx
f01169d3:	88 c1                	mov    %al,%cl
f01169d5:	d3 e2                	shl    %cl,%edx
f01169d7:	89 d0                	mov    %edx,%eax
f01169d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01169dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169df:	c1 e8 16             	shr    $0x16,%eax
f01169e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01169ec:	01 d0                	add    %edx,%eax
f01169ee:	8b 00                	mov    (%eax),%eax
f01169f0:	83 e0 01             	and    $0x1,%eax
f01169f3:	85 c0                	test   %eax,%eax
f01169f5:	75 07                	jne    f01169fe <CB+0x39>
f01169f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01169fc:	eb 76                	jmp    f0116a74 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01169fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a01:	c1 e8 16             	shr    $0x16,%eax
f0116a04:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a0e:	01 d0                	add    %edx,%eax
f0116a10:	8b 00                	mov    (%eax),%eax
f0116a12:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116a17:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a1d:	c1 e8 0c             	shr    $0xc,%eax
f0116a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116a23:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116a28:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116a2b:	72 17                	jb     f0116a44 <CB+0x7f>
f0116a2d:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a30:	68 ec 90 13 f0       	push   $0xf01390ec
f0116a35:	68 74 07 00 00       	push   $0x774
f0116a3a:	68 f2 75 13 f0       	push   $0xf01375f2
f0116a3f:	e8 6c 97 fe ff       	call   f01001b0 <_panic>
f0116a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a47:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116a4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116a4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a52:	c1 e8 0c             	shr    $0xc,%eax
f0116a55:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116a5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a64:	01 d0                	add    %edx,%eax
f0116a66:	8b 00                	mov    (%eax),%eax
f0116a68:	23 45 f4             	and    -0xc(%ebp),%eax
f0116a6b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116a6e:	0f 94 c0             	sete   %al
f0116a71:	0f b6 c0             	movzbl %al,%eax
}
f0116a74:	c9                   	leave  
f0116a75:	c3                   	ret    

f0116a76 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116a76:	55                   	push   %ebp
f0116a77:	89 e5                	mov    %esp,%ebp
f0116a79:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116a7c:	8b 45 10             	mov    0x10(%ebp),%eax
f0116a7f:	ba 01 00 00 00       	mov    $0x1,%edx
f0116a84:	88 c1                	mov    %al,%cl
f0116a86:	d3 e2                	shl    %cl,%edx
f0116a88:	89 d0                	mov    %edx,%eax
f0116a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a90:	c1 e8 16             	shr    $0x16,%eax
f0116a93:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a9d:	01 d0                	add    %edx,%eax
f0116a9f:	8b 00                	mov    (%eax),%eax
f0116aa1:	83 e0 01             	and    $0x1,%eax
f0116aa4:	85 c0                	test   %eax,%eax
f0116aa6:	75 0a                	jne    f0116ab2 <SB+0x3c>
f0116aa8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116aad:	e9 cd 00 00 00       	jmp    f0116b7f <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116ab2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ab5:	c1 e8 16             	shr    $0x16,%eax
f0116ab8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116abf:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ac2:	01 d0                	add    %edx,%eax
f0116ac4:	8b 00                	mov    (%eax),%eax
f0116ac6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116acb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116ace:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ad1:	c1 e8 0c             	shr    $0xc,%eax
f0116ad4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116ad7:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116adc:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116adf:	72 17                	jb     f0116af8 <SB+0x82>
f0116ae1:	ff 75 f0             	pushl  -0x10(%ebp)
f0116ae4:	68 ec 90 13 f0       	push   $0xf01390ec
f0116ae9:	68 7c 07 00 00       	push   $0x77c
f0116aee:	68 f2 75 13 f0       	push   $0xf01375f2
f0116af3:	e8 b8 96 fe ff       	call   f01001b0 <_panic>
f0116af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116afb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b00:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116b03:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116b07:	74 3c                	je     f0116b45 <SB+0xcf>
f0116b09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b0c:	c1 e8 0c             	shr    $0xc,%eax
f0116b0f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116b1e:	01 d0                	add    %edx,%eax
f0116b20:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116b23:	c1 ea 0c             	shr    $0xc,%edx
f0116b26:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116b2c:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116b33:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116b36:	01 ca                	add    %ecx,%edx
f0116b38:	8b 12                	mov    (%edx),%edx
f0116b3a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116b3d:	f7 d1                	not    %ecx
f0116b3f:	21 ca                	and    %ecx,%edx
f0116b41:	89 10                	mov    %edx,(%eax)
f0116b43:	eb 35                	jmp    f0116b7a <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116b45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b48:	c1 e8 0c             	shr    $0xc,%eax
f0116b4b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116b5a:	01 c2                	add    %eax,%edx
f0116b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b5f:	c1 e8 0c             	shr    $0xc,%eax
f0116b62:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b67:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0116b6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116b71:	01 c8                	add    %ecx,%eax
f0116b73:	8b 00                	mov    (%eax),%eax
f0116b75:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116b78:	89 02                	mov    %eax,(%edx)
	return 0;
f0116b7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116b7f:	c9                   	leave  
f0116b80:	c3                   	ret    

f0116b81 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116b81:	55                   	push   %ebp
f0116b82:	89 e5                	mov    %esp,%ebp
f0116b84:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116b87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b8a:	c1 e8 16             	shr    $0x16,%eax
f0116b8d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b94:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b97:	01 d0                	add    %edx,%eax
f0116b99:	8b 00                	mov    (%eax),%eax
f0116b9b:	83 e0 01             	and    $0x1,%eax
f0116b9e:	85 c0                	test   %eax,%eax
f0116ba0:	75 0a                	jne    f0116bac <CPs+0x2b>
f0116ba2:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ba7:	e9 b8 00 00 00       	jmp    f0116c64 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116bac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116baf:	c1 e8 16             	shr    $0x16,%eax
f0116bb2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bbc:	01 d0                	add    %edx,%eax
f0116bbe:	8b 00                	mov    (%eax),%eax
f0116bc0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116bc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116bc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116bcb:	c1 e8 0c             	shr    $0xc,%eax
f0116bce:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116bd1:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116bd6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116bd9:	72 17                	jb     f0116bf2 <CPs+0x71>
f0116bdb:	ff 75 f0             	pushl  -0x10(%ebp)
f0116bde:	68 ec 90 13 f0       	push   $0xf01390ec
f0116be3:	68 85 07 00 00       	push   $0x785
f0116be8:	68 f2 75 13 f0       	push   $0xf01375f2
f0116bed:	e8 be 95 fe ff       	call   f01001b0 <_panic>
f0116bf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116bf5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116bfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0116bfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116c04:	eb 53                	jmp    f0116c59 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c09:	ba 01 00 00 00       	mov    $0x1,%edx
f0116c0e:	88 c1                	mov    %al,%cl
f0116c10:	d3 e2                	shl    %cl,%edx
f0116c12:	89 d0                	mov    %edx,%eax
f0116c14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116c17:	8b 45 14             	mov    0x14(%ebp),%eax
f0116c1a:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116c1d:	85 c0                	test   %eax,%eax
f0116c1f:	74 34                	je     f0116c55 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116c21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c24:	c1 e8 0c             	shr    $0xc,%eax
f0116c27:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c2c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116c36:	01 d0                	add    %edx,%eax
f0116c38:	8b 00                	mov    (%eax),%eax
f0116c3a:	33 45 10             	xor    0x10(%ebp),%eax
f0116c3d:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116c40:	85 c0                	test   %eax,%eax
f0116c42:	0f 94 c0             	sete   %al
f0116c45:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0116c48:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116c4c:	75 08                	jne    f0116c56 <CPs+0xd5>
f0116c4e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c53:	eb 0f                	jmp    f0116c64 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116c55:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116c56:	ff 45 f4             	incl   -0xc(%ebp)
f0116c59:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116c5d:	7e a7                	jle    f0116c06 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116c5f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116c64:	c9                   	leave  
f0116c65:	c3                   	ret    

f0116c66 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116c66:	55                   	push   %ebp
f0116c67:	89 e5                	mov    %esp,%ebp
f0116c69:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116c6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c6f:	c1 e8 16             	shr    $0x16,%eax
f0116c72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c79:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c7c:	01 d0                	add    %edx,%eax
f0116c7e:	8b 00                	mov    (%eax),%eax
f0116c80:	83 e0 01             	and    $0x1,%eax
f0116c83:	85 c0                	test   %eax,%eax
f0116c85:	75 07                	jne    f0116c8e <CA+0x28>
f0116c87:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c8c:	eb 6f                	jmp    f0116cfd <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116c8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c91:	c1 e8 16             	shr    $0x16,%eax
f0116c94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c9e:	01 d0                	add    %edx,%eax
f0116ca0:	8b 00                	mov    (%eax),%eax
f0116ca2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ca7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116cad:	c1 e8 0c             	shr    $0xc,%eax
f0116cb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116cb3:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116cb8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116cbb:	72 17                	jb     f0116cd4 <CA+0x6e>
f0116cbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0116cc0:	68 ec 90 13 f0       	push   $0xf01390ec
f0116cc5:	68 94 07 00 00       	push   $0x794
f0116cca:	68 f2 75 13 f0       	push   $0xf01375f2
f0116ccf:	e8 dc 94 fe ff       	call   f01001b0 <_panic>
f0116cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116cd7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116cdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ce2:	c1 e8 0c             	shr    $0xc,%eax
f0116ce5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116cea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116cf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116cf4:	01 d0                	add    %edx,%eax
f0116cf6:	8b 00                	mov    (%eax),%eax
f0116cf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116cfd:	c9                   	leave  
f0116cfe:	c3                   	ret    

f0116cff <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116cff:	55                   	push   %ebp
f0116d00:	89 e5                	mov    %esp,%ebp
f0116d02:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116d05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d08:	c1 e8 16             	shr    $0x16,%eax
f0116d0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d12:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d15:	01 d0                	add    %edx,%eax
f0116d17:	8b 00                	mov    (%eax),%eax
f0116d19:	83 e0 01             	and    $0x1,%eax
f0116d1c:	85 c0                	test   %eax,%eax
f0116d1e:	75 07                	jne    f0116d27 <CE+0x28>
f0116d20:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d25:	eb 7a                	jmp    f0116da1 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116d27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d2a:	c1 e8 16             	shr    $0x16,%eax
f0116d2d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d34:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d37:	01 d0                	add    %edx,%eax
f0116d39:	8b 00                	mov    (%eax),%eax
f0116d3b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d40:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d46:	c1 e8 0c             	shr    $0xc,%eax
f0116d49:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116d4c:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116d51:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116d54:	72 17                	jb     f0116d6d <CE+0x6e>
f0116d56:	ff 75 f4             	pushl  -0xc(%ebp)
f0116d59:	68 ec 90 13 f0       	push   $0xf01390ec
f0116d5e:	68 9b 07 00 00       	push   $0x79b
f0116d63:	68 f2 75 13 f0       	push   $0xf01375f2
f0116d68:	e8 43 94 fe ff       	call   f01001b0 <_panic>
f0116d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d70:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116d75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116d78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d7b:	c1 e8 0c             	shr    $0xc,%eax
f0116d7e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116d83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d8d:	01 d0                	add    %edx,%eax
f0116d8f:	8b 00                	mov    (%eax),%eax
f0116d91:	85 c0                	test   %eax,%eax
f0116d93:	74 07                	je     f0116d9c <CE+0x9d>
f0116d95:	b8 00 00 00 00       	mov    $0x0,%eax
f0116d9a:	eb 05                	jmp    f0116da1 <CE+0xa2>
	return 1;
f0116d9c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116da1:	c9                   	leave  
f0116da2:	c3                   	ret    

f0116da3 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116da3:	55                   	push   %ebp
f0116da4:	89 e5                	mov    %esp,%ebp
f0116da6:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116da9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116dac:	c1 e8 16             	shr    $0x16,%eax
f0116daf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0116db9:	01 d0                	add    %edx,%eax
f0116dbb:	8b 00                	mov    (%eax),%eax
f0116dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116dc3:	83 e0 01             	and    $0x1,%eax
f0116dc6:	85 c0                	test   %eax,%eax
f0116dc8:	0f 84 92 00 00 00    	je     f0116e60 <CP+0xbd>
	{
		uint32 *t = NULL;
f0116dce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116dd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116de0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116de3:	c1 e8 0c             	shr    $0xc,%eax
f0116de6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116de9:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116dee:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116df1:	72 17                	jb     f0116e0a <CP+0x67>
f0116df3:	ff 75 ec             	pushl  -0x14(%ebp)
f0116df6:	68 ec 90 13 f0       	push   $0xf01390ec
f0116dfb:	68 a7 07 00 00       	push   $0x7a7
f0116e00:	68 f2 75 13 f0       	push   $0xf01375f2
f0116e05:	e8 a6 93 fe ff       	call   f01001b0 <_panic>
f0116e0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e0d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116e12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116e15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e18:	c1 e8 0c             	shr    $0xc,%eax
f0116e1b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116e20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116e2a:	01 d0                	add    %edx,%eax
f0116e2c:	8b 00                	mov    (%eax),%eax
f0116e2e:	23 45 10             	and    0x10(%ebp),%eax
f0116e31:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116e34:	75 2a                	jne    f0116e60 <CP+0xbd>
f0116e36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e39:	c1 e8 0c             	shr    $0xc,%eax
f0116e3c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116e41:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116e4b:	01 d0                	add    %edx,%eax
f0116e4d:	8b 00                	mov    (%eax),%eax
f0116e4f:	f7 d0                	not    %eax
f0116e51:	23 45 14             	and    0x14(%ebp),%eax
f0116e54:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116e57:	75 07                	jne    f0116e60 <CP+0xbd>
			return 1;
f0116e59:	b8 01 00 00 00       	mov    $0x1,%eax
f0116e5e:	eb 05                	jmp    f0116e65 <CP+0xc2>
	}
	return 0;
f0116e60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116e65:	c9                   	leave  
f0116e66:	c3                   	ret    

f0116e67 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116e67:	55                   	push   %ebp
f0116e68:	89 e5                	mov    %esp,%ebp
f0116e6a:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116e6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e70:	c1 e8 16             	shr    $0x16,%eax
f0116e73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e7d:	01 d0                	add    %edx,%eax
f0116e7f:	8b 00                	mov    (%eax),%eax
f0116e81:	83 e0 01             	and    $0x1,%eax
f0116e84:	85 c0                	test   %eax,%eax
f0116e86:	75 07                	jne    f0116e8f <GP+0x28>
f0116e88:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e8d:	eb 6f                	jmp    f0116efe <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e92:	c1 e8 16             	shr    $0x16,%eax
f0116e95:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e9f:	01 d0                	add    %edx,%eax
f0116ea1:	8b 00                	mov    (%eax),%eax
f0116ea3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116eae:	c1 e8 0c             	shr    $0xc,%eax
f0116eb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116eb4:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116eb9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116ebc:	72 17                	jb     f0116ed5 <GP+0x6e>
f0116ebe:	ff 75 f4             	pushl  -0xc(%ebp)
f0116ec1:	68 ec 90 13 f0       	push   $0xf01390ec
f0116ec6:	68 b4 07 00 00       	push   $0x7b4
f0116ecb:	68 f2 75 13 f0       	push   $0xf01375f2
f0116ed0:	e8 db 92 fe ff       	call   f01001b0 <_panic>
f0116ed5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ed8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116edd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116ee0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ee3:	c1 e8 0c             	shr    $0xc,%eax
f0116ee6:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116eeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ef2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ef5:	01 d0                	add    %edx,%eax
f0116ef7:	8b 00                	mov    (%eax),%eax
f0116ef9:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116efe:	c9                   	leave  
f0116eff:	c3                   	ret    

f0116f00 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116f00:	55                   	push   %ebp
f0116f01:	89 e5                	mov    %esp,%ebp
f0116f03:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116f06:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116f0d:	eb 18                	jmp    f0116f27 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116f0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116f12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f19:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f1c:	01 d0                	add    %edx,%eax
f0116f1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116f24:	ff 45 fc             	incl   -0x4(%ebp)
f0116f27:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116f2a:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116f2f:	76 de                	jbe    f0116f0f <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116f31:	90                   	nop
f0116f32:	c9                   	leave  
f0116f33:	c3                   	ret    

f0116f34 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116f34:	55                   	push   %ebp
f0116f35:	89 e5                	mov    %esp,%ebp
f0116f37:	83 ec 38             	sub    $0x38,%esp
f0116f3a:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116f3d:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116f48:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116f4b:	8b 45 10             	mov    0x10(%ebp),%eax
f0116f4e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116f53:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116f56:	e9 ea 01 00 00       	jmp    f0117145 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116f5b:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116f5f:	74 44                	je     f0116fa5 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116f64:	83 ec 04             	sub    $0x4,%esp
f0116f67:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116f6a:	52                   	push   %edx
f0116f6b:	50                   	push   %eax
f0116f6c:	ff 75 08             	pushl  0x8(%ebp)
f0116f6f:	e8 0b 08 ff ff       	call   f010777f <get_frame_info>
f0116f74:	83 c4 10             	add    $0x10,%esp
f0116f77:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116f7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116f7d:	85 c0                	test   %eax,%eax
f0116f7f:	75 24                	jne    f0116fa5 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116f81:	83 ec 04             	sub    $0x4,%esp
f0116f84:	68 1c 91 13 f0       	push   $0xf013911c
f0116f89:	68 cf 07 00 00       	push   $0x7cf
f0116f8e:	68 f2 75 13 f0       	push   $0xf01375f2
f0116f93:	e8 26 94 fe ff       	call   f01003be <_warn>
f0116f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fa0:	e9 b6 01 00 00       	jmp    f011715b <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116fa8:	83 ec 04             	sub    $0x4,%esp
f0116fab:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116fae:	52                   	push   %edx
f0116faf:	50                   	push   %eax
f0116fb0:	ff 75 08             	pushl  0x8(%ebp)
f0116fb3:	e8 c7 07 ff ff       	call   f010777f <get_frame_info>
f0116fb8:	83 c4 10             	add    $0x10,%esp
f0116fbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116fbe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116fc1:	85 c0                	test   %eax,%eax
f0116fc3:	75 24                	jne    f0116fe9 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116fc5:	83 ec 04             	sub    $0x4,%esp
f0116fc8:	68 48 91 13 f0       	push   $0xf0139148
f0116fcd:	68 d6 07 00 00       	push   $0x7d6
f0116fd2:	68 f2 75 13 f0       	push   $0xf01375f2
f0116fd7:	e8 e2 93 fe ff       	call   f01003be <_warn>
f0116fdc:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116fdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fe4:	e9 72 01 00 00       	jmp    f011715b <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116fe9:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116fed:	75 70                	jne    f011705f <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116fef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116ff2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116ff5:	c1 ea 0c             	shr    $0xc,%edx
f0116ff8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116ffe:	c1 e2 02             	shl    $0x2,%edx
f0117001:	01 d0                	add    %edx,%eax
f0117003:	8b 00                	mov    (%eax),%eax
f0117005:	c1 e8 0c             	shr    $0xc,%eax
f0117008:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f011700b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011700e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117011:	c1 ea 0c             	shr    $0xc,%edx
f0117014:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011701a:	c1 e2 02             	shl    $0x2,%edx
f011701d:	01 d0                	add    %edx,%eax
f011701f:	8b 00                	mov    (%eax),%eax
f0117021:	c1 e8 0c             	shr    $0xc,%eax
f0117024:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0117027:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011702a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011702d:	74 30                	je     f011705f <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f011702f:	83 ec 04             	sub    $0x4,%esp
f0117032:	ff 75 e4             	pushl  -0x1c(%ebp)
f0117035:	ff 75 e8             	pushl  -0x18(%ebp)
f0117038:	ff 75 f0             	pushl  -0x10(%ebp)
f011703b:	ff 75 f4             	pushl  -0xc(%ebp)
f011703e:	68 74 91 13 f0       	push   $0xf0139174
f0117043:	68 e0 07 00 00       	push   $0x7e0
f0117048:	68 f2 75 13 f0       	push   $0xf01375f2
f011704d:	e8 6c 93 fe ff       	call   f01003be <_warn>
f0117052:	83 c4 20             	add    $0x20,%esp
				return 0;
f0117055:	b8 00 00 00 00       	mov    $0x0,%eax
f011705a:	e9 fc 00 00 00       	jmp    f011715b <CCP+0x227>
			}
		}
		if (ref != -1)
f011705f:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0117063:	74 52                	je     f01170b7 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0117065:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117069:	74 0e                	je     f0117079 <CCP+0x145>
f011706b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011706e:	8b 40 08             	mov    0x8(%eax),%eax
f0117071:	0f b7 c0             	movzwl %ax,%eax
f0117074:	3b 45 18             	cmp    0x18(%ebp),%eax
f0117077:	74 3e                	je     f01170b7 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0117079:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011707d:	74 0b                	je     f011708a <CCP+0x156>
f011707f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0117082:	8b 40 08             	mov    0x8(%eax),%eax
f0117085:	0f b7 c0             	movzwl %ax,%eax
f0117088:	eb 05                	jmp    f011708f <CCP+0x15b>
f011708a:	b8 00 00 00 00       	mov    $0x0,%eax
f011708f:	83 ec 0c             	sub    $0xc,%esp
f0117092:	50                   	push   %eax
f0117093:	ff 75 f0             	pushl  -0x10(%ebp)
f0117096:	68 d0 91 13 f0       	push   $0xf01391d0
f011709b:	68 e8 07 00 00       	push   $0x7e8
f01170a0:	68 f2 75 13 f0       	push   $0xf01375f2
f01170a5:	e8 14 93 fe ff       	call   f01003be <_warn>
f01170aa:	83 c4 20             	add    $0x20,%esp
				return 0;
f01170ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01170b2:	e9 a4 00 00 00       	jmp    f011715b <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01170b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01170ba:	ff 75 20             	pushl  0x20(%ebp)
f01170bd:	ff 75 1c             	pushl  0x1c(%ebp)
f01170c0:	50                   	push   %eax
f01170c1:	ff 75 08             	pushl  0x8(%ebp)
f01170c4:	e8 b8 fa ff ff       	call   f0116b81 <CPs>
f01170c9:	83 c4 10             	add    $0x10,%esp
f01170cc:	85 c0                	test   %eax,%eax
f01170ce:	7f 21                	jg     f01170f1 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f01170d0:	83 ec 04             	sub    $0x4,%esp
f01170d3:	68 40 92 13 f0       	push   $0xf0139240
f01170d8:	68 ee 07 00 00       	push   $0x7ee
f01170dd:	68 f2 75 13 f0       	push   $0xf01375f2
f01170e2:	e8 d7 92 fe ff       	call   f01003be <_warn>
f01170e7:	83 c4 10             	add    $0x10,%esp
			return 0;
f01170ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01170ef:	eb 6a                	jmp    f011715b <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f01170f1:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01170f5:	74 3a                	je     f0117131 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f01170f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01170fa:	ff 75 28             	pushl  0x28(%ebp)
f01170fd:	ff 75 24             	pushl  0x24(%ebp)
f0117100:	50                   	push   %eax
f0117101:	ff 75 08             	pushl  0x8(%ebp)
f0117104:	e8 78 fa ff ff       	call   f0116b81 <CPs>
f0117109:	83 c4 10             	add    $0x10,%esp
f011710c:	85 c0                	test   %eax,%eax
f011710e:	7f 21                	jg     f0117131 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0117110:	83 ec 04             	sub    $0x4,%esp
f0117113:	68 88 92 13 f0       	push   $0xf0139288
f0117118:	68 f5 07 00 00       	push   $0x7f5
f011711d:	68 f2 75 13 f0       	push   $0xf01375f2
f0117122:	e8 97 92 fe ff       	call   f01003be <_warn>
f0117127:	83 c4 10             	add    $0x10,%esp
				return 0;
f011712a:	b8 00 00 00 00       	mov    $0x0,%eax
f011712f:	eb 2a                	jmp    f011715b <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0117131:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0117135:	74 07                	je     f011713e <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0117137:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011713e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0117145:	8b 55 10             	mov    0x10(%ebp),%edx
f0117148:	8b 45 14             	mov    0x14(%ebp),%eax
f011714b:	01 d0                	add    %edx,%eax
f011714d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0117150:	0f 87 05 fe ff ff    	ja     f0116f5b <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0117156:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011715b:	c9                   	leave  
f011715c:	c3                   	ret    

f011715d <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011715d:	55                   	push   %ebp
f011715e:	89 e5                	mov    %esp,%ebp
f0117160:	57                   	push   %edi
f0117161:	56                   	push   %esi
f0117162:	53                   	push   %ebx
f0117163:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117169:	a0 3c eb 18 f0       	mov    0xf018eb3c,%al
f011716e:	84 c0                	test   %al,%al
f0117170:	0f 84 38 0a 00 00    	je     f0117bae <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0117176:	c6 05 3c eb 18 f0 00 	movb   $0x0,0xf018eb3c
		char command[100] = "load fos_add 20";
f011717d:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0117183:	bb 44 95 13 f0       	mov    $0xf0139544,%ebx
f0117188:	ba 04 00 00 00       	mov    $0x4,%edx
f011718d:	89 c7                	mov    %eax,%edi
f011718f:	89 de                	mov    %ebx,%esi
f0117191:	89 d1                	mov    %edx,%ecx
f0117193:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117195:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011719b:	b9 15 00 00 00       	mov    $0x15,%ecx
f01171a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01171a5:	89 d7                	mov    %edx,%edi
f01171a7:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01171a9:	83 ec 0c             	sub    $0xc,%esp
f01171ac:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01171b2:	50                   	push   %eax
f01171b3:	e8 0b aa fe ff       	call   f0101bc3 <execute_command>
f01171b8:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f01171bb:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01171c1:	bb a8 95 13 f0       	mov    $0xf01395a8,%ebx
f01171c6:	ba 0d 00 00 00       	mov    $0xd,%edx
f01171cb:	89 c7                	mov    %eax,%edi
f01171cd:	89 de                	mov    %ebx,%esi
f01171cf:	89 d1                	mov    %edx,%ecx
f01171d1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01171d3:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f01171d9:	b9 57 00 00 00       	mov    $0x57,%ecx
f01171de:	b0 00                	mov    $0x0,%al
f01171e0:	89 d7                	mov    %edx,%edi
f01171e2:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01171e4:	83 ec 0c             	sub    $0xc,%esp
f01171e7:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01171ed:	50                   	push   %eax
f01171ee:	e8 d0 a9 fe ff       	call   f0101bc3 <execute_command>
f01171f3:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f01171f6:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01171fc:	bb 0c 96 13 f0       	mov    $0xf013960c,%ebx
f0117201:	ba 17 00 00 00       	mov    $0x17,%edx
f0117206:	89 c7                	mov    %eax,%edi
f0117208:	89 de                	mov    %ebx,%esi
f011720a:	89 d1                	mov    %edx,%ecx
f011720c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011720e:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0117214:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117219:	b0 00                	mov    $0x0,%al
f011721b:	89 d7                	mov    %edx,%edi
f011721d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011721f:	83 ec 0c             	sub    $0xc,%esp
f0117222:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117228:	50                   	push   %eax
f0117229:	e8 95 a9 fe ff       	call   f0101bc3 <execute_command>
f011722e:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0117231:	83 ec 04             	sub    $0x4,%esp
f0117234:	6a 00                	push   $0x0
f0117236:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0117239:	50                   	push   %eax
f011723a:	6a 10                	push   $0x10
f011723c:	e8 8d 27 ff ff       	call   f01099ce <envid2env>
f0117241:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0117244:	83 ec 04             	sub    $0x4,%esp
f0117247:	6a 00                	push   $0x0
f0117249:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011724c:	50                   	push   %eax
f011724d:	6a 11                	push   $0x11
f011724f:	e8 7a 27 ff ff       	call   f01099ce <envid2env>
f0117254:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0117257:	83 ec 04             	sub    $0x4,%esp
f011725a:	6a 00                	push   $0x0
f011725c:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011725f:	50                   	push   %eax
f0117260:	6a 12                	push   $0x12
f0117262:	e8 67 27 ff ff       	call   f01099ce <envid2env>
f0117267:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011726a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011726d:	85 c0                	test   %eax,%eax
f011726f:	74 0e                	je     f011727f <test_priority_normal_and_higher+0x122>
f0117271:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117274:	85 c0                	test   %eax,%eax
f0117276:	74 07                	je     f011727f <test_priority_normal_and_higher+0x122>
f0117278:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011727b:	85 c0                	test   %eax,%eax
f011727d:	75 14                	jne    f0117293 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f011727f:	83 ec 04             	sub    $0x4,%esp
f0117282:	68 c8 92 13 f0       	push   $0xf01392c8
f0117287:	6a 29                	push   $0x29
f0117289:	68 e1 92 13 f0       	push   $0xf01392e1
f011728e:	e8 1d 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117293:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117296:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011729c:	83 f8 14             	cmp    $0x14,%eax
f011729f:	75 1c                	jne    f01172bd <test_priority_normal_and_higher+0x160>
f01172a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172a4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172aa:	83 f8 0f             	cmp    $0xf,%eax
f01172ad:	75 0e                	jne    f01172bd <test_priority_normal_and_higher+0x160>
f01172af:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172b2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172b8:	83 f8 0a             	cmp    $0xa,%eax
f01172bb:	74 32                	je     f01172ef <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f01172bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172c0:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f01172c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172c9:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01172cf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172d2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172d8:	83 ec 08             	sub    $0x8,%esp
f01172db:	51                   	push   %ecx
f01172dc:	52                   	push   %edx
f01172dd:	50                   	push   %eax
f01172de:	68 fc 92 13 f0       	push   $0xf01392fc
f01172e3:	6a 2c                	push   $0x2c
f01172e5:	68 e1 92 13 f0       	push   $0xf01392e1
f01172ea:	e8 c1 8e fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f01172ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01172f6:	eb 47                	jmp    f011733f <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01172f8:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01172fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01172fe:	89 d0                	mov    %edx,%eax
f0117300:	01 c0                	add    %eax,%eax
f0117302:	01 d0                	add    %edx,%eax
f0117304:	c1 e0 03             	shl    $0x3,%eax
f0117307:	01 c8                	add    %ecx,%eax
f0117309:	05 b8 00 00 00       	add    $0xb8,%eax
f011730e:	8b 10                	mov    (%eax),%edx
f0117310:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117313:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011731a:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011731d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117320:	89 d0                	mov    %edx,%eax
f0117322:	01 c0                	add    %eax,%eax
f0117324:	01 d0                	add    %edx,%eax
f0117326:	c1 e0 03             	shl    $0x3,%eax
f0117329:	01 c8                	add    %ecx,%eax
f011732b:	05 c0 00 00 00       	add    $0xc0,%eax
f0117330:	8b 10                	mov    (%eax),%edx
f0117332:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117335:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f011733c:	ff 45 e4             	incl   -0x1c(%ebp)
f011733f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117343:	7e b3                	jle    f01172f8 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117345:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011734c:	eb 47                	jmp    f0117395 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011734e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117351:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117354:	89 d0                	mov    %edx,%eax
f0117356:	01 c0                	add    %eax,%eax
f0117358:	01 d0                	add    %edx,%eax
f011735a:	c1 e0 03             	shl    $0x3,%eax
f011735d:	01 c8                	add    %ecx,%eax
f011735f:	05 b8 00 00 00       	add    $0xb8,%eax
f0117364:	8b 10                	mov    (%eax),%edx
f0117366:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117369:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117370:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117373:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117376:	89 d0                	mov    %edx,%eax
f0117378:	01 c0                	add    %eax,%eax
f011737a:	01 d0                	add    %edx,%eax
f011737c:	c1 e0 03             	shl    $0x3,%eax
f011737f:	01 c8                	add    %ecx,%eax
f0117381:	05 c0 00 00 00       	add    $0xc0,%eax
f0117386:	8b 10                	mov    (%eax),%edx
f0117388:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011738b:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117392:	ff 45 e0             	incl   -0x20(%ebp)
f0117395:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0117399:	7e b3                	jle    f011734e <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011739b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01173a2:	eb 47                	jmp    f01173eb <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01173a4:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01173a7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01173aa:	89 d0                	mov    %edx,%eax
f01173ac:	01 c0                	add    %eax,%eax
f01173ae:	01 d0                	add    %edx,%eax
f01173b0:	c1 e0 03             	shl    $0x3,%eax
f01173b3:	01 c8                	add    %ecx,%eax
f01173b5:	05 b8 00 00 00       	add    $0xb8,%eax
f01173ba:	8b 10                	mov    (%eax),%edx
f01173bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01173bf:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01173c6:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01173c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01173cc:	89 d0                	mov    %edx,%eax
f01173ce:	01 c0                	add    %eax,%eax
f01173d0:	01 d0                	add    %edx,%eax
f01173d2:	c1 e0 03             	shl    $0x3,%eax
f01173d5:	01 c8                	add    %ecx,%eax
f01173d7:	05 c0 00 00 00       	add    $0xc0,%eax
f01173dc:	8b 10                	mov    (%eax),%edx
f01173de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01173e1:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01173e8:	ff 45 dc             	incl   -0x24(%ebp)
f01173eb:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01173ef:	7e b3                	jle    f01173a4 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01173f1:	e8 d0 55 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01173f6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f01173f9:	e8 86 d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01173fe:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117401:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117404:	83 ec 08             	sub    $0x8,%esp
f0117407:	6a 03                	push   $0x3
f0117409:	50                   	push   %eax
f011740a:	e8 9f 3a ff ff       	call   f010aeae <set_program_priority>
f011740f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117412:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117415:	83 ec 08             	sub    $0x8,%esp
f0117418:	6a 03                	push   $0x3
f011741a:	50                   	push   %eax
f011741b:	e8 8e 3a ff ff       	call   f010aeae <set_program_priority>
f0117420:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117423:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117426:	83 ec 08             	sub    $0x8,%esp
f0117429:	6a 03                	push   $0x3
f011742b:	50                   	push   %eax
f011742c:	e8 7d 3a ff ff       	call   f010aeae <set_program_priority>
f0117431:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117434:	e8 4b d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117439:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011743c:	74 14                	je     f0117452 <test_priority_normal_and_higher+0x2f5>
f011743e:	83 ec 04             	sub    $0x4,%esp
f0117441:	68 64 93 13 f0       	push   $0xf0139364
f0117446:	6a 48                	push   $0x48
f0117448:	68 e1 92 13 f0       	push   $0xf01392e1
f011744d:	e8 5e 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117452:	e8 6f 55 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117457:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011745a:	74 14                	je     f0117470 <test_priority_normal_and_higher+0x313>
f011745c:	83 ec 04             	sub    $0x4,%esp
f011745f:	68 64 93 13 f0       	push   $0xf0139364
f0117464:	6a 49                	push   $0x49
f0117466:	68 e1 92 13 f0       	push   $0xf01392e1
f011746b:	e8 40 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117470:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117473:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117479:	83 f8 14             	cmp    $0x14,%eax
f011747c:	75 1c                	jne    f011749a <test_priority_normal_and_higher+0x33d>
f011747e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117481:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117487:	83 f8 0f             	cmp    $0xf,%eax
f011748a:	75 0e                	jne    f011749a <test_priority_normal_and_higher+0x33d>
f011748c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011748f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117495:	83 f8 0a             	cmp    $0xa,%eax
f0117498:	74 14                	je     f01174ae <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011749a:	83 ec 04             	sub    $0x4,%esp
f011749d:	68 90 93 13 f0       	push   $0xf0139390
f01174a2:	6a 4c                	push   $0x4c
f01174a4:	68 e1 92 13 f0       	push   $0xf01392e1
f01174a9:	e8 02 8d fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f01174ae:	e8 13 55 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01174b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174b6:	e8 c9 d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01174bb:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01174be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01174c1:	83 ec 08             	sub    $0x8,%esp
f01174c4:	6a 04                	push   $0x4
f01174c6:	50                   	push   %eax
f01174c7:	e8 e2 39 ff ff       	call   f010aeae <set_program_priority>
f01174cc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01174cf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01174d2:	83 ec 08             	sub    $0x8,%esp
f01174d5:	6a 04                	push   $0x4
f01174d7:	50                   	push   %eax
f01174d8:	e8 d1 39 ff ff       	call   f010aeae <set_program_priority>
f01174dd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01174e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174e3:	83 ec 08             	sub    $0x8,%esp
f01174e6:	6a 04                	push   $0x4
f01174e8:	50                   	push   %eax
f01174e9:	e8 c0 39 ff ff       	call   f010aeae <set_program_priority>
f01174ee:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174f1:	e8 8e d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01174f6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01174f9:	74 14                	je     f011750f <test_priority_normal_and_higher+0x3b2>
f01174fb:	83 ec 04             	sub    $0x4,%esp
f01174fe:	68 64 93 13 f0       	push   $0xf0139364
f0117503:	6a 56                	push   $0x56
f0117505:	68 e1 92 13 f0       	push   $0xf01392e1
f011750a:	e8 a1 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011750f:	e8 b2 54 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117514:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117517:	74 14                	je     f011752d <test_priority_normal_and_higher+0x3d0>
f0117519:	83 ec 04             	sub    $0x4,%esp
f011751c:	68 e4 93 13 f0       	push   $0xf01393e4
f0117521:	6a 57                	push   $0x57
f0117523:	68 e1 92 13 f0       	push   $0xf01392e1
f0117528:	e8 83 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011752d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117530:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117536:	83 f8 14             	cmp    $0x14,%eax
f0117539:	75 1c                	jne    f0117557 <test_priority_normal_and_higher+0x3fa>
f011753b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011753e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117544:	83 f8 0f             	cmp    $0xf,%eax
f0117547:	75 0e                	jne    f0117557 <test_priority_normal_and_higher+0x3fa>
f0117549:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011754c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117552:	83 f8 14             	cmp    $0x14,%eax
f0117555:	74 14                	je     f011756b <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117557:	83 ec 04             	sub    $0x4,%esp
f011755a:	68 14 94 13 f0       	push   $0xf0139414
f011755f:	6a 5a                	push   $0x5a
f0117561:	68 e1 92 13 f0       	push   $0xf01392e1
f0117566:	e8 45 8c fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011756b:	e8 56 54 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117570:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117573:	e8 0c d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117578:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f011757b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011757e:	83 ec 08             	sub    $0x8,%esp
f0117581:	6a 04                	push   $0x4
f0117583:	50                   	push   %eax
f0117584:	e8 25 39 ff ff       	call   f010aeae <set_program_priority>
f0117589:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011758c:	e8 f3 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117591:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117594:	74 14                	je     f01175aa <test_priority_normal_and_higher+0x44d>
f0117596:	83 ec 04             	sub    $0x4,%esp
f0117599:	68 64 93 13 f0       	push   $0xf0139364
f011759e:	6a 62                	push   $0x62
f01175a0:	68 e1 92 13 f0       	push   $0xf01392e1
f01175a5:	e8 06 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01175aa:	e8 17 54 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01175af:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01175b2:	74 14                	je     f01175c8 <test_priority_normal_and_higher+0x46b>
f01175b4:	83 ec 04             	sub    $0x4,%esp
f01175b7:	68 64 93 13 f0       	push   $0xf0139364
f01175bc:	6a 63                	push   $0x63
f01175be:	68 e1 92 13 f0       	push   $0xf01392e1
f01175c3:	e8 e8 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01175c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175cb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175d1:	83 f8 14             	cmp    $0x14,%eax
f01175d4:	75 1c                	jne    f01175f2 <test_priority_normal_and_higher+0x495>
f01175d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175d9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175df:	83 f8 0f             	cmp    $0xf,%eax
f01175e2:	75 0e                	jne    f01175f2 <test_priority_normal_and_higher+0x495>
f01175e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175e7:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175ed:	83 f8 14             	cmp    $0x14,%eax
f01175f0:	74 14                	je     f0117606 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f01175f2:	83 ec 04             	sub    $0x4,%esp
f01175f5:	68 5c 94 13 f0       	push   $0xf013945c
f01175fa:	6a 66                	push   $0x66
f01175fc:	68 e1 92 13 f0       	push   $0xf01392e1
f0117601:	e8 aa 8b fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117606:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011760d:	eb 1c                	jmp    f011762b <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011760f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117612:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117615:	89 d0                	mov    %edx,%eax
f0117617:	01 c0                	add    %eax,%eax
f0117619:	01 d0                	add    %edx,%eax
f011761b:	c1 e0 03             	shl    $0x3,%eax
f011761e:	01 c8                	add    %ecx,%eax
f0117620:	05 bc 00 00 00       	add    $0xbc,%eax
f0117625:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117628:	ff 45 d8             	incl   -0x28(%ebp)
f011762b:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011762f:	7e de                	jle    f011760f <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117631:	e8 90 53 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117636:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117639:	e8 46 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011763e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0117641:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117644:	83 ec 08             	sub    $0x8,%esp
f0117647:	6a 04                	push   $0x4
f0117649:	50                   	push   %eax
f011764a:	e8 5f 38 ff ff       	call   f010aeae <set_program_priority>
f011764f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117652:	e8 2d d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117657:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011765a:	74 14                	je     f0117670 <test_priority_normal_and_higher+0x513>
f011765c:	83 ec 04             	sub    $0x4,%esp
f011765f:	68 64 93 13 f0       	push   $0xf0139364
f0117664:	6a 73                	push   $0x73
f0117666:	68 e1 92 13 f0       	push   $0xf01392e1
f011766b:	e8 40 8b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117670:	e8 51 53 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117675:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117678:	74 14                	je     f011768e <test_priority_normal_and_higher+0x531>
f011767a:	83 ec 04             	sub    $0x4,%esp
f011767d:	68 64 93 13 f0       	push   $0xf0139364
f0117682:	6a 74                	push   $0x74
f0117684:	68 e1 92 13 f0       	push   $0xf01392e1
f0117689:	e8 22 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011768e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117691:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117697:	83 f8 14             	cmp    $0x14,%eax
f011769a:	75 1c                	jne    f01176b8 <test_priority_normal_and_higher+0x55b>
f011769c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011769f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01176a5:	83 f8 0f             	cmp    $0xf,%eax
f01176a8:	75 0e                	jne    f01176b8 <test_priority_normal_and_higher+0x55b>
f01176aa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176ad:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01176b3:	83 f8 14             	cmp    $0x14,%eax
f01176b6:	74 14                	je     f01176cc <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f01176b8:	83 ec 04             	sub    $0x4,%esp
f01176bb:	68 5c 94 13 f0       	push   $0xf013945c
f01176c0:	6a 77                	push   $0x77
f01176c2:	68 e1 92 13 f0       	push   $0xf01392e1
f01176c7:	e8 e4 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f01176cc:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01176d3:	eb 1c                	jmp    f01176f1 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01176d5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01176d8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01176db:	89 d0                	mov    %edx,%eax
f01176dd:	01 c0                	add    %eax,%eax
f01176df:	01 d0                	add    %edx,%eax
f01176e1:	c1 e0 03             	shl    $0x3,%eax
f01176e4:	01 c8                	add    %ecx,%eax
f01176e6:	05 bc 00 00 00       	add    $0xbc,%eax
f01176eb:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01176ee:	ff 45 d4             	incl   -0x2c(%ebp)
f01176f1:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01176f5:	7e de                	jle    f01176d5 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01176f7:	e8 ca 52 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01176fc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176ff:	e8 80 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117704:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117707:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011770a:	83 ec 08             	sub    $0x8,%esp
f011770d:	6a 05                	push   $0x5
f011770f:	50                   	push   %eax
f0117710:	e8 99 37 ff ff       	call   f010aeae <set_program_priority>
f0117715:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117718:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011771b:	83 ec 08             	sub    $0x8,%esp
f011771e:	6a 05                	push   $0x5
f0117720:	50                   	push   %eax
f0117721:	e8 88 37 ff ff       	call   f010aeae <set_program_priority>
f0117726:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117729:	e8 56 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f011772e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117731:	74 17                	je     f011774a <test_priority_normal_and_higher+0x5ed>
f0117733:	83 ec 04             	sub    $0x4,%esp
f0117736:	68 64 93 13 f0       	push   $0xf0139364
f011773b:	68 82 00 00 00       	push   $0x82
f0117740:	68 e1 92 13 f0       	push   $0xf01392e1
f0117745:	e8 66 8a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011774a:	e8 77 52 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011774f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117752:	74 17                	je     f011776b <test_priority_normal_and_higher+0x60e>
f0117754:	83 ec 04             	sub    $0x4,%esp
f0117757:	68 64 93 13 f0       	push   $0xf0139364
f011775c:	68 83 00 00 00       	push   $0x83
f0117761:	68 e1 92 13 f0       	push   $0xf01392e1
f0117766:	e8 45 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011776b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011776e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117774:	83 f8 14             	cmp    $0x14,%eax
f0117777:	75 1c                	jne    f0117795 <test_priority_normal_and_higher+0x638>
f0117779:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011777c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117782:	83 f8 1e             	cmp    $0x1e,%eax
f0117785:	75 0e                	jne    f0117795 <test_priority_normal_and_higher+0x638>
f0117787:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011778a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117790:	83 f8 28             	cmp    $0x28,%eax
f0117793:	74 17                	je     f01177ac <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0117795:	83 ec 04             	sub    $0x4,%esp
f0117798:	68 98 94 13 f0       	push   $0xf0139498
f011779d:	68 86 00 00 00       	push   $0x86
f01177a2:	68 e1 92 13 f0       	push   $0xf01392e1
f01177a7:	e8 04 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f01177ac:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01177b3:	eb 1c                	jmp    f01177d1 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01177b5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01177b8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01177bb:	89 d0                	mov    %edx,%eax
f01177bd:	01 c0                	add    %eax,%eax
f01177bf:	01 d0                	add    %edx,%eax
f01177c1:	c1 e0 03             	shl    $0x3,%eax
f01177c4:	01 c8                	add    %ecx,%eax
f01177c6:	05 bc 00 00 00       	add    $0xbc,%eax
f01177cb:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01177ce:	ff 45 d0             	incl   -0x30(%ebp)
f01177d1:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01177d5:	7e de                	jle    f01177b5 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01177d7:	e8 ea 51 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01177dc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177df:	e8 a0 ce fe ff       	call   f0104684 <pf_calculate_free_frames>
f01177e4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01177e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01177ea:	83 ec 08             	sub    $0x8,%esp
f01177ed:	6a 05                	push   $0x5
f01177ef:	50                   	push   %eax
f01177f0:	e8 b9 36 ff ff       	call   f010aeae <set_program_priority>
f01177f5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01177f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01177fb:	83 ec 08             	sub    $0x8,%esp
f01177fe:	6a 04                	push   $0x4
f0117800:	50                   	push   %eax
f0117801:	e8 a8 36 ff ff       	call   f010aeae <set_program_priority>
f0117806:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117809:	e8 76 ce fe ff       	call   f0104684 <pf_calculate_free_frames>
f011780e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117811:	74 17                	je     f011782a <test_priority_normal_and_higher+0x6cd>
f0117813:	83 ec 04             	sub    $0x4,%esp
f0117816:	68 64 93 13 f0       	push   $0xf0139364
f011781b:	68 91 00 00 00       	push   $0x91
f0117820:	68 e1 92 13 f0       	push   $0xf01392e1
f0117825:	e8 86 89 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011782a:	e8 97 51 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011782f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117832:	74 17                	je     f011784b <test_priority_normal_and_higher+0x6ee>
f0117834:	83 ec 04             	sub    $0x4,%esp
f0117837:	68 64 93 13 f0       	push   $0xf0139364
f011783c:	68 92 00 00 00       	push   $0x92
f0117841:	68 e1 92 13 f0       	push   $0xf01392e1
f0117846:	e8 65 89 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011784b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011784e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117854:	83 f8 14             	cmp    $0x14,%eax
f0117857:	75 1c                	jne    f0117875 <test_priority_normal_and_higher+0x718>
f0117859:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011785c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117862:	83 f8 1e             	cmp    $0x1e,%eax
f0117865:	75 0e                	jne    f0117875 <test_priority_normal_and_higher+0x718>
f0117867:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011786a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117870:	83 f8 28             	cmp    $0x28,%eax
f0117873:	74 17                	je     f011788c <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117875:	83 ec 04             	sub    $0x4,%esp
f0117878:	68 98 94 13 f0       	push   $0xf0139498
f011787d:	68 95 00 00 00       	push   $0x95
f0117882:	68 e1 92 13 f0       	push   $0xf01392e1
f0117887:	e8 24 89 fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f011788c:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0117893:	eb 1c                	jmp    f01178b1 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117895:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117898:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011789b:	89 d0                	mov    %edx,%eax
f011789d:	01 c0                	add    %eax,%eax
f011789f:	01 d0                	add    %edx,%eax
f01178a1:	c1 e0 03             	shl    $0x3,%eax
f01178a4:	01 c8                	add    %ecx,%eax
f01178a6:	05 bc 00 00 00       	add    $0xbc,%eax
f01178ab:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01178ae:	ff 45 cc             	incl   -0x34(%ebp)
f01178b1:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01178b5:	7e de                	jle    f0117895 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01178b7:	e8 0a 51 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01178bc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178bf:	e8 c0 cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f01178c4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01178c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01178ca:	83 ec 08             	sub    $0x8,%esp
f01178cd:	6a 05                	push   $0x5
f01178cf:	50                   	push   %eax
f01178d0:	e8 d9 35 ff ff       	call   f010aeae <set_program_priority>
f01178d5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01178d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01178db:	83 ec 08             	sub    $0x8,%esp
f01178de:	6a 04                	push   $0x4
f01178e0:	50                   	push   %eax
f01178e1:	e8 c8 35 ff ff       	call   f010aeae <set_program_priority>
f01178e6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178e9:	e8 96 cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f01178ee:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01178f1:	74 17                	je     f011790a <test_priority_normal_and_higher+0x7ad>
f01178f3:	83 ec 04             	sub    $0x4,%esp
f01178f6:	68 64 93 13 f0       	push   $0xf0139364
f01178fb:	68 a0 00 00 00       	push   $0xa0
f0117900:	68 e1 92 13 f0       	push   $0xf01392e1
f0117905:	e8 a6 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011790a:	e8 b7 50 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011790f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117912:	74 17                	je     f011792b <test_priority_normal_and_higher+0x7ce>
f0117914:	83 ec 04             	sub    $0x4,%esp
f0117917:	68 64 93 13 f0       	push   $0xf0139364
f011791c:	68 a1 00 00 00       	push   $0xa1
f0117921:	68 e1 92 13 f0       	push   $0xf01392e1
f0117926:	e8 85 88 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011792b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011792e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117934:	83 f8 14             	cmp    $0x14,%eax
f0117937:	75 1c                	jne    f0117955 <test_priority_normal_and_higher+0x7f8>
f0117939:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011793c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117942:	83 f8 3c             	cmp    $0x3c,%eax
f0117945:	75 0e                	jne    f0117955 <test_priority_normal_and_higher+0x7f8>
f0117947:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011794a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117950:	83 f8 28             	cmp    $0x28,%eax
f0117953:	74 17                	je     f011796c <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117955:	83 ec 04             	sub    $0x4,%esp
f0117958:	68 98 94 13 f0       	push   $0xf0139498
f011795d:	68 a4 00 00 00       	push   $0xa4
f0117962:	68 e1 92 13 f0       	push   $0xf01392e1
f0117967:	e8 44 88 fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f011796c:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117973:	eb 1c                	jmp    f0117991 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117975:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117978:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011797b:	89 d0                	mov    %edx,%eax
f011797d:	01 c0                	add    %eax,%eax
f011797f:	01 d0                	add    %edx,%eax
f0117981:	c1 e0 03             	shl    $0x3,%eax
f0117984:	01 c8                	add    %ecx,%eax
f0117986:	05 bc 00 00 00       	add    $0xbc,%eax
f011798b:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011798e:	ff 45 c8             	incl   -0x38(%ebp)
f0117991:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117995:	7e de                	jle    f0117975 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117997:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011799e:	eb 1c                	jmp    f01179bc <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01179a0:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01179a3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01179a6:	89 d0                	mov    %edx,%eax
f01179a8:	01 c0                	add    %eax,%eax
f01179aa:	01 d0                	add    %edx,%eax
f01179ac:	c1 e0 03             	shl    $0x3,%eax
f01179af:	01 c8                	add    %ecx,%eax
f01179b1:	05 bc 00 00 00       	add    $0xbc,%eax
f01179b6:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01179b9:	ff 45 c4             	incl   -0x3c(%ebp)
f01179bc:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01179c0:	7e de                	jle    f01179a0 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01179c2:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01179c9:	eb 7d                	jmp    f0117a48 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01179cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01179ce:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01179d5:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01179d8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01179db:	89 d0                	mov    %edx,%eax
f01179dd:	01 c0                	add    %eax,%eax
f01179df:	01 d0                	add    %edx,%eax
f01179e1:	c1 e0 03             	shl    $0x3,%eax
f01179e4:	01 d8                	add    %ebx,%eax
f01179e6:	05 b8 00 00 00       	add    $0xb8,%eax
f01179eb:	8b 00                	mov    (%eax),%eax
f01179ed:	39 c1                	cmp    %eax,%ecx
f01179ef:	74 17                	je     f0117a08 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f01179f1:	83 ec 04             	sub    $0x4,%esp
f01179f4:	68 d4 94 13 f0       	push   $0xf01394d4
f01179f9:	68 b2 00 00 00       	push   $0xb2
f01179fe:	68 e1 92 13 f0       	push   $0xf01392e1
f0117a03:	e8 a8 87 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117a0b:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117a12:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117a15:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117a18:	89 d0                	mov    %edx,%eax
f0117a1a:	01 c0                	add    %eax,%eax
f0117a1c:	01 d0                	add    %edx,%eax
f0117a1e:	c1 e0 03             	shl    $0x3,%eax
f0117a21:	01 d8                	add    %ebx,%eax
f0117a23:	05 c0 00 00 00       	add    $0xc0,%eax
f0117a28:	8b 00                	mov    (%eax),%eax
f0117a2a:	39 c1                	cmp    %eax,%ecx
f0117a2c:	74 17                	je     f0117a45 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f0117a2e:	83 ec 04             	sub    $0x4,%esp
f0117a31:	68 d4 94 13 f0       	push   $0xf01394d4
f0117a36:	68 b5 00 00 00       	push   $0xb5
f0117a3b:	68 e1 92 13 f0       	push   $0xf01392e1
f0117a40:	e8 6b 87 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117a45:	ff 45 c0             	incl   -0x40(%ebp)
f0117a48:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117a4c:	0f 8e 79 ff ff ff    	jle    f01179cb <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a52:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117a59:	eb 7d                	jmp    f0117ad8 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a5b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117a5e:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117a65:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117a68:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117a6b:	89 d0                	mov    %edx,%eax
f0117a6d:	01 c0                	add    %eax,%eax
f0117a6f:	01 d0                	add    %edx,%eax
f0117a71:	c1 e0 03             	shl    $0x3,%eax
f0117a74:	01 d8                	add    %ebx,%eax
f0117a76:	05 b8 00 00 00       	add    $0xb8,%eax
f0117a7b:	8b 00                	mov    (%eax),%eax
f0117a7d:	39 c1                	cmp    %eax,%ecx
f0117a7f:	74 17                	je     f0117a98 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0117a81:	83 ec 04             	sub    $0x4,%esp
f0117a84:	68 d4 94 13 f0       	push   $0xf01394d4
f0117a89:	68 bb 00 00 00       	push   $0xbb
f0117a8e:	68 e1 92 13 f0       	push   $0xf01392e1
f0117a93:	e8 18 87 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a98:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117a9b:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117aa2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117aa5:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117aa8:	89 d0                	mov    %edx,%eax
f0117aaa:	01 c0                	add    %eax,%eax
f0117aac:	01 d0                	add    %edx,%eax
f0117aae:	c1 e0 03             	shl    $0x3,%eax
f0117ab1:	01 d8                	add    %ebx,%eax
f0117ab3:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ab8:	8b 00                	mov    (%eax),%eax
f0117aba:	39 c1                	cmp    %eax,%ecx
f0117abc:	74 17                	je     f0117ad5 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0117abe:	83 ec 04             	sub    $0x4,%esp
f0117ac1:	68 d4 94 13 f0       	push   $0xf01394d4
f0117ac6:	68 be 00 00 00       	push   $0xbe
f0117acb:	68 e1 92 13 f0       	push   $0xf01392e1
f0117ad0:	e8 db 86 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117ad5:	ff 45 bc             	incl   -0x44(%ebp)
f0117ad8:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117adc:	0f 8e 79 ff ff ff    	jle    f0117a5b <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117ae2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117ae9:	eb 7d                	jmp    f0117b68 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117aeb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117aee:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117af5:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117af8:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117afb:	89 d0                	mov    %edx,%eax
f0117afd:	01 c0                	add    %eax,%eax
f0117aff:	01 d0                	add    %edx,%eax
f0117b01:	c1 e0 03             	shl    $0x3,%eax
f0117b04:	01 d8                	add    %ebx,%eax
f0117b06:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b0b:	8b 00                	mov    (%eax),%eax
f0117b0d:	39 c1                	cmp    %eax,%ecx
f0117b0f:	74 17                	je     f0117b28 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0117b11:	83 ec 04             	sub    $0x4,%esp
f0117b14:	68 d4 94 13 f0       	push   $0xf01394d4
f0117b19:	68 c4 00 00 00       	push   $0xc4
f0117b1e:	68 e1 92 13 f0       	push   $0xf01392e1
f0117b23:	e8 88 86 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117b28:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b2b:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117b32:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117b35:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117b38:	89 d0                	mov    %edx,%eax
f0117b3a:	01 c0                	add    %eax,%eax
f0117b3c:	01 d0                	add    %edx,%eax
f0117b3e:	c1 e0 03             	shl    $0x3,%eax
f0117b41:	01 d8                	add    %ebx,%eax
f0117b43:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b48:	8b 00                	mov    (%eax),%eax
f0117b4a:	39 c1                	cmp    %eax,%ecx
f0117b4c:	74 17                	je     f0117b65 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f0117b4e:	83 ec 04             	sub    $0x4,%esp
f0117b51:	68 d4 94 13 f0       	push   $0xf01394d4
f0117b56:	68 c7 00 00 00       	push   $0xc7
f0117b5b:	68 e1 92 13 f0       	push   $0xf01392e1
f0117b60:	e8 4b 86 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117b65:	ff 45 b8             	incl   -0x48(%ebp)
f0117b68:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117b6c:	0f 8e 79 ff ff ff    	jle    f0117aeb <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117b72:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117b79:	75 6e 61 
f0117b7c:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117b83:	6c 00 00 
f0117b86:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117b8c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117b91:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b96:	89 d7                	mov    %edx,%edi
f0117b98:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117b9a:	83 ec 0c             	sub    $0xc,%esp
f0117b9d:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117ba3:	50                   	push   %eax
f0117ba4:	e8 1a a0 fe ff       	call   f0101bc3 <execute_command>
f0117ba9:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f0117bac:	eb 10                	jmp    f0117bbe <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0117bae:	83 ec 0c             	sub    $0xc,%esp
f0117bb1:	68 08 95 13 f0       	push   $0xf0139508
f0117bb6:	e8 76 92 fe ff       	call   f0100e31 <cprintf>
f0117bbb:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0117bbe:	90                   	nop
f0117bbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117bc2:	5b                   	pop    %ebx
f0117bc3:	5e                   	pop    %esi
f0117bc4:	5f                   	pop    %edi
f0117bc5:	5d                   	pop    %ebp
f0117bc6:	c3                   	ret    

f0117bc7 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117bc7:	55                   	push   %ebp
f0117bc8:	89 e5                	mov    %esp,%ebp
f0117bca:	57                   	push   %edi
f0117bcb:	56                   	push   %esi
f0117bcc:	53                   	push   %ebx
f0117bcd:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117bd3:	a0 3c eb 18 f0       	mov    0xf018eb3c,%al
f0117bd8:	84 c0                	test   %al,%al
f0117bda:	0f 84 1b 0a 00 00    	je     f01185fb <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117be0:	c6 05 3c eb 18 f0 00 	movb   $0x0,0xf018eb3c
		char command[100] = "load fos_add 20";
f0117be7:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117bed:	bb 44 95 13 f0       	mov    $0xf0139544,%ebx
f0117bf2:	ba 04 00 00 00       	mov    $0x4,%edx
f0117bf7:	89 c7                	mov    %eax,%edi
f0117bf9:	89 de                	mov    %ebx,%esi
f0117bfb:	89 d1                	mov    %edx,%ecx
f0117bfd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117bff:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117c05:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117c0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0117c0f:	89 d7                	mov    %edx,%edi
f0117c11:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117c13:	83 ec 0c             	sub    $0xc,%esp
f0117c16:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117c1c:	50                   	push   %eax
f0117c1d:	e8 a1 9f fe ff       	call   f0101bc3 <execute_command>
f0117c22:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117c25:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117c2b:	bb 4c 98 13 f0       	mov    $0xf013984c,%ebx
f0117c30:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117c35:	89 c7                	mov    %eax,%edi
f0117c37:	89 de                	mov    %ebx,%esi
f0117c39:	89 d1                	mov    %edx,%ecx
f0117c3b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117c3d:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117c43:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117c48:	b0 00                	mov    $0x0,%al
f0117c4a:	89 d7                	mov    %edx,%edi
f0117c4c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117c4e:	83 ec 0c             	sub    $0xc,%esp
f0117c51:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117c57:	50                   	push   %eax
f0117c58:	e8 66 9f fe ff       	call   f0101bc3 <execute_command>
f0117c5d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117c60:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117c66:	bb b0 98 13 f0       	mov    $0xf01398b0,%ebx
f0117c6b:	ba 17 00 00 00       	mov    $0x17,%edx
f0117c70:	89 c7                	mov    %eax,%edi
f0117c72:	89 de                	mov    %ebx,%esi
f0117c74:	89 d1                	mov    %edx,%ecx
f0117c76:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117c78:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117c7e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117c83:	b0 00                	mov    $0x0,%al
f0117c85:	89 d7                	mov    %edx,%edi
f0117c87:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117c89:	83 ec 0c             	sub    $0xc,%esp
f0117c8c:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117c92:	50                   	push   %eax
f0117c93:	e8 2b 9f fe ff       	call   f0101bc3 <execute_command>
f0117c98:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117c9b:	83 ec 04             	sub    $0x4,%esp
f0117c9e:	6a 00                	push   $0x0
f0117ca0:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117ca3:	50                   	push   %eax
f0117ca4:	68 00 10 00 00       	push   $0x1000
f0117ca9:	e8 20 1d ff ff       	call   f01099ce <envid2env>
f0117cae:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117cb1:	83 ec 04             	sub    $0x4,%esp
f0117cb4:	6a 00                	push   $0x0
f0117cb6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117cb9:	50                   	push   %eax
f0117cba:	68 01 10 00 00       	push   $0x1001
f0117cbf:	e8 0a 1d ff ff       	call   f01099ce <envid2env>
f0117cc4:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117cc7:	83 ec 04             	sub    $0x4,%esp
f0117cca:	6a 00                	push   $0x0
f0117ccc:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117ccf:	50                   	push   %eax
f0117cd0:	68 02 10 00 00       	push   $0x1002
f0117cd5:	e8 f4 1c ff ff       	call   f01099ce <envid2env>
f0117cda:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117cdd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ce0:	85 c0                	test   %eax,%eax
f0117ce2:	74 0e                	je     f0117cf2 <test_priority_normal_and_lower+0x12b>
f0117ce4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ce7:	85 c0                	test   %eax,%eax
f0117ce9:	74 07                	je     f0117cf2 <test_priority_normal_and_lower+0x12b>
f0117ceb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117cee:	85 c0                	test   %eax,%eax
f0117cf0:	75 17                	jne    f0117d09 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117cf2:	83 ec 04             	sub    $0x4,%esp
f0117cf5:	68 c8 92 13 f0       	push   $0xf01392c8
f0117cfa:	68 f2 00 00 00       	push   $0xf2
f0117cff:	68 e1 92 13 f0       	push   $0xf01392e1
f0117d04:	e8 a7 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117d09:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d0c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d12:	83 f8 14             	cmp    $0x14,%eax
f0117d15:	75 1c                	jne    f0117d33 <test_priority_normal_and_lower+0x16c>
f0117d17:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d1a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d20:	83 f8 1e             	cmp    $0x1e,%eax
f0117d23:	75 0e                	jne    f0117d33 <test_priority_normal_and_lower+0x16c>
f0117d25:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d28:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d2e:	83 f8 28             	cmp    $0x28,%eax
f0117d31:	74 17                	je     f0117d4a <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117d33:	83 ec 04             	sub    $0x4,%esp
f0117d36:	68 70 96 13 f0       	push   $0xf0139670
f0117d3b:	68 f5 00 00 00       	push   $0xf5
f0117d40:	68 e1 92 13 f0       	push   $0xf01392e1
f0117d45:	e8 66 84 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117d4a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117d51:	eb 47                	jmp    f0117d9a <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117d53:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117d56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117d59:	89 d0                	mov    %edx,%eax
f0117d5b:	01 c0                	add    %eax,%eax
f0117d5d:	01 d0                	add    %edx,%eax
f0117d5f:	c1 e0 03             	shl    $0x3,%eax
f0117d62:	01 c8                	add    %ecx,%eax
f0117d64:	05 b8 00 00 00       	add    $0xb8,%eax
f0117d69:	8b 10                	mov    (%eax),%edx
f0117d6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117d6e:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117d75:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117d78:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117d7b:	89 d0                	mov    %edx,%eax
f0117d7d:	01 c0                	add    %eax,%eax
f0117d7f:	01 d0                	add    %edx,%eax
f0117d81:	c1 e0 03             	shl    $0x3,%eax
f0117d84:	01 c8                	add    %ecx,%eax
f0117d86:	05 c0 00 00 00       	add    $0xc0,%eax
f0117d8b:	8b 10                	mov    (%eax),%edx
f0117d8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117d90:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117d97:	ff 45 e4             	incl   -0x1c(%ebp)
f0117d9a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117d9e:	7e b3                	jle    f0117d53 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117da0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117da7:	eb 47                	jmp    f0117df0 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117da9:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117dac:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117daf:	89 d0                	mov    %edx,%eax
f0117db1:	01 c0                	add    %eax,%eax
f0117db3:	01 d0                	add    %edx,%eax
f0117db5:	c1 e0 03             	shl    $0x3,%eax
f0117db8:	01 c8                	add    %ecx,%eax
f0117dba:	05 b8 00 00 00       	add    $0xb8,%eax
f0117dbf:	8b 10                	mov    (%eax),%edx
f0117dc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117dc4:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117dcb:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117dce:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117dd1:	89 d0                	mov    %edx,%eax
f0117dd3:	01 c0                	add    %eax,%eax
f0117dd5:	01 d0                	add    %edx,%eax
f0117dd7:	c1 e0 03             	shl    $0x3,%eax
f0117dda:	01 c8                	add    %ecx,%eax
f0117ddc:	05 c0 00 00 00       	add    $0xc0,%eax
f0117de1:	8b 10                	mov    (%eax),%edx
f0117de3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117de6:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117ded:	ff 45 e0             	incl   -0x20(%ebp)
f0117df0:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117df4:	7e b3                	jle    f0117da9 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117df6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117dfd:	eb 47                	jmp    f0117e46 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117dff:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117e02:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117e05:	89 d0                	mov    %edx,%eax
f0117e07:	01 c0                	add    %eax,%eax
f0117e09:	01 d0                	add    %edx,%eax
f0117e0b:	c1 e0 03             	shl    $0x3,%eax
f0117e0e:	01 c8                	add    %ecx,%eax
f0117e10:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e15:	8b 10                	mov    (%eax),%edx
f0117e17:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117e1a:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117e21:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117e24:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117e27:	89 d0                	mov    %edx,%eax
f0117e29:	01 c0                	add    %eax,%eax
f0117e2b:	01 d0                	add    %edx,%eax
f0117e2d:	c1 e0 03             	shl    $0x3,%eax
f0117e30:	01 c8                	add    %ecx,%eax
f0117e32:	05 c0 00 00 00       	add    $0xc0,%eax
f0117e37:	8b 10                	mov    (%eax),%edx
f0117e39:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117e3c:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117e43:	ff 45 dc             	incl   -0x24(%ebp)
f0117e46:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117e4a:	7e b3                	jle    f0117dff <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117e4c:	e8 75 4b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117e51:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117e54:	e8 2b c8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117e59:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117e5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e5f:	83 ec 08             	sub    $0x8,%esp
f0117e62:	6a 03                	push   $0x3
f0117e64:	50                   	push   %eax
f0117e65:	e8 44 30 ff ff       	call   f010aeae <set_program_priority>
f0117e6a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117e6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e70:	83 ec 08             	sub    $0x8,%esp
f0117e73:	6a 03                	push   $0x3
f0117e75:	50                   	push   %eax
f0117e76:	e8 33 30 ff ff       	call   f010aeae <set_program_priority>
f0117e7b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117e7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e81:	83 ec 08             	sub    $0x8,%esp
f0117e84:	6a 03                	push   $0x3
f0117e86:	50                   	push   %eax
f0117e87:	e8 22 30 ff ff       	call   f010aeae <set_program_priority>
f0117e8c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117e8f:	e8 f0 c7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117e94:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117e97:	74 17                	je     f0117eb0 <test_priority_normal_and_lower+0x2e9>
f0117e99:	83 ec 04             	sub    $0x4,%esp
f0117e9c:	68 64 93 13 f0       	push   $0xf0139364
f0117ea1:	68 11 01 00 00       	push   $0x111
f0117ea6:	68 e1 92 13 f0       	push   $0xf01392e1
f0117eab:	e8 00 83 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117eb0:	e8 11 4b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117eb5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117eb8:	74 17                	je     f0117ed1 <test_priority_normal_and_lower+0x30a>
f0117eba:	83 ec 04             	sub    $0x4,%esp
f0117ebd:	68 64 93 13 f0       	push   $0xf0139364
f0117ec2:	68 12 01 00 00       	push   $0x112
f0117ec7:	68 e1 92 13 f0       	push   $0xf01392e1
f0117ecc:	e8 df 82 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117ed1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ed4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117eda:	83 f8 14             	cmp    $0x14,%eax
f0117edd:	75 1c                	jne    f0117efb <test_priority_normal_and_lower+0x334>
f0117edf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ee2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ee8:	83 f8 1e             	cmp    $0x1e,%eax
f0117eeb:	75 0e                	jne    f0117efb <test_priority_normal_and_lower+0x334>
f0117eed:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ef0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ef6:	83 f8 28             	cmp    $0x28,%eax
f0117ef9:	74 17                	je     f0117f12 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117efb:	83 ec 04             	sub    $0x4,%esp
f0117efe:	68 90 93 13 f0       	push   $0xf0139390
f0117f03:	68 15 01 00 00       	push   $0x115
f0117f08:	68 e1 92 13 f0       	push   $0xf01392e1
f0117f0d:	e8 9e 82 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117f12:	e8 af 4a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117f17:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f1a:	e8 65 c7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117f1f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117f22:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f25:	83 ec 08             	sub    $0x8,%esp
f0117f28:	6a 02                	push   $0x2
f0117f2a:	50                   	push   %eax
f0117f2b:	e8 7e 2f ff ff       	call   f010aeae <set_program_priority>
f0117f30:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117f33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f36:	83 ec 08             	sub    $0x8,%esp
f0117f39:	6a 02                	push   $0x2
f0117f3b:	50                   	push   %eax
f0117f3c:	e8 6d 2f ff ff       	call   f010aeae <set_program_priority>
f0117f41:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117f44:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117f47:	83 ec 08             	sub    $0x8,%esp
f0117f4a:	6a 02                	push   $0x2
f0117f4c:	50                   	push   %eax
f0117f4d:	e8 5c 2f ff ff       	call   f010aeae <set_program_priority>
f0117f52:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117f55:	e8 2a c7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117f5a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117f5d:	74 17                	je     f0117f76 <test_priority_normal_and_lower+0x3af>
f0117f5f:	83 ec 04             	sub    $0x4,%esp
f0117f62:	68 64 93 13 f0       	push   $0xf0139364
f0117f67:	68 1f 01 00 00       	push   $0x11f
f0117f6c:	68 e1 92 13 f0       	push   $0xf01392e1
f0117f71:	e8 3a 82 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117f76:	e8 4b 4a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117f7b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117f7e:	74 21                	je     f0117fa1 <test_priority_normal_and_lower+0x3da>
f0117f80:	e8 41 4a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117f85:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117f88:	29 c2                	sub    %eax,%edx
f0117f8a:	89 d0                	mov    %edx,%eax
f0117f8c:	50                   	push   %eax
f0117f8d:	68 e4 93 13 f0       	push   $0xf01393e4
f0117f92:	68 20 01 00 00       	push   $0x120
f0117f97:	68 e1 92 13 f0       	push   $0xf01392e1
f0117f9c:	e8 0f 82 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117fa1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117fa4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117faa:	83 f8 0a             	cmp    $0xa,%eax
f0117fad:	75 1c                	jne    f0117fcb <test_priority_normal_and_lower+0x404>
f0117faf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117fb2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117fb8:	83 f8 0f             	cmp    $0xf,%eax
f0117fbb:	75 0e                	jne    f0117fcb <test_priority_normal_and_lower+0x404>
f0117fbd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117fc0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117fc6:	83 f8 14             	cmp    $0x14,%eax
f0117fc9:	74 17                	je     f0117fe2 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117fcb:	83 ec 04             	sub    $0x4,%esp
f0117fce:	68 14 94 13 f0       	push   $0xf0139414
f0117fd3:	68 23 01 00 00       	push   $0x123
f0117fd8:	68 e1 92 13 f0       	push   $0xf01392e1
f0117fdd:	e8 ce 81 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117fe2:	e8 df 49 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117fe7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117fea:	e8 95 c6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117fef:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117ff2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ff5:	83 ec 08             	sub    $0x8,%esp
f0117ff8:	6a 02                	push   $0x2
f0117ffa:	50                   	push   %eax
f0117ffb:	e8 ae 2e ff ff       	call   f010aeae <set_program_priority>
f0118000:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0118003:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118006:	83 ec 08             	sub    $0x8,%esp
f0118009:	6a 02                	push   $0x2
f011800b:	50                   	push   %eax
f011800c:	e8 9d 2e ff ff       	call   f010aeae <set_program_priority>
f0118011:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0118014:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118017:	83 ec 08             	sub    $0x8,%esp
f011801a:	6a 02                	push   $0x2
f011801c:	50                   	push   %eax
f011801d:	e8 8c 2e ff ff       	call   f010aeae <set_program_priority>
f0118022:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118025:	e8 5a c6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011802a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011802d:	74 17                	je     f0118046 <test_priority_normal_and_lower+0x47f>
f011802f:	83 ec 04             	sub    $0x4,%esp
f0118032:	68 64 93 13 f0       	push   $0xf0139364
f0118037:	68 2d 01 00 00       	push   $0x12d
f011803c:	68 e1 92 13 f0       	push   $0xf01392e1
f0118041:	e8 6a 81 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0118046:	e8 7b 49 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011804b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011804e:	74 21                	je     f0118071 <test_priority_normal_and_lower+0x4aa>
f0118050:	e8 71 49 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118055:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0118058:	29 c2                	sub    %eax,%edx
f011805a:	89 d0                	mov    %edx,%eax
f011805c:	50                   	push   %eax
f011805d:	68 e4 93 13 f0       	push   $0xf01393e4
f0118062:	68 2e 01 00 00       	push   $0x12e
f0118067:	68 e1 92 13 f0       	push   $0xf01392e1
f011806c:	e8 3f 81 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118071:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118074:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011807a:	83 f8 0a             	cmp    $0xa,%eax
f011807d:	75 1c                	jne    f011809b <test_priority_normal_and_lower+0x4d4>
f011807f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118082:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118088:	83 f8 0f             	cmp    $0xf,%eax
f011808b:	75 0e                	jne    f011809b <test_priority_normal_and_lower+0x4d4>
f011808d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118090:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118096:	83 f8 0a             	cmp    $0xa,%eax
f0118099:	74 17                	je     f01180b2 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f011809b:	83 ec 04             	sub    $0x4,%esp
f011809e:	68 14 94 13 f0       	push   $0xf0139414
f01180a3:	68 31 01 00 00       	push   $0x131
f01180a8:	68 e1 92 13 f0       	push   $0xf01392e1
f01180ad:	e8 fe 80 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f01180b2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01180b9:	eb 7d                	jmp    f0118138 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01180bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01180be:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01180c5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01180c8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01180cb:	89 d0                	mov    %edx,%eax
f01180cd:	01 c0                	add    %eax,%eax
f01180cf:	01 d0                	add    %edx,%eax
f01180d1:	c1 e0 03             	shl    $0x3,%eax
f01180d4:	01 d8                	add    %ebx,%eax
f01180d6:	05 b8 00 00 00       	add    $0xb8,%eax
f01180db:	8b 00                	mov    (%eax),%eax
f01180dd:	39 c1                	cmp    %eax,%ecx
f01180df:	74 17                	je     f01180f8 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f01180e1:	83 ec 04             	sub    $0x4,%esp
f01180e4:	68 d4 94 13 f0       	push   $0xf01394d4
f01180e9:	68 36 01 00 00       	push   $0x136
f01180ee:	68 e1 92 13 f0       	push   $0xf01392e1
f01180f3:	e8 b8 80 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01180f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01180fb:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0118102:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0118105:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118108:	89 d0                	mov    %edx,%eax
f011810a:	01 c0                	add    %eax,%eax
f011810c:	01 d0                	add    %edx,%eax
f011810e:	c1 e0 03             	shl    $0x3,%eax
f0118111:	01 d8                	add    %ebx,%eax
f0118113:	05 c0 00 00 00       	add    $0xc0,%eax
f0118118:	8b 00                	mov    (%eax),%eax
f011811a:	39 c1                	cmp    %eax,%ecx
f011811c:	74 17                	je     f0118135 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f011811e:	83 ec 04             	sub    $0x4,%esp
f0118121:	68 d4 94 13 f0       	push   $0xf01394d4
f0118126:	68 39 01 00 00       	push   $0x139
f011812b:	68 e1 92 13 f0       	push   $0xf01392e1
f0118130:	e8 7b 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0118135:	ff 45 d8             	incl   -0x28(%ebp)
f0118138:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f011813c:	0f 8e 79 ff ff ff    	jle    f01180bb <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0118142:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0118149:	eb 7d                	jmp    f01181c8 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011814b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011814e:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0118155:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118158:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011815b:	89 d0                	mov    %edx,%eax
f011815d:	01 c0                	add    %eax,%eax
f011815f:	01 d0                	add    %edx,%eax
f0118161:	c1 e0 03             	shl    $0x3,%eax
f0118164:	01 d8                	add    %ebx,%eax
f0118166:	05 b8 00 00 00       	add    $0xb8,%eax
f011816b:	8b 00                	mov    (%eax),%eax
f011816d:	39 c1                	cmp    %eax,%ecx
f011816f:	74 17                	je     f0118188 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0118171:	83 ec 04             	sub    $0x4,%esp
f0118174:	68 d4 94 13 f0       	push   $0xf01394d4
f0118179:	68 3f 01 00 00       	push   $0x13f
f011817e:	68 e1 92 13 f0       	push   $0xf01392e1
f0118183:	e8 28 80 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0118188:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011818b:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0118192:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118195:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0118198:	89 d0                	mov    %edx,%eax
f011819a:	01 c0                	add    %eax,%eax
f011819c:	01 d0                	add    %edx,%eax
f011819e:	c1 e0 03             	shl    $0x3,%eax
f01181a1:	01 d8                	add    %ebx,%eax
f01181a3:	05 c0 00 00 00       	add    $0xc0,%eax
f01181a8:	8b 00                	mov    (%eax),%eax
f01181aa:	39 c1                	cmp    %eax,%ecx
f01181ac:	74 17                	je     f01181c5 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f01181ae:	83 ec 04             	sub    $0x4,%esp
f01181b1:	68 d4 94 13 f0       	push   $0xf01394d4
f01181b6:	68 42 01 00 00       	push   $0x142
f01181bb:	68 e1 92 13 f0       	push   $0xf01392e1
f01181c0:	e8 eb 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01181c5:	ff 45 d4             	incl   -0x2c(%ebp)
f01181c8:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01181cc:	0f 8e 79 ff ff ff    	jle    f011814b <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01181d2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01181d9:	eb 7d                	jmp    f0118258 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01181db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01181de:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01181e5:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01181e8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01181eb:	89 d0                	mov    %edx,%eax
f01181ed:	01 c0                	add    %eax,%eax
f01181ef:	01 d0                	add    %edx,%eax
f01181f1:	c1 e0 03             	shl    $0x3,%eax
f01181f4:	01 d8                	add    %ebx,%eax
f01181f6:	05 b8 00 00 00       	add    $0xb8,%eax
f01181fb:	8b 00                	mov    (%eax),%eax
f01181fd:	39 c1                	cmp    %eax,%ecx
f01181ff:	74 17                	je     f0118218 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0118201:	83 ec 04             	sub    $0x4,%esp
f0118204:	68 d4 94 13 f0       	push   $0xf01394d4
f0118209:	68 48 01 00 00       	push   $0x148
f011820e:	68 e1 92 13 f0       	push   $0xf01392e1
f0118213:	e8 98 7f fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118218:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011821b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0118222:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118225:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118228:	89 d0                	mov    %edx,%eax
f011822a:	01 c0                	add    %eax,%eax
f011822c:	01 d0                	add    %edx,%eax
f011822e:	c1 e0 03             	shl    $0x3,%eax
f0118231:	01 d8                	add    %ebx,%eax
f0118233:	05 c0 00 00 00       	add    $0xc0,%eax
f0118238:	8b 00                	mov    (%eax),%eax
f011823a:	39 c1                	cmp    %eax,%ecx
f011823c:	74 17                	je     f0118255 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f011823e:	83 ec 04             	sub    $0x4,%esp
f0118241:	68 d4 94 13 f0       	push   $0xf01394d4
f0118246:	68 4b 01 00 00       	push   $0x14b
f011824b:	68 e1 92 13 f0       	push   $0xf01392e1
f0118250:	e8 5b 7f fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0118255:	ff 45 d0             	incl   -0x30(%ebp)
f0118258:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011825c:	0f 8e 79 ff ff ff    	jle    f01181db <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0118262:	e8 5f 47 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118267:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011826a:	e8 15 c4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011826f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0118272:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118275:	83 ec 08             	sub    $0x8,%esp
f0118278:	6a 01                	push   $0x1
f011827a:	50                   	push   %eax
f011827b:	e8 2e 2c ff ff       	call   f010aeae <set_program_priority>
f0118280:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0118283:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118286:	83 ec 08             	sub    $0x8,%esp
f0118289:	6a 01                	push   $0x1
f011828b:	50                   	push   %eax
f011828c:	e8 1d 2c ff ff       	call   f010aeae <set_program_priority>
f0118291:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0118294:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118297:	83 ec 08             	sub    $0x8,%esp
f011829a:	6a 01                	push   $0x1
f011829c:	50                   	push   %eax
f011829d:	e8 0c 2c ff ff       	call   f010aeae <set_program_priority>
f01182a2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01182a5:	e8 da c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01182aa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01182ad:	74 17                	je     f01182c6 <test_priority_normal_and_lower+0x6ff>
f01182af:	83 ec 04             	sub    $0x4,%esp
f01182b2:	68 64 93 13 f0       	push   $0xf0139364
f01182b7:	68 54 01 00 00       	push   $0x154
f01182bc:	68 e1 92 13 f0       	push   $0xf01392e1
f01182c1:	e8 ea 7e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01182c6:	e8 fb 46 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01182cb:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01182ce:	83 f8 0d             	cmp    $0xd,%eax
f01182d1:	74 17                	je     f01182ea <test_priority_normal_and_lower+0x723>
f01182d3:	83 ec 04             	sub    $0x4,%esp
f01182d6:	68 bc 96 13 f0       	push   $0xf01396bc
f01182db:	68 55 01 00 00       	push   $0x155
f01182e0:	68 e1 92 13 f0       	push   $0xf01392e1
f01182e5:	e8 c6 7e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01182ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01182ed:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01182f3:	83 f8 05             	cmp    $0x5,%eax
f01182f6:	75 1c                	jne    f0118314 <test_priority_normal_and_lower+0x74d>
f01182f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01182fb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118301:	83 f8 07             	cmp    $0x7,%eax
f0118304:	75 0e                	jne    f0118314 <test_priority_normal_and_lower+0x74d>
f0118306:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118309:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011830f:	83 f8 05             	cmp    $0x5,%eax
f0118312:	74 17                	je     f011832b <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0118314:	83 ec 04             	sub    $0x4,%esp
f0118317:	68 04 97 13 f0       	push   $0xf0139704
f011831c:	68 58 01 00 00       	push   $0x158
f0118321:	68 e1 92 13 f0       	push   $0xf01392e1
f0118326:	e8 85 7e fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f011832b:	e8 96 46 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118330:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118333:	e8 4c c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118338:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011833b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011833e:	83 ec 08             	sub    $0x8,%esp
f0118341:	6a 01                	push   $0x1
f0118343:	50                   	push   %eax
f0118344:	e8 65 2b ff ff       	call   f010aeae <set_program_priority>
f0118349:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011834c:	e8 33 c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118351:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118354:	74 17                	je     f011836d <test_priority_normal_and_lower+0x7a6>
f0118356:	83 ec 04             	sub    $0x4,%esp
f0118359:	68 64 93 13 f0       	push   $0xf0139364
f011835e:	68 5e 01 00 00       	push   $0x15e
f0118363:	68 e1 92 13 f0       	push   $0xf01392e1
f0118368:	e8 43 7e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011836d:	e8 54 46 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118372:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0118375:	83 f8 03             	cmp    $0x3,%eax
f0118378:	74 17                	je     f0118391 <test_priority_normal_and_lower+0x7ca>
f011837a:	83 ec 04             	sub    $0x4,%esp
f011837d:	68 64 93 13 f0       	push   $0xf0139364
f0118382:	68 5f 01 00 00       	push   $0x15f
f0118387:	68 e1 92 13 f0       	push   $0xf01392e1
f011838c:	e8 1f 7e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118391:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118394:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011839a:	83 f8 02             	cmp    $0x2,%eax
f011839d:	75 1c                	jne    f01183bb <test_priority_normal_and_lower+0x7f4>
f011839f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01183a2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01183a8:	83 f8 07             	cmp    $0x7,%eax
f01183ab:	75 0e                	jne    f01183bb <test_priority_normal_and_lower+0x7f4>
f01183ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01183b0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01183b6:	83 f8 05             	cmp    $0x5,%eax
f01183b9:	74 17                	je     f01183d2 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f01183bb:	83 ec 04             	sub    $0x4,%esp
f01183be:	68 98 94 13 f0       	push   $0xf0139498
f01183c3:	68 62 01 00 00       	push   $0x162
f01183c8:	68 e1 92 13 f0       	push   $0xf01392e1
f01183cd:	e8 de 7d fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f01183d2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01183d9:	e9 83 00 00 00       	jmp    f0118461 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01183de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01183e1:	83 c0 08             	add    $0x8,%eax
f01183e4:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01183eb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01183ee:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01183f1:	89 d0                	mov    %edx,%eax
f01183f3:	01 c0                	add    %eax,%eax
f01183f5:	01 d0                	add    %edx,%eax
f01183f7:	c1 e0 03             	shl    $0x3,%eax
f01183fa:	01 d8                	add    %ebx,%eax
f01183fc:	05 b8 00 00 00       	add    $0xb8,%eax
f0118401:	8b 00                	mov    (%eax),%eax
f0118403:	39 c1                	cmp    %eax,%ecx
f0118405:	74 17                	je     f011841e <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118407:	83 ec 04             	sub    $0x4,%esp
f011840a:	68 34 97 13 f0       	push   $0xf0139734
f011840f:	68 67 01 00 00       	push   $0x167
f0118414:	68 e1 92 13 f0       	push   $0xf01392e1
f0118419:	e8 92 7d fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011841e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118421:	83 c0 08             	add    $0x8,%eax
f0118424:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011842b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011842e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118431:	89 d0                	mov    %edx,%eax
f0118433:	01 c0                	add    %eax,%eax
f0118435:	01 d0                	add    %edx,%eax
f0118437:	c1 e0 03             	shl    $0x3,%eax
f011843a:	01 d8                	add    %ebx,%eax
f011843c:	05 c0 00 00 00       	add    $0xc0,%eax
f0118441:	8b 00                	mov    (%eax),%eax
f0118443:	39 c1                	cmp    %eax,%ecx
f0118445:	74 17                	je     f011845e <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118447:	83 ec 04             	sub    $0x4,%esp
f011844a:	68 34 97 13 f0       	push   $0xf0139734
f011844f:	68 6a 01 00 00       	push   $0x16a
f0118454:	68 e1 92 13 f0       	push   $0xf01392e1
f0118459:	e8 52 7d fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011845e:	ff 45 cc             	incl   -0x34(%ebp)
f0118461:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0118465:	0f 8e 73 ff ff ff    	jle    f01183de <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011846b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0118472:	e9 83 00 00 00       	jmp    f01184fa <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0118477:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011847a:	83 c0 03             	add    $0x3,%eax
f011847d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0118484:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118487:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011848a:	89 d0                	mov    %edx,%eax
f011848c:	01 c0                	add    %eax,%eax
f011848e:	01 d0                	add    %edx,%eax
f0118490:	c1 e0 03             	shl    $0x3,%eax
f0118493:	01 d8                	add    %ebx,%eax
f0118495:	05 b8 00 00 00       	add    $0xb8,%eax
f011849a:	8b 00                	mov    (%eax),%eax
f011849c:	39 c1                	cmp    %eax,%ecx
f011849e:	74 17                	je     f01184b7 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01184a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01184a3:	68 a0 97 13 f0       	push   $0xf01397a0
f01184a8:	68 70 01 00 00       	push   $0x170
f01184ad:	68 e1 92 13 f0       	push   $0xf01392e1
f01184b2:	e8 f9 7c fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01184b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184ba:	83 c0 03             	add    $0x3,%eax
f01184bd:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01184c4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01184c7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01184ca:	89 d0                	mov    %edx,%eax
f01184cc:	01 c0                	add    %eax,%eax
f01184ce:	01 d0                	add    %edx,%eax
f01184d0:	c1 e0 03             	shl    $0x3,%eax
f01184d3:	01 d8                	add    %ebx,%eax
f01184d5:	05 c0 00 00 00       	add    $0xc0,%eax
f01184da:	8b 00                	mov    (%eax),%eax
f01184dc:	39 c1                	cmp    %eax,%ecx
f01184de:	74 17                	je     f01184f7 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01184e0:	83 ec 04             	sub    $0x4,%esp
f01184e3:	68 34 97 13 f0       	push   $0xf0139734
f01184e8:	68 73 01 00 00       	push   $0x173
f01184ed:	68 e1 92 13 f0       	push   $0xf01392e1
f01184f2:	e8 b9 7c fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01184f7:	ff 45 c8             	incl   -0x38(%ebp)
f01184fa:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f01184fe:	0f 8e 73 ff ff ff    	jle    f0118477 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118504:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011850b:	e9 83 00 00 00       	jmp    f0118593 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118510:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118513:	83 c0 05             	add    $0x5,%eax
f0118516:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011851d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118520:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118523:	89 d0                	mov    %edx,%eax
f0118525:	01 c0                	add    %eax,%eax
f0118527:	01 d0                	add    %edx,%eax
f0118529:	c1 e0 03             	shl    $0x3,%eax
f011852c:	01 d8                	add    %ebx,%eax
f011852e:	05 b8 00 00 00       	add    $0xb8,%eax
f0118533:	8b 00                	mov    (%eax),%eax
f0118535:	39 c1                	cmp    %eax,%ecx
f0118537:	74 17                	je     f0118550 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118539:	83 ec 04             	sub    $0x4,%esp
f011853c:	68 34 97 13 f0       	push   $0xf0139734
f0118541:	68 79 01 00 00       	push   $0x179
f0118546:	68 e1 92 13 f0       	push   $0xf01392e1
f011854b:	e8 60 7c fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118550:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118553:	83 c0 05             	add    $0x5,%eax
f0118556:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011855d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118560:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118563:	89 d0                	mov    %edx,%eax
f0118565:	01 c0                	add    %eax,%eax
f0118567:	01 d0                	add    %edx,%eax
f0118569:	c1 e0 03             	shl    $0x3,%eax
f011856c:	01 d8                	add    %ebx,%eax
f011856e:	05 c0 00 00 00       	add    $0xc0,%eax
f0118573:	8b 00                	mov    (%eax),%eax
f0118575:	39 c1                	cmp    %eax,%ecx
f0118577:	74 17                	je     f0118590 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118579:	83 ec 04             	sub    $0x4,%esp
f011857c:	68 34 97 13 f0       	push   $0xf0139734
f0118581:	68 7c 01 00 00       	push   $0x17c
f0118586:	68 e1 92 13 f0       	push   $0xf01392e1
f011858b:	e8 20 7c fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118590:	ff 45 c4             	incl   -0x3c(%ebp)
f0118593:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0118597:	0f 8e 73 ff ff ff    	jle    f0118510 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011859d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01185a0:	83 ec 08             	sub    $0x8,%esp
f01185a3:	6a 05                	push   $0x5
f01185a5:	50                   	push   %eax
f01185a6:	e8 03 29 ff ff       	call   f010aeae <set_program_priority>
f01185ab:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01185ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01185b1:	83 ec 08             	sub    $0x8,%esp
f01185b4:	6a 05                	push   $0x5
f01185b6:	50                   	push   %eax
f01185b7:	e8 f2 28 ff ff       	call   f010aeae <set_program_priority>
f01185bc:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f01185bf:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f01185c6:	75 6e 61 
f01185c9:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f01185d0:	6c 00 00 
f01185d3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01185d9:	b9 17 00 00 00       	mov    $0x17,%ecx
f01185de:	b8 00 00 00 00       	mov    $0x0,%eax
f01185e3:	89 d7                	mov    %edx,%edi
f01185e5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01185e7:	83 ec 0c             	sub    $0xc,%esp
f01185ea:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01185f0:	50                   	push   %eax
f01185f1:	e8 cd 95 fe ff       	call   f0101bc3 <execute_command>
f01185f6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f01185f9:	eb 10                	jmp    f011860b <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01185fb:	83 ec 0c             	sub    $0xc,%esp
f01185fe:	68 10 98 13 f0       	push   $0xf0139810
f0118603:	e8 29 88 fe ff       	call   f0100e31 <cprintf>
f0118608:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011860b:	90                   	nop
f011860c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011860f:	5b                   	pop    %ebx
f0118610:	5e                   	pop    %esi
f0118611:	5f                   	pop    %edi
f0118612:	5d                   	pop    %ebp
f0118613:	c3                   	ret    

f0118614 <isKHeapPlacementStrategyNEXTFIT>:
f0118614:	55                   	push   %ebp
f0118615:	89 e5                	mov    %esp,%ebp
f0118617:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f011861c:	83 f8 03             	cmp    $0x3,%eax
f011861f:	75 04                	jne    f0118625 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0118621:	b0 01                	mov    $0x1,%al
f0118623:	eb 02                	jmp    f0118627 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0118625:	b0 00                	mov    $0x0,%al
f0118627:	5d                   	pop    %ebp
f0118628:	c3                   	ret    

f0118629 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0118629:	55                   	push   %ebp
f011862a:	89 e5                	mov    %esp,%ebp
f011862c:	57                   	push   %edi
f011862d:	53                   	push   %ebx
f011862e:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f0118634:	83 ec 0c             	sub    $0xc,%esp
f0118637:	68 14 99 13 f0       	push   $0xf0139914
f011863c:	e8 f0 87 fe ff       	call   f0100e31 <cprintf>
f0118641:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118644:	83 ec 0c             	sub    $0xc,%esp
f0118647:	68 44 99 13 f0       	push   $0xf0139944
f011864c:	e8 e0 87 fe ff       	call   f0100e31 <cprintf>
f0118651:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118654:	83 ec 0c             	sub    $0xc,%esp
f0118657:	68 14 99 13 f0       	push   $0xf0139914
f011865c:	e8 d0 87 fe ff       	call   f0100e31 <cprintf>
f0118661:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118664:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0118668:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011866c:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0118672:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118678:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011867f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118686:	e8 3b 43 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011868b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011868e:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0118694:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118699:	b8 00 00 00 00       	mov    $0x0,%eax
f011869e:	89 d7                	mov    %edx,%edi
f01186a0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01186a2:	e8 1f 43 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01186a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01186aa:	e8 d5 bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01186af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01186b2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01186b9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01186be:	0f b6 d0             	movzbl %al,%edx
f01186c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01186c4:	01 d0                	add    %edx,%eax
f01186c6:	48                   	dec    %eax
f01186c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01186ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01186cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01186d2:	f7 75 d4             	divl   -0x2c(%ebp)
f01186d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01186d8:	29 d0                	sub    %edx,%eax
f01186da:	89 c1                	mov    %eax,%ecx
f01186dc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01186e3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01186e8:	0f b6 c0             	movzbl %al,%eax
f01186eb:	c1 e0 04             	shl    $0x4,%eax
f01186ee:	89 c2                	mov    %eax,%edx
f01186f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01186f3:	01 d0                	add    %edx,%eax
f01186f5:	48                   	dec    %eax
f01186f6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01186f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01186fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118701:	f7 75 cc             	divl   -0x34(%ebp)
f0118704:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118707:	29 d0                	sub    %edx,%eax
f0118709:	01 c8                	add    %ecx,%eax
f011870b:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0118710:	29 c2                	sub    %eax,%edx
f0118712:	89 d0                	mov    %edx,%eax
f0118714:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118717:	83 ec 0c             	sub    $0xc,%esp
f011871a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011871d:	e8 3d f8 fe ff       	call   f0107f5f <kmalloc>
f0118722:	83 c4 10             	add    $0x10,%esp
f0118725:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011872b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118731:	85 c0                	test   %eax,%eax
f0118733:	74 14                	je     f0118749 <test_kmalloc+0x120>
f0118735:	83 ec 04             	sub    $0x4,%esp
f0118738:	68 a0 99 13 f0       	push   $0xf01399a0
f011873d:	6a 40                	push   $0x40
f011873f:	68 d2 99 13 f0       	push   $0xf01399d2
f0118744:	e8 67 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118749:	e8 36 bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f011874e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118751:	74 14                	je     f0118767 <test_kmalloc+0x13e>
f0118753:	83 ec 04             	sub    $0x4,%esp
f0118756:	68 ec 99 13 f0       	push   $0xf01399ec
f011875b:	6a 41                	push   $0x41
f011875d:	68 d2 99 13 f0       	push   $0xf01399d2
f0118762:	e8 49 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118767:	e8 5a 42 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011876c:	89 c2                	mov    %eax,%edx
f011876e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118771:	39 c2                	cmp    %eax,%edx
f0118773:	74 14                	je     f0118789 <test_kmalloc+0x160>
f0118775:	83 ec 04             	sub    $0x4,%esp
f0118778:	68 54 9a 13 f0       	push   $0xf0139a54
f011877d:	6a 42                	push   $0x42
f011877f:	68 d2 99 13 f0       	push   $0xf01399d2
f0118784:	e8 27 7a fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118789:	83 ec 0c             	sub    $0xc,%esp
f011878c:	68 94 9a 13 f0       	push   $0xf0139a94
f0118791:	e8 9b 86 fe ff       	call   f0100e31 <cprintf>
f0118796:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118799:	e8 28 42 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011879e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187a1:	e8 de be fe ff       	call   f0104684 <pf_calculate_free_frames>
f01187a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01187a9:	83 ec 0c             	sub    $0xc,%esp
f01187ac:	68 00 fc 1f 00       	push   $0x1ffc00
f01187b1:	e8 a9 f7 fe ff       	call   f0107f5f <kmalloc>
f01187b6:	83 c4 10             	add    $0x10,%esp
f01187b9:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187bf:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01187c5:	89 c1                	mov    %eax,%ecx
f01187c7:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01187ce:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01187d3:	0f b6 d0             	movzbl %al,%edx
f01187d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01187d9:	01 d0                	add    %edx,%eax
f01187db:	48                   	dec    %eax
f01187dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01187df:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01187e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01187e7:	f7 75 c0             	divl   -0x40(%ebp)
f01187ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01187ed:	29 d0                	sub    %edx,%eax
f01187ef:	89 c3                	mov    %eax,%ebx
f01187f1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01187f8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01187fd:	0f b6 c0             	movzbl %al,%eax
f0118800:	c1 e0 04             	shl    $0x4,%eax
f0118803:	89 c2                	mov    %eax,%edx
f0118805:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118808:	01 d0                	add    %edx,%eax
f011880a:	48                   	dec    %eax
f011880b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011880e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118811:	ba 00 00 00 00       	mov    $0x0,%edx
f0118816:	f7 75 b8             	divl   -0x48(%ebp)
f0118819:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011881c:	29 d0                	sub    %edx,%eax
f011881e:	01 d8                	add    %ebx,%eax
f0118820:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118825:	39 c1                	cmp    %eax,%ecx
f0118827:	74 14                	je     f011883d <test_kmalloc+0x214>
f0118829:	83 ec 04             	sub    $0x4,%esp
f011882c:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118831:	6a 49                	push   $0x49
f0118833:	68 d2 99 13 f0       	push   $0xf01399d2
f0118838:	e8 73 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011883d:	e8 42 be fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118842:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118845:	74 14                	je     f011885b <test_kmalloc+0x232>
f0118847:	83 ec 04             	sub    $0x4,%esp
f011884a:	68 ec 99 13 f0       	push   $0xf01399ec
f011884f:	6a 4a                	push   $0x4a
f0118851:	68 d2 99 13 f0       	push   $0xf01399d2
f0118856:	e8 55 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011885b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011885e:	e8 63 41 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118863:	29 c3                	sub    %eax,%ebx
f0118865:	89 d8                	mov    %ebx,%eax
f0118867:	3d 00 02 00 00       	cmp    $0x200,%eax
f011886c:	74 14                	je     f0118882 <test_kmalloc+0x259>
f011886e:	83 ec 04             	sub    $0x4,%esp
f0118871:	68 54 9a 13 f0       	push   $0xf0139a54
f0118876:	6a 4b                	push   $0x4b
f0118878:	68 d2 99 13 f0       	push   $0xf01399d2
f011887d:	e8 2e 79 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118882:	e8 3f 41 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118887:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011888a:	e8 f5 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f011888f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118892:	83 ec 0c             	sub    $0xc,%esp
f0118895:	68 00 fc 1f 00       	push   $0x1ffc00
f011889a:	e8 c0 f6 fe ff       	call   f0107f5f <kmalloc>
f011889f:	83 c4 10             	add    $0x10,%esp
f01188a2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01188a8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01188ae:	89 c1                	mov    %eax,%ecx
f01188b0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01188b7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01188bc:	0f b6 d0             	movzbl %al,%edx
f01188bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01188c2:	01 d0                	add    %edx,%eax
f01188c4:	48                   	dec    %eax
f01188c5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01188c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01188cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01188d0:	f7 75 b0             	divl   -0x50(%ebp)
f01188d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01188d6:	29 d0                	sub    %edx,%eax
f01188d8:	89 c3                	mov    %eax,%ebx
f01188da:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01188e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01188e6:	0f b6 c0             	movzbl %al,%eax
f01188e9:	c1 e0 04             	shl    $0x4,%eax
f01188ec:	89 c2                	mov    %eax,%edx
f01188ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01188f1:	01 d0                	add    %edx,%eax
f01188f3:	48                   	dec    %eax
f01188f4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01188f7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01188fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01188ff:	f7 75 a8             	divl   -0x58(%ebp)
f0118902:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118905:	29 d0                	sub    %edx,%eax
f0118907:	01 d8                	add    %ebx,%eax
f0118909:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011890e:	39 c1                	cmp    %eax,%ecx
f0118910:	74 14                	je     f0118926 <test_kmalloc+0x2fd>
f0118912:	83 ec 04             	sub    $0x4,%esp
f0118915:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011891a:	6a 51                	push   $0x51
f011891c:	68 d2 99 13 f0       	push   $0xf01399d2
f0118921:	e8 8a 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118926:	e8 59 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f011892b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011892e:	74 14                	je     f0118944 <test_kmalloc+0x31b>
f0118930:	83 ec 04             	sub    $0x4,%esp
f0118933:	68 ec 99 13 f0       	push   $0xf01399ec
f0118938:	6a 52                	push   $0x52
f011893a:	68 d2 99 13 f0       	push   $0xf01399d2
f011893f:	e8 6c 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118944:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118947:	e8 7a 40 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011894c:	29 c3                	sub    %eax,%ebx
f011894e:	89 d8                	mov    %ebx,%eax
f0118950:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118955:	74 14                	je     f011896b <test_kmalloc+0x342>
f0118957:	83 ec 04             	sub    $0x4,%esp
f011895a:	68 54 9a 13 f0       	push   $0xf0139a54
f011895f:	6a 53                	push   $0x53
f0118961:	68 d2 99 13 f0       	push   $0xf01399d2
f0118966:	e8 45 78 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011896b:	e8 56 40 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118970:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118973:	e8 0c bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118978:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011897b:	83 ec 0c             	sub    $0xc,%esp
f011897e:	68 00 08 00 00       	push   $0x800
f0118983:	e8 d7 f5 fe ff       	call   f0107f5f <kmalloc>
f0118988:	83 c4 10             	add    $0x10,%esp
f011898b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118991:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118997:	89 c1                	mov    %eax,%ecx
f0118999:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01189a0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01189a5:	0f b6 d0             	movzbl %al,%edx
f01189a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01189ab:	01 d0                	add    %edx,%eax
f01189ad:	48                   	dec    %eax
f01189ae:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01189b1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01189b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01189b9:	f7 75 a0             	divl   -0x60(%ebp)
f01189bc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01189bf:	29 d0                	sub    %edx,%eax
f01189c1:	89 c3                	mov    %eax,%ebx
f01189c3:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01189ca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01189cf:	0f b6 c0             	movzbl %al,%eax
f01189d2:	c1 e0 04             	shl    $0x4,%eax
f01189d5:	89 c2                	mov    %eax,%edx
f01189d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01189da:	01 d0                	add    %edx,%eax
f01189dc:	48                   	dec    %eax
f01189dd:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01189e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01189e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01189e8:	f7 75 98             	divl   -0x68(%ebp)
f01189eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01189ee:	29 d0                	sub    %edx,%eax
f01189f0:	01 d8                	add    %ebx,%eax
f01189f2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01189f7:	39 c1                	cmp    %eax,%ecx
f01189f9:	74 14                	je     f0118a0f <test_kmalloc+0x3e6>
f01189fb:	83 ec 04             	sub    $0x4,%esp
f01189fe:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118a03:	6a 59                	push   $0x59
f0118a05:	68 d2 99 13 f0       	push   $0xf01399d2
f0118a0a:	e8 a1 77 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a0f:	e8 70 bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a14:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a17:	74 14                	je     f0118a2d <test_kmalloc+0x404>
f0118a19:	83 ec 04             	sub    $0x4,%esp
f0118a1c:	68 ec 99 13 f0       	push   $0xf01399ec
f0118a21:	6a 5a                	push   $0x5a
f0118a23:	68 d2 99 13 f0       	push   $0xf01399d2
f0118a28:	e8 83 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a2d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118a30:	e8 91 3f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118a35:	29 c3                	sub    %eax,%ebx
f0118a37:	89 d8                	mov    %ebx,%eax
f0118a39:	83 f8 01             	cmp    $0x1,%eax
f0118a3c:	74 14                	je     f0118a52 <test_kmalloc+0x429>
f0118a3e:	83 ec 04             	sub    $0x4,%esp
f0118a41:	68 54 9a 13 f0       	push   $0xf0139a54
f0118a46:	6a 5b                	push   $0x5b
f0118a48:	68 d2 99 13 f0       	push   $0xf01399d2
f0118a4d:	e8 5e 77 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118a52:	e8 6f 3f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118a57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a5a:	e8 25 bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118a62:	83 ec 0c             	sub    $0xc,%esp
f0118a65:	68 00 08 00 00       	push   $0x800
f0118a6a:	e8 f0 f4 fe ff       	call   f0107f5f <kmalloc>
f0118a6f:	83 c4 10             	add    $0x10,%esp
f0118a72:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a78:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118a7e:	89 c1                	mov    %eax,%ecx
f0118a80:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118a87:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118a8c:	0f b6 d0             	movzbl %al,%edx
f0118a8f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118a92:	01 d0                	add    %edx,%eax
f0118a94:	48                   	dec    %eax
f0118a95:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118a98:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa0:	f7 75 90             	divl   -0x70(%ebp)
f0118aa3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118aa6:	29 d0                	sub    %edx,%eax
f0118aa8:	89 c3                	mov    %eax,%ebx
f0118aaa:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118ab1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118ab6:	0f b6 c0             	movzbl %al,%eax
f0118ab9:	c1 e0 04             	shl    $0x4,%eax
f0118abc:	89 c2                	mov    %eax,%edx
f0118abe:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118ac1:	01 d0                	add    %edx,%eax
f0118ac3:	48                   	dec    %eax
f0118ac4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118ac7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118aca:	ba 00 00 00 00       	mov    $0x0,%edx
f0118acf:	f7 75 88             	divl   -0x78(%ebp)
f0118ad2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118ad5:	29 d0                	sub    %edx,%eax
f0118ad7:	01 d8                	add    %ebx,%eax
f0118ad9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118ade:	39 c1                	cmp    %eax,%ecx
f0118ae0:	74 14                	je     f0118af6 <test_kmalloc+0x4cd>
f0118ae2:	83 ec 04             	sub    $0x4,%esp
f0118ae5:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118aea:	6a 61                	push   $0x61
f0118aec:	68 d2 99 13 f0       	push   $0xf01399d2
f0118af1:	e8 ba 76 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118af6:	e8 89 bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118afb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118afe:	74 14                	je     f0118b14 <test_kmalloc+0x4eb>
f0118b00:	83 ec 04             	sub    $0x4,%esp
f0118b03:	68 ec 99 13 f0       	push   $0xf01399ec
f0118b08:	6a 62                	push   $0x62
f0118b0a:	68 d2 99 13 f0       	push   $0xf01399d2
f0118b0f:	e8 9c 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b14:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118b17:	e8 aa 3e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118b1c:	29 c3                	sub    %eax,%ebx
f0118b1e:	89 d8                	mov    %ebx,%eax
f0118b20:	83 f8 01             	cmp    $0x1,%eax
f0118b23:	74 14                	je     f0118b39 <test_kmalloc+0x510>
f0118b25:	83 ec 04             	sub    $0x4,%esp
f0118b28:	68 54 9a 13 f0       	push   $0xf0139a54
f0118b2d:	6a 63                	push   $0x63
f0118b2f:	68 d2 99 13 f0       	push   $0xf01399d2
f0118b34:	e8 77 76 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118b39:	e8 88 3e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118b3e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b41:	e8 3e bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b46:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118b49:	83 ec 0c             	sub    $0xc,%esp
f0118b4c:	68 00 1c 00 00       	push   $0x1c00
f0118b51:	e8 09 f4 fe ff       	call   f0107f5f <kmalloc>
f0118b56:	83 c4 10             	add    $0x10,%esp
f0118b59:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b5f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118b65:	89 c1                	mov    %eax,%ecx
f0118b67:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118b6e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118b73:	0f b6 d0             	movzbl %al,%edx
f0118b76:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118b79:	01 d0                	add    %edx,%eax
f0118b7b:	48                   	dec    %eax
f0118b7c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118b82:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118b88:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b8d:	f7 75 80             	divl   -0x80(%ebp)
f0118b90:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118b96:	29 d0                	sub    %edx,%eax
f0118b98:	89 c3                	mov    %eax,%ebx
f0118b9a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118ba1:	10 00 00 
f0118ba4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118ba9:	0f b6 c0             	movzbl %al,%eax
f0118bac:	c1 e0 04             	shl    $0x4,%eax
f0118baf:	89 c2                	mov    %eax,%edx
f0118bb1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118bb7:	01 d0                	add    %edx,%eax
f0118bb9:	48                   	dec    %eax
f0118bba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118bc0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118bc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bcb:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118bd1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118bd7:	29 d0                	sub    %edx,%eax
f0118bd9:	01 d8                	add    %ebx,%eax
f0118bdb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118be0:	39 c1                	cmp    %eax,%ecx
f0118be2:	74 14                	je     f0118bf8 <test_kmalloc+0x5cf>
f0118be4:	83 ec 04             	sub    $0x4,%esp
f0118be7:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118bec:	6a 69                	push   $0x69
f0118bee:	68 d2 99 13 f0       	push   $0xf01399d2
f0118bf3:	e8 b8 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118bf8:	e8 87 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118bfd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118c00:	74 14                	je     f0118c16 <test_kmalloc+0x5ed>
f0118c02:	83 ec 04             	sub    $0x4,%esp
f0118c05:	68 ec 99 13 f0       	push   $0xf01399ec
f0118c0a:	6a 6a                	push   $0x6a
f0118c0c:	68 d2 99 13 f0       	push   $0xf01399d2
f0118c11:	e8 9a 75 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c16:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118c19:	e8 a8 3d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118c1e:	29 c3                	sub    %eax,%ebx
f0118c20:	89 d8                	mov    %ebx,%eax
f0118c22:	83 f8 02             	cmp    $0x2,%eax
f0118c25:	74 14                	je     f0118c3b <test_kmalloc+0x612>
f0118c27:	83 ec 04             	sub    $0x4,%esp
f0118c2a:	68 54 9a 13 f0       	push   $0xf0139a54
f0118c2f:	6a 6b                	push   $0x6b
f0118c31:	68 d2 99 13 f0       	push   $0xf01399d2
f0118c36:	e8 75 75 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118c3b:	e8 86 3d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118c40:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c43:	e8 3c ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c48:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118c4b:	83 ec 0c             	sub    $0xc,%esp
f0118c4e:	68 00 fc 2f 00       	push   $0x2ffc00
f0118c53:	e8 07 f3 fe ff       	call   f0107f5f <kmalloc>
f0118c58:	83 c4 10             	add    $0x10,%esp
f0118c5b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c61:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118c67:	89 c1                	mov    %eax,%ecx
f0118c69:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118c70:	10 00 00 
f0118c73:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118c78:	0f b6 d0             	movzbl %al,%edx
f0118c7b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118c81:	01 d0                	add    %edx,%eax
f0118c83:	48                   	dec    %eax
f0118c84:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118c8a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118c90:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c95:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118c9b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118ca1:	29 d0                	sub    %edx,%eax
f0118ca3:	89 c3                	mov    %eax,%ebx
f0118ca5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118cac:	10 00 00 
f0118caf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118cb4:	0f b6 c0             	movzbl %al,%eax
f0118cb7:	c1 e0 04             	shl    $0x4,%eax
f0118cba:	89 c2                	mov    %eax,%edx
f0118cbc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118cc2:	01 d0                	add    %edx,%eax
f0118cc4:	48                   	dec    %eax
f0118cc5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118ccb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118cd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cd6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118cdc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118ce2:	29 d0                	sub    %edx,%eax
f0118ce4:	01 d8                	add    %ebx,%eax
f0118ce6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118ceb:	39 c1                	cmp    %eax,%ecx
f0118ced:	74 14                	je     f0118d03 <test_kmalloc+0x6da>
f0118cef:	83 ec 04             	sub    $0x4,%esp
f0118cf2:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118cf7:	6a 71                	push   $0x71
f0118cf9:	68 d2 99 13 f0       	push   $0xf01399d2
f0118cfe:	e8 ad 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d03:	e8 7c b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118d08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118d0b:	74 14                	je     f0118d21 <test_kmalloc+0x6f8>
f0118d0d:	83 ec 04             	sub    $0x4,%esp
f0118d10:	68 ec 99 13 f0       	push   $0xf01399ec
f0118d15:	6a 72                	push   $0x72
f0118d17:	68 d2 99 13 f0       	push   $0xf01399d2
f0118d1c:	e8 8f 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d21:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118d24:	e8 9d 3c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118d29:	29 c3                	sub    %eax,%ebx
f0118d2b:	89 d8                	mov    %ebx,%eax
f0118d2d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118d32:	74 14                	je     f0118d48 <test_kmalloc+0x71f>
f0118d34:	83 ec 04             	sub    $0x4,%esp
f0118d37:	68 54 9a 13 f0       	push   $0xf0139a54
f0118d3c:	6a 73                	push   $0x73
f0118d3e:	68 d2 99 13 f0       	push   $0xf01399d2
f0118d43:	e8 68 74 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118d48:	e8 79 3c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118d4d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118d50:	e8 2f b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118d55:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118d58:	83 ec 0c             	sub    $0xc,%esp
f0118d5b:	68 00 fc 5f 00       	push   $0x5ffc00
f0118d60:	e8 fa f1 fe ff       	call   f0107f5f <kmalloc>
f0118d65:	83 c4 10             	add    $0x10,%esp
f0118d68:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118d6e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118d74:	89 c1                	mov    %eax,%ecx
f0118d76:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118d7d:	10 00 00 
f0118d80:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118d85:	0f b6 d0             	movzbl %al,%edx
f0118d88:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118d8e:	01 d0                	add    %edx,%eax
f0118d90:	48                   	dec    %eax
f0118d91:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118d97:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118d9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118da2:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118da8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118dae:	29 d0                	sub    %edx,%eax
f0118db0:	89 c3                	mov    %eax,%ebx
f0118db2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118db9:	10 00 00 
f0118dbc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118dc1:	0f b6 c0             	movzbl %al,%eax
f0118dc4:	c1 e0 04             	shl    $0x4,%eax
f0118dc7:	89 c2                	mov    %eax,%edx
f0118dc9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118dcf:	01 d0                	add    %edx,%eax
f0118dd1:	48                   	dec    %eax
f0118dd2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118dd8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118dde:	ba 00 00 00 00       	mov    $0x0,%edx
f0118de3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118de9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118def:	29 d0                	sub    %edx,%eax
f0118df1:	01 d8                	add    %ebx,%eax
f0118df3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118df8:	39 c1                	cmp    %eax,%ecx
f0118dfa:	74 14                	je     f0118e10 <test_kmalloc+0x7e7>
f0118dfc:	83 ec 04             	sub    $0x4,%esp
f0118dff:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118e04:	6a 79                	push   $0x79
f0118e06:	68 d2 99 13 f0       	push   $0xf01399d2
f0118e0b:	e8 a0 73 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e10:	e8 6f b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118e15:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e18:	74 14                	je     f0118e2e <test_kmalloc+0x805>
f0118e1a:	83 ec 04             	sub    $0x4,%esp
f0118e1d:	68 ec 99 13 f0       	push   $0xf01399ec
f0118e22:	6a 7a                	push   $0x7a
f0118e24:	68 d2 99 13 f0       	push   $0xf01399d2
f0118e29:	e8 82 73 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e2e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118e31:	e8 90 3b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118e36:	29 c3                	sub    %eax,%ebx
f0118e38:	89 d8                	mov    %ebx,%eax
f0118e3a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118e3f:	74 14                	je     f0118e55 <test_kmalloc+0x82c>
f0118e41:	83 ec 04             	sub    $0x4,%esp
f0118e44:	68 54 9a 13 f0       	push   $0xf0139a54
f0118e49:	6a 7b                	push   $0x7b
f0118e4b:	68 d2 99 13 f0       	push   $0xf01399d2
f0118e50:	e8 5b 73 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118e55:	e8 6c 3b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118e5a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e5d:	e8 22 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118e62:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118e65:	83 ec 0c             	sub    $0xc,%esp
f0118e68:	68 00 38 00 00       	push   $0x3800
f0118e6d:	e8 ed f0 fe ff       	call   f0107f5f <kmalloc>
f0118e72:	83 c4 10             	add    $0x10,%esp
f0118e75:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118e7b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118e81:	89 c1                	mov    %eax,%ecx
f0118e83:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118e8a:	10 00 00 
f0118e8d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118e92:	0f b6 d0             	movzbl %al,%edx
f0118e95:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118e9b:	01 d0                	add    %edx,%eax
f0118e9d:	48                   	dec    %eax
f0118e9e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118ea4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118eaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eaf:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118eb5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118ebb:	29 d0                	sub    %edx,%eax
f0118ebd:	89 c3                	mov    %eax,%ebx
f0118ebf:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118ec6:	10 00 00 
f0118ec9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118ece:	0f b6 c0             	movzbl %al,%eax
f0118ed1:	c1 e0 04             	shl    $0x4,%eax
f0118ed4:	89 c2                	mov    %eax,%edx
f0118ed6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118edc:	01 d0                	add    %edx,%eax
f0118ede:	48                   	dec    %eax
f0118edf:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118ee5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118eeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118ef6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118efc:	29 d0                	sub    %edx,%eax
f0118efe:	01 d8                	add    %ebx,%eax
f0118f00:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118f05:	39 c1                	cmp    %eax,%ecx
f0118f07:	74 17                	je     f0118f20 <test_kmalloc+0x8f7>
f0118f09:	83 ec 04             	sub    $0x4,%esp
f0118f0c:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0118f11:	68 81 00 00 00       	push   $0x81
f0118f16:	68 d2 99 13 f0       	push   $0xf01399d2
f0118f1b:	e8 90 72 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f20:	e8 5f b7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118f25:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118f28:	74 17                	je     f0118f41 <test_kmalloc+0x918>
f0118f2a:	83 ec 04             	sub    $0x4,%esp
f0118f2d:	68 ec 99 13 f0       	push   $0xf01399ec
f0118f32:	68 82 00 00 00       	push   $0x82
f0118f37:	68 d2 99 13 f0       	push   $0xf01399d2
f0118f3c:	e8 6f 72 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f41:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118f44:	e8 7d 3a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118f49:	29 c3                	sub    %eax,%ebx
f0118f4b:	89 d8                	mov    %ebx,%eax
f0118f4d:	83 f8 04             	cmp    $0x4,%eax
f0118f50:	74 17                	je     f0118f69 <test_kmalloc+0x940>
f0118f52:	83 ec 04             	sub    $0x4,%esp
f0118f55:	68 54 9a 13 f0       	push   $0xf0139a54
f0118f5a:	68 83 00 00 00       	push   $0x83
f0118f5f:	68 d2 99 13 f0       	push   $0xf01399d2
f0118f64:	e8 47 72 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f0118f69:	83 ec 0c             	sub    $0xc,%esp
f0118f6c:	68 1e 9b 13 f0       	push   $0xf0139b1e
f0118f71:	e8 bb 7e fe ff       	call   f0100e31 <cprintf>
f0118f76:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118f79:	e8 48 3a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118f7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118f81:	e8 fe b6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118f86:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118f89:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0118f90:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118f93:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118f99:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0118f9f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118fa5:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118fa8:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118faa:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118fb0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118fb6:	01 c2                	add    %eax,%edx
f0118fb8:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118fbb:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118fbd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118fc3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118fc9:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118fd0:	fd 0f 00 
			shortArr[0] = minShort;
f0118fd3:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118fd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118fdc:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118fdf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118fe5:	01 c0                	add    %eax,%eax
f0118fe7:	89 c2                	mov    %eax,%edx
f0118fe9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118fef:	01 c2                	add    %eax,%edx
f0118ff1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118ff5:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118ff8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118ffe:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0119004:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f011900b:	01 00 00 
			intArr[0] = minInt;
f011900e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119014:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0119017:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0119019:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011901f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119026:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011902c:	01 c2                	add    %eax,%edx
f011902e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119031:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0119033:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119039:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011903f:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0119046:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0119049:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011904f:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0119052:	88 10                	mov    %dl,(%eax)
f0119054:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011905a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011905d:	66 89 42 02          	mov    %ax,0x2(%edx)
f0119061:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119067:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011906a:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011906d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119073:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011907a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119080:	01 c2                	add    %eax,%edx
f0119082:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119085:	88 02                	mov    %al,(%edx)
f0119087:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011908d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119094:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011909a:	01 c2                	add    %eax,%edx
f011909c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01190a0:	66 89 42 02          	mov    %ax,0x2(%edx)
f01190a4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01190aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01190b1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190b7:	01 c2                	add    %eax,%edx
f01190b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01190bc:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f01190bf:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f01190c6:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f01190c9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01190cf:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f01190d5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190db:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01190de:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f01190e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01190e6:	89 c2                	mov    %eax,%edx
f01190e8:	c1 ea 1f             	shr    $0x1f,%edx
f01190eb:	01 d0                	add    %edx,%eax
f01190ed:	d1 f8                	sar    %eax
f01190ef:	89 c2                	mov    %eax,%edx
f01190f1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190f7:	01 c2                	add    %eax,%edx
f01190f9:	8a 45 f2             	mov    -0xe(%ebp),%al
f01190fc:	88 c1                	mov    %al,%cl
f01190fe:	c0 e9 07             	shr    $0x7,%cl
f0119101:	01 c8                	add    %ecx,%eax
f0119103:	d0 f8                	sar    %al
f0119105:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0119107:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f011910d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119113:	01 c2                	add    %eax,%edx
f0119115:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119118:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f011911a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119120:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0119126:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f011912d:	1b 00 00 
			shortArr2[0] = minShort;
f0119130:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0119136:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119139:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f011913c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119142:	01 c0                	add    %eax,%eax
f0119144:	89 c2                	mov    %eax,%edx
f0119146:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011914c:	01 c2                	add    %eax,%edx
f011914e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0119152:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0119155:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011915b:	8a 00                	mov    (%eax),%al
f011915d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0119160:	75 15                	jne    f0119177 <test_kmalloc+0xb4e>
f0119162:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0119168:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011916e:	01 d0                	add    %edx,%eax
f0119170:	8a 00                	mov    (%eax),%al
f0119172:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119175:	74 17                	je     f011918e <test_kmalloc+0xb65>
f0119177:	83 ec 04             	sub    $0x4,%esp
f011917a:	68 28 9b 13 f0       	push   $0xf0139b28
f011917f:	68 b2 00 00 00       	push   $0xb2
f0119184:	68 d2 99 13 f0       	push   $0xf01399d2
f0119189:	e8 22 70 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011918e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119194:	66 8b 00             	mov    (%eax),%ax
f0119197:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011919b:	75 1b                	jne    f01191b8 <test_kmalloc+0xb8f>
f011919d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01191a3:	01 c0                	add    %eax,%eax
f01191a5:	89 c2                	mov    %eax,%edx
f01191a7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01191ad:	01 d0                	add    %edx,%eax
f01191af:	66 8b 00             	mov    (%eax),%ax
f01191b2:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01191b6:	74 17                	je     f01191cf <test_kmalloc+0xba6>
f01191b8:	83 ec 04             	sub    $0x4,%esp
f01191bb:	68 28 9b 13 f0       	push   $0xf0139b28
f01191c0:	68 b3 00 00 00       	push   $0xb3
f01191c5:	68 d2 99 13 f0       	push   $0xf01399d2
f01191ca:	e8 e1 6f fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f01191cf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01191d5:	8b 00                	mov    (%eax),%eax
f01191d7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01191da:	75 1c                	jne    f01191f8 <test_kmalloc+0xbcf>
f01191dc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01191e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01191e9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01191ef:	01 d0                	add    %edx,%eax
f01191f1:	8b 00                	mov    (%eax),%eax
f01191f3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01191f6:	74 17                	je     f011920f <test_kmalloc+0xbe6>
f01191f8:	83 ec 04             	sub    $0x4,%esp
f01191fb:	68 28 9b 13 f0       	push   $0xf0139b28
f0119200:	68 b4 00 00 00       	push   $0xb4
f0119205:	68 d2 99 13 f0       	push   $0xf01399d2
f011920a:	e8 a1 6f fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011920f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119215:	8a 00                	mov    (%eax),%al
f0119217:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011921a:	75 1c                	jne    f0119238 <test_kmalloc+0xc0f>
f011921c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119222:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119229:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011922f:	01 d0                	add    %edx,%eax
f0119231:	8a 00                	mov    (%eax),%al
f0119233:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119236:	74 17                	je     f011924f <test_kmalloc+0xc26>
f0119238:	83 ec 04             	sub    $0x4,%esp
f011923b:	68 28 9b 13 f0       	push   $0xf0139b28
f0119240:	68 b6 00 00 00       	push   $0xb6
f0119245:	68 d2 99 13 f0       	push   $0xf01399d2
f011924a:	e8 61 6f fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011924f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119255:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119259:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011925d:	75 1f                	jne    f011927e <test_kmalloc+0xc55>
f011925f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119265:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011926c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119272:	01 d0                	add    %edx,%eax
f0119274:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119278:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011927c:	74 17                	je     f0119295 <test_kmalloc+0xc6c>
f011927e:	83 ec 04             	sub    $0x4,%esp
f0119281:	68 28 9b 13 f0       	push   $0xf0139b28
f0119286:	68 b7 00 00 00       	push   $0xb7
f011928b:	68 d2 99 13 f0       	push   $0xf01399d2
f0119290:	e8 1b 6f fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0119295:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011929b:	8b 40 04             	mov    0x4(%eax),%eax
f011929e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01192a1:	75 1d                	jne    f01192c0 <test_kmalloc+0xc97>
f01192a3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01192a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01192b0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01192b6:	01 d0                	add    %edx,%eax
f01192b8:	8b 40 04             	mov    0x4(%eax),%eax
f01192bb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01192be:	74 17                	je     f01192d7 <test_kmalloc+0xcae>
f01192c0:	83 ec 04             	sub    $0x4,%esp
f01192c3:	68 28 9b 13 f0       	push   $0xf0139b28
f01192c8:	68 b8 00 00 00       	push   $0xb8
f01192cd:	68 d2 99 13 f0       	push   $0xf01399d2
f01192d2:	e8 d9 6e fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01192d7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01192dd:	8a 00                	mov    (%eax),%al
f01192df:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01192e2:	75 40                	jne    f0119324 <test_kmalloc+0xcfb>
f01192e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01192ea:	89 c2                	mov    %eax,%edx
f01192ec:	c1 ea 1f             	shr    $0x1f,%edx
f01192ef:	01 d0                	add    %edx,%eax
f01192f1:	d1 f8                	sar    %eax
f01192f3:	89 c2                	mov    %eax,%edx
f01192f5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01192fb:	01 d0                	add    %edx,%eax
f01192fd:	8a 10                	mov    (%eax),%dl
f01192ff:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119302:	88 c1                	mov    %al,%cl
f0119304:	c0 e9 07             	shr    $0x7,%cl
f0119307:	01 c8                	add    %ecx,%eax
f0119309:	d0 f8                	sar    %al
f011930b:	38 c2                	cmp    %al,%dl
f011930d:	75 15                	jne    f0119324 <test_kmalloc+0xcfb>
f011930f:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0119315:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011931b:	01 d0                	add    %edx,%eax
f011931d:	8a 00                	mov    (%eax),%al
f011931f:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119322:	74 17                	je     f011933b <test_kmalloc+0xd12>
f0119324:	83 ec 04             	sub    $0x4,%esp
f0119327:	68 28 9b 13 f0       	push   $0xf0139b28
f011932c:	68 ba 00 00 00       	push   $0xba
f0119331:	68 d2 99 13 f0       	push   $0xf01399d2
f0119336:	e8 75 6e fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011933b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119341:	66 8b 00             	mov    (%eax),%ax
f0119344:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0119348:	75 1b                	jne    f0119365 <test_kmalloc+0xd3c>
f011934a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119350:	01 c0                	add    %eax,%eax
f0119352:	89 c2                	mov    %eax,%edx
f0119354:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011935a:	01 d0                	add    %edx,%eax
f011935c:	66 8b 00             	mov    (%eax),%ax
f011935f:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0119363:	74 17                	je     f011937c <test_kmalloc+0xd53>
f0119365:	83 ec 04             	sub    $0x4,%esp
f0119368:	68 28 9b 13 f0       	push   $0xf0139b28
f011936d:	68 bb 00 00 00       	push   $0xbb
f0119372:	68 d2 99 13 f0       	push   $0xf01399d2
f0119377:	e8 34 6e fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011937c:	e8 45 36 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119381:	89 c2                	mov    %eax,%edx
f0119383:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119386:	39 c2                	cmp    %eax,%edx
f0119388:	74 17                	je     f01193a1 <test_kmalloc+0xd78>
f011938a:	83 ec 04             	sub    $0x4,%esp
f011938d:	68 54 9a 13 f0       	push   $0xf0139a54
f0119392:	68 bd 00 00 00       	push   $0xbd
f0119397:	68 d2 99 13 f0       	push   $0xf01399d2
f011939c:	e8 0f 6e fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01193a1:	e8 de b2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01193a6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01193a9:	74 17                	je     f01193c2 <test_kmalloc+0xd99>
f01193ab:	83 ec 04             	sub    $0x4,%esp
f01193ae:	68 ec 99 13 f0       	push   $0xf01399ec
f01193b3:	68 be 00 00 00       	push   $0xbe
f01193b8:	68 d2 99 13 f0       	push   $0xf01399d2
f01193bd:	e8 ee 6d fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f01193c2:	83 ec 0c             	sub    $0xc,%esp
f01193c5:	68 5d 9b 13 f0       	push   $0xf0139b5d
f01193ca:	e8 62 7a fe ff       	call   f0100e31 <cprintf>
f01193cf:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f01193d2:	e8 ef 35 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01193d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01193da:	e8 a5 b2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01193df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f01193e2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01193e9:	10 00 00 
f01193ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01193f1:	0f b6 d0             	movzbl %al,%edx
f01193f4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01193fa:	01 d0                	add    %edx,%eax
f01193fc:	48                   	dec    %eax
f01193fd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119403:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119409:	ba 00 00 00 00       	mov    $0x0,%edx
f011940e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119414:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011941a:	29 d0                	sub    %edx,%eax
f011941c:	89 c1                	mov    %eax,%ecx
f011941e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119425:	10 00 00 
f0119428:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011942d:	0f b6 c0             	movzbl %al,%eax
f0119430:	c1 e0 04             	shl    $0x4,%eax
f0119433:	89 c2                	mov    %eax,%edx
f0119435:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011943b:	01 d0                	add    %edx,%eax
f011943d:	48                   	dec    %eax
f011943e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119444:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011944a:	ba 00 00 00 00       	mov    $0x0,%edx
f011944f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119455:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011945b:	29 d0                	sub    %edx,%eax
f011945d:	01 c8                	add    %ecx,%eax
f011945f:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0119464:	29 c2                	sub    %eax,%edx
f0119466:	89 d0                	mov    %edx,%eax
f0119468:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011946e:	83 ec 0c             	sub    $0xc,%esp
f0119471:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0119477:	e8 e3 ea fe ff       	call   f0107f5f <kmalloc>
f011947c:	83 c4 10             	add    $0x10,%esp
f011947f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0119485:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011948b:	85 c0                	test   %eax,%eax
f011948d:	74 17                	je     f01194a6 <test_kmalloc+0xe7d>
f011948f:	83 ec 04             	sub    $0x4,%esp
f0119492:	68 a0 99 13 f0       	push   $0xf01399a0
f0119497:	68 c8 00 00 00       	push   $0xc8
f011949c:	68 d2 99 13 f0       	push   $0xf01399d2
f01194a1:	e8 0a 6d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01194a6:	e8 d9 b1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01194ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01194ae:	74 17                	je     f01194c7 <test_kmalloc+0xe9e>
f01194b0:	83 ec 04             	sub    $0x4,%esp
f01194b3:	68 ec 99 13 f0       	push   $0xf01399ec
f01194b8:	68 c9 00 00 00       	push   $0xc9
f01194bd:	68 d2 99 13 f0       	push   $0xf01399d2
f01194c2:	e8 e9 6c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01194c7:	e8 fa 34 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01194cc:	89 c2                	mov    %eax,%edx
f01194ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01194d1:	39 c2                	cmp    %eax,%edx
f01194d3:	74 17                	je     f01194ec <test_kmalloc+0xec3>
f01194d5:	83 ec 04             	sub    $0x4,%esp
f01194d8:	68 54 9a 13 f0       	push   $0xf0139a54
f01194dd:	68 ca 00 00 00       	push   $0xca
f01194e2:	68 d2 99 13 f0       	push   $0xf01399d2
f01194e7:	e8 c4 6c fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f01194ec:	83 ec 0c             	sub    $0xc,%esp
f01194ef:	68 64 9b 13 f0       	push   $0xf0139b64
f01194f4:	e8 38 79 fe ff       	call   f0100e31 <cprintf>
f01194f9:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01194fc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119502:	05 00 40 00 00       	add    $0x4000,%eax
f0119507:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011950d:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119514:	10 00 00 
f0119517:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011951c:	0f b6 d0             	movzbl %al,%edx
f011951f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119525:	01 d0                	add    %edx,%eax
f0119527:	48                   	dec    %eax
f0119528:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011952e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119534:	ba 00 00 00 00       	mov    $0x0,%edx
f0119539:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011953f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119545:	29 d0                	sub    %edx,%eax
f0119547:	89 c1                	mov    %eax,%ecx
f0119549:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119550:	10 00 00 
f0119553:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119558:	0f b6 c0             	movzbl %al,%eax
f011955b:	c1 e0 04             	shl    $0x4,%eax
f011955e:	89 c2                	mov    %eax,%edx
f0119560:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119566:	01 d0                	add    %edx,%eax
f0119568:	48                   	dec    %eax
f0119569:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011956f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119575:	ba 00 00 00 00       	mov    $0x0,%edx
f011957a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119580:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119586:	29 d0                	sub    %edx,%eax
f0119588:	01 c8                	add    %ecx,%eax
f011958a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011958f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119592:	eb 6a                	jmp    f01195fe <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119594:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0119599:	83 ec 04             	sub    $0x4,%esp
f011959c:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f01195a2:	52                   	push   %edx
f01195a3:	ff 75 f4             	pushl  -0xc(%ebp)
f01195a6:	50                   	push   %eax
f01195a7:	e8 3b df fe ff       	call   f01074e7 <get_page_table>
f01195ac:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01195af:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01195b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01195b8:	c1 ea 0c             	shr    $0xc,%edx
f01195bb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01195c1:	c1 e2 02             	shl    $0x2,%edx
f01195c4:	01 d0                	add    %edx,%eax
f01195c6:	8b 00                	mov    (%eax),%eax
f01195c8:	25 ff 0f 00 00       	and    $0xfff,%eax
f01195cd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01195d3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01195d9:	83 e0 04             	and    $0x4,%eax
f01195dc:	85 c0                	test   %eax,%eax
f01195de:	74 17                	je     f01195f7 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01195e0:	83 ec 04             	sub    $0x4,%esp
f01195e3:	68 6c 9b 13 f0       	push   $0xf0139b6c
f01195e8:	68 d7 00 00 00       	push   $0xd7
f01195ed:	68 d2 99 13 f0       	push   $0xf01399d2
f01195f2:	e8 b9 6b fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01195f7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01195fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119601:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f0119607:	72 8b                	jb     f0119594 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119609:	83 ec 0c             	sub    $0xc,%esp
f011960c:	68 b6 9b 13 f0       	push   $0xf0139bb6
f0119611:	e8 1b 78 fe ff       	call   f0100e31 <cprintf>
f0119616:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119619:	83 ec 0c             	sub    $0xc,%esp
f011961c:	68 c0 9b 13 f0       	push   $0xf0139bc0
f0119621:	e8 0b 78 fe ff       	call   f0100e31 <cprintf>
f0119626:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119629:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011962e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119631:	5b                   	pop    %ebx
f0119632:	5f                   	pop    %edi
f0119633:	5d                   	pop    %ebp
f0119634:	c3                   	ret    

f0119635 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119635:	55                   	push   %ebp
f0119636:	89 e5                	mov    %esp,%ebp
f0119638:	57                   	push   %edi
f0119639:	53                   	push   %ebx
f011963a:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f0119640:	83 ec 0c             	sub    $0xc,%esp
f0119643:	68 14 99 13 f0       	push   $0xf0139914
f0119648:	e8 e4 77 fe ff       	call   f0100e31 <cprintf>
f011964d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119650:	83 ec 0c             	sub    $0xc,%esp
f0119653:	68 44 99 13 f0       	push   $0xf0139944
f0119658:	e8 d4 77 fe ff       	call   f0100e31 <cprintf>
f011965d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119660:	83 ec 0c             	sub    $0xc,%esp
f0119663:	68 14 99 13 f0       	push   $0xf0139914
f0119668:	e8 c4 77 fe ff       	call   f0100e31 <cprintf>
f011966d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0119670:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119676:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011967b:	b8 00 00 00 00       	mov    $0x0,%eax
f0119680:	89 d7                	mov    %edx,%edi
f0119682:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119684:	83 ec 0c             	sub    $0xc,%esp
f0119687:	68 fc 9b 13 f0       	push   $0xf0139bfc
f011968c:	e8 a0 77 fe ff       	call   f0100e31 <cprintf>
f0119691:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119694:	e8 2d 33 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119699:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011969c:	e8 e3 af fe ff       	call   f0104684 <pf_calculate_free_frames>
f01196a1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01196a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01196ab:	eb 1f                	jmp    f01196cc <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01196ad:	83 ec 0c             	sub    $0xc,%esp
f01196b0:	68 00 00 20 00       	push   $0x200000
f01196b5:	e8 a5 e8 fe ff       	call   f0107f5f <kmalloc>
f01196ba:	83 c4 10             	add    $0x10,%esp
f01196bd:	89 c2                	mov    %eax,%edx
f01196bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01196c2:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01196c9:	ff 45 f4             	incl   -0xc(%ebp)
f01196cc:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01196d0:	7e db                	jle    f01196ad <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01196d2:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01196d9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01196de:	0f b6 d0             	movzbl %al,%edx
f01196e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01196e4:	01 d0                	add    %edx,%eax
f01196e6:	48                   	dec    %eax
f01196e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01196ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01196ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01196f2:	f7 75 e8             	divl   -0x18(%ebp)
f01196f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01196f8:	29 d0                	sub    %edx,%eax
f01196fa:	89 c1                	mov    %eax,%ecx
f01196fc:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119703:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119708:	0f b6 c0             	movzbl %al,%eax
f011970b:	c1 e0 04             	shl    $0x4,%eax
f011970e:	89 c2                	mov    %eax,%edx
f0119710:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119713:	01 d0                	add    %edx,%eax
f0119715:	48                   	dec    %eax
f0119716:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119719:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011971c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119721:	f7 75 e0             	divl   -0x20(%ebp)
f0119724:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119727:	29 d0                	sub    %edx,%eax
f0119729:	01 c8                	add    %ecx,%eax
f011972b:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0119730:	29 c2                	sub    %eax,%edx
f0119732:	89 d0                	mov    %edx,%eax
f0119734:	83 ec 0c             	sub    $0xc,%esp
f0119737:	50                   	push   %eax
f0119738:	e8 22 e8 fe ff       	call   f0107f5f <kmalloc>
f011973d:	83 c4 10             	add    $0x10,%esp
f0119740:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119746:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011974c:	89 c1                	mov    %eax,%ecx
f011974e:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119755:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011975a:	0f b6 d0             	movzbl %al,%edx
f011975d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119760:	01 d0                	add    %edx,%eax
f0119762:	48                   	dec    %eax
f0119763:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119766:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119769:	ba 00 00 00 00       	mov    $0x0,%edx
f011976e:	f7 75 d8             	divl   -0x28(%ebp)
f0119771:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119774:	29 d0                	sub    %edx,%eax
f0119776:	89 c3                	mov    %eax,%ebx
f0119778:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011977f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119784:	0f b6 c0             	movzbl %al,%eax
f0119787:	c1 e0 04             	shl    $0x4,%eax
f011978a:	89 c2                	mov    %eax,%edx
f011978c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011978f:	01 d0                	add    %edx,%eax
f0119791:	48                   	dec    %eax
f0119792:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119795:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119798:	ba 00 00 00 00       	mov    $0x0,%edx
f011979d:	f7 75 d0             	divl   -0x30(%ebp)
f01197a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01197a3:	29 d0                	sub    %edx,%eax
f01197a5:	01 d8                	add    %ebx,%eax
f01197a7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01197ac:	39 c1                	cmp    %eax,%ecx
f01197ae:	0f 85 4f 03 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01197b4:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01197ba:	89 c1                	mov    %eax,%ecx
f01197bc:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01197c3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01197c8:	0f b6 d0             	movzbl %al,%edx
f01197cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01197ce:	01 d0                	add    %edx,%eax
f01197d0:	48                   	dec    %eax
f01197d1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01197d4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01197d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01197dc:	f7 75 c8             	divl   -0x38(%ebp)
f01197df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01197e2:	29 d0                	sub    %edx,%eax
f01197e4:	89 c3                	mov    %eax,%ebx
f01197e6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01197ed:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01197f2:	0f b6 c0             	movzbl %al,%eax
f01197f5:	c1 e0 04             	shl    $0x4,%eax
f01197f8:	89 c2                	mov    %eax,%edx
f01197fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01197fd:	01 d0                	add    %edx,%eax
f01197ff:	48                   	dec    %eax
f0119800:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119803:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119806:	ba 00 00 00 00       	mov    $0x0,%edx
f011980b:	f7 75 c0             	divl   -0x40(%ebp)
f011980e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119811:	29 d0                	sub    %edx,%eax
f0119813:	01 d8                	add    %ebx,%eax
f0119815:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011981a:	39 c1                	cmp    %eax,%ecx
f011981c:	0f 85 e1 02 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119822:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f0119828:	89 c1                	mov    %eax,%ecx
f011982a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119831:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119836:	0f b6 d0             	movzbl %al,%edx
f0119839:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011983c:	01 d0                	add    %edx,%eax
f011983e:	48                   	dec    %eax
f011983f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119842:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119845:	ba 00 00 00 00       	mov    $0x0,%edx
f011984a:	f7 75 b8             	divl   -0x48(%ebp)
f011984d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119850:	29 d0                	sub    %edx,%eax
f0119852:	89 c3                	mov    %eax,%ebx
f0119854:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011985b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119860:	0f b6 c0             	movzbl %al,%eax
f0119863:	c1 e0 04             	shl    $0x4,%eax
f0119866:	89 c2                	mov    %eax,%edx
f0119868:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011986b:	01 d0                	add    %edx,%eax
f011986d:	48                   	dec    %eax
f011986e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119871:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119874:	ba 00 00 00 00       	mov    $0x0,%edx
f0119879:	f7 75 b0             	divl   -0x50(%ebp)
f011987c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011987f:	29 d0                	sub    %edx,%eax
f0119881:	01 d8                	add    %ebx,%eax
f0119883:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119888:	39 c1                	cmp    %eax,%ecx
f011988a:	0f 85 73 02 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119890:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119896:	89 c1                	mov    %eax,%ecx
f0119898:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011989f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01198a4:	0f b6 d0             	movzbl %al,%edx
f01198a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01198aa:	01 d0                	add    %edx,%eax
f01198ac:	48                   	dec    %eax
f01198ad:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01198b0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01198b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01198b8:	f7 75 a8             	divl   -0x58(%ebp)
f01198bb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01198be:	29 d0                	sub    %edx,%eax
f01198c0:	89 c3                	mov    %eax,%ebx
f01198c2:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01198c9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01198ce:	0f b6 c0             	movzbl %al,%eax
f01198d1:	c1 e0 04             	shl    $0x4,%eax
f01198d4:	89 c2                	mov    %eax,%edx
f01198d6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01198d9:	01 d0                	add    %edx,%eax
f01198db:	48                   	dec    %eax
f01198dc:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01198df:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01198e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01198e7:	f7 75 a0             	divl   -0x60(%ebp)
f01198ea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01198ed:	29 d0                	sub    %edx,%eax
f01198ef:	01 d8                	add    %ebx,%eax
f01198f1:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01198f6:	39 c1                	cmp    %eax,%ecx
f01198f8:	0f 85 05 02 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01198fe:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119904:	89 c1                	mov    %eax,%ecx
f0119906:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011990d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119912:	0f b6 d0             	movzbl %al,%edx
f0119915:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119918:	01 d0                	add    %edx,%eax
f011991a:	48                   	dec    %eax
f011991b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011991e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119921:	ba 00 00 00 00       	mov    $0x0,%edx
f0119926:	f7 75 98             	divl   -0x68(%ebp)
f0119929:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011992c:	29 d0                	sub    %edx,%eax
f011992e:	89 c3                	mov    %eax,%ebx
f0119930:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119937:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011993c:	0f b6 c0             	movzbl %al,%eax
f011993f:	c1 e0 04             	shl    $0x4,%eax
f0119942:	89 c2                	mov    %eax,%edx
f0119944:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119947:	01 d0                	add    %edx,%eax
f0119949:	48                   	dec    %eax
f011994a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011994d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119950:	ba 00 00 00 00       	mov    $0x0,%edx
f0119955:	f7 75 90             	divl   -0x70(%ebp)
f0119958:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011995b:	29 d0                	sub    %edx,%eax
f011995d:	01 d8                	add    %ebx,%eax
f011995f:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119964:	39 c1                	cmp    %eax,%ecx
f0119966:	0f 85 97 01 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011996c:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119972:	89 c1                	mov    %eax,%ecx
f0119974:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011997b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119980:	0f b6 d0             	movzbl %al,%edx
f0119983:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119986:	01 d0                	add    %edx,%eax
f0119988:	48                   	dec    %eax
f0119989:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011998c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011998f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119994:	f7 75 88             	divl   -0x78(%ebp)
f0119997:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011999a:	29 d0                	sub    %edx,%eax
f011999c:	89 c3                	mov    %eax,%ebx
f011999e:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01199a5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01199aa:	0f b6 c0             	movzbl %al,%eax
f01199ad:	c1 e0 04             	shl    $0x4,%eax
f01199b0:	89 c2                	mov    %eax,%edx
f01199b2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01199b5:	01 d0                	add    %edx,%eax
f01199b7:	48                   	dec    %eax
f01199b8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01199be:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01199c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01199c9:	f7 75 80             	divl   -0x80(%ebp)
f01199cc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01199d2:	29 d0                	sub    %edx,%eax
f01199d4:	01 d8                	add    %ebx,%eax
f01199d6:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01199db:	39 c1                	cmp    %eax,%ecx
f01199dd:	0f 85 20 01 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01199e3:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f01199e9:	89 c1                	mov    %eax,%ecx
f01199eb:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01199f2:	10 00 00 
f01199f5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01199fa:	0f b6 d0             	movzbl %al,%edx
f01199fd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119a03:	01 d0                	add    %edx,%eax
f0119a05:	48                   	dec    %eax
f0119a06:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119a0c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119a12:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a17:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0119a1d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119a23:	29 d0                	sub    %edx,%eax
f0119a25:	89 c3                	mov    %eax,%ebx
f0119a27:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0119a2e:	10 00 00 
f0119a31:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119a36:	0f b6 c0             	movzbl %al,%eax
f0119a39:	c1 e0 04             	shl    $0x4,%eax
f0119a3c:	89 c2                	mov    %eax,%edx
f0119a3e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119a44:	01 d0                	add    %edx,%eax
f0119a46:	48                   	dec    %eax
f0119a47:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0119a4d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119a53:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a58:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119a5e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119a64:	29 d0                	sub    %edx,%eax
f0119a66:	01 d8                	add    %ebx,%eax
f0119a68:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119a6d:	39 c1                	cmp    %eax,%ecx
f0119a6f:	0f 85 8e 00 00 00    	jne    f0119b03 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119a75:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119a7b:	89 c1                	mov    %eax,%ecx
f0119a7d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119a84:	10 00 00 
f0119a87:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119a8c:	0f b6 d0             	movzbl %al,%edx
f0119a8f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119a95:	01 d0                	add    %edx,%eax
f0119a97:	48                   	dec    %eax
f0119a98:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119a9e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119aa4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aa9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119aaf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119ab5:	29 d0                	sub    %edx,%eax
f0119ab7:	89 c3                	mov    %eax,%ebx
f0119ab9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119ac0:	10 00 00 
f0119ac3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119ac8:	0f b6 c0             	movzbl %al,%eax
f0119acb:	c1 e0 04             	shl    $0x4,%eax
f0119ace:	89 c2                	mov    %eax,%edx
f0119ad0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119ad6:	01 d0                	add    %edx,%eax
f0119ad8:	48                   	dec    %eax
f0119ad9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119adf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119ae5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aea:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119af0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119af6:	29 d0                	sub    %edx,%eax
f0119af8:	01 d8                	add    %ebx,%eax
f0119afa:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119aff:	39 c1                	cmp    %eax,%ecx
f0119b01:	74 17                	je     f0119b1a <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119b03:	83 ec 04             	sub    $0x4,%esp
f0119b06:	68 4c 9c 13 f0       	push   $0xf0139c4c
f0119b0b:	68 03 01 00 00       	push   $0x103
f0119b10:	68 d2 99 13 f0       	push   $0xf01399d2
f0119b15:	e8 96 66 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b1a:	e8 65 ab fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119b1f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b22:	74 17                	je     f0119b3b <test_kmalloc_nextfit+0x506>
f0119b24:	83 ec 04             	sub    $0x4,%esp
f0119b27:	68 ec 99 13 f0       	push   $0xf01399ec
f0119b2c:	68 05 01 00 00       	push   $0x105
f0119b31:	68 d2 99 13 f0       	push   $0xf01399d2
f0119b36:	e8 75 66 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119b3b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b3e:	e8 83 2e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119b43:	29 c3                	sub    %eax,%ebx
f0119b45:	89 d9                	mov    %ebx,%ecx
f0119b47:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119b4e:	10 00 00 
f0119b51:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119b56:	0f b6 d0             	movzbl %al,%edx
f0119b59:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119b5f:	01 d0                	add    %edx,%eax
f0119b61:	48                   	dec    %eax
f0119b62:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119b68:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b73:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119b79:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119b7f:	29 d0                	sub    %edx,%eax
f0119b81:	89 c3                	mov    %eax,%ebx
f0119b83:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119b8a:	10 00 00 
f0119b8d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119b92:	0f b6 c0             	movzbl %al,%eax
f0119b95:	c1 e0 04             	shl    $0x4,%eax
f0119b98:	89 c2                	mov    %eax,%edx
f0119b9a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119ba0:	01 d0                	add    %edx,%eax
f0119ba2:	48                   	dec    %eax
f0119ba3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119ba9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119baf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bb4:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119bba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119bc0:	29 d0                	sub    %edx,%eax
f0119bc2:	01 d8                	add    %ebx,%eax
f0119bc4:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119bc9:	29 c2                	sub    %eax,%edx
f0119bcb:	89 d0                	mov    %edx,%eax
f0119bcd:	c1 e8 0c             	shr    $0xc,%eax
f0119bd0:	39 c1                	cmp    %eax,%ecx
f0119bd2:	74 17                	je     f0119beb <test_kmalloc_nextfit+0x5b6>
f0119bd4:	83 ec 04             	sub    $0x4,%esp
f0119bd7:	68 8f 9c 13 f0       	push   $0xf0139c8f
f0119bdc:	68 06 01 00 00       	push   $0x106
f0119be1:	68 d2 99 13 f0       	push   $0xf01399d2
f0119be6:	e8 c5 65 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119beb:	e8 94 aa fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119bf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119bf3:	e8 ce 2d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119bf8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119bfb:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119c01:	83 ec 0c             	sub    $0xc,%esp
f0119c04:	50                   	push   %eax
f0119c05:	e8 6f e3 fe ff       	call   f0107f79 <kfree>
f0119c0a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119c0d:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119c13:	83 ec 0c             	sub    $0xc,%esp
f0119c16:	50                   	push   %eax
f0119c17:	e8 5d e3 fe ff       	call   f0107f79 <kfree>
f0119c1c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119c1f:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0119c25:	83 ec 0c             	sub    $0xc,%esp
f0119c28:	50                   	push   %eax
f0119c29:	e8 4b e3 fe ff       	call   f0107f79 <kfree>
f0119c2e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119c31:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0119c37:	83 ec 0c             	sub    $0xc,%esp
f0119c3a:	50                   	push   %eax
f0119c3b:	e8 39 e3 fe ff       	call   f0107f79 <kfree>
f0119c40:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119c43:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119c49:	83 ec 0c             	sub    $0xc,%esp
f0119c4c:	50                   	push   %eax
f0119c4d:	e8 27 e3 fe ff       	call   f0107f79 <kfree>
f0119c52:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119c55:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f0119c5b:	83 ec 0c             	sub    $0xc,%esp
f0119c5e:	50                   	push   %eax
f0119c5f:	e8 15 e3 fe ff       	call   f0107f79 <kfree>
f0119c64:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119c67:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0119c6d:	83 ec 0c             	sub    $0xc,%esp
f0119c70:	50                   	push   %eax
f0119c71:	e8 03 e3 fe ff       	call   f0107f79 <kfree>
f0119c76:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119c79:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119c7f:	83 ec 0c             	sub    $0xc,%esp
f0119c82:	50                   	push   %eax
f0119c83:	e8 f1 e2 fe ff       	call   f0107f79 <kfree>
f0119c88:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119c8b:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119c91:	83 ec 0c             	sub    $0xc,%esp
f0119c94:	50                   	push   %eax
f0119c95:	e8 df e2 fe ff       	call   f0107f79 <kfree>
f0119c9a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119c9d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119ca3:	83 ec 0c             	sub    $0xc,%esp
f0119ca6:	50                   	push   %eax
f0119ca7:	e8 cd e2 fe ff       	call   f0107f79 <kfree>
f0119cac:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119caf:	e8 d0 a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119cb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119cb7:	74 17                	je     f0119cd0 <test_kmalloc_nextfit+0x69b>
f0119cb9:	83 ec 04             	sub    $0x4,%esp
f0119cbc:	68 ec 99 13 f0       	push   $0xf01399ec
f0119cc1:	68 17 01 00 00       	push   $0x117
f0119cc6:	68 d2 99 13 f0       	push   $0xf01399d2
f0119ccb:	e8 e0 64 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119cd0:	e8 f1 2c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119cd5:	89 c2                	mov    %eax,%edx
f0119cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119cda:	89 d1                	mov    %edx,%ecx
f0119cdc:	29 c1                	sub    %eax,%ecx
f0119cde:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119ce5:	10 00 00 
f0119ce8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119ced:	0f b6 d0             	movzbl %al,%edx
f0119cf0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119cf6:	01 d0                	add    %edx,%eax
f0119cf8:	48                   	dec    %eax
f0119cf9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119cff:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119d05:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d0a:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119d10:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119d16:	29 d0                	sub    %edx,%eax
f0119d18:	89 c3                	mov    %eax,%ebx
f0119d1a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119d21:	10 00 00 
f0119d24:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119d29:	0f b6 c0             	movzbl %al,%eax
f0119d2c:	c1 e0 04             	shl    $0x4,%eax
f0119d2f:	89 c2                	mov    %eax,%edx
f0119d31:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119d37:	01 d0                	add    %edx,%eax
f0119d39:	48                   	dec    %eax
f0119d3a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119d40:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119d46:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d4b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119d51:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119d57:	29 d0                	sub    %edx,%eax
f0119d59:	01 d8                	add    %ebx,%eax
f0119d5b:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119d60:	29 c2                	sub    %eax,%edx
f0119d62:	89 d0                	mov    %edx,%eax
f0119d64:	c1 e8 0c             	shr    $0xc,%eax
f0119d67:	39 c1                	cmp    %eax,%ecx
f0119d69:	74 17                	je     f0119d82 <test_kmalloc_nextfit+0x74d>
f0119d6b:	83 ec 04             	sub    $0x4,%esp
f0119d6e:	68 a0 9c 13 f0       	push   $0xf0139ca0
f0119d73:	68 18 01 00 00       	push   $0x118
f0119d78:	68 d2 99 13 f0       	push   $0xf01399d2
f0119d7d:	e8 2e 64 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119d82:	e8 fd a8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119d87:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d8a:	e8 37 2c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119d8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119d92:	83 ec 0c             	sub    $0xc,%esp
f0119d95:	68 00 fc 0f 00       	push   $0xffc00
f0119d9a:	e8 c0 e1 fe ff       	call   f0107f5f <kmalloc>
f0119d9f:	83 c4 10             	add    $0x10,%esp
f0119da2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119da8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119daf:	10 00 00 
f0119db2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119db7:	0f b6 d0             	movzbl %al,%edx
f0119dba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119dc0:	01 d0                	add    %edx,%eax
f0119dc2:	48                   	dec    %eax
f0119dc3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119dc9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119dcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dd4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119dda:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119de0:	29 d0                	sub    %edx,%eax
f0119de2:	89 c1                	mov    %eax,%ecx
f0119de4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119deb:	10 00 00 
f0119dee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119df3:	0f b6 c0             	movzbl %al,%eax
f0119df6:	c1 e0 04             	shl    $0x4,%eax
f0119df9:	89 c2                	mov    %eax,%edx
f0119dfb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119e01:	01 d0                	add    %edx,%eax
f0119e03:	48                   	dec    %eax
f0119e04:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119e0a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e15:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119e1b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119e21:	29 d0                	sub    %edx,%eax
f0119e23:	01 c8                	add    %ecx,%eax
f0119e25:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119e2b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e31:	39 c2                	cmp    %eax,%edx
f0119e33:	74 17                	je     f0119e4c <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119e35:	83 ec 04             	sub    $0x4,%esp
f0119e38:	68 e0 9c 13 f0       	push   $0xf0139ce0
f0119e3d:	68 1f 01 00 00       	push   $0x11f
f0119e42:	68 d2 99 13 f0       	push   $0xf01399d2
f0119e47:	e8 64 63 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e4c:	e8 33 a8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119e51:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e54:	74 17                	je     f0119e6d <test_kmalloc_nextfit+0x838>
f0119e56:	83 ec 04             	sub    $0x4,%esp
f0119e59:	68 ec 99 13 f0       	push   $0xf01399ec
f0119e5e:	68 20 01 00 00       	push   $0x120
f0119e63:	68 d2 99 13 f0       	push   $0xf01399d2
f0119e68:	e8 43 63 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119e6d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e70:	e8 51 2b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119e75:	29 c3                	sub    %eax,%ebx
f0119e77:	89 d8                	mov    %ebx,%eax
f0119e79:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e7e:	74 17                	je     f0119e97 <test_kmalloc_nextfit+0x862>
f0119e80:	83 ec 04             	sub    $0x4,%esp
f0119e83:	68 8f 9c 13 f0       	push   $0xf0139c8f
f0119e88:	68 21 01 00 00       	push   $0x121
f0119e8d:	68 d2 99 13 f0       	push   $0xf01399d2
f0119e92:	e8 19 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119e97:	e8 e8 a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119e9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119e9f:	e8 22 2b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119ea4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119ea7:	83 ec 0c             	sub    $0xc,%esp
f0119eaa:	68 00 04 00 00       	push   $0x400
f0119eaf:	e8 ab e0 fe ff       	call   f0107f5f <kmalloc>
f0119eb4:	83 c4 10             	add    $0x10,%esp
f0119eb7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119ebd:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119ec4:	10 00 00 
f0119ec7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119ecc:	0f b6 d0             	movzbl %al,%edx
f0119ecf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119ed5:	01 d0                	add    %edx,%eax
f0119ed7:	48                   	dec    %eax
f0119ed8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119ede:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119ee4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ee9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119eef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119ef5:	29 d0                	sub    %edx,%eax
f0119ef7:	89 c1                	mov    %eax,%ecx
f0119ef9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119f00:	10 00 00 
f0119f03:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119f08:	0f b6 c0             	movzbl %al,%eax
f0119f0b:	c1 e0 04             	shl    $0x4,%eax
f0119f0e:	89 c2                	mov    %eax,%edx
f0119f10:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119f16:	01 d0                	add    %edx,%eax
f0119f18:	48                   	dec    %eax
f0119f19:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119f1f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119f25:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f2a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119f30:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119f36:	29 d0                	sub    %edx,%eax
f0119f38:	01 c8                	add    %ecx,%eax
f0119f3a:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119f40:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119f46:	39 c2                	cmp    %eax,%edx
f0119f48:	74 17                	je     f0119f61 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f0119f4a:	83 ec 04             	sub    $0x4,%esp
f0119f4d:	68 e0 9c 13 f0       	push   $0xf0139ce0
f0119f52:	68 27 01 00 00       	push   $0x127
f0119f57:	68 d2 99 13 f0       	push   $0xf01399d2
f0119f5c:	e8 4f 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f61:	e8 1e a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119f66:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f69:	74 17                	je     f0119f82 <test_kmalloc_nextfit+0x94d>
f0119f6b:	83 ec 04             	sub    $0x4,%esp
f0119f6e:	68 ec 99 13 f0       	push   $0xf01399ec
f0119f73:	68 28 01 00 00       	push   $0x128
f0119f78:	68 d2 99 13 f0       	push   $0xf01399d2
f0119f7d:	e8 2e 62 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119f82:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f85:	e8 3c 2a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119f8a:	29 c3                	sub    %eax,%ebx
f0119f8c:	89 d8                	mov    %ebx,%eax
f0119f8e:	83 f8 01             	cmp    $0x1,%eax
f0119f91:	74 17                	je     f0119faa <test_kmalloc_nextfit+0x975>
f0119f93:	83 ec 04             	sub    $0x4,%esp
f0119f96:	68 8f 9c 13 f0       	push   $0xf0139c8f
f0119f9b:	68 29 01 00 00       	push   $0x129
f0119fa0:	68 d2 99 13 f0       	push   $0xf01399d2
f0119fa5:	e8 06 62 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119faa:	e8 d5 a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119faf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119fb2:	e8 0f 2a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119fb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119fba:	83 ec 0c             	sub    $0xc,%esp
f0119fbd:	68 00 00 50 00       	push   $0x500000
f0119fc2:	e8 98 df fe ff       	call   f0107f5f <kmalloc>
f0119fc7:	83 c4 10             	add    $0x10,%esp
f0119fca:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119fd0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119fd7:	10 00 00 
f0119fda:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119fdf:	0f b6 d0             	movzbl %al,%edx
f0119fe2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119fe8:	01 d0                	add    %edx,%eax
f0119fea:	48                   	dec    %eax
f0119feb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119ff1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119ff7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ffc:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a002:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a008:	29 d0                	sub    %edx,%eax
f011a00a:	89 c1                	mov    %eax,%ecx
f011a00c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a013:	10 00 00 
f011a016:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a01b:	0f b6 c0             	movzbl %al,%eax
f011a01e:	c1 e0 04             	shl    $0x4,%eax
f011a021:	89 c2                	mov    %eax,%edx
f011a023:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a029:	01 d0                	add    %edx,%eax
f011a02b:	48                   	dec    %eax
f011a02c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a032:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a038:	ba 00 00 00 00       	mov    $0x0,%edx
f011a03d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a043:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a049:	29 d0                	sub    %edx,%eax
f011a04b:	01 c8                	add    %ecx,%eax
f011a04d:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011a053:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a059:	39 c2                	cmp    %eax,%edx
f011a05b:	74 17                	je     f011a074 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f011a05d:	83 ec 04             	sub    $0x4,%esp
f011a060:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a065:	68 2f 01 00 00       	push   $0x12f
f011a06a:	68 d2 99 13 f0       	push   $0xf01399d2
f011a06f:	e8 3c 61 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a074:	e8 0b a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a079:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a07c:	74 17                	je     f011a095 <test_kmalloc_nextfit+0xa60>
f011a07e:	83 ec 04             	sub    $0x4,%esp
f011a081:	68 ec 99 13 f0       	push   $0xf01399ec
f011a086:	68 30 01 00 00       	push   $0x130
f011a08b:	68 d2 99 13 f0       	push   $0xf01399d2
f011a090:	e8 1b 61 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a095:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a098:	e8 29 29 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a09d:	29 c3                	sub    %eax,%ebx
f011a09f:	89 d8                	mov    %ebx,%eax
f011a0a1:	3d 00 05 00 00       	cmp    $0x500,%eax
f011a0a6:	74 17                	je     f011a0bf <test_kmalloc_nextfit+0xa8a>
f011a0a8:	83 ec 04             	sub    $0x4,%esp
f011a0ab:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a0b0:	68 31 01 00 00       	push   $0x131
f011a0b5:	68 d2 99 13 f0       	push   $0xf01399d2
f011a0ba:	e8 f1 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a0bf:	e8 c0 a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a0c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a0c7:	e8 fa 28 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a0cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011a0cf:	83 ec 0c             	sub    $0xc,%esp
f011a0d2:	68 00 00 10 00       	push   $0x100000
f011a0d7:	e8 83 de fe ff       	call   f0107f5f <kmalloc>
f011a0dc:	83 c4 10             	add    $0x10,%esp
f011a0df:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011a0e5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a0ec:	10 00 00 
f011a0ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a0f4:	0f b6 d0             	movzbl %al,%edx
f011a0f7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a0fd:	01 d0                	add    %edx,%eax
f011a0ff:	48                   	dec    %eax
f011a100:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a106:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a10c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a111:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a117:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a11d:	29 d0                	sub    %edx,%eax
f011a11f:	89 c1                	mov    %eax,%ecx
f011a121:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a128:	10 00 00 
f011a12b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a130:	0f b6 c0             	movzbl %al,%eax
f011a133:	c1 e0 04             	shl    $0x4,%eax
f011a136:	89 c2                	mov    %eax,%edx
f011a138:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a13e:	01 d0                	add    %edx,%eax
f011a140:	48                   	dec    %eax
f011a141:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a147:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a14d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a152:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a158:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a15e:	29 d0                	sub    %edx,%eax
f011a160:	01 c8                	add    %ecx,%eax
f011a162:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011a168:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a16e:	39 c2                	cmp    %eax,%edx
f011a170:	74 17                	je     f011a189 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f011a172:	83 ec 04             	sub    $0x4,%esp
f011a175:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a17a:	68 37 01 00 00       	push   $0x137
f011a17f:	68 d2 99 13 f0       	push   $0xf01399d2
f011a184:	e8 27 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a189:	e8 f6 a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a18e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a191:	74 17                	je     f011a1aa <test_kmalloc_nextfit+0xb75>
f011a193:	83 ec 04             	sub    $0x4,%esp
f011a196:	68 ec 99 13 f0       	push   $0xf01399ec
f011a19b:	68 38 01 00 00       	push   $0x138
f011a1a0:	68 d2 99 13 f0       	push   $0xf01399d2
f011a1a5:	e8 06 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a1aa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a1ad:	e8 14 28 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a1b2:	29 c3                	sub    %eax,%ebx
f011a1b4:	89 d8                	mov    %ebx,%eax
f011a1b6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a1bb:	74 17                	je     f011a1d4 <test_kmalloc_nextfit+0xb9f>
f011a1bd:	83 ec 04             	sub    $0x4,%esp
f011a1c0:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a1c5:	68 39 01 00 00       	push   $0x139
f011a1ca:	68 d2 99 13 f0       	push   $0xf01399d2
f011a1cf:	e8 dc 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1d4:	e8 ab a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a1d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1dc:	e8 e5 27 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a1e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a1e4:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011a1ea:	83 ec 0c             	sub    $0xc,%esp
f011a1ed:	50                   	push   %eax
f011a1ee:	e8 86 dd fe ff       	call   f0107f79 <kfree>
f011a1f3:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1f6:	e8 89 a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a1fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a1fe:	74 17                	je     f011a217 <test_kmalloc_nextfit+0xbe2>
f011a200:	83 ec 04             	sub    $0x4,%esp
f011a203:	68 ec 99 13 f0       	push   $0xf01399ec
f011a208:	68 3e 01 00 00       	push   $0x13e
f011a20d:	68 d2 99 13 f0       	push   $0xf01399d2
f011a212:	e8 99 5f fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a217:	e8 aa 27 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a21c:	89 c2                	mov    %eax,%edx
f011a21e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a221:	29 c2                	sub    %eax,%edx
f011a223:	89 d0                	mov    %edx,%eax
f011a225:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a22a:	74 17                	je     f011a243 <test_kmalloc_nextfit+0xc0e>
f011a22c:	83 ec 04             	sub    $0x4,%esp
f011a22f:	68 a0 9c 13 f0       	push   $0xf0139ca0
f011a234:	68 3f 01 00 00       	push   $0x13f
f011a239:	68 d2 99 13 f0       	push   $0xf01399d2
f011a23e:	e8 6d 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a243:	e8 3c a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a248:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a24b:	e8 76 27 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a250:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a253:	83 ec 0c             	sub    $0xc,%esp
f011a256:	68 00 04 00 00       	push   $0x400
f011a25b:	e8 ff dc fe ff       	call   f0107f5f <kmalloc>
f011a260:	83 c4 10             	add    $0x10,%esp
f011a263:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a269:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a270:	10 00 00 
f011a273:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a278:	0f b6 d0             	movzbl %al,%edx
f011a27b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a281:	01 d0                	add    %edx,%eax
f011a283:	48                   	dec    %eax
f011a284:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a28a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a290:	ba 00 00 00 00       	mov    $0x0,%edx
f011a295:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a29b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a2a1:	29 d0                	sub    %edx,%eax
f011a2a3:	89 c1                	mov    %eax,%ecx
f011a2a5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a2ac:	10 00 00 
f011a2af:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a2b4:	0f b6 c0             	movzbl %al,%eax
f011a2b7:	c1 e0 04             	shl    $0x4,%eax
f011a2ba:	89 c2                	mov    %eax,%edx
f011a2bc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a2c2:	01 d0                	add    %edx,%eax
f011a2c4:	48                   	dec    %eax
f011a2c5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a2cb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a2d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2d6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a2dc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a2e2:	29 d0                	sub    %edx,%eax
f011a2e4:	01 c8                	add    %ecx,%eax
f011a2e6:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a2ec:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a2f2:	39 c2                	cmp    %eax,%edx
f011a2f4:	74 17                	je     f011a30d <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a2f6:	83 ec 04             	sub    $0x4,%esp
f011a2f9:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a2fe:	68 45 01 00 00       	push   $0x145
f011a303:	68 d2 99 13 f0       	push   $0xf01399d2
f011a308:	e8 a3 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a30d:	e8 72 a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a312:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a315:	74 17                	je     f011a32e <test_kmalloc_nextfit+0xcf9>
f011a317:	83 ec 04             	sub    $0x4,%esp
f011a31a:	68 ec 99 13 f0       	push   $0xf01399ec
f011a31f:	68 46 01 00 00       	push   $0x146
f011a324:	68 d2 99 13 f0       	push   $0xf01399d2
f011a329:	e8 82 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a32e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a331:	e8 90 26 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a336:	29 c3                	sub    %eax,%ebx
f011a338:	89 d8                	mov    %ebx,%eax
f011a33a:	83 f8 01             	cmp    $0x1,%eax
f011a33d:	74 17                	je     f011a356 <test_kmalloc_nextfit+0xd21>
f011a33f:	83 ec 04             	sub    $0x4,%esp
f011a342:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a347:	68 47 01 00 00       	push   $0x147
f011a34c:	68 d2 99 13 f0       	push   $0xf01399d2
f011a351:	e8 5a 5e fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a356:	e8 29 a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a35b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a35e:	e8 63 26 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a363:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a366:	83 ec 0c             	sub    $0xc,%esp
f011a369:	68 00 e0 1f 00       	push   $0x1fe000
f011a36e:	e8 ec db fe ff       	call   f0107f5f <kmalloc>
f011a373:	83 c4 10             	add    $0x10,%esp
f011a376:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a37c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a383:	10 00 00 
f011a386:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a38b:	0f b6 d0             	movzbl %al,%edx
f011a38e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a394:	01 d0                	add    %edx,%eax
f011a396:	48                   	dec    %eax
f011a397:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a39d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3a8:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a3ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3b4:	29 d0                	sub    %edx,%eax
f011a3b6:	89 c1                	mov    %eax,%ecx
f011a3b8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a3bf:	10 00 00 
f011a3c2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a3c7:	0f b6 c0             	movzbl %al,%eax
f011a3ca:	c1 e0 04             	shl    $0x4,%eax
f011a3cd:	89 c2                	mov    %eax,%edx
f011a3cf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a3d5:	01 d0                	add    %edx,%eax
f011a3d7:	48                   	dec    %eax
f011a3d8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a3de:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a3e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3e9:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a3ef:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a3f5:	29 d0                	sub    %edx,%eax
f011a3f7:	01 c8                	add    %ecx,%eax
f011a3f9:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a3ff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a405:	39 c2                	cmp    %eax,%edx
f011a407:	74 17                	je     f011a420 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a409:	83 ec 04             	sub    $0x4,%esp
f011a40c:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a411:	68 4d 01 00 00       	push   $0x14d
f011a416:	68 d2 99 13 f0       	push   $0xf01399d2
f011a41b:	e8 90 5d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a420:	e8 5f a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a425:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a428:	74 17                	je     f011a441 <test_kmalloc_nextfit+0xe0c>
f011a42a:	83 ec 04             	sub    $0x4,%esp
f011a42d:	68 ec 99 13 f0       	push   $0xf01399ec
f011a432:	68 4e 01 00 00       	push   $0x14e
f011a437:	68 d2 99 13 f0       	push   $0xf01399d2
f011a43c:	e8 6f 5d fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a441:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a444:	e8 7d 25 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a449:	29 c3                	sub    %eax,%ebx
f011a44b:	89 d8                	mov    %ebx,%eax
f011a44d:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a452:	74 17                	je     f011a46b <test_kmalloc_nextfit+0xe36>
f011a454:	83 ec 04             	sub    $0x4,%esp
f011a457:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a45c:	68 50 01 00 00       	push   $0x150
f011a461:	68 d2 99 13 f0       	push   $0xf01399d2
f011a466:	e8 45 5d fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a46b:	e8 14 a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a470:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a473:	e8 4e 25 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a478:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a47b:	83 ec 0c             	sub    $0xc,%esp
f011a47e:	68 00 00 08 00       	push   $0x80000
f011a483:	e8 d7 da fe ff       	call   f0107f5f <kmalloc>
f011a488:	83 c4 10             	add    $0x10,%esp
f011a48b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a491:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a498:	10 00 00 
f011a49b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a4a0:	0f b6 d0             	movzbl %al,%edx
f011a4a3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a4a9:	01 d0                	add    %edx,%eax
f011a4ab:	48                   	dec    %eax
f011a4ac:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a4b2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a4b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4bd:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a4c3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a4c9:	29 d0                	sub    %edx,%eax
f011a4cb:	89 c1                	mov    %eax,%ecx
f011a4cd:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a4d4:	10 00 00 
f011a4d7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a4dc:	0f b6 c0             	movzbl %al,%eax
f011a4df:	c1 e0 04             	shl    $0x4,%eax
f011a4e2:	89 c2                	mov    %eax,%edx
f011a4e4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a4ea:	01 d0                	add    %edx,%eax
f011a4ec:	48                   	dec    %eax
f011a4ed:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a4f3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a4f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4fe:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a504:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a50a:	29 d0                	sub    %edx,%eax
f011a50c:	01 c8                	add    %ecx,%eax
f011a50e:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a514:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a51a:	39 c2                	cmp    %eax,%edx
f011a51c:	74 17                	je     f011a535 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a51e:	83 ec 04             	sub    $0x4,%esp
f011a521:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a526:	68 56 01 00 00       	push   $0x156
f011a52b:	68 d2 99 13 f0       	push   $0xf01399d2
f011a530:	e8 7b 5c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a535:	e8 4a a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a53a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a53d:	74 17                	je     f011a556 <test_kmalloc_nextfit+0xf21>
f011a53f:	83 ec 04             	sub    $0x4,%esp
f011a542:	68 ec 99 13 f0       	push   $0xf01399ec
f011a547:	68 57 01 00 00       	push   $0x157
f011a54c:	68 d2 99 13 f0       	push   $0xf01399d2
f011a551:	e8 5a 5c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a556:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a559:	e8 68 24 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a55e:	29 c3                	sub    %eax,%ebx
f011a560:	89 d8                	mov    %ebx,%eax
f011a562:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a567:	74 17                	je     f011a580 <test_kmalloc_nextfit+0xf4b>
f011a569:	83 ec 04             	sub    $0x4,%esp
f011a56c:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a571:	68 58 01 00 00       	push   $0x158
f011a576:	68 d2 99 13 f0       	push   $0xf01399d2
f011a57b:	e8 30 5c fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a580:	83 ec 0c             	sub    $0xc,%esp
f011a583:	68 00 9d 13 f0       	push   $0xf0139d00
f011a588:	e8 a4 68 fe ff       	call   f0100e31 <cprintf>
f011a58d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a590:	e8 ef a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a595:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a598:	e8 29 24 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a59d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a5a0:	83 ec 0c             	sub    $0xc,%esp
f011a5a3:	68 00 00 38 00       	push   $0x380000
f011a5a8:	e8 b2 d9 fe ff       	call   f0107f5f <kmalloc>
f011a5ad:	83 c4 10             	add    $0x10,%esp
f011a5b0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a5b6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a5bd:	10 00 00 
f011a5c0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a5c5:	0f b6 d0             	movzbl %al,%edx
f011a5c8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a5ce:	01 d0                	add    %edx,%eax
f011a5d0:	48                   	dec    %eax
f011a5d1:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a5d7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a5dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5e2:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a5e8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a5ee:	29 d0                	sub    %edx,%eax
f011a5f0:	89 c1                	mov    %eax,%ecx
f011a5f2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a5f9:	10 00 00 
f011a5fc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a601:	0f b6 c0             	movzbl %al,%eax
f011a604:	c1 e0 04             	shl    $0x4,%eax
f011a607:	89 c2                	mov    %eax,%edx
f011a609:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a60f:	01 d0                	add    %edx,%eax
f011a611:	48                   	dec    %eax
f011a612:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a618:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a61e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a623:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a629:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a62f:	29 d0                	sub    %edx,%eax
f011a631:	01 c8                	add    %ecx,%eax
f011a633:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a639:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a63f:	39 c2                	cmp    %eax,%edx
f011a641:	74 17                	je     f011a65a <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a643:	83 ec 04             	sub    $0x4,%esp
f011a646:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a64b:	68 62 01 00 00       	push   $0x162
f011a650:	68 d2 99 13 f0       	push   $0xf01399d2
f011a655:	e8 56 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a65a:	e8 25 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a65f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a662:	74 17                	je     f011a67b <test_kmalloc_nextfit+0x1046>
f011a664:	83 ec 04             	sub    $0x4,%esp
f011a667:	68 ec 99 13 f0       	push   $0xf01399ec
f011a66c:	68 63 01 00 00       	push   $0x163
f011a671:	68 d2 99 13 f0       	push   $0xf01399d2
f011a676:	e8 35 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a67b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a67e:	e8 43 23 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a683:	29 c3                	sub    %eax,%ebx
f011a685:	89 d8                	mov    %ebx,%eax
f011a687:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a68c:	74 17                	je     f011a6a5 <test_kmalloc_nextfit+0x1070>
f011a68e:	83 ec 04             	sub    $0x4,%esp
f011a691:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a696:	68 64 01 00 00       	push   $0x164
f011a69b:	68 d2 99 13 f0       	push   $0xf01399d2
f011a6a0:	e8 0b 5b fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a6a5:	e8 da 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a6aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a6ad:	e8 14 23 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a6b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a6b5:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a6bb:	83 ec 0c             	sub    $0xc,%esp
f011a6be:	50                   	push   %eax
f011a6bf:	e8 b5 d8 fe ff       	call   f0107f79 <kfree>
f011a6c4:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6c7:	e8 b8 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a6cc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a6cf:	74 17                	je     f011a6e8 <test_kmalloc_nextfit+0x10b3>
f011a6d1:	83 ec 04             	sub    $0x4,%esp
f011a6d4:	68 ec 99 13 f0       	push   $0xf01399ec
f011a6d9:	68 69 01 00 00       	push   $0x169
f011a6de:	68 d2 99 13 f0       	push   $0xf01399d2
f011a6e3:	e8 c8 5a fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a6e8:	e8 d9 22 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a6ed:	89 c2                	mov    %eax,%edx
f011a6ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a6f2:	29 c2                	sub    %eax,%edx
f011a6f4:	89 d0                	mov    %edx,%eax
f011a6f6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a6fb:	74 17                	je     f011a714 <test_kmalloc_nextfit+0x10df>
f011a6fd:	83 ec 04             	sub    $0x4,%esp
f011a700:	68 a0 9c 13 f0       	push   $0xf0139ca0
f011a705:	68 6a 01 00 00       	push   $0x16a
f011a70a:	68 d2 99 13 f0       	push   $0xf01399d2
f011a70f:	e8 9c 5a fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a714:	e8 6b 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a719:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a71c:	e8 a5 22 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a721:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a724:	83 ec 0c             	sub    $0xc,%esp
f011a727:	68 00 fc 3f 00       	push   $0x3ffc00
f011a72c:	e8 2e d8 fe ff       	call   f0107f5f <kmalloc>
f011a731:	83 c4 10             	add    $0x10,%esp
f011a734:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a73a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a741:	10 00 00 
f011a744:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a749:	0f b6 d0             	movzbl %al,%edx
f011a74c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a752:	01 d0                	add    %edx,%eax
f011a754:	48                   	dec    %eax
f011a755:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a75b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a761:	ba 00 00 00 00       	mov    $0x0,%edx
f011a766:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a76c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a772:	29 d0                	sub    %edx,%eax
f011a774:	89 c1                	mov    %eax,%ecx
f011a776:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a77d:	10 00 00 
f011a780:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a785:	0f b6 c0             	movzbl %al,%eax
f011a788:	c1 e0 04             	shl    $0x4,%eax
f011a78b:	89 c2                	mov    %eax,%edx
f011a78d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a793:	01 d0                	add    %edx,%eax
f011a795:	48                   	dec    %eax
f011a796:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a79c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a7a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7a7:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a7ad:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a7b3:	29 d0                	sub    %edx,%eax
f011a7b5:	01 c8                	add    %ecx,%eax
f011a7b7:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a7bd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a7c3:	39 c2                	cmp    %eax,%edx
f011a7c5:	74 17                	je     f011a7de <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a7c7:	83 ec 04             	sub    $0x4,%esp
f011a7ca:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a7cf:	68 70 01 00 00       	push   $0x170
f011a7d4:	68 d2 99 13 f0       	push   $0xf01399d2
f011a7d9:	e8 d2 59 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7de:	e8 a1 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a7e3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a7e6:	74 17                	je     f011a7ff <test_kmalloc_nextfit+0x11ca>
f011a7e8:	83 ec 04             	sub    $0x4,%esp
f011a7eb:	68 ec 99 13 f0       	push   $0xf01399ec
f011a7f0:	68 71 01 00 00       	push   $0x171
f011a7f5:	68 d2 99 13 f0       	push   $0xf01399d2
f011a7fa:	e8 b1 59 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a7ff:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a802:	e8 bf 21 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a807:	29 c3                	sub    %eax,%ebx
f011a809:	89 d8                	mov    %ebx,%eax
f011a80b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a810:	74 17                	je     f011a829 <test_kmalloc_nextfit+0x11f4>
f011a812:	83 ec 04             	sub    $0x4,%esp
f011a815:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a81a:	68 72 01 00 00       	push   $0x172
f011a81f:	68 d2 99 13 f0       	push   $0xf01399d2
f011a824:	e8 87 59 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a829:	83 ec 0c             	sub    $0xc,%esp
f011a82c:	68 3c 9d 13 f0       	push   $0xf0139d3c
f011a831:	e8 fb 65 fe ff       	call   f0100e31 <cprintf>
f011a836:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a839:	e8 46 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a83e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a841:	e8 80 21 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a846:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a849:	83 ec 0c             	sub    $0xc,%esp
f011a84c:	68 00 00 60 00       	push   $0x600000
f011a851:	e8 09 d7 fe ff       	call   f0107f5f <kmalloc>
f011a856:	83 c4 10             	add    $0x10,%esp
f011a859:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a85f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a865:	85 c0                	test   %eax,%eax
f011a867:	74 17                	je     f011a880 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a869:	83 ec 04             	sub    $0x4,%esp
f011a86c:	68 e0 9c 13 f0       	push   $0xf0139ce0
f011a871:	68 7c 01 00 00       	push   $0x17c
f011a876:	68 d2 99 13 f0       	push   $0xf01399d2
f011a87b:	e8 30 59 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a880:	e8 ff 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a885:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a888:	74 17                	je     f011a8a1 <test_kmalloc_nextfit+0x126c>
f011a88a:	83 ec 04             	sub    $0x4,%esp
f011a88d:	68 ec 99 13 f0       	push   $0xf01399ec
f011a892:	68 7d 01 00 00       	push   $0x17d
f011a897:	68 d2 99 13 f0       	push   $0xf01399d2
f011a89c:	e8 0f 59 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a8a1:	e8 20 21 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a8a6:	89 c2                	mov    %eax,%edx
f011a8a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a8ab:	39 c2                	cmp    %eax,%edx
f011a8ad:	74 17                	je     f011a8c6 <test_kmalloc_nextfit+0x1291>
f011a8af:	83 ec 04             	sub    $0x4,%esp
f011a8b2:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011a8b7:	68 7e 01 00 00       	push   $0x17e
f011a8bc:	68 d2 99 13 f0       	push   $0xf01399d2
f011a8c1:	e8 ea 58 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a8c6:	83 ec 0c             	sub    $0xc,%esp
f011a8c9:	68 74 9d 13 f0       	push   $0xf0139d74
f011a8ce:	e8 5e 65 fe ff       	call   f0100e31 <cprintf>
f011a8d3:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a8d6:	83 ec 0c             	sub    $0xc,%esp
f011a8d9:	68 b0 9d 13 f0       	push   $0xf0139db0
f011a8de:	e8 4e 65 fe ff       	call   f0100e31 <cprintf>
f011a8e3:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a8e6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a8eb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a8ee:	5b                   	pop    %ebx
f011a8ef:	5f                   	pop    %edi
f011a8f0:	5d                   	pop    %ebp
f011a8f1:	c3                   	ret    

f011a8f2 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a8f2:	55                   	push   %ebp
f011a8f3:	89 e5                	mov    %esp,%ebp
f011a8f5:	57                   	push   %edi
f011a8f6:	53                   	push   %ebx
f011a8f7:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a8fd:	83 ec 0c             	sub    $0xc,%esp
f011a900:	68 14 99 13 f0       	push   $0xf0139914
f011a905:	e8 27 65 fe ff       	call   f0100e31 <cprintf>
f011a90a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a90d:	83 ec 0c             	sub    $0xc,%esp
f011a910:	68 44 99 13 f0       	push   $0xf0139944
f011a915:	e8 17 65 fe ff       	call   f0100e31 <cprintf>
f011a91a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a91d:	83 ec 0c             	sub    $0xc,%esp
f011a920:	68 14 99 13 f0       	push   $0xf0139914
f011a925:	e8 07 65 fe ff       	call   f0100e31 <cprintf>
f011a92a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a92d:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a933:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a938:	b8 00 00 00 00       	mov    $0x0,%eax
f011a93d:	89 d7                	mov    %edx,%edi
f011a93f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a941:	e8 80 20 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a946:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a949:	e8 36 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a94e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a951:	83 ec 0c             	sub    $0xc,%esp
f011a954:	68 00 fc 2f 00       	push   $0x2ffc00
f011a959:	e8 01 d6 fe ff       	call   f0107f5f <kmalloc>
f011a95e:	83 c4 10             	add    $0x10,%esp
f011a961:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a967:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a96d:	89 c1                	mov    %eax,%ecx
f011a96f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a976:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a97b:	0f b6 d0             	movzbl %al,%edx
f011a97e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a981:	01 d0                	add    %edx,%eax
f011a983:	48                   	dec    %eax
f011a984:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a987:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a98a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a98f:	f7 75 ec             	divl   -0x14(%ebp)
f011a992:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a995:	29 d0                	sub    %edx,%eax
f011a997:	89 c3                	mov    %eax,%ebx
f011a999:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a9a0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a9a5:	0f b6 c0             	movzbl %al,%eax
f011a9a8:	c1 e0 04             	shl    $0x4,%eax
f011a9ab:	89 c2                	mov    %eax,%edx
f011a9ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a9b0:	01 d0                	add    %edx,%eax
f011a9b2:	48                   	dec    %eax
f011a9b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a9b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a9b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9be:	f7 75 e4             	divl   -0x1c(%ebp)
f011a9c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a9c4:	29 d0                	sub    %edx,%eax
f011a9c6:	01 d8                	add    %ebx,%eax
f011a9c8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a9cd:	39 c1                	cmp    %eax,%ecx
f011a9cf:	74 17                	je     f011a9e8 <test_kmalloc_bestfit1+0xf6>
f011a9d1:	83 ec 04             	sub    $0x4,%esp
f011a9d4:	68 ec 9d 13 f0       	push   $0xf0139dec
f011a9d9:	68 98 01 00 00       	push   $0x198
f011a9de:	68 d2 99 13 f0       	push   $0xf01399d2
f011a9e3:	e8 c8 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9e8:	e8 97 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a9ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9f0:	74 17                	je     f011aa09 <test_kmalloc_bestfit1+0x117>
f011a9f2:	83 ec 04             	sub    $0x4,%esp
f011a9f5:	68 ec 99 13 f0       	push   $0xf01399ec
f011a9fa:	68 99 01 00 00       	push   $0x199
f011a9ff:	68 d2 99 13 f0       	push   $0xf01399d2
f011aa04:	e8 a7 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa09:	e8 b8 1f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011aa0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa11:	29 c2                	sub    %eax,%edx
f011aa13:	89 d0                	mov    %edx,%eax
f011aa15:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aa1a:	74 17                	je     f011aa33 <test_kmalloc_bestfit1+0x141>
f011aa1c:	83 ec 04             	sub    $0x4,%esp
f011aa1f:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011aa24:	68 9a 01 00 00       	push   $0x19a
f011aa29:	68 d2 99 13 f0       	push   $0xf01399d2
f011aa2e:	e8 7d 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa33:	e8 8e 1f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011aa38:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa3b:	e8 44 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aa40:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011aa43:	83 ec 0c             	sub    $0xc,%esp
f011aa46:	68 00 fc 2f 00       	push   $0x2ffc00
f011aa4b:	e8 0f d5 fe ff       	call   f0107f5f <kmalloc>
f011aa50:	83 c4 10             	add    $0x10,%esp
f011aa53:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011aa59:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aa5f:	89 c1                	mov    %eax,%ecx
f011aa61:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011aa68:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aa6d:	0f b6 d0             	movzbl %al,%edx
f011aa70:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011aa73:	01 d0                	add    %edx,%eax
f011aa75:	48                   	dec    %eax
f011aa76:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011aa79:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011aa7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa81:	f7 75 dc             	divl   -0x24(%ebp)
f011aa84:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011aa87:	29 d0                	sub    %edx,%eax
f011aa89:	89 c3                	mov    %eax,%ebx
f011aa8b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011aa92:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aa97:	0f b6 c0             	movzbl %al,%eax
f011aa9a:	c1 e0 04             	shl    $0x4,%eax
f011aa9d:	89 c2                	mov    %eax,%edx
f011aa9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011aaa2:	01 d0                	add    %edx,%eax
f011aaa4:	48                   	dec    %eax
f011aaa5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011aaa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aaab:	ba 00 00 00 00       	mov    $0x0,%edx
f011aab0:	f7 75 d4             	divl   -0x2c(%ebp)
f011aab3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aab6:	29 d0                	sub    %edx,%eax
f011aab8:	01 d8                	add    %ebx,%eax
f011aaba:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011aabf:	39 c1                	cmp    %eax,%ecx
f011aac1:	74 17                	je     f011aada <test_kmalloc_bestfit1+0x1e8>
f011aac3:	83 ec 04             	sub    $0x4,%esp
f011aac6:	68 ec 9d 13 f0       	push   $0xf0139dec
f011aacb:	68 a0 01 00 00       	push   $0x1a0
f011aad0:	68 d2 99 13 f0       	push   $0xf01399d2
f011aad5:	e8 d6 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aada:	e8 a5 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aadf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aae2:	74 17                	je     f011aafb <test_kmalloc_bestfit1+0x209>
f011aae4:	83 ec 04             	sub    $0x4,%esp
f011aae7:	68 ec 99 13 f0       	push   $0xf01399ec
f011aaec:	68 a1 01 00 00       	push   $0x1a1
f011aaf1:	68 d2 99 13 f0       	push   $0xf01399d2
f011aaf6:	e8 b5 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aafb:	e8 c6 1e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ab00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab03:	29 c2                	sub    %eax,%edx
f011ab05:	89 d0                	mov    %edx,%eax
f011ab07:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ab0c:	74 17                	je     f011ab25 <test_kmalloc_bestfit1+0x233>
f011ab0e:	83 ec 04             	sub    $0x4,%esp
f011ab11:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011ab16:	68 a2 01 00 00       	push   $0x1a2
f011ab1b:	68 d2 99 13 f0       	push   $0xf01399d2
f011ab20:	e8 8b 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab25:	e8 9c 1e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ab2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab2d:	e8 52 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011ab35:	83 ec 0c             	sub    $0xc,%esp
f011ab38:	68 00 fc 1f 00       	push   $0x1ffc00
f011ab3d:	e8 1d d4 fe ff       	call   f0107f5f <kmalloc>
f011ab42:	83 c4 10             	add    $0x10,%esp
f011ab45:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011ab4b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ab51:	89 c1                	mov    %eax,%ecx
f011ab53:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ab5a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ab5f:	0f b6 d0             	movzbl %al,%edx
f011ab62:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ab65:	01 d0                	add    %edx,%eax
f011ab67:	48                   	dec    %eax
f011ab68:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ab6b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ab6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab73:	f7 75 cc             	divl   -0x34(%ebp)
f011ab76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ab79:	29 d0                	sub    %edx,%eax
f011ab7b:	89 c3                	mov    %eax,%ebx
f011ab7d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ab84:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ab89:	0f b6 c0             	movzbl %al,%eax
f011ab8c:	c1 e0 04             	shl    $0x4,%eax
f011ab8f:	89 c2                	mov    %eax,%edx
f011ab91:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ab94:	01 d0                	add    %edx,%eax
f011ab96:	48                   	dec    %eax
f011ab97:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ab9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ab9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011aba2:	f7 75 c4             	divl   -0x3c(%ebp)
f011aba5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aba8:	29 d0                	sub    %edx,%eax
f011abaa:	01 d8                	add    %ebx,%eax
f011abac:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011abb1:	39 c1                	cmp    %eax,%ecx
f011abb3:	74 17                	je     f011abcc <test_kmalloc_bestfit1+0x2da>
f011abb5:	83 ec 04             	sub    $0x4,%esp
f011abb8:	68 ec 9d 13 f0       	push   $0xf0139dec
f011abbd:	68 a8 01 00 00       	push   $0x1a8
f011abc2:	68 d2 99 13 f0       	push   $0xf01399d2
f011abc7:	e8 e4 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abcc:	e8 b3 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011abd1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abd4:	74 17                	je     f011abed <test_kmalloc_bestfit1+0x2fb>
f011abd6:	83 ec 04             	sub    $0x4,%esp
f011abd9:	68 ec 99 13 f0       	push   $0xf01399ec
f011abde:	68 a9 01 00 00       	push   $0x1a9
f011abe3:	68 d2 99 13 f0       	push   $0xf01399d2
f011abe8:	e8 c3 55 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011abed:	e8 d4 1d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011abf2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abf5:	29 c2                	sub    %eax,%edx
f011abf7:	89 d0                	mov    %edx,%eax
f011abf9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011abfe:	74 17                	je     f011ac17 <test_kmalloc_bestfit1+0x325>
f011ac00:	83 ec 04             	sub    $0x4,%esp
f011ac03:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011ac08:	68 aa 01 00 00       	push   $0x1aa
f011ac0d:	68 d2 99 13 f0       	push   $0xf01399d2
f011ac12:	e8 99 55 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac17:	e8 aa 1d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ac1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac1f:	e8 60 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ac24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011ac27:	83 ec 0c             	sub    $0xc,%esp
f011ac2a:	68 00 fc 1f 00       	push   $0x1ffc00
f011ac2f:	e8 2b d3 fe ff       	call   f0107f5f <kmalloc>
f011ac34:	83 c4 10             	add    $0x10,%esp
f011ac37:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ac3d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ac43:	89 c1                	mov    %eax,%ecx
f011ac45:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ac4c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ac51:	0f b6 d0             	movzbl %al,%edx
f011ac54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ac57:	01 d0                	add    %edx,%eax
f011ac59:	48                   	dec    %eax
f011ac5a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ac5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ac60:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac65:	f7 75 bc             	divl   -0x44(%ebp)
f011ac68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ac6b:	29 d0                	sub    %edx,%eax
f011ac6d:	89 c3                	mov    %eax,%ebx
f011ac6f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ac76:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ac7b:	0f b6 c0             	movzbl %al,%eax
f011ac7e:	c1 e0 04             	shl    $0x4,%eax
f011ac81:	89 c2                	mov    %eax,%edx
f011ac83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ac86:	01 d0                	add    %edx,%eax
f011ac88:	48                   	dec    %eax
f011ac89:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ac8c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ac8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac94:	f7 75 b4             	divl   -0x4c(%ebp)
f011ac97:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ac9a:	29 d0                	sub    %edx,%eax
f011ac9c:	01 d8                	add    %ebx,%eax
f011ac9e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011aca3:	39 c1                	cmp    %eax,%ecx
f011aca5:	74 17                	je     f011acbe <test_kmalloc_bestfit1+0x3cc>
f011aca7:	83 ec 04             	sub    $0x4,%esp
f011acaa:	68 ec 9d 13 f0       	push   $0xf0139dec
f011acaf:	68 b0 01 00 00       	push   $0x1b0
f011acb4:	68 d2 99 13 f0       	push   $0xf01399d2
f011acb9:	e8 f2 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acbe:	e8 c1 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011acc3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acc6:	74 17                	je     f011acdf <test_kmalloc_bestfit1+0x3ed>
f011acc8:	83 ec 04             	sub    $0x4,%esp
f011accb:	68 ec 99 13 f0       	push   $0xf01399ec
f011acd0:	68 b1 01 00 00       	push   $0x1b1
f011acd5:	68 d2 99 13 f0       	push   $0xf01399d2
f011acda:	e8 d1 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011acdf:	e8 e2 1c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ace4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ace7:	29 c2                	sub    %eax,%edx
f011ace9:	89 d0                	mov    %edx,%eax
f011aceb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011acf0:	74 17                	je     f011ad09 <test_kmalloc_bestfit1+0x417>
f011acf2:	83 ec 04             	sub    $0x4,%esp
f011acf5:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011acfa:	68 b2 01 00 00       	push   $0x1b2
f011acff:	68 d2 99 13 f0       	push   $0xf01399d2
f011ad04:	e8 a7 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad09:	e8 b8 1c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ad0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad11:	e8 6e 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ad16:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011ad19:	83 ec 0c             	sub    $0xc,%esp
f011ad1c:	68 00 fc 0f 00       	push   $0xffc00
f011ad21:	e8 39 d2 fe ff       	call   f0107f5f <kmalloc>
f011ad26:	83 c4 10             	add    $0x10,%esp
f011ad29:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ad2f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ad35:	89 c1                	mov    %eax,%ecx
f011ad37:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ad3e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ad43:	0f b6 d0             	movzbl %al,%edx
f011ad46:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ad49:	01 d0                	add    %edx,%eax
f011ad4b:	48                   	dec    %eax
f011ad4c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ad4f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ad52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad57:	f7 75 ac             	divl   -0x54(%ebp)
f011ad5a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ad5d:	29 d0                	sub    %edx,%eax
f011ad5f:	89 c3                	mov    %eax,%ebx
f011ad61:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ad68:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ad6d:	0f b6 c0             	movzbl %al,%eax
f011ad70:	c1 e0 04             	shl    $0x4,%eax
f011ad73:	89 c2                	mov    %eax,%edx
f011ad75:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ad78:	01 d0                	add    %edx,%eax
f011ad7a:	48                   	dec    %eax
f011ad7b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ad7e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ad81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad86:	f7 75 a4             	divl   -0x5c(%ebp)
f011ad89:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ad8c:	29 d0                	sub    %edx,%eax
f011ad8e:	01 d8                	add    %ebx,%eax
f011ad90:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ad95:	39 c1                	cmp    %eax,%ecx
f011ad97:	74 17                	je     f011adb0 <test_kmalloc_bestfit1+0x4be>
f011ad99:	83 ec 04             	sub    $0x4,%esp
f011ad9c:	68 ec 9d 13 f0       	push   $0xf0139dec
f011ada1:	68 b8 01 00 00       	push   $0x1b8
f011ada6:	68 d2 99 13 f0       	push   $0xf01399d2
f011adab:	e8 00 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adb0:	e8 cf 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011adb5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adb8:	74 17                	je     f011add1 <test_kmalloc_bestfit1+0x4df>
f011adba:	83 ec 04             	sub    $0x4,%esp
f011adbd:	68 ec 99 13 f0       	push   $0xf01399ec
f011adc2:	68 b9 01 00 00       	push   $0x1b9
f011adc7:	68 d2 99 13 f0       	push   $0xf01399d2
f011adcc:	e8 df 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011add1:	e8 f0 1b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011add6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011add9:	29 c2                	sub    %eax,%edx
f011addb:	89 d0                	mov    %edx,%eax
f011addd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ade2:	74 17                	je     f011adfb <test_kmalloc_bestfit1+0x509>
f011ade4:	83 ec 04             	sub    $0x4,%esp
f011ade7:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011adec:	68 ba 01 00 00       	push   $0x1ba
f011adf1:	68 d2 99 13 f0       	push   $0xf01399d2
f011adf6:	e8 b5 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011adfb:	e8 c6 1b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ae00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae03:	e8 7c 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ae08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ae0b:	83 ec 0c             	sub    $0xc,%esp
f011ae0e:	68 00 fc 0f 00       	push   $0xffc00
f011ae13:	e8 47 d1 fe ff       	call   f0107f5f <kmalloc>
f011ae18:	83 c4 10             	add    $0x10,%esp
f011ae1b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ae21:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ae27:	89 c1                	mov    %eax,%ecx
f011ae29:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ae30:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ae35:	0f b6 d0             	movzbl %al,%edx
f011ae38:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ae3b:	01 d0                	add    %edx,%eax
f011ae3d:	48                   	dec    %eax
f011ae3e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ae41:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ae44:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae49:	f7 75 9c             	divl   -0x64(%ebp)
f011ae4c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ae4f:	29 d0                	sub    %edx,%eax
f011ae51:	89 c3                	mov    %eax,%ebx
f011ae53:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ae5a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ae5f:	0f b6 c0             	movzbl %al,%eax
f011ae62:	c1 e0 04             	shl    $0x4,%eax
f011ae65:	89 c2                	mov    %eax,%edx
f011ae67:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ae6a:	01 d0                	add    %edx,%eax
f011ae6c:	48                   	dec    %eax
f011ae6d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ae70:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ae73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae78:	f7 75 94             	divl   -0x6c(%ebp)
f011ae7b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ae7e:	29 d0                	sub    %edx,%eax
f011ae80:	01 d8                	add    %ebx,%eax
f011ae82:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ae87:	39 c1                	cmp    %eax,%ecx
f011ae89:	74 17                	je     f011aea2 <test_kmalloc_bestfit1+0x5b0>
f011ae8b:	83 ec 04             	sub    $0x4,%esp
f011ae8e:	68 ec 9d 13 f0       	push   $0xf0139dec
f011ae93:	68 c0 01 00 00       	push   $0x1c0
f011ae98:	68 d2 99 13 f0       	push   $0xf01399d2
f011ae9d:	e8 0e 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aea2:	e8 dd 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aea7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aeaa:	74 17                	je     f011aec3 <test_kmalloc_bestfit1+0x5d1>
f011aeac:	83 ec 04             	sub    $0x4,%esp
f011aeaf:	68 ec 99 13 f0       	push   $0xf01399ec
f011aeb4:	68 c1 01 00 00       	push   $0x1c1
f011aeb9:	68 d2 99 13 f0       	push   $0xf01399d2
f011aebe:	e8 ed 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aec3:	e8 fe 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011aec8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aecb:	29 c2                	sub    %eax,%edx
f011aecd:	89 d0                	mov    %edx,%eax
f011aecf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aed4:	74 17                	je     f011aeed <test_kmalloc_bestfit1+0x5fb>
f011aed6:	83 ec 04             	sub    $0x4,%esp
f011aed9:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011aede:	68 c2 01 00 00       	push   $0x1c2
f011aee3:	68 d2 99 13 f0       	push   $0xf01399d2
f011aee8:	e8 c3 52 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aeed:	e8 d4 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011aef2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aef5:	e8 8a 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aefa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011aefd:	83 ec 0c             	sub    $0xc,%esp
f011af00:	68 00 fc 0f 00       	push   $0xffc00
f011af05:	e8 55 d0 fe ff       	call   f0107f5f <kmalloc>
f011af0a:	83 c4 10             	add    $0x10,%esp
f011af0d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011af13:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011af19:	89 c1                	mov    %eax,%ecx
f011af1b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011af22:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011af27:	0f b6 d0             	movzbl %al,%edx
f011af2a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011af2d:	01 d0                	add    %edx,%eax
f011af2f:	48                   	dec    %eax
f011af30:	89 45 88             	mov    %eax,-0x78(%ebp)
f011af33:	8b 45 88             	mov    -0x78(%ebp),%eax
f011af36:	ba 00 00 00 00       	mov    $0x0,%edx
f011af3b:	f7 75 8c             	divl   -0x74(%ebp)
f011af3e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011af41:	29 d0                	sub    %edx,%eax
f011af43:	89 c3                	mov    %eax,%ebx
f011af45:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011af4c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011af51:	0f b6 c0             	movzbl %al,%eax
f011af54:	c1 e0 04             	shl    $0x4,%eax
f011af57:	89 c2                	mov    %eax,%edx
f011af59:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011af5c:	01 d0                	add    %edx,%eax
f011af5e:	48                   	dec    %eax
f011af5f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011af62:	8b 45 80             	mov    -0x80(%ebp),%eax
f011af65:	ba 00 00 00 00       	mov    $0x0,%edx
f011af6a:	f7 75 84             	divl   -0x7c(%ebp)
f011af6d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011af70:	29 d0                	sub    %edx,%eax
f011af72:	01 d8                	add    %ebx,%eax
f011af74:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011af79:	39 c1                	cmp    %eax,%ecx
f011af7b:	74 17                	je     f011af94 <test_kmalloc_bestfit1+0x6a2>
f011af7d:	83 ec 04             	sub    $0x4,%esp
f011af80:	68 ec 9d 13 f0       	push   $0xf0139dec
f011af85:	68 c8 01 00 00       	push   $0x1c8
f011af8a:	68 d2 99 13 f0       	push   $0xf01399d2
f011af8f:	e8 1c 52 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af94:	e8 eb 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af9c:	74 17                	je     f011afb5 <test_kmalloc_bestfit1+0x6c3>
f011af9e:	83 ec 04             	sub    $0x4,%esp
f011afa1:	68 ec 99 13 f0       	push   $0xf01399ec
f011afa6:	68 c9 01 00 00       	push   $0x1c9
f011afab:	68 d2 99 13 f0       	push   $0xf01399d2
f011afb0:	e8 fb 51 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011afb5:	e8 0c 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011afba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011afbd:	29 c2                	sub    %eax,%edx
f011afbf:	89 d0                	mov    %edx,%eax
f011afc1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011afc6:	74 17                	je     f011afdf <test_kmalloc_bestfit1+0x6ed>
f011afc8:	83 ec 04             	sub    $0x4,%esp
f011afcb:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011afd0:	68 ca 01 00 00       	push   $0x1ca
f011afd5:	68 d2 99 13 f0       	push   $0xf01399d2
f011afda:	e8 d1 51 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011afdf:	e8 e2 19 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011afe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afe7:	e8 98 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011afec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011afef:	83 ec 0c             	sub    $0xc,%esp
f011aff2:	68 00 fc 0f 00       	push   $0xffc00
f011aff7:	e8 63 cf fe ff       	call   f0107f5f <kmalloc>
f011affc:	83 c4 10             	add    $0x10,%esp
f011afff:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b005:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b00b:	89 c1                	mov    %eax,%ecx
f011b00d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b014:	10 00 00 
f011b017:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b01c:	0f b6 d0             	movzbl %al,%edx
f011b01f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b025:	01 d0                	add    %edx,%eax
f011b027:	48                   	dec    %eax
f011b028:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b02e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b034:	ba 00 00 00 00       	mov    $0x0,%edx
f011b039:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b03f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b045:	29 d0                	sub    %edx,%eax
f011b047:	89 c3                	mov    %eax,%ebx
f011b049:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b050:	10 00 00 
f011b053:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b058:	0f b6 c0             	movzbl %al,%eax
f011b05b:	c1 e0 04             	shl    $0x4,%eax
f011b05e:	89 c2                	mov    %eax,%edx
f011b060:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b066:	01 d0                	add    %edx,%eax
f011b068:	48                   	dec    %eax
f011b069:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b06f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b075:	ba 00 00 00 00       	mov    $0x0,%edx
f011b07a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b080:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b086:	29 d0                	sub    %edx,%eax
f011b088:	01 d8                	add    %ebx,%eax
f011b08a:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b08f:	39 c1                	cmp    %eax,%ecx
f011b091:	74 17                	je     f011b0aa <test_kmalloc_bestfit1+0x7b8>
f011b093:	83 ec 04             	sub    $0x4,%esp
f011b096:	68 ec 9d 13 f0       	push   $0xf0139dec
f011b09b:	68 d0 01 00 00       	push   $0x1d0
f011b0a0:	68 d2 99 13 f0       	push   $0xf01399d2
f011b0a5:	e8 06 51 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0aa:	e8 d5 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b0af:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0b2:	74 17                	je     f011b0cb <test_kmalloc_bestfit1+0x7d9>
f011b0b4:	83 ec 04             	sub    $0x4,%esp
f011b0b7:	68 ec 99 13 f0       	push   $0xf01399ec
f011b0bc:	68 d1 01 00 00       	push   $0x1d1
f011b0c1:	68 d2 99 13 f0       	push   $0xf01399d2
f011b0c6:	e8 e5 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b0cb:	e8 f6 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b0d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0d3:	29 c2                	sub    %eax,%edx
f011b0d5:	89 d0                	mov    %edx,%eax
f011b0d7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b0dc:	74 17                	je     f011b0f5 <test_kmalloc_bestfit1+0x803>
f011b0de:	83 ec 04             	sub    $0x4,%esp
f011b0e1:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011b0e6:	68 d2 01 00 00       	push   $0x1d2
f011b0eb:	68 d2 99 13 f0       	push   $0xf01399d2
f011b0f0:	e8 bb 50 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b0f5:	e8 cc 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b0fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0fd:	e8 82 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b102:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b105:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b10b:	83 ec 0c             	sub    $0xc,%esp
f011b10e:	50                   	push   %eax
f011b10f:	e8 65 ce fe ff       	call   f0107f79 <kfree>
f011b114:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b117:	e8 68 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b11c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b11f:	74 17                	je     f011b138 <test_kmalloc_bestfit1+0x846>
f011b121:	83 ec 04             	sub    $0x4,%esp
f011b124:	68 ec 99 13 f0       	push   $0xf01399ec
f011b129:	68 db 01 00 00       	push   $0x1db
f011b12e:	68 d2 99 13 f0       	push   $0xf01399d2
f011b133:	e8 78 50 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b138:	e8 89 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b13d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b140:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b145:	74 17                	je     f011b15e <test_kmalloc_bestfit1+0x86c>
f011b147:	83 ec 04             	sub    $0x4,%esp
f011b14a:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011b14f:	68 dc 01 00 00       	push   $0x1dc
f011b154:	68 d2 99 13 f0       	push   $0xf01399d2
f011b159:	e8 52 50 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b15e:	e8 63 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b163:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b166:	e8 19 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b16b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b16e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b174:	83 ec 0c             	sub    $0xc,%esp
f011b177:	50                   	push   %eax
f011b178:	e8 fc cd fe ff       	call   f0107f79 <kfree>
f011b17d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b180:	e8 ff 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b185:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b188:	74 17                	je     f011b1a1 <test_kmalloc_bestfit1+0x8af>
f011b18a:	83 ec 04             	sub    $0x4,%esp
f011b18d:	68 ec 99 13 f0       	push   $0xf01399ec
f011b192:	68 e2 01 00 00       	push   $0x1e2
f011b197:	68 d2 99 13 f0       	push   $0xf01399d2
f011b19c:	e8 0f 50 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b1a1:	e8 20 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b1a6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b1a9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b1ae:	74 17                	je     f011b1c7 <test_kmalloc_bestfit1+0x8d5>
f011b1b0:	83 ec 04             	sub    $0x4,%esp
f011b1b3:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011b1b8:	68 e3 01 00 00       	push   $0x1e3
f011b1bd:	68 d2 99 13 f0       	push   $0xf01399d2
f011b1c2:	e8 e9 4f fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1c7:	e8 fa 17 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b1cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1cf:	e8 b0 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b1d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b1d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b1dd:	83 ec 0c             	sub    $0xc,%esp
f011b1e0:	50                   	push   %eax
f011b1e1:	e8 93 cd fe ff       	call   f0107f79 <kfree>
f011b1e6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1e9:	e8 96 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b1ee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1f1:	74 17                	je     f011b20a <test_kmalloc_bestfit1+0x918>
f011b1f3:	83 ec 04             	sub    $0x4,%esp
f011b1f6:	68 ec 99 13 f0       	push   $0xf01399ec
f011b1fb:	68 e9 01 00 00       	push   $0x1e9
f011b200:	68 d2 99 13 f0       	push   $0xf01399d2
f011b205:	e8 a6 4f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b20a:	e8 b7 17 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b20f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b212:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b217:	74 17                	je     f011b230 <test_kmalloc_bestfit1+0x93e>
f011b219:	83 ec 04             	sub    $0x4,%esp
f011b21c:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011b221:	68 ea 01 00 00       	push   $0x1ea
f011b226:	68 d2 99 13 f0       	push   $0xf01399d2
f011b22b:	e8 80 4f fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b230:	e8 91 17 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b235:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b238:	e8 47 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b23d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b240:	83 ec 0c             	sub    $0xc,%esp
f011b243:	68 00 00 08 00       	push   $0x80000
f011b248:	e8 12 cd fe ff       	call   f0107f5f <kmalloc>
f011b24d:	83 c4 10             	add    $0x10,%esp
f011b250:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b256:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b25c:	89 c1                	mov    %eax,%ecx
f011b25e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b265:	10 00 00 
f011b268:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b26d:	0f b6 d0             	movzbl %al,%edx
f011b270:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b276:	01 d0                	add    %edx,%eax
f011b278:	48                   	dec    %eax
f011b279:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b27f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b285:	ba 00 00 00 00       	mov    $0x0,%edx
f011b28a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b290:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b296:	29 d0                	sub    %edx,%eax
f011b298:	89 c3                	mov    %eax,%ebx
f011b29a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b2a1:	10 00 00 
f011b2a4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b2a9:	0f b6 c0             	movzbl %al,%eax
f011b2ac:	c1 e0 04             	shl    $0x4,%eax
f011b2af:	89 c2                	mov    %eax,%edx
f011b2b1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b2b7:	01 d0                	add    %edx,%eax
f011b2b9:	48                   	dec    %eax
f011b2ba:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b2c0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b2c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2cb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b2d1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b2d7:	29 d0                	sub    %edx,%eax
f011b2d9:	01 d8                	add    %ebx,%eax
f011b2db:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b2e0:	39 c1                	cmp    %eax,%ecx
f011b2e2:	74 17                	je     f011b2fb <test_kmalloc_bestfit1+0xa09>
f011b2e4:	83 ec 04             	sub    $0x4,%esp
f011b2e7:	68 ec 9d 13 f0       	push   $0xf0139dec
f011b2ec:	68 f3 01 00 00       	push   $0x1f3
f011b2f1:	68 d2 99 13 f0       	push   $0xf01399d2
f011b2f6:	e8 b5 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2fb:	e8 84 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b300:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b303:	74 17                	je     f011b31c <test_kmalloc_bestfit1+0xa2a>
f011b305:	83 ec 04             	sub    $0x4,%esp
f011b308:	68 ec 99 13 f0       	push   $0xf01399ec
f011b30d:	68 f4 01 00 00       	push   $0x1f4
f011b312:	68 d2 99 13 f0       	push   $0xf01399d2
f011b317:	e8 94 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b31c:	e8 a5 16 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b321:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b324:	29 c2                	sub    %eax,%edx
f011b326:	89 d0                	mov    %edx,%eax
f011b328:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b32d:	74 17                	je     f011b346 <test_kmalloc_bestfit1+0xa54>
f011b32f:	83 ec 04             	sub    $0x4,%esp
f011b332:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011b337:	68 f5 01 00 00       	push   $0x1f5
f011b33c:	68 d2 99 13 f0       	push   $0xf01399d2
f011b341:	e8 6a 4e fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b346:	e8 7b 16 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b34b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b34e:	e8 31 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b353:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b356:	83 ec 0c             	sub    $0xc,%esp
f011b359:	68 00 fc 0f 00       	push   $0xffc00
f011b35e:	e8 fc cb fe ff       	call   f0107f5f <kmalloc>
f011b363:	83 c4 10             	add    $0x10,%esp
f011b366:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b36c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b372:	89 c1                	mov    %eax,%ecx
f011b374:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b37b:	10 00 00 
f011b37e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b383:	0f b6 d0             	movzbl %al,%edx
f011b386:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b38c:	01 d0                	add    %edx,%eax
f011b38e:	48                   	dec    %eax
f011b38f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b395:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b39b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3a0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b3a6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b3ac:	29 d0                	sub    %edx,%eax
f011b3ae:	89 c3                	mov    %eax,%ebx
f011b3b0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b3b7:	10 00 00 
f011b3ba:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b3bf:	0f b6 c0             	movzbl %al,%eax
f011b3c2:	c1 e0 04             	shl    $0x4,%eax
f011b3c5:	89 c2                	mov    %eax,%edx
f011b3c7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b3cd:	01 d0                	add    %edx,%eax
f011b3cf:	48                   	dec    %eax
f011b3d0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b3d6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b3dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3e1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b3e7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b3ed:	29 d0                	sub    %edx,%eax
f011b3ef:	01 d8                	add    %ebx,%eax
f011b3f1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b3f6:	39 c1                	cmp    %eax,%ecx
f011b3f8:	74 17                	je     f011b411 <test_kmalloc_bestfit1+0xb1f>
f011b3fa:	83 ec 04             	sub    $0x4,%esp
f011b3fd:	68 ec 9d 13 f0       	push   $0xf0139dec
f011b402:	68 fb 01 00 00       	push   $0x1fb
f011b407:	68 d2 99 13 f0       	push   $0xf01399d2
f011b40c:	e8 9f 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b411:	e8 6e 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b416:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b419:	74 17                	je     f011b432 <test_kmalloc_bestfit1+0xb40>
f011b41b:	83 ec 04             	sub    $0x4,%esp
f011b41e:	68 ec 99 13 f0       	push   $0xf01399ec
f011b423:	68 fc 01 00 00       	push   $0x1fc
f011b428:	68 d2 99 13 f0       	push   $0xf01399d2
f011b42d:	e8 7e 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b432:	e8 8f 15 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b437:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b43a:	29 c2                	sub    %eax,%edx
f011b43c:	89 d0                	mov    %edx,%eax
f011b43e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b443:	74 17                	je     f011b45c <test_kmalloc_bestfit1+0xb6a>
f011b445:	83 ec 04             	sub    $0x4,%esp
f011b448:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011b44d:	68 fd 01 00 00       	push   $0x1fd
f011b452:	68 d2 99 13 f0       	push   $0xf01399d2
f011b457:	e8 54 4d fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b45c:	e8 65 15 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b461:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b464:	e8 1b 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b469:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b46c:	83 ec 0c             	sub    $0xc,%esp
f011b46f:	68 00 fc 03 00       	push   $0x3fc00
f011b474:	e8 e6 ca fe ff       	call   f0107f5f <kmalloc>
f011b479:	83 c4 10             	add    $0x10,%esp
f011b47c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b482:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b488:	89 c1                	mov    %eax,%ecx
f011b48a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b491:	10 00 00 
f011b494:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b499:	0f b6 d0             	movzbl %al,%edx
f011b49c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b4a2:	01 d0                	add    %edx,%eax
f011b4a4:	48                   	dec    %eax
f011b4a5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b4ab:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b4b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4b6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b4bc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b4c2:	29 d0                	sub    %edx,%eax
f011b4c4:	89 c3                	mov    %eax,%ebx
f011b4c6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b4cd:	10 00 00 
f011b4d0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b4d5:	0f b6 c0             	movzbl %al,%eax
f011b4d8:	c1 e0 04             	shl    $0x4,%eax
f011b4db:	89 c2                	mov    %eax,%edx
f011b4dd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b4e3:	01 d0                	add    %edx,%eax
f011b4e5:	48                   	dec    %eax
f011b4e6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b4ec:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b4f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4f7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b4fd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b503:	29 d0                	sub    %edx,%eax
f011b505:	01 d8                	add    %ebx,%eax
f011b507:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b50c:	39 c1                	cmp    %eax,%ecx
f011b50e:	74 17                	je     f011b527 <test_kmalloc_bestfit1+0xc35>
f011b510:	83 ec 04             	sub    $0x4,%esp
f011b513:	68 ec 9d 13 f0       	push   $0xf0139dec
f011b518:	68 03 02 00 00       	push   $0x203
f011b51d:	68 d2 99 13 f0       	push   $0xf01399d2
f011b522:	e8 89 4c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b527:	e8 58 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b52c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b52f:	74 17                	je     f011b548 <test_kmalloc_bestfit1+0xc56>
f011b531:	83 ec 04             	sub    $0x4,%esp
f011b534:	68 ec 99 13 f0       	push   $0xf01399ec
f011b539:	68 04 02 00 00       	push   $0x204
f011b53e:	68 d2 99 13 f0       	push   $0xf01399d2
f011b543:	e8 68 4c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b548:	e8 79 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b54d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b550:	29 c2                	sub    %eax,%edx
f011b552:	89 d0                	mov    %edx,%eax
f011b554:	83 f8 40             	cmp    $0x40,%eax
f011b557:	74 17                	je     f011b570 <test_kmalloc_bestfit1+0xc7e>
f011b559:	83 ec 04             	sub    $0x4,%esp
f011b55c:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011b561:	68 05 02 00 00       	push   $0x205
f011b566:	68 d2 99 13 f0       	push   $0xf01399d2
f011b56b:	e8 40 4c fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b570:	e8 51 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b575:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b578:	e8 07 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b57d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b580:	83 ec 0c             	sub    $0xc,%esp
f011b583:	68 00 fc 3f 00       	push   $0x3ffc00
f011b588:	e8 d2 c9 fe ff       	call   f0107f5f <kmalloc>
f011b58d:	83 c4 10             	add    $0x10,%esp
f011b590:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b596:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b59c:	89 c1                	mov    %eax,%ecx
f011b59e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b5a5:	10 00 00 
f011b5a8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b5ad:	0f b6 d0             	movzbl %al,%edx
f011b5b0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b5b6:	01 d0                	add    %edx,%eax
f011b5b8:	48                   	dec    %eax
f011b5b9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b5bf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b5c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5ca:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b5d0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b5d6:	29 d0                	sub    %edx,%eax
f011b5d8:	89 c3                	mov    %eax,%ebx
f011b5da:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b5e1:	10 00 00 
f011b5e4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b5e9:	0f b6 c0             	movzbl %al,%eax
f011b5ec:	c1 e0 04             	shl    $0x4,%eax
f011b5ef:	89 c2                	mov    %eax,%edx
f011b5f1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b5f7:	01 d0                	add    %edx,%eax
f011b5f9:	48                   	dec    %eax
f011b5fa:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b600:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b606:	ba 00 00 00 00       	mov    $0x0,%edx
f011b60b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b611:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b617:	29 d0                	sub    %edx,%eax
f011b619:	01 d8                	add    %ebx,%eax
f011b61b:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b620:	39 c1                	cmp    %eax,%ecx
f011b622:	74 17                	je     f011b63b <test_kmalloc_bestfit1+0xd49>
f011b624:	83 ec 04             	sub    $0x4,%esp
f011b627:	68 ec 9d 13 f0       	push   $0xf0139dec
f011b62c:	68 0b 02 00 00       	push   $0x20b
f011b631:	68 d2 99 13 f0       	push   $0xf01399d2
f011b636:	e8 75 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b63b:	e8 44 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b640:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b643:	74 17                	je     f011b65c <test_kmalloc_bestfit1+0xd6a>
f011b645:	83 ec 04             	sub    $0x4,%esp
f011b648:	68 ec 99 13 f0       	push   $0xf01399ec
f011b64d:	68 0c 02 00 00       	push   $0x20c
f011b652:	68 d2 99 13 f0       	push   $0xf01399d2
f011b657:	e8 54 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b65c:	e8 65 13 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b661:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b664:	29 c2                	sub    %eax,%edx
f011b666:	89 d0                	mov    %edx,%eax
f011b668:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b66d:	74 17                	je     f011b686 <test_kmalloc_bestfit1+0xd94>
f011b66f:	83 ec 04             	sub    $0x4,%esp
f011b672:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011b677:	68 0d 02 00 00       	push   $0x20d
f011b67c:	68 d2 99 13 f0       	push   $0xf01399d2
f011b681:	e8 2a 4b fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b686:	e8 3b 13 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b68b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b68e:	e8 f1 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b693:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b696:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b69c:	83 ec 0c             	sub    $0xc,%esp
f011b69f:	50                   	push   %eax
f011b6a0:	e8 d4 c8 fe ff       	call   f0107f79 <kfree>
f011b6a5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6a8:	e8 d7 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b6ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6b0:	74 17                	je     f011b6c9 <test_kmalloc_bestfit1+0xdd7>
f011b6b2:	83 ec 04             	sub    $0x4,%esp
f011b6b5:	68 ec 99 13 f0       	push   $0xf01399ec
f011b6ba:	68 16 02 00 00       	push   $0x216
f011b6bf:	68 d2 99 13 f0       	push   $0xf01399d2
f011b6c4:	e8 e7 4a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b6c9:	e8 f8 12 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b6ce:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b6d1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b6d6:	74 17                	je     f011b6ef <test_kmalloc_bestfit1+0xdfd>
f011b6d8:	83 ec 04             	sub    $0x4,%esp
f011b6db:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011b6e0:	68 17 02 00 00       	push   $0x217
f011b6e5:	68 d2 99 13 f0       	push   $0xf01399d2
f011b6ea:	e8 c1 4a fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b6ef:	e8 d2 12 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b6f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b6f7:	e8 88 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b6fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b6ff:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b705:	83 ec 0c             	sub    $0xc,%esp
f011b708:	50                   	push   %eax
f011b709:	e8 6b c8 fe ff       	call   f0107f79 <kfree>
f011b70e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b711:	e8 6e 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b716:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b719:	74 17                	je     f011b732 <test_kmalloc_bestfit1+0xe40>
f011b71b:	83 ec 04             	sub    $0x4,%esp
f011b71e:	68 ec 99 13 f0       	push   $0xf01399ec
f011b723:	68 1d 02 00 00       	push   $0x21d
f011b728:	68 d2 99 13 f0       	push   $0xf01399d2
f011b72d:	e8 7e 4a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b732:	e8 8f 12 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b737:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b73a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b73f:	74 17                	je     f011b758 <test_kmalloc_bestfit1+0xe66>
f011b741:	83 ec 04             	sub    $0x4,%esp
f011b744:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011b749:	68 1e 02 00 00       	push   $0x21e
f011b74e:	68 d2 99 13 f0       	push   $0xf01399d2
f011b753:	e8 58 4a fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b758:	e8 69 12 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b75d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b760:	e8 1f 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b765:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b768:	83 ec 0c             	sub    $0xc,%esp
f011b76b:	68 00 fc 1f 00       	push   $0x1ffc00
f011b770:	e8 ea c7 fe ff       	call   f0107f5f <kmalloc>
f011b775:	83 c4 10             	add    $0x10,%esp
f011b778:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b77e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b784:	89 c1                	mov    %eax,%ecx
f011b786:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b78d:	10 00 00 
f011b790:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b795:	0f b6 d0             	movzbl %al,%edx
f011b798:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b79e:	01 d0                	add    %edx,%eax
f011b7a0:	48                   	dec    %eax
f011b7a1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b7a7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b7ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7b2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b7b8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b7be:	29 d0                	sub    %edx,%eax
f011b7c0:	89 c3                	mov    %eax,%ebx
f011b7c2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b7c9:	10 00 00 
f011b7cc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b7d1:	0f b6 c0             	movzbl %al,%eax
f011b7d4:	c1 e0 04             	shl    $0x4,%eax
f011b7d7:	89 c2                	mov    %eax,%edx
f011b7d9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b7df:	01 d0                	add    %edx,%eax
f011b7e1:	48                   	dec    %eax
f011b7e2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b7e8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b7ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7f3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b7f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b7ff:	29 d0                	sub    %edx,%eax
f011b801:	01 d8                	add    %ebx,%eax
f011b803:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b808:	39 c1                	cmp    %eax,%ecx
f011b80a:	74 17                	je     f011b823 <test_kmalloc_bestfit1+0xf31>
f011b80c:	83 ec 04             	sub    $0x4,%esp
f011b80f:	68 ec 9d 13 f0       	push   $0xf0139dec
f011b814:	68 27 02 00 00       	push   $0x227
f011b819:	68 d2 99 13 f0       	push   $0xf01399d2
f011b81e:	e8 8d 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b823:	e8 5c 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b828:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b82b:	74 17                	je     f011b844 <test_kmalloc_bestfit1+0xf52>
f011b82d:	83 ec 04             	sub    $0x4,%esp
f011b830:	68 ec 99 13 f0       	push   $0xf01399ec
f011b835:	68 28 02 00 00       	push   $0x228
f011b83a:	68 d2 99 13 f0       	push   $0xf01399d2
f011b83f:	e8 6c 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b844:	e8 7d 11 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b849:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b84c:	29 c2                	sub    %eax,%edx
f011b84e:	89 d0                	mov    %edx,%eax
f011b850:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b855:	74 17                	je     f011b86e <test_kmalloc_bestfit1+0xf7c>
f011b857:	83 ec 04             	sub    $0x4,%esp
f011b85a:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011b85f:	68 29 02 00 00       	push   $0x229
f011b864:	68 d2 99 13 f0       	push   $0xf01399d2
f011b869:	e8 42 49 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b86e:	83 ec 0c             	sub    $0xc,%esp
f011b871:	68 3c 9e 13 f0       	push   $0xf0139e3c
f011b876:	e8 b6 55 fe ff       	call   f0100e31 <cprintf>
f011b87b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b87e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b883:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b886:	5b                   	pop    %ebx
f011b887:	5f                   	pop    %edi
f011b888:	5d                   	pop    %ebp
f011b889:	c3                   	ret    

f011b88a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b88a:	55                   	push   %ebp
f011b88b:	89 e5                	mov    %esp,%ebp
f011b88d:	57                   	push   %edi
f011b88e:	53                   	push   %ebx
f011b88f:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b895:	83 ec 0c             	sub    $0xc,%esp
f011b898:	68 14 99 13 f0       	push   $0xf0139914
f011b89d:	e8 8f 55 fe ff       	call   f0100e31 <cprintf>
f011b8a2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b8a5:	83 ec 0c             	sub    $0xc,%esp
f011b8a8:	68 44 99 13 f0       	push   $0xf0139944
f011b8ad:	e8 7f 55 fe ff       	call   f0100e31 <cprintf>
f011b8b2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b8b5:	83 ec 0c             	sub    $0xc,%esp
f011b8b8:	68 14 99 13 f0       	push   $0xf0139914
f011b8bd:	e8 6f 55 fe ff       	call   f0100e31 <cprintf>
f011b8c2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b8c5:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b8cb:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b8d0:	b8 00 00 00 00       	mov    $0x0,%eax
f011b8d5:	89 d7                	mov    %edx,%edi
f011b8d7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b8d9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b8e0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b8e5:	0f b6 d0             	movzbl %al,%edx
f011b8e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b8eb:	01 d0                	add    %edx,%eax
f011b8ed:	48                   	dec    %eax
f011b8ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b8f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b8f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8f9:	f7 75 f4             	divl   -0xc(%ebp)
f011b8fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b8ff:	29 d0                	sub    %edx,%eax
f011b901:	89 c1                	mov    %eax,%ecx
f011b903:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b90a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b90f:	0f b6 c0             	movzbl %al,%eax
f011b912:	c1 e0 04             	shl    $0x4,%eax
f011b915:	89 c2                	mov    %eax,%edx
f011b917:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b91a:	01 d0                	add    %edx,%eax
f011b91c:	48                   	dec    %eax
f011b91d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b920:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b923:	ba 00 00 00 00       	mov    $0x0,%edx
f011b928:	f7 75 ec             	divl   -0x14(%ebp)
f011b92b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b92e:	29 d0                	sub    %edx,%eax
f011b930:	01 c8                	add    %ecx,%eax
f011b932:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b937:	29 c2                	sub    %eax,%edx
f011b939:	89 d0                	mov    %edx,%eax
f011b93b:	83 ec 0c             	sub    $0xc,%esp
f011b93e:	50                   	push   %eax
f011b93f:	e8 1b c6 fe ff       	call   f0107f5f <kmalloc>
f011b944:	83 c4 10             	add    $0x10,%esp
f011b947:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b94d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b953:	85 c0                	test   %eax,%eax
f011b955:	74 17                	je     f011b96e <test_kmalloc_bestfit2+0xe4>
f011b957:	83 ec 04             	sub    $0x4,%esp
f011b95a:	68 84 9e 13 f0       	push   $0xf0139e84
f011b95f:	68 3f 02 00 00       	push   $0x23f
f011b964:	68 d2 99 13 f0       	push   $0xf01399d2
f011b969:	e8 42 48 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b96e:	e8 53 10 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b973:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b976:	e8 09 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b97b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b97e:	83 ec 0c             	sub    $0xc,%esp
f011b981:	68 00 fc 1f 00       	push   $0x1ffc00
f011b986:	e8 d4 c5 fe ff       	call   f0107f5f <kmalloc>
f011b98b:	83 c4 10             	add    $0x10,%esp
f011b98e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b994:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b99a:	89 c1                	mov    %eax,%ecx
f011b99c:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b9a3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b9a8:	0f b6 d0             	movzbl %al,%edx
f011b9ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b9ae:	01 d0                	add    %edx,%eax
f011b9b0:	48                   	dec    %eax
f011b9b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b9b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b9b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9bc:	f7 75 dc             	divl   -0x24(%ebp)
f011b9bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b9c2:	29 d0                	sub    %edx,%eax
f011b9c4:	89 c3                	mov    %eax,%ebx
f011b9c6:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b9cd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b9d2:	0f b6 c0             	movzbl %al,%eax
f011b9d5:	c1 e0 04             	shl    $0x4,%eax
f011b9d8:	89 c2                	mov    %eax,%edx
f011b9da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b9dd:	01 d0                	add    %edx,%eax
f011b9df:	48                   	dec    %eax
f011b9e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b9e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b9e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9eb:	f7 75 d4             	divl   -0x2c(%ebp)
f011b9ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b9f1:	29 d0                	sub    %edx,%eax
f011b9f3:	01 d8                	add    %ebx,%eax
f011b9f5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b9fa:	39 c1                	cmp    %eax,%ecx
f011b9fc:	74 17                	je     f011ba15 <test_kmalloc_bestfit2+0x18b>
f011b9fe:	83 ec 04             	sub    $0x4,%esp
f011ba01:	68 ec 9d 13 f0       	push   $0xf0139dec
f011ba06:	68 49 02 00 00       	push   $0x249
f011ba0b:	68 d2 99 13 f0       	push   $0xf01399d2
f011ba10:	e8 9b 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba15:	e8 6a 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba1a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ba1d:	74 17                	je     f011ba36 <test_kmalloc_bestfit2+0x1ac>
f011ba1f:	83 ec 04             	sub    $0x4,%esp
f011ba22:	68 ec 99 13 f0       	push   $0xf01399ec
f011ba27:	68 4a 02 00 00       	push   $0x24a
f011ba2c:	68 d2 99 13 f0       	push   $0xf01399d2
f011ba31:	e8 7a 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011ba36:	e8 8b 0f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ba3b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ba3e:	29 c2                	sub    %eax,%edx
f011ba40:	89 d0                	mov    %edx,%eax
f011ba42:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba47:	74 17                	je     f011ba60 <test_kmalloc_bestfit2+0x1d6>
f011ba49:	83 ec 04             	sub    $0x4,%esp
f011ba4c:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011ba51:	68 4b 02 00 00       	push   $0x24b
f011ba56:	68 d2 99 13 f0       	push   $0xf01399d2
f011ba5b:	e8 50 47 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba60:	e8 61 0f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ba65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba68:	e8 17 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ba70:	83 ec 0c             	sub    $0xc,%esp
f011ba73:	68 00 fc 1f 00       	push   $0x1ffc00
f011ba78:	e8 e2 c4 fe ff       	call   f0107f5f <kmalloc>
f011ba7d:	83 c4 10             	add    $0x10,%esp
f011ba80:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011ba86:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ba8c:	89 c1                	mov    %eax,%ecx
f011ba8e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ba95:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ba9a:	0f b6 d0             	movzbl %al,%edx
f011ba9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011baa0:	01 d0                	add    %edx,%eax
f011baa2:	48                   	dec    %eax
f011baa3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011baa6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011baa9:	ba 00 00 00 00       	mov    $0x0,%edx
f011baae:	f7 75 cc             	divl   -0x34(%ebp)
f011bab1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bab4:	29 d0                	sub    %edx,%eax
f011bab6:	89 c3                	mov    %eax,%ebx
f011bab8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011babf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bac4:	0f b6 c0             	movzbl %al,%eax
f011bac7:	c1 e0 04             	shl    $0x4,%eax
f011baca:	89 c2                	mov    %eax,%edx
f011bacc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bacf:	01 d0                	add    %edx,%eax
f011bad1:	48                   	dec    %eax
f011bad2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bad5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bad8:	ba 00 00 00 00       	mov    $0x0,%edx
f011badd:	f7 75 c4             	divl   -0x3c(%ebp)
f011bae0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bae3:	29 d0                	sub    %edx,%eax
f011bae5:	01 d8                	add    %ebx,%eax
f011bae7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011baec:	39 c1                	cmp    %eax,%ecx
f011baee:	74 17                	je     f011bb07 <test_kmalloc_bestfit2+0x27d>
f011baf0:	83 ec 04             	sub    $0x4,%esp
f011baf3:	68 ec 9d 13 f0       	push   $0xf0139dec
f011baf8:	68 51 02 00 00       	push   $0x251
f011bafd:	68 d2 99 13 f0       	push   $0xf01399d2
f011bb02:	e8 a9 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb07:	e8 78 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb0c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb0f:	74 17                	je     f011bb28 <test_kmalloc_bestfit2+0x29e>
f011bb11:	83 ec 04             	sub    $0x4,%esp
f011bb14:	68 ec 99 13 f0       	push   $0xf01399ec
f011bb19:	68 52 02 00 00       	push   $0x252
f011bb1e:	68 d2 99 13 f0       	push   $0xf01399d2
f011bb23:	e8 88 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bb28:	e8 99 0e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bb2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bb30:	29 c2                	sub    %eax,%edx
f011bb32:	89 d0                	mov    %edx,%eax
f011bb34:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bb39:	74 17                	je     f011bb52 <test_kmalloc_bestfit2+0x2c8>
f011bb3b:	83 ec 04             	sub    $0x4,%esp
f011bb3e:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011bb43:	68 53 02 00 00       	push   $0x253
f011bb48:	68 d2 99 13 f0       	push   $0xf01399d2
f011bb4d:	e8 5e 46 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bb52:	e8 6f 0e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bb57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb5a:	e8 25 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb5f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bb62:	83 ec 0c             	sub    $0xc,%esp
f011bb65:	68 00 08 00 00       	push   $0x800
f011bb6a:	e8 f0 c3 fe ff       	call   f0107f5f <kmalloc>
f011bb6f:	83 c4 10             	add    $0x10,%esp
f011bb72:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bb78:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bb7e:	89 c1                	mov    %eax,%ecx
f011bb80:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bb87:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bb8c:	0f b6 d0             	movzbl %al,%edx
f011bb8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bb92:	01 d0                	add    %edx,%eax
f011bb94:	48                   	dec    %eax
f011bb95:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bb98:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bb9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bba0:	f7 75 bc             	divl   -0x44(%ebp)
f011bba3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bba6:	29 d0                	sub    %edx,%eax
f011bba8:	89 c3                	mov    %eax,%ebx
f011bbaa:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bbb1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bbb6:	0f b6 c0             	movzbl %al,%eax
f011bbb9:	c1 e0 04             	shl    $0x4,%eax
f011bbbc:	89 c2                	mov    %eax,%edx
f011bbbe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bbc1:	01 d0                	add    %edx,%eax
f011bbc3:	48                   	dec    %eax
f011bbc4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bbc7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bbca:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbcf:	f7 75 b4             	divl   -0x4c(%ebp)
f011bbd2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bbd5:	29 d0                	sub    %edx,%eax
f011bbd7:	01 d8                	add    %ebx,%eax
f011bbd9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bbde:	39 c1                	cmp    %eax,%ecx
f011bbe0:	74 17                	je     f011bbf9 <test_kmalloc_bestfit2+0x36f>
f011bbe2:	83 ec 04             	sub    $0x4,%esp
f011bbe5:	68 ec 9d 13 f0       	push   $0xf0139dec
f011bbea:	68 59 02 00 00       	push   $0x259
f011bbef:	68 d2 99 13 f0       	push   $0xf01399d2
f011bbf4:	e8 b7 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbf9:	e8 86 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bbfe:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc01:	74 17                	je     f011bc1a <test_kmalloc_bestfit2+0x390>
f011bc03:	83 ec 04             	sub    $0x4,%esp
f011bc06:	68 ec 99 13 f0       	push   $0xf01399ec
f011bc0b:	68 5a 02 00 00       	push   $0x25a
f011bc10:	68 d2 99 13 f0       	push   $0xf01399d2
f011bc15:	e8 96 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bc1a:	e8 a7 0d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bc1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bc22:	29 c2                	sub    %eax,%edx
f011bc24:	89 d0                	mov    %edx,%eax
f011bc26:	83 f8 01             	cmp    $0x1,%eax
f011bc29:	74 17                	je     f011bc42 <test_kmalloc_bestfit2+0x3b8>
f011bc2b:	83 ec 04             	sub    $0x4,%esp
f011bc2e:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011bc33:	68 5b 02 00 00       	push   $0x25b
f011bc38:	68 d2 99 13 f0       	push   $0xf01399d2
f011bc3d:	e8 6e 45 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bc42:	e8 7f 0d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bc47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc4a:	e8 35 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bc4f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bc52:	83 ec 0c             	sub    $0xc,%esp
f011bc55:	68 00 08 00 00       	push   $0x800
f011bc5a:	e8 00 c3 fe ff       	call   f0107f5f <kmalloc>
f011bc5f:	83 c4 10             	add    $0x10,%esp
f011bc62:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bc68:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bc6e:	89 c1                	mov    %eax,%ecx
f011bc70:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bc77:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bc7c:	0f b6 d0             	movzbl %al,%edx
f011bc7f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bc82:	01 d0                	add    %edx,%eax
f011bc84:	48                   	dec    %eax
f011bc85:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bc88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bc8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc90:	f7 75 ac             	divl   -0x54(%ebp)
f011bc93:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bc96:	29 d0                	sub    %edx,%eax
f011bc98:	89 c3                	mov    %eax,%ebx
f011bc9a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bca1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bca6:	0f b6 c0             	movzbl %al,%eax
f011bca9:	c1 e0 04             	shl    $0x4,%eax
f011bcac:	89 c2                	mov    %eax,%edx
f011bcae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bcb1:	01 d0                	add    %edx,%eax
f011bcb3:	48                   	dec    %eax
f011bcb4:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bcb7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bcba:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcbf:	f7 75 a4             	divl   -0x5c(%ebp)
f011bcc2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bcc5:	29 d0                	sub    %edx,%eax
f011bcc7:	01 d8                	add    %ebx,%eax
f011bcc9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bcce:	39 c1                	cmp    %eax,%ecx
f011bcd0:	74 17                	je     f011bce9 <test_kmalloc_bestfit2+0x45f>
f011bcd2:	83 ec 04             	sub    $0x4,%esp
f011bcd5:	68 ec 9d 13 f0       	push   $0xf0139dec
f011bcda:	68 61 02 00 00       	push   $0x261
f011bcdf:	68 d2 99 13 f0       	push   $0xf01399d2
f011bce4:	e8 c7 44 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bce9:	e8 96 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bcee:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bcf1:	74 17                	je     f011bd0a <test_kmalloc_bestfit2+0x480>
f011bcf3:	83 ec 04             	sub    $0x4,%esp
f011bcf6:	68 ec 99 13 f0       	push   $0xf01399ec
f011bcfb:	68 62 02 00 00       	push   $0x262
f011bd00:	68 d2 99 13 f0       	push   $0xf01399d2
f011bd05:	e8 a6 44 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bd0a:	e8 b7 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bd0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bd12:	29 c2                	sub    %eax,%edx
f011bd14:	89 d0                	mov    %edx,%eax
f011bd16:	83 f8 01             	cmp    $0x1,%eax
f011bd19:	74 17                	je     f011bd32 <test_kmalloc_bestfit2+0x4a8>
f011bd1b:	83 ec 04             	sub    $0x4,%esp
f011bd1e:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011bd23:	68 63 02 00 00       	push   $0x263
f011bd28:	68 d2 99 13 f0       	push   $0xf01399d2
f011bd2d:	e8 7e 44 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bd32:	e8 8f 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bd37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd3a:	e8 45 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bd3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011bd42:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bd48:	83 ec 0c             	sub    $0xc,%esp
f011bd4b:	50                   	push   %eax
f011bd4c:	e8 28 c2 fe ff       	call   f0107f79 <kfree>
f011bd51:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd54:	e8 2b 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bd59:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bd5c:	74 17                	je     f011bd75 <test_kmalloc_bestfit2+0x4eb>
f011bd5e:	83 ec 04             	sub    $0x4,%esp
f011bd61:	68 ec 99 13 f0       	push   $0xf01399ec
f011bd66:	68 69 02 00 00       	push   $0x269
f011bd6b:	68 d2 99 13 f0       	push   $0xf01399d2
f011bd70:	e8 3b 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bd75:	e8 4c 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bd7a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bd7d:	83 f8 01             	cmp    $0x1,%eax
f011bd80:	74 17                	je     f011bd99 <test_kmalloc_bestfit2+0x50f>
f011bd82:	83 ec 04             	sub    $0x4,%esp
f011bd85:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011bd8a:	68 6a 02 00 00       	push   $0x26a
f011bd8f:	68 d2 99 13 f0       	push   $0xf01399d2
f011bd94:	e8 17 44 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bd99:	e8 28 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bd9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bda1:	e8 de 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bda6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bda9:	83 ec 0c             	sub    $0xc,%esp
f011bdac:	68 00 1c 00 00       	push   $0x1c00
f011bdb1:	e8 a9 c1 fe ff       	call   f0107f5f <kmalloc>
f011bdb6:	83 c4 10             	add    $0x10,%esp
f011bdb9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bdbf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bdc5:	89 c1                	mov    %eax,%ecx
f011bdc7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bdce:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bdd3:	0f b6 d0             	movzbl %al,%edx
f011bdd6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bdd9:	01 d0                	add    %edx,%eax
f011bddb:	48                   	dec    %eax
f011bddc:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bddf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bde2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde7:	f7 75 9c             	divl   -0x64(%ebp)
f011bdea:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bded:	29 d0                	sub    %edx,%eax
f011bdef:	89 c3                	mov    %eax,%ebx
f011bdf1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bdf8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bdfd:	0f b6 c0             	movzbl %al,%eax
f011be00:	c1 e0 04             	shl    $0x4,%eax
f011be03:	89 c2                	mov    %eax,%edx
f011be05:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011be08:	01 d0                	add    %edx,%eax
f011be0a:	48                   	dec    %eax
f011be0b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011be0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be11:	ba 00 00 00 00       	mov    $0x0,%edx
f011be16:	f7 75 94             	divl   -0x6c(%ebp)
f011be19:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be1c:	29 d0                	sub    %edx,%eax
f011be1e:	01 d8                	add    %ebx,%eax
f011be20:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011be25:	39 c1                	cmp    %eax,%ecx
f011be27:	74 17                	je     f011be40 <test_kmalloc_bestfit2+0x5b6>
f011be29:	83 ec 04             	sub    $0x4,%esp
f011be2c:	68 ec 9d 13 f0       	push   $0xf0139dec
f011be31:	68 70 02 00 00       	push   $0x270
f011be36:	68 d2 99 13 f0       	push   $0xf01399d2
f011be3b:	e8 70 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be40:	e8 3f 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011be45:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011be48:	74 17                	je     f011be61 <test_kmalloc_bestfit2+0x5d7>
f011be4a:	83 ec 04             	sub    $0x4,%esp
f011be4d:	68 ec 99 13 f0       	push   $0xf01399ec
f011be52:	68 71 02 00 00       	push   $0x271
f011be57:	68 d2 99 13 f0       	push   $0xf01399d2
f011be5c:	e8 4f 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011be61:	e8 60 0b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011be66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011be69:	29 c2                	sub    %eax,%edx
f011be6b:	89 d0                	mov    %edx,%eax
f011be6d:	83 f8 02             	cmp    $0x2,%eax
f011be70:	74 17                	je     f011be89 <test_kmalloc_bestfit2+0x5ff>
f011be72:	83 ec 04             	sub    $0x4,%esp
f011be75:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011be7a:	68 72 02 00 00       	push   $0x272
f011be7f:	68 d2 99 13 f0       	push   $0xf01399d2
f011be84:	e8 27 43 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011be89:	e8 38 0b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011be8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be91:	e8 ee 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011be96:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011be99:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011be9f:	83 ec 0c             	sub    $0xc,%esp
f011bea2:	50                   	push   %eax
f011bea3:	e8 d1 c0 fe ff       	call   f0107f79 <kfree>
f011bea8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011beab:	e8 d4 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011beb0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011beb3:	74 17                	je     f011becc <test_kmalloc_bestfit2+0x642>
f011beb5:	83 ec 04             	sub    $0x4,%esp
f011beb8:	68 ec 99 13 f0       	push   $0xf01399ec
f011bebd:	68 78 02 00 00       	push   $0x278
f011bec2:	68 d2 99 13 f0       	push   $0xf01399d2
f011bec7:	e8 e4 42 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011becc:	e8 f5 0a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bed1:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bed4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bed9:	74 17                	je     f011bef2 <test_kmalloc_bestfit2+0x668>
f011bedb:	83 ec 04             	sub    $0x4,%esp
f011bede:	68 a0 9c 13 f0       	push   $0xf0139ca0
f011bee3:	68 79 02 00 00       	push   $0x279
f011bee8:	68 d2 99 13 f0       	push   $0xf01399d2
f011beed:	e8 be 42 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bef2:	e8 cf 0a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bef7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011befa:	e8 85 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011beff:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bf02:	83 ec 0c             	sub    $0xc,%esp
f011bf05:	68 00 fc 2f 00       	push   $0x2ffc00
f011bf0a:	e8 50 c0 fe ff       	call   f0107f5f <kmalloc>
f011bf0f:	83 c4 10             	add    $0x10,%esp
f011bf12:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bf18:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bf1e:	89 c1                	mov    %eax,%ecx
f011bf20:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bf27:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bf2c:	0f b6 d0             	movzbl %al,%edx
f011bf2f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bf32:	01 d0                	add    %edx,%eax
f011bf34:	48                   	dec    %eax
f011bf35:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bf38:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf40:	f7 75 8c             	divl   -0x74(%ebp)
f011bf43:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf46:	29 d0                	sub    %edx,%eax
f011bf48:	89 c3                	mov    %eax,%ebx
f011bf4a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bf51:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bf56:	0f b6 c0             	movzbl %al,%eax
f011bf59:	c1 e0 04             	shl    $0x4,%eax
f011bf5c:	89 c2                	mov    %eax,%edx
f011bf5e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bf61:	01 d0                	add    %edx,%eax
f011bf63:	48                   	dec    %eax
f011bf64:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bf67:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf6f:	f7 75 84             	divl   -0x7c(%ebp)
f011bf72:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf75:	29 d0                	sub    %edx,%eax
f011bf77:	01 d8                	add    %ebx,%eax
f011bf79:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bf7e:	39 c1                	cmp    %eax,%ecx
f011bf80:	74 17                	je     f011bf99 <test_kmalloc_bestfit2+0x70f>
f011bf82:	83 ec 04             	sub    $0x4,%esp
f011bf85:	68 ec 9d 13 f0       	push   $0xf0139dec
f011bf8a:	68 7f 02 00 00       	push   $0x27f
f011bf8f:	68 d2 99 13 f0       	push   $0xf01399d2
f011bf94:	e8 17 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf99:	e8 e6 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf9e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bfa1:	74 17                	je     f011bfba <test_kmalloc_bestfit2+0x730>
f011bfa3:	83 ec 04             	sub    $0x4,%esp
f011bfa6:	68 ec 99 13 f0       	push   $0xf01399ec
f011bfab:	68 80 02 00 00       	push   $0x280
f011bfb0:	68 d2 99 13 f0       	push   $0xf01399d2
f011bfb5:	e8 f6 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bfba:	e8 07 0a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bfbf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bfc2:	29 c2                	sub    %eax,%edx
f011bfc4:	89 d0                	mov    %edx,%eax
f011bfc6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bfcb:	74 17                	je     f011bfe4 <test_kmalloc_bestfit2+0x75a>
f011bfcd:	83 ec 04             	sub    $0x4,%esp
f011bfd0:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011bfd5:	68 81 02 00 00       	push   $0x281
f011bfda:	68 d2 99 13 f0       	push   $0xf01399d2
f011bfdf:	e8 cc 41 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bfe4:	e8 dd 09 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bfe9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bfec:	e8 93 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bff1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bff4:	83 ec 0c             	sub    $0xc,%esp
f011bff7:	68 00 18 20 00       	push   $0x201800
f011bffc:	e8 5e bf fe ff       	call   f0107f5f <kmalloc>
f011c001:	83 c4 10             	add    $0x10,%esp
f011c004:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c00a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c010:	89 c1                	mov    %eax,%ecx
f011c012:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c019:	10 00 00 
f011c01c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c021:	0f b6 d0             	movzbl %al,%edx
f011c024:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c02a:	01 d0                	add    %edx,%eax
f011c02c:	48                   	dec    %eax
f011c02d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c033:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c039:	ba 00 00 00 00       	mov    $0x0,%edx
f011c03e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c044:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c04a:	29 d0                	sub    %edx,%eax
f011c04c:	89 c3                	mov    %eax,%ebx
f011c04e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c055:	10 00 00 
f011c058:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c05d:	0f b6 c0             	movzbl %al,%eax
f011c060:	c1 e0 04             	shl    $0x4,%eax
f011c063:	89 c2                	mov    %eax,%edx
f011c065:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c06b:	01 d0                	add    %edx,%eax
f011c06d:	48                   	dec    %eax
f011c06e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c074:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c07a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c07f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c085:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c08b:	29 d0                	sub    %edx,%eax
f011c08d:	01 d8                	add    %ebx,%eax
f011c08f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c094:	39 c1                	cmp    %eax,%ecx
f011c096:	74 17                	je     f011c0af <test_kmalloc_bestfit2+0x825>
f011c098:	83 ec 04             	sub    $0x4,%esp
f011c09b:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c0a0:	68 87 02 00 00       	push   $0x287
f011c0a5:	68 d2 99 13 f0       	push   $0xf01399d2
f011c0aa:	e8 01 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0af:	e8 d0 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c0b4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c0b7:	74 17                	je     f011c0d0 <test_kmalloc_bestfit2+0x846>
f011c0b9:	83 ec 04             	sub    $0x4,%esp
f011c0bc:	68 ec 99 13 f0       	push   $0xf01399ec
f011c0c1:	68 88 02 00 00       	push   $0x288
f011c0c6:	68 d2 99 13 f0       	push   $0xf01399d2
f011c0cb:	e8 e0 40 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c0d0:	e8 f1 08 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c0d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c0d8:	29 c2                	sub    %eax,%edx
f011c0da:	89 d0                	mov    %edx,%eax
f011c0dc:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c0e1:	74 17                	je     f011c0fa <test_kmalloc_bestfit2+0x870>
f011c0e3:	83 ec 04             	sub    $0x4,%esp
f011c0e6:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011c0eb:	68 89 02 00 00       	push   $0x289
f011c0f0:	68 d2 99 13 f0       	push   $0xf01399d2
f011c0f5:	e8 b6 40 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0fa:	e8 c7 08 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c0ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c102:	e8 7d 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c107:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c10a:	83 ec 0c             	sub    $0xc,%esp
f011c10d:	68 00 fc 4f 00       	push   $0x4ffc00
f011c112:	e8 48 be fe ff       	call   f0107f5f <kmalloc>
f011c117:	83 c4 10             	add    $0x10,%esp
f011c11a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c120:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c126:	89 c1                	mov    %eax,%ecx
f011c128:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c12f:	10 00 00 
f011c132:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c137:	0f b6 d0             	movzbl %al,%edx
f011c13a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c140:	01 d0                	add    %edx,%eax
f011c142:	48                   	dec    %eax
f011c143:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c149:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c14f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c154:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c15a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c160:	29 d0                	sub    %edx,%eax
f011c162:	89 c3                	mov    %eax,%ebx
f011c164:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c16b:	10 00 00 
f011c16e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c173:	0f b6 c0             	movzbl %al,%eax
f011c176:	c1 e0 04             	shl    $0x4,%eax
f011c179:	89 c2                	mov    %eax,%edx
f011c17b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c181:	01 d0                	add    %edx,%eax
f011c183:	48                   	dec    %eax
f011c184:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c18a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c190:	ba 00 00 00 00       	mov    $0x0,%edx
f011c195:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c19b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c1a1:	29 d0                	sub    %edx,%eax
f011c1a3:	01 d8                	add    %ebx,%eax
f011c1a5:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c1aa:	39 c1                	cmp    %eax,%ecx
f011c1ac:	74 17                	je     f011c1c5 <test_kmalloc_bestfit2+0x93b>
f011c1ae:	83 ec 04             	sub    $0x4,%esp
f011c1b1:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c1b6:	68 8f 02 00 00       	push   $0x28f
f011c1bb:	68 d2 99 13 f0       	push   $0xf01399d2
f011c1c0:	e8 eb 3f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1c5:	e8 ba 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c1ca:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1cd:	74 17                	je     f011c1e6 <test_kmalloc_bestfit2+0x95c>
f011c1cf:	83 ec 04             	sub    $0x4,%esp
f011c1d2:	68 ec 99 13 f0       	push   $0xf01399ec
f011c1d7:	68 90 02 00 00       	push   $0x290
f011c1dc:	68 d2 99 13 f0       	push   $0xf01399d2
f011c1e1:	e8 ca 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c1e6:	e8 db 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c1eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c1ee:	29 c2                	sub    %eax,%edx
f011c1f0:	89 d0                	mov    %edx,%eax
f011c1f2:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c1f7:	74 17                	je     f011c210 <test_kmalloc_bestfit2+0x986>
f011c1f9:	83 ec 04             	sub    $0x4,%esp
f011c1fc:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011c201:	68 91 02 00 00       	push   $0x291
f011c206:	68 d2 99 13 f0       	push   $0xf01399d2
f011c20b:	e8 a0 3f fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c210:	e8 b1 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c215:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c218:	e8 67 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c21d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011c220:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c226:	83 ec 0c             	sub    $0xc,%esp
f011c229:	50                   	push   %eax
f011c22a:	e8 4a bd fe ff       	call   f0107f79 <kfree>
f011c22f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c232:	e8 4d 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c237:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c23a:	74 17                	je     f011c253 <test_kmalloc_bestfit2+0x9c9>
f011c23c:	83 ec 04             	sub    $0x4,%esp
f011c23f:	68 ec 99 13 f0       	push   $0xf01399ec
f011c244:	68 97 02 00 00       	push   $0x297
f011c249:	68 d2 99 13 f0       	push   $0xf01399d2
f011c24e:	e8 5d 3f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c253:	e8 6e 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c258:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c25b:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c260:	74 17                	je     f011c279 <test_kmalloc_bestfit2+0x9ef>
f011c262:	83 ec 04             	sub    $0x4,%esp
f011c265:	68 a0 9c 13 f0       	push   $0xf0139ca0
f011c26a:	68 98 02 00 00       	push   $0x298
f011c26f:	68 d2 99 13 f0       	push   $0xf01399d2
f011c274:	e8 37 3f fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c279:	e8 48 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c27e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c281:	e8 fe 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c286:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c289:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c28f:	83 ec 0c             	sub    $0xc,%esp
f011c292:	50                   	push   %eax
f011c293:	e8 e1 bc fe ff       	call   f0107f79 <kfree>
f011c298:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c29b:	e8 e4 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c2a0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c2a3:	74 17                	je     f011c2bc <test_kmalloc_bestfit2+0xa32>
f011c2a5:	83 ec 04             	sub    $0x4,%esp
f011c2a8:	68 ec 99 13 f0       	push   $0xf01399ec
f011c2ad:	68 9e 02 00 00       	push   $0x29e
f011c2b2:	68 d2 99 13 f0       	push   $0xf01399d2
f011c2b7:	e8 f4 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c2bc:	e8 05 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c2c1:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c2c4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c2c9:	74 17                	je     f011c2e2 <test_kmalloc_bestfit2+0xa58>
f011c2cb:	83 ec 04             	sub    $0x4,%esp
f011c2ce:	68 cc 9e 13 f0       	push   $0xf0139ecc
f011c2d3:	68 9f 02 00 00       	push   $0x29f
f011c2d8:	68 d2 99 13 f0       	push   $0xf01399d2
f011c2dd:	e8 ce 3e fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c2e2:	e8 df 06 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c2e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c2ea:	e8 95 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c2ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c2f2:	83 ec 0c             	sub    $0xc,%esp
f011c2f5:	68 00 fc 1f 00       	push   $0x1ffc00
f011c2fa:	e8 60 bc fe ff       	call   f0107f5f <kmalloc>
f011c2ff:	83 c4 10             	add    $0x10,%esp
f011c302:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c308:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c30e:	89 c1                	mov    %eax,%ecx
f011c310:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c317:	10 00 00 
f011c31a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c31f:	0f b6 d0             	movzbl %al,%edx
f011c322:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c328:	01 d0                	add    %edx,%eax
f011c32a:	48                   	dec    %eax
f011c32b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c331:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c337:	ba 00 00 00 00       	mov    $0x0,%edx
f011c33c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c342:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c348:	29 d0                	sub    %edx,%eax
f011c34a:	89 c3                	mov    %eax,%ebx
f011c34c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c353:	10 00 00 
f011c356:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c35b:	0f b6 c0             	movzbl %al,%eax
f011c35e:	c1 e0 04             	shl    $0x4,%eax
f011c361:	89 c2                	mov    %eax,%edx
f011c363:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c369:	01 d0                	add    %edx,%eax
f011c36b:	48                   	dec    %eax
f011c36c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c372:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c378:	ba 00 00 00 00       	mov    $0x0,%edx
f011c37d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c383:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c389:	29 d0                	sub    %edx,%eax
f011c38b:	01 d8                	add    %ebx,%eax
f011c38d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c392:	39 c1                	cmp    %eax,%ecx
f011c394:	74 17                	je     f011c3ad <test_kmalloc_bestfit2+0xb23>
f011c396:	83 ec 04             	sub    $0x4,%esp
f011c399:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c39e:	68 a5 02 00 00       	push   $0x2a5
f011c3a3:	68 d2 99 13 f0       	push   $0xf01399d2
f011c3a8:	e8 03 3e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3ad:	e8 d2 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c3b2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c3b5:	74 17                	je     f011c3ce <test_kmalloc_bestfit2+0xb44>
f011c3b7:	83 ec 04             	sub    $0x4,%esp
f011c3ba:	68 ec 99 13 f0       	push   $0xf01399ec
f011c3bf:	68 a6 02 00 00       	push   $0x2a6
f011c3c4:	68 d2 99 13 f0       	push   $0xf01399d2
f011c3c9:	e8 e2 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c3ce:	e8 f3 05 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c3d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c3d6:	29 c2                	sub    %eax,%edx
f011c3d8:	89 d0                	mov    %edx,%eax
f011c3da:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3df:	74 17                	je     f011c3f8 <test_kmalloc_bestfit2+0xb6e>
f011c3e1:	83 ec 04             	sub    $0x4,%esp
f011c3e4:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011c3e9:	68 a7 02 00 00       	push   $0x2a7
f011c3ee:	68 d2 99 13 f0       	push   $0xf01399d2
f011c3f3:	e8 b8 3d fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c3f8:	e8 c9 05 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c3fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c400:	e8 7f 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c405:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c408:	83 ec 0c             	sub    $0xc,%esp
f011c40b:	68 00 18 00 00       	push   $0x1800
f011c410:	e8 4a bb fe ff       	call   f0107f5f <kmalloc>
f011c415:	83 c4 10             	add    $0x10,%esp
f011c418:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c41e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c424:	89 c1                	mov    %eax,%ecx
f011c426:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c42d:	10 00 00 
f011c430:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c435:	0f b6 d0             	movzbl %al,%edx
f011c438:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c43e:	01 d0                	add    %edx,%eax
f011c440:	48                   	dec    %eax
f011c441:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c447:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c44d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c452:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c458:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c45e:	29 d0                	sub    %edx,%eax
f011c460:	89 c3                	mov    %eax,%ebx
f011c462:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c469:	10 00 00 
f011c46c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c471:	0f b6 c0             	movzbl %al,%eax
f011c474:	c1 e0 04             	shl    $0x4,%eax
f011c477:	89 c2                	mov    %eax,%edx
f011c479:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c47f:	01 d0                	add    %edx,%eax
f011c481:	48                   	dec    %eax
f011c482:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c488:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c48e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c493:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c499:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c49f:	29 d0                	sub    %edx,%eax
f011c4a1:	01 d8                	add    %ebx,%eax
f011c4a3:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c4a8:	39 c1                	cmp    %eax,%ecx
f011c4aa:	74 17                	je     f011c4c3 <test_kmalloc_bestfit2+0xc39>
f011c4ac:	83 ec 04             	sub    $0x4,%esp
f011c4af:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c4b4:	68 ad 02 00 00       	push   $0x2ad
f011c4b9:	68 d2 99 13 f0       	push   $0xf01399d2
f011c4be:	e8 ed 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4c3:	e8 bc 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c4c8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c4cb:	74 17                	je     f011c4e4 <test_kmalloc_bestfit2+0xc5a>
f011c4cd:	83 ec 04             	sub    $0x4,%esp
f011c4d0:	68 ec 99 13 f0       	push   $0xf01399ec
f011c4d5:	68 ae 02 00 00       	push   $0x2ae
f011c4da:	68 d2 99 13 f0       	push   $0xf01399d2
f011c4df:	e8 cc 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c4e4:	e8 dd 04 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c4e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c4ec:	29 c2                	sub    %eax,%edx
f011c4ee:	89 d0                	mov    %edx,%eax
f011c4f0:	83 f8 02             	cmp    $0x2,%eax
f011c4f3:	74 17                	je     f011c50c <test_kmalloc_bestfit2+0xc82>
f011c4f5:	83 ec 04             	sub    $0x4,%esp
f011c4f8:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011c4fd:	68 af 02 00 00       	push   $0x2af
f011c502:	68 d2 99 13 f0       	push   $0xf01399d2
f011c507:	e8 a4 3c fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c50c:	e8 b5 04 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c511:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c514:	e8 6b 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c519:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c51c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c522:	83 ec 0c             	sub    $0xc,%esp
f011c525:	50                   	push   %eax
f011c526:	e8 4e ba fe ff       	call   f0107f79 <kfree>
f011c52b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c52e:	e8 51 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c533:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c536:	74 17                	je     f011c54f <test_kmalloc_bestfit2+0xcc5>
f011c538:	83 ec 04             	sub    $0x4,%esp
f011c53b:	68 ec 99 13 f0       	push   $0xf01399ec
f011c540:	68 b5 02 00 00       	push   $0x2b5
f011c545:	68 d2 99 13 f0       	push   $0xf01399d2
f011c54a:	e8 61 3c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c54f:	e8 72 04 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c554:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c557:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c55c:	74 17                	je     f011c575 <test_kmalloc_bestfit2+0xceb>
f011c55e:	83 ec 04             	sub    $0x4,%esp
f011c561:	68 cc 9e 13 f0       	push   $0xf0139ecc
f011c566:	68 b6 02 00 00       	push   $0x2b6
f011c56b:	68 d2 99 13 f0       	push   $0xf01399d2
f011c570:	e8 3b 3c fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c575:	e8 4c 04 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c57a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c57d:	e8 02 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c582:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c585:	83 ec 0c             	sub    $0xc,%esp
f011c588:	68 00 fc 2f 00       	push   $0x2ffc00
f011c58d:	e8 cd b9 fe ff       	call   f0107f5f <kmalloc>
f011c592:	83 c4 10             	add    $0x10,%esp
f011c595:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c59b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c5a1:	89 c1                	mov    %eax,%ecx
f011c5a3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c5aa:	10 00 00 
f011c5ad:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c5b2:	0f b6 d0             	movzbl %al,%edx
f011c5b5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c5bb:	01 d0                	add    %edx,%eax
f011c5bd:	48                   	dec    %eax
f011c5be:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c5c4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c5ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5cf:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c5d5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c5db:	29 d0                	sub    %edx,%eax
f011c5dd:	89 c3                	mov    %eax,%ebx
f011c5df:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c5e6:	10 00 00 
f011c5e9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c5ee:	0f b6 c0             	movzbl %al,%eax
f011c5f1:	c1 e0 04             	shl    $0x4,%eax
f011c5f4:	89 c2                	mov    %eax,%edx
f011c5f6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c5fc:	01 d0                	add    %edx,%eax
f011c5fe:	48                   	dec    %eax
f011c5ff:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c605:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c60b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c610:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c616:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c61c:	29 d0                	sub    %edx,%eax
f011c61e:	01 d8                	add    %ebx,%eax
f011c620:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c625:	39 c1                	cmp    %eax,%ecx
f011c627:	74 17                	je     f011c640 <test_kmalloc_bestfit2+0xdb6>
f011c629:	83 ec 04             	sub    $0x4,%esp
f011c62c:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c631:	68 bc 02 00 00       	push   $0x2bc
f011c636:	68 d2 99 13 f0       	push   $0xf01399d2
f011c63b:	e8 70 3b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c640:	e8 3f 80 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c645:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c648:	74 17                	je     f011c661 <test_kmalloc_bestfit2+0xdd7>
f011c64a:	83 ec 04             	sub    $0x4,%esp
f011c64d:	68 ec 99 13 f0       	push   $0xf01399ec
f011c652:	68 bd 02 00 00       	push   $0x2bd
f011c657:	68 d2 99 13 f0       	push   $0xf01399d2
f011c65c:	e8 4f 3b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c661:	e8 60 03 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c666:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c669:	29 c2                	sub    %eax,%edx
f011c66b:	89 d0                	mov    %edx,%eax
f011c66d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c672:	74 17                	je     f011c68b <test_kmalloc_bestfit2+0xe01>
f011c674:	83 ec 04             	sub    $0x4,%esp
f011c677:	68 cc 9e 13 f0       	push   $0xf0139ecc
f011c67c:	68 be 02 00 00       	push   $0x2be
f011c681:	68 d2 99 13 f0       	push   $0xf01399d2
f011c686:	e8 25 3b fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c68b:	e8 36 03 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c690:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c693:	e8 ec 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c698:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c69b:	83 ec 0c             	sub    $0xc,%esp
f011c69e:	68 00 fc 3f 00       	push   $0x3ffc00
f011c6a3:	e8 b7 b8 fe ff       	call   f0107f5f <kmalloc>
f011c6a8:	83 c4 10             	add    $0x10,%esp
f011c6ab:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c6b1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c6b7:	89 c1                	mov    %eax,%ecx
f011c6b9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c6c0:	10 00 00 
f011c6c3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c6c8:	0f b6 d0             	movzbl %al,%edx
f011c6cb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c6d1:	01 d0                	add    %edx,%eax
f011c6d3:	48                   	dec    %eax
f011c6d4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c6da:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c6e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6e5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c6eb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c6f1:	29 d0                	sub    %edx,%eax
f011c6f3:	89 c3                	mov    %eax,%ebx
f011c6f5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c6fc:	10 00 00 
f011c6ff:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c704:	0f b6 c0             	movzbl %al,%eax
f011c707:	c1 e0 04             	shl    $0x4,%eax
f011c70a:	89 c2                	mov    %eax,%edx
f011c70c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c712:	01 d0                	add    %edx,%eax
f011c714:	48                   	dec    %eax
f011c715:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c71b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c721:	ba 00 00 00 00       	mov    $0x0,%edx
f011c726:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c72c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c732:	29 d0                	sub    %edx,%eax
f011c734:	01 d8                	add    %ebx,%eax
f011c736:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c73b:	39 c1                	cmp    %eax,%ecx
f011c73d:	74 17                	je     f011c756 <test_kmalloc_bestfit2+0xecc>
f011c73f:	83 ec 04             	sub    $0x4,%esp
f011c742:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c747:	68 c4 02 00 00       	push   $0x2c4
f011c74c:	68 d2 99 13 f0       	push   $0xf01399d2
f011c751:	e8 5a 3a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c756:	e8 29 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c75b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c75e:	74 17                	je     f011c777 <test_kmalloc_bestfit2+0xeed>
f011c760:	83 ec 04             	sub    $0x4,%esp
f011c763:	68 ec 99 13 f0       	push   $0xf01399ec
f011c768:	68 c5 02 00 00       	push   $0x2c5
f011c76d:	68 d2 99 13 f0       	push   $0xf01399d2
f011c772:	e8 39 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c777:	e8 4a 02 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c77c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c77f:	29 c2                	sub    %eax,%edx
f011c781:	89 d0                	mov    %edx,%eax
f011c783:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c788:	74 17                	je     f011c7a1 <test_kmalloc_bestfit2+0xf17>
f011c78a:	83 ec 04             	sub    $0x4,%esp
f011c78d:	68 cc 9e 13 f0       	push   $0xf0139ecc
f011c792:	68 c6 02 00 00       	push   $0x2c6
f011c797:	68 d2 99 13 f0       	push   $0xf01399d2
f011c79c:	e8 0f 3a fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c7a1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c7a8:	10 00 00 
f011c7ab:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c7b0:	0f b6 d0             	movzbl %al,%edx
f011c7b3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c7b9:	01 d0                	add    %edx,%eax
f011c7bb:	48                   	dec    %eax
f011c7bc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c7c2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c7c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7cd:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c7d3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c7d9:	29 d0                	sub    %edx,%eax
f011c7db:	89 c1                	mov    %eax,%ecx
f011c7dd:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c7e4:	10 00 00 
f011c7e7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c7ec:	0f b6 c0             	movzbl %al,%eax
f011c7ef:	c1 e0 04             	shl    $0x4,%eax
f011c7f2:	89 c2                	mov    %eax,%edx
f011c7f4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c7fa:	01 d0                	add    %edx,%eax
f011c7fc:	48                   	dec    %eax
f011c7fd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c803:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c809:	ba 00 00 00 00       	mov    $0x0,%edx
f011c80e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c814:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c81a:	29 d0                	sub    %edx,%eax
f011c81c:	01 c8                	add    %ecx,%eax
f011c81e:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c823:	29 c2                	sub    %eax,%edx
f011c825:	89 d0                	mov    %edx,%eax
f011c827:	83 ec 0c             	sub    $0xc,%esp
f011c82a:	50                   	push   %eax
f011c82b:	e8 2f b7 fe ff       	call   f0107f5f <kmalloc>
f011c830:	83 c4 10             	add    $0x10,%esp
f011c833:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c839:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c83f:	85 c0                	test   %eax,%eax
f011c841:	74 17                	je     f011c85a <test_kmalloc_bestfit2+0xfd0>
f011c843:	83 ec 04             	sub    $0x4,%esp
f011c846:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011c84b:	68 ce 02 00 00       	push   $0x2ce
f011c850:	68 d2 99 13 f0       	push   $0xf01399d2
f011c855:	e8 56 39 fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c85a:	83 ec 0c             	sub    $0xc,%esp
f011c85d:	68 80 9f 13 f0       	push   $0xf0139f80
f011c862:	e8 ca 45 fe ff       	call   f0100e31 <cprintf>
f011c867:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c86a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c86f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c872:	5b                   	pop    %ebx
f011c873:	5f                   	pop    %edi
f011c874:	5d                   	pop    %ebp
f011c875:	c3                   	ret    

f011c876 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c876:	55                   	push   %ebp
f011c877:	89 e5                	mov    %esp,%ebp
f011c879:	57                   	push   %edi
f011c87a:	53                   	push   %ebx
f011c87b:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c881:	83 ec 0c             	sub    $0xc,%esp
f011c884:	68 14 99 13 f0       	push   $0xf0139914
f011c889:	e8 a3 45 fe ff       	call   f0100e31 <cprintf>
f011c88e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c891:	83 ec 0c             	sub    $0xc,%esp
f011c894:	68 44 99 13 f0       	push   $0xf0139944
f011c899:	e8 93 45 fe ff       	call   f0100e31 <cprintf>
f011c89e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c8a1:	83 ec 0c             	sub    $0xc,%esp
f011c8a4:	68 14 99 13 f0       	push   $0xf0139914
f011c8a9:	e8 83 45 fe ff       	call   f0100e31 <cprintf>
f011c8ae:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c8b1:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c8b7:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c8bc:	b8 00 00 00 00       	mov    $0x0,%eax
f011c8c1:	89 d7                	mov    %edx,%edi
f011c8c3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8c5:	e8 fc 00 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c8ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8cd:	e8 b2 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c8d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c8d5:	83 ec 0c             	sub    $0xc,%esp
f011c8d8:	68 00 fc 0f 00       	push   $0xffc00
f011c8dd:	e8 7d b6 fe ff       	call   f0107f5f <kmalloc>
f011c8e2:	83 c4 10             	add    $0x10,%esp
f011c8e5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c8eb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c8f1:	89 c1                	mov    %eax,%ecx
f011c8f3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c8fa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c8ff:	0f b6 d0             	movzbl %al,%edx
f011c902:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c905:	01 d0                	add    %edx,%eax
f011c907:	48                   	dec    %eax
f011c908:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c90b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c90e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c913:	f7 75 ec             	divl   -0x14(%ebp)
f011c916:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c919:	29 d0                	sub    %edx,%eax
f011c91b:	89 c3                	mov    %eax,%ebx
f011c91d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c924:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c929:	0f b6 c0             	movzbl %al,%eax
f011c92c:	c1 e0 04             	shl    $0x4,%eax
f011c92f:	89 c2                	mov    %eax,%edx
f011c931:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c934:	01 d0                	add    %edx,%eax
f011c936:	48                   	dec    %eax
f011c937:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c93a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c93d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c942:	f7 75 e4             	divl   -0x1c(%ebp)
f011c945:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c948:	29 d0                	sub    %edx,%eax
f011c94a:	01 d8                	add    %ebx,%eax
f011c94c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c951:	39 c1                	cmp    %eax,%ecx
f011c953:	74 17                	je     f011c96c <test_kmalloc_firstfit1+0xf6>
f011c955:	83 ec 04             	sub    $0x4,%esp
f011c958:	68 ec 9d 13 f0       	push   $0xf0139dec
f011c95d:	68 e6 02 00 00       	push   $0x2e6
f011c962:	68 d2 99 13 f0       	push   $0xf01399d2
f011c967:	e8 44 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c96c:	e8 13 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c971:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c974:	74 17                	je     f011c98d <test_kmalloc_firstfit1+0x117>
f011c976:	83 ec 04             	sub    $0x4,%esp
f011c979:	68 ec 99 13 f0       	push   $0xf01399ec
f011c97e:	68 e7 02 00 00       	push   $0x2e7
f011c983:	68 d2 99 13 f0       	push   $0xf01399d2
f011c988:	e8 23 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c98d:	e8 34 00 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c992:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c995:	29 c2                	sub    %eax,%edx
f011c997:	89 d0                	mov    %edx,%eax
f011c999:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c99e:	74 17                	je     f011c9b7 <test_kmalloc_firstfit1+0x141>
f011c9a0:	83 ec 04             	sub    $0x4,%esp
f011c9a3:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011c9a8:	68 e8 02 00 00       	push   $0x2e8
f011c9ad:	68 d2 99 13 f0       	push   $0xf01399d2
f011c9b2:	e8 f9 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9b7:	e8 0a 00 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c9bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9bf:	e8 c0 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c9c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c9c7:	83 ec 0c             	sub    $0xc,%esp
f011c9ca:	68 00 fc 0f 00       	push   $0xffc00
f011c9cf:	e8 8b b5 fe ff       	call   f0107f5f <kmalloc>
f011c9d4:	83 c4 10             	add    $0x10,%esp
f011c9d7:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c9dd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c9e3:	89 c1                	mov    %eax,%ecx
f011c9e5:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c9ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c9f1:	0f b6 d0             	movzbl %al,%edx
f011c9f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c9f7:	01 d0                	add    %edx,%eax
f011c9f9:	48                   	dec    %eax
f011c9fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c9fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca00:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca05:	f7 75 dc             	divl   -0x24(%ebp)
f011ca08:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca0b:	29 d0                	sub    %edx,%eax
f011ca0d:	89 c3                	mov    %eax,%ebx
f011ca0f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ca16:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ca1b:	0f b6 c0             	movzbl %al,%eax
f011ca1e:	c1 e0 04             	shl    $0x4,%eax
f011ca21:	89 c2                	mov    %eax,%edx
f011ca23:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ca26:	01 d0                	add    %edx,%eax
f011ca28:	48                   	dec    %eax
f011ca29:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ca2c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ca2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca34:	f7 75 d4             	divl   -0x2c(%ebp)
f011ca37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ca3a:	29 d0                	sub    %edx,%eax
f011ca3c:	01 d8                	add    %ebx,%eax
f011ca3e:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011ca43:	39 c1                	cmp    %eax,%ecx
f011ca45:	74 17                	je     f011ca5e <test_kmalloc_firstfit1+0x1e8>
f011ca47:	83 ec 04             	sub    $0x4,%esp
f011ca4a:	68 ec 9d 13 f0       	push   $0xf0139dec
f011ca4f:	68 ee 02 00 00       	push   $0x2ee
f011ca54:	68 d2 99 13 f0       	push   $0xf01399d2
f011ca59:	e8 52 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca5e:	e8 21 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ca63:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca66:	74 17                	je     f011ca7f <test_kmalloc_firstfit1+0x209>
f011ca68:	83 ec 04             	sub    $0x4,%esp
f011ca6b:	68 ec 99 13 f0       	push   $0xf01399ec
f011ca70:	68 ef 02 00 00       	push   $0x2ef
f011ca75:	68 d2 99 13 f0       	push   $0xf01399d2
f011ca7a:	e8 31 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca7f:	e8 42 ff fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ca84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca87:	29 c2                	sub    %eax,%edx
f011ca89:	89 d0                	mov    %edx,%eax
f011ca8b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca90:	74 17                	je     f011caa9 <test_kmalloc_firstfit1+0x233>
f011ca92:	83 ec 04             	sub    $0x4,%esp
f011ca95:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011ca9a:	68 f0 02 00 00       	push   $0x2f0
f011ca9f:	68 d2 99 13 f0       	push   $0xf01399d2
f011caa4:	e8 07 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011caa9:	e8 18 ff fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011caae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cab1:	e8 ce 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cab9:	83 ec 0c             	sub    $0xc,%esp
f011cabc:	68 00 fc 0f 00       	push   $0xffc00
f011cac1:	e8 99 b4 fe ff       	call   f0107f5f <kmalloc>
f011cac6:	83 c4 10             	add    $0x10,%esp
f011cac9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cacf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cad5:	89 c1                	mov    %eax,%ecx
f011cad7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cade:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cae3:	0f b6 d0             	movzbl %al,%edx
f011cae6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cae9:	01 d0                	add    %edx,%eax
f011caeb:	48                   	dec    %eax
f011caec:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011caef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011caf2:	ba 00 00 00 00       	mov    $0x0,%edx
f011caf7:	f7 75 cc             	divl   -0x34(%ebp)
f011cafa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cafd:	29 d0                	sub    %edx,%eax
f011caff:	89 c3                	mov    %eax,%ebx
f011cb01:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cb08:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cb0d:	0f b6 c0             	movzbl %al,%eax
f011cb10:	c1 e0 04             	shl    $0x4,%eax
f011cb13:	89 c2                	mov    %eax,%edx
f011cb15:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cb18:	01 d0                	add    %edx,%eax
f011cb1a:	48                   	dec    %eax
f011cb1b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cb1e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb21:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb26:	f7 75 c4             	divl   -0x3c(%ebp)
f011cb29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb2c:	29 d0                	sub    %edx,%eax
f011cb2e:	01 d8                	add    %ebx,%eax
f011cb30:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cb35:	39 c1                	cmp    %eax,%ecx
f011cb37:	74 17                	je     f011cb50 <test_kmalloc_firstfit1+0x2da>
f011cb39:	83 ec 04             	sub    $0x4,%esp
f011cb3c:	68 ec 9d 13 f0       	push   $0xf0139dec
f011cb41:	68 f6 02 00 00       	push   $0x2f6
f011cb46:	68 d2 99 13 f0       	push   $0xf01399d2
f011cb4b:	e8 60 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb50:	e8 2f 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cb55:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb58:	74 17                	je     f011cb71 <test_kmalloc_firstfit1+0x2fb>
f011cb5a:	83 ec 04             	sub    $0x4,%esp
f011cb5d:	68 ec 99 13 f0       	push   $0xf01399ec
f011cb62:	68 f7 02 00 00       	push   $0x2f7
f011cb67:	68 d2 99 13 f0       	push   $0xf01399d2
f011cb6c:	e8 3f 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb71:	e8 50 fe fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cb76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb79:	29 c2                	sub    %eax,%edx
f011cb7b:	89 d0                	mov    %edx,%eax
f011cb7d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb82:	74 17                	je     f011cb9b <test_kmalloc_firstfit1+0x325>
f011cb84:	83 ec 04             	sub    $0x4,%esp
f011cb87:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011cb8c:	68 f8 02 00 00       	push   $0x2f8
f011cb91:	68 d2 99 13 f0       	push   $0xf01399d2
f011cb96:	e8 15 36 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb9b:	e8 26 fe fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cba0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cba3:	e8 dc 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cba8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011cbab:	83 ec 0c             	sub    $0xc,%esp
f011cbae:	68 00 fc 0f 00       	push   $0xffc00
f011cbb3:	e8 a7 b3 fe ff       	call   f0107f5f <kmalloc>
f011cbb8:	83 c4 10             	add    $0x10,%esp
f011cbbb:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011cbc1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cbc7:	89 c1                	mov    %eax,%ecx
f011cbc9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cbd0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cbd5:	0f b6 d0             	movzbl %al,%edx
f011cbd8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cbdb:	01 d0                	add    %edx,%eax
f011cbdd:	48                   	dec    %eax
f011cbde:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cbe1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbe4:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbe9:	f7 75 bc             	divl   -0x44(%ebp)
f011cbec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbef:	29 d0                	sub    %edx,%eax
f011cbf1:	89 c3                	mov    %eax,%ebx
f011cbf3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cbfa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cbff:	0f b6 c0             	movzbl %al,%eax
f011cc02:	c1 e0 04             	shl    $0x4,%eax
f011cc05:	89 c2                	mov    %eax,%edx
f011cc07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cc0a:	01 d0                	add    %edx,%eax
f011cc0c:	48                   	dec    %eax
f011cc0d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cc10:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc13:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc18:	f7 75 b4             	divl   -0x4c(%ebp)
f011cc1b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc1e:	29 d0                	sub    %edx,%eax
f011cc20:	01 d8                	add    %ebx,%eax
f011cc22:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011cc27:	39 c1                	cmp    %eax,%ecx
f011cc29:	74 17                	je     f011cc42 <test_kmalloc_firstfit1+0x3cc>
f011cc2b:	83 ec 04             	sub    $0x4,%esp
f011cc2e:	68 ec 9d 13 f0       	push   $0xf0139dec
f011cc33:	68 fe 02 00 00       	push   $0x2fe
f011cc38:	68 d2 99 13 f0       	push   $0xf01399d2
f011cc3d:	e8 6e 35 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc42:	e8 3d 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cc47:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc4a:	74 17                	je     f011cc63 <test_kmalloc_firstfit1+0x3ed>
f011cc4c:	83 ec 04             	sub    $0x4,%esp
f011cc4f:	68 ec 99 13 f0       	push   $0xf01399ec
f011cc54:	68 ff 02 00 00       	push   $0x2ff
f011cc59:	68 d2 99 13 f0       	push   $0xf01399d2
f011cc5e:	e8 4d 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cc63:	e8 5e fd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cc68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc6b:	29 c2                	sub    %eax,%edx
f011cc6d:	89 d0                	mov    %edx,%eax
f011cc6f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc74:	74 17                	je     f011cc8d <test_kmalloc_firstfit1+0x417>
f011cc76:	83 ec 04             	sub    $0x4,%esp
f011cc79:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011cc7e:	68 00 03 00 00       	push   $0x300
f011cc83:	68 d2 99 13 f0       	push   $0xf01399d2
f011cc88:	e8 23 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cc8d:	e8 34 fd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cc92:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc95:	e8 ea 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cc9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cc9d:	83 ec 0c             	sub    $0xc,%esp
f011cca0:	68 00 fc 1f 00       	push   $0x1ffc00
f011cca5:	e8 b5 b2 fe ff       	call   f0107f5f <kmalloc>
f011ccaa:	83 c4 10             	add    $0x10,%esp
f011ccad:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ccb3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ccb9:	89 c1                	mov    %eax,%ecx
f011ccbb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ccc2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ccc7:	0f b6 d0             	movzbl %al,%edx
f011ccca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cccd:	01 d0                	add    %edx,%eax
f011cccf:	48                   	dec    %eax
f011ccd0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ccd3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ccd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccdb:	f7 75 ac             	divl   -0x54(%ebp)
f011ccde:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cce1:	29 d0                	sub    %edx,%eax
f011cce3:	89 c3                	mov    %eax,%ebx
f011cce5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ccec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ccf1:	0f b6 c0             	movzbl %al,%eax
f011ccf4:	c1 e0 04             	shl    $0x4,%eax
f011ccf7:	89 c2                	mov    %eax,%edx
f011ccf9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ccfc:	01 d0                	add    %edx,%eax
f011ccfe:	48                   	dec    %eax
f011ccff:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cd02:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd05:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd0a:	f7 75 a4             	divl   -0x5c(%ebp)
f011cd0d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd10:	29 d0                	sub    %edx,%eax
f011cd12:	01 d8                	add    %ebx,%eax
f011cd14:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cd19:	39 c1                	cmp    %eax,%ecx
f011cd1b:	74 17                	je     f011cd34 <test_kmalloc_firstfit1+0x4be>
f011cd1d:	83 ec 04             	sub    $0x4,%esp
f011cd20:	68 ec 9d 13 f0       	push   $0xf0139dec
f011cd25:	68 06 03 00 00       	push   $0x306
f011cd2a:	68 d2 99 13 f0       	push   $0xf01399d2
f011cd2f:	e8 7c 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd34:	e8 4b 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd39:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd3c:	74 17                	je     f011cd55 <test_kmalloc_firstfit1+0x4df>
f011cd3e:	83 ec 04             	sub    $0x4,%esp
f011cd41:	68 ec 99 13 f0       	push   $0xf01399ec
f011cd46:	68 07 03 00 00       	push   $0x307
f011cd4b:	68 d2 99 13 f0       	push   $0xf01399d2
f011cd50:	e8 5b 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cd55:	e8 6c fc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cd5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd5d:	29 c2                	sub    %eax,%edx
f011cd5f:	89 d0                	mov    %edx,%eax
f011cd61:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cd66:	74 17                	je     f011cd7f <test_kmalloc_firstfit1+0x509>
f011cd68:	83 ec 04             	sub    $0x4,%esp
f011cd6b:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011cd70:	68 08 03 00 00       	push   $0x308
f011cd75:	68 d2 99 13 f0       	push   $0xf01399d2
f011cd7a:	e8 31 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd7f:	e8 42 fc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cd84:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd87:	e8 f8 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cd8f:	83 ec 0c             	sub    $0xc,%esp
f011cd92:	68 00 fc 1f 00       	push   $0x1ffc00
f011cd97:	e8 c3 b1 fe ff       	call   f0107f5f <kmalloc>
f011cd9c:	83 c4 10             	add    $0x10,%esp
f011cd9f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cda5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cdab:	89 c1                	mov    %eax,%ecx
f011cdad:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cdb4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cdb9:	0f b6 d0             	movzbl %al,%edx
f011cdbc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cdbf:	01 d0                	add    %edx,%eax
f011cdc1:	48                   	dec    %eax
f011cdc2:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cdc5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cdc8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdcd:	f7 75 9c             	divl   -0x64(%ebp)
f011cdd0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cdd3:	29 d0                	sub    %edx,%eax
f011cdd5:	89 c3                	mov    %eax,%ebx
f011cdd7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cdde:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cde3:	0f b6 c0             	movzbl %al,%eax
f011cde6:	c1 e0 04             	shl    $0x4,%eax
f011cde9:	89 c2                	mov    %eax,%edx
f011cdeb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cdee:	01 d0                	add    %edx,%eax
f011cdf0:	48                   	dec    %eax
f011cdf1:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cdf4:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cdf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdfc:	f7 75 94             	divl   -0x6c(%ebp)
f011cdff:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ce02:	29 d0                	sub    %edx,%eax
f011ce04:	01 d8                	add    %ebx,%eax
f011ce06:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ce0b:	39 c1                	cmp    %eax,%ecx
f011ce0d:	74 17                	je     f011ce26 <test_kmalloc_firstfit1+0x5b0>
f011ce0f:	83 ec 04             	sub    $0x4,%esp
f011ce12:	68 ec 9d 13 f0       	push   $0xf0139dec
f011ce17:	68 0e 03 00 00       	push   $0x30e
f011ce1c:	68 d2 99 13 f0       	push   $0xf01399d2
f011ce21:	e8 8a 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce26:	e8 59 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce2e:	74 17                	je     f011ce47 <test_kmalloc_firstfit1+0x5d1>
f011ce30:	83 ec 04             	sub    $0x4,%esp
f011ce33:	68 ec 99 13 f0       	push   $0xf01399ec
f011ce38:	68 0f 03 00 00       	push   $0x30f
f011ce3d:	68 d2 99 13 f0       	push   $0xf01399d2
f011ce42:	e8 69 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ce47:	e8 7a fb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ce4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce4f:	29 c2                	sub    %eax,%edx
f011ce51:	89 d0                	mov    %edx,%eax
f011ce53:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ce58:	74 17                	je     f011ce71 <test_kmalloc_firstfit1+0x5fb>
f011ce5a:	83 ec 04             	sub    $0x4,%esp
f011ce5d:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011ce62:	68 10 03 00 00       	push   $0x310
f011ce67:	68 d2 99 13 f0       	push   $0xf01399d2
f011ce6c:	e8 3f 33 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce71:	e8 50 fb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ce76:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce79:	e8 06 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011ce81:	83 ec 0c             	sub    $0xc,%esp
f011ce84:	68 00 fc 2f 00       	push   $0x2ffc00
f011ce89:	e8 d1 b0 fe ff       	call   f0107f5f <kmalloc>
f011ce8e:	83 c4 10             	add    $0x10,%esp
f011ce91:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ce97:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ce9d:	89 c1                	mov    %eax,%ecx
f011ce9f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cea6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ceab:	0f b6 d0             	movzbl %al,%edx
f011ceae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ceb1:	01 d0                	add    %edx,%eax
f011ceb3:	48                   	dec    %eax
f011ceb4:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ceb7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ceba:	ba 00 00 00 00       	mov    $0x0,%edx
f011cebf:	f7 75 8c             	divl   -0x74(%ebp)
f011cec2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cec5:	29 d0                	sub    %edx,%eax
f011cec7:	89 c3                	mov    %eax,%ebx
f011cec9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ced0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ced5:	0f b6 c0             	movzbl %al,%eax
f011ced8:	c1 e0 04             	shl    $0x4,%eax
f011cedb:	89 c2                	mov    %eax,%edx
f011cedd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cee0:	01 d0                	add    %edx,%eax
f011cee2:	48                   	dec    %eax
f011cee3:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cee6:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cee9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ceee:	f7 75 84             	divl   -0x7c(%ebp)
f011cef1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cef4:	29 d0                	sub    %edx,%eax
f011cef6:	01 d8                	add    %ebx,%eax
f011cef8:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cefd:	39 c1                	cmp    %eax,%ecx
f011ceff:	74 17                	je     f011cf18 <test_kmalloc_firstfit1+0x6a2>
f011cf01:	83 ec 04             	sub    $0x4,%esp
f011cf04:	68 ec 9d 13 f0       	push   $0xf0139dec
f011cf09:	68 16 03 00 00       	push   $0x316
f011cf0e:	68 d2 99 13 f0       	push   $0xf01399d2
f011cf13:	e8 98 32 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf18:	e8 67 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf1d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf20:	74 17                	je     f011cf39 <test_kmalloc_firstfit1+0x6c3>
f011cf22:	83 ec 04             	sub    $0x4,%esp
f011cf25:	68 ec 99 13 f0       	push   $0xf01399ec
f011cf2a:	68 17 03 00 00       	push   $0x317
f011cf2f:	68 d2 99 13 f0       	push   $0xf01399d2
f011cf34:	e8 77 32 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cf39:	e8 88 fa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cf3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf41:	29 c2                	sub    %eax,%edx
f011cf43:	89 d0                	mov    %edx,%eax
f011cf45:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cf4a:	74 17                	je     f011cf63 <test_kmalloc_firstfit1+0x6ed>
f011cf4c:	83 ec 04             	sub    $0x4,%esp
f011cf4f:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011cf54:	68 18 03 00 00       	push   $0x318
f011cf59:	68 d2 99 13 f0       	push   $0xf01399d2
f011cf5e:	e8 4d 32 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf63:	e8 5e fa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cf68:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf6b:	e8 14 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf70:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cf73:	83 ec 0c             	sub    $0xc,%esp
f011cf76:	68 00 fc 2f 00       	push   $0x2ffc00
f011cf7b:	e8 df af fe ff       	call   f0107f5f <kmalloc>
f011cf80:	83 c4 10             	add    $0x10,%esp
f011cf83:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cf89:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cf8f:	89 c1                	mov    %eax,%ecx
f011cf91:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cf98:	10 00 00 
f011cf9b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cfa0:	0f b6 d0             	movzbl %al,%edx
f011cfa3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cfa9:	01 d0                	add    %edx,%eax
f011cfab:	48                   	dec    %eax
f011cfac:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cfb2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cfb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfbd:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cfc3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cfc9:	29 d0                	sub    %edx,%eax
f011cfcb:	89 c3                	mov    %eax,%ebx
f011cfcd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cfd4:	10 00 00 
f011cfd7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cfdc:	0f b6 c0             	movzbl %al,%eax
f011cfdf:	c1 e0 04             	shl    $0x4,%eax
f011cfe2:	89 c2                	mov    %eax,%edx
f011cfe4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cfea:	01 d0                	add    %edx,%eax
f011cfec:	48                   	dec    %eax
f011cfed:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cff3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cff9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cffe:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d004:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d00a:	29 d0                	sub    %edx,%eax
f011d00c:	01 d8                	add    %ebx,%eax
f011d00e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d013:	39 c1                	cmp    %eax,%ecx
f011d015:	74 17                	je     f011d02e <test_kmalloc_firstfit1+0x7b8>
f011d017:	83 ec 04             	sub    $0x4,%esp
f011d01a:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d01f:	68 1e 03 00 00       	push   $0x31e
f011d024:	68 d2 99 13 f0       	push   $0xf01399d2
f011d029:	e8 82 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d02e:	e8 51 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d033:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d036:	74 17                	je     f011d04f <test_kmalloc_firstfit1+0x7d9>
f011d038:	83 ec 04             	sub    $0x4,%esp
f011d03b:	68 ec 99 13 f0       	push   $0xf01399ec
f011d040:	68 1f 03 00 00       	push   $0x31f
f011d045:	68 d2 99 13 f0       	push   $0xf01399d2
f011d04a:	e8 61 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d04f:	e8 72 f9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d054:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d057:	29 c2                	sub    %eax,%edx
f011d059:	89 d0                	mov    %edx,%eax
f011d05b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d060:	74 17                	je     f011d079 <test_kmalloc_firstfit1+0x803>
f011d062:	83 ec 04             	sub    $0x4,%esp
f011d065:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d06a:	68 20 03 00 00       	push   $0x320
f011d06f:	68 d2 99 13 f0       	push   $0xf01399d2
f011d074:	e8 37 31 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d079:	e8 48 f9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d07e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d081:	e8 fe 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d086:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d089:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d08f:	83 ec 0c             	sub    $0xc,%esp
f011d092:	50                   	push   %eax
f011d093:	e8 e1 ae fe ff       	call   f0107f79 <kfree>
f011d098:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d09b:	e8 e4 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d0a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0a3:	74 17                	je     f011d0bc <test_kmalloc_firstfit1+0x846>
f011d0a5:	83 ec 04             	sub    $0x4,%esp
f011d0a8:	68 ec 99 13 f0       	push   $0xf01399ec
f011d0ad:	68 29 03 00 00       	push   $0x329
f011d0b2:	68 d2 99 13 f0       	push   $0xf01399d2
f011d0b7:	e8 f4 30 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d0bc:	e8 05 f9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d0c1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d0c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d0c9:	74 17                	je     f011d0e2 <test_kmalloc_firstfit1+0x86c>
f011d0cb:	83 ec 04             	sub    $0x4,%esp
f011d0ce:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011d0d3:	68 2a 03 00 00       	push   $0x32a
f011d0d8:	68 d2 99 13 f0       	push   $0xf01399d2
f011d0dd:	e8 ce 30 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d0e2:	e8 df f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d0e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0ea:	e8 95 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d0ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d0f2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d0f8:	83 ec 0c             	sub    $0xc,%esp
f011d0fb:	50                   	push   %eax
f011d0fc:	e8 78 ae fe ff       	call   f0107f79 <kfree>
f011d101:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d104:	e8 7b 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d109:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d10c:	74 17                	je     f011d125 <test_kmalloc_firstfit1+0x8af>
f011d10e:	83 ec 04             	sub    $0x4,%esp
f011d111:	68 ec 99 13 f0       	push   $0xf01399ec
f011d116:	68 30 03 00 00       	push   $0x330
f011d11b:	68 d2 99 13 f0       	push   $0xf01399d2
f011d120:	e8 8b 30 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d125:	e8 9c f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d12a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d12d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d132:	74 17                	je     f011d14b <test_kmalloc_firstfit1+0x8d5>
f011d134:	83 ec 04             	sub    $0x4,%esp
f011d137:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011d13c:	68 31 03 00 00       	push   $0x331
f011d141:	68 d2 99 13 f0       	push   $0xf01399d2
f011d146:	e8 65 30 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d14b:	e8 76 f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d150:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d153:	e8 2c 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d158:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d15b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d161:	83 ec 0c             	sub    $0xc,%esp
f011d164:	50                   	push   %eax
f011d165:	e8 0f ae fe ff       	call   f0107f79 <kfree>
f011d16a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d16d:	e8 12 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d172:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d175:	74 17                	je     f011d18e <test_kmalloc_firstfit1+0x918>
f011d177:	83 ec 04             	sub    $0x4,%esp
f011d17a:	68 ec 99 13 f0       	push   $0xf01399ec
f011d17f:	68 37 03 00 00       	push   $0x337
f011d184:	68 d2 99 13 f0       	push   $0xf01399d2
f011d189:	e8 22 30 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d18e:	e8 33 f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d193:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d196:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d19b:	74 17                	je     f011d1b4 <test_kmalloc_firstfit1+0x93e>
f011d19d:	83 ec 04             	sub    $0x4,%esp
f011d1a0:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011d1a5:	68 38 03 00 00       	push   $0x338
f011d1aa:	68 d2 99 13 f0       	push   $0xf01399d2
f011d1af:	e8 fc 2f fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d1b4:	e8 0d f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d1b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1bc:	e8 c3 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d1c4:	83 ec 0c             	sub    $0xc,%esp
f011d1c7:	68 00 fc 07 00       	push   $0x7fc00
f011d1cc:	e8 8e ad fe ff       	call   f0107f5f <kmalloc>
f011d1d1:	83 c4 10             	add    $0x10,%esp
f011d1d4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d1da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d1e0:	89 c1                	mov    %eax,%ecx
f011d1e2:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d1e9:	10 00 00 
f011d1ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d1f1:	0f b6 d0             	movzbl %al,%edx
f011d1f4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d1fa:	01 d0                	add    %edx,%eax
f011d1fc:	48                   	dec    %eax
f011d1fd:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d203:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d209:	ba 00 00 00 00       	mov    $0x0,%edx
f011d20e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d214:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d21a:	29 d0                	sub    %edx,%eax
f011d21c:	89 c3                	mov    %eax,%ebx
f011d21e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d225:	10 00 00 
f011d228:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d22d:	0f b6 c0             	movzbl %al,%eax
f011d230:	c1 e0 04             	shl    $0x4,%eax
f011d233:	89 c2                	mov    %eax,%edx
f011d235:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d23b:	01 d0                	add    %edx,%eax
f011d23d:	48                   	dec    %eax
f011d23e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d244:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d24a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d24f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d255:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d25b:	29 d0                	sub    %edx,%eax
f011d25d:	01 d8                	add    %ebx,%eax
f011d25f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d264:	39 c1                	cmp    %eax,%ecx
f011d266:	74 17                	je     f011d27f <test_kmalloc_firstfit1+0xa09>
f011d268:	83 ec 04             	sub    $0x4,%esp
f011d26b:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d270:	68 41 03 00 00       	push   $0x341
f011d275:	68 d2 99 13 f0       	push   $0xf01399d2
f011d27a:	e8 31 2f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d27f:	e8 00 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d284:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d287:	74 17                	je     f011d2a0 <test_kmalloc_firstfit1+0xa2a>
f011d289:	83 ec 04             	sub    $0x4,%esp
f011d28c:	68 ec 99 13 f0       	push   $0xf01399ec
f011d291:	68 42 03 00 00       	push   $0x342
f011d296:	68 d2 99 13 f0       	push   $0xf01399d2
f011d29b:	e8 10 2f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d2a0:	e8 21 f7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d2a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2a8:	29 c2                	sub    %eax,%edx
f011d2aa:	89 d0                	mov    %edx,%eax
f011d2ac:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d2b1:	74 17                	je     f011d2ca <test_kmalloc_firstfit1+0xa54>
f011d2b3:	83 ec 04             	sub    $0x4,%esp
f011d2b6:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d2bb:	68 43 03 00 00       	push   $0x343
f011d2c0:	68 d2 99 13 f0       	push   $0xf01399d2
f011d2c5:	e8 e6 2e fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d2ca:	e8 f7 f6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d2cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2d2:	e8 ad 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d2d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d2da:	83 ec 0c             	sub    $0xc,%esp
f011d2dd:	68 00 fc 0f 00       	push   $0xffc00
f011d2e2:	e8 78 ac fe ff       	call   f0107f5f <kmalloc>
f011d2e7:	83 c4 10             	add    $0x10,%esp
f011d2ea:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d2f0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d2f6:	89 c1                	mov    %eax,%ecx
f011d2f8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d2ff:	10 00 00 
f011d302:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d307:	0f b6 d0             	movzbl %al,%edx
f011d30a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d310:	01 d0                	add    %edx,%eax
f011d312:	48                   	dec    %eax
f011d313:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d319:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d31f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d324:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d32a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d330:	29 d0                	sub    %edx,%eax
f011d332:	89 c3                	mov    %eax,%ebx
f011d334:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d33b:	10 00 00 
f011d33e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d343:	0f b6 c0             	movzbl %al,%eax
f011d346:	c1 e0 04             	shl    $0x4,%eax
f011d349:	89 c2                	mov    %eax,%edx
f011d34b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d351:	01 d0                	add    %edx,%eax
f011d353:	48                   	dec    %eax
f011d354:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d35a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d360:	ba 00 00 00 00       	mov    $0x0,%edx
f011d365:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d36b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d371:	29 d0                	sub    %edx,%eax
f011d373:	01 d8                	add    %ebx,%eax
f011d375:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d37a:	39 c1                	cmp    %eax,%ecx
f011d37c:	74 17                	je     f011d395 <test_kmalloc_firstfit1+0xb1f>
f011d37e:	83 ec 04             	sub    $0x4,%esp
f011d381:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d386:	68 49 03 00 00       	push   $0x349
f011d38b:	68 d2 99 13 f0       	push   $0xf01399d2
f011d390:	e8 1b 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d395:	e8 ea 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d39a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d39d:	74 17                	je     f011d3b6 <test_kmalloc_firstfit1+0xb40>
f011d39f:	83 ec 04             	sub    $0x4,%esp
f011d3a2:	68 ec 99 13 f0       	push   $0xf01399ec
f011d3a7:	68 4a 03 00 00       	push   $0x34a
f011d3ac:	68 d2 99 13 f0       	push   $0xf01399d2
f011d3b1:	e8 fa 2d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d3b6:	e8 0b f6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d3bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3be:	29 c2                	sub    %eax,%edx
f011d3c0:	89 d0                	mov    %edx,%eax
f011d3c2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d3c7:	74 17                	je     f011d3e0 <test_kmalloc_firstfit1+0xb6a>
f011d3c9:	83 ec 04             	sub    $0x4,%esp
f011d3cc:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d3d1:	68 4b 03 00 00       	push   $0x34b
f011d3d6:	68 d2 99 13 f0       	push   $0xf01399d2
f011d3db:	e8 d0 2d fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d3e0:	e8 e1 f5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d3e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3e8:	e8 97 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d3ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d3f0:	83 ec 0c             	sub    $0xc,%esp
f011d3f3:	68 00 fc 03 00       	push   $0x3fc00
f011d3f8:	e8 62 ab fe ff       	call   f0107f5f <kmalloc>
f011d3fd:	83 c4 10             	add    $0x10,%esp
f011d400:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d406:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d40c:	89 c1                	mov    %eax,%ecx
f011d40e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d415:	10 00 00 
f011d418:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d41d:	0f b6 d0             	movzbl %al,%edx
f011d420:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d426:	01 d0                	add    %edx,%eax
f011d428:	48                   	dec    %eax
f011d429:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d42f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d435:	ba 00 00 00 00       	mov    $0x0,%edx
f011d43a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d440:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d446:	29 d0                	sub    %edx,%eax
f011d448:	89 c3                	mov    %eax,%ebx
f011d44a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d451:	10 00 00 
f011d454:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d459:	0f b6 c0             	movzbl %al,%eax
f011d45c:	c1 e0 04             	shl    $0x4,%eax
f011d45f:	89 c2                	mov    %eax,%edx
f011d461:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d467:	01 d0                	add    %edx,%eax
f011d469:	48                   	dec    %eax
f011d46a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d470:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d476:	ba 00 00 00 00       	mov    $0x0,%edx
f011d47b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d481:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d487:	29 d0                	sub    %edx,%eax
f011d489:	01 d8                	add    %ebx,%eax
f011d48b:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d490:	39 c1                	cmp    %eax,%ecx
f011d492:	74 17                	je     f011d4ab <test_kmalloc_firstfit1+0xc35>
f011d494:	83 ec 04             	sub    $0x4,%esp
f011d497:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d49c:	68 52 03 00 00       	push   $0x352
f011d4a1:	68 d2 99 13 f0       	push   $0xf01399d2
f011d4a6:	e8 05 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4ab:	e8 d4 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d4b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4b3:	74 17                	je     f011d4cc <test_kmalloc_firstfit1+0xc56>
f011d4b5:	83 ec 04             	sub    $0x4,%esp
f011d4b8:	68 ec 99 13 f0       	push   $0xf01399ec
f011d4bd:	68 53 03 00 00       	push   $0x353
f011d4c2:	68 d2 99 13 f0       	push   $0xf01399d2
f011d4c7:	e8 e4 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d4cc:	e8 f5 f4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d4d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4d4:	29 c2                	sub    %eax,%edx
f011d4d6:	89 d0                	mov    %edx,%eax
f011d4d8:	83 f8 40             	cmp    $0x40,%eax
f011d4db:	74 17                	je     f011d4f4 <test_kmalloc_firstfit1+0xc7e>
f011d4dd:	83 ec 04             	sub    $0x4,%esp
f011d4e0:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d4e5:	68 54 03 00 00       	push   $0x354
f011d4ea:	68 d2 99 13 f0       	push   $0xf01399d2
f011d4ef:	e8 bc 2c fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d4f4:	e8 cd f4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d4f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4fc:	e8 83 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d501:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d504:	83 ec 0c             	sub    $0xc,%esp
f011d507:	68 00 00 20 00       	push   $0x200000
f011d50c:	e8 4e aa fe ff       	call   f0107f5f <kmalloc>
f011d511:	83 c4 10             	add    $0x10,%esp
f011d514:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d51a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d520:	89 c1                	mov    %eax,%ecx
f011d522:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d529:	10 00 00 
f011d52c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d531:	0f b6 d0             	movzbl %al,%edx
f011d534:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d53a:	01 d0                	add    %edx,%eax
f011d53c:	48                   	dec    %eax
f011d53d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d543:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d549:	ba 00 00 00 00       	mov    $0x0,%edx
f011d54e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d554:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d55a:	29 d0                	sub    %edx,%eax
f011d55c:	89 c3                	mov    %eax,%ebx
f011d55e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d565:	10 00 00 
f011d568:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d56d:	0f b6 c0             	movzbl %al,%eax
f011d570:	c1 e0 04             	shl    $0x4,%eax
f011d573:	89 c2                	mov    %eax,%edx
f011d575:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d57b:	01 d0                	add    %edx,%eax
f011d57d:	48                   	dec    %eax
f011d57e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d584:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d58a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d58f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d595:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d59b:	29 d0                	sub    %edx,%eax
f011d59d:	01 d8                	add    %ebx,%eax
f011d59f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d5a4:	39 c1                	cmp    %eax,%ecx
f011d5a6:	74 17                	je     f011d5bf <test_kmalloc_firstfit1+0xd49>
f011d5a8:	83 ec 04             	sub    $0x4,%esp
f011d5ab:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d5b0:	68 5a 03 00 00       	push   $0x35a
f011d5b5:	68 d2 99 13 f0       	push   $0xf01399d2
f011d5ba:	e8 f1 2b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d5bf:	e8 02 f4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d5c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5c7:	29 c2                	sub    %eax,%edx
f011d5c9:	89 d0                	mov    %edx,%eax
f011d5cb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d5d0:	74 17                	je     f011d5e9 <test_kmalloc_firstfit1+0xd73>
f011d5d2:	83 ec 04             	sub    $0x4,%esp
f011d5d5:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d5da:	68 5b 03 00 00       	push   $0x35b
f011d5df:	68 d2 99 13 f0       	push   $0xf01399d2
f011d5e4:	e8 c7 2b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5e9:	e8 96 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5ee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5f1:	74 17                	je     f011d60a <test_kmalloc_firstfit1+0xd94>
f011d5f3:	83 ec 04             	sub    $0x4,%esp
f011d5f6:	68 ec 99 13 f0       	push   $0xf01399ec
f011d5fb:	68 5c 03 00 00       	push   $0x35c
f011d600:	68 d2 99 13 f0       	push   $0xf01399d2
f011d605:	e8 a6 2b fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d60a:	e8 b7 f3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d60f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d612:	e8 6d 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d617:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d61a:	83 ec 0c             	sub    $0xc,%esp
f011d61d:	68 00 fc 3f 00       	push   $0x3ffc00
f011d622:	e8 38 a9 fe ff       	call   f0107f5f <kmalloc>
f011d627:	83 c4 10             	add    $0x10,%esp
f011d62a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d630:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d636:	89 c1                	mov    %eax,%ecx
f011d638:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d63f:	10 00 00 
f011d642:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d647:	0f b6 d0             	movzbl %al,%edx
f011d64a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d650:	01 d0                	add    %edx,%eax
f011d652:	48                   	dec    %eax
f011d653:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d659:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d65f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d664:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d66a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d670:	29 d0                	sub    %edx,%eax
f011d672:	89 c3                	mov    %eax,%ebx
f011d674:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d67b:	10 00 00 
f011d67e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d683:	0f b6 c0             	movzbl %al,%eax
f011d686:	c1 e0 04             	shl    $0x4,%eax
f011d689:	89 c2                	mov    %eax,%edx
f011d68b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d691:	01 d0                	add    %edx,%eax
f011d693:	48                   	dec    %eax
f011d694:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d69a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d6a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6a5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d6ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d6b1:	29 d0                	sub    %edx,%eax
f011d6b3:	01 d8                	add    %ebx,%eax
f011d6b5:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d6ba:	39 c1                	cmp    %eax,%ecx
f011d6bc:	74 17                	je     f011d6d5 <test_kmalloc_firstfit1+0xe5f>
f011d6be:	83 ec 04             	sub    $0x4,%esp
f011d6c1:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d6c6:	68 63 03 00 00       	push   $0x363
f011d6cb:	68 d2 99 13 f0       	push   $0xf01399d2
f011d6d0:	e8 db 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6d5:	e8 aa 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d6da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6dd:	74 17                	je     f011d6f6 <test_kmalloc_firstfit1+0xe80>
f011d6df:	83 ec 04             	sub    $0x4,%esp
f011d6e2:	68 ec 99 13 f0       	push   $0xf01399ec
f011d6e7:	68 64 03 00 00       	push   $0x364
f011d6ec:	68 d2 99 13 f0       	push   $0xf01399d2
f011d6f1:	e8 ba 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d6f6:	e8 cb f2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d6fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6fe:	29 c2                	sub    %eax,%edx
f011d700:	89 d0                	mov    %edx,%eax
f011d702:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d707:	74 17                	je     f011d720 <test_kmalloc_firstfit1+0xeaa>
f011d709:	83 ec 04             	sub    $0x4,%esp
f011d70c:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d711:	68 65 03 00 00       	push   $0x365
f011d716:	68 d2 99 13 f0       	push   $0xf01399d2
f011d71b:	e8 90 2a fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d720:	e8 a1 f2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d725:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d728:	e8 57 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d72d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d730:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d736:	83 ec 0c             	sub    $0xc,%esp
f011d739:	50                   	push   %eax
f011d73a:	e8 3a a8 fe ff       	call   f0107f79 <kfree>
f011d73f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d742:	e8 3d 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d747:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d74a:	74 17                	je     f011d763 <test_kmalloc_firstfit1+0xeed>
f011d74c:	83 ec 04             	sub    $0x4,%esp
f011d74f:	68 ec 99 13 f0       	push   $0xf01399ec
f011d754:	68 6e 03 00 00       	push   $0x36e
f011d759:	68 d2 99 13 f0       	push   $0xf01399d2
f011d75e:	e8 4d 2a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d763:	e8 5e f2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d768:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d76b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d770:	74 17                	je     f011d789 <test_kmalloc_firstfit1+0xf13>
f011d772:	83 ec 04             	sub    $0x4,%esp
f011d775:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011d77a:	68 6f 03 00 00       	push   $0x36f
f011d77f:	68 d2 99 13 f0       	push   $0xf01399d2
f011d784:	e8 27 2a fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d789:	e8 38 f2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d78e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d791:	e8 ee 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d796:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d799:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d79f:	83 ec 0c             	sub    $0xc,%esp
f011d7a2:	50                   	push   %eax
f011d7a3:	e8 d1 a7 fe ff       	call   f0107f79 <kfree>
f011d7a8:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7ab:	e8 d4 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d7b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7b3:	74 17                	je     f011d7cc <test_kmalloc_firstfit1+0xf56>
f011d7b5:	83 ec 04             	sub    $0x4,%esp
f011d7b8:	68 ec 99 13 f0       	push   $0xf01399ec
f011d7bd:	68 75 03 00 00       	push   $0x375
f011d7c2:	68 d2 99 13 f0       	push   $0xf01399d2
f011d7c7:	e8 e4 29 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d7cc:	e8 f5 f1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d7d1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d7d4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d7d9:	74 17                	je     f011d7f2 <test_kmalloc_firstfit1+0xf7c>
f011d7db:	83 ec 04             	sub    $0x4,%esp
f011d7de:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011d7e3:	68 76 03 00 00       	push   $0x376
f011d7e8:	68 d2 99 13 f0       	push   $0xf01399d2
f011d7ed:	e8 be 29 fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d7f2:	e8 cf f1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d7f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7fa:	e8 85 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d7ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d802:	83 ec 0c             	sub    $0xc,%esp
f011d805:	68 00 00 10 00       	push   $0x100000
f011d80a:	e8 50 a7 fe ff       	call   f0107f5f <kmalloc>
f011d80f:	83 c4 10             	add    $0x10,%esp
f011d812:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d818:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d81e:	89 c1                	mov    %eax,%ecx
f011d820:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d827:	10 00 00 
f011d82a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d82f:	0f b6 d0             	movzbl %al,%edx
f011d832:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d838:	01 d0                	add    %edx,%eax
f011d83a:	48                   	dec    %eax
f011d83b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d841:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d847:	ba 00 00 00 00       	mov    $0x0,%edx
f011d84c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d852:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d858:	29 d0                	sub    %edx,%eax
f011d85a:	89 c3                	mov    %eax,%ebx
f011d85c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d863:	10 00 00 
f011d866:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d86b:	0f b6 c0             	movzbl %al,%eax
f011d86e:	c1 e0 04             	shl    $0x4,%eax
f011d871:	89 c2                	mov    %eax,%edx
f011d873:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d879:	01 d0                	add    %edx,%eax
f011d87b:	48                   	dec    %eax
f011d87c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d882:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d888:	ba 00 00 00 00       	mov    $0x0,%edx
f011d88d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d893:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d899:	29 d0                	sub    %edx,%eax
f011d89b:	01 d8                	add    %ebx,%eax
f011d89d:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d8a2:	39 c1                	cmp    %eax,%ecx
f011d8a4:	74 17                	je     f011d8bd <test_kmalloc_firstfit1+0x1047>
f011d8a6:	83 ec 04             	sub    $0x4,%esp
f011d8a9:	68 ec 9d 13 f0       	push   $0xf0139dec
f011d8ae:	68 80 03 00 00       	push   $0x380
f011d8b3:	68 d2 99 13 f0       	push   $0xf01399d2
f011d8b8:	e8 f3 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8bd:	e8 c2 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d8c2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d8c5:	74 17                	je     f011d8de <test_kmalloc_firstfit1+0x1068>
f011d8c7:	83 ec 04             	sub    $0x4,%esp
f011d8ca:	68 ec 99 13 f0       	push   $0xf01399ec
f011d8cf:	68 81 03 00 00       	push   $0x381
f011d8d4:	68 d2 99 13 f0       	push   $0xf01399d2
f011d8d9:	e8 d2 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d8de:	e8 e3 f0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d8e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d8e6:	29 c2                	sub    %eax,%edx
f011d8e8:	89 d0                	mov    %edx,%eax
f011d8ea:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d8ef:	74 17                	je     f011d908 <test_kmalloc_firstfit1+0x1092>
f011d8f1:	83 ec 04             	sub    $0x4,%esp
f011d8f4:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011d8f9:	68 82 03 00 00       	push   $0x382
f011d8fe:	68 d2 99 13 f0       	push   $0xf01399d2
f011d903:	e8 a8 28 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d908:	83 ec 0c             	sub    $0xc,%esp
f011d90b:	68 c8 9f 13 f0       	push   $0xf0139fc8
f011d910:	e8 1c 35 fe ff       	call   f0100e31 <cprintf>
f011d915:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d918:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d91d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d920:	5b                   	pop    %ebx
f011d921:	5f                   	pop    %edi
f011d922:	5d                   	pop    %ebp
f011d923:	c3                   	ret    

f011d924 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d924:	55                   	push   %ebp
f011d925:	89 e5                	mov    %esp,%ebp
f011d927:	57                   	push   %edi
f011d928:	53                   	push   %ebx
f011d929:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d92f:	83 ec 0c             	sub    $0xc,%esp
f011d932:	68 14 99 13 f0       	push   $0xf0139914
f011d937:	e8 f5 34 fe ff       	call   f0100e31 <cprintf>
f011d93c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d93f:	83 ec 0c             	sub    $0xc,%esp
f011d942:	68 44 99 13 f0       	push   $0xf0139944
f011d947:	e8 e5 34 fe ff       	call   f0100e31 <cprintf>
f011d94c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d94f:	83 ec 0c             	sub    $0xc,%esp
f011d952:	68 14 99 13 f0       	push   $0xf0139914
f011d957:	e8 d5 34 fe ff       	call   f0100e31 <cprintf>
f011d95c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d95f:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d965:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d96a:	b8 00 00 00 00       	mov    $0x0,%eax
f011d96f:	89 d7                	mov    %edx,%edi
f011d971:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d973:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d97a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d97f:	0f b6 d0             	movzbl %al,%edx
f011d982:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d985:	01 d0                	add    %edx,%eax
f011d987:	48                   	dec    %eax
f011d988:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d98b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d98e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d993:	f7 75 f4             	divl   -0xc(%ebp)
f011d996:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d999:	29 d0                	sub    %edx,%eax
f011d99b:	89 c1                	mov    %eax,%ecx
f011d99d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d9a4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d9a9:	0f b6 c0             	movzbl %al,%eax
f011d9ac:	c1 e0 04             	shl    $0x4,%eax
f011d9af:	89 c2                	mov    %eax,%edx
f011d9b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d9b4:	01 d0                	add    %edx,%eax
f011d9b6:	48                   	dec    %eax
f011d9b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d9ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d9bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9c2:	f7 75 ec             	divl   -0x14(%ebp)
f011d9c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d9c8:	29 d0                	sub    %edx,%eax
f011d9ca:	01 c8                	add    %ecx,%eax
f011d9cc:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d9d1:	29 c2                	sub    %eax,%edx
f011d9d3:	89 d0                	mov    %edx,%eax
f011d9d5:	83 ec 0c             	sub    $0xc,%esp
f011d9d8:	50                   	push   %eax
f011d9d9:	e8 81 a5 fe ff       	call   f0107f5f <kmalloc>
f011d9de:	83 c4 10             	add    $0x10,%esp
f011d9e1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d9e7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d9ed:	85 c0                	test   %eax,%eax
f011d9ef:	74 17                	je     f011da08 <test_kmalloc_firstfit2+0xe4>
f011d9f1:	83 ec 04             	sub    $0x4,%esp
f011d9f4:	68 14 a0 13 f0       	push   $0xf013a014
f011d9f9:	68 97 03 00 00       	push   $0x397
f011d9fe:	68 d2 99 13 f0       	push   $0xf01399d2
f011da03:	e8 a8 27 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011da08:	e8 b9 ef fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011da0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da10:	e8 6f 6c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011da15:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011da18:	83 ec 0c             	sub    $0xc,%esp
f011da1b:	68 00 fc 1f 00       	push   $0x1ffc00
f011da20:	e8 3a a5 fe ff       	call   f0107f5f <kmalloc>
f011da25:	83 c4 10             	add    $0x10,%esp
f011da28:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011da2e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011da34:	89 c1                	mov    %eax,%ecx
f011da36:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011da3d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011da42:	0f b6 d0             	movzbl %al,%edx
f011da45:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011da48:	01 d0                	add    %edx,%eax
f011da4a:	48                   	dec    %eax
f011da4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011da4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011da51:	ba 00 00 00 00       	mov    $0x0,%edx
f011da56:	f7 75 dc             	divl   -0x24(%ebp)
f011da59:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011da5c:	29 d0                	sub    %edx,%eax
f011da5e:	89 c3                	mov    %eax,%ebx
f011da60:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011da67:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011da6c:	0f b6 c0             	movzbl %al,%eax
f011da6f:	c1 e0 04             	shl    $0x4,%eax
f011da72:	89 c2                	mov    %eax,%edx
f011da74:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011da77:	01 d0                	add    %edx,%eax
f011da79:	48                   	dec    %eax
f011da7a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011da7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011da80:	ba 00 00 00 00       	mov    $0x0,%edx
f011da85:	f7 75 d4             	divl   -0x2c(%ebp)
f011da88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011da8b:	29 d0                	sub    %edx,%eax
f011da8d:	01 d8                	add    %ebx,%eax
f011da8f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011da94:	39 c1                	cmp    %eax,%ecx
f011da96:	74 17                	je     f011daaf <test_kmalloc_firstfit2+0x18b>
f011da98:	83 ec 04             	sub    $0x4,%esp
f011da9b:	68 ec 9d 13 f0       	push   $0xf0139dec
f011daa0:	68 a1 03 00 00       	push   $0x3a1
f011daa5:	68 d2 99 13 f0       	push   $0xf01399d2
f011daaa:	e8 01 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011daaf:	e8 d0 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dab4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dab7:	74 17                	je     f011dad0 <test_kmalloc_firstfit2+0x1ac>
f011dab9:	83 ec 04             	sub    $0x4,%esp
f011dabc:	68 ec 99 13 f0       	push   $0xf01399ec
f011dac1:	68 a2 03 00 00       	push   $0x3a2
f011dac6:	68 d2 99 13 f0       	push   $0xf01399d2
f011dacb:	e8 e0 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dad0:	e8 f1 ee fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dad5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dad8:	29 c2                	sub    %eax,%edx
f011dada:	89 d0                	mov    %edx,%eax
f011dadc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dae1:	74 17                	je     f011dafa <test_kmalloc_firstfit2+0x1d6>
f011dae3:	83 ec 04             	sub    $0x4,%esp
f011dae6:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011daeb:	68 a3 03 00 00       	push   $0x3a3
f011daf0:	68 d2 99 13 f0       	push   $0xf01399d2
f011daf5:	e8 b6 26 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dafa:	e8 c7 ee fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011daff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db02:	e8 7d 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011db07:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011db0a:	83 ec 0c             	sub    $0xc,%esp
f011db0d:	68 00 fc 1f 00       	push   $0x1ffc00
f011db12:	e8 48 a4 fe ff       	call   f0107f5f <kmalloc>
f011db17:	83 c4 10             	add    $0x10,%esp
f011db1a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011db20:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011db26:	89 c1                	mov    %eax,%ecx
f011db28:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011db2f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011db34:	0f b6 d0             	movzbl %al,%edx
f011db37:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011db3a:	01 d0                	add    %edx,%eax
f011db3c:	48                   	dec    %eax
f011db3d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011db40:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011db43:	ba 00 00 00 00       	mov    $0x0,%edx
f011db48:	f7 75 cc             	divl   -0x34(%ebp)
f011db4b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011db4e:	29 d0                	sub    %edx,%eax
f011db50:	89 c3                	mov    %eax,%ebx
f011db52:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011db59:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011db5e:	0f b6 c0             	movzbl %al,%eax
f011db61:	c1 e0 04             	shl    $0x4,%eax
f011db64:	89 c2                	mov    %eax,%edx
f011db66:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011db69:	01 d0                	add    %edx,%eax
f011db6b:	48                   	dec    %eax
f011db6c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011db6f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011db72:	ba 00 00 00 00       	mov    $0x0,%edx
f011db77:	f7 75 c4             	divl   -0x3c(%ebp)
f011db7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011db7d:	29 d0                	sub    %edx,%eax
f011db7f:	01 d8                	add    %ebx,%eax
f011db81:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011db86:	39 c1                	cmp    %eax,%ecx
f011db88:	74 17                	je     f011dba1 <test_kmalloc_firstfit2+0x27d>
f011db8a:	83 ec 04             	sub    $0x4,%esp
f011db8d:	68 ec 9d 13 f0       	push   $0xf0139dec
f011db92:	68 a9 03 00 00       	push   $0x3a9
f011db97:	68 d2 99 13 f0       	push   $0xf01399d2
f011db9c:	e8 0f 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dba1:	e8 de 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dba6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dba9:	74 17                	je     f011dbc2 <test_kmalloc_firstfit2+0x29e>
f011dbab:	83 ec 04             	sub    $0x4,%esp
f011dbae:	68 ec 99 13 f0       	push   $0xf01399ec
f011dbb3:	68 aa 03 00 00       	push   $0x3aa
f011dbb8:	68 d2 99 13 f0       	push   $0xf01399d2
f011dbbd:	e8 ee 25 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dbc2:	e8 ff ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dbc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dbca:	29 c2                	sub    %eax,%edx
f011dbcc:	89 d0                	mov    %edx,%eax
f011dbce:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dbd3:	74 17                	je     f011dbec <test_kmalloc_firstfit2+0x2c8>
f011dbd5:	83 ec 04             	sub    $0x4,%esp
f011dbd8:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011dbdd:	68 ab 03 00 00       	push   $0x3ab
f011dbe2:	68 d2 99 13 f0       	push   $0xf01399d2
f011dbe7:	e8 c4 25 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dbec:	e8 d5 ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dbf1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbf4:	e8 8b 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dbf9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011dbfc:	83 ec 0c             	sub    $0xc,%esp
f011dbff:	68 00 08 00 00       	push   $0x800
f011dc04:	e8 56 a3 fe ff       	call   f0107f5f <kmalloc>
f011dc09:	83 c4 10             	add    $0x10,%esp
f011dc0c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011dc12:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dc18:	89 c1                	mov    %eax,%ecx
f011dc1a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011dc21:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dc26:	0f b6 d0             	movzbl %al,%edx
f011dc29:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011dc2c:	01 d0                	add    %edx,%eax
f011dc2e:	48                   	dec    %eax
f011dc2f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011dc32:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc3a:	f7 75 bc             	divl   -0x44(%ebp)
f011dc3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dc40:	29 d0                	sub    %edx,%eax
f011dc42:	89 c3                	mov    %eax,%ebx
f011dc44:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011dc4b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dc50:	0f b6 c0             	movzbl %al,%eax
f011dc53:	c1 e0 04             	shl    $0x4,%eax
f011dc56:	89 c2                	mov    %eax,%edx
f011dc58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011dc5b:	01 d0                	add    %edx,%eax
f011dc5d:	48                   	dec    %eax
f011dc5e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011dc61:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dc64:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc69:	f7 75 b4             	divl   -0x4c(%ebp)
f011dc6c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dc6f:	29 d0                	sub    %edx,%eax
f011dc71:	01 d8                	add    %ebx,%eax
f011dc73:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011dc78:	39 c1                	cmp    %eax,%ecx
f011dc7a:	73 17                	jae    f011dc93 <test_kmalloc_firstfit2+0x36f>
f011dc7c:	83 ec 04             	sub    $0x4,%esp
f011dc7f:	68 ec 9d 13 f0       	push   $0xf0139dec
f011dc84:	68 b1 03 00 00       	push   $0x3b1
f011dc89:	68 d2 99 13 f0       	push   $0xf01399d2
f011dc8e:	e8 1d 25 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc93:	e8 ec 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc98:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc9b:	74 17                	je     f011dcb4 <test_kmalloc_firstfit2+0x390>
f011dc9d:	83 ec 04             	sub    $0x4,%esp
f011dca0:	68 ec 99 13 f0       	push   $0xf01399ec
f011dca5:	68 b2 03 00 00       	push   $0x3b2
f011dcaa:	68 d2 99 13 f0       	push   $0xf01399d2
f011dcaf:	e8 fc 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dcb4:	e8 0d ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dcb9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dcbc:	29 c2                	sub    %eax,%edx
f011dcbe:	89 d0                	mov    %edx,%eax
f011dcc0:	83 f8 01             	cmp    $0x1,%eax
f011dcc3:	74 17                	je     f011dcdc <test_kmalloc_firstfit2+0x3b8>
f011dcc5:	83 ec 04             	sub    $0x4,%esp
f011dcc8:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011dccd:	68 b3 03 00 00       	push   $0x3b3
f011dcd2:	68 d2 99 13 f0       	push   $0xf01399d2
f011dcd7:	e8 d4 24 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dcdc:	e8 e5 ec fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dce1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dce4:	e8 9b 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dce9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dcec:	83 ec 0c             	sub    $0xc,%esp
f011dcef:	68 00 08 00 00       	push   $0x800
f011dcf4:	e8 66 a2 fe ff       	call   f0107f5f <kmalloc>
f011dcf9:	83 c4 10             	add    $0x10,%esp
f011dcfc:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011dd02:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011dd08:	89 c1                	mov    %eax,%ecx
f011dd0a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011dd11:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dd16:	0f b6 d0             	movzbl %al,%edx
f011dd19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dd1c:	01 d0                	add    %edx,%eax
f011dd1e:	48                   	dec    %eax
f011dd1f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011dd22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dd25:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd2a:	f7 75 ac             	divl   -0x54(%ebp)
f011dd2d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dd30:	29 d0                	sub    %edx,%eax
f011dd32:	89 c3                	mov    %eax,%ebx
f011dd34:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011dd3b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dd40:	0f b6 c0             	movzbl %al,%eax
f011dd43:	c1 e0 04             	shl    $0x4,%eax
f011dd46:	89 c2                	mov    %eax,%edx
f011dd48:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011dd4b:	01 d0                	add    %edx,%eax
f011dd4d:	48                   	dec    %eax
f011dd4e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011dd51:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd59:	f7 75 a4             	divl   -0x5c(%ebp)
f011dd5c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dd5f:	29 d0                	sub    %edx,%eax
f011dd61:	01 d8                	add    %ebx,%eax
f011dd63:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011dd68:	39 c1                	cmp    %eax,%ecx
f011dd6a:	74 17                	je     f011dd83 <test_kmalloc_firstfit2+0x45f>
f011dd6c:	83 ec 04             	sub    $0x4,%esp
f011dd6f:	68 ec 9d 13 f0       	push   $0xf0139dec
f011dd74:	68 b9 03 00 00       	push   $0x3b9
f011dd79:	68 d2 99 13 f0       	push   $0xf01399d2
f011dd7e:	e8 2d 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd83:	e8 fc 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd88:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd8b:	74 17                	je     f011dda4 <test_kmalloc_firstfit2+0x480>
f011dd8d:	83 ec 04             	sub    $0x4,%esp
f011dd90:	68 ec 99 13 f0       	push   $0xf01399ec
f011dd95:	68 ba 03 00 00       	push   $0x3ba
f011dd9a:	68 d2 99 13 f0       	push   $0xf01399d2
f011dd9f:	e8 0c 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dda4:	e8 1d ec fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dda9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ddac:	29 c2                	sub    %eax,%edx
f011ddae:	89 d0                	mov    %edx,%eax
f011ddb0:	83 f8 01             	cmp    $0x1,%eax
f011ddb3:	74 17                	je     f011ddcc <test_kmalloc_firstfit2+0x4a8>
f011ddb5:	83 ec 04             	sub    $0x4,%esp
f011ddb8:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011ddbd:	68 bb 03 00 00       	push   $0x3bb
f011ddc2:	68 d2 99 13 f0       	push   $0xf01399d2
f011ddc7:	e8 e4 23 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ddcc:	e8 f5 eb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ddd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddd4:	e8 ab 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ddd9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011dddc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dde2:	83 ec 0c             	sub    $0xc,%esp
f011dde5:	50                   	push   %eax
f011dde6:	e8 8e a1 fe ff       	call   f0107f79 <kfree>
f011ddeb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddee:	e8 91 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ddf3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ddf6:	74 17                	je     f011de0f <test_kmalloc_firstfit2+0x4eb>
f011ddf8:	83 ec 04             	sub    $0x4,%esp
f011ddfb:	68 ec 99 13 f0       	push   $0xf01399ec
f011de00:	68 c1 03 00 00       	push   $0x3c1
f011de05:	68 d2 99 13 f0       	push   $0xf01399d2
f011de0a:	e8 a1 23 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011de0f:	e8 b2 eb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011de14:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011de17:	83 f8 01             	cmp    $0x1,%eax
f011de1a:	74 17                	je     f011de33 <test_kmalloc_firstfit2+0x50f>
f011de1c:	83 ec 04             	sub    $0x4,%esp
f011de1f:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011de24:	68 c2 03 00 00       	push   $0x3c2
f011de29:	68 d2 99 13 f0       	push   $0xf01399d2
f011de2e:	e8 7d 23 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011de33:	e8 8e eb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011de38:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de3b:	e8 44 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de40:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011de43:	83 ec 0c             	sub    $0xc,%esp
f011de46:	68 00 1c 00 00       	push   $0x1c00
f011de4b:	e8 0f a1 fe ff       	call   f0107f5f <kmalloc>
f011de50:	83 c4 10             	add    $0x10,%esp
f011de53:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011de59:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011de5f:	89 c1                	mov    %eax,%ecx
f011de61:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011de68:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011de6d:	0f b6 d0             	movzbl %al,%edx
f011de70:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011de73:	01 d0                	add    %edx,%eax
f011de75:	48                   	dec    %eax
f011de76:	89 45 98             	mov    %eax,-0x68(%ebp)
f011de79:	8b 45 98             	mov    -0x68(%ebp),%eax
f011de7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011de81:	f7 75 9c             	divl   -0x64(%ebp)
f011de84:	8b 45 98             	mov    -0x68(%ebp),%eax
f011de87:	29 d0                	sub    %edx,%eax
f011de89:	89 c3                	mov    %eax,%ebx
f011de8b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011de92:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011de97:	0f b6 c0             	movzbl %al,%eax
f011de9a:	c1 e0 04             	shl    $0x4,%eax
f011de9d:	89 c2                	mov    %eax,%edx
f011de9f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dea2:	01 d0                	add    %edx,%eax
f011dea4:	48                   	dec    %eax
f011dea5:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dea8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011deab:	ba 00 00 00 00       	mov    $0x0,%edx
f011deb0:	f7 75 94             	divl   -0x6c(%ebp)
f011deb3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011deb6:	29 d0                	sub    %edx,%eax
f011deb8:	01 d8                	add    %ebx,%eax
f011deba:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011debf:	39 c1                	cmp    %eax,%ecx
f011dec1:	74 17                	je     f011deda <test_kmalloc_firstfit2+0x5b6>
f011dec3:	83 ec 04             	sub    $0x4,%esp
f011dec6:	68 ec 9d 13 f0       	push   $0xf0139dec
f011decb:	68 c8 03 00 00       	push   $0x3c8
f011ded0:	68 d2 99 13 f0       	push   $0xf01399d2
f011ded5:	e8 d6 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011deda:	e8 a5 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dedf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dee2:	74 17                	je     f011defb <test_kmalloc_firstfit2+0x5d7>
f011dee4:	83 ec 04             	sub    $0x4,%esp
f011dee7:	68 ec 99 13 f0       	push   $0xf01399ec
f011deec:	68 c9 03 00 00       	push   $0x3c9
f011def1:	68 d2 99 13 f0       	push   $0xf01399d2
f011def6:	e8 b5 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011defb:	e8 c6 ea fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011df00:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011df03:	29 c2                	sub    %eax,%edx
f011df05:	89 d0                	mov    %edx,%eax
f011df07:	83 f8 02             	cmp    $0x2,%eax
f011df0a:	74 17                	je     f011df23 <test_kmalloc_firstfit2+0x5ff>
f011df0c:	83 ec 04             	sub    $0x4,%esp
f011df0f:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011df14:	68 ca 03 00 00       	push   $0x3ca
f011df19:	68 d2 99 13 f0       	push   $0xf01399d2
f011df1e:	e8 8d 22 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011df23:	e8 9e ea fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011df28:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df2b:	e8 54 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df30:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011df33:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011df39:	83 ec 0c             	sub    $0xc,%esp
f011df3c:	50                   	push   %eax
f011df3d:	e8 37 a0 fe ff       	call   f0107f79 <kfree>
f011df42:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df45:	e8 3a 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df4a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df4d:	74 17                	je     f011df66 <test_kmalloc_firstfit2+0x642>
f011df4f:	83 ec 04             	sub    $0x4,%esp
f011df52:	68 ec 99 13 f0       	push   $0xf01399ec
f011df57:	68 d0 03 00 00       	push   $0x3d0
f011df5c:	68 d2 99 13 f0       	push   $0xf01399d2
f011df61:	e8 4a 22 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011df66:	e8 5b ea fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011df6b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011df6e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011df73:	74 17                	je     f011df8c <test_kmalloc_firstfit2+0x668>
f011df75:	83 ec 04             	sub    $0x4,%esp
f011df78:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011df7d:	68 d1 03 00 00       	push   $0x3d1
f011df82:	68 d2 99 13 f0       	push   $0xf01399d2
f011df87:	e8 24 22 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011df8c:	e8 35 ea fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011df91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df94:	e8 eb 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df99:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011df9c:	83 ec 0c             	sub    $0xc,%esp
f011df9f:	68 00 fc 2f 00       	push   $0x2ffc00
f011dfa4:	e8 b6 9f fe ff       	call   f0107f5f <kmalloc>
f011dfa9:	83 c4 10             	add    $0x10,%esp
f011dfac:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dfb2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dfb8:	89 c1                	mov    %eax,%ecx
f011dfba:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011dfc1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dfc6:	0f b6 d0             	movzbl %al,%edx
f011dfc9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011dfcc:	01 d0                	add    %edx,%eax
f011dfce:	48                   	dec    %eax
f011dfcf:	89 45 88             	mov    %eax,-0x78(%ebp)
f011dfd2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dfd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfda:	f7 75 8c             	divl   -0x74(%ebp)
f011dfdd:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dfe0:	29 d0                	sub    %edx,%eax
f011dfe2:	89 c3                	mov    %eax,%ebx
f011dfe4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011dfeb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dff0:	0f b6 c0             	movzbl %al,%eax
f011dff3:	c1 e0 04             	shl    $0x4,%eax
f011dff6:	89 c2                	mov    %eax,%edx
f011dff8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011dffb:	01 d0                	add    %edx,%eax
f011dffd:	48                   	dec    %eax
f011dffe:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e001:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e004:	ba 00 00 00 00       	mov    $0x0,%edx
f011e009:	f7 75 84             	divl   -0x7c(%ebp)
f011e00c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e00f:	29 d0                	sub    %edx,%eax
f011e011:	01 d8                	add    %ebx,%eax
f011e013:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e018:	39 c1                	cmp    %eax,%ecx
f011e01a:	74 17                	je     f011e033 <test_kmalloc_firstfit2+0x70f>
f011e01c:	83 ec 04             	sub    $0x4,%esp
f011e01f:	68 ec 9d 13 f0       	push   $0xf0139dec
f011e024:	68 d7 03 00 00       	push   $0x3d7
f011e029:	68 d2 99 13 f0       	push   $0xf01399d2
f011e02e:	e8 7d 21 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e033:	e8 4c 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e038:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e03b:	74 17                	je     f011e054 <test_kmalloc_firstfit2+0x730>
f011e03d:	83 ec 04             	sub    $0x4,%esp
f011e040:	68 ec 99 13 f0       	push   $0xf01399ec
f011e045:	68 d8 03 00 00       	push   $0x3d8
f011e04a:	68 d2 99 13 f0       	push   $0xf01399d2
f011e04f:	e8 5c 21 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e054:	e8 6d e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e059:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e05c:	29 c2                	sub    %eax,%edx
f011e05e:	89 d0                	mov    %edx,%eax
f011e060:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e065:	74 17                	je     f011e07e <test_kmalloc_firstfit2+0x75a>
f011e067:	83 ec 04             	sub    $0x4,%esp
f011e06a:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011e06f:	68 d9 03 00 00       	push   $0x3d9
f011e074:	68 d2 99 13 f0       	push   $0xf01399d2
f011e079:	e8 32 21 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e07e:	e8 43 e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e083:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e086:	e8 f9 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e08b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e08e:	83 ec 0c             	sub    $0xc,%esp
f011e091:	68 00 18 20 00       	push   $0x201800
f011e096:	e8 c4 9e fe ff       	call   f0107f5f <kmalloc>
f011e09b:	83 c4 10             	add    $0x10,%esp
f011e09e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e0a4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e0aa:	89 c1                	mov    %eax,%ecx
f011e0ac:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e0b3:	10 00 00 
f011e0b6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e0bb:	0f b6 d0             	movzbl %al,%edx
f011e0be:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e0c4:	01 d0                	add    %edx,%eax
f011e0c6:	48                   	dec    %eax
f011e0c7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e0cd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e0d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0d8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e0de:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e0e4:	29 d0                	sub    %edx,%eax
f011e0e6:	89 c3                	mov    %eax,%ebx
f011e0e8:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e0ef:	10 00 00 
f011e0f2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e0f7:	0f b6 c0             	movzbl %al,%eax
f011e0fa:	c1 e0 04             	shl    $0x4,%eax
f011e0fd:	89 c2                	mov    %eax,%edx
f011e0ff:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e105:	01 d0                	add    %edx,%eax
f011e107:	48                   	dec    %eax
f011e108:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e10e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e114:	ba 00 00 00 00       	mov    $0x0,%edx
f011e119:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e11f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e125:	29 d0                	sub    %edx,%eax
f011e127:	01 d8                	add    %ebx,%eax
f011e129:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e12e:	39 c1                	cmp    %eax,%ecx
f011e130:	74 17                	je     f011e149 <test_kmalloc_firstfit2+0x825>
f011e132:	83 ec 04             	sub    $0x4,%esp
f011e135:	68 ec 9d 13 f0       	push   $0xf0139dec
f011e13a:	68 df 03 00 00       	push   $0x3df
f011e13f:	68 d2 99 13 f0       	push   $0xf01399d2
f011e144:	e8 67 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e149:	e8 36 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e14e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e151:	74 17                	je     f011e16a <test_kmalloc_firstfit2+0x846>
f011e153:	83 ec 04             	sub    $0x4,%esp
f011e156:	68 ec 99 13 f0       	push   $0xf01399ec
f011e15b:	68 e0 03 00 00       	push   $0x3e0
f011e160:	68 d2 99 13 f0       	push   $0xf01399d2
f011e165:	e8 46 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e16a:	e8 57 e8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e16f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e172:	29 c2                	sub    %eax,%edx
f011e174:	89 d0                	mov    %edx,%eax
f011e176:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e17b:	74 17                	je     f011e194 <test_kmalloc_firstfit2+0x870>
f011e17d:	83 ec 04             	sub    $0x4,%esp
f011e180:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011e185:	68 e1 03 00 00       	push   $0x3e1
f011e18a:	68 d2 99 13 f0       	push   $0xf01399d2
f011e18f:	e8 1c 20 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e194:	e8 2d e8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e19c:	e8 e3 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e1a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011e1a4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e1aa:	83 ec 0c             	sub    $0xc,%esp
f011e1ad:	50                   	push   %eax
f011e1ae:	e8 c6 9d fe ff       	call   f0107f79 <kfree>
f011e1b3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1b6:	e8 c9 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e1bb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e1be:	74 17                	je     f011e1d7 <test_kmalloc_firstfit2+0x8b3>
f011e1c0:	83 ec 04             	sub    $0x4,%esp
f011e1c3:	68 ec 99 13 f0       	push   $0xf01399ec
f011e1c8:	68 e7 03 00 00       	push   $0x3e7
f011e1cd:	68 d2 99 13 f0       	push   $0xf01399d2
f011e1d2:	e8 d9 1f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e1d7:	e8 ea e7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e1dc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e1df:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e1e4:	74 17                	je     f011e1fd <test_kmalloc_firstfit2+0x8d9>
f011e1e6:	83 ec 04             	sub    $0x4,%esp
f011e1e9:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011e1ee:	68 e8 03 00 00       	push   $0x3e8
f011e1f3:	68 d2 99 13 f0       	push   $0xf01399d2
f011e1f8:	e8 b3 1f fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e1fd:	e8 c4 e7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e202:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e205:	e8 7a 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e20a:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011e20d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e213:	83 ec 0c             	sub    $0xc,%esp
f011e216:	50                   	push   %eax
f011e217:	e8 5d 9d fe ff       	call   f0107f79 <kfree>
f011e21c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e21f:	e8 a2 e7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e224:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e227:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e22c:	74 17                	je     f011e245 <test_kmalloc_firstfit2+0x921>
f011e22e:	83 ec 04             	sub    $0x4,%esp
f011e231:	68 2f 9e 13 f0       	push   $0xf0139e2f
f011e236:	68 ee 03 00 00       	push   $0x3ee
f011e23b:	68 d2 99 13 f0       	push   $0xf01399d2
f011e240:	e8 6b 1f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e245:	e8 3a 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e24a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e24d:	74 17                	je     f011e266 <test_kmalloc_firstfit2+0x942>
f011e24f:	83 ec 04             	sub    $0x4,%esp
f011e252:	68 ec 99 13 f0       	push   $0xf01399ec
f011e257:	68 ef 03 00 00       	push   $0x3ef
f011e25c:	68 d2 99 13 f0       	push   $0xf01399d2
f011e261:	e8 4a 1f fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e266:	e8 5b e7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e26b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e26e:	e8 11 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e273:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e276:	83 ec 0c             	sub    $0xc,%esp
f011e279:	68 00 fc 4f 00       	push   $0x4ffc00
f011e27e:	e8 dc 9c fe ff       	call   f0107f5f <kmalloc>
f011e283:	83 c4 10             	add    $0x10,%esp
f011e286:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e28c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e292:	89 c1                	mov    %eax,%ecx
f011e294:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e29b:	10 00 00 
f011e29e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e2a3:	0f b6 d0             	movzbl %al,%edx
f011e2a6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e2ac:	01 d0                	add    %edx,%eax
f011e2ae:	48                   	dec    %eax
f011e2af:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e2b5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e2bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2c0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e2c6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e2cc:	29 d0                	sub    %edx,%eax
f011e2ce:	89 c3                	mov    %eax,%ebx
f011e2d0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e2d7:	10 00 00 
f011e2da:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e2df:	0f b6 c0             	movzbl %al,%eax
f011e2e2:	c1 e0 04             	shl    $0x4,%eax
f011e2e5:	89 c2                	mov    %eax,%edx
f011e2e7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e2ed:	01 d0                	add    %edx,%eax
f011e2ef:	48                   	dec    %eax
f011e2f0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e2f6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e2fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e301:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e307:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e30d:	29 d0                	sub    %edx,%eax
f011e30f:	01 d8                	add    %ebx,%eax
f011e311:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e316:	39 c1                	cmp    %eax,%ecx
f011e318:	74 17                	je     f011e331 <test_kmalloc_firstfit2+0xa0d>
f011e31a:	83 ec 04             	sub    $0x4,%esp
f011e31d:	68 ec 9d 13 f0       	push   $0xf0139dec
f011e322:	68 f5 03 00 00       	push   $0x3f5
f011e327:	68 d2 99 13 f0       	push   $0xf01399d2
f011e32c:	e8 7f 1e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e331:	e8 4e 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e336:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e339:	74 17                	je     f011e352 <test_kmalloc_firstfit2+0xa2e>
f011e33b:	83 ec 04             	sub    $0x4,%esp
f011e33e:	68 ec 99 13 f0       	push   $0xf01399ec
f011e343:	68 f6 03 00 00       	push   $0x3f6
f011e348:	68 d2 99 13 f0       	push   $0xf01399d2
f011e34d:	e8 5e 1e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e352:	e8 6f e6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e357:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e35a:	29 c2                	sub    %eax,%edx
f011e35c:	89 d0                	mov    %edx,%eax
f011e35e:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e363:	74 17                	je     f011e37c <test_kmalloc_firstfit2+0xa58>
f011e365:	83 ec 04             	sub    $0x4,%esp
f011e368:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011e36d:	68 f7 03 00 00       	push   $0x3f7
f011e372:	68 d2 99 13 f0       	push   $0xf01399d2
f011e377:	e8 34 1e fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e37c:	e8 45 e6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e381:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e384:	e8 fb 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e389:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e38c:	83 ec 0c             	sub    $0xc,%esp
f011e38f:	68 00 fc 2f 00       	push   $0x2ffc00
f011e394:	e8 c6 9b fe ff       	call   f0107f5f <kmalloc>
f011e399:	83 c4 10             	add    $0x10,%esp
f011e39c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e3a2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e3a8:	89 c1                	mov    %eax,%ecx
f011e3aa:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e3b1:	10 00 00 
f011e3b4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e3b9:	0f b6 d0             	movzbl %al,%edx
f011e3bc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e3c2:	01 d0                	add    %edx,%eax
f011e3c4:	48                   	dec    %eax
f011e3c5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e3cb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e3d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3d6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e3dc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e3e2:	29 d0                	sub    %edx,%eax
f011e3e4:	89 c3                	mov    %eax,%ebx
f011e3e6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e3ed:	10 00 00 
f011e3f0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e3f5:	0f b6 c0             	movzbl %al,%eax
f011e3f8:	c1 e0 04             	shl    $0x4,%eax
f011e3fb:	89 c2                	mov    %eax,%edx
f011e3fd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e403:	01 d0                	add    %edx,%eax
f011e405:	48                   	dec    %eax
f011e406:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e40c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e412:	ba 00 00 00 00       	mov    $0x0,%edx
f011e417:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e41d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e423:	29 d0                	sub    %edx,%eax
f011e425:	01 d8                	add    %ebx,%eax
f011e427:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e42c:	39 c1                	cmp    %eax,%ecx
f011e42e:	74 17                	je     f011e447 <test_kmalloc_firstfit2+0xb23>
f011e430:	83 ec 04             	sub    $0x4,%esp
f011e433:	68 ec 9d 13 f0       	push   $0xf0139dec
f011e438:	68 05 04 00 00       	push   $0x405
f011e43d:	68 d2 99 13 f0       	push   $0xf01399d2
f011e442:	e8 69 1d fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e447:	e8 38 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e44c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e44f:	74 17                	je     f011e468 <test_kmalloc_firstfit2+0xb44>
f011e451:	83 ec 04             	sub    $0x4,%esp
f011e454:	68 ec 99 13 f0       	push   $0xf01399ec
f011e459:	68 06 04 00 00       	push   $0x406
f011e45e:	68 d2 99 13 f0       	push   $0xf01399d2
f011e463:	e8 48 1d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e468:	e8 59 e5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e46d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e470:	29 c2                	sub    %eax,%edx
f011e472:	89 d0                	mov    %edx,%eax
f011e474:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e479:	74 17                	je     f011e492 <test_kmalloc_firstfit2+0xb6e>
f011e47b:	83 ec 04             	sub    $0x4,%esp
f011e47e:	68 1c 9e 13 f0       	push   $0xf0139e1c
f011e483:	68 07 04 00 00       	push   $0x407
f011e488:	68 d2 99 13 f0       	push   $0xf01399d2
f011e48d:	e8 1e 1d fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e492:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e499:	10 00 00 
f011e49c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e4a1:	0f b6 d0             	movzbl %al,%edx
f011e4a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e4aa:	01 d0                	add    %edx,%eax
f011e4ac:	48                   	dec    %eax
f011e4ad:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e4b3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e4b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4be:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e4c4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e4ca:	29 d0                	sub    %edx,%eax
f011e4cc:	89 c1                	mov    %eax,%ecx
f011e4ce:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e4d5:	10 00 00 
f011e4d8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e4dd:	0f b6 c0             	movzbl %al,%eax
f011e4e0:	c1 e0 04             	shl    $0x4,%eax
f011e4e3:	89 c2                	mov    %eax,%edx
f011e4e5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e4eb:	01 d0                	add    %edx,%eax
f011e4ed:	48                   	dec    %eax
f011e4ee:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e4f4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e4fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4ff:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e505:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e50b:	29 d0                	sub    %edx,%eax
f011e50d:	01 c8                	add    %ecx,%eax
f011e50f:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e514:	29 c2                	sub    %eax,%edx
f011e516:	89 d0                	mov    %edx,%eax
f011e518:	83 ec 0c             	sub    $0xc,%esp
f011e51b:	50                   	push   %eax
f011e51c:	e8 3e 9a fe ff       	call   f0107f5f <kmalloc>
f011e521:	83 c4 10             	add    $0x10,%esp
f011e524:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e52a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e530:	85 c0                	test   %eax,%eax
f011e532:	74 17                	je     f011e54b <test_kmalloc_firstfit2+0xc27>
f011e534:	83 ec 04             	sub    $0x4,%esp
f011e537:	68 1c 9f 13 f0       	push   $0xf0139f1c
f011e53c:	68 0d 04 00 00       	push   $0x40d
f011e541:	68 d2 99 13 f0       	push   $0xf01399d2
f011e546:	e8 65 1c fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e54b:	83 ec 0c             	sub    $0xc,%esp
f011e54e:	68 5c a0 13 f0       	push   $0xf013a05c
f011e553:	e8 d9 28 fe ff       	call   f0100e31 <cprintf>
f011e558:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e55b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e560:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e563:	5b                   	pop    %ebx
f011e564:	5f                   	pop    %edi
f011e565:	5d                   	pop    %ebp
f011e566:	c3                   	ret    

f011e567 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e567:	55                   	push   %ebp
f011e568:	89 e5                	mov    %esp,%ebp
f011e56a:	57                   	push   %edi
f011e56b:	53                   	push   %ebx
f011e56c:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e572:	83 ec 0c             	sub    $0xc,%esp
f011e575:	68 14 99 13 f0       	push   $0xf0139914
f011e57a:	e8 b2 28 fe ff       	call   f0100e31 <cprintf>
f011e57f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e582:	83 ec 0c             	sub    $0xc,%esp
f011e585:	68 44 99 13 f0       	push   $0xf0139944
f011e58a:	e8 a2 28 fe ff       	call   f0100e31 <cprintf>
f011e58f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e592:	83 ec 0c             	sub    $0xc,%esp
f011e595:	68 14 99 13 f0       	push   $0xf0139914
f011e59a:	e8 92 28 fe ff       	call   f0100e31 <cprintf>
f011e59f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e5a2:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e5a8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e5ad:	b8 00 00 00 00       	mov    $0x0,%eax
f011e5b2:	89 d7                	mov    %edx,%edi
f011e5b4:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e5b6:	e8 0b e4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e5bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e5be:	e8 c1 60 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e5c3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e5c6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e5cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e5d4:	eb 1f                	jmp    f011e5f5 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e5d6:	83 ec 0c             	sub    $0xc,%esp
f011e5d9:	68 00 00 20 00       	push   $0x200000
f011e5de:	e8 7c 99 fe ff       	call   f0107f5f <kmalloc>
f011e5e3:	83 c4 10             	add    $0x10,%esp
f011e5e6:	89 c2                	mov    %eax,%edx
f011e5e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e5eb:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e5f2:	ff 45 f4             	incl   -0xc(%ebp)
f011e5f5:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e5f9:	7e db                	jle    f011e5d6 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e5fb:	83 ec 0c             	sub    $0xc,%esp
f011e5fe:	68 00 b0 1f 00       	push   $0x1fb000
f011e603:	e8 57 99 fe ff       	call   f0107f5f <kmalloc>
f011e608:	83 c4 10             	add    $0x10,%esp
f011e60b:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e611:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e617:	89 c1                	mov    %eax,%ecx
f011e619:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e620:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e625:	0f b6 d0             	movzbl %al,%edx
f011e628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e62b:	01 d0                	add    %edx,%eax
f011e62d:	48                   	dec    %eax
f011e62e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e631:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e634:	ba 00 00 00 00       	mov    $0x0,%edx
f011e639:	f7 75 e4             	divl   -0x1c(%ebp)
f011e63c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e63f:	29 d0                	sub    %edx,%eax
f011e641:	89 c3                	mov    %eax,%ebx
f011e643:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e64a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e64f:	0f b6 c0             	movzbl %al,%eax
f011e652:	c1 e0 04             	shl    $0x4,%eax
f011e655:	89 c2                	mov    %eax,%edx
f011e657:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e65a:	01 d0                	add    %edx,%eax
f011e65c:	48                   	dec    %eax
f011e65d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e660:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e663:	ba 00 00 00 00       	mov    $0x0,%edx
f011e668:	f7 75 dc             	divl   -0x24(%ebp)
f011e66b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e66e:	29 d0                	sub    %edx,%eax
f011e670:	01 d8                	add    %ebx,%eax
f011e672:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e677:	39 c1                	cmp    %eax,%ecx
f011e679:	0f 85 34 03 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e67f:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e685:	89 c1                	mov    %eax,%ecx
f011e687:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e68e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e693:	0f b6 d0             	movzbl %al,%edx
f011e696:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e699:	01 d0                	add    %edx,%eax
f011e69b:	48                   	dec    %eax
f011e69c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e69f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e6a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6a7:	f7 75 d4             	divl   -0x2c(%ebp)
f011e6aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e6ad:	29 d0                	sub    %edx,%eax
f011e6af:	89 c3                	mov    %eax,%ebx
f011e6b1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e6b8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e6bd:	0f b6 c0             	movzbl %al,%eax
f011e6c0:	c1 e0 04             	shl    $0x4,%eax
f011e6c3:	89 c2                	mov    %eax,%edx
f011e6c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e6c8:	01 d0                	add    %edx,%eax
f011e6ca:	48                   	dec    %eax
f011e6cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e6ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e6d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6d6:	f7 75 cc             	divl   -0x34(%ebp)
f011e6d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e6dc:	29 d0                	sub    %edx,%eax
f011e6de:	01 d8                	add    %ebx,%eax
f011e6e0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e6e5:	39 c1                	cmp    %eax,%ecx
f011e6e7:	0f 85 c6 02 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e6ed:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e6f3:	89 c1                	mov    %eax,%ecx
f011e6f5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e6fc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e701:	0f b6 d0             	movzbl %al,%edx
f011e704:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e707:	01 d0                	add    %edx,%eax
f011e709:	48                   	dec    %eax
f011e70a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e70d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e710:	ba 00 00 00 00       	mov    $0x0,%edx
f011e715:	f7 75 c4             	divl   -0x3c(%ebp)
f011e718:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e71b:	29 d0                	sub    %edx,%eax
f011e71d:	89 c3                	mov    %eax,%ebx
f011e71f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e726:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e72b:	0f b6 c0             	movzbl %al,%eax
f011e72e:	c1 e0 04             	shl    $0x4,%eax
f011e731:	89 c2                	mov    %eax,%edx
f011e733:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e736:	01 d0                	add    %edx,%eax
f011e738:	48                   	dec    %eax
f011e739:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e73c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e73f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e744:	f7 75 bc             	divl   -0x44(%ebp)
f011e747:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e74a:	29 d0                	sub    %edx,%eax
f011e74c:	01 d8                	add    %ebx,%eax
f011e74e:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e753:	39 c1                	cmp    %eax,%ecx
f011e755:	0f 85 58 02 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e75b:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e761:	89 c1                	mov    %eax,%ecx
f011e763:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e76a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e76f:	0f b6 d0             	movzbl %al,%edx
f011e772:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e775:	01 d0                	add    %edx,%eax
f011e777:	48                   	dec    %eax
f011e778:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e77b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e77e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e783:	f7 75 b4             	divl   -0x4c(%ebp)
f011e786:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e789:	29 d0                	sub    %edx,%eax
f011e78b:	89 c3                	mov    %eax,%ebx
f011e78d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e794:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e799:	0f b6 c0             	movzbl %al,%eax
f011e79c:	c1 e0 04             	shl    $0x4,%eax
f011e79f:	89 c2                	mov    %eax,%edx
f011e7a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e7a4:	01 d0                	add    %edx,%eax
f011e7a6:	48                   	dec    %eax
f011e7a7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e7aa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e7ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7b2:	f7 75 ac             	divl   -0x54(%ebp)
f011e7b5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e7b8:	29 d0                	sub    %edx,%eax
f011e7ba:	01 d8                	add    %ebx,%eax
f011e7bc:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e7c1:	39 c1                	cmp    %eax,%ecx
f011e7c3:	0f 85 ea 01 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e7c9:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e7cf:	89 c1                	mov    %eax,%ecx
f011e7d1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e7d8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e7dd:	0f b6 d0             	movzbl %al,%edx
f011e7e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e7e3:	01 d0                	add    %edx,%eax
f011e7e5:	48                   	dec    %eax
f011e7e6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e7e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e7ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7f1:	f7 75 a4             	divl   -0x5c(%ebp)
f011e7f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e7f7:	29 d0                	sub    %edx,%eax
f011e7f9:	89 c3                	mov    %eax,%ebx
f011e7fb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e802:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e807:	0f b6 c0             	movzbl %al,%eax
f011e80a:	c1 e0 04             	shl    $0x4,%eax
f011e80d:	89 c2                	mov    %eax,%edx
f011e80f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e812:	01 d0                	add    %edx,%eax
f011e814:	48                   	dec    %eax
f011e815:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e818:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e81b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e820:	f7 75 9c             	divl   -0x64(%ebp)
f011e823:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e826:	29 d0                	sub    %edx,%eax
f011e828:	01 d8                	add    %ebx,%eax
f011e82a:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e82f:	39 c1                	cmp    %eax,%ecx
f011e831:	0f 85 7c 01 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e837:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e83d:	89 c1                	mov    %eax,%ecx
f011e83f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e846:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e84b:	0f b6 d0             	movzbl %al,%edx
f011e84e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e851:	01 d0                	add    %edx,%eax
f011e853:	48                   	dec    %eax
f011e854:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e857:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e85a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e85f:	f7 75 94             	divl   -0x6c(%ebp)
f011e862:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e865:	29 d0                	sub    %edx,%eax
f011e867:	89 c3                	mov    %eax,%ebx
f011e869:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e870:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e875:	0f b6 c0             	movzbl %al,%eax
f011e878:	c1 e0 04             	shl    $0x4,%eax
f011e87b:	89 c2                	mov    %eax,%edx
f011e87d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e880:	01 d0                	add    %edx,%eax
f011e882:	48                   	dec    %eax
f011e883:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e886:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e889:	ba 00 00 00 00       	mov    $0x0,%edx
f011e88e:	f7 75 8c             	divl   -0x74(%ebp)
f011e891:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e894:	29 d0                	sub    %edx,%eax
f011e896:	01 d8                	add    %ebx,%eax
f011e898:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e89d:	39 c1                	cmp    %eax,%ecx
f011e89f:	0f 85 0e 01 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e8a5:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e8ab:	89 c1                	mov    %eax,%ecx
f011e8ad:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e8b4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e8b9:	0f b6 d0             	movzbl %al,%edx
f011e8bc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e8bf:	01 d0                	add    %edx,%eax
f011e8c1:	48                   	dec    %eax
f011e8c2:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e8c5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8cd:	f7 75 84             	divl   -0x7c(%ebp)
f011e8d0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e8d3:	29 d0                	sub    %edx,%eax
f011e8d5:	89 c3                	mov    %eax,%ebx
f011e8d7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e8de:	10 00 00 
f011e8e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e8e6:	0f b6 c0             	movzbl %al,%eax
f011e8e9:	c1 e0 04             	shl    $0x4,%eax
f011e8ec:	89 c2                	mov    %eax,%edx
f011e8ee:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e8f4:	01 d0                	add    %edx,%eax
f011e8f6:	48                   	dec    %eax
f011e8f7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e8fd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e903:	ba 00 00 00 00       	mov    $0x0,%edx
f011e908:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e90e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e914:	29 d0                	sub    %edx,%eax
f011e916:	01 d8                	add    %ebx,%eax
f011e918:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e91d:	39 c1                	cmp    %eax,%ecx
f011e91f:	0f 85 8e 00 00 00    	jne    f011e9b3 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e925:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e92b:	89 c1                	mov    %eax,%ecx
f011e92d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e934:	10 00 00 
f011e937:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e93c:	0f b6 d0             	movzbl %al,%edx
f011e93f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e945:	01 d0                	add    %edx,%eax
f011e947:	48                   	dec    %eax
f011e948:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e94e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e954:	ba 00 00 00 00       	mov    $0x0,%edx
f011e959:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e95f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e965:	29 d0                	sub    %edx,%eax
f011e967:	89 c3                	mov    %eax,%ebx
f011e969:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e970:	10 00 00 
f011e973:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e978:	0f b6 c0             	movzbl %al,%eax
f011e97b:	c1 e0 04             	shl    $0x4,%eax
f011e97e:	89 c2                	mov    %eax,%edx
f011e980:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e986:	01 d0                	add    %edx,%eax
f011e988:	48                   	dec    %eax
f011e989:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e98f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e995:	ba 00 00 00 00       	mov    $0x0,%edx
f011e99a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e9a0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e9a6:	29 d0                	sub    %edx,%eax
f011e9a8:	01 d8                	add    %ebx,%eax
f011e9aa:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e9af:	39 c1                	cmp    %eax,%ecx
f011e9b1:	74 17                	je     f011e9ca <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e9b3:	83 ec 04             	sub    $0x4,%esp
f011e9b6:	68 a8 a0 13 f0       	push   $0xf013a0a8
f011e9bb:	68 31 04 00 00       	push   $0x431
f011e9c0:	68 d2 99 13 f0       	push   $0xf01399d2
f011e9c5:	e8 e6 17 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9ca:	e8 b5 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e9cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e9d2:	74 17                	je     f011e9eb <test_kmalloc_worstfit+0x484>
f011e9d4:	83 ec 04             	sub    $0x4,%esp
f011e9d7:	68 ec 99 13 f0       	push   $0xf01399ec
f011e9dc:	68 33 04 00 00       	push   $0x433
f011e9e1:	68 d2 99 13 f0       	push   $0xf01399d2
f011e9e6:	e8 c5 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e9eb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e9ee:	e8 d3 df fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e9f3:	29 c3                	sub    %eax,%ebx
f011e9f5:	89 d8                	mov    %ebx,%eax
f011e9f7:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e9fc:	74 17                	je     f011ea15 <test_kmalloc_worstfit+0x4ae>
f011e9fe:	83 ec 04             	sub    $0x4,%esp
f011ea01:	68 8f 9c 13 f0       	push   $0xf0139c8f
f011ea06:	68 34 04 00 00       	push   $0x434
f011ea0b:	68 d2 99 13 f0       	push   $0xf01399d2
f011ea10:	e8 9b 17 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011ea15:	e8 ac df fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ea1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011ea1d:	e8 62 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ea22:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011ea25:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011ea2b:	83 ec 0c             	sub    $0xc,%esp
f011ea2e:	50                   	push   %eax
f011ea2f:	e8 45 95 fe ff       	call   f0107f79 <kfree>
f011ea34:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011ea37:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011ea3d:	83 ec 0c             	sub    $0xc,%esp
f011ea40:	50                   	push   %eax
f011ea41:	e8 33 95 fe ff       	call   f0107f79 <kfree>
f011ea46:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011ea49:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011ea4f:	83 ec 0c             	sub    $0xc,%esp
f011ea52:	50                   	push   %eax
f011ea53:	e8 21 95 fe ff       	call   f0107f79 <kfree>
f011ea58:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011ea5b:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011ea61:	83 ec 0c             	sub    $0xc,%esp
f011ea64:	50                   	push   %eax
f011ea65:	e8 0f 95 fe ff       	call   f0107f79 <kfree>
f011ea6a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011ea6d:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011ea73:	83 ec 0c             	sub    $0xc,%esp
f011ea76:	50                   	push   %eax
f011ea77:	e8 fd 94 fe ff       	call   f0107f79 <kfree>
f011ea7c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011ea7f:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011ea85:	83 ec 0c             	sub    $0xc,%esp
f011ea88:	50                   	push   %eax
f011ea89:	e8 eb 94 fe ff       	call   f0107f79 <kfree>
f011ea8e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011ea91:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011ea97:	83 ec 0c             	sub    $0xc,%esp
f011ea9a:	50                   	push   %eax
f011ea9b:	e8 d9 94 fe ff       	call   f0107f79 <kfree>
f011eaa0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011eaa3:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011eaa9:	83 ec 0c             	sub    $0xc,%esp
f011eaac:	50                   	push   %eax
f011eaad:	e8 c7 94 fe ff       	call   f0107f79 <kfree>
f011eab2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011eab5:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011eabb:	83 ec 0c             	sub    $0xc,%esp
f011eabe:	50                   	push   %eax
f011eabf:	e8 b5 94 fe ff       	call   f0107f79 <kfree>
f011eac4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011eac7:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011eacd:	83 ec 0c             	sub    $0xc,%esp
f011ead0:	50                   	push   %eax
f011ead1:	e8 a3 94 fe ff       	call   f0107f79 <kfree>
f011ead6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011ead9:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011eadf:	83 ec 0c             	sub    $0xc,%esp
f011eae2:	50                   	push   %eax
f011eae3:	e8 91 94 fe ff       	call   f0107f79 <kfree>
f011eae8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011eaeb:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011eaf1:	83 ec 0c             	sub    $0xc,%esp
f011eaf4:	50                   	push   %eax
f011eaf5:	e8 7f 94 fe ff       	call   f0107f79 <kfree>
f011eafa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011eafd:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011eb03:	83 ec 0c             	sub    $0xc,%esp
f011eb06:	50                   	push   %eax
f011eb07:	e8 6d 94 fe ff       	call   f0107f79 <kfree>
f011eb0c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011eb0f:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011eb15:	83 ec 0c             	sub    $0xc,%esp
f011eb18:	50                   	push   %eax
f011eb19:	e8 5b 94 fe ff       	call   f0107f79 <kfree>
f011eb1e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011eb21:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011eb27:	83 ec 0c             	sub    $0xc,%esp
f011eb2a:	50                   	push   %eax
f011eb2b:	e8 49 94 fe ff       	call   f0107f79 <kfree>
f011eb30:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb33:	e8 4c 5b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eb38:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb3b:	74 17                	je     f011eb54 <test_kmalloc_worstfit+0x5ed>
f011eb3d:	83 ec 04             	sub    $0x4,%esp
f011eb40:	68 ec 99 13 f0       	push   $0xf01399ec
f011eb45:	68 4a 04 00 00       	push   $0x44a
f011eb4a:	68 d2 99 13 f0       	push   $0xf01399d2
f011eb4f:	e8 5c 16 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011eb54:	e8 6d de fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eb59:	89 c2                	mov    %eax,%edx
f011eb5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011eb5e:	29 c2                	sub    %eax,%edx
f011eb60:	89 d0                	mov    %edx,%eax
f011eb62:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011eb67:	74 17                	je     f011eb80 <test_kmalloc_worstfit+0x619>
f011eb69:	83 ec 04             	sub    $0x4,%esp
f011eb6c:	68 a0 9c 13 f0       	push   $0xf0139ca0
f011eb71:	68 4b 04 00 00       	push   $0x44b
f011eb76:	68 d2 99 13 f0       	push   $0xf01399d2
f011eb7b:	e8 30 16 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011eb80:	e8 41 de fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eb85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eb88:	e8 f7 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eb8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011eb90:	83 ec 0c             	sub    $0xc,%esp
f011eb93:	68 00 00 10 00       	push   $0x100000
f011eb98:	e8 c2 93 fe ff       	call   f0107f5f <kmalloc>
f011eb9d:	83 c4 10             	add    $0x10,%esp
f011eba0:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011eba6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011ebad:	10 00 00 
f011ebb0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ebb5:	0f b6 d0             	movzbl %al,%edx
f011ebb8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ebbe:	01 d0                	add    %edx,%eax
f011ebc0:	48                   	dec    %eax
f011ebc1:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011ebc7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ebcd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebd2:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011ebd8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ebde:	29 d0                	sub    %edx,%eax
f011ebe0:	89 c1                	mov    %eax,%ecx
f011ebe2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011ebe9:	10 00 00 
f011ebec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ebf1:	0f b6 c0             	movzbl %al,%eax
f011ebf4:	c1 e0 04             	shl    $0x4,%eax
f011ebf7:	89 c2                	mov    %eax,%edx
f011ebf9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ebff:	01 d0                	add    %edx,%eax
f011ec01:	48                   	dec    %eax
f011ec02:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011ec08:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ec0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec13:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011ec19:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ec1f:	29 d0                	sub    %edx,%eax
f011ec21:	01 c8                	add    %ecx,%eax
f011ec23:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ec29:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec2f:	39 c2                	cmp    %eax,%edx
f011ec31:	74 17                	je     f011ec4a <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011ec33:	83 ec 04             	sub    $0x4,%esp
f011ec36:	68 ec a0 13 f0       	push   $0xf013a0ec
f011ec3b:	68 52 04 00 00       	push   $0x452
f011ec40:	68 d2 99 13 f0       	push   $0xf01399d2
f011ec45:	e8 66 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec4a:	e8 35 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ec4f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec52:	74 17                	je     f011ec6b <test_kmalloc_worstfit+0x704>
f011ec54:	83 ec 04             	sub    $0x4,%esp
f011ec57:	68 ec 99 13 f0       	push   $0xf01399ec
f011ec5c:	68 53 04 00 00       	push   $0x453
f011ec61:	68 d2 99 13 f0       	push   $0xf01399d2
f011ec66:	e8 45 15 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ec6b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec6e:	e8 53 dd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ec73:	29 c3                	sub    %eax,%ebx
f011ec75:	89 d8                	mov    %ebx,%eax
f011ec77:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ec7c:	74 17                	je     f011ec95 <test_kmalloc_worstfit+0x72e>
f011ec7e:	83 ec 04             	sub    $0x4,%esp
f011ec81:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011ec86:	68 54 04 00 00       	push   $0x454
f011ec8b:	68 d2 99 13 f0       	push   $0xf01399d2
f011ec90:	e8 1b 15 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec95:	ff 45 e8             	incl   -0x18(%ebp)
f011ec98:	83 ec 08             	sub    $0x8,%esp
f011ec9b:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec9e:	68 0c a1 13 f0       	push   $0xf013a10c
f011eca3:	e8 89 21 fe ff       	call   f0100e31 <cprintf>
f011eca8:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ecab:	e8 16 dd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ecb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ecb3:	e8 cc 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ecb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011ecbb:	83 ec 0c             	sub    $0xc,%esp
f011ecbe:	68 00 00 40 00       	push   $0x400000
f011ecc3:	e8 97 92 fe ff       	call   f0107f5f <kmalloc>
f011ecc8:	83 c4 10             	add    $0x10,%esp
f011eccb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011ecd1:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011ecd8:	10 00 00 
f011ecdb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ece0:	0f b6 d0             	movzbl %al,%edx
f011ece3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ece9:	01 d0                	add    %edx,%eax
f011eceb:	48                   	dec    %eax
f011ecec:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011ecf2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ecf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecfd:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011ed03:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ed09:	29 d0                	sub    %edx,%eax
f011ed0b:	89 c1                	mov    %eax,%ecx
f011ed0d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011ed14:	10 00 00 
f011ed17:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ed1c:	0f b6 c0             	movzbl %al,%eax
f011ed1f:	c1 e0 04             	shl    $0x4,%eax
f011ed22:	89 c2                	mov    %eax,%edx
f011ed24:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ed2a:	01 d0                	add    %edx,%eax
f011ed2c:	48                   	dec    %eax
f011ed2d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011ed33:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ed39:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed3e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011ed44:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ed4a:	29 d0                	sub    %edx,%eax
f011ed4c:	01 c8                	add    %ecx,%eax
f011ed4e:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011ed54:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ed5a:	39 c2                	cmp    %eax,%edx
f011ed5c:	74 17                	je     f011ed75 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011ed5e:	83 ec 04             	sub    $0x4,%esp
f011ed61:	68 ec a0 13 f0       	push   $0xf013a0ec
f011ed66:	68 5b 04 00 00       	push   $0x45b
f011ed6b:	68 d2 99 13 f0       	push   $0xf01399d2
f011ed70:	e8 3b 14 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed75:	e8 0a 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ed7a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed7d:	74 17                	je     f011ed96 <test_kmalloc_worstfit+0x82f>
f011ed7f:	83 ec 04             	sub    $0x4,%esp
f011ed82:	68 ec 99 13 f0       	push   $0xf01399ec
f011ed87:	68 5c 04 00 00       	push   $0x45c
f011ed8c:	68 d2 99 13 f0       	push   $0xf01399d2
f011ed91:	e8 1a 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed96:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed99:	e8 28 dc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ed9e:	29 c3                	sub    %eax,%ebx
f011eda0:	89 d8                	mov    %ebx,%eax
f011eda2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011eda7:	74 17                	je     f011edc0 <test_kmalloc_worstfit+0x859>
f011eda9:	83 ec 04             	sub    $0x4,%esp
f011edac:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011edb1:	68 5d 04 00 00       	push   $0x45d
f011edb6:	68 d2 99 13 f0       	push   $0xf01399d2
f011edbb:	e8 f0 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011edc0:	ff 45 e8             	incl   -0x18(%ebp)
f011edc3:	83 ec 08             	sub    $0x8,%esp
f011edc6:	ff 75 e8             	pushl  -0x18(%ebp)
f011edc9:	68 0c a1 13 f0       	push   $0xf013a10c
f011edce:	e8 5e 20 fe ff       	call   f0100e31 <cprintf>
f011edd3:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011edd6:	e8 eb db fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eddb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edde:	e8 a1 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ede3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ede6:	83 ec 0c             	sub    $0xc,%esp
f011ede9:	68 00 00 60 00       	push   $0x600000
f011edee:	e8 6c 91 fe ff       	call   f0107f5f <kmalloc>
f011edf3:	83 c4 10             	add    $0x10,%esp
f011edf6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011edfc:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011ee03:	10 00 00 
f011ee06:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ee0b:	0f b6 d0             	movzbl %al,%edx
f011ee0e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ee14:	01 d0                	add    %edx,%eax
f011ee16:	48                   	dec    %eax
f011ee17:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011ee1d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ee23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee28:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011ee2e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ee34:	29 d0                	sub    %edx,%eax
f011ee36:	89 c1                	mov    %eax,%ecx
f011ee38:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011ee3f:	10 00 00 
f011ee42:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ee47:	0f b6 c0             	movzbl %al,%eax
f011ee4a:	c1 e0 04             	shl    $0x4,%eax
f011ee4d:	89 c2                	mov    %eax,%edx
f011ee4f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ee55:	01 d0                	add    %edx,%eax
f011ee57:	48                   	dec    %eax
f011ee58:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011ee5e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ee64:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee69:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011ee6f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ee75:	29 d0                	sub    %edx,%eax
f011ee77:	01 c8                	add    %ecx,%eax
f011ee79:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ee7f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ee85:	39 c2                	cmp    %eax,%edx
f011ee87:	74 17                	je     f011eea0 <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011ee89:	83 ec 04             	sub    $0x4,%esp
f011ee8c:	68 ec a0 13 f0       	push   $0xf013a0ec
f011ee91:	68 64 04 00 00       	push   $0x464
f011ee96:	68 d2 99 13 f0       	push   $0xf01399d2
f011ee9b:	e8 10 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eea0:	e8 df 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eea5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eea8:	74 17                	je     f011eec1 <test_kmalloc_worstfit+0x95a>
f011eeaa:	83 ec 04             	sub    $0x4,%esp
f011eead:	68 ec 99 13 f0       	push   $0xf01399ec
f011eeb2:	68 65 04 00 00       	push   $0x465
f011eeb7:	68 d2 99 13 f0       	push   $0xf01399d2
f011eebc:	e8 ef 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eec1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eec4:	e8 fd da fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eec9:	29 c3                	sub    %eax,%ebx
f011eecb:	89 d8                	mov    %ebx,%eax
f011eecd:	3d 00 06 00 00       	cmp    $0x600,%eax
f011eed2:	74 17                	je     f011eeeb <test_kmalloc_worstfit+0x984>
f011eed4:	83 ec 04             	sub    $0x4,%esp
f011eed7:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011eedc:	68 66 04 00 00       	push   $0x466
f011eee1:	68 d2 99 13 f0       	push   $0xf01399d2
f011eee6:	e8 c5 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eeeb:	ff 45 e8             	incl   -0x18(%ebp)
f011eeee:	83 ec 08             	sub    $0x8,%esp
f011eef1:	ff 75 e8             	pushl  -0x18(%ebp)
f011eef4:	68 0c a1 13 f0       	push   $0xf013a10c
f011eef9:	e8 33 1f fe ff       	call   f0100e31 <cprintf>
f011eefe:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef01:	e8 c0 da fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ef06:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef09:	e8 76 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ef0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ef11:	83 ec 0c             	sub    $0xc,%esp
f011ef14:	68 00 00 50 00       	push   $0x500000
f011ef19:	e8 41 90 fe ff       	call   f0107f5f <kmalloc>
f011ef1e:	83 c4 10             	add    $0x10,%esp
f011ef21:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ef27:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011ef2e:	10 00 00 
f011ef31:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ef36:	0f b6 d0             	movzbl %al,%edx
f011ef39:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ef3f:	01 d0                	add    %edx,%eax
f011ef41:	48                   	dec    %eax
f011ef42:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011ef48:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ef4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef53:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011ef59:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ef5f:	29 d0                	sub    %edx,%eax
f011ef61:	89 c1                	mov    %eax,%ecx
f011ef63:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011ef6a:	10 00 00 
f011ef6d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ef72:	0f b6 c0             	movzbl %al,%eax
f011ef75:	c1 e0 04             	shl    $0x4,%eax
f011ef78:	89 c2                	mov    %eax,%edx
f011ef7a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ef80:	01 d0                	add    %edx,%eax
f011ef82:	48                   	dec    %eax
f011ef83:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011ef89:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ef8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef94:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011ef9a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efa0:	29 d0                	sub    %edx,%eax
f011efa2:	01 c8                	add    %ecx,%eax
f011efa4:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011efaa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011efb0:	39 c2                	cmp    %eax,%edx
f011efb2:	74 17                	je     f011efcb <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011efb4:	83 ec 04             	sub    $0x4,%esp
f011efb7:	68 ec a0 13 f0       	push   $0xf013a0ec
f011efbc:	68 6d 04 00 00       	push   $0x46d
f011efc1:	68 d2 99 13 f0       	push   $0xf01399d2
f011efc6:	e8 e5 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efcb:	e8 b4 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011efd0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efd3:	74 17                	je     f011efec <test_kmalloc_worstfit+0xa85>
f011efd5:	83 ec 04             	sub    $0x4,%esp
f011efd8:	68 ec 99 13 f0       	push   $0xf01399ec
f011efdd:	68 6e 04 00 00       	push   $0x46e
f011efe2:	68 d2 99 13 f0       	push   $0xf01399d2
f011efe7:	e8 c4 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011efec:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011efef:	e8 d2 d9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eff4:	29 c3                	sub    %eax,%ebx
f011eff6:	89 d8                	mov    %ebx,%eax
f011eff8:	3d 00 05 00 00       	cmp    $0x500,%eax
f011effd:	74 17                	je     f011f016 <test_kmalloc_worstfit+0xaaf>
f011efff:	83 ec 04             	sub    $0x4,%esp
f011f002:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f007:	68 6f 04 00 00       	push   $0x46f
f011f00c:	68 d2 99 13 f0       	push   $0xf01399d2
f011f011:	e8 9a 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f016:	ff 45 e8             	incl   -0x18(%ebp)
f011f019:	83 ec 08             	sub    $0x8,%esp
f011f01c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f01f:	68 0c a1 13 f0       	push   $0xf013a10c
f011f024:	e8 08 1e fe ff       	call   f0100e31 <cprintf>
f011f029:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f02c:	e8 95 d9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f031:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f034:	e8 4b 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f039:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f03c:	83 ec 0c             	sub    $0xc,%esp
f011f03f:	68 00 00 40 00       	push   $0x400000
f011f044:	e8 16 8f fe ff       	call   f0107f5f <kmalloc>
f011f049:	83 c4 10             	add    $0x10,%esp
f011f04c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f052:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f059:	10 00 00 
f011f05c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f061:	0f b6 d0             	movzbl %al,%edx
f011f064:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f06a:	01 d0                	add    %edx,%eax
f011f06c:	48                   	dec    %eax
f011f06d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f073:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f079:	ba 00 00 00 00       	mov    $0x0,%edx
f011f07e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f084:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f08a:	29 d0                	sub    %edx,%eax
f011f08c:	89 c1                	mov    %eax,%ecx
f011f08e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f095:	10 00 00 
f011f098:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f09d:	0f b6 c0             	movzbl %al,%eax
f011f0a0:	c1 e0 04             	shl    $0x4,%eax
f011f0a3:	89 c2                	mov    %eax,%edx
f011f0a5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f0ab:	01 d0                	add    %edx,%eax
f011f0ad:	48                   	dec    %eax
f011f0ae:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f0b4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f0ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0bf:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f0c5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f0cb:	29 d0                	sub    %edx,%eax
f011f0cd:	01 c8                	add    %ecx,%eax
f011f0cf:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f0d5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f0db:	39 c2                	cmp    %eax,%edx
f011f0dd:	74 17                	je     f011f0f6 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011f0df:	83 ec 04             	sub    $0x4,%esp
f011f0e2:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f0e7:	68 76 04 00 00       	push   $0x476
f011f0ec:	68 d2 99 13 f0       	push   $0xf01399d2
f011f0f1:	e8 ba 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f0f6:	e8 89 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f0fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f0fe:	74 17                	je     f011f117 <test_kmalloc_worstfit+0xbb0>
f011f100:	83 ec 04             	sub    $0x4,%esp
f011f103:	68 ec 99 13 f0       	push   $0xf01399ec
f011f108:	68 77 04 00 00       	push   $0x477
f011f10d:	68 d2 99 13 f0       	push   $0xf01399d2
f011f112:	e8 99 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f117:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f11a:	e8 a7 d8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f11f:	29 c3                	sub    %eax,%ebx
f011f121:	89 d8                	mov    %ebx,%eax
f011f123:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f128:	74 17                	je     f011f141 <test_kmalloc_worstfit+0xbda>
f011f12a:	83 ec 04             	sub    $0x4,%esp
f011f12d:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f132:	68 78 04 00 00       	push   $0x478
f011f137:	68 d2 99 13 f0       	push   $0xf01399d2
f011f13c:	e8 6f 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f141:	ff 45 e8             	incl   -0x18(%ebp)
f011f144:	83 ec 08             	sub    $0x8,%esp
f011f147:	ff 75 e8             	pushl  -0x18(%ebp)
f011f14a:	68 0c a1 13 f0       	push   $0xf013a10c
f011f14f:	e8 dd 1c fe ff       	call   f0100e31 <cprintf>
f011f154:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f157:	e8 6a d8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f15c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f15f:	e8 20 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f164:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f167:	83 ec 0c             	sub    $0xc,%esp
f011f16a:	68 00 00 20 00       	push   $0x200000
f011f16f:	e8 eb 8d fe ff       	call   f0107f5f <kmalloc>
f011f174:	83 c4 10             	add    $0x10,%esp
f011f177:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f17d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f184:	10 00 00 
f011f187:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f18c:	0f b6 d0             	movzbl %al,%edx
f011f18f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f195:	01 d0                	add    %edx,%eax
f011f197:	48                   	dec    %eax
f011f198:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f19e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f1a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1a9:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f1af:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f1b5:	29 d0                	sub    %edx,%eax
f011f1b7:	89 c1                	mov    %eax,%ecx
f011f1b9:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f1c0:	10 00 00 
f011f1c3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f1c8:	0f b6 c0             	movzbl %al,%eax
f011f1cb:	c1 e0 04             	shl    $0x4,%eax
f011f1ce:	89 c2                	mov    %eax,%edx
f011f1d0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f1d6:	01 d0                	add    %edx,%eax
f011f1d8:	48                   	dec    %eax
f011f1d9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f1df:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f1e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1ea:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f1f0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f1f6:	29 d0                	sub    %edx,%eax
f011f1f8:	01 c8                	add    %ecx,%eax
f011f1fa:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f200:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f206:	39 c2                	cmp    %eax,%edx
f011f208:	74 17                	je     f011f221 <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011f20a:	83 ec 04             	sub    $0x4,%esp
f011f20d:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f212:	68 7f 04 00 00       	push   $0x47f
f011f217:	68 d2 99 13 f0       	push   $0xf01399d2
f011f21c:	e8 8f 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f221:	e8 5e 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f226:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f229:	74 17                	je     f011f242 <test_kmalloc_worstfit+0xcdb>
f011f22b:	83 ec 04             	sub    $0x4,%esp
f011f22e:	68 ec 99 13 f0       	push   $0xf01399ec
f011f233:	68 80 04 00 00       	push   $0x480
f011f238:	68 d2 99 13 f0       	push   $0xf01399d2
f011f23d:	e8 6e 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f242:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f245:	e8 7c d7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f24a:	29 c3                	sub    %eax,%ebx
f011f24c:	89 d8                	mov    %ebx,%eax
f011f24e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f253:	74 17                	je     f011f26c <test_kmalloc_worstfit+0xd05>
f011f255:	83 ec 04             	sub    $0x4,%esp
f011f258:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f25d:	68 81 04 00 00       	push   $0x481
f011f262:	68 d2 99 13 f0       	push   $0xf01399d2
f011f267:	e8 44 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f26c:	ff 45 e8             	incl   -0x18(%ebp)
f011f26f:	83 ec 08             	sub    $0x8,%esp
f011f272:	ff 75 e8             	pushl  -0x18(%ebp)
f011f275:	68 0c a1 13 f0       	push   $0xf013a10c
f011f27a:	e8 b2 1b fe ff       	call   f0100e31 <cprintf>
f011f27f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f282:	e8 3f d7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f287:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f28a:	e8 f5 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f28f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f292:	83 ec 0c             	sub    $0xc,%esp
f011f295:	68 00 00 18 00       	push   $0x180000
f011f29a:	e8 c0 8c fe ff       	call   f0107f5f <kmalloc>
f011f29f:	83 c4 10             	add    $0x10,%esp
f011f2a2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f2a8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f2af:	10 00 00 
f011f2b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f2b7:	0f b6 d0             	movzbl %al,%edx
f011f2ba:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f2c0:	01 d0                	add    %edx,%eax
f011f2c2:	48                   	dec    %eax
f011f2c3:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f2c9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f2cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2d4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f2da:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f2e0:	29 d0                	sub    %edx,%eax
f011f2e2:	89 c1                	mov    %eax,%ecx
f011f2e4:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f2eb:	10 00 00 
f011f2ee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f2f3:	0f b6 c0             	movzbl %al,%eax
f011f2f6:	c1 e0 04             	shl    $0x4,%eax
f011f2f9:	89 c2                	mov    %eax,%edx
f011f2fb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f301:	01 d0                	add    %edx,%eax
f011f303:	48                   	dec    %eax
f011f304:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f30a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f310:	ba 00 00 00 00       	mov    $0x0,%edx
f011f315:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f31b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f321:	29 d0                	sub    %edx,%eax
f011f323:	01 c8                	add    %ecx,%eax
f011f325:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f32b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f331:	39 c2                	cmp    %eax,%edx
f011f333:	74 17                	je     f011f34c <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f335:	83 ec 04             	sub    $0x4,%esp
f011f338:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f33d:	68 88 04 00 00       	push   $0x488
f011f342:	68 d2 99 13 f0       	push   $0xf01399d2
f011f347:	e8 64 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f34c:	e8 33 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f351:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f354:	74 17                	je     f011f36d <test_kmalloc_worstfit+0xe06>
f011f356:	83 ec 04             	sub    $0x4,%esp
f011f359:	68 ec 99 13 f0       	push   $0xf01399ec
f011f35e:	68 89 04 00 00       	push   $0x489
f011f363:	68 d2 99 13 f0       	push   $0xf01399d2
f011f368:	e8 43 0e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f36d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f370:	e8 51 d6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f375:	29 c3                	sub    %eax,%ebx
f011f377:	89 d8                	mov    %ebx,%eax
f011f379:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f37e:	74 17                	je     f011f397 <test_kmalloc_worstfit+0xe30>
f011f380:	83 ec 04             	sub    $0x4,%esp
f011f383:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f388:	68 8a 04 00 00       	push   $0x48a
f011f38d:	68 d2 99 13 f0       	push   $0xf01399d2
f011f392:	e8 19 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f397:	ff 45 e8             	incl   -0x18(%ebp)
f011f39a:	83 ec 08             	sub    $0x8,%esp
f011f39d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f3a0:	68 0c a1 13 f0       	push   $0xf013a10c
f011f3a5:	e8 87 1a fe ff       	call   f0100e31 <cprintf>
f011f3aa:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f3ad:	e8 14 d6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f3b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f3b5:	e8 ca 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f3ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f3bd:	83 ec 0c             	sub    $0xc,%esp
f011f3c0:	68 00 00 08 00       	push   $0x80000
f011f3c5:	e8 95 8b fe ff       	call   f0107f5f <kmalloc>
f011f3ca:	83 c4 10             	add    $0x10,%esp
f011f3cd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f3d3:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f3da:	10 00 00 
f011f3dd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f3e2:	0f b6 d0             	movzbl %al,%edx
f011f3e5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f3eb:	01 d0                	add    %edx,%eax
f011f3ed:	48                   	dec    %eax
f011f3ee:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f3f4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f3fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3ff:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f405:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f40b:	29 d0                	sub    %edx,%eax
f011f40d:	89 c1                	mov    %eax,%ecx
f011f40f:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f416:	10 00 00 
f011f419:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f41e:	0f b6 c0             	movzbl %al,%eax
f011f421:	c1 e0 04             	shl    $0x4,%eax
f011f424:	89 c2                	mov    %eax,%edx
f011f426:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f42c:	01 d0                	add    %edx,%eax
f011f42e:	48                   	dec    %eax
f011f42f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f435:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f43b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f440:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f446:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f44c:	29 d0                	sub    %edx,%eax
f011f44e:	01 c8                	add    %ecx,%eax
f011f450:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f456:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f45c:	39 c2                	cmp    %eax,%edx
f011f45e:	74 17                	je     f011f477 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f460:	83 ec 04             	sub    $0x4,%esp
f011f463:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f468:	68 91 04 00 00       	push   $0x491
f011f46d:	68 d2 99 13 f0       	push   $0xf01399d2
f011f472:	e8 39 0d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f477:	e8 08 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f47c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f47f:	74 17                	je     f011f498 <test_kmalloc_worstfit+0xf31>
f011f481:	83 ec 04             	sub    $0x4,%esp
f011f484:	68 ec 99 13 f0       	push   $0xf01399ec
f011f489:	68 92 04 00 00       	push   $0x492
f011f48e:	68 d2 99 13 f0       	push   $0xf01399d2
f011f493:	e8 18 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f498:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f49b:	e8 26 d5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f4a0:	29 c3                	sub    %eax,%ebx
f011f4a2:	89 d8                	mov    %ebx,%eax
f011f4a4:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f4a9:	74 17                	je     f011f4c2 <test_kmalloc_worstfit+0xf5b>
f011f4ab:	83 ec 04             	sub    $0x4,%esp
f011f4ae:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f4b3:	68 93 04 00 00       	push   $0x493
f011f4b8:	68 d2 99 13 f0       	push   $0xf01399d2
f011f4bd:	e8 ee 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f4c2:	ff 45 e8             	incl   -0x18(%ebp)
f011f4c5:	83 ec 08             	sub    $0x8,%esp
f011f4c8:	ff 75 e8             	pushl  -0x18(%ebp)
f011f4cb:	68 0c a1 13 f0       	push   $0xf013a10c
f011f4d0:	e8 5c 19 fe ff       	call   f0100e31 <cprintf>
f011f4d5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f4d8:	e8 e9 d4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f4dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4e0:	e8 9f 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f4e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f4e8:	83 ec 0c             	sub    $0xc,%esp
f011f4eb:	68 00 04 00 00       	push   $0x400
f011f4f0:	e8 6a 8a fe ff       	call   f0107f5f <kmalloc>
f011f4f5:	83 c4 10             	add    $0x10,%esp
f011f4f8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f4fe:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f505:	10 00 00 
f011f508:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f50d:	0f b6 d0             	movzbl %al,%edx
f011f510:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f516:	01 d0                	add    %edx,%eax
f011f518:	48                   	dec    %eax
f011f519:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f51f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f525:	ba 00 00 00 00       	mov    $0x0,%edx
f011f52a:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f530:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f536:	29 d0                	sub    %edx,%eax
f011f538:	89 c1                	mov    %eax,%ecx
f011f53a:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f541:	10 00 00 
f011f544:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f549:	0f b6 c0             	movzbl %al,%eax
f011f54c:	c1 e0 04             	shl    $0x4,%eax
f011f54f:	89 c2                	mov    %eax,%edx
f011f551:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f557:	01 d0                	add    %edx,%eax
f011f559:	48                   	dec    %eax
f011f55a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f560:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f566:	ba 00 00 00 00       	mov    $0x0,%edx
f011f56b:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f571:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f577:	29 d0                	sub    %edx,%eax
f011f579:	01 c8                	add    %ecx,%eax
f011f57b:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f581:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f587:	39 c2                	cmp    %eax,%edx
f011f589:	74 17                	je     f011f5a2 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f58b:	83 ec 04             	sub    $0x4,%esp
f011f58e:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f593:	68 9a 04 00 00       	push   $0x49a
f011f598:	68 d2 99 13 f0       	push   $0xf01399d2
f011f59d:	e8 0e 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5a2:	e8 dd 50 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f5a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5aa:	74 17                	je     f011f5c3 <test_kmalloc_worstfit+0x105c>
f011f5ac:	83 ec 04             	sub    $0x4,%esp
f011f5af:	68 ec 99 13 f0       	push   $0xf01399ec
f011f5b4:	68 9b 04 00 00       	push   $0x49b
f011f5b9:	68 d2 99 13 f0       	push   $0xf01399d2
f011f5be:	e8 ed 0b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f5c3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5c6:	e8 fb d3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f5cb:	29 c3                	sub    %eax,%ebx
f011f5cd:	89 d8                	mov    %ebx,%eax
f011f5cf:	83 f8 01             	cmp    $0x1,%eax
f011f5d2:	74 17                	je     f011f5eb <test_kmalloc_worstfit+0x1084>
f011f5d4:	83 ec 04             	sub    $0x4,%esp
f011f5d7:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f5dc:	68 9c 04 00 00       	push   $0x49c
f011f5e1:	68 d2 99 13 f0       	push   $0xf01399d2
f011f5e6:	e8 c5 0b fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5eb:	ff 45 e8             	incl   -0x18(%ebp)
f011f5ee:	83 ec 08             	sub    $0x8,%esp
f011f5f1:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5f4:	68 0c a1 13 f0       	push   $0xf013a10c
f011f5f9:	e8 33 18 fe ff       	call   f0100e31 <cprintf>
f011f5fe:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f601:	e8 c0 d3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f606:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f609:	e8 76 50 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f60e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f611:	83 ec 0c             	sub    $0xc,%esp
f011f614:	68 00 f0 1f 00       	push   $0x1ff000
f011f619:	e8 41 89 fe ff       	call   f0107f5f <kmalloc>
f011f61e:	83 c4 10             	add    $0x10,%esp
f011f621:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f627:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f62e:	10 00 00 
f011f631:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f636:	0f b6 d0             	movzbl %al,%edx
f011f639:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f63f:	01 d0                	add    %edx,%eax
f011f641:	48                   	dec    %eax
f011f642:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f648:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f64e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f653:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f659:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f65f:	29 d0                	sub    %edx,%eax
f011f661:	89 c1                	mov    %eax,%ecx
f011f663:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f66a:	10 00 00 
f011f66d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f672:	0f b6 c0             	movzbl %al,%eax
f011f675:	c1 e0 04             	shl    $0x4,%eax
f011f678:	89 c2                	mov    %eax,%edx
f011f67a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f680:	01 d0                	add    %edx,%eax
f011f682:	48                   	dec    %eax
f011f683:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f689:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f68f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f694:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f69a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f6a0:	29 d0                	sub    %edx,%eax
f011f6a2:	01 c8                	add    %ecx,%eax
f011f6a4:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f6aa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f6b0:	39 c2                	cmp    %eax,%edx
f011f6b2:	74 17                	je     f011f6cb <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f6b4:	83 ec 04             	sub    $0x4,%esp
f011f6b7:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f6bc:	68 a3 04 00 00       	push   $0x4a3
f011f6c1:	68 d2 99 13 f0       	push   $0xf01399d2
f011f6c6:	e8 e5 0a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6cb:	e8 b4 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f6d0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6d3:	74 17                	je     f011f6ec <test_kmalloc_worstfit+0x1185>
f011f6d5:	83 ec 04             	sub    $0x4,%esp
f011f6d8:	68 ec 99 13 f0       	push   $0xf01399ec
f011f6dd:	68 a4 04 00 00       	push   $0x4a4
f011f6e2:	68 d2 99 13 f0       	push   $0xf01399d2
f011f6e7:	e8 c4 0a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f6ec:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f6ef:	e8 d2 d2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f6f4:	29 c3                	sub    %eax,%ebx
f011f6f6:	89 d8                	mov    %ebx,%eax
f011f6f8:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f6fd:	74 17                	je     f011f716 <test_kmalloc_worstfit+0x11af>
f011f6ff:	83 ec 04             	sub    $0x4,%esp
f011f702:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f707:	68 a5 04 00 00       	push   $0x4a5
f011f70c:	68 d2 99 13 f0       	push   $0xf01399d2
f011f711:	e8 9a 0a fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f716:	ff 45 e8             	incl   -0x18(%ebp)
f011f719:	83 ec 08             	sub    $0x8,%esp
f011f71c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f71f:	68 0c a1 13 f0       	push   $0xf013a10c
f011f724:	e8 08 17 fe ff       	call   f0100e31 <cprintf>
f011f729:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f72c:	e8 95 d2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f731:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f734:	e8 4b 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f739:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f73c:	83 ec 0c             	sub    $0xc,%esp
f011f73f:	68 00 00 40 00       	push   $0x400000
f011f744:	e8 16 88 fe ff       	call   f0107f5f <kmalloc>
f011f749:	83 c4 10             	add    $0x10,%esp
f011f74c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f752:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f758:	85 c0                	test   %eax,%eax
f011f75a:	74 17                	je     f011f773 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f75c:	83 ec 04             	sub    $0x4,%esp
f011f75f:	68 ec a0 13 f0       	push   $0xf013a0ec
f011f764:	68 ad 04 00 00       	push   $0x4ad
f011f769:	68 d2 99 13 f0       	push   $0xf01399d2
f011f76e:	e8 3d 0a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f773:	e8 0c 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f778:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f77b:	74 17                	je     f011f794 <test_kmalloc_worstfit+0x122d>
f011f77d:	83 ec 04             	sub    $0x4,%esp
f011f780:	68 ec 99 13 f0       	push   $0xf01399ec
f011f785:	68 ae 04 00 00       	push   $0x4ae
f011f78a:	68 d2 99 13 f0       	push   $0xf01399d2
f011f78f:	e8 1c 0a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f794:	e8 2d d2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f799:	89 c2                	mov    %eax,%edx
f011f79b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f79e:	39 c2                	cmp    %eax,%edx
f011f7a0:	74 17                	je     f011f7b9 <test_kmalloc_worstfit+0x1252>
f011f7a2:	83 ec 04             	sub    $0x4,%esp
f011f7a5:	68 0a 9f 13 f0       	push   $0xf0139f0a
f011f7aa:	68 af 04 00 00       	push   $0x4af
f011f7af:	68 d2 99 13 f0       	push   $0xf01399d2
f011f7b4:	e8 f7 09 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f7b9:	ff 45 e8             	incl   -0x18(%ebp)
f011f7bc:	83 ec 08             	sub    $0x8,%esp
f011f7bf:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7c2:	68 0c a1 13 f0       	push   $0xf013a10c
f011f7c7:	e8 65 16 fe ff       	call   f0100e31 <cprintf>
f011f7cc:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f7cf:	83 ec 0c             	sub    $0xc,%esp
f011f7d2:	68 20 a1 13 f0       	push   $0xf013a120
f011f7d7:	e8 55 16 fe ff       	call   f0100e31 <cprintf>
f011f7dc:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f7df:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f7e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f7e7:	5b                   	pop    %ebx
f011f7e8:	5f                   	pop    %edi
f011f7e9:	5d                   	pop    %ebp
f011f7ea:	c3                   	ret    

f011f7eb <test_kfree>:

int test_kfree()
{
f011f7eb:	55                   	push   %ebp
f011f7ec:	89 e5                	mov    %esp,%ebp
f011f7ee:	57                   	push   %edi
f011f7ef:	53                   	push   %ebx
f011f7f0:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f7f6:	83 ec 0c             	sub    $0xc,%esp
f011f7f9:	68 14 99 13 f0       	push   $0xf0139914
f011f7fe:	e8 2e 16 fe ff       	call   f0100e31 <cprintf>
f011f803:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f806:	83 ec 0c             	sub    $0xc,%esp
f011f809:	68 44 99 13 f0       	push   $0xf0139944
f011f80e:	e8 1e 16 fe ff       	call   f0100e31 <cprintf>
f011f813:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f816:	83 ec 0c             	sub    $0xc,%esp
f011f819:	68 14 99 13 f0       	push   $0xf0139914
f011f81e:	e8 0e 16 fe ff       	call   f0100e31 <cprintf>
f011f823:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f826:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f82a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f82e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f834:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f83a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f841:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f848:	e8 79 d1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f84d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f850:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f856:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f85b:	b8 00 00 00 00       	mov    $0x0,%eax
f011f860:	89 d7                	mov    %edx,%edi
f011f862:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f864:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f86a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f86f:	b8 00 00 00 00       	mov    $0x0,%eax
f011f874:	89 d7                	mov    %edx,%edi
f011f876:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f878:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f87e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f883:	b8 00 00 00 00       	mov    $0x0,%eax
f011f888:	89 d7                	mov    %edx,%edi
f011f88a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f88c:	e8 35 d1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f891:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f894:	e8 eb 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f899:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f89c:	83 ec 0c             	sub    $0xc,%esp
f011f89f:	68 00 fc 1f 00       	push   $0x1ffc00
f011f8a4:	e8 b6 86 fe ff       	call   f0107f5f <kmalloc>
f011f8a9:	83 c4 10             	add    $0x10,%esp
f011f8ac:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8b2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f8b8:	89 c1                	mov    %eax,%ecx
f011f8ba:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f8c1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f8c6:	0f b6 d0             	movzbl %al,%edx
f011f8c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f8cc:	01 d0                	add    %edx,%eax
f011f8ce:	48                   	dec    %eax
f011f8cf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f8d2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f8d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8da:	f7 75 c8             	divl   -0x38(%ebp)
f011f8dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f8e0:	29 d0                	sub    %edx,%eax
f011f8e2:	89 c3                	mov    %eax,%ebx
f011f8e4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f8eb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f8f0:	0f b6 c0             	movzbl %al,%eax
f011f8f3:	c1 e0 04             	shl    $0x4,%eax
f011f8f6:	89 c2                	mov    %eax,%edx
f011f8f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f8fb:	01 d0                	add    %edx,%eax
f011f8fd:	48                   	dec    %eax
f011f8fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f901:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f904:	ba 00 00 00 00       	mov    $0x0,%edx
f011f909:	f7 75 c0             	divl   -0x40(%ebp)
f011f90c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f90f:	29 d0                	sub    %edx,%eax
f011f911:	01 d8                	add    %ebx,%eax
f011f913:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f918:	39 c1                	cmp    %eax,%ecx
f011f91a:	74 17                	je     f011f933 <test_kfree+0x148>
f011f91c:	83 ec 04             	sub    $0x4,%esp
f011f91f:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011f924:	68 d7 04 00 00       	push   $0x4d7
f011f929:	68 d2 99 13 f0       	push   $0xf01399d2
f011f92e:	e8 7d 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f933:	e8 4c 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f938:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f93b:	74 17                	je     f011f954 <test_kfree+0x169>
f011f93d:	83 ec 04             	sub    $0x4,%esp
f011f940:	68 ec 99 13 f0       	push   $0xf01399ec
f011f945:	68 d8 04 00 00       	push   $0x4d8
f011f94a:	68 d2 99 13 f0       	push   $0xf01399d2
f011f94f:	e8 5c 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f954:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f957:	e8 6a d0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f95c:	29 c3                	sub    %eax,%ebx
f011f95e:	89 d8                	mov    %ebx,%eax
f011f960:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f965:	74 17                	je     f011f97e <test_kfree+0x193>
f011f967:	83 ec 04             	sub    $0x4,%esp
f011f96a:	68 54 9a 13 f0       	push   $0xf0139a54
f011f96f:	68 d9 04 00 00       	push   $0x4d9
f011f974:	68 d2 99 13 f0       	push   $0xf01399d2
f011f979:	e8 32 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f97e:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f985:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f988:	e8 39 d0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f98d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f990:	e8 ef 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f995:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f998:	83 ec 0c             	sub    $0xc,%esp
f011f99b:	68 00 fc 1f 00       	push   $0x1ffc00
f011f9a0:	e8 ba 85 fe ff       	call   f0107f5f <kmalloc>
f011f9a5:	83 c4 10             	add    $0x10,%esp
f011f9a8:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9ae:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f9b4:	89 c1                	mov    %eax,%ecx
f011f9b6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f9bd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f9c2:	0f b6 d0             	movzbl %al,%edx
f011f9c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f9c8:	01 d0                	add    %edx,%eax
f011f9ca:	48                   	dec    %eax
f011f9cb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f9ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f9d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9d6:	f7 75 b8             	divl   -0x48(%ebp)
f011f9d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f9dc:	29 d0                	sub    %edx,%eax
f011f9de:	89 c3                	mov    %eax,%ebx
f011f9e0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f9e7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f9ec:	0f b6 c0             	movzbl %al,%eax
f011f9ef:	c1 e0 04             	shl    $0x4,%eax
f011f9f2:	89 c2                	mov    %eax,%edx
f011f9f4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f9f7:	01 d0                	add    %edx,%eax
f011f9f9:	48                   	dec    %eax
f011f9fa:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f9fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fa00:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa05:	f7 75 b0             	divl   -0x50(%ebp)
f011fa08:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fa0b:	29 d0                	sub    %edx,%eax
f011fa0d:	01 d8                	add    %ebx,%eax
f011fa0f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fa14:	39 c1                	cmp    %eax,%ecx
f011fa16:	74 17                	je     f011fa2f <test_kfree+0x244>
f011fa18:	83 ec 04             	sub    $0x4,%esp
f011fa1b:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011fa20:	68 e0 04 00 00       	push   $0x4e0
f011fa25:	68 d2 99 13 f0       	push   $0xf01399d2
f011fa2a:	e8 81 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa2f:	e8 50 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa34:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa37:	74 17                	je     f011fa50 <test_kfree+0x265>
f011fa39:	83 ec 04             	sub    $0x4,%esp
f011fa3c:	68 ec 99 13 f0       	push   $0xf01399ec
f011fa41:	68 e1 04 00 00       	push   $0x4e1
f011fa46:	68 d2 99 13 f0       	push   $0xf01399d2
f011fa4b:	e8 60 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa50:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa53:	e8 6e cf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fa58:	29 c3                	sub    %eax,%ebx
f011fa5a:	89 d8                	mov    %ebx,%eax
f011fa5c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fa61:	74 17                	je     f011fa7a <test_kfree+0x28f>
f011fa63:	83 ec 04             	sub    $0x4,%esp
f011fa66:	68 54 9a 13 f0       	push   $0xf0139a54
f011fa6b:	68 e2 04 00 00       	push   $0x4e2
f011fa70:	68 d2 99 13 f0       	push   $0xf01399d2
f011fa75:	e8 36 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fa7a:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011fa81:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fa84:	e8 3d cf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fa89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa8c:	e8 f3 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa91:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fa94:	83 ec 0c             	sub    $0xc,%esp
f011fa97:	68 00 08 00 00       	push   $0x800
f011fa9c:	e8 be 84 fe ff       	call   f0107f5f <kmalloc>
f011faa1:	83 c4 10             	add    $0x10,%esp
f011faa4:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011faaa:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fab0:	89 c1                	mov    %eax,%ecx
f011fab2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011fab9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fabe:	0f b6 d0             	movzbl %al,%edx
f011fac1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fac4:	01 d0                	add    %edx,%eax
f011fac6:	48                   	dec    %eax
f011fac7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011faca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011facd:	ba 00 00 00 00       	mov    $0x0,%edx
f011fad2:	f7 75 a8             	divl   -0x58(%ebp)
f011fad5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fad8:	29 d0                	sub    %edx,%eax
f011fada:	89 c3                	mov    %eax,%ebx
f011fadc:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011fae3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fae8:	0f b6 c0             	movzbl %al,%eax
f011faeb:	c1 e0 04             	shl    $0x4,%eax
f011faee:	89 c2                	mov    %eax,%edx
f011faf0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011faf3:	01 d0                	add    %edx,%eax
f011faf5:	48                   	dec    %eax
f011faf6:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011faf9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fafc:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb01:	f7 75 a0             	divl   -0x60(%ebp)
f011fb04:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fb07:	29 d0                	sub    %edx,%eax
f011fb09:	01 d8                	add    %ebx,%eax
f011fb0b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fb10:	39 c1                	cmp    %eax,%ecx
f011fb12:	74 17                	je     f011fb2b <test_kfree+0x340>
f011fb14:	83 ec 04             	sub    $0x4,%esp
f011fb17:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011fb1c:	68 e9 04 00 00       	push   $0x4e9
f011fb21:	68 d2 99 13 f0       	push   $0xf01399d2
f011fb26:	e8 85 06 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb2b:	e8 54 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fb30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb33:	74 17                	je     f011fb4c <test_kfree+0x361>
f011fb35:	83 ec 04             	sub    $0x4,%esp
f011fb38:	68 ec 99 13 f0       	push   $0xf01399ec
f011fb3d:	68 ea 04 00 00       	push   $0x4ea
f011fb42:	68 d2 99 13 f0       	push   $0xf01399d2
f011fb47:	e8 64 06 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb4c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fb4f:	e8 72 ce fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fb54:	29 c3                	sub    %eax,%ebx
f011fb56:	89 d8                	mov    %ebx,%eax
f011fb58:	83 f8 01             	cmp    $0x1,%eax
f011fb5b:	74 17                	je     f011fb74 <test_kfree+0x389>
f011fb5d:	83 ec 04             	sub    $0x4,%esp
f011fb60:	68 54 9a 13 f0       	push   $0xf0139a54
f011fb65:	68 eb 04 00 00       	push   $0x4eb
f011fb6a:	68 d2 99 13 f0       	push   $0xf01399d2
f011fb6f:	e8 3c 06 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fb74:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011fb7b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fb7e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fb84:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fb87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fb8e:	eb 0e                	jmp    f011fb9e <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011fb90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fb93:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fb96:	01 d0                	add    %edx,%eax
f011fb98:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fb9b:	ff 45 f4             	incl   -0xc(%ebp)
f011fb9e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fba4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fba7:	7f e7                	jg     f011fb90 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fba9:	e8 18 ce fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fbae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fbb1:	e8 ce 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fbb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011fbb9:	83 ec 0c             	sub    $0xc,%esp
f011fbbc:	68 00 08 00 00       	push   $0x800
f011fbc1:	e8 99 83 fe ff       	call   f0107f5f <kmalloc>
f011fbc6:	83 c4 10             	add    $0x10,%esp
f011fbc9:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fbcf:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fbd5:	89 c1                	mov    %eax,%ecx
f011fbd7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011fbde:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fbe3:	0f b6 d0             	movzbl %al,%edx
f011fbe6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fbe9:	01 d0                	add    %edx,%eax
f011fbeb:	48                   	dec    %eax
f011fbec:	89 45 90             	mov    %eax,-0x70(%ebp)
f011fbef:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fbf2:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbf7:	f7 75 94             	divl   -0x6c(%ebp)
f011fbfa:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fbfd:	29 d0                	sub    %edx,%eax
f011fbff:	89 c3                	mov    %eax,%ebx
f011fc01:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011fc08:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fc0d:	0f b6 c0             	movzbl %al,%eax
f011fc10:	c1 e0 04             	shl    $0x4,%eax
f011fc13:	89 c2                	mov    %eax,%edx
f011fc15:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fc18:	01 d0                	add    %edx,%eax
f011fc1a:	48                   	dec    %eax
f011fc1b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011fc1e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fc21:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc26:	f7 75 8c             	divl   -0x74(%ebp)
f011fc29:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fc2c:	29 d0                	sub    %edx,%eax
f011fc2e:	01 d8                	add    %ebx,%eax
f011fc30:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fc35:	39 c1                	cmp    %eax,%ecx
f011fc37:	74 17                	je     f011fc50 <test_kfree+0x465>
f011fc39:	83 ec 04             	sub    $0x4,%esp
f011fc3c:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011fc41:	68 f7 04 00 00       	push   $0x4f7
f011fc46:	68 d2 99 13 f0       	push   $0xf01399d2
f011fc4b:	e8 60 05 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc50:	e8 2f 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fc55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fc58:	74 17                	je     f011fc71 <test_kfree+0x486>
f011fc5a:	83 ec 04             	sub    $0x4,%esp
f011fc5d:	68 ec 99 13 f0       	push   $0xf01399ec
f011fc62:	68 f8 04 00 00       	push   $0x4f8
f011fc67:	68 d2 99 13 f0       	push   $0xf01399d2
f011fc6c:	e8 3f 05 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc71:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc74:	e8 4d cd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fc79:	29 c3                	sub    %eax,%ebx
f011fc7b:	89 d8                	mov    %ebx,%eax
f011fc7d:	83 f8 01             	cmp    $0x1,%eax
f011fc80:	74 17                	je     f011fc99 <test_kfree+0x4ae>
f011fc82:	83 ec 04             	sub    $0x4,%esp
f011fc85:	68 54 9a 13 f0       	push   $0xf0139a54
f011fc8a:	68 f9 04 00 00       	push   $0x4f9
f011fc8f:	68 d2 99 13 f0       	push   $0xf01399d2
f011fc94:	e8 17 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fc99:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011fca0:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fca3:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fca9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fcac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fcb3:	eb 0e                	jmp    f011fcc3 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011fcb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fcb8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fcbb:	01 d0                	add    %edx,%eax
f011fcbd:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fcc0:	ff 45 f4             	incl   -0xc(%ebp)
f011fcc3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fcc9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fccc:	7f e7                	jg     f011fcb5 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fcce:	e8 f3 cc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fcd3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fcd6:	e8 a9 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fcdb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fcde:	83 ec 0c             	sub    $0xc,%esp
f011fce1:	68 00 1c 00 00       	push   $0x1c00
f011fce6:	e8 74 82 fe ff       	call   f0107f5f <kmalloc>
f011fceb:	83 c4 10             	add    $0x10,%esp
f011fcee:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fcf4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fcfa:	89 c1                	mov    %eax,%ecx
f011fcfc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011fd03:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fd08:	0f b6 d0             	movzbl %al,%edx
f011fd0b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fd0e:	01 d0                	add    %edx,%eax
f011fd10:	48                   	dec    %eax
f011fd11:	89 45 80             	mov    %eax,-0x80(%ebp)
f011fd14:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd17:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd1c:	f7 75 84             	divl   -0x7c(%ebp)
f011fd1f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd22:	29 d0                	sub    %edx,%eax
f011fd24:	89 c3                	mov    %eax,%ebx
f011fd26:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fd2d:	10 00 00 
f011fd30:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fd35:	0f b6 c0             	movzbl %al,%eax
f011fd38:	c1 e0 04             	shl    $0x4,%eax
f011fd3b:	89 c2                	mov    %eax,%edx
f011fd3d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fd43:	01 d0                	add    %edx,%eax
f011fd45:	48                   	dec    %eax
f011fd46:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fd4c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fd52:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd57:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fd5d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fd63:	29 d0                	sub    %edx,%eax
f011fd65:	01 d8                	add    %ebx,%eax
f011fd67:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fd6c:	39 c1                	cmp    %eax,%ecx
f011fd6e:	74 17                	je     f011fd87 <test_kfree+0x59c>
f011fd70:	83 ec 04             	sub    $0x4,%esp
f011fd73:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011fd78:	68 05 05 00 00       	push   $0x505
f011fd7d:	68 d2 99 13 f0       	push   $0xf01399d2
f011fd82:	e8 29 04 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd87:	e8 f8 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fd8c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd8f:	74 17                	je     f011fda8 <test_kfree+0x5bd>
f011fd91:	83 ec 04             	sub    $0x4,%esp
f011fd94:	68 ec 99 13 f0       	push   $0xf01399ec
f011fd99:	68 06 05 00 00       	push   $0x506
f011fd9e:	68 d2 99 13 f0       	push   $0xf01399d2
f011fda3:	e8 08 04 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fda8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fdab:	e8 16 cc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fdb0:	29 c3                	sub    %eax,%ebx
f011fdb2:	89 d8                	mov    %ebx,%eax
f011fdb4:	83 f8 02             	cmp    $0x2,%eax
f011fdb7:	74 17                	je     f011fdd0 <test_kfree+0x5e5>
f011fdb9:	83 ec 04             	sub    $0x4,%esp
f011fdbc:	68 54 9a 13 f0       	push   $0xf0139a54
f011fdc1:	68 07 05 00 00       	push   $0x507
f011fdc6:	68 d2 99 13 f0       	push   $0xf01399d2
f011fdcb:	e8 e0 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fdd0:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011fdd7:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fdda:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fde0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fde3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fdea:	eb 0e                	jmp    f011fdfa <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011fdec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fdef:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fdf2:	01 d0                	add    %edx,%eax
f011fdf4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fdf7:	ff 45 f4             	incl   -0xc(%ebp)
f011fdfa:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fe00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fe03:	7f e7                	jg     f011fdec <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fe05:	e8 bc cb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fe0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe0d:	e8 72 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fe12:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fe15:	83 ec 0c             	sub    $0xc,%esp
f011fe18:	68 00 fc 2f 00       	push   $0x2ffc00
f011fe1d:	e8 3d 81 fe ff       	call   f0107f5f <kmalloc>
f011fe22:	83 c4 10             	add    $0x10,%esp
f011fe25:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe2b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fe31:	89 c1                	mov    %eax,%ecx
f011fe33:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fe3a:	10 00 00 
f011fe3d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fe42:	0f b6 d0             	movzbl %al,%edx
f011fe45:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fe4b:	01 d0                	add    %edx,%eax
f011fe4d:	48                   	dec    %eax
f011fe4e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fe54:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fe5a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe5f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fe65:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fe6b:	29 d0                	sub    %edx,%eax
f011fe6d:	89 c3                	mov    %eax,%ebx
f011fe6f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fe76:	10 00 00 
f011fe79:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fe7e:	0f b6 c0             	movzbl %al,%eax
f011fe81:	c1 e0 04             	shl    $0x4,%eax
f011fe84:	89 c2                	mov    %eax,%edx
f011fe86:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fe8c:	01 d0                	add    %edx,%eax
f011fe8e:	48                   	dec    %eax
f011fe8f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fe95:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fe9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fea0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fea6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011feac:	29 d0                	sub    %edx,%eax
f011feae:	01 d8                	add    %ebx,%eax
f011feb0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011feb5:	39 c1                	cmp    %eax,%ecx
f011feb7:	74 17                	je     f011fed0 <test_kfree+0x6e5>
f011feb9:	83 ec 04             	sub    $0x4,%esp
f011febc:	68 b8 9a 13 f0       	push   $0xf0139ab8
f011fec1:	68 13 05 00 00       	push   $0x513
f011fec6:	68 d2 99 13 f0       	push   $0xf01399d2
f011fecb:	e8 e0 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fed0:	e8 af 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fed5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fed8:	74 17                	je     f011fef1 <test_kfree+0x706>
f011feda:	83 ec 04             	sub    $0x4,%esp
f011fedd:	68 ec 99 13 f0       	push   $0xf01399ec
f011fee2:	68 14 05 00 00       	push   $0x514
f011fee7:	68 d2 99 13 f0       	push   $0xf01399d2
f011feec:	e8 bf 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fef1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fef4:	e8 cd ca fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fef9:	29 c3                	sub    %eax,%ebx
f011fefb:	89 d8                	mov    %ebx,%eax
f011fefd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ff02:	74 17                	je     f011ff1b <test_kfree+0x730>
f011ff04:	83 ec 04             	sub    $0x4,%esp
f011ff07:	68 54 9a 13 f0       	push   $0xf0139a54
f011ff0c:	68 15 05 00 00       	push   $0x515
f011ff11:	68 d2 99 13 f0       	push   $0xf01399d2
f011ff16:	e8 95 02 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011ff1b:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011ff22:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011ff25:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011ff2b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011ff2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff35:	eb 0e                	jmp    f011ff45 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011ff37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff3a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ff3d:	01 d0                	add    %edx,%eax
f011ff3f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011ff42:	ff 45 f4             	incl   -0xc(%ebp)
f011ff45:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ff4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff4e:	7f e7                	jg     f011ff37 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff50:	e8 71 ca fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ff55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff58:	e8 27 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ff5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011ff60:	83 ec 0c             	sub    $0xc,%esp
f011ff63:	68 00 fc 5f 00       	push   $0x5ffc00
f011ff68:	e8 f2 7f fe ff       	call   f0107f5f <kmalloc>
f011ff6d:	83 c4 10             	add    $0x10,%esp
f011ff70:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff76:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011ff7c:	89 c1                	mov    %eax,%ecx
f011ff7e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ff85:	10 00 00 
f011ff88:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ff8d:	0f b6 d0             	movzbl %al,%edx
f011ff90:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ff96:	01 d0                	add    %edx,%eax
f011ff98:	48                   	dec    %eax
f011ff99:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ff9f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ffa5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffaa:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ffb0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ffb6:	29 d0                	sub    %edx,%eax
f011ffb8:	89 c3                	mov    %eax,%ebx
f011ffba:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ffc1:	10 00 00 
f011ffc4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ffc9:	0f b6 c0             	movzbl %al,%eax
f011ffcc:	c1 e0 04             	shl    $0x4,%eax
f011ffcf:	89 c2                	mov    %eax,%edx
f011ffd1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ffd7:	01 d0                	add    %edx,%eax
f011ffd9:	48                   	dec    %eax
f011ffda:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ffe0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ffe6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffeb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fff1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fff7:	29 d0                	sub    %edx,%eax
f011fff9:	01 d8                	add    %ebx,%eax
f011fffb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120000:	39 c1                	cmp    %eax,%ecx
f0120002:	74 17                	je     f012001b <test_kfree+0x830>
f0120004:	83 ec 04             	sub    $0x4,%esp
f0120007:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012000c:	68 21 05 00 00       	push   $0x521
f0120011:	68 d2 99 13 f0       	push   $0xf01399d2
f0120016:	e8 95 01 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012001b:	e8 64 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120020:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120023:	74 17                	je     f012003c <test_kfree+0x851>
f0120025:	83 ec 04             	sub    $0x4,%esp
f0120028:	68 ec 99 13 f0       	push   $0xf01399ec
f012002d:	68 22 05 00 00       	push   $0x522
f0120032:	68 d2 99 13 f0       	push   $0xf01399d2
f0120037:	e8 74 01 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012003c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012003f:	e8 82 c9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120044:	29 c3                	sub    %eax,%ebx
f0120046:	89 d8                	mov    %ebx,%eax
f0120048:	3d 00 06 00 00       	cmp    $0x600,%eax
f012004d:	74 17                	je     f0120066 <test_kfree+0x87b>
f012004f:	83 ec 04             	sub    $0x4,%esp
f0120052:	68 54 9a 13 f0       	push   $0xf0139a54
f0120057:	68 23 05 00 00       	push   $0x523
f012005c:	68 d2 99 13 f0       	push   $0xf01399d2
f0120061:	e8 4a 01 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120066:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012006d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120070:	e8 51 c9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120075:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120078:	e8 07 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012007d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120080:	83 ec 0c             	sub    $0xc,%esp
f0120083:	68 00 38 00 00       	push   $0x3800
f0120088:	e8 d2 7e fe ff       	call   f0107f5f <kmalloc>
f012008d:	83 c4 10             	add    $0x10,%esp
f0120090:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120096:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012009c:	89 c1                	mov    %eax,%ecx
f012009e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01200a5:	10 00 00 
f01200a8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01200ad:	0f b6 d0             	movzbl %al,%edx
f01200b0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01200b6:	01 d0                	add    %edx,%eax
f01200b8:	48                   	dec    %eax
f01200b9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01200bf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01200c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01200ca:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01200d0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01200d6:	29 d0                	sub    %edx,%eax
f01200d8:	89 c3                	mov    %eax,%ebx
f01200da:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01200e1:	10 00 00 
f01200e4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01200e9:	0f b6 c0             	movzbl %al,%eax
f01200ec:	c1 e0 04             	shl    $0x4,%eax
f01200ef:	89 c2                	mov    %eax,%edx
f01200f1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01200f7:	01 d0                	add    %edx,%eax
f01200f9:	48                   	dec    %eax
f01200fa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120100:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120106:	ba 00 00 00 00       	mov    $0x0,%edx
f012010b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120111:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120117:	29 d0                	sub    %edx,%eax
f0120119:	01 d8                	add    %ebx,%eax
f012011b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120120:	39 c1                	cmp    %eax,%ecx
f0120122:	74 17                	je     f012013b <test_kfree+0x950>
f0120124:	83 ec 04             	sub    $0x4,%esp
f0120127:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012012c:	68 2a 05 00 00       	push   $0x52a
f0120131:	68 d2 99 13 f0       	push   $0xf01399d2
f0120136:	e8 75 00 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012013b:	e8 44 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120140:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120143:	74 17                	je     f012015c <test_kfree+0x971>
f0120145:	83 ec 04             	sub    $0x4,%esp
f0120148:	68 ec 99 13 f0       	push   $0xf01399ec
f012014d:	68 2b 05 00 00       	push   $0x52b
f0120152:	68 d2 99 13 f0       	push   $0xf01399d2
f0120157:	e8 54 00 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012015c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012015f:	e8 62 c8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120164:	29 c3                	sub    %eax,%ebx
f0120166:	89 d8                	mov    %ebx,%eax
f0120168:	83 f8 04             	cmp    $0x4,%eax
f012016b:	74 17                	je     f0120184 <test_kfree+0x999>
f012016d:	83 ec 04             	sub    $0x4,%esp
f0120170:	68 54 9a 13 f0       	push   $0xf0139a54
f0120175:	68 2c 05 00 00       	push   $0x52c
f012017a:	68 d2 99 13 f0       	push   $0xf01399d2
f012017f:	e8 2c 00 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120184:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f012018b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012018e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120194:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120197:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012019e:	eb 0e                	jmp    f01201ae <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f01201a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01201a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01201a6:	01 d0                	add    %edx,%eax
f01201a8:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01201ab:	ff 45 f4             	incl   -0xc(%ebp)
f01201ae:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01201b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01201b7:	7f e7                	jg     f01201a0 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01201b9:	e8 08 c8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01201be:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01201c4:	e8 bb 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01201c9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f01201cf:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01201d5:	83 ec 0c             	sub    $0xc,%esp
f01201d8:	50                   	push   %eax
f01201d9:	e8 9b 7d fe ff       	call   f0107f79 <kfree>
f01201de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201e1:	e8 9e 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01201e6:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01201ec:	74 17                	je     f0120205 <test_kfree+0xa1a>
f01201ee:	83 ec 04             	sub    $0x4,%esp
f01201f1:	68 ec 99 13 f0       	push   $0xf01399ec
f01201f6:	68 3b 05 00 00       	push   $0x53b
f01201fb:	68 d2 99 13 f0       	push   $0xf01399d2
f0120200:	e8 ab ff fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120205:	e8 bc c7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012020a:	89 c2                	mov    %eax,%edx
f012020c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120212:	29 c2                	sub    %eax,%edx
f0120214:	89 d0                	mov    %edx,%eax
f0120216:	3d 00 02 00 00       	cmp    $0x200,%eax
f012021b:	74 17                	je     f0120234 <test_kfree+0xa49>
f012021d:	83 ec 04             	sub    $0x4,%esp
f0120220:	68 5c a1 13 f0       	push   $0xf013a15c
f0120225:	68 3c 05 00 00       	push   $0x53c
f012022a:	68 d2 99 13 f0       	push   $0xf01399d2
f012022f:	e8 7c ff fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120234:	e8 8d c7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120239:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012023f:	e8 40 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120244:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f012024a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0120250:	83 ec 0c             	sub    $0xc,%esp
f0120253:	50                   	push   %eax
f0120254:	e8 20 7d fe ff       	call   f0107f79 <kfree>
f0120259:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012025c:	e8 23 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120261:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120267:	74 17                	je     f0120280 <test_kfree+0xa95>
f0120269:	83 ec 04             	sub    $0x4,%esp
f012026c:	68 ec 99 13 f0       	push   $0xf01399ec
f0120271:	68 42 05 00 00       	push   $0x542
f0120276:	68 d2 99 13 f0       	push   $0xf01399d2
f012027b:	e8 30 ff fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120280:	e8 41 c7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120285:	89 c2                	mov    %eax,%edx
f0120287:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012028d:	29 c2                	sub    %eax,%edx
f012028f:	89 d0                	mov    %edx,%eax
f0120291:	83 f8 01             	cmp    $0x1,%eax
f0120294:	74 17                	je     f01202ad <test_kfree+0xac2>
f0120296:	83 ec 04             	sub    $0x4,%esp
f0120299:	68 5c a1 13 f0       	push   $0xf013a15c
f012029e:	68 43 05 00 00       	push   $0x543
f01202a3:	68 d2 99 13 f0       	push   $0xf01399d2
f01202a8:	e8 03 ff fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01202ad:	e8 14 c7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01202b2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202b8:	e8 c7 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01202bd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01202c3:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01202c9:	83 ec 0c             	sub    $0xc,%esp
f01202cc:	50                   	push   %eax
f01202cd:	e8 a7 7c fe ff       	call   f0107f79 <kfree>
f01202d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01202d5:	e8 aa 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01202da:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01202e0:	74 17                	je     f01202f9 <test_kfree+0xb0e>
f01202e2:	83 ec 04             	sub    $0x4,%esp
f01202e5:	68 ec 99 13 f0       	push   $0xf01399ec
f01202ea:	68 49 05 00 00       	push   $0x549
f01202ef:	68 d2 99 13 f0       	push   $0xf01399d2
f01202f4:	e8 b7 fe fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01202f9:	e8 c8 c6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01202fe:	89 c2                	mov    %eax,%edx
f0120300:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120306:	29 c2                	sub    %eax,%edx
f0120308:	89 d0                	mov    %edx,%eax
f012030a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012030f:	74 17                	je     f0120328 <test_kfree+0xb3d>
f0120311:	83 ec 04             	sub    $0x4,%esp
f0120314:	68 5c a1 13 f0       	push   $0xf013a15c
f0120319:	68 4a 05 00 00       	push   $0x54a
f012031e:	68 d2 99 13 f0       	push   $0xf01399d2
f0120323:	e8 88 fe fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120328:	e8 99 c6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012032d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120333:	e8 4c 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120338:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f012033e:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0120344:	83 ec 0c             	sub    $0xc,%esp
f0120347:	50                   	push   %eax
f0120348:	e8 2c 7c fe ff       	call   f0107f79 <kfree>
f012034d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120350:	e8 2f 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120355:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012035b:	74 17                	je     f0120374 <test_kfree+0xb89>
f012035d:	83 ec 04             	sub    $0x4,%esp
f0120360:	68 ec 99 13 f0       	push   $0xf01399ec
f0120365:	68 50 05 00 00       	push   $0x550
f012036a:	68 d2 99 13 f0       	push   $0xf01399d2
f012036f:	e8 3c fe fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120374:	e8 4d c6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120379:	89 c2                	mov    %eax,%edx
f012037b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120381:	29 c2                	sub    %eax,%edx
f0120383:	89 d0                	mov    %edx,%eax
f0120385:	3d 00 06 00 00       	cmp    $0x600,%eax
f012038a:	74 17                	je     f01203a3 <test_kfree+0xbb8>
f012038c:	83 ec 04             	sub    $0x4,%esp
f012038f:	68 5c a1 13 f0       	push   $0xf013a15c
f0120394:	68 51 05 00 00       	push   $0x551
f0120399:	68 d2 99 13 f0       	push   $0xf01399d2
f012039e:	e8 0d fe fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01203a3:	83 ec 0c             	sub    $0xc,%esp
f01203a6:	68 94 a1 13 f0       	push   $0xf013a194
f01203ab:	e8 81 0a fe ff       	call   f0100e31 <cprintf>
f01203b0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01203b3:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01203b9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01203bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01203c3:	eb 1e                	jmp    f01203e3 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f01203c5:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01203cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01203ce:	8b 45 98             	mov    -0x68(%ebp),%eax
f01203d1:	01 c8                	add    %ecx,%eax
f01203d3:	8a 00                	mov    (%eax),%al
f01203d5:	0f be c0             	movsbl %al,%eax
f01203d8:	01 d0                	add    %edx,%eax
f01203da:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01203e0:	ff 45 f4             	incl   -0xc(%ebp)
f01203e3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01203e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01203ec:	7f d7                	jg     f01203c5 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01203ee:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01203f4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01203fa:	89 c1                	mov    %eax,%ecx
f01203fc:	01 c9                	add    %ecx,%ecx
f01203fe:	01 c8                	add    %ecx,%eax
f0120400:	39 c2                	cmp    %eax,%edx
f0120402:	74 17                	je     f012041b <test_kfree+0xc30>
f0120404:	83 ec 04             	sub    $0x4,%esp
f0120407:	68 b8 a1 13 f0       	push   $0xf013a1b8
f012040c:	68 5e 05 00 00       	push   $0x55e
f0120411:	68 d2 99 13 f0       	push   $0xf01399d2
f0120416:	e8 95 fd fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012041b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120421:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120424:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012042b:	eb 1e                	jmp    f012044b <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f012042d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0120433:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120436:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120439:	01 c8                	add    %ecx,%eax
f012043b:	8a 00                	mov    (%eax),%al
f012043d:	0f be c0             	movsbl %al,%eax
f0120440:	01 d0                	add    %edx,%eax
f0120442:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120448:	ff 45 f4             	incl   -0xc(%ebp)
f012044b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120451:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120454:	7f d7                	jg     f012042d <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120456:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012045c:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0120462:	c1 e2 02             	shl    $0x2,%edx
f0120465:	39 d0                	cmp    %edx,%eax
f0120467:	74 17                	je     f0120480 <test_kfree+0xc95>
f0120469:	83 ec 04             	sub    $0x4,%esp
f012046c:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0120471:	68 66 05 00 00       	push   $0x566
f0120476:	68 d2 99 13 f0       	push   $0xf01399d2
f012047b:	e8 30 fd fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120480:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120486:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120489:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120490:	eb 1e                	jmp    f01204b0 <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f0120492:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0120498:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012049b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012049e:	01 c8                	add    %ecx,%eax
f01204a0:	8a 00                	mov    (%eax),%al
f01204a2:	0f be c0             	movsbl %al,%eax
f01204a5:	01 d0                	add    %edx,%eax
f01204a7:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01204ad:	ff 45 f4             	incl   -0xc(%ebp)
f01204b0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01204b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204b9:	7f d7                	jg     f0120492 <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01204bb:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01204c1:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01204c7:	89 d0                	mov    %edx,%eax
f01204c9:	c1 e0 02             	shl    $0x2,%eax
f01204cc:	01 d0                	add    %edx,%eax
f01204ce:	39 c1                	cmp    %eax,%ecx
f01204d0:	74 17                	je     f01204e9 <test_kfree+0xcfe>
f01204d2:	83 ec 04             	sub    $0x4,%esp
f01204d5:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01204da:	68 6e 05 00 00       	push   $0x56e
f01204df:	68 d2 99 13 f0       	push   $0xf01399d2
f01204e4:	e8 c7 fc fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01204e9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01204ef:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01204f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204f9:	eb 1e                	jmp    f0120519 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f01204fb:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0120501:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120504:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120507:	01 c8                	add    %ecx,%eax
f0120509:	8a 00                	mov    (%eax),%al
f012050b:	0f be c0             	movsbl %al,%eax
f012050e:	01 d0                	add    %edx,%eax
f0120510:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120516:	ff 45 f4             	incl   -0xc(%ebp)
f0120519:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012051f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120522:	7f d7                	jg     f01204fb <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120524:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012052a:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0120530:	89 d0                	mov    %edx,%eax
f0120532:	01 c0                	add    %eax,%eax
f0120534:	01 d0                	add    %edx,%eax
f0120536:	01 c0                	add    %eax,%eax
f0120538:	01 d0                	add    %edx,%eax
f012053a:	39 c1                	cmp    %eax,%ecx
f012053c:	74 17                	je     f0120555 <test_kfree+0xd6a>
f012053e:	83 ec 04             	sub    $0x4,%esp
f0120541:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0120546:	68 76 05 00 00       	push   $0x576
f012054b:	68 d2 99 13 f0       	push   $0xf01399d2
f0120550:	e8 5b fc fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0120555:	83 ec 0c             	sub    $0xc,%esp
f0120558:	68 eb a1 13 f0       	push   $0xf013a1eb
f012055d:	e8 cf 08 fe ff       	call   f0100e31 <cprintf>
f0120562:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120565:	e8 5c c4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012056a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012056d:	e8 12 41 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120572:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120575:	83 ec 0c             	sub    $0xc,%esp
f0120578:	68 00 50 00 00       	push   $0x5000
f012057d:	e8 dd 79 fe ff       	call   f0107f5f <kmalloc>
f0120582:	83 c4 10             	add    $0x10,%esp
f0120585:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012058b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120591:	89 c1                	mov    %eax,%ecx
f0120593:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012059a:	10 00 00 
f012059d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01205a2:	0f b6 d0             	movzbl %al,%edx
f01205a5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01205ab:	01 d0                	add    %edx,%eax
f01205ad:	48                   	dec    %eax
f01205ae:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01205b4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01205ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01205bf:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01205c5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01205cb:	29 d0                	sub    %edx,%eax
f01205cd:	89 c3                	mov    %eax,%ebx
f01205cf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01205d6:	10 00 00 
f01205d9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01205de:	0f b6 c0             	movzbl %al,%eax
f01205e1:	c1 e0 04             	shl    $0x4,%eax
f01205e4:	89 c2                	mov    %eax,%edx
f01205e6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01205ec:	01 d0                	add    %edx,%eax
f01205ee:	48                   	dec    %eax
f01205ef:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01205f5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01205fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120600:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120606:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012060c:	29 d0                	sub    %edx,%eax
f012060e:	01 d8                	add    %ebx,%eax
f0120610:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120615:	39 c1                	cmp    %eax,%ecx
f0120617:	74 17                	je     f0120630 <test_kfree+0xe45>
f0120619:	83 ec 04             	sub    $0x4,%esp
f012061c:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0120621:	68 80 05 00 00       	push   $0x580
f0120626:	68 d2 99 13 f0       	push   $0xf01399d2
f012062b:	e8 80 fb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120630:	e8 4f 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120635:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120638:	74 17                	je     f0120651 <test_kfree+0xe66>
f012063a:	83 ec 04             	sub    $0x4,%esp
f012063d:	68 ec 99 13 f0       	push   $0xf01399ec
f0120642:	68 81 05 00 00       	push   $0x581
f0120647:	68 d2 99 13 f0       	push   $0xf01399d2
f012064c:	e8 5f fb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120651:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120654:	e8 6d c3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120659:	29 c3                	sub    %eax,%ebx
f012065b:	89 d8                	mov    %ebx,%eax
f012065d:	83 f8 05             	cmp    $0x5,%eax
f0120660:	74 17                	je     f0120679 <test_kfree+0xe8e>
f0120662:	83 ec 04             	sub    $0x4,%esp
f0120665:	68 54 9a 13 f0       	push   $0xf0139a54
f012066a:	68 82 05 00 00       	push   $0x582
f012066f:	68 d2 99 13 f0       	push   $0xf01399d2
f0120674:	e8 37 fb fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120679:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0120680:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120683:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120689:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012068c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120693:	eb 0e                	jmp    f01206a3 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f0120695:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120698:	8b 45 98             	mov    -0x68(%ebp),%eax
f012069b:	01 d0                	add    %edx,%eax
f012069d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01206a0:	ff 45 f4             	incl   -0xc(%ebp)
f01206a3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01206a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01206ac:	7f e7                	jg     f0120695 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01206ae:	e8 13 c3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01206b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206b6:	e8 c9 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01206bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01206be:	83 ec 0c             	sub    $0xc,%esp
f01206c1:	68 00 00 10 00       	push   $0x100000
f01206c6:	e8 94 78 fe ff       	call   f0107f5f <kmalloc>
f01206cb:	83 c4 10             	add    $0x10,%esp
f01206ce:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206d4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01206da:	89 c1                	mov    %eax,%ecx
f01206dc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01206e3:	10 00 00 
f01206e6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01206eb:	0f b6 d0             	movzbl %al,%edx
f01206ee:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01206f4:	01 d0                	add    %edx,%eax
f01206f6:	48                   	dec    %eax
f01206f7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01206fd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120703:	ba 00 00 00 00       	mov    $0x0,%edx
f0120708:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012070e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120714:	29 d0                	sub    %edx,%eax
f0120716:	89 c3                	mov    %eax,%ebx
f0120718:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012071f:	10 00 00 
f0120722:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120727:	0f b6 c0             	movzbl %al,%eax
f012072a:	c1 e0 04             	shl    $0x4,%eax
f012072d:	89 c2                	mov    %eax,%edx
f012072f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120735:	01 d0                	add    %edx,%eax
f0120737:	48                   	dec    %eax
f0120738:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012073e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120744:	ba 00 00 00 00       	mov    $0x0,%edx
f0120749:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012074f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120755:	29 d0                	sub    %edx,%eax
f0120757:	01 d8                	add    %ebx,%eax
f0120759:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012075e:	39 c1                	cmp    %eax,%ecx
f0120760:	74 17                	je     f0120779 <test_kfree+0xf8e>
f0120762:	83 ec 04             	sub    $0x4,%esp
f0120765:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012076a:	68 8e 05 00 00       	push   $0x58e
f012076f:	68 d2 99 13 f0       	push   $0xf01399d2
f0120774:	e8 37 fa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120779:	e8 06 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f012077e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120781:	74 17                	je     f012079a <test_kfree+0xfaf>
f0120783:	83 ec 04             	sub    $0x4,%esp
f0120786:	68 ec 99 13 f0       	push   $0xf01399ec
f012078b:	68 8f 05 00 00       	push   $0x58f
f0120790:	68 d2 99 13 f0       	push   $0xf01399d2
f0120795:	e8 16 fa fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012079a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012079d:	e8 24 c2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01207a2:	29 c3                	sub    %eax,%ebx
f01207a4:	89 d8                	mov    %ebx,%eax
f01207a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01207ab:	74 17                	je     f01207c4 <test_kfree+0xfd9>
f01207ad:	83 ec 04             	sub    $0x4,%esp
f01207b0:	68 54 9a 13 f0       	push   $0xf0139a54
f01207b5:	68 90 05 00 00       	push   $0x590
f01207ba:	68 d2 99 13 f0       	push   $0xf01399d2
f01207bf:	e8 ec f9 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01207c4:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01207cb:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01207ce:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01207d4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01207d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01207de:	eb 0e                	jmp    f01207ee <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f01207e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01207e3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01207e6:	01 d0                	add    %edx,%eax
f01207e8:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01207eb:	ff 45 f4             	incl   -0xc(%ebp)
f01207ee:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01207f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01207f7:	7f e7                	jg     f01207e0 <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01207f9:	e8 16 7e ff ff       	call   f0118614 <isKHeapPlacementStrategyNEXTFIT>
f01207fe:	84 c0                	test   %al,%al
f0120800:	0f 84 9e 05 00 00    	je     f0120da4 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120806:	e8 bb c1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012080b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012080e:	e8 71 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120813:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120816:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012081d:	10 00 00 
f0120820:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120825:	0f b6 d0             	movzbl %al,%edx
f0120828:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012082e:	01 d0                	add    %edx,%eax
f0120830:	48                   	dec    %eax
f0120831:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120837:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012083d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120842:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120848:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012084e:	29 d0                	sub    %edx,%eax
f0120850:	89 c1                	mov    %eax,%ecx
f0120852:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120859:	10 00 00 
f012085c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120861:	0f b6 c0             	movzbl %al,%eax
f0120864:	c1 e0 04             	shl    $0x4,%eax
f0120867:	89 c2                	mov    %eax,%edx
f0120869:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012086f:	01 d0                	add    %edx,%eax
f0120871:	48                   	dec    %eax
f0120872:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120878:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012087e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120883:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120889:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012088f:	29 d0                	sub    %edx,%eax
f0120891:	01 c8                	add    %ecx,%eax
f0120893:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120898:	29 c2                	sub    %eax,%edx
f012089a:	89 d0                	mov    %edx,%eax
f012089c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01208a2:	83 ec 0c             	sub    $0xc,%esp
f01208a5:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f01208ab:	e8 af 76 fe ff       	call   f0107f5f <kmalloc>
f01208b0:	83 c4 10             	add    $0x10,%esp
f01208b3:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208b9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01208bf:	89 c1                	mov    %eax,%ecx
f01208c1:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01208c8:	10 00 00 
f01208cb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01208d0:	0f b6 d0             	movzbl %al,%edx
f01208d3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01208d9:	01 d0                	add    %edx,%eax
f01208db:	48                   	dec    %eax
f01208dc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01208e2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01208e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01208ed:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01208f3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01208f9:	29 d0                	sub    %edx,%eax
f01208fb:	89 c3                	mov    %eax,%ebx
f01208fd:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0120904:	10 00 00 
f0120907:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012090c:	0f b6 c0             	movzbl %al,%eax
f012090f:	c1 e0 04             	shl    $0x4,%eax
f0120912:	89 c2                	mov    %eax,%edx
f0120914:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012091a:	01 d0                	add    %edx,%eax
f012091c:	48                   	dec    %eax
f012091d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0120923:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120929:	ba 00 00 00 00       	mov    $0x0,%edx
f012092e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0120934:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012093a:	29 d0                	sub    %edx,%eax
f012093c:	01 d8                	add    %ebx,%eax
f012093e:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120943:	39 c1                	cmp    %eax,%ecx
f0120945:	74 17                	je     f012095e <test_kfree+0x1173>
f0120947:	83 ec 04             	sub    $0x4,%esp
f012094a:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012094f:	68 9f 05 00 00       	push   $0x59f
f0120954:	68 d2 99 13 f0       	push   $0xf01399d2
f0120959:	e8 52 f8 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012095e:	e8 21 3d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120963:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120966:	74 17                	je     f012097f <test_kfree+0x1194>
f0120968:	83 ec 04             	sub    $0x4,%esp
f012096b:	68 ec 99 13 f0       	push   $0xf01399ec
f0120970:	68 a0 05 00 00       	push   $0x5a0
f0120975:	68 d2 99 13 f0       	push   $0xf01399d2
f012097a:	e8 31 f8 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012097f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120982:	e8 3f c0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120987:	29 c3                	sub    %eax,%ebx
f0120989:	89 da                	mov    %ebx,%edx
f012098b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120991:	c1 e8 0c             	shr    $0xc,%eax
f0120994:	39 c2                	cmp    %eax,%edx
f0120996:	74 17                	je     f01209af <test_kfree+0x11c4>
f0120998:	83 ec 04             	sub    $0x4,%esp
f012099b:	68 54 9a 13 f0       	push   $0xf0139a54
f01209a0:	68 a1 05 00 00       	push   $0x5a1
f01209a5:	68 d2 99 13 f0       	push   $0xf01399d2
f01209aa:	e8 01 f8 fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01209af:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01209b5:	48                   	dec    %eax
f01209b6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f01209bc:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01209c2:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01209c5:	e8 fc bf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01209ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01209cd:	e8 b2 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01209d2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01209d5:	83 ec 0c             	sub    $0xc,%esp
f01209d8:	68 00 00 30 00       	push   $0x300000
f01209dd:	e8 7d 75 fe ff       	call   f0107f5f <kmalloc>
f01209e2:	83 c4 10             	add    $0x10,%esp
f01209e5:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01209eb:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01209f1:	89 c1                	mov    %eax,%ecx
f01209f3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01209fa:	10 00 00 
f01209fd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120a02:	0f b6 d0             	movzbl %al,%edx
f0120a05:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120a0b:	01 d0                	add    %edx,%eax
f0120a0d:	48                   	dec    %eax
f0120a0e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120a14:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120a1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a1f:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120a25:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120a2b:	29 d0                	sub    %edx,%eax
f0120a2d:	89 c3                	mov    %eax,%ebx
f0120a2f:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120a36:	10 00 00 
f0120a39:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120a3e:	0f b6 c0             	movzbl %al,%eax
f0120a41:	c1 e0 04             	shl    $0x4,%eax
f0120a44:	89 c2                	mov    %eax,%edx
f0120a46:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120a4c:	01 d0                	add    %edx,%eax
f0120a4e:	48                   	dec    %eax
f0120a4f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120a55:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120a5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a60:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0120a66:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120a6c:	29 d0                	sub    %edx,%eax
f0120a6e:	01 d8                	add    %ebx,%eax
f0120a70:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120a75:	39 c1                	cmp    %eax,%ecx
f0120a77:	74 17                	je     f0120a90 <test_kfree+0x12a5>
f0120a79:	83 ec 04             	sub    $0x4,%esp
f0120a7c:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0120a81:	68 ae 05 00 00       	push   $0x5ae
f0120a86:	68 d2 99 13 f0       	push   $0xf01399d2
f0120a8b:	e8 20 f7 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a90:	e8 ef 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120a95:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a98:	74 17                	je     f0120ab1 <test_kfree+0x12c6>
f0120a9a:	83 ec 04             	sub    $0x4,%esp
f0120a9d:	68 ec 99 13 f0       	push   $0xf01399ec
f0120aa2:	68 af 05 00 00       	push   $0x5af
f0120aa7:	68 d2 99 13 f0       	push   $0xf01399d2
f0120aac:	e8 ff f6 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ab1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ab4:	e8 0d bf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120ab9:	29 c3                	sub    %eax,%ebx
f0120abb:	89 d8                	mov    %ebx,%eax
f0120abd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120ac2:	74 17                	je     f0120adb <test_kfree+0x12f0>
f0120ac4:	83 ec 04             	sub    $0x4,%esp
f0120ac7:	68 54 9a 13 f0       	push   $0xf0139a54
f0120acc:	68 b0 05 00 00       	push   $0x5b0
f0120ad1:	68 d2 99 13 f0       	push   $0xf01399d2
f0120ad6:	e8 d5 f6 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120adb:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f0120ae2:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120ae5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120aeb:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120aee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120af5:	eb 0e                	jmp    f0120b05 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120afa:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120afd:	01 d0                	add    %edx,%eax
f0120aff:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120b02:	ff 45 f4             	incl   -0xc(%ebp)
f0120b05:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120b0b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b0e:	7f e7                	jg     f0120af7 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120b10:	e8 b1 be fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120b15:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120b18:	e8 67 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120b1d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120b20:	83 ec 0c             	sub    $0xc,%esp
f0120b23:	68 00 08 00 00       	push   $0x800
f0120b28:	e8 32 74 fe ff       	call   f0107f5f <kmalloc>
f0120b2d:	83 c4 10             	add    $0x10,%esp
f0120b30:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b36:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120b3c:	89 c1                	mov    %eax,%ecx
f0120b3e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120b45:	10 00 00 
f0120b48:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120b4d:	0f b6 d0             	movzbl %al,%edx
f0120b50:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120b56:	01 d0                	add    %edx,%eax
f0120b58:	48                   	dec    %eax
f0120b59:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0120b5f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b6a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0120b70:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120b76:	29 d0                	sub    %edx,%eax
f0120b78:	89 c3                	mov    %eax,%ebx
f0120b7a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0120b81:	10 00 00 
f0120b84:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120b89:	0f b6 c0             	movzbl %al,%eax
f0120b8c:	c1 e0 04             	shl    $0x4,%eax
f0120b8f:	89 c2                	mov    %eax,%edx
f0120b91:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120b97:	01 d0                	add    %edx,%eax
f0120b99:	48                   	dec    %eax
f0120b9a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0120ba0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120ba6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bab:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0120bb1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120bb7:	29 d0                	sub    %edx,%eax
f0120bb9:	01 d8                	add    %ebx,%eax
f0120bbb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120bc0:	39 c1                	cmp    %eax,%ecx
f0120bc2:	74 17                	je     f0120bdb <test_kfree+0x13f0>
f0120bc4:	83 ec 04             	sub    $0x4,%esp
f0120bc7:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0120bcc:	68 bc 05 00 00       	push   $0x5bc
f0120bd1:	68 d2 99 13 f0       	push   $0xf01399d2
f0120bd6:	e8 d5 f5 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bdb:	e8 a4 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120be0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120be3:	74 17                	je     f0120bfc <test_kfree+0x1411>
f0120be5:	83 ec 04             	sub    $0x4,%esp
f0120be8:	68 ec 99 13 f0       	push   $0xf01399ec
f0120bed:	68 bd 05 00 00       	push   $0x5bd
f0120bf2:	68 d2 99 13 f0       	push   $0xf01399d2
f0120bf7:	e8 b4 f5 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bfc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120bff:	e8 c2 bd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120c04:	29 c3                	sub    %eax,%ebx
f0120c06:	89 d8                	mov    %ebx,%eax
f0120c08:	83 f8 01             	cmp    $0x1,%eax
f0120c0b:	74 17                	je     f0120c24 <test_kfree+0x1439>
f0120c0d:	83 ec 04             	sub    $0x4,%esp
f0120c10:	68 54 9a 13 f0       	push   $0xf0139a54
f0120c15:	68 be 05 00 00       	push   $0x5be
f0120c1a:	68 d2 99 13 f0       	push   $0xf01399d2
f0120c1f:	e8 8c f5 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120c24:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f0120c2b:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120c2e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120c34:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120c37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c3e:	eb 0e                	jmp    f0120c4e <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f0120c40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c43:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120c46:	01 d0                	add    %edx,%eax
f0120c48:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120c4b:	ff 45 f4             	incl   -0xc(%ebp)
f0120c4e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120c54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c57:	7f e7                	jg     f0120c40 <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120c59:	e8 68 bd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120c5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c61:	e8 1e 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c66:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120c69:	83 ec 0c             	sub    $0xc,%esp
f0120c6c:	68 00 00 10 00       	push   $0x100000
f0120c71:	e8 e9 72 fe ff       	call   f0107f5f <kmalloc>
f0120c76:	83 c4 10             	add    $0x10,%esp
f0120c79:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c7f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120c85:	89 c1                	mov    %eax,%ecx
f0120c87:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0120c8e:	10 00 00 
f0120c91:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120c96:	0f b6 d0             	movzbl %al,%edx
f0120c99:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120c9f:	01 d0                	add    %edx,%eax
f0120ca1:	48                   	dec    %eax
f0120ca2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120ca8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120cae:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cb3:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120cb9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120cbf:	29 d0                	sub    %edx,%eax
f0120cc1:	89 c3                	mov    %eax,%ebx
f0120cc3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120cca:	10 00 00 
f0120ccd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120cd2:	0f b6 c0             	movzbl %al,%eax
f0120cd5:	c1 e0 04             	shl    $0x4,%eax
f0120cd8:	89 c2                	mov    %eax,%edx
f0120cda:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120ce0:	01 d0                	add    %edx,%eax
f0120ce2:	48                   	dec    %eax
f0120ce3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120ce9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120cef:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cf4:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120cfa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120d00:	29 d0                	sub    %edx,%eax
f0120d02:	01 d8                	add    %ebx,%eax
f0120d04:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120d09:	39 c1                	cmp    %eax,%ecx
f0120d0b:	74 17                	je     f0120d24 <test_kfree+0x1539>
f0120d0d:	83 ec 04             	sub    $0x4,%esp
f0120d10:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0120d15:	68 ca 05 00 00       	push   $0x5ca
f0120d1a:	68 d2 99 13 f0       	push   $0xf01399d2
f0120d1f:	e8 8c f4 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d24:	e8 5b 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d2c:	74 17                	je     f0120d45 <test_kfree+0x155a>
f0120d2e:	83 ec 04             	sub    $0x4,%esp
f0120d31:	68 ec 99 13 f0       	push   $0xf01399ec
f0120d36:	68 cb 05 00 00       	push   $0x5cb
f0120d3b:	68 d2 99 13 f0       	push   $0xf01399d2
f0120d40:	e8 6b f4 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d45:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d48:	e8 79 bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120d4d:	29 c3                	sub    %eax,%ebx
f0120d4f:	89 d8                	mov    %ebx,%eax
f0120d51:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120d56:	74 17                	je     f0120d6f <test_kfree+0x1584>
f0120d58:	83 ec 04             	sub    $0x4,%esp
f0120d5b:	68 54 9a 13 f0       	push   $0xf0139a54
f0120d60:	68 cc 05 00 00       	push   $0x5cc
f0120d65:	68 d2 99 13 f0       	push   $0xf01399d2
f0120d6a:	e8 41 f4 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120d6f:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120d76:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120d79:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120d7f:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120d82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d89:	eb 0e                	jmp    f0120d99 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120d8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d8e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120d91:	01 d0                	add    %edx,%eax
f0120d93:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120d96:	ff 45 f4             	incl   -0xc(%ebp)
f0120d99:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120d9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120da2:	7f e7                	jg     f0120d8b <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120da4:	83 ec 0c             	sub    $0xc,%esp
f0120da7:	68 f2 a1 13 f0       	push   $0xf013a1f2
f0120dac:	e8 80 00 fe ff       	call   f0100e31 <cprintf>
f0120db1:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120db4:	e8 0d bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120db9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dbc:	e8 c3 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120dc1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120dc4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120dca:	83 ec 0c             	sub    $0xc,%esp
f0120dcd:	50                   	push   %eax
f0120dce:	e8 a6 71 fe ff       	call   f0107f79 <kfree>
f0120dd3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dd6:	e8 a9 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120ddb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120dde:	74 17                	je     f0120df7 <test_kfree+0x160c>
f0120de0:	83 ec 04             	sub    $0x4,%esp
f0120de3:	68 ec 99 13 f0       	push   $0xf01399ec
f0120de8:	68 dd 05 00 00       	push   $0x5dd
f0120ded:	68 d2 99 13 f0       	push   $0xf01399d2
f0120df2:	e8 b9 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120df7:	e8 ca bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120dfc:	89 c2                	mov    %eax,%edx
f0120dfe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e01:	29 c2                	sub    %eax,%edx
f0120e03:	89 d0                	mov    %edx,%eax
f0120e05:	83 f8 02             	cmp    $0x2,%eax
f0120e08:	74 17                	je     f0120e21 <test_kfree+0x1636>
f0120e0a:	83 ec 04             	sub    $0x4,%esp
f0120e0d:	68 5c a1 13 f0       	push   $0xf013a15c
f0120e12:	68 de 05 00 00       	push   $0x5de
f0120e17:	68 d2 99 13 f0       	push   $0xf01399d2
f0120e1c:	e8 8f f3 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e21:	e8 a0 bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120e26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e29:	e8 56 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120e31:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120e37:	83 ec 0c             	sub    $0xc,%esp
f0120e3a:	50                   	push   %eax
f0120e3b:	e8 39 71 fe ff       	call   f0107f79 <kfree>
f0120e40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e43:	e8 3c 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e4b:	74 17                	je     f0120e64 <test_kfree+0x1679>
f0120e4d:	83 ec 04             	sub    $0x4,%esp
f0120e50:	68 ec 99 13 f0       	push   $0xf01399ec
f0120e55:	68 e4 05 00 00       	push   $0x5e4
f0120e5a:	68 d2 99 13 f0       	push   $0xf01399d2
f0120e5f:	e8 4c f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e64:	e8 5d bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120e69:	89 c2                	mov    %eax,%edx
f0120e6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e6e:	29 c2                	sub    %eax,%edx
f0120e70:	89 d0                	mov    %edx,%eax
f0120e72:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120e77:	74 17                	je     f0120e90 <test_kfree+0x16a5>
f0120e79:	83 ec 04             	sub    $0x4,%esp
f0120e7c:	68 5c a1 13 f0       	push   $0xf013a15c
f0120e81:	68 e5 05 00 00       	push   $0x5e5
f0120e86:	68 d2 99 13 f0       	push   $0xf01399d2
f0120e8b:	e8 20 f3 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e90:	e8 31 bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120e95:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e98:	e8 e7 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e9d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120ea0:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120ea6:	83 ec 0c             	sub    $0xc,%esp
f0120ea9:	50                   	push   %eax
f0120eaa:	e8 ca 70 fe ff       	call   f0107f79 <kfree>
f0120eaf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120eb2:	e8 cd 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120eb7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eba:	74 17                	je     f0120ed3 <test_kfree+0x16e8>
f0120ebc:	83 ec 04             	sub    $0x4,%esp
f0120ebf:	68 ec 99 13 f0       	push   $0xf01399ec
f0120ec4:	68 eb 05 00 00       	push   $0x5eb
f0120ec9:	68 d2 99 13 f0       	push   $0xf01399d2
f0120ece:	e8 dd f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ed3:	e8 ee ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120ed8:	89 c2                	mov    %eax,%edx
f0120eda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120edd:	29 c2                	sub    %eax,%edx
f0120edf:	89 d0                	mov    %edx,%eax
f0120ee1:	83 f8 01             	cmp    $0x1,%eax
f0120ee4:	74 17                	je     f0120efd <test_kfree+0x1712>
f0120ee6:	83 ec 04             	sub    $0x4,%esp
f0120ee9:	68 5c a1 13 f0       	push   $0xf013a15c
f0120eee:	68 ec 05 00 00       	push   $0x5ec
f0120ef3:	68 d2 99 13 f0       	push   $0xf01399d2
f0120ef8:	e8 b3 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120efd:	e8 c4 ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120f02:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f05:	e8 7a 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f0a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120f0d:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120f13:	83 ec 0c             	sub    $0xc,%esp
f0120f16:	50                   	push   %eax
f0120f17:	e8 5d 70 fe ff       	call   f0107f79 <kfree>
f0120f1c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f1f:	e8 60 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f24:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f27:	74 17                	je     f0120f40 <test_kfree+0x1755>
f0120f29:	83 ec 04             	sub    $0x4,%esp
f0120f2c:	68 ec 99 13 f0       	push   $0xf01399ec
f0120f31:	68 f2 05 00 00       	push   $0x5f2
f0120f36:	68 d2 99 13 f0       	push   $0xf01399d2
f0120f3b:	e8 70 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f40:	e8 81 ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120f45:	89 c2                	mov    %eax,%edx
f0120f47:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f4a:	29 c2                	sub    %eax,%edx
f0120f4c:	89 d0                	mov    %edx,%eax
f0120f4e:	83 f8 04             	cmp    $0x4,%eax
f0120f51:	74 17                	je     f0120f6a <test_kfree+0x177f>
f0120f53:	83 ec 04             	sub    $0x4,%esp
f0120f56:	68 5c a1 13 f0       	push   $0xf013a15c
f0120f5b:	68 f3 05 00 00       	push   $0x5f3
f0120f60:	68 d2 99 13 f0       	push   $0xf01399d2
f0120f65:	e8 46 f2 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120f6a:	e8 57 ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120f6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f72:	e8 0d 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f77:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120f7a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120f80:	83 ec 0c             	sub    $0xc,%esp
f0120f83:	50                   	push   %eax
f0120f84:	e8 f0 6f fe ff       	call   f0107f79 <kfree>
f0120f89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f8c:	e8 f3 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f91:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f94:	74 17                	je     f0120fad <test_kfree+0x17c2>
f0120f96:	83 ec 04             	sub    $0x4,%esp
f0120f99:	68 ec 99 13 f0       	push   $0xf01399ec
f0120f9e:	68 f9 05 00 00       	push   $0x5f9
f0120fa3:	68 d2 99 13 f0       	push   $0xf01399d2
f0120fa8:	e8 03 f2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fad:	e8 14 ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120fb2:	89 c2                	mov    %eax,%edx
f0120fb4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fb7:	29 c2                	sub    %eax,%edx
f0120fb9:	89 d0                	mov    %edx,%eax
f0120fbb:	83 f8 05             	cmp    $0x5,%eax
f0120fbe:	74 17                	je     f0120fd7 <test_kfree+0x17ec>
f0120fc0:	83 ec 04             	sub    $0x4,%esp
f0120fc3:	68 5c a1 13 f0       	push   $0xf013a15c
f0120fc8:	68 fa 05 00 00       	push   $0x5fa
f0120fcd:	68 d2 99 13 f0       	push   $0xf01399d2
f0120fd2:	e8 d9 f1 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120fd7:	e8 ea b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120fdc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120fdf:	e8 a0 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120fe4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120fe7:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120fed:	83 ec 0c             	sub    $0xc,%esp
f0120ff0:	50                   	push   %eax
f0120ff1:	e8 83 6f fe ff       	call   f0107f79 <kfree>
f0120ff6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ff9:	e8 86 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120ffe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121001:	74 17                	je     f012101a <test_kfree+0x182f>
f0121003:	83 ec 04             	sub    $0x4,%esp
f0121006:	68 ec 99 13 f0       	push   $0xf01399ec
f012100b:	68 00 06 00 00       	push   $0x600
f0121010:	68 d2 99 13 f0       	push   $0xf01399d2
f0121015:	e8 96 f1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012101a:	e8 a7 b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012101f:	89 c2                	mov    %eax,%edx
f0121021:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121024:	29 c2                	sub    %eax,%edx
f0121026:	89 d0                	mov    %edx,%eax
f0121028:	3d 00 01 00 00       	cmp    $0x100,%eax
f012102d:	74 17                	je     f0121046 <test_kfree+0x185b>
f012102f:	83 ec 04             	sub    $0x4,%esp
f0121032:	68 5c a1 13 f0       	push   $0xf013a15c
f0121037:	68 01 06 00 00       	push   $0x601
f012103c:	68 d2 99 13 f0       	push   $0xf01399d2
f0121041:	e8 6a f1 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121046:	e8 c9 75 ff ff       	call   f0118614 <isKHeapPlacementStrategyNEXTFIT>
f012104b:	84 c0                	test   %al,%al
f012104d:	0f 84 4a 02 00 00    	je     f012129d <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121053:	e8 6e b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121058:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012105b:	e8 24 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121060:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121063:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0121069:	83 ec 0c             	sub    $0xc,%esp
f012106c:	50                   	push   %eax
f012106d:	e8 07 6f fe ff       	call   f0107f79 <kfree>
f0121072:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121075:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012107c:	10 00 00 
f012107f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121084:	0f b6 d0             	movzbl %al,%edx
f0121087:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012108d:	01 d0                	add    %edx,%eax
f012108f:	48                   	dec    %eax
f0121090:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0121096:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012109c:	ba 00 00 00 00       	mov    $0x0,%edx
f01210a1:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01210a7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01210ad:	29 d0                	sub    %edx,%eax
f01210af:	89 c1                	mov    %eax,%ecx
f01210b1:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01210b8:	10 00 00 
f01210bb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01210c0:	0f b6 c0             	movzbl %al,%eax
f01210c3:	c1 e0 04             	shl    $0x4,%eax
f01210c6:	89 c2                	mov    %eax,%edx
f01210c8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01210ce:	01 d0                	add    %edx,%eax
f01210d0:	48                   	dec    %eax
f01210d1:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01210d7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01210dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01210e2:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01210e8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01210ee:	29 d0                	sub    %edx,%eax
f01210f0:	01 c8                	add    %ecx,%eax
f01210f2:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01210f7:	29 c2                	sub    %eax,%edx
f01210f9:	89 d0                	mov    %edx,%eax
f01210fb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121101:	e8 7e 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121106:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121109:	74 17                	je     f0121122 <test_kfree+0x1937>
f012110b:	83 ec 04             	sub    $0x4,%esp
f012110e:	68 ec 99 13 f0       	push   $0xf01399ec
f0121113:	68 0b 06 00 00       	push   $0x60b
f0121118:	68 d2 99 13 f0       	push   $0xf01399d2
f012111d:	e8 8e f0 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121122:	e8 9f b8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121127:	89 c2                	mov    %eax,%edx
f0121129:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012112c:	29 c2                	sub    %eax,%edx
f012112e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121134:	c1 e8 0c             	shr    $0xc,%eax
f0121137:	39 c2                	cmp    %eax,%edx
f0121139:	74 17                	je     f0121152 <test_kfree+0x1967>
f012113b:	83 ec 04             	sub    $0x4,%esp
f012113e:	68 5c a1 13 f0       	push   $0xf013a15c
f0121143:	68 0c 06 00 00       	push   $0x60c
f0121148:	68 d2 99 13 f0       	push   $0xf01399d2
f012114d:	e8 5e f0 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121152:	e8 6f b8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121157:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012115a:	e8 25 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012115f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121162:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121168:	83 ec 0c             	sub    $0xc,%esp
f012116b:	50                   	push   %eax
f012116c:	e8 08 6e fe ff       	call   f0107f79 <kfree>
f0121171:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121174:	e8 0b 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121179:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012117c:	74 17                	je     f0121195 <test_kfree+0x19aa>
f012117e:	83 ec 04             	sub    $0x4,%esp
f0121181:	68 ec 99 13 f0       	push   $0xf01399ec
f0121186:	68 12 06 00 00       	push   $0x612
f012118b:	68 d2 99 13 f0       	push   $0xf01399d2
f0121190:	e8 1b f0 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121195:	e8 2c b8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012119a:	89 c2                	mov    %eax,%edx
f012119c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012119f:	29 c2                	sub    %eax,%edx
f01211a1:	89 d0                	mov    %edx,%eax
f01211a3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01211a8:	74 17                	je     f01211c1 <test_kfree+0x19d6>
f01211aa:	83 ec 04             	sub    $0x4,%esp
f01211ad:	68 5c a1 13 f0       	push   $0xf013a15c
f01211b2:	68 13 06 00 00       	push   $0x613
f01211b7:	68 d2 99 13 f0       	push   $0xf01399d2
f01211bc:	e8 ef ef fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f01211c1:	e8 00 b8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01211c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01211c9:	e8 b6 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f01211d1:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01211d7:	83 ec 0c             	sub    $0xc,%esp
f01211da:	50                   	push   %eax
f01211db:	e8 99 6d fe ff       	call   f0107f79 <kfree>
f01211e0:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211e3:	e8 9c 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211eb:	74 17                	je     f0121204 <test_kfree+0x1a19>
f01211ed:	83 ec 04             	sub    $0x4,%esp
f01211f0:	68 ec 99 13 f0       	push   $0xf01399ec
f01211f5:	68 19 06 00 00       	push   $0x619
f01211fa:	68 d2 99 13 f0       	push   $0xf01399d2
f01211ff:	e8 ac ef fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121204:	e8 bd b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121209:	89 c2                	mov    %eax,%edx
f012120b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012120e:	29 c2                	sub    %eax,%edx
f0121210:	89 d0                	mov    %edx,%eax
f0121212:	83 f8 01             	cmp    $0x1,%eax
f0121215:	74 17                	je     f012122e <test_kfree+0x1a43>
f0121217:	83 ec 04             	sub    $0x4,%esp
f012121a:	68 5c a1 13 f0       	push   $0xf013a15c
f012121f:	68 1a 06 00 00       	push   $0x61a
f0121224:	68 d2 99 13 f0       	push   $0xf01399d2
f0121229:	e8 82 ef fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012122e:	e8 93 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121233:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121236:	e8 49 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012123b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012123e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121244:	83 ec 0c             	sub    $0xc,%esp
f0121247:	50                   	push   %eax
f0121248:	e8 2c 6d fe ff       	call   f0107f79 <kfree>
f012124d:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121250:	e8 2f 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121255:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121258:	74 17                	je     f0121271 <test_kfree+0x1a86>
f012125a:	83 ec 04             	sub    $0x4,%esp
f012125d:	68 ec 99 13 f0       	push   $0xf01399ec
f0121262:	68 20 06 00 00       	push   $0x620
f0121267:	68 d2 99 13 f0       	push   $0xf01399d2
f012126c:	e8 3f ef fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121271:	e8 50 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121276:	89 c2                	mov    %eax,%edx
f0121278:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012127b:	29 c2                	sub    %eax,%edx
f012127d:	89 d0                	mov    %edx,%eax
f012127f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121284:	74 17                	je     f012129d <test_kfree+0x1ab2>
f0121286:	83 ec 04             	sub    $0x4,%esp
f0121289:	68 5c a1 13 f0       	push   $0xf013a15c
f012128e:	68 21 06 00 00       	push   $0x621
f0121293:	68 d2 99 13 f0       	push   $0xf01399d2
f0121298:	e8 13 ef fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012129d:	e8 24 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01212a2:	89 c2                	mov    %eax,%edx
f01212a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01212a7:	39 c2                	cmp    %eax,%edx
f01212a9:	74 17                	je     f01212c2 <test_kfree+0x1ad7>
f01212ab:	83 ec 04             	sub    $0x4,%esp
f01212ae:	68 fc a1 13 f0       	push   $0xf013a1fc
f01212b3:	68 24 06 00 00       	push   $0x624
f01212b8:	68 d2 99 13 f0       	push   $0xf01399d2
f01212bd:	e8 ee ee fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01212c2:	83 ec 0c             	sub    $0xc,%esp
f01212c5:	68 30 a2 13 f0       	push   $0xf013a230
f01212ca:	e8 62 fb fd ff       	call   f0100e31 <cprintf>
f01212cf:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01212d2:	83 ec 0c             	sub    $0xc,%esp
f01212d5:	6a 03                	push   $0x3
f01212d7:	e8 85 bb fe ff       	call   f010ce61 <sys_bypassPageFault>
f01212dc:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01212df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01212e6:	e9 82 00 00 00       	jmp    f012136d <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f01212eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01212ee:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01212f5:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01212f8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01212fb:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01212fe:	e8 4c bb fe ff       	call   f010ce4f <sys_rcr2>
f0121303:	89 c2                	mov    %eax,%edx
f0121305:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121308:	39 c2                	cmp    %eax,%edx
f012130a:	74 17                	je     f0121323 <test_kfree+0x1b38>
f012130c:	83 ec 04             	sub    $0x4,%esp
f012130f:	68 38 a2 13 f0       	push   $0xf013a238
f0121314:	68 33 06 00 00       	push   $0x633
f0121319:	68 d2 99 13 f0       	push   $0xf01399d2
f012131e:	e8 8d ee fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0121323:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121326:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012132d:	89 c2                	mov    %eax,%edx
f012132f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121332:	01 d0                	add    %edx,%eax
f0121334:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121337:	e8 13 bb fe ff       	call   f010ce4f <sys_rcr2>
f012133c:	89 c2                	mov    %eax,%edx
f012133e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121341:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0121348:	89 c1                	mov    %eax,%ecx
f012134a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012134d:	01 c8                	add    %ecx,%eax
f012134f:	39 c2                	cmp    %eax,%edx
f0121351:	74 17                	je     f012136a <test_kfree+0x1b7f>
f0121353:	83 ec 04             	sub    $0x4,%esp
f0121356:	68 38 a2 13 f0       	push   $0xf013a238
f012135b:	68 35 06 00 00       	push   $0x635
f0121360:	68 d2 99 13 f0       	push   $0xf01399d2
f0121365:	e8 46 ee fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012136a:	ff 45 f4             	incl   -0xc(%ebp)
f012136d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121371:	0f 8e 74 ff ff ff    	jle    f01212eb <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121377:	83 ec 0c             	sub    $0xc,%esp
f012137a:	6a 00                	push   $0x0
f012137c:	e8 e0 ba fe ff       	call   f010ce61 <sys_bypassPageFault>
f0121381:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121384:	83 ec 0c             	sub    $0xc,%esp
f0121387:	68 7d a2 13 f0       	push   $0xf013a27d
f012138c:	e8 a0 fa fd ff       	call   f0100e31 <cprintf>
f0121391:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121394:	e8 2d b6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121399:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012139c:	e8 e3 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01213a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01213a4:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01213aa:	83 ec 0c             	sub    $0xc,%esp
f01213ad:	50                   	push   %eax
f01213ae:	e8 c6 6b fe ff       	call   f0107f79 <kfree>
f01213b3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213b6:	e8 c9 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01213bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213be:	74 17                	je     f01213d7 <test_kfree+0x1bec>
f01213c0:	83 ec 04             	sub    $0x4,%esp
f01213c3:	68 ec 99 13 f0       	push   $0xf01399ec
f01213c8:	68 43 06 00 00       	push   $0x643
f01213cd:	68 d2 99 13 f0       	push   $0xf01399d2
f01213d2:	e8 d9 ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01213d7:	e8 ea b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01213dc:	89 c2                	mov    %eax,%edx
f01213de:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01213e1:	39 c2                	cmp    %eax,%edx
f01213e3:	74 17                	je     f01213fc <test_kfree+0x1c11>
f01213e5:	83 ec 04             	sub    $0x4,%esp
f01213e8:	68 84 a2 13 f0       	push   $0xf013a284
f01213ed:	68 44 06 00 00       	push   $0x644
f01213f2:	68 d2 99 13 f0       	push   $0xf01399d2
f01213f7:	e8 b4 ed fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01213fc:	e8 c5 b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121401:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121404:	e8 7b 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121409:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012140c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121412:	83 ec 0c             	sub    $0xc,%esp
f0121415:	50                   	push   %eax
f0121416:	e8 5e 6b fe ff       	call   f0107f79 <kfree>
f012141b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012141e:	e8 61 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121423:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121426:	74 17                	je     f012143f <test_kfree+0x1c54>
f0121428:	83 ec 04             	sub    $0x4,%esp
f012142b:	68 ec 99 13 f0       	push   $0xf01399ec
f0121430:	68 4a 06 00 00       	push   $0x64a
f0121435:	68 d2 99 13 f0       	push   $0xf01399d2
f012143a:	e8 71 ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012143f:	e8 82 b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121444:	89 c2                	mov    %eax,%edx
f0121446:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121449:	39 c2                	cmp    %eax,%edx
f012144b:	74 17                	je     f0121464 <test_kfree+0x1c79>
f012144d:	83 ec 04             	sub    $0x4,%esp
f0121450:	68 84 a2 13 f0       	push   $0xf013a284
f0121455:	68 4b 06 00 00       	push   $0x64b
f012145a:	68 d2 99 13 f0       	push   $0xf01399d2
f012145f:	e8 4c ed fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121464:	e8 5d b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121469:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012146c:	e8 13 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121471:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121474:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012147a:	83 ec 0c             	sub    $0xc,%esp
f012147d:	50                   	push   %eax
f012147e:	e8 f6 6a fe ff       	call   f0107f79 <kfree>
f0121483:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121486:	e8 f9 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012148b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012148e:	74 17                	je     f01214a7 <test_kfree+0x1cbc>
f0121490:	83 ec 04             	sub    $0x4,%esp
f0121493:	68 ec 99 13 f0       	push   $0xf01399ec
f0121498:	68 51 06 00 00       	push   $0x651
f012149d:	68 d2 99 13 f0       	push   $0xf01399d2
f01214a2:	e8 09 ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01214a7:	e8 1a b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01214ac:	89 c2                	mov    %eax,%edx
f01214ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01214b1:	39 c2                	cmp    %eax,%edx
f01214b3:	74 17                	je     f01214cc <test_kfree+0x1ce1>
f01214b5:	83 ec 04             	sub    $0x4,%esp
f01214b8:	68 84 a2 13 f0       	push   $0xf013a284
f01214bd:	68 52 06 00 00       	push   $0x652
f01214c2:	68 d2 99 13 f0       	push   $0xf01399d2
f01214c7:	e8 e4 ec fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01214cc:	e8 f5 b4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01214d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01214d4:	e8 ab 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01214d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01214dc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01214e2:	83 ec 0c             	sub    $0xc,%esp
f01214e5:	50                   	push   %eax
f01214e6:	e8 8e 6a fe ff       	call   f0107f79 <kfree>
f01214eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214ee:	e8 91 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01214f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214f6:	74 17                	je     f012150f <test_kfree+0x1d24>
f01214f8:	83 ec 04             	sub    $0x4,%esp
f01214fb:	68 ec 99 13 f0       	push   $0xf01399ec
f0121500:	68 58 06 00 00       	push   $0x658
f0121505:	68 d2 99 13 f0       	push   $0xf01399d2
f012150a:	e8 a1 ec fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012150f:	e8 b2 b4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121514:	89 c2                	mov    %eax,%edx
f0121516:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121519:	39 c2                	cmp    %eax,%edx
f012151b:	74 17                	je     f0121534 <test_kfree+0x1d49>
f012151d:	83 ec 04             	sub    $0x4,%esp
f0121520:	68 84 a2 13 f0       	push   $0xf013a284
f0121525:	68 59 06 00 00       	push   $0x659
f012152a:	68 d2 99 13 f0       	push   $0xf01399d2
f012152f:	e8 7c ec fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0121534:	83 ec 0c             	sub    $0xc,%esp
f0121537:	68 cb a2 13 f0       	push   $0xf013a2cb
f012153c:	e8 f0 f8 fd ff       	call   f0100e31 <cprintf>
f0121541:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121544:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012154b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121552:	eb 48                	jmp    f012159c <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121554:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121557:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012155c:	83 ec 04             	sub    $0x4,%esp
f012155f:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0121565:	51                   	push   %ecx
f0121566:	52                   	push   %edx
f0121567:	50                   	push   %eax
f0121568:	e8 7a 5f fe ff       	call   f01074e7 <get_page_table>
f012156d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121570:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0121576:	85 c0                	test   %eax,%eax
f0121578:	75 17                	jne    f0121591 <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012157a:	83 ec 04             	sub    $0x4,%esp
f012157d:	68 d4 a2 13 f0       	push   $0xf013a2d4
f0121582:	68 67 06 00 00       	push   $0x667
f0121587:	68 d2 99 13 f0       	push   $0xf01399d2
f012158c:	e8 1f ec fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121591:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121598:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012159c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01215a0:	78 b2                	js     f0121554 <test_kfree+0x1d69>
f01215a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01215a6:	7f 09                	jg     f01215b1 <test_kfree+0x1dc6>
f01215a8:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01215af:	76 a3                	jbe    f0121554 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01215b1:	83 ec 0c             	sub    $0xc,%esp
f01215b4:	68 b6 9b 13 f0       	push   $0xf0139bb6
f01215b9:	e8 73 f8 fd ff       	call   f0100e31 <cprintf>
f01215be:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01215c1:	83 ec 0c             	sub    $0xc,%esp
f01215c4:	68 3c a3 13 f0       	push   $0xf013a33c
f01215c9:	e8 63 f8 fd ff       	call   f0100e31 <cprintf>
f01215ce:	83 c4 10             	add    $0x10,%esp

	return 1;
f01215d1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01215d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01215d9:	5b                   	pop    %ebx
f01215da:	5f                   	pop    %edi
f01215db:	5d                   	pop    %ebp
f01215dc:	c3                   	ret    

f01215dd <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01215dd:	55                   	push   %ebp
f01215de:	89 e5                	mov    %esp,%ebp
f01215e0:	57                   	push   %edi
f01215e1:	53                   	push   %ebx
f01215e2:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f01215e8:	83 ec 0c             	sub    $0xc,%esp
f01215eb:	68 14 99 13 f0       	push   $0xf0139914
f01215f0:	e8 3c f8 fd ff       	call   f0100e31 <cprintf>
f01215f5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01215f8:	83 ec 0c             	sub    $0xc,%esp
f01215fb:	68 44 99 13 f0       	push   $0xf0139944
f0121600:	e8 2c f8 fd ff       	call   f0100e31 <cprintf>
f0121605:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121608:	83 ec 0c             	sub    $0xc,%esp
f012160b:	68 14 99 13 f0       	push   $0xf0139914
f0121610:	e8 1c f8 fd ff       	call   f0100e31 <cprintf>
f0121615:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121618:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012161c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121620:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121626:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012162c:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121633:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012163a:	e8 87 b3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012163f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121642:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0121648:	b9 14 00 00 00       	mov    $0x14,%ecx
f012164d:	b8 00 00 00 00       	mov    $0x0,%eax
f0121652:	89 d7                	mov    %edx,%edi
f0121654:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121656:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f012165c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121661:	b8 00 00 00 00       	mov    $0x0,%eax
f0121666:	89 d7                	mov    %edx,%edi
f0121668:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012166a:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0121670:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121675:	b8 00 00 00 00       	mov    $0x0,%eax
f012167a:	89 d7                	mov    %edx,%edi
f012167c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012167e:	e8 43 b3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121683:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121686:	e8 f9 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f012168b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012168e:	83 ec 0c             	sub    $0xc,%esp
f0121691:	68 00 fc 1f 00       	push   $0x1ffc00
f0121696:	e8 c4 68 fe ff       	call   f0107f5f <kmalloc>
f012169b:	83 c4 10             	add    $0x10,%esp
f012169e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216a4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01216aa:	89 c1                	mov    %eax,%ecx
f01216ac:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01216b3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01216b8:	0f b6 d0             	movzbl %al,%edx
f01216bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01216be:	01 d0                	add    %edx,%eax
f01216c0:	48                   	dec    %eax
f01216c1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01216c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01216c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01216cc:	f7 75 c8             	divl   -0x38(%ebp)
f01216cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01216d2:	29 d0                	sub    %edx,%eax
f01216d4:	89 c3                	mov    %eax,%ebx
f01216d6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01216dd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01216e2:	0f b6 c0             	movzbl %al,%eax
f01216e5:	c1 e0 04             	shl    $0x4,%eax
f01216e8:	89 c2                	mov    %eax,%edx
f01216ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01216ed:	01 d0                	add    %edx,%eax
f01216ef:	48                   	dec    %eax
f01216f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01216f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01216f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01216fb:	f7 75 c0             	divl   -0x40(%ebp)
f01216fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121701:	29 d0                	sub    %edx,%eax
f0121703:	01 d8                	add    %ebx,%eax
f0121705:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012170a:	39 c1                	cmp    %eax,%ecx
f012170c:	74 17                	je     f0121725 <test_kfree_bestfirstfit+0x148>
f012170e:	83 ec 04             	sub    $0x4,%esp
f0121711:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121716:	68 95 06 00 00       	push   $0x695
f012171b:	68 d2 99 13 f0       	push   $0xf01399d2
f0121720:	e8 8b ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121725:	e8 5a 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f012172a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012172d:	74 17                	je     f0121746 <test_kfree_bestfirstfit+0x169>
f012172f:	83 ec 04             	sub    $0x4,%esp
f0121732:	68 ec 99 13 f0       	push   $0xf01399ec
f0121737:	68 96 06 00 00       	push   $0x696
f012173c:	68 d2 99 13 f0       	push   $0xf01399d2
f0121741:	e8 6a ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121746:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121749:	e8 78 b2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012174e:	29 c3                	sub    %eax,%ebx
f0121750:	89 d8                	mov    %ebx,%eax
f0121752:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121757:	74 17                	je     f0121770 <test_kfree_bestfirstfit+0x193>
f0121759:	83 ec 04             	sub    $0x4,%esp
f012175c:	68 54 9a 13 f0       	push   $0xf0139a54
f0121761:	68 97 06 00 00       	push   $0x697
f0121766:	68 d2 99 13 f0       	push   $0xf01399d2
f012176b:	e8 40 ea fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121770:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121777:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012177a:	e8 47 b2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012177f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121782:	e8 fd 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121787:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012178a:	83 ec 0c             	sub    $0xc,%esp
f012178d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121792:	e8 c8 67 fe ff       	call   f0107f5f <kmalloc>
f0121797:	83 c4 10             	add    $0x10,%esp
f012179a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217a0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01217a6:	89 c1                	mov    %eax,%ecx
f01217a8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01217af:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01217b4:	0f b6 d0             	movzbl %al,%edx
f01217b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01217ba:	01 d0                	add    %edx,%eax
f01217bc:	48                   	dec    %eax
f01217bd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01217c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01217c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01217c8:	f7 75 b8             	divl   -0x48(%ebp)
f01217cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01217ce:	29 d0                	sub    %edx,%eax
f01217d0:	89 c3                	mov    %eax,%ebx
f01217d2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01217d9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01217de:	0f b6 c0             	movzbl %al,%eax
f01217e1:	c1 e0 04             	shl    $0x4,%eax
f01217e4:	89 c2                	mov    %eax,%edx
f01217e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01217e9:	01 d0                	add    %edx,%eax
f01217eb:	48                   	dec    %eax
f01217ec:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01217ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01217f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01217f7:	f7 75 b0             	divl   -0x50(%ebp)
f01217fa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01217fd:	29 d0                	sub    %edx,%eax
f01217ff:	01 d8                	add    %ebx,%eax
f0121801:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121806:	39 c1                	cmp    %eax,%ecx
f0121808:	74 17                	je     f0121821 <test_kfree_bestfirstfit+0x244>
f012180a:	83 ec 04             	sub    $0x4,%esp
f012180d:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121812:	68 9e 06 00 00       	push   $0x69e
f0121817:	68 d2 99 13 f0       	push   $0xf01399d2
f012181c:	e8 8f e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121821:	e8 5e 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121826:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121829:	74 17                	je     f0121842 <test_kfree_bestfirstfit+0x265>
f012182b:	83 ec 04             	sub    $0x4,%esp
f012182e:	68 ec 99 13 f0       	push   $0xf01399ec
f0121833:	68 9f 06 00 00       	push   $0x69f
f0121838:	68 d2 99 13 f0       	push   $0xf01399d2
f012183d:	e8 6e e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121842:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121845:	e8 7c b1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012184a:	29 c3                	sub    %eax,%ebx
f012184c:	89 d8                	mov    %ebx,%eax
f012184e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121853:	74 17                	je     f012186c <test_kfree_bestfirstfit+0x28f>
f0121855:	83 ec 04             	sub    $0x4,%esp
f0121858:	68 54 9a 13 f0       	push   $0xf0139a54
f012185d:	68 a0 06 00 00       	push   $0x6a0
f0121862:	68 d2 99 13 f0       	push   $0xf01399d2
f0121867:	e8 44 e9 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012186c:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0121873:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121876:	e8 4b b1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012187b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012187e:	e8 01 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121883:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121886:	83 ec 0c             	sub    $0xc,%esp
f0121889:	68 00 08 00 00       	push   $0x800
f012188e:	e8 cc 66 fe ff       	call   f0107f5f <kmalloc>
f0121893:	83 c4 10             	add    $0x10,%esp
f0121896:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012189c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01218a2:	89 c1                	mov    %eax,%ecx
f01218a4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01218ab:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01218b0:	0f b6 d0             	movzbl %al,%edx
f01218b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01218b6:	01 d0                	add    %edx,%eax
f01218b8:	48                   	dec    %eax
f01218b9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01218bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01218bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01218c4:	f7 75 a8             	divl   -0x58(%ebp)
f01218c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01218ca:	29 d0                	sub    %edx,%eax
f01218cc:	89 c3                	mov    %eax,%ebx
f01218ce:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01218d5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01218da:	0f b6 c0             	movzbl %al,%eax
f01218dd:	c1 e0 04             	shl    $0x4,%eax
f01218e0:	89 c2                	mov    %eax,%edx
f01218e2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01218e5:	01 d0                	add    %edx,%eax
f01218e7:	48                   	dec    %eax
f01218e8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01218eb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01218ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01218f3:	f7 75 a0             	divl   -0x60(%ebp)
f01218f6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01218f9:	29 d0                	sub    %edx,%eax
f01218fb:	01 d8                	add    %ebx,%eax
f01218fd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121902:	39 c1                	cmp    %eax,%ecx
f0121904:	74 17                	je     f012191d <test_kfree_bestfirstfit+0x340>
f0121906:	83 ec 04             	sub    $0x4,%esp
f0121909:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012190e:	68 a7 06 00 00       	push   $0x6a7
f0121913:	68 d2 99 13 f0       	push   $0xf01399d2
f0121918:	e8 93 e8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012191d:	e8 62 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121922:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121925:	74 17                	je     f012193e <test_kfree_bestfirstfit+0x361>
f0121927:	83 ec 04             	sub    $0x4,%esp
f012192a:	68 ec 99 13 f0       	push   $0xf01399ec
f012192f:	68 a8 06 00 00       	push   $0x6a8
f0121934:	68 d2 99 13 f0       	push   $0xf01399d2
f0121939:	e8 72 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012193e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121941:	e8 80 b0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121946:	29 c3                	sub    %eax,%ebx
f0121948:	89 d8                	mov    %ebx,%eax
f012194a:	83 f8 01             	cmp    $0x1,%eax
f012194d:	74 17                	je     f0121966 <test_kfree_bestfirstfit+0x389>
f012194f:	83 ec 04             	sub    $0x4,%esp
f0121952:	68 54 9a 13 f0       	push   $0xf0139a54
f0121957:	68 a9 06 00 00       	push   $0x6a9
f012195c:	68 d2 99 13 f0       	push   $0xf01399d2
f0121961:	e8 4a e8 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121966:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012196d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121970:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121976:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121979:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121980:	eb 0e                	jmp    f0121990 <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121982:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121985:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121988:	01 d0                	add    %edx,%eax
f012198a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012198d:	ff 45 f4             	incl   -0xc(%ebp)
f0121990:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121996:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121999:	7f e7                	jg     f0121982 <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012199b:	e8 26 b0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01219a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219a3:	e8 dc 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01219a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01219ab:	83 ec 0c             	sub    $0xc,%esp
f01219ae:	68 00 08 00 00       	push   $0x800
f01219b3:	e8 a7 65 fe ff       	call   f0107f5f <kmalloc>
f01219b8:	83 c4 10             	add    $0x10,%esp
f01219bb:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01219c1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01219c7:	89 c1                	mov    %eax,%ecx
f01219c9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01219d0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01219d5:	0f b6 d0             	movzbl %al,%edx
f01219d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01219db:	01 d0                	add    %edx,%eax
f01219dd:	48                   	dec    %eax
f01219de:	89 45 90             	mov    %eax,-0x70(%ebp)
f01219e1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01219e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01219e9:	f7 75 94             	divl   -0x6c(%ebp)
f01219ec:	8b 45 90             	mov    -0x70(%ebp),%eax
f01219ef:	29 d0                	sub    %edx,%eax
f01219f1:	89 c3                	mov    %eax,%ebx
f01219f3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01219fa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01219ff:	0f b6 c0             	movzbl %al,%eax
f0121a02:	c1 e0 04             	shl    $0x4,%eax
f0121a05:	89 c2                	mov    %eax,%edx
f0121a07:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121a0a:	01 d0                	add    %edx,%eax
f0121a0c:	48                   	dec    %eax
f0121a0d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0121a10:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121a13:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a18:	f7 75 8c             	divl   -0x74(%ebp)
f0121a1b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121a1e:	29 d0                	sub    %edx,%eax
f0121a20:	01 d8                	add    %ebx,%eax
f0121a22:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121a27:	39 c1                	cmp    %eax,%ecx
f0121a29:	74 17                	je     f0121a42 <test_kfree_bestfirstfit+0x465>
f0121a2b:	83 ec 04             	sub    $0x4,%esp
f0121a2e:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121a33:	68 b5 06 00 00       	push   $0x6b5
f0121a38:	68 d2 99 13 f0       	push   $0xf01399d2
f0121a3d:	e8 6e e7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a42:	e8 3d 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121a47:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a4a:	74 17                	je     f0121a63 <test_kfree_bestfirstfit+0x486>
f0121a4c:	83 ec 04             	sub    $0x4,%esp
f0121a4f:	68 ec 99 13 f0       	push   $0xf01399ec
f0121a54:	68 b6 06 00 00       	push   $0x6b6
f0121a59:	68 d2 99 13 f0       	push   $0xf01399d2
f0121a5e:	e8 4d e7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a63:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a66:	e8 5b af fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121a6b:	29 c3                	sub    %eax,%ebx
f0121a6d:	89 d8                	mov    %ebx,%eax
f0121a6f:	83 f8 01             	cmp    $0x1,%eax
f0121a72:	74 17                	je     f0121a8b <test_kfree_bestfirstfit+0x4ae>
f0121a74:	83 ec 04             	sub    $0x4,%esp
f0121a77:	68 54 9a 13 f0       	push   $0xf0139a54
f0121a7c:	68 b7 06 00 00       	push   $0x6b7
f0121a81:	68 d2 99 13 f0       	push   $0xf01399d2
f0121a86:	e8 25 e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121a8b:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0121a92:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121a95:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121a9b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121a9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121aa5:	eb 0e                	jmp    f0121ab5 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0121aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121aaa:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121aad:	01 d0                	add    %edx,%eax
f0121aaf:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121ab2:	ff 45 f4             	incl   -0xc(%ebp)
f0121ab5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121abb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121abe:	7f e7                	jg     f0121aa7 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ac0:	e8 01 af fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ac5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ac8:	e8 b7 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121acd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121ad0:	83 ec 0c             	sub    $0xc,%esp
f0121ad3:	68 00 1c 00 00       	push   $0x1c00
f0121ad8:	e8 82 64 fe ff       	call   f0107f5f <kmalloc>
f0121add:	83 c4 10             	add    $0x10,%esp
f0121ae0:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121ae6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121aec:	89 c1                	mov    %eax,%ecx
f0121aee:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121af5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121afa:	0f b6 d0             	movzbl %al,%edx
f0121afd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121b00:	01 d0                	add    %edx,%eax
f0121b02:	48                   	dec    %eax
f0121b03:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121b06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b09:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b0e:	f7 75 84             	divl   -0x7c(%ebp)
f0121b11:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b14:	29 d0                	sub    %edx,%eax
f0121b16:	89 c3                	mov    %eax,%ebx
f0121b18:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121b1f:	10 00 00 
f0121b22:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121b27:	0f b6 c0             	movzbl %al,%eax
f0121b2a:	c1 e0 04             	shl    $0x4,%eax
f0121b2d:	89 c2                	mov    %eax,%edx
f0121b2f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121b35:	01 d0                	add    %edx,%eax
f0121b37:	48                   	dec    %eax
f0121b38:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121b3e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b49:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121b4f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121b55:	29 d0                	sub    %edx,%eax
f0121b57:	01 d8                	add    %ebx,%eax
f0121b59:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121b5e:	39 c1                	cmp    %eax,%ecx
f0121b60:	74 17                	je     f0121b79 <test_kfree_bestfirstfit+0x59c>
f0121b62:	83 ec 04             	sub    $0x4,%esp
f0121b65:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121b6a:	68 c3 06 00 00       	push   $0x6c3
f0121b6f:	68 d2 99 13 f0       	push   $0xf01399d2
f0121b74:	e8 37 e6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b79:	e8 06 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121b7e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b81:	74 17                	je     f0121b9a <test_kfree_bestfirstfit+0x5bd>
f0121b83:	83 ec 04             	sub    $0x4,%esp
f0121b86:	68 ec 99 13 f0       	push   $0xf01399ec
f0121b8b:	68 c4 06 00 00       	push   $0x6c4
f0121b90:	68 d2 99 13 f0       	push   $0xf01399d2
f0121b95:	e8 16 e6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b9a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b9d:	e8 24 ae fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ba2:	29 c3                	sub    %eax,%ebx
f0121ba4:	89 d8                	mov    %ebx,%eax
f0121ba6:	83 f8 02             	cmp    $0x2,%eax
f0121ba9:	74 17                	je     f0121bc2 <test_kfree_bestfirstfit+0x5e5>
f0121bab:	83 ec 04             	sub    $0x4,%esp
f0121bae:	68 54 9a 13 f0       	push   $0xf0139a54
f0121bb3:	68 c5 06 00 00       	push   $0x6c5
f0121bb8:	68 d2 99 13 f0       	push   $0xf01399d2
f0121bbd:	e8 ee e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121bc2:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0121bc9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121bcc:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121bd2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121bd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121bdc:	eb 0e                	jmp    f0121bec <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f0121bde:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121be1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121be4:	01 d0                	add    %edx,%eax
f0121be6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121be9:	ff 45 f4             	incl   -0xc(%ebp)
f0121bec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121bf2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121bf5:	7f e7                	jg     f0121bde <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121bf7:	e8 ca ad fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121bfc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bff:	e8 80 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121c04:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121c07:	83 ec 0c             	sub    $0xc,%esp
f0121c0a:	68 00 fc 2f 00       	push   $0x2ffc00
f0121c0f:	e8 4b 63 fe ff       	call   f0107f5f <kmalloc>
f0121c14:	83 c4 10             	add    $0x10,%esp
f0121c17:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c1d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121c23:	89 c1                	mov    %eax,%ecx
f0121c25:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121c2c:	10 00 00 
f0121c2f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121c34:	0f b6 d0             	movzbl %al,%edx
f0121c37:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121c3d:	01 d0                	add    %edx,%eax
f0121c3f:	48                   	dec    %eax
f0121c40:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121c46:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121c4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c51:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121c57:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121c5d:	29 d0                	sub    %edx,%eax
f0121c5f:	89 c3                	mov    %eax,%ebx
f0121c61:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121c68:	10 00 00 
f0121c6b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121c70:	0f b6 c0             	movzbl %al,%eax
f0121c73:	c1 e0 04             	shl    $0x4,%eax
f0121c76:	89 c2                	mov    %eax,%edx
f0121c78:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121c7e:	01 d0                	add    %edx,%eax
f0121c80:	48                   	dec    %eax
f0121c81:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121c87:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121c8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c92:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121c98:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121c9e:	29 d0                	sub    %edx,%eax
f0121ca0:	01 d8                	add    %ebx,%eax
f0121ca2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121ca7:	39 c1                	cmp    %eax,%ecx
f0121ca9:	74 17                	je     f0121cc2 <test_kfree_bestfirstfit+0x6e5>
f0121cab:	83 ec 04             	sub    $0x4,%esp
f0121cae:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121cb3:	68 d1 06 00 00       	push   $0x6d1
f0121cb8:	68 d2 99 13 f0       	push   $0xf01399d2
f0121cbd:	e8 ee e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cc2:	e8 bd 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121cc7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cca:	74 17                	je     f0121ce3 <test_kfree_bestfirstfit+0x706>
f0121ccc:	83 ec 04             	sub    $0x4,%esp
f0121ccf:	68 ec 99 13 f0       	push   $0xf01399ec
f0121cd4:	68 d2 06 00 00       	push   $0x6d2
f0121cd9:	68 d2 99 13 f0       	push   $0xf01399d2
f0121cde:	e8 cd e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ce3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ce6:	e8 db ac fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ceb:	29 c3                	sub    %eax,%ebx
f0121ced:	89 d8                	mov    %ebx,%eax
f0121cef:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121cf4:	74 17                	je     f0121d0d <test_kfree_bestfirstfit+0x730>
f0121cf6:	83 ec 04             	sub    $0x4,%esp
f0121cf9:	68 54 9a 13 f0       	push   $0xf0139a54
f0121cfe:	68 d3 06 00 00       	push   $0x6d3
f0121d03:	68 d2 99 13 f0       	push   $0xf01399d2
f0121d08:	e8 a3 e4 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121d0d:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121d14:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121d17:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121d1d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121d20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d27:	eb 0e                	jmp    f0121d37 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f0121d29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d2c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121d2f:	01 d0                	add    %edx,%eax
f0121d31:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121d34:	ff 45 f4             	incl   -0xc(%ebp)
f0121d37:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121d3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d40:	7f e7                	jg     f0121d29 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121d42:	e8 7f ac fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121d47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d4a:	e8 35 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121d4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121d52:	83 ec 0c             	sub    $0xc,%esp
f0121d55:	68 00 fc 5f 00       	push   $0x5ffc00
f0121d5a:	e8 00 62 fe ff       	call   f0107f5f <kmalloc>
f0121d5f:	83 c4 10             	add    $0x10,%esp
f0121d62:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d68:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121d6e:	89 c1                	mov    %eax,%ecx
f0121d70:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121d77:	10 00 00 
f0121d7a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121d7f:	0f b6 d0             	movzbl %al,%edx
f0121d82:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121d88:	01 d0                	add    %edx,%eax
f0121d8a:	48                   	dec    %eax
f0121d8b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121d91:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121d97:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d9c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121da2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121da8:	29 d0                	sub    %edx,%eax
f0121daa:	89 c3                	mov    %eax,%ebx
f0121dac:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121db3:	10 00 00 
f0121db6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121dbb:	0f b6 c0             	movzbl %al,%eax
f0121dbe:	c1 e0 04             	shl    $0x4,%eax
f0121dc1:	89 c2                	mov    %eax,%edx
f0121dc3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121dc9:	01 d0                	add    %edx,%eax
f0121dcb:	48                   	dec    %eax
f0121dcc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121dd2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121dd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ddd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121de3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121de9:	29 d0                	sub    %edx,%eax
f0121deb:	01 d8                	add    %ebx,%eax
f0121ded:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121df2:	39 c1                	cmp    %eax,%ecx
f0121df4:	74 17                	je     f0121e0d <test_kfree_bestfirstfit+0x830>
f0121df6:	83 ec 04             	sub    $0x4,%esp
f0121df9:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121dfe:	68 df 06 00 00       	push   $0x6df
f0121e03:	68 d2 99 13 f0       	push   $0xf01399d2
f0121e08:	e8 a3 e3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e0d:	e8 72 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e12:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e15:	74 17                	je     f0121e2e <test_kfree_bestfirstfit+0x851>
f0121e17:	83 ec 04             	sub    $0x4,%esp
f0121e1a:	68 ec 99 13 f0       	push   $0xf01399ec
f0121e1f:	68 e0 06 00 00       	push   $0x6e0
f0121e24:	68 d2 99 13 f0       	push   $0xf01399d2
f0121e29:	e8 82 e3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e2e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e31:	e8 90 ab fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121e36:	29 c3                	sub    %eax,%ebx
f0121e38:	89 d8                	mov    %ebx,%eax
f0121e3a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121e3f:	74 17                	je     f0121e58 <test_kfree_bestfirstfit+0x87b>
f0121e41:	83 ec 04             	sub    $0x4,%esp
f0121e44:	68 54 9a 13 f0       	push   $0xf0139a54
f0121e49:	68 e1 06 00 00       	push   $0x6e1
f0121e4e:	68 d2 99 13 f0       	push   $0xf01399d2
f0121e53:	e8 58 e3 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121e58:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0121e5f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e62:	e8 5f ab fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121e67:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e6a:	e8 15 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121e72:	83 ec 0c             	sub    $0xc,%esp
f0121e75:	68 00 38 00 00       	push   $0x3800
f0121e7a:	e8 e0 60 fe ff       	call   f0107f5f <kmalloc>
f0121e7f:	83 c4 10             	add    $0x10,%esp
f0121e82:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121e88:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121e8e:	89 c1                	mov    %eax,%ecx
f0121e90:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121e97:	10 00 00 
f0121e9a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121e9f:	0f b6 d0             	movzbl %al,%edx
f0121ea2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121ea8:	01 d0                	add    %edx,%eax
f0121eaa:	48                   	dec    %eax
f0121eab:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121eb1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121eb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ebc:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121ec2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121ec8:	29 d0                	sub    %edx,%eax
f0121eca:	89 c3                	mov    %eax,%ebx
f0121ecc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121ed3:	10 00 00 
f0121ed6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121edb:	0f b6 c0             	movzbl %al,%eax
f0121ede:	c1 e0 04             	shl    $0x4,%eax
f0121ee1:	89 c2                	mov    %eax,%edx
f0121ee3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121ee9:	01 d0                	add    %edx,%eax
f0121eeb:	48                   	dec    %eax
f0121eec:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121ef2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121efd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121f03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121f09:	29 d0                	sub    %edx,%eax
f0121f0b:	01 d8                	add    %ebx,%eax
f0121f0d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121f12:	39 c1                	cmp    %eax,%ecx
f0121f14:	74 17                	je     f0121f2d <test_kfree_bestfirstfit+0x950>
f0121f16:	83 ec 04             	sub    $0x4,%esp
f0121f19:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0121f1e:	68 e8 06 00 00       	push   $0x6e8
f0121f23:	68 d2 99 13 f0       	push   $0xf01399d2
f0121f28:	e8 83 e2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f2d:	e8 52 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f32:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f35:	74 17                	je     f0121f4e <test_kfree_bestfirstfit+0x971>
f0121f37:	83 ec 04             	sub    $0x4,%esp
f0121f3a:	68 ec 99 13 f0       	push   $0xf01399ec
f0121f3f:	68 e9 06 00 00       	push   $0x6e9
f0121f44:	68 d2 99 13 f0       	push   $0xf01399d2
f0121f49:	e8 62 e2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121f4e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121f51:	e8 70 aa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121f56:	29 c3                	sub    %eax,%ebx
f0121f58:	89 d8                	mov    %ebx,%eax
f0121f5a:	83 f8 04             	cmp    $0x4,%eax
f0121f5d:	74 17                	je     f0121f76 <test_kfree_bestfirstfit+0x999>
f0121f5f:	83 ec 04             	sub    $0x4,%esp
f0121f62:	68 54 9a 13 f0       	push   $0xf0139a54
f0121f67:	68 ea 06 00 00       	push   $0x6ea
f0121f6c:	68 d2 99 13 f0       	push   $0xf01399d2
f0121f71:	e8 3a e2 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121f76:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0121f7d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121f80:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121f86:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121f89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f90:	eb 0e                	jmp    f0121fa0 <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f0121f92:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f95:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121f98:	01 d0                	add    %edx,%eax
f0121f9a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121f9d:	ff 45 f4             	incl   -0xc(%ebp)
f0121fa0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121fa6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121fa9:	7f e7                	jg     f0121f92 <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121fab:	e8 16 aa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121fb0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121fb6:	e8 c9 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121fbb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121fc1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121fc7:	83 ec 0c             	sub    $0xc,%esp
f0121fca:	50                   	push   %eax
f0121fcb:	e8 a9 5f fe ff       	call   f0107f79 <kfree>
f0121fd0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fd3:	e8 ac 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121fd8:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121fde:	74 17                	je     f0121ff7 <test_kfree_bestfirstfit+0xa1a>
f0121fe0:	83 ec 04             	sub    $0x4,%esp
f0121fe3:	68 ec 99 13 f0       	push   $0xf01399ec
f0121fe8:	68 f9 06 00 00       	push   $0x6f9
f0121fed:	68 d2 99 13 f0       	push   $0xf01399d2
f0121ff2:	e8 b9 e1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ff7:	e8 ca a9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ffc:	89 c2                	mov    %eax,%edx
f0121ffe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122004:	29 c2                	sub    %eax,%edx
f0122006:	89 d0                	mov    %edx,%eax
f0122008:	3d 00 02 00 00       	cmp    $0x200,%eax
f012200d:	74 17                	je     f0122026 <test_kfree_bestfirstfit+0xa49>
f012200f:	83 ec 04             	sub    $0x4,%esp
f0122012:	68 5c a1 13 f0       	push   $0xf013a15c
f0122017:	68 fa 06 00 00       	push   $0x6fa
f012201c:	68 d2 99 13 f0       	push   $0xf01399d2
f0122021:	e8 8a e1 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122026:	e8 9b a9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012202b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122031:	e8 4e 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122036:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f012203c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122042:	83 ec 0c             	sub    $0xc,%esp
f0122045:	50                   	push   %eax
f0122046:	e8 2e 5f fe ff       	call   f0107f79 <kfree>
f012204b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012204e:	e8 31 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122053:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0122059:	74 17                	je     f0122072 <test_kfree_bestfirstfit+0xa95>
f012205b:	83 ec 04             	sub    $0x4,%esp
f012205e:	68 ec 99 13 f0       	push   $0xf01399ec
f0122063:	68 00 07 00 00       	push   $0x700
f0122068:	68 d2 99 13 f0       	push   $0xf01399d2
f012206d:	e8 3e e1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122072:	e8 4f a9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122077:	89 c2                	mov    %eax,%edx
f0122079:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012207f:	29 c2                	sub    %eax,%edx
f0122081:	89 d0                	mov    %edx,%eax
f0122083:	83 f8 01             	cmp    $0x1,%eax
f0122086:	74 17                	je     f012209f <test_kfree_bestfirstfit+0xac2>
f0122088:	83 ec 04             	sub    $0x4,%esp
f012208b:	68 5c a1 13 f0       	push   $0xf013a15c
f0122090:	68 01 07 00 00       	push   $0x701
f0122095:	68 d2 99 13 f0       	push   $0xf01399d2
f012209a:	e8 11 e1 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012209f:	e8 22 a9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01220a4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220aa:	e8 d5 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01220af:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01220b5:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01220bb:	83 ec 0c             	sub    $0xc,%esp
f01220be:	50                   	push   %eax
f01220bf:	e8 b5 5e fe ff       	call   f0107f79 <kfree>
f01220c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220c7:	e8 b8 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01220cc:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01220d2:	74 17                	je     f01220eb <test_kfree_bestfirstfit+0xb0e>
f01220d4:	83 ec 04             	sub    $0x4,%esp
f01220d7:	68 ec 99 13 f0       	push   $0xf01399ec
f01220dc:	68 07 07 00 00       	push   $0x707
f01220e1:	68 d2 99 13 f0       	push   $0xf01399d2
f01220e6:	e8 c5 e0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01220eb:	e8 d6 a8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01220f0:	89 c2                	mov    %eax,%edx
f01220f2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01220f8:	29 c2                	sub    %eax,%edx
f01220fa:	89 d0                	mov    %edx,%eax
f01220fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122101:	74 17                	je     f012211a <test_kfree_bestfirstfit+0xb3d>
f0122103:	83 ec 04             	sub    $0x4,%esp
f0122106:	68 5c a1 13 f0       	push   $0xf013a15c
f012210b:	68 08 07 00 00       	push   $0x708
f0122110:	68 d2 99 13 f0       	push   $0xf01399d2
f0122115:	e8 96 e0 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012211a:	e8 a7 a8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012211f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122125:	e8 5a 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012212a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0122130:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0122136:	83 ec 0c             	sub    $0xc,%esp
f0122139:	50                   	push   %eax
f012213a:	e8 3a 5e fe ff       	call   f0107f79 <kfree>
f012213f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122142:	e8 3d 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122147:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012214d:	74 17                	je     f0122166 <test_kfree_bestfirstfit+0xb89>
f012214f:	83 ec 04             	sub    $0x4,%esp
f0122152:	68 ec 99 13 f0       	push   $0xf01399ec
f0122157:	68 0e 07 00 00       	push   $0x70e
f012215c:	68 d2 99 13 f0       	push   $0xf01399d2
f0122161:	e8 4a e0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122166:	e8 5b a8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012216b:	89 c2                	mov    %eax,%edx
f012216d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122173:	29 c2                	sub    %eax,%edx
f0122175:	89 d0                	mov    %edx,%eax
f0122177:	3d 00 06 00 00       	cmp    $0x600,%eax
f012217c:	74 17                	je     f0122195 <test_kfree_bestfirstfit+0xbb8>
f012217e:	83 ec 04             	sub    $0x4,%esp
f0122181:	68 5c a1 13 f0       	push   $0xf013a15c
f0122186:	68 0f 07 00 00       	push   $0x70f
f012218b:	68 d2 99 13 f0       	push   $0xf01399d2
f0122190:	e8 1b e0 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122195:	83 ec 0c             	sub    $0xc,%esp
f0122198:	68 94 a1 13 f0       	push   $0xf013a194
f012219d:	e8 8f ec fd ff       	call   f0100e31 <cprintf>
f01221a2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01221a5:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01221ab:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01221ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221b5:	eb 1e                	jmp    f01221d5 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f01221b7:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01221bd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01221c0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01221c3:	01 c8                	add    %ecx,%eax
f01221c5:	8a 00                	mov    (%eax),%al
f01221c7:	0f be c0             	movsbl %al,%eax
f01221ca:	01 d0                	add    %edx,%eax
f01221cc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01221d2:	ff 45 f4             	incl   -0xc(%ebp)
f01221d5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01221db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221de:	7f d7                	jg     f01221b7 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01221e0:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01221e6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01221ec:	89 c1                	mov    %eax,%ecx
f01221ee:	01 c9                	add    %ecx,%ecx
f01221f0:	01 c8                	add    %ecx,%eax
f01221f2:	39 c2                	cmp    %eax,%edx
f01221f4:	74 17                	je     f012220d <test_kfree_bestfirstfit+0xc30>
f01221f6:	83 ec 04             	sub    $0x4,%esp
f01221f9:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01221fe:	68 1c 07 00 00       	push   $0x71c
f0122203:	68 d2 99 13 f0       	push   $0xf01399d2
f0122208:	e8 a3 df fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012220d:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0122213:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122216:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012221d:	eb 1e                	jmp    f012223d <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f012221f:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0122225:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122228:	8b 45 98             	mov    -0x68(%ebp),%eax
f012222b:	01 c8                	add    %ecx,%eax
f012222d:	8a 00                	mov    (%eax),%al
f012222f:	0f be c0             	movsbl %al,%eax
f0122232:	01 d0                	add    %edx,%eax
f0122234:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012223a:	ff 45 f4             	incl   -0xc(%ebp)
f012223d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122243:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122246:	7f d7                	jg     f012221f <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122248:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012224e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0122254:	c1 e2 02             	shl    $0x2,%edx
f0122257:	39 d0                	cmp    %edx,%eax
f0122259:	74 17                	je     f0122272 <test_kfree_bestfirstfit+0xc95>
f012225b:	83 ec 04             	sub    $0x4,%esp
f012225e:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0122263:	68 24 07 00 00       	push   $0x724
f0122268:	68 d2 99 13 f0       	push   $0xf01399d2
f012226d:	e8 3e df fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122272:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122278:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012227b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122282:	eb 1e                	jmp    f01222a2 <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0122284:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012228a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012228d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122290:	01 c8                	add    %ecx,%eax
f0122292:	8a 00                	mov    (%eax),%al
f0122294:	0f be c0             	movsbl %al,%eax
f0122297:	01 d0                	add    %edx,%eax
f0122299:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012229f:	ff 45 f4             	incl   -0xc(%ebp)
f01222a2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01222a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01222ab:	7f d7                	jg     f0122284 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01222ad:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f01222b3:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f01222b9:	89 d0                	mov    %edx,%eax
f01222bb:	c1 e0 02             	shl    $0x2,%eax
f01222be:	01 d0                	add    %edx,%eax
f01222c0:	39 c1                	cmp    %eax,%ecx
f01222c2:	74 17                	je     f01222db <test_kfree_bestfirstfit+0xcfe>
f01222c4:	83 ec 04             	sub    $0x4,%esp
f01222c7:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01222cc:	68 2c 07 00 00       	push   $0x72c
f01222d1:	68 d2 99 13 f0       	push   $0xf01399d2
f01222d6:	e8 d5 de fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01222db:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01222e1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01222e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01222eb:	eb 1e                	jmp    f012230b <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f01222ed:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01222f3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01222f6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01222f9:	01 c8                	add    %ecx,%eax
f01222fb:	8a 00                	mov    (%eax),%al
f01222fd:	0f be c0             	movsbl %al,%eax
f0122300:	01 d0                	add    %edx,%eax
f0122302:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122308:	ff 45 f4             	incl   -0xc(%ebp)
f012230b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122311:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122314:	7f d7                	jg     f01222ed <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122316:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f012231c:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0122322:	89 d0                	mov    %edx,%eax
f0122324:	01 c0                	add    %eax,%eax
f0122326:	01 d0                	add    %edx,%eax
f0122328:	01 c0                	add    %eax,%eax
f012232a:	01 d0                	add    %edx,%eax
f012232c:	39 c1                	cmp    %eax,%ecx
f012232e:	74 17                	je     f0122347 <test_kfree_bestfirstfit+0xd6a>
f0122330:	83 ec 04             	sub    $0x4,%esp
f0122333:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0122338:	68 34 07 00 00       	push   $0x734
f012233d:	68 d2 99 13 f0       	push   $0xf01399d2
f0122342:	e8 69 de fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0122347:	83 ec 0c             	sub    $0xc,%esp
f012234a:	68 eb a1 13 f0       	push   $0xf013a1eb
f012234f:	e8 dd ea fd ff       	call   f0100e31 <cprintf>
f0122354:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122357:	e8 6a a6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012235c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012235f:	e8 20 23 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122364:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122367:	83 ec 0c             	sub    $0xc,%esp
f012236a:	68 00 00 30 00       	push   $0x300000
f012236f:	e8 eb 5b fe ff       	call   f0107f5f <kmalloc>
f0122374:	83 c4 10             	add    $0x10,%esp
f0122377:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012237d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122383:	89 c1                	mov    %eax,%ecx
f0122385:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012238c:	10 00 00 
f012238f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122394:	0f b6 d0             	movzbl %al,%edx
f0122397:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012239d:	01 d0                	add    %edx,%eax
f012239f:	48                   	dec    %eax
f01223a0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01223a6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01223ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01223b1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01223b7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01223bd:	29 d0                	sub    %edx,%eax
f01223bf:	89 c3                	mov    %eax,%ebx
f01223c1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01223c8:	10 00 00 
f01223cb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01223d0:	0f b6 c0             	movzbl %al,%eax
f01223d3:	c1 e0 04             	shl    $0x4,%eax
f01223d6:	89 c2                	mov    %eax,%edx
f01223d8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01223de:	01 d0                	add    %edx,%eax
f01223e0:	48                   	dec    %eax
f01223e1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01223e7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01223ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01223f2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01223f8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01223fe:	29 d0                	sub    %edx,%eax
f0122400:	01 d8                	add    %ebx,%eax
f0122402:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122407:	39 c1                	cmp    %eax,%ecx
f0122409:	74 17                	je     f0122422 <test_kfree_bestfirstfit+0xe45>
f012240b:	83 ec 04             	sub    $0x4,%esp
f012240e:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0122413:	68 3f 07 00 00       	push   $0x73f
f0122418:	68 d2 99 13 f0       	push   $0xf01399d2
f012241d:	e8 8e dd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122422:	e8 5d 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122427:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012242a:	74 17                	je     f0122443 <test_kfree_bestfirstfit+0xe66>
f012242c:	83 ec 04             	sub    $0x4,%esp
f012242f:	68 ec 99 13 f0       	push   $0xf01399ec
f0122434:	68 40 07 00 00       	push   $0x740
f0122439:	68 d2 99 13 f0       	push   $0xf01399d2
f012243e:	e8 6d dd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122443:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122446:	e8 7b a5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012244b:	29 c3                	sub    %eax,%ebx
f012244d:	89 d8                	mov    %ebx,%eax
f012244f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122454:	74 17                	je     f012246d <test_kfree_bestfirstfit+0xe90>
f0122456:	83 ec 04             	sub    $0x4,%esp
f0122459:	68 54 9a 13 f0       	push   $0xf0139a54
f012245e:	68 41 07 00 00       	push   $0x741
f0122463:	68 d2 99 13 f0       	push   $0xf01399d2
f0122468:	e8 43 dd fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012246d:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0122474:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122477:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012247d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122480:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122487:	eb 0e                	jmp    f0122497 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0122489:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012248c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012248f:	01 d0                	add    %edx,%eax
f0122491:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122494:	ff 45 f4             	incl   -0xc(%ebp)
f0122497:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012249d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224a0:	7f e7                	jg     f0122489 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01224a2:	e8 1f a5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01224a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224aa:	e8 d5 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01224af:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01224b2:	83 ec 0c             	sub    $0xc,%esp
f01224b5:	68 00 08 00 00       	push   $0x800
f01224ba:	e8 a0 5a fe ff       	call   f0107f5f <kmalloc>
f01224bf:	83 c4 10             	add    $0x10,%esp
f01224c2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224c8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01224ce:	89 c1                	mov    %eax,%ecx
f01224d0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01224d7:	10 00 00 
f01224da:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01224df:	0f b6 d0             	movzbl %al,%edx
f01224e2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01224e8:	01 d0                	add    %edx,%eax
f01224ea:	48                   	dec    %eax
f01224eb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01224f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01224f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01224fc:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122502:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122508:	29 d0                	sub    %edx,%eax
f012250a:	89 c3                	mov    %eax,%ebx
f012250c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122513:	10 00 00 
f0122516:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012251b:	0f b6 c0             	movzbl %al,%eax
f012251e:	c1 e0 04             	shl    $0x4,%eax
f0122521:	89 c2                	mov    %eax,%edx
f0122523:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122529:	01 d0                	add    %edx,%eax
f012252b:	48                   	dec    %eax
f012252c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122532:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122538:	ba 00 00 00 00       	mov    $0x0,%edx
f012253d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122543:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122549:	29 d0                	sub    %edx,%eax
f012254b:	01 d8                	add    %ebx,%eax
f012254d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122552:	39 c1                	cmp    %eax,%ecx
f0122554:	74 17                	je     f012256d <test_kfree_bestfirstfit+0xf90>
f0122556:	83 ec 04             	sub    $0x4,%esp
f0122559:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012255e:	68 4d 07 00 00       	push   $0x74d
f0122563:	68 d2 99 13 f0       	push   $0xf01399d2
f0122568:	e8 43 dc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012256d:	e8 12 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122572:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122575:	74 17                	je     f012258e <test_kfree_bestfirstfit+0xfb1>
f0122577:	83 ec 04             	sub    $0x4,%esp
f012257a:	68 ec 99 13 f0       	push   $0xf01399ec
f012257f:	68 4e 07 00 00       	push   $0x74e
f0122584:	68 d2 99 13 f0       	push   $0xf01399d2
f0122589:	e8 22 dc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012258e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122591:	e8 30 a4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122596:	29 c3                	sub    %eax,%ebx
f0122598:	89 d8                	mov    %ebx,%eax
f012259a:	83 f8 01             	cmp    $0x1,%eax
f012259d:	74 17                	je     f01225b6 <test_kfree_bestfirstfit+0xfd9>
f012259f:	83 ec 04             	sub    $0x4,%esp
f01225a2:	68 54 9a 13 f0       	push   $0xf0139a54
f01225a7:	68 4f 07 00 00       	push   $0x74f
f01225ac:	68 d2 99 13 f0       	push   $0xf01399d2
f01225b1:	e8 fa db fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01225b6:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f01225bd:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01225c0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01225c6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01225c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01225d0:	eb 0e                	jmp    f01225e0 <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f01225d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01225d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01225d8:	01 d0                	add    %edx,%eax
f01225da:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01225dd:	ff 45 f4             	incl   -0xc(%ebp)
f01225e0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01225e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01225e9:	7f e7                	jg     f01225d2 <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01225eb:	e8 d6 a3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01225f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225f3:	e8 8c 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01225fb:	83 ec 0c             	sub    $0xc,%esp
f01225fe:	68 00 00 10 00       	push   $0x100000
f0122603:	e8 57 59 fe ff       	call   f0107f5f <kmalloc>
f0122608:	83 c4 10             	add    $0x10,%esp
f012260b:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122611:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122617:	89 c1                	mov    %eax,%ecx
f0122619:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122620:	10 00 00 
f0122623:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122628:	0f b6 d0             	movzbl %al,%edx
f012262b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122631:	01 d0                	add    %edx,%eax
f0122633:	48                   	dec    %eax
f0122634:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012263a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122640:	ba 00 00 00 00       	mov    $0x0,%edx
f0122645:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012264b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122651:	29 d0                	sub    %edx,%eax
f0122653:	89 c3                	mov    %eax,%ebx
f0122655:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012265c:	10 00 00 
f012265f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122664:	0f b6 c0             	movzbl %al,%eax
f0122667:	c1 e0 04             	shl    $0x4,%eax
f012266a:	89 c2                	mov    %eax,%edx
f012266c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122672:	01 d0                	add    %edx,%eax
f0122674:	48                   	dec    %eax
f0122675:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012267b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122681:	ba 00 00 00 00       	mov    $0x0,%edx
f0122686:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012268c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122692:	29 d0                	sub    %edx,%eax
f0122694:	01 d8                	add    %ebx,%eax
f0122696:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012269b:	39 c1                	cmp    %eax,%ecx
f012269d:	74 17                	je     f01226b6 <test_kfree_bestfirstfit+0x10d9>
f012269f:	83 ec 04             	sub    $0x4,%esp
f01226a2:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01226a7:	68 5b 07 00 00       	push   $0x75b
f01226ac:	68 d2 99 13 f0       	push   $0xf01399d2
f01226b1:	e8 fa da fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226b6:	e8 c9 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01226bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226be:	74 17                	je     f01226d7 <test_kfree_bestfirstfit+0x10fa>
f01226c0:	83 ec 04             	sub    $0x4,%esp
f01226c3:	68 ec 99 13 f0       	push   $0xf01399ec
f01226c8:	68 5c 07 00 00       	push   $0x75c
f01226cd:	68 d2 99 13 f0       	push   $0xf01399d2
f01226d2:	e8 d9 da fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226d7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226da:	e8 e7 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01226df:	29 c3                	sub    %eax,%ebx
f01226e1:	89 d8                	mov    %ebx,%eax
f01226e3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01226e8:	74 17                	je     f0122701 <test_kfree_bestfirstfit+0x1124>
f01226ea:	83 ec 04             	sub    $0x4,%esp
f01226ed:	68 54 9a 13 f0       	push   $0xf0139a54
f01226f2:	68 5d 07 00 00       	push   $0x75d
f01226f7:	68 d2 99 13 f0       	push   $0xf01399d2
f01226fc:	e8 af da fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122701:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f0122708:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012270b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122711:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012271b:	eb 0e                	jmp    f012272b <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f012271d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122720:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122723:	01 d0                	add    %edx,%eax
f0122725:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122728:	ff 45 f4             	incl   -0xc(%ebp)
f012272b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122731:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122734:	7f e7                	jg     f012271d <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122736:	83 ec 0c             	sub    $0xc,%esp
f0122739:	68 f2 a1 13 f0       	push   $0xf013a1f2
f012273e:	e8 ee e6 fd ff       	call   f0100e31 <cprintf>
f0122743:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122746:	e8 7b a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012274b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012274e:	e8 31 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122753:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122756:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012275c:	83 ec 0c             	sub    $0xc,%esp
f012275f:	50                   	push   %eax
f0122760:	e8 14 58 fe ff       	call   f0107f79 <kfree>
f0122765:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122768:	e8 17 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f012276d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122770:	74 17                	je     f0122789 <test_kfree_bestfirstfit+0x11ac>
f0122772:	83 ec 04             	sub    $0x4,%esp
f0122775:	68 ec 99 13 f0       	push   $0xf01399ec
f012277a:	68 6d 07 00 00       	push   $0x76d
f012277f:	68 d2 99 13 f0       	push   $0xf01399d2
f0122784:	e8 27 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122789:	e8 38 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012278e:	89 c2                	mov    %eax,%edx
f0122790:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122793:	29 c2                	sub    %eax,%edx
f0122795:	89 d0                	mov    %edx,%eax
f0122797:	83 f8 02             	cmp    $0x2,%eax
f012279a:	74 17                	je     f01227b3 <test_kfree_bestfirstfit+0x11d6>
f012279c:	83 ec 04             	sub    $0x4,%esp
f012279f:	68 5c a1 13 f0       	push   $0xf013a15c
f01227a4:	68 6e 07 00 00       	push   $0x76e
f01227a9:	68 d2 99 13 f0       	push   $0xf01399d2
f01227ae:	e8 fd d9 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01227b3:	e8 0e a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01227b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227bb:	e8 c4 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01227c3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01227c9:	83 ec 0c             	sub    $0xc,%esp
f01227cc:	50                   	push   %eax
f01227cd:	e8 a7 57 fe ff       	call   f0107f79 <kfree>
f01227d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227d5:	e8 aa 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227dd:	74 17                	je     f01227f6 <test_kfree_bestfirstfit+0x1219>
f01227df:	83 ec 04             	sub    $0x4,%esp
f01227e2:	68 ec 99 13 f0       	push   $0xf01399ec
f01227e7:	68 74 07 00 00       	push   $0x774
f01227ec:	68 d2 99 13 f0       	push   $0xf01399d2
f01227f1:	e8 ba d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01227f6:	e8 cb a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01227fb:	89 c2                	mov    %eax,%edx
f01227fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122800:	29 c2                	sub    %eax,%edx
f0122802:	89 d0                	mov    %edx,%eax
f0122804:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122809:	74 17                	je     f0122822 <test_kfree_bestfirstfit+0x1245>
f012280b:	83 ec 04             	sub    $0x4,%esp
f012280e:	68 5c a1 13 f0       	push   $0xf013a15c
f0122813:	68 75 07 00 00       	push   $0x775
f0122818:	68 d2 99 13 f0       	push   $0xf01399d2
f012281d:	e8 8e d9 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122822:	e8 9f a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122827:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012282a:	e8 55 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012282f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122832:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122838:	83 ec 0c             	sub    $0xc,%esp
f012283b:	50                   	push   %eax
f012283c:	e8 38 57 fe ff       	call   f0107f79 <kfree>
f0122841:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122844:	e8 3b 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122849:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012284c:	74 17                	je     f0122865 <test_kfree_bestfirstfit+0x1288>
f012284e:	83 ec 04             	sub    $0x4,%esp
f0122851:	68 ec 99 13 f0       	push   $0xf01399ec
f0122856:	68 7b 07 00 00       	push   $0x77b
f012285b:	68 d2 99 13 f0       	push   $0xf01399d2
f0122860:	e8 4b d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122865:	e8 5c a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012286a:	89 c2                	mov    %eax,%edx
f012286c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012286f:	29 c2                	sub    %eax,%edx
f0122871:	89 d0                	mov    %edx,%eax
f0122873:	83 f8 01             	cmp    $0x1,%eax
f0122876:	74 17                	je     f012288f <test_kfree_bestfirstfit+0x12b2>
f0122878:	83 ec 04             	sub    $0x4,%esp
f012287b:	68 5c a1 13 f0       	push   $0xf013a15c
f0122880:	68 7c 07 00 00       	push   $0x77c
f0122885:	68 d2 99 13 f0       	push   $0xf01399d2
f012288a:	e8 21 d9 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012288f:	e8 32 a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122894:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122897:	e8 e8 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012289c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012289f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01228a5:	83 ec 0c             	sub    $0xc,%esp
f01228a8:	50                   	push   %eax
f01228a9:	e8 cb 56 fe ff       	call   f0107f79 <kfree>
f01228ae:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228b1:	e8 ce 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01228b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228b9:	74 17                	je     f01228d2 <test_kfree_bestfirstfit+0x12f5>
f01228bb:	83 ec 04             	sub    $0x4,%esp
f01228be:	68 ec 99 13 f0       	push   $0xf01399ec
f01228c3:	68 82 07 00 00       	push   $0x782
f01228c8:	68 d2 99 13 f0       	push   $0xf01399d2
f01228cd:	e8 de d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01228d2:	e8 ef a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01228d7:	89 c2                	mov    %eax,%edx
f01228d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01228dc:	29 c2                	sub    %eax,%edx
f01228de:	89 d0                	mov    %edx,%eax
f01228e0:	83 f8 04             	cmp    $0x4,%eax
f01228e3:	74 17                	je     f01228fc <test_kfree_bestfirstfit+0x131f>
f01228e5:	83 ec 04             	sub    $0x4,%esp
f01228e8:	68 5c a1 13 f0       	push   $0xf013a15c
f01228ed:	68 83 07 00 00       	push   $0x783
f01228f2:	68 d2 99 13 f0       	push   $0xf01399d2
f01228f7:	e8 b4 d8 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01228fc:	e8 c5 a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122901:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122904:	e8 7b 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122909:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012290c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122912:	83 ec 0c             	sub    $0xc,%esp
f0122915:	50                   	push   %eax
f0122916:	e8 5e 56 fe ff       	call   f0107f79 <kfree>
f012291b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012291e:	e8 61 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122923:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122926:	74 17                	je     f012293f <test_kfree_bestfirstfit+0x1362>
f0122928:	83 ec 04             	sub    $0x4,%esp
f012292b:	68 ec 99 13 f0       	push   $0xf01399ec
f0122930:	68 89 07 00 00       	push   $0x789
f0122935:	68 d2 99 13 f0       	push   $0xf01399d2
f012293a:	e8 71 d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012293f:	e8 82 a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122944:	89 c2                	mov    %eax,%edx
f0122946:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122949:	29 c2                	sub    %eax,%edx
f012294b:	89 d0                	mov    %edx,%eax
f012294d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122952:	74 17                	je     f012296b <test_kfree_bestfirstfit+0x138e>
f0122954:	83 ec 04             	sub    $0x4,%esp
f0122957:	68 5c a1 13 f0       	push   $0xf013a15c
f012295c:	68 8a 07 00 00       	push   $0x78a
f0122961:	68 d2 99 13 f0       	push   $0xf01399d2
f0122966:	e8 45 d8 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012296b:	e8 56 a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122970:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122973:	e8 0c 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122978:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012297b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122981:	83 ec 0c             	sub    $0xc,%esp
f0122984:	50                   	push   %eax
f0122985:	e8 ef 55 fe ff       	call   f0107f79 <kfree>
f012298a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012298d:	e8 f2 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122992:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122995:	74 17                	je     f01229ae <test_kfree_bestfirstfit+0x13d1>
f0122997:	83 ec 04             	sub    $0x4,%esp
f012299a:	68 ec 99 13 f0       	push   $0xf01399ec
f012299f:	68 90 07 00 00       	push   $0x790
f01229a4:	68 d2 99 13 f0       	push   $0xf01399d2
f01229a9:	e8 02 d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01229ae:	e8 13 a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01229b3:	89 c2                	mov    %eax,%edx
f01229b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229b8:	29 c2                	sub    %eax,%edx
f01229ba:	89 d0                	mov    %edx,%eax
f01229bc:	83 f8 01             	cmp    $0x1,%eax
f01229bf:	74 17                	je     f01229d8 <test_kfree_bestfirstfit+0x13fb>
f01229c1:	83 ec 04             	sub    $0x4,%esp
f01229c4:	68 5c a1 13 f0       	push   $0xf013a15c
f01229c9:	68 91 07 00 00       	push   $0x791
f01229ce:	68 d2 99 13 f0       	push   $0xf01399d2
f01229d3:	e8 d8 d7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01229d8:	e8 e9 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01229dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229e0:	e8 9f 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01229e8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01229ee:	83 ec 0c             	sub    $0xc,%esp
f01229f1:	50                   	push   %eax
f01229f2:	e8 82 55 fe ff       	call   f0107f79 <kfree>
f01229f7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229fa:	e8 85 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229ff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a02:	74 17                	je     f0122a1b <test_kfree_bestfirstfit+0x143e>
f0122a04:	83 ec 04             	sub    $0x4,%esp
f0122a07:	68 ec 99 13 f0       	push   $0xf01399ec
f0122a0c:	68 97 07 00 00       	push   $0x797
f0122a11:	68 d2 99 13 f0       	push   $0xf01399d2
f0122a16:	e8 95 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a1b:	e8 a6 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122a20:	89 c2                	mov    %eax,%edx
f0122a22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a25:	29 c2                	sub    %eax,%edx
f0122a27:	89 d0                	mov    %edx,%eax
f0122a29:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122a2e:	74 17                	je     f0122a47 <test_kfree_bestfirstfit+0x146a>
f0122a30:	83 ec 04             	sub    $0x4,%esp
f0122a33:	68 5c a1 13 f0       	push   $0xf013a15c
f0122a38:	68 98 07 00 00       	push   $0x798
f0122a3d:	68 d2 99 13 f0       	push   $0xf01399d2
f0122a42:	e8 69 d7 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122a47:	e8 7a 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122a4c:	89 c2                	mov    %eax,%edx
f0122a4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122a51:	39 c2                	cmp    %eax,%edx
f0122a53:	74 17                	je     f0122a6c <test_kfree_bestfirstfit+0x148f>
f0122a55:	83 ec 04             	sub    $0x4,%esp
f0122a58:	68 fc a1 13 f0       	push   $0xf013a1fc
f0122a5d:	68 9a 07 00 00       	push   $0x79a
f0122a62:	68 d2 99 13 f0       	push   $0xf01399d2
f0122a67:	e8 44 d7 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f0122a6c:	83 ec 0c             	sub    $0xc,%esp
f0122a6f:	68 30 a2 13 f0       	push   $0xf013a230
f0122a74:	e8 b8 e3 fd ff       	call   f0100e31 <cprintf>
f0122a79:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122a7c:	83 ec 0c             	sub    $0xc,%esp
f0122a7f:	6a 03                	push   $0x3
f0122a81:	e8 db a3 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0122a86:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122a89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a90:	e9 82 00 00 00       	jmp    f0122b17 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f0122a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122a98:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0122a9f:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0122aa2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122aa5:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122aa8:	e8 a2 a3 fe ff       	call   f010ce4f <sys_rcr2>
f0122aad:	89 c2                	mov    %eax,%edx
f0122aaf:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122ab2:	39 c2                	cmp    %eax,%edx
f0122ab4:	74 17                	je     f0122acd <test_kfree_bestfirstfit+0x14f0>
f0122ab6:	83 ec 04             	sub    $0x4,%esp
f0122ab9:	68 38 a2 13 f0       	push   $0xf013a238
f0122abe:	68 a9 07 00 00       	push   $0x7a9
f0122ac3:	68 d2 99 13 f0       	push   $0xf01399d2
f0122ac8:	e8 e3 d6 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0122acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ad0:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122ad7:	89 c2                	mov    %eax,%edx
f0122ad9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122adc:	01 d0                	add    %edx,%eax
f0122ade:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122ae1:	e8 69 a3 fe ff       	call   f010ce4f <sys_rcr2>
f0122ae6:	89 c2                	mov    %eax,%edx
f0122ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122aeb:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122af2:	89 c1                	mov    %eax,%ecx
f0122af4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122af7:	01 c8                	add    %ecx,%eax
f0122af9:	39 c2                	cmp    %eax,%edx
f0122afb:	74 17                	je     f0122b14 <test_kfree_bestfirstfit+0x1537>
f0122afd:	83 ec 04             	sub    $0x4,%esp
f0122b00:	68 38 a2 13 f0       	push   $0xf013a238
f0122b05:	68 ab 07 00 00       	push   $0x7ab
f0122b0a:	68 d2 99 13 f0       	push   $0xf01399d2
f0122b0f:	e8 9c d6 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122b14:	ff 45 f4             	incl   -0xc(%ebp)
f0122b17:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122b1b:	0f 8e 74 ff ff ff    	jle    f0122a95 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122b21:	83 ec 0c             	sub    $0xc,%esp
f0122b24:	6a 00                	push   $0x0
f0122b26:	e8 36 a3 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0122b2b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122b2e:	83 ec 0c             	sub    $0xc,%esp
f0122b31:	68 7d a2 13 f0       	push   $0xf013a27d
f0122b36:	e8 f6 e2 fd ff       	call   f0100e31 <cprintf>
f0122b3b:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b3e:	e8 83 9e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122b43:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b46:	e8 39 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122b4b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122b4e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122b54:	83 ec 0c             	sub    $0xc,%esp
f0122b57:	50                   	push   %eax
f0122b58:	e8 1c 54 fe ff       	call   f0107f79 <kfree>
f0122b5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b60:	e8 1f 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122b65:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b68:	74 17                	je     f0122b81 <test_kfree_bestfirstfit+0x15a4>
f0122b6a:	83 ec 04             	sub    $0x4,%esp
f0122b6d:	68 ec 99 13 f0       	push   $0xf01399ec
f0122b72:	68 b9 07 00 00       	push   $0x7b9
f0122b77:	68 d2 99 13 f0       	push   $0xf01399d2
f0122b7c:	e8 2f d6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122b81:	e8 40 9e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122b86:	89 c2                	mov    %eax,%edx
f0122b88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122b8b:	39 c2                	cmp    %eax,%edx
f0122b8d:	74 17                	je     f0122ba6 <test_kfree_bestfirstfit+0x15c9>
f0122b8f:	83 ec 04             	sub    $0x4,%esp
f0122b92:	68 84 a2 13 f0       	push   $0xf013a284
f0122b97:	68 ba 07 00 00       	push   $0x7ba
f0122b9c:	68 d2 99 13 f0       	push   $0xf01399d2
f0122ba1:	e8 0a d6 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ba6:	e8 1b 9e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122bab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bae:	e8 d1 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122bb3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122bb6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122bbc:	83 ec 0c             	sub    $0xc,%esp
f0122bbf:	50                   	push   %eax
f0122bc0:	e8 b4 53 fe ff       	call   f0107f79 <kfree>
f0122bc5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122bc8:	e8 b7 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122bcd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122bd0:	74 17                	je     f0122be9 <test_kfree_bestfirstfit+0x160c>
f0122bd2:	83 ec 04             	sub    $0x4,%esp
f0122bd5:	68 ec 99 13 f0       	push   $0xf01399ec
f0122bda:	68 c0 07 00 00       	push   $0x7c0
f0122bdf:	68 d2 99 13 f0       	push   $0xf01399d2
f0122be4:	e8 c7 d5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122be9:	e8 d8 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122bee:	89 c2                	mov    %eax,%edx
f0122bf0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122bf3:	39 c2                	cmp    %eax,%edx
f0122bf5:	74 17                	je     f0122c0e <test_kfree_bestfirstfit+0x1631>
f0122bf7:	83 ec 04             	sub    $0x4,%esp
f0122bfa:	68 84 a2 13 f0       	push   $0xf013a284
f0122bff:	68 c1 07 00 00       	push   $0x7c1
f0122c04:	68 d2 99 13 f0       	push   $0xf01399d2
f0122c09:	e8 a2 d5 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c0e:	e8 b3 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122c13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c16:	e8 69 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122c1e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122c24:	83 ec 0c             	sub    $0xc,%esp
f0122c27:	50                   	push   %eax
f0122c28:	e8 4c 53 fe ff       	call   f0107f79 <kfree>
f0122c2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c30:	e8 4f 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c38:	74 17                	je     f0122c51 <test_kfree_bestfirstfit+0x1674>
f0122c3a:	83 ec 04             	sub    $0x4,%esp
f0122c3d:	68 ec 99 13 f0       	push   $0xf01399ec
f0122c42:	68 c7 07 00 00       	push   $0x7c7
f0122c47:	68 d2 99 13 f0       	push   $0xf01399d2
f0122c4c:	e8 5f d5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122c51:	e8 70 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122c56:	89 c2                	mov    %eax,%edx
f0122c58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c5b:	39 c2                	cmp    %eax,%edx
f0122c5d:	74 17                	je     f0122c76 <test_kfree_bestfirstfit+0x1699>
f0122c5f:	83 ec 04             	sub    $0x4,%esp
f0122c62:	68 84 a2 13 f0       	push   $0xf013a284
f0122c67:	68 c8 07 00 00       	push   $0x7c8
f0122c6c:	68 d2 99 13 f0       	push   $0xf01399d2
f0122c71:	e8 3a d5 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c76:	e8 4b 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122c7b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c7e:	e8 01 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c83:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122c86:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122c8c:	83 ec 0c             	sub    $0xc,%esp
f0122c8f:	50                   	push   %eax
f0122c90:	e8 e4 52 fe ff       	call   f0107f79 <kfree>
f0122c95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c98:	e8 e7 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ca0:	74 17                	je     f0122cb9 <test_kfree_bestfirstfit+0x16dc>
f0122ca2:	83 ec 04             	sub    $0x4,%esp
f0122ca5:	68 ec 99 13 f0       	push   $0xf01399ec
f0122caa:	68 ce 07 00 00       	push   $0x7ce
f0122caf:	68 d2 99 13 f0       	push   $0xf01399d2
f0122cb4:	e8 f7 d4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122cb9:	e8 08 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122cbe:	89 c2                	mov    %eax,%edx
f0122cc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122cc3:	39 c2                	cmp    %eax,%edx
f0122cc5:	74 17                	je     f0122cde <test_kfree_bestfirstfit+0x1701>
f0122cc7:	83 ec 04             	sub    $0x4,%esp
f0122cca:	68 84 a2 13 f0       	push   $0xf013a284
f0122ccf:	68 cf 07 00 00       	push   $0x7cf
f0122cd4:	68 d2 99 13 f0       	push   $0xf01399d2
f0122cd9:	e8 d2 d4 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122cde:	83 ec 0c             	sub    $0xc,%esp
f0122ce1:	68 cb a2 13 f0       	push   $0xf013a2cb
f0122ce6:	e8 46 e1 fd ff       	call   f0100e31 <cprintf>
f0122ceb:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122cee:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122cf5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122cfc:	eb 48                	jmp    f0122d46 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122cfe:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122d01:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0122d06:	83 ec 04             	sub    $0x4,%esp
f0122d09:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122d0f:	51                   	push   %ecx
f0122d10:	52                   	push   %edx
f0122d11:	50                   	push   %eax
f0122d12:	e8 d0 47 fe ff       	call   f01074e7 <get_page_table>
f0122d17:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122d1a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122d20:	85 c0                	test   %eax,%eax
f0122d22:	75 17                	jne    f0122d3b <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122d24:	83 ec 04             	sub    $0x4,%esp
f0122d27:	68 d4 a2 13 f0       	push   $0xf013a2d4
f0122d2c:	68 dd 07 00 00       	push   $0x7dd
f0122d31:	68 d2 99 13 f0       	push   $0xf01399d2
f0122d36:	e8 75 d4 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122d3b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122d42:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122d46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122d4a:	78 b2                	js     f0122cfe <test_kfree_bestfirstfit+0x1721>
f0122d4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122d50:	7f 09                	jg     f0122d5b <test_kfree_bestfirstfit+0x177e>
f0122d52:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122d59:	76 a3                	jbe    f0122cfe <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122d5b:	83 ec 0c             	sub    $0xc,%esp
f0122d5e:	68 b6 9b 13 f0       	push   $0xf0139bb6
f0122d63:	e8 c9 e0 fd ff       	call   f0100e31 <cprintf>
f0122d68:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122d6b:	83 ec 0c             	sub    $0xc,%esp
f0122d6e:	68 3c a3 13 f0       	push   $0xf013a33c
f0122d73:	e8 b9 e0 fd ff       	call   f0100e31 <cprintf>
f0122d78:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122d7b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122d80:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122d83:	5b                   	pop    %ebx
f0122d84:	5f                   	pop    %edi
f0122d85:	5d                   	pop    %ebp
f0122d86:	c3                   	ret    

f0122d87 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122d87:	55                   	push   %ebp
f0122d88:	89 e5                	mov    %esp,%ebp
f0122d8a:	57                   	push   %edi
f0122d8b:	56                   	push   %esi
f0122d8c:	53                   	push   %ebx
f0122d8d:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122d93:	83 ec 0c             	sub    $0xc,%esp
f0122d96:	68 14 99 13 f0       	push   $0xf0139914
f0122d9b:	e8 91 e0 fd ff       	call   f0100e31 <cprintf>
f0122da0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122da3:	83 ec 0c             	sub    $0xc,%esp
f0122da6:	68 44 99 13 f0       	push   $0xf0139944
f0122dab:	e8 81 e0 fd ff       	call   f0100e31 <cprintf>
f0122db0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122db3:	83 ec 0c             	sub    $0xc,%esp
f0122db6:	68 14 99 13 f0       	push   $0xf0139914
f0122dbb:	e8 71 e0 fd ff       	call   f0100e31 <cprintf>
f0122dc0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122dc3:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122dc7:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122dcb:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122dd1:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122dd7:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122dde:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122de5:	e8 dc 9b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122dea:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122ded:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122df3:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122df8:	b8 00 00 00 00       	mov    $0x0,%eax
f0122dfd:	89 d7                	mov    %edx,%edi
f0122dff:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122e01:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122e07:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e11:	89 d7                	mov    %edx,%edi
f0122e13:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122e15:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0122e1b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e20:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e25:	89 d7                	mov    %edx,%edi
f0122e27:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e29:	e8 98 9b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122e2e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e31:	e8 4e 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e36:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122e39:	83 ec 0c             	sub    $0xc,%esp
f0122e3c:	68 00 fc 1f 00       	push   $0x1ffc00
f0122e41:	e8 19 51 fe ff       	call   f0107f5f <kmalloc>
f0122e46:	83 c4 10             	add    $0x10,%esp
f0122e49:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e4f:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122e55:	89 c1                	mov    %eax,%ecx
f0122e57:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122e5e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122e63:	0f b6 d0             	movzbl %al,%edx
f0122e66:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122e69:	01 d0                	add    %edx,%eax
f0122e6b:	48                   	dec    %eax
f0122e6c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122e6f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122e72:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e77:	f7 75 a0             	divl   -0x60(%ebp)
f0122e7a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122e7d:	29 d0                	sub    %edx,%eax
f0122e7f:	89 c3                	mov    %eax,%ebx
f0122e81:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122e88:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122e8d:	0f b6 c0             	movzbl %al,%eax
f0122e90:	c1 e0 04             	shl    $0x4,%eax
f0122e93:	89 c2                	mov    %eax,%edx
f0122e95:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122e98:	01 d0                	add    %edx,%eax
f0122e9a:	48                   	dec    %eax
f0122e9b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122e9e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ea1:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ea6:	f7 75 98             	divl   -0x68(%ebp)
f0122ea9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122eac:	29 d0                	sub    %edx,%eax
f0122eae:	01 d8                	add    %ebx,%eax
f0122eb0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122eb5:	39 c1                	cmp    %eax,%ecx
f0122eb7:	74 17                	je     f0122ed0 <test_kheap_phys_addr+0x149>
f0122eb9:	83 ec 04             	sub    $0x4,%esp
f0122ebc:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0122ec1:	68 0a 08 00 00       	push   $0x80a
f0122ec6:	68 d2 99 13 f0       	push   $0xf01399d2
f0122ecb:	e8 e0 d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ed0:	e8 af 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ed5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ed8:	74 17                	je     f0122ef1 <test_kheap_phys_addr+0x16a>
f0122eda:	83 ec 04             	sub    $0x4,%esp
f0122edd:	68 ec 99 13 f0       	push   $0xf01399ec
f0122ee2:	68 0b 08 00 00       	push   $0x80b
f0122ee7:	68 d2 99 13 f0       	push   $0xf01399d2
f0122eec:	e8 bf d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ef1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ef4:	e8 cd 9a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122ef9:	29 c3                	sub    %eax,%ebx
f0122efb:	89 d8                	mov    %ebx,%eax
f0122efd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122f02:	74 17                	je     f0122f1b <test_kheap_phys_addr+0x194>
f0122f04:	83 ec 04             	sub    $0x4,%esp
f0122f07:	68 54 9a 13 f0       	push   $0xf0139a54
f0122f0c:	68 0c 08 00 00       	push   $0x80c
f0122f11:	68 d2 99 13 f0       	push   $0xf01399d2
f0122f16:	e8 95 d2 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f1b:	e8 a6 9a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122f20:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f23:	e8 5c 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122f28:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122f2b:	83 ec 0c             	sub    $0xc,%esp
f0122f2e:	68 00 fc 1f 00       	push   $0x1ffc00
f0122f33:	e8 27 50 fe ff       	call   f0107f5f <kmalloc>
f0122f38:	83 c4 10             	add    $0x10,%esp
f0122f3b:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f41:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122f47:	89 c1                	mov    %eax,%ecx
f0122f49:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122f50:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122f55:	0f b6 d0             	movzbl %al,%edx
f0122f58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122f5b:	01 d0                	add    %edx,%eax
f0122f5d:	48                   	dec    %eax
f0122f5e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122f61:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122f64:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f69:	f7 75 90             	divl   -0x70(%ebp)
f0122f6c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122f6f:	29 d0                	sub    %edx,%eax
f0122f71:	89 c3                	mov    %eax,%ebx
f0122f73:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122f7a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122f7f:	0f b6 c0             	movzbl %al,%eax
f0122f82:	c1 e0 04             	shl    $0x4,%eax
f0122f85:	89 c2                	mov    %eax,%edx
f0122f87:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122f8a:	01 d0                	add    %edx,%eax
f0122f8c:	48                   	dec    %eax
f0122f8d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122f90:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122f93:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f98:	f7 75 88             	divl   -0x78(%ebp)
f0122f9b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122f9e:	29 d0                	sub    %edx,%eax
f0122fa0:	01 d8                	add    %ebx,%eax
f0122fa2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122fa7:	39 c1                	cmp    %eax,%ecx
f0122fa9:	74 17                	je     f0122fc2 <test_kheap_phys_addr+0x23b>
f0122fab:	83 ec 04             	sub    $0x4,%esp
f0122fae:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0122fb3:	68 12 08 00 00       	push   $0x812
f0122fb8:	68 d2 99 13 f0       	push   $0xf01399d2
f0122fbd:	e8 ee d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fc2:	e8 bd 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122fc7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122fca:	74 17                	je     f0122fe3 <test_kheap_phys_addr+0x25c>
f0122fcc:	83 ec 04             	sub    $0x4,%esp
f0122fcf:	68 ec 99 13 f0       	push   $0xf01399ec
f0122fd4:	68 13 08 00 00       	push   $0x813
f0122fd9:	68 d2 99 13 f0       	push   $0xf01399d2
f0122fde:	e8 cd d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122fe3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122fe6:	e8 db 99 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122feb:	29 c3                	sub    %eax,%ebx
f0122fed:	89 d8                	mov    %ebx,%eax
f0122fef:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122ff4:	74 17                	je     f012300d <test_kheap_phys_addr+0x286>
f0122ff6:	83 ec 04             	sub    $0x4,%esp
f0122ff9:	68 54 9a 13 f0       	push   $0xf0139a54
f0122ffe:	68 14 08 00 00       	push   $0x814
f0123003:	68 d2 99 13 f0       	push   $0xf01399d2
f0123008:	e8 a3 d1 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012300d:	e8 b4 99 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123012:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123015:	e8 6a 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012301a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012301d:	83 ec 0c             	sub    $0xc,%esp
f0123020:	68 00 08 00 00       	push   $0x800
f0123025:	e8 35 4f fe ff       	call   f0107f5f <kmalloc>
f012302a:	83 c4 10             	add    $0x10,%esp
f012302d:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123033:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0123039:	89 c1                	mov    %eax,%ecx
f012303b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123042:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123047:	0f b6 d0             	movzbl %al,%edx
f012304a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012304d:	01 d0                	add    %edx,%eax
f012304f:	48                   	dec    %eax
f0123050:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123056:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012305c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123061:	f7 75 80             	divl   -0x80(%ebp)
f0123064:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012306a:	29 d0                	sub    %edx,%eax
f012306c:	89 c3                	mov    %eax,%ebx
f012306e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123075:	10 00 00 
f0123078:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012307d:	0f b6 c0             	movzbl %al,%eax
f0123080:	c1 e0 04             	shl    $0x4,%eax
f0123083:	89 c2                	mov    %eax,%edx
f0123085:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012308b:	01 d0                	add    %edx,%eax
f012308d:	48                   	dec    %eax
f012308e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123094:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012309a:	ba 00 00 00 00       	mov    $0x0,%edx
f012309f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01230a5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01230ab:	29 d0                	sub    %edx,%eax
f01230ad:	01 d8                	add    %ebx,%eax
f01230af:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01230b4:	39 c1                	cmp    %eax,%ecx
f01230b6:	74 17                	je     f01230cf <test_kheap_phys_addr+0x348>
f01230b8:	83 ec 04             	sub    $0x4,%esp
f01230bb:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01230c0:	68 1a 08 00 00       	push   $0x81a
f01230c5:	68 d2 99 13 f0       	push   $0xf01399d2
f01230ca:	e8 e1 d0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230cf:	e8 b0 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01230d4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01230d7:	74 17                	je     f01230f0 <test_kheap_phys_addr+0x369>
f01230d9:	83 ec 04             	sub    $0x4,%esp
f01230dc:	68 ec 99 13 f0       	push   $0xf01399ec
f01230e1:	68 1b 08 00 00       	push   $0x81b
f01230e6:	68 d2 99 13 f0       	push   $0xf01399d2
f01230eb:	e8 c0 d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01230f0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01230f3:	e8 ce 98 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01230f8:	29 c3                	sub    %eax,%ebx
f01230fa:	89 d8                	mov    %ebx,%eax
f01230fc:	83 f8 01             	cmp    $0x1,%eax
f01230ff:	74 17                	je     f0123118 <test_kheap_phys_addr+0x391>
f0123101:	83 ec 04             	sub    $0x4,%esp
f0123104:	68 54 9a 13 f0       	push   $0xf0139a54
f0123109:	68 1c 08 00 00       	push   $0x81c
f012310e:	68 d2 99 13 f0       	push   $0xf01399d2
f0123113:	e8 98 d0 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123118:	e8 a9 98 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012311d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123120:	e8 5f 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123125:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123128:	83 ec 0c             	sub    $0xc,%esp
f012312b:	68 00 08 00 00       	push   $0x800
f0123130:	e8 2a 4e fe ff       	call   f0107f5f <kmalloc>
f0123135:	83 c4 10             	add    $0x10,%esp
f0123138:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012313e:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0123144:	89 c1                	mov    %eax,%ecx
f0123146:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012314d:	10 00 00 
f0123150:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123155:	0f b6 d0             	movzbl %al,%edx
f0123158:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012315e:	01 d0                	add    %edx,%eax
f0123160:	48                   	dec    %eax
f0123161:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123167:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012316d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123172:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123178:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012317e:	29 d0                	sub    %edx,%eax
f0123180:	89 c3                	mov    %eax,%ebx
f0123182:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123189:	10 00 00 
f012318c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123191:	0f b6 c0             	movzbl %al,%eax
f0123194:	c1 e0 04             	shl    $0x4,%eax
f0123197:	89 c2                	mov    %eax,%edx
f0123199:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012319f:	01 d0                	add    %edx,%eax
f01231a1:	48                   	dec    %eax
f01231a2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01231a8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01231ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01231b3:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01231b9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01231bf:	29 d0                	sub    %edx,%eax
f01231c1:	01 d8                	add    %ebx,%eax
f01231c3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01231c8:	39 c1                	cmp    %eax,%ecx
f01231ca:	74 17                	je     f01231e3 <test_kheap_phys_addr+0x45c>
f01231cc:	83 ec 04             	sub    $0x4,%esp
f01231cf:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01231d4:	68 22 08 00 00       	push   $0x822
f01231d9:	68 d2 99 13 f0       	push   $0xf01399d2
f01231de:	e8 cd cf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231e3:	e8 9c 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01231e8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01231eb:	74 17                	je     f0123204 <test_kheap_phys_addr+0x47d>
f01231ed:	83 ec 04             	sub    $0x4,%esp
f01231f0:	68 ec 99 13 f0       	push   $0xf01399ec
f01231f5:	68 23 08 00 00       	push   $0x823
f01231fa:	68 d2 99 13 f0       	push   $0xf01399d2
f01231ff:	e8 ac cf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123204:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123207:	e8 ba 97 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012320c:	29 c3                	sub    %eax,%ebx
f012320e:	89 d8                	mov    %ebx,%eax
f0123210:	83 f8 01             	cmp    $0x1,%eax
f0123213:	74 17                	je     f012322c <test_kheap_phys_addr+0x4a5>
f0123215:	83 ec 04             	sub    $0x4,%esp
f0123218:	68 54 9a 13 f0       	push   $0xf0139a54
f012321d:	68 24 08 00 00       	push   $0x824
f0123222:	68 d2 99 13 f0       	push   $0xf01399d2
f0123227:	e8 84 cf fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012322c:	e8 95 97 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123231:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123234:	e8 4b 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123239:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012323c:	83 ec 0c             	sub    $0xc,%esp
f012323f:	68 00 1c 00 00       	push   $0x1c00
f0123244:	e8 16 4d fe ff       	call   f0107f5f <kmalloc>
f0123249:	83 c4 10             	add    $0x10,%esp
f012324c:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123252:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0123258:	89 c1                	mov    %eax,%ecx
f012325a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123261:	10 00 00 
f0123264:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123269:	0f b6 d0             	movzbl %al,%edx
f012326c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123272:	01 d0                	add    %edx,%eax
f0123274:	48                   	dec    %eax
f0123275:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012327b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123281:	ba 00 00 00 00       	mov    $0x0,%edx
f0123286:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012328c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123292:	29 d0                	sub    %edx,%eax
f0123294:	89 c3                	mov    %eax,%ebx
f0123296:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012329d:	10 00 00 
f01232a0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01232a5:	0f b6 c0             	movzbl %al,%eax
f01232a8:	c1 e0 04             	shl    $0x4,%eax
f01232ab:	89 c2                	mov    %eax,%edx
f01232ad:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01232b3:	01 d0                	add    %edx,%eax
f01232b5:	48                   	dec    %eax
f01232b6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01232bc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01232c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01232c7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01232cd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01232d3:	29 d0                	sub    %edx,%eax
f01232d5:	01 d8                	add    %ebx,%eax
f01232d7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01232dc:	39 c1                	cmp    %eax,%ecx
f01232de:	74 17                	je     f01232f7 <test_kheap_phys_addr+0x570>
f01232e0:	83 ec 04             	sub    $0x4,%esp
f01232e3:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01232e8:	68 2a 08 00 00       	push   $0x82a
f01232ed:	68 d2 99 13 f0       	push   $0xf01399d2
f01232f2:	e8 b9 ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232f7:	e8 88 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01232fc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01232ff:	74 17                	je     f0123318 <test_kheap_phys_addr+0x591>
f0123301:	83 ec 04             	sub    $0x4,%esp
f0123304:	68 ec 99 13 f0       	push   $0xf01399ec
f0123309:	68 2b 08 00 00       	push   $0x82b
f012330e:	68 d2 99 13 f0       	push   $0xf01399d2
f0123313:	e8 98 ce fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123318:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012331b:	e8 a6 96 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123320:	29 c3                	sub    %eax,%ebx
f0123322:	89 d8                	mov    %ebx,%eax
f0123324:	83 f8 02             	cmp    $0x2,%eax
f0123327:	74 17                	je     f0123340 <test_kheap_phys_addr+0x5b9>
f0123329:	83 ec 04             	sub    $0x4,%esp
f012332c:	68 54 9a 13 f0       	push   $0xf0139a54
f0123331:	68 2c 08 00 00       	push   $0x82c
f0123336:	68 d2 99 13 f0       	push   $0xf01399d2
f012333b:	e8 70 ce fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123340:	e8 81 96 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123345:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123348:	e8 37 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012334d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123350:	83 ec 0c             	sub    $0xc,%esp
f0123353:	68 00 fc 2f 00       	push   $0x2ffc00
f0123358:	e8 02 4c fe ff       	call   f0107f5f <kmalloc>
f012335d:	83 c4 10             	add    $0x10,%esp
f0123360:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123366:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f012336c:	89 c1                	mov    %eax,%ecx
f012336e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123375:	10 00 00 
f0123378:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012337d:	0f b6 d0             	movzbl %al,%edx
f0123380:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123386:	01 d0                	add    %edx,%eax
f0123388:	48                   	dec    %eax
f0123389:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012338f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123395:	ba 00 00 00 00       	mov    $0x0,%edx
f012339a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01233a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01233a6:	29 d0                	sub    %edx,%eax
f01233a8:	89 c3                	mov    %eax,%ebx
f01233aa:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01233b1:	10 00 00 
f01233b4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01233b9:	0f b6 c0             	movzbl %al,%eax
f01233bc:	c1 e0 04             	shl    $0x4,%eax
f01233bf:	89 c2                	mov    %eax,%edx
f01233c1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01233c7:	01 d0                	add    %edx,%eax
f01233c9:	48                   	dec    %eax
f01233ca:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01233d0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01233d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01233db:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01233e1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01233e7:	29 d0                	sub    %edx,%eax
f01233e9:	01 d8                	add    %ebx,%eax
f01233eb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01233f0:	39 c1                	cmp    %eax,%ecx
f01233f2:	74 17                	je     f012340b <test_kheap_phys_addr+0x684>
f01233f4:	83 ec 04             	sub    $0x4,%esp
f01233f7:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01233fc:	68 32 08 00 00       	push   $0x832
f0123401:	68 d2 99 13 f0       	push   $0xf01399d2
f0123406:	e8 a5 cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012340b:	e8 74 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123410:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123413:	74 17                	je     f012342c <test_kheap_phys_addr+0x6a5>
f0123415:	83 ec 04             	sub    $0x4,%esp
f0123418:	68 ec 99 13 f0       	push   $0xf01399ec
f012341d:	68 33 08 00 00       	push   $0x833
f0123422:	68 d2 99 13 f0       	push   $0xf01399d2
f0123427:	e8 84 cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012342c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012342f:	e8 92 95 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123434:	29 c3                	sub    %eax,%ebx
f0123436:	89 d8                	mov    %ebx,%eax
f0123438:	3d 00 03 00 00       	cmp    $0x300,%eax
f012343d:	74 17                	je     f0123456 <test_kheap_phys_addr+0x6cf>
f012343f:	83 ec 04             	sub    $0x4,%esp
f0123442:	68 54 9a 13 f0       	push   $0xf0139a54
f0123447:	68 34 08 00 00       	push   $0x834
f012344c:	68 d2 99 13 f0       	push   $0xf01399d2
f0123451:	e8 5a cd fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123456:	e8 6b 95 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012345b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012345e:	e8 21 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123463:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123466:	83 ec 0c             	sub    $0xc,%esp
f0123469:	68 00 fc 5f 00       	push   $0x5ffc00
f012346e:	e8 ec 4a fe ff       	call   f0107f5f <kmalloc>
f0123473:	83 c4 10             	add    $0x10,%esp
f0123476:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012347c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123482:	89 c1                	mov    %eax,%ecx
f0123484:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012348b:	10 00 00 
f012348e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123493:	0f b6 d0             	movzbl %al,%edx
f0123496:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012349c:	01 d0                	add    %edx,%eax
f012349e:	48                   	dec    %eax
f012349f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01234a5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01234ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01234b0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01234b6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01234bc:	29 d0                	sub    %edx,%eax
f01234be:	89 c3                	mov    %eax,%ebx
f01234c0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01234c7:	10 00 00 
f01234ca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01234cf:	0f b6 c0             	movzbl %al,%eax
f01234d2:	c1 e0 04             	shl    $0x4,%eax
f01234d5:	89 c2                	mov    %eax,%edx
f01234d7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01234dd:	01 d0                	add    %edx,%eax
f01234df:	48                   	dec    %eax
f01234e0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01234e6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01234ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01234f1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01234f7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01234fd:	29 d0                	sub    %edx,%eax
f01234ff:	01 d8                	add    %ebx,%eax
f0123501:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123506:	39 c1                	cmp    %eax,%ecx
f0123508:	74 17                	je     f0123521 <test_kheap_phys_addr+0x79a>
f012350a:	83 ec 04             	sub    $0x4,%esp
f012350d:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0123512:	68 3a 08 00 00       	push   $0x83a
f0123517:	68 d2 99 13 f0       	push   $0xf01399d2
f012351c:	e8 8f cc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123521:	e8 5e 11 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123526:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123529:	74 17                	je     f0123542 <test_kheap_phys_addr+0x7bb>
f012352b:	83 ec 04             	sub    $0x4,%esp
f012352e:	68 ec 99 13 f0       	push   $0xf01399ec
f0123533:	68 3b 08 00 00       	push   $0x83b
f0123538:	68 d2 99 13 f0       	push   $0xf01399d2
f012353d:	e8 6e cc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123542:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123545:	e8 7c 94 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012354a:	29 c3                	sub    %eax,%ebx
f012354c:	89 d8                	mov    %ebx,%eax
f012354e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123553:	74 17                	je     f012356c <test_kheap_phys_addr+0x7e5>
f0123555:	83 ec 04             	sub    $0x4,%esp
f0123558:	68 54 9a 13 f0       	push   $0xf0139a54
f012355d:	68 3c 08 00 00       	push   $0x83c
f0123562:	68 d2 99 13 f0       	push   $0xf01399d2
f0123567:	e8 44 cc fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012356c:	e8 55 94 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123571:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123574:	e8 0b 11 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123579:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012357c:	83 ec 0c             	sub    $0xc,%esp
f012357f:	68 00 38 00 00       	push   $0x3800
f0123584:	e8 d6 49 fe ff       	call   f0107f5f <kmalloc>
f0123589:	83 c4 10             	add    $0x10,%esp
f012358c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123592:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123598:	89 c1                	mov    %eax,%ecx
f012359a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01235a1:	10 00 00 
f01235a4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01235a9:	0f b6 d0             	movzbl %al,%edx
f01235ac:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01235b2:	01 d0                	add    %edx,%eax
f01235b4:	48                   	dec    %eax
f01235b5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01235bb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01235c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01235c6:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01235cc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01235d2:	29 d0                	sub    %edx,%eax
f01235d4:	89 c3                	mov    %eax,%ebx
f01235d6:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01235dd:	10 00 00 
f01235e0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01235e5:	0f b6 c0             	movzbl %al,%eax
f01235e8:	c1 e0 04             	shl    $0x4,%eax
f01235eb:	89 c2                	mov    %eax,%edx
f01235ed:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01235f3:	01 d0                	add    %edx,%eax
f01235f5:	48                   	dec    %eax
f01235f6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01235fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123602:	ba 00 00 00 00       	mov    $0x0,%edx
f0123607:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012360d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123613:	29 d0                	sub    %edx,%eax
f0123615:	01 d8                	add    %ebx,%eax
f0123617:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012361c:	39 c1                	cmp    %eax,%ecx
f012361e:	74 17                	je     f0123637 <test_kheap_phys_addr+0x8b0>
f0123620:	83 ec 04             	sub    $0x4,%esp
f0123623:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0123628:	68 42 08 00 00       	push   $0x842
f012362d:	68 d2 99 13 f0       	push   $0xf01399d2
f0123632:	e8 79 cb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123637:	e8 48 10 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012363c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012363f:	74 17                	je     f0123658 <test_kheap_phys_addr+0x8d1>
f0123641:	83 ec 04             	sub    $0x4,%esp
f0123644:	68 ec 99 13 f0       	push   $0xf01399ec
f0123649:	68 43 08 00 00       	push   $0x843
f012364e:	68 d2 99 13 f0       	push   $0xf01399d2
f0123653:	e8 58 cb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123658:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012365b:	e8 66 93 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123660:	29 c3                	sub    %eax,%ebx
f0123662:	89 d8                	mov    %ebx,%eax
f0123664:	83 f8 04             	cmp    $0x4,%eax
f0123667:	74 17                	je     f0123680 <test_kheap_phys_addr+0x8f9>
f0123669:	83 ec 04             	sub    $0x4,%esp
f012366c:	68 54 9a 13 f0       	push   $0xf0139a54
f0123671:	68 44 08 00 00       	push   $0x844
f0123676:	68 d2 99 13 f0       	push   $0xf01399d2
f012367b:	e8 30 cb fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123680:	89 e0                	mov    %esp,%eax
f0123682:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123684:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012368b:	10 00 00 
f012368e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123693:	0f b6 d0             	movzbl %al,%edx
f0123696:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012369c:	01 d0                	add    %edx,%eax
f012369e:	48                   	dec    %eax
f012369f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01236a5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01236ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01236b0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01236b6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01236bc:	29 d0                	sub    %edx,%eax
f01236be:	89 c1                	mov    %eax,%ecx
f01236c0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01236c7:	10 00 00 
f01236ca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01236cf:	0f b6 c0             	movzbl %al,%eax
f01236d2:	c1 e0 04             	shl    $0x4,%eax
f01236d5:	89 c2                	mov    %eax,%edx
f01236d7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01236dd:	01 d0                	add    %edx,%eax
f01236df:	48                   	dec    %eax
f01236e0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01236e6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01236ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01236f1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01236f7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01236fd:	29 d0                	sub    %edx,%eax
f01236ff:	01 c8                	add    %ecx,%eax
f0123701:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123706:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012370c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0123713:	10 00 00 
f0123716:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012371b:	0f b6 d0             	movzbl %al,%edx
f012371e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123724:	01 d0                	add    %edx,%eax
f0123726:	48                   	dec    %eax
f0123727:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012372d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123733:	ba 00 00 00 00       	mov    $0x0,%edx
f0123738:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012373e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123744:	29 d0                	sub    %edx,%eax
f0123746:	89 c1                	mov    %eax,%ecx
f0123748:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012374f:	10 00 00 
f0123752:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123757:	0f b6 c0             	movzbl %al,%eax
f012375a:	c1 e0 04             	shl    $0x4,%eax
f012375d:	89 c2                	mov    %eax,%edx
f012375f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123765:	01 d0                	add    %edx,%eax
f0123767:	48                   	dec    %eax
f0123768:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012376e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123774:	ba 00 00 00 00       	mov    $0x0,%edx
f0123779:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012377f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123785:	29 d0                	sub    %edx,%eax
f0123787:	01 c8                	add    %ecx,%eax
f0123789:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012378e:	c1 e8 0c             	shr    $0xc,%eax
f0123791:	89 c2                	mov    %eax,%edx
f0123793:	4a                   	dec    %edx
f0123794:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f012379a:	c1 e0 02             	shl    $0x2,%eax
f012379d:	8d 50 03             	lea    0x3(%eax),%edx
f01237a0:	b8 10 00 00 00       	mov    $0x10,%eax
f01237a5:	48                   	dec    %eax
f01237a6:	01 d0                	add    %edx,%eax
f01237a8:	bf 10 00 00 00       	mov    $0x10,%edi
f01237ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01237b2:	f7 f7                	div    %edi
f01237b4:	6b c0 10             	imul   $0x10,%eax,%eax
f01237b7:	29 c4                	sub    %eax,%esp
f01237b9:	89 e0                	mov    %esp,%eax
f01237bb:	83 c0 03             	add    $0x3,%eax
f01237be:	c1 e8 02             	shr    $0x2,%eax
f01237c1:	c1 e0 02             	shl    $0x2,%eax
f01237c4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f01237ca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01237d1:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01237d8:	eb 29                	jmp    f0123803 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f01237da:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01237dd:	8d 43 01             	lea    0x1(%ebx),%eax
f01237e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01237e3:	83 ec 0c             	sub    $0xc,%esp
f01237e6:	ff 75 e0             	pushl  -0x20(%ebp)
f01237e9:	e8 bf 47 fe ff       	call   f0107fad <kheap_physical_address>
f01237ee:	83 c4 10             	add    $0x10,%esp
f01237f1:	89 c2                	mov    %eax,%edx
f01237f3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01237f9:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01237fc:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123803:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123806:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012380c:	72 cc                	jb     f01237da <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012380e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123811:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0123817:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012381e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123825:	e9 ab 00 00 00       	jmp    f01238d5 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012382a:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012382f:	83 ec 04             	sub    $0x4,%esp
f0123832:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f0123838:	52                   	push   %edx
f0123839:	ff 75 e0             	pushl  -0x20(%ebp)
f012383c:	50                   	push   %eax
f012383d:	e8 a5 3c fe ff       	call   f01074e7 <get_page_table>
f0123842:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123845:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012384b:	85 c0                	test   %eax,%eax
f012384d:	75 17                	jne    f0123866 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012384f:	83 ec 04             	sub    $0x4,%esp
f0123852:	68 74 a3 13 f0       	push   $0xf013a374
f0123857:	68 59 08 00 00       	push   $0x859
f012385c:	68 d2 99 13 f0       	push   $0xf01399d2
f0123861:	e8 4a c9 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123866:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123869:	c1 e8 0c             	shr    $0xc,%eax
f012386c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123871:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123874:	eb 4b                	jmp    f01238c1 <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123876:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012387c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012387f:	c1 e2 02             	shl    $0x2,%edx
f0123882:	01 d0                	add    %edx,%eax
f0123884:	8b 00                	mov    (%eax),%eax
f0123886:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012388b:	89 c1                	mov    %eax,%ecx
f012388d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123893:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123896:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123899:	39 c1                	cmp    %eax,%ecx
f012389b:	74 17                	je     f01238b4 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012389d:	83 ec 04             	sub    $0x4,%esp
f01238a0:	68 cd a3 13 f0       	push   $0xf013a3cd
f01238a5:	68 60 08 00 00       	push   $0x860
f01238aa:	68 d2 99 13 f0       	push   $0xf01399d2
f01238af:	e8 fc c8 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01238b4:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01238bb:	ff 45 dc             	incl   -0x24(%ebp)
f01238be:	ff 45 e4             	incl   -0x1c(%ebp)
f01238c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01238c4:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01238ca:	7d 09                	jge    f01238d5 <test_kheap_phys_addr+0xb4e>
f01238cc:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01238d3:	7e a1                	jle    f0123876 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01238d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01238d8:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01238de:	0f 82 46 ff ff ff    	jb     f012382a <test_kheap_phys_addr+0xaa3>
f01238e4:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01238e6:	83 ec 0c             	sub    $0xc,%esp
f01238e9:	68 ec a3 13 f0       	push   $0xf013a3ec
f01238ee:	e8 3e d5 fd ff       	call   f0100e31 <cprintf>
f01238f3:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01238f6:	e8 cb 90 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01238fb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123901:	e8 7e 0d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123906:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012390c:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0123912:	83 ec 0c             	sub    $0xc,%esp
f0123915:	50                   	push   %eax
f0123916:	e8 5e 46 fe ff       	call   f0107f79 <kfree>
f012391b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012391e:	e8 61 0d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123923:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123929:	74 17                	je     f0123942 <test_kheap_phys_addr+0xbbb>
f012392b:	83 ec 04             	sub    $0x4,%esp
f012392e:	68 ec 99 13 f0       	push   $0xf01399ec
f0123933:	68 6e 08 00 00       	push   $0x86e
f0123938:	68 d2 99 13 f0       	push   $0xf01399d2
f012393d:	e8 6e c8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123942:	e8 7f 90 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123947:	89 c2                	mov    %eax,%edx
f0123949:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012394f:	29 c2                	sub    %eax,%edx
f0123951:	89 d0                	mov    %edx,%eax
f0123953:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123958:	74 17                	je     f0123971 <test_kheap_phys_addr+0xbea>
f012395a:	83 ec 04             	sub    $0x4,%esp
f012395d:	68 5c a1 13 f0       	push   $0xf013a15c
f0123962:	68 6f 08 00 00       	push   $0x86f
f0123967:	68 d2 99 13 f0       	push   $0xf01399d2
f012396c:	e8 3f c8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123971:	e8 50 90 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123976:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012397c:	e8 03 0d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123981:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123987:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012398d:	83 ec 0c             	sub    $0xc,%esp
f0123990:	50                   	push   %eax
f0123991:	e8 e3 45 fe ff       	call   f0107f79 <kfree>
f0123996:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123999:	e8 e6 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f012399e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01239a4:	74 17                	je     f01239bd <test_kheap_phys_addr+0xc36>
f01239a6:	83 ec 04             	sub    $0x4,%esp
f01239a9:	68 ec 99 13 f0       	push   $0xf01399ec
f01239ae:	68 75 08 00 00       	push   $0x875
f01239b3:	68 d2 99 13 f0       	push   $0xf01399d2
f01239b8:	e8 f3 c7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01239bd:	e8 04 90 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01239c2:	89 c2                	mov    %eax,%edx
f01239c4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01239ca:	29 c2                	sub    %eax,%edx
f01239cc:	89 d0                	mov    %edx,%eax
f01239ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f01239d3:	74 17                	je     f01239ec <test_kheap_phys_addr+0xc65>
f01239d5:	83 ec 04             	sub    $0x4,%esp
f01239d8:	68 5c a1 13 f0       	push   $0xf013a15c
f01239dd:	68 76 08 00 00       	push   $0x876
f01239e2:	68 d2 99 13 f0       	push   $0xf01399d2
f01239e7:	e8 c4 c7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01239ec:	e8 d5 8f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01239f1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239f7:	e8 88 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01239fc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0123a02:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123a08:	83 ec 0c             	sub    $0xc,%esp
f0123a0b:	50                   	push   %eax
f0123a0c:	e8 68 45 fe ff       	call   f0107f79 <kfree>
f0123a11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a14:	e8 6b 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123a19:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123a1f:	74 17                	je     f0123a38 <test_kheap_phys_addr+0xcb1>
f0123a21:	83 ec 04             	sub    $0x4,%esp
f0123a24:	68 ec 99 13 f0       	push   $0xf01399ec
f0123a29:	68 7c 08 00 00       	push   $0x87c
f0123a2e:	68 d2 99 13 f0       	push   $0xf01399d2
f0123a33:	e8 78 c7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123a38:	e8 89 8f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123a3d:	89 c2                	mov    %eax,%edx
f0123a3f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123a45:	29 c2                	sub    %eax,%edx
f0123a47:	89 d0                	mov    %edx,%eax
f0123a49:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123a4e:	74 17                	je     f0123a67 <test_kheap_phys_addr+0xce0>
f0123a50:	83 ec 04             	sub    $0x4,%esp
f0123a53:	68 5c a1 13 f0       	push   $0xf013a15c
f0123a58:	68 7d 08 00 00       	push   $0x87d
f0123a5d:	68 d2 99 13 f0       	push   $0xf01399d2
f0123a62:	e8 49 c7 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123a67:	89 e0                	mov    %esp,%eax
f0123a69:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123a6b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123a72:	10 00 00 
f0123a75:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123a7a:	0f b6 d0             	movzbl %al,%edx
f0123a7d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123a83:	01 d0                	add    %edx,%eax
f0123a85:	48                   	dec    %eax
f0123a86:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123a8c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a97:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123a9d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123aa3:	29 d0                	sub    %edx,%eax
f0123aa5:	89 c1                	mov    %eax,%ecx
f0123aa7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123aae:	10 00 00 
f0123ab1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123ab6:	0f b6 c0             	movzbl %al,%eax
f0123ab9:	c1 e0 04             	shl    $0x4,%eax
f0123abc:	89 c2                	mov    %eax,%edx
f0123abe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123ac4:	01 d0                	add    %edx,%eax
f0123ac6:	48                   	dec    %eax
f0123ac7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123acd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ad8:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123ade:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123ae4:	29 d0                	sub    %edx,%eax
f0123ae6:	01 c8                	add    %ecx,%eax
f0123ae8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123aed:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123af3:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123afa:	10 00 00 
f0123afd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b02:	0f b6 d0             	movzbl %al,%edx
f0123b05:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123b0b:	01 d0                	add    %edx,%eax
f0123b0d:	48                   	dec    %eax
f0123b0e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123b14:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123b1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b1f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123b25:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123b2b:	29 d0                	sub    %edx,%eax
f0123b2d:	89 c1                	mov    %eax,%ecx
f0123b2f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123b36:	10 00 00 
f0123b39:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b3e:	0f b6 c0             	movzbl %al,%eax
f0123b41:	c1 e0 04             	shl    $0x4,%eax
f0123b44:	89 c2                	mov    %eax,%edx
f0123b46:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123b4c:	01 d0                	add    %edx,%eax
f0123b4e:	48                   	dec    %eax
f0123b4f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123b55:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123b5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b60:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123b66:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123b6c:	29 d0                	sub    %edx,%eax
f0123b6e:	01 c8                	add    %ecx,%eax
f0123b70:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123b75:	c1 e8 0c             	shr    $0xc,%eax
f0123b78:	89 c2                	mov    %eax,%edx
f0123b7a:	4a                   	dec    %edx
f0123b7b:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0123b81:	c1 e0 02             	shl    $0x2,%eax
f0123b84:	8d 50 03             	lea    0x3(%eax),%edx
f0123b87:	b8 10 00 00 00       	mov    $0x10,%eax
f0123b8c:	48                   	dec    %eax
f0123b8d:	01 d0                	add    %edx,%eax
f0123b8f:	bf 10 00 00 00       	mov    $0x10,%edi
f0123b94:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b99:	f7 f7                	div    %edi
f0123b9b:	6b c0 10             	imul   $0x10,%eax,%eax
f0123b9e:	29 c4                	sub    %eax,%esp
f0123ba0:	89 e0                	mov    %esp,%eax
f0123ba2:	83 c0 03             	add    $0x3,%eax
f0123ba5:	c1 e8 02             	shr    $0x2,%eax
f0123ba8:	c1 e0 02             	shl    $0x2,%eax
f0123bab:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0123bb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123bb8:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123bbf:	eb 29                	jmp    f0123bea <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123bc1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123bc4:	8d 43 01             	lea    0x1(%ebx),%eax
f0123bc7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123bca:	83 ec 0c             	sub    $0xc,%esp
f0123bcd:	ff 75 d8             	pushl  -0x28(%ebp)
f0123bd0:	e8 d8 43 fe ff       	call   f0107fad <kheap_physical_address>
f0123bd5:	83 c4 10             	add    $0x10,%esp
f0123bd8:	89 c2                	mov    %eax,%edx
f0123bda:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123be0:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123be3:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123bea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123bed:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123bf3:	72 cc                	jb     f0123bc1 <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123bf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123bf8:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0123bfe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123c05:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123c0c:	e9 ab 00 00 00       	jmp    f0123cbc <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123c11:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0123c16:	83 ec 04             	sub    $0x4,%esp
f0123c19:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0123c1f:	52                   	push   %edx
f0123c20:	ff 75 d8             	pushl  -0x28(%ebp)
f0123c23:	50                   	push   %eax
f0123c24:	e8 be 38 fe ff       	call   f01074e7 <get_page_table>
f0123c29:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123c2c:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123c32:	85 c0                	test   %eax,%eax
f0123c34:	75 17                	jne    f0123c4d <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123c36:	83 ec 04             	sub    $0x4,%esp
f0123c39:	68 74 a3 13 f0       	push   $0xf013a374
f0123c3e:	68 93 08 00 00       	push   $0x893
f0123c43:	68 d2 99 13 f0       	push   $0xf01399d2
f0123c48:	e8 63 c5 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123c50:	c1 e8 0c             	shr    $0xc,%eax
f0123c53:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123c58:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123c5b:	eb 4b                	jmp    f0123ca8 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123c5d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123c63:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123c66:	c1 e2 02             	shl    $0x2,%edx
f0123c69:	01 d0                	add    %edx,%eax
f0123c6b:	8b 00                	mov    (%eax),%eax
f0123c6d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123c72:	89 c1                	mov    %eax,%ecx
f0123c74:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123c7a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123c7d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123c80:	39 c1                	cmp    %eax,%ecx
f0123c82:	74 17                	je     f0123c9b <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123c84:	83 ec 04             	sub    $0x4,%esp
f0123c87:	68 cd a3 13 f0       	push   $0xf013a3cd
f0123c8c:	68 9a 08 00 00       	push   $0x89a
f0123c91:	68 d2 99 13 f0       	push   $0xf01399d2
f0123c96:	e8 15 c5 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123c9b:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123ca2:	ff 45 d4             	incl   -0x2c(%ebp)
f0123ca5:	ff 45 e4             	incl   -0x1c(%ebp)
f0123ca8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123cab:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0123cb1:	7d 09                	jge    f0123cbc <test_kheap_phys_addr+0xf35>
f0123cb3:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123cba:	7e a1                	jle    f0123c5d <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123cbc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123cbf:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123cc5:	0f 82 46 ff ff ff    	jb     f0123c11 <test_kheap_phys_addr+0xe8a>
f0123ccb:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123ccd:	83 ec 0c             	sub    $0xc,%esp
f0123cd0:	68 5d 9b 13 f0       	push   $0xf0139b5d
f0123cd5:	e8 57 d1 fd ff       	call   f0100e31 <cprintf>
f0123cda:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123cdd:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123ce4:	10 00 00 
f0123ce7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123cec:	0f b6 d0             	movzbl %al,%edx
f0123cef:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123cf5:	01 d0                	add    %edx,%eax
f0123cf7:	48                   	dec    %eax
f0123cf8:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123cfe:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123d04:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d09:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123d0f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123d15:	29 d0                	sub    %edx,%eax
f0123d17:	89 c1                	mov    %eax,%ecx
f0123d19:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123d20:	10 00 00 
f0123d23:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123d28:	0f b6 c0             	movzbl %al,%eax
f0123d2b:	c1 e0 04             	shl    $0x4,%eax
f0123d2e:	89 c2                	mov    %eax,%edx
f0123d30:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123d36:	01 d0                	add    %edx,%eax
f0123d38:	48                   	dec    %eax
f0123d39:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123d3f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d4a:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123d50:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123d56:	29 d0                	sub    %edx,%eax
f0123d58:	01 c8                	add    %ecx,%eax
f0123d5a:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123d5f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123d65:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123d6c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123d72:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123d75:	eb 0a                	jmp    f0123d81 <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123d77:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123d7a:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123d81:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123d88:	76 ed                	jbe    f0123d77 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123d8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123d8d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123d93:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123d9a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123da0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123da3:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123daa:	e9 cc 00 00 00       	jmp    f0123e7b <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123daf:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123db2:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0123db7:	83 ec 04             	sub    $0x4,%esp
f0123dba:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123dc0:	51                   	push   %ecx
f0123dc1:	52                   	push   %edx
f0123dc2:	50                   	push   %eax
f0123dc3:	e8 1f 37 fe ff       	call   f01074e7 <get_page_table>
f0123dc8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123dcb:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123dd1:	85 c0                	test   %eax,%eax
f0123dd3:	75 17                	jne    f0123dec <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123dd5:	83 ec 04             	sub    $0x4,%esp
f0123dd8:	68 74 a3 13 f0       	push   $0xf013a374
f0123ddd:	68 b6 08 00 00       	push   $0x8b6
f0123de2:	68 d2 99 13 f0       	push   $0xf01399d2
f0123de7:	e8 c4 c3 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123dec:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123df3:	eb 67                	jmp    f0123e5c <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123df5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123df8:	c1 e0 0c             	shl    $0xc,%eax
f0123dfb:	89 c2                	mov    %eax,%edx
f0123dfd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123e03:	01 d0                	add    %edx,%eax
f0123e05:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123e0b:	83 ec 0c             	sub    $0xc,%esp
f0123e0e:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123e14:	e8 94 41 fe ff       	call   f0107fad <kheap_physical_address>
f0123e19:	83 c4 10             	add    $0x10,%esp
f0123e1c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123e22:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123e28:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123e2b:	c1 e2 02             	shl    $0x2,%edx
f0123e2e:	01 d0                	add    %edx,%eax
f0123e30:	8b 00                	mov    (%eax),%eax
f0123e32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123e37:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123e3d:	74 17                	je     f0123e56 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123e3f:	83 ec 04             	sub    $0x4,%esp
f0123e42:	68 cd a3 13 f0       	push   $0xf013a3cd
f0123e47:	68 c0 08 00 00       	push   $0x8c0
f0123e4c:	68 d2 99 13 f0       	push   $0xf01399d2
f0123e51:	e8 5a c3 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123e56:	ff 45 cc             	incl   -0x34(%ebp)
f0123e59:	ff 45 e4             	incl   -0x1c(%ebp)
f0123e5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e5f:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0123e65:	7d 09                	jge    f0123e70 <test_kheap_phys_addr+0x10e9>
f0123e67:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123e6e:	7e 85                	jle    f0123df5 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123e70:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123e77:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123e7b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123e7f:	0f 88 2a ff ff ff    	js     f0123daf <test_kheap_phys_addr+0x1028>
f0123e85:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123e89:	7f 0d                	jg     f0123e98 <test_kheap_phys_addr+0x1111>
f0123e8b:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123e92:	0f 86 17 ff ff ff    	jbe    f0123daf <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123e98:	83 ec 0c             	sub    $0xc,%esp
f0123e9b:	68 b6 9b 13 f0       	push   $0xf0139bb6
f0123ea0:	e8 8c cf fd ff       	call   f0100e31 <cprintf>
f0123ea5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123ea8:	83 ec 0c             	sub    $0xc,%esp
f0123eab:	68 20 a4 13 f0       	push   $0xf013a420
f0123eb0:	e8 7c cf fd ff       	call   f0100e31 <cprintf>
f0123eb5:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123eb8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123ebd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123ec0:	5b                   	pop    %ebx
f0123ec1:	5e                   	pop    %esi
f0123ec2:	5f                   	pop    %edi
f0123ec3:	5d                   	pop    %ebp
f0123ec4:	c3                   	ret    

f0123ec5 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123ec5:	55                   	push   %ebp
f0123ec6:	89 e5                	mov    %esp,%ebp
f0123ec8:	57                   	push   %edi
f0123ec9:	56                   	push   %esi
f0123eca:	53                   	push   %ebx
f0123ecb:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123ed1:	89 e0                	mov    %esp,%eax
f0123ed3:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123ed5:	83 ec 0c             	sub    $0xc,%esp
f0123ed8:	68 14 99 13 f0       	push   $0xf0139914
f0123edd:	e8 4f cf fd ff       	call   f0100e31 <cprintf>
f0123ee2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123ee5:	83 ec 0c             	sub    $0xc,%esp
f0123ee8:	68 44 99 13 f0       	push   $0xf0139944
f0123eed:	e8 3f cf fd ff       	call   f0100e31 <cprintf>
f0123ef2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123ef5:	83 ec 0c             	sub    $0xc,%esp
f0123ef8:	68 14 99 13 f0       	push   $0xf0139914
f0123efd:	e8 2f cf fd ff       	call   f0100e31 <cprintf>
f0123f02:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123f05:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123f09:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123f0d:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123f13:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123f19:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123f20:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123f27:	e8 9a 8a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123f2c:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123f2f:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123f35:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f3f:	89 d7                	mov    %edx,%edi
f0123f41:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123f43:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0123f49:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f4e:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f53:	89 d7                	mov    %edx,%edi
f0123f55:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123f57:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0123f5d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f62:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f67:	89 d7                	mov    %edx,%edi
f0123f69:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f6b:	e8 56 8a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123f70:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f73:	e8 0c 07 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123f78:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123f7b:	83 ec 0c             	sub    $0xc,%esp
f0123f7e:	68 00 fc 1f 00       	push   $0x1ffc00
f0123f83:	e8 d7 3f fe ff       	call   f0107f5f <kmalloc>
f0123f88:	83 c4 10             	add    $0x10,%esp
f0123f8b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f91:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123f97:	89 c1                	mov    %eax,%ecx
f0123f99:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123fa0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123fa5:	0f b6 d0             	movzbl %al,%edx
f0123fa8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123fab:	01 d0                	add    %edx,%eax
f0123fad:	48                   	dec    %eax
f0123fae:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123fb1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123fb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fb9:	f7 75 b4             	divl   -0x4c(%ebp)
f0123fbc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123fbf:	29 d0                	sub    %edx,%eax
f0123fc1:	89 c3                	mov    %eax,%ebx
f0123fc3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123fca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123fcf:	0f b6 c0             	movzbl %al,%eax
f0123fd2:	c1 e0 04             	shl    $0x4,%eax
f0123fd5:	89 c2                	mov    %eax,%edx
f0123fd7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123fda:	01 d0                	add    %edx,%eax
f0123fdc:	48                   	dec    %eax
f0123fdd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123fe0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123fe3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fe8:	f7 75 ac             	divl   -0x54(%ebp)
f0123feb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123fee:	29 d0                	sub    %edx,%eax
f0123ff0:	01 d8                	add    %ebx,%eax
f0123ff2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123ff7:	39 c1                	cmp    %eax,%ecx
f0123ff9:	74 17                	je     f0124012 <test_kheap_virt_addr+0x14d>
f0123ffb:	83 ec 04             	sub    $0x4,%esp
f0123ffe:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0124003:	68 ed 08 00 00       	push   $0x8ed
f0124008:	68 d2 99 13 f0       	push   $0xf01399d2
f012400d:	e8 9e c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124012:	e8 6d 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124017:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012401a:	74 17                	je     f0124033 <test_kheap_virt_addr+0x16e>
f012401c:	83 ec 04             	sub    $0x4,%esp
f012401f:	68 ec 99 13 f0       	push   $0xf01399ec
f0124024:	68 ee 08 00 00       	push   $0x8ee
f0124029:	68 d2 99 13 f0       	push   $0xf01399d2
f012402e:	e8 7d c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124033:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124036:	e8 8b 89 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012403b:	29 c3                	sub    %eax,%ebx
f012403d:	89 d8                	mov    %ebx,%eax
f012403f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124044:	74 17                	je     f012405d <test_kheap_virt_addr+0x198>
f0124046:	83 ec 04             	sub    $0x4,%esp
f0124049:	68 54 9a 13 f0       	push   $0xf0139a54
f012404e:	68 ef 08 00 00       	push   $0x8ef
f0124053:	68 d2 99 13 f0       	push   $0xf01399d2
f0124058:	e8 53 c1 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012405d:	e8 64 89 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124062:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124065:	e8 1a 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012406a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012406d:	83 ec 0c             	sub    $0xc,%esp
f0124070:	68 00 fc 1f 00       	push   $0x1ffc00
f0124075:	e8 e5 3e fe ff       	call   f0107f5f <kmalloc>
f012407a:	83 c4 10             	add    $0x10,%esp
f012407d:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124083:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124089:	89 c1                	mov    %eax,%ecx
f012408b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124092:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124097:	0f b6 d0             	movzbl %al,%edx
f012409a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012409d:	01 d0                	add    %edx,%eax
f012409f:	48                   	dec    %eax
f01240a0:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01240a3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01240a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01240ab:	f7 75 a4             	divl   -0x5c(%ebp)
f01240ae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01240b1:	29 d0                	sub    %edx,%eax
f01240b3:	89 c3                	mov    %eax,%ebx
f01240b5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01240bc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01240c1:	0f b6 c0             	movzbl %al,%eax
f01240c4:	c1 e0 04             	shl    $0x4,%eax
f01240c7:	89 c2                	mov    %eax,%edx
f01240c9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01240cc:	01 d0                	add    %edx,%eax
f01240ce:	48                   	dec    %eax
f01240cf:	89 45 98             	mov    %eax,-0x68(%ebp)
f01240d2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01240d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01240da:	f7 75 9c             	divl   -0x64(%ebp)
f01240dd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01240e0:	29 d0                	sub    %edx,%eax
f01240e2:	01 d8                	add    %ebx,%eax
f01240e4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01240e9:	39 c1                	cmp    %eax,%ecx
f01240eb:	74 17                	je     f0124104 <test_kheap_virt_addr+0x23f>
f01240ed:	83 ec 04             	sub    $0x4,%esp
f01240f0:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01240f5:	68 f5 08 00 00       	push   $0x8f5
f01240fa:	68 d2 99 13 f0       	push   $0xf01399d2
f01240ff:	e8 ac c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124104:	e8 7b 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124109:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012410c:	74 17                	je     f0124125 <test_kheap_virt_addr+0x260>
f012410e:	83 ec 04             	sub    $0x4,%esp
f0124111:	68 ec 99 13 f0       	push   $0xf01399ec
f0124116:	68 f6 08 00 00       	push   $0x8f6
f012411b:	68 d2 99 13 f0       	push   $0xf01399d2
f0124120:	e8 8b c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124125:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124128:	e8 99 88 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012412d:	29 c3                	sub    %eax,%ebx
f012412f:	89 d8                	mov    %ebx,%eax
f0124131:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124136:	74 17                	je     f012414f <test_kheap_virt_addr+0x28a>
f0124138:	83 ec 04             	sub    $0x4,%esp
f012413b:	68 54 9a 13 f0       	push   $0xf0139a54
f0124140:	68 f7 08 00 00       	push   $0x8f7
f0124145:	68 d2 99 13 f0       	push   $0xf01399d2
f012414a:	e8 61 c0 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012414f:	e8 72 88 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124154:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124157:	e8 28 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012415c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012415f:	83 ec 0c             	sub    $0xc,%esp
f0124162:	68 00 08 00 00       	push   $0x800
f0124167:	e8 f3 3d fe ff       	call   f0107f5f <kmalloc>
f012416c:	83 c4 10             	add    $0x10,%esp
f012416f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124175:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012417b:	89 c1                	mov    %eax,%ecx
f012417d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124184:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124189:	0f b6 d0             	movzbl %al,%edx
f012418c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012418f:	01 d0                	add    %edx,%eax
f0124191:	48                   	dec    %eax
f0124192:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124195:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124198:	ba 00 00 00 00       	mov    $0x0,%edx
f012419d:	f7 75 94             	divl   -0x6c(%ebp)
f01241a0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01241a3:	29 d0                	sub    %edx,%eax
f01241a5:	89 c3                	mov    %eax,%ebx
f01241a7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01241ae:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01241b3:	0f b6 c0             	movzbl %al,%eax
f01241b6:	c1 e0 04             	shl    $0x4,%eax
f01241b9:	89 c2                	mov    %eax,%edx
f01241bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01241be:	01 d0                	add    %edx,%eax
f01241c0:	48                   	dec    %eax
f01241c1:	89 45 88             	mov    %eax,-0x78(%ebp)
f01241c4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01241c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01241cc:	f7 75 8c             	divl   -0x74(%ebp)
f01241cf:	8b 45 88             	mov    -0x78(%ebp),%eax
f01241d2:	29 d0                	sub    %edx,%eax
f01241d4:	01 d8                	add    %ebx,%eax
f01241d6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01241db:	39 c1                	cmp    %eax,%ecx
f01241dd:	74 17                	je     f01241f6 <test_kheap_virt_addr+0x331>
f01241df:	83 ec 04             	sub    $0x4,%esp
f01241e2:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01241e7:	68 fd 08 00 00       	push   $0x8fd
f01241ec:	68 d2 99 13 f0       	push   $0xf01399d2
f01241f1:	e8 ba bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241f6:	e8 89 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01241fb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01241fe:	74 17                	je     f0124217 <test_kheap_virt_addr+0x352>
f0124200:	83 ec 04             	sub    $0x4,%esp
f0124203:	68 ec 99 13 f0       	push   $0xf01399ec
f0124208:	68 fe 08 00 00       	push   $0x8fe
f012420d:	68 d2 99 13 f0       	push   $0xf01399d2
f0124212:	e8 99 bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124217:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012421a:	e8 a7 87 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012421f:	29 c3                	sub    %eax,%ebx
f0124221:	89 d8                	mov    %ebx,%eax
f0124223:	83 f8 01             	cmp    $0x1,%eax
f0124226:	74 17                	je     f012423f <test_kheap_virt_addr+0x37a>
f0124228:	83 ec 04             	sub    $0x4,%esp
f012422b:	68 54 9a 13 f0       	push   $0xf0139a54
f0124230:	68 ff 08 00 00       	push   $0x8ff
f0124235:	68 d2 99 13 f0       	push   $0xf01399d2
f012423a:	e8 71 bf fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012423f:	e8 82 87 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124244:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124247:	e8 38 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012424c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012424f:	83 ec 0c             	sub    $0xc,%esp
f0124252:	68 00 08 00 00       	push   $0x800
f0124257:	e8 03 3d fe ff       	call   f0107f5f <kmalloc>
f012425c:	83 c4 10             	add    $0x10,%esp
f012425f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124265:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012426b:	89 c1                	mov    %eax,%ecx
f012426d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124274:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124279:	0f b6 d0             	movzbl %al,%edx
f012427c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012427f:	01 d0                	add    %edx,%eax
f0124281:	48                   	dec    %eax
f0124282:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124285:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124288:	ba 00 00 00 00       	mov    $0x0,%edx
f012428d:	f7 75 84             	divl   -0x7c(%ebp)
f0124290:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124293:	29 d0                	sub    %edx,%eax
f0124295:	89 c3                	mov    %eax,%ebx
f0124297:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012429e:	10 00 00 
f01242a1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01242a6:	0f b6 c0             	movzbl %al,%eax
f01242a9:	c1 e0 04             	shl    $0x4,%eax
f01242ac:	89 c2                	mov    %eax,%edx
f01242ae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01242b4:	01 d0                	add    %edx,%eax
f01242b6:	48                   	dec    %eax
f01242b7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01242bd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01242c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01242c8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01242ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01242d4:	29 d0                	sub    %edx,%eax
f01242d6:	01 d8                	add    %ebx,%eax
f01242d8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01242dd:	39 c1                	cmp    %eax,%ecx
f01242df:	74 17                	je     f01242f8 <test_kheap_virt_addr+0x433>
f01242e1:	83 ec 04             	sub    $0x4,%esp
f01242e4:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01242e9:	68 05 09 00 00       	push   $0x905
f01242ee:	68 d2 99 13 f0       	push   $0xf01399d2
f01242f3:	e8 b8 be fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242f8:	e8 87 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01242fd:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124300:	74 17                	je     f0124319 <test_kheap_virt_addr+0x454>
f0124302:	83 ec 04             	sub    $0x4,%esp
f0124305:	68 ec 99 13 f0       	push   $0xf01399ec
f012430a:	68 06 09 00 00       	push   $0x906
f012430f:	68 d2 99 13 f0       	push   $0xf01399d2
f0124314:	e8 97 be fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124319:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012431c:	e8 a5 86 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124321:	29 c3                	sub    %eax,%ebx
f0124323:	89 d8                	mov    %ebx,%eax
f0124325:	83 f8 01             	cmp    $0x1,%eax
f0124328:	74 17                	je     f0124341 <test_kheap_virt_addr+0x47c>
f012432a:	83 ec 04             	sub    $0x4,%esp
f012432d:	68 54 9a 13 f0       	push   $0xf0139a54
f0124332:	68 07 09 00 00       	push   $0x907
f0124337:	68 d2 99 13 f0       	push   $0xf01399d2
f012433c:	e8 6f be fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124341:	e8 80 86 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124346:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124349:	e8 36 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012434e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124351:	83 ec 0c             	sub    $0xc,%esp
f0124354:	68 00 1c 00 00       	push   $0x1c00
f0124359:	e8 01 3c fe ff       	call   f0107f5f <kmalloc>
f012435e:	83 c4 10             	add    $0x10,%esp
f0124361:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124367:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012436d:	89 c1                	mov    %eax,%ecx
f012436f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124376:	10 00 00 
f0124379:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012437e:	0f b6 d0             	movzbl %al,%edx
f0124381:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124387:	01 d0                	add    %edx,%eax
f0124389:	48                   	dec    %eax
f012438a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124390:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124396:	ba 00 00 00 00       	mov    $0x0,%edx
f012439b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01243a1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01243a7:	29 d0                	sub    %edx,%eax
f01243a9:	89 c3                	mov    %eax,%ebx
f01243ab:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01243b2:	10 00 00 
f01243b5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01243ba:	0f b6 c0             	movzbl %al,%eax
f01243bd:	c1 e0 04             	shl    $0x4,%eax
f01243c0:	89 c2                	mov    %eax,%edx
f01243c2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01243c8:	01 d0                	add    %edx,%eax
f01243ca:	48                   	dec    %eax
f01243cb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01243d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01243d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01243dc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01243e2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01243e8:	29 d0                	sub    %edx,%eax
f01243ea:	01 d8                	add    %ebx,%eax
f01243ec:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01243f1:	39 c1                	cmp    %eax,%ecx
f01243f3:	74 17                	je     f012440c <test_kheap_virt_addr+0x547>
f01243f5:	83 ec 04             	sub    $0x4,%esp
f01243f8:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01243fd:	68 0d 09 00 00       	push   $0x90d
f0124402:	68 d2 99 13 f0       	push   $0xf01399d2
f0124407:	e8 a4 bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012440c:	e8 73 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124411:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124414:	74 17                	je     f012442d <test_kheap_virt_addr+0x568>
f0124416:	83 ec 04             	sub    $0x4,%esp
f0124419:	68 ec 99 13 f0       	push   $0xf01399ec
f012441e:	68 0e 09 00 00       	push   $0x90e
f0124423:	68 d2 99 13 f0       	push   $0xf01399d2
f0124428:	e8 83 bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012442d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124430:	e8 91 85 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124435:	29 c3                	sub    %eax,%ebx
f0124437:	89 d8                	mov    %ebx,%eax
f0124439:	83 f8 02             	cmp    $0x2,%eax
f012443c:	74 17                	je     f0124455 <test_kheap_virt_addr+0x590>
f012443e:	83 ec 04             	sub    $0x4,%esp
f0124441:	68 54 9a 13 f0       	push   $0xf0139a54
f0124446:	68 0f 09 00 00       	push   $0x90f
f012444b:	68 d2 99 13 f0       	push   $0xf01399d2
f0124450:	e8 5b bd fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124455:	e8 6c 85 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012445a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012445d:	e8 22 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124462:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124465:	83 ec 0c             	sub    $0xc,%esp
f0124468:	68 00 fc 2f 00       	push   $0x2ffc00
f012446d:	e8 ed 3a fe ff       	call   f0107f5f <kmalloc>
f0124472:	83 c4 10             	add    $0x10,%esp
f0124475:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012447b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0124481:	89 c1                	mov    %eax,%ecx
f0124483:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012448a:	10 00 00 
f012448d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124492:	0f b6 d0             	movzbl %al,%edx
f0124495:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012449b:	01 d0                	add    %edx,%eax
f012449d:	48                   	dec    %eax
f012449e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01244a4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01244aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01244af:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01244b5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01244bb:	29 d0                	sub    %edx,%eax
f01244bd:	89 c3                	mov    %eax,%ebx
f01244bf:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01244c6:	10 00 00 
f01244c9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01244ce:	0f b6 c0             	movzbl %al,%eax
f01244d1:	c1 e0 04             	shl    $0x4,%eax
f01244d4:	89 c2                	mov    %eax,%edx
f01244d6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01244dc:	01 d0                	add    %edx,%eax
f01244de:	48                   	dec    %eax
f01244df:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01244e5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01244eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01244f6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01244fc:	29 d0                	sub    %edx,%eax
f01244fe:	01 d8                	add    %ebx,%eax
f0124500:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124505:	39 c1                	cmp    %eax,%ecx
f0124507:	74 17                	je     f0124520 <test_kheap_virt_addr+0x65b>
f0124509:	83 ec 04             	sub    $0x4,%esp
f012450c:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0124511:	68 15 09 00 00       	push   $0x915
f0124516:	68 d2 99 13 f0       	push   $0xf01399d2
f012451b:	e8 90 bc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124520:	e8 5f 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124525:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124528:	74 17                	je     f0124541 <test_kheap_virt_addr+0x67c>
f012452a:	83 ec 04             	sub    $0x4,%esp
f012452d:	68 ec 99 13 f0       	push   $0xf01399ec
f0124532:	68 16 09 00 00       	push   $0x916
f0124537:	68 d2 99 13 f0       	push   $0xf01399d2
f012453c:	e8 6f bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124541:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124544:	e8 7d 84 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124549:	29 c3                	sub    %eax,%ebx
f012454b:	89 d8                	mov    %ebx,%eax
f012454d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124552:	74 17                	je     f012456b <test_kheap_virt_addr+0x6a6>
f0124554:	83 ec 04             	sub    $0x4,%esp
f0124557:	68 54 9a 13 f0       	push   $0xf0139a54
f012455c:	68 17 09 00 00       	push   $0x917
f0124561:	68 d2 99 13 f0       	push   $0xf01399d2
f0124566:	e8 45 bc fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012456b:	e8 56 84 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124570:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124573:	e8 0c 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124578:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012457b:	83 ec 0c             	sub    $0xc,%esp
f012457e:	68 00 fc 5f 00       	push   $0x5ffc00
f0124583:	e8 d7 39 fe ff       	call   f0107f5f <kmalloc>
f0124588:	83 c4 10             	add    $0x10,%esp
f012458b:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124591:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124597:	89 c1                	mov    %eax,%ecx
f0124599:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01245a0:	10 00 00 
f01245a3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01245a8:	0f b6 d0             	movzbl %al,%edx
f01245ab:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245b1:	01 d0                	add    %edx,%eax
f01245b3:	48                   	dec    %eax
f01245b4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01245ba:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01245c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01245c5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01245cb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01245d1:	29 d0                	sub    %edx,%eax
f01245d3:	89 c3                	mov    %eax,%ebx
f01245d5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01245dc:	10 00 00 
f01245df:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01245e4:	0f b6 c0             	movzbl %al,%eax
f01245e7:	c1 e0 04             	shl    $0x4,%eax
f01245ea:	89 c2                	mov    %eax,%edx
f01245ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01245f2:	01 d0                	add    %edx,%eax
f01245f4:	48                   	dec    %eax
f01245f5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01245fb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124601:	ba 00 00 00 00       	mov    $0x0,%edx
f0124606:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012460c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124612:	29 d0                	sub    %edx,%eax
f0124614:	01 d8                	add    %ebx,%eax
f0124616:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012461b:	39 c1                	cmp    %eax,%ecx
f012461d:	74 17                	je     f0124636 <test_kheap_virt_addr+0x771>
f012461f:	83 ec 04             	sub    $0x4,%esp
f0124622:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0124627:	68 1d 09 00 00       	push   $0x91d
f012462c:	68 d2 99 13 f0       	push   $0xf01399d2
f0124631:	e8 7a bb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124636:	e8 49 00 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012463b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012463e:	74 17                	je     f0124657 <test_kheap_virt_addr+0x792>
f0124640:	83 ec 04             	sub    $0x4,%esp
f0124643:	68 ec 99 13 f0       	push   $0xf01399ec
f0124648:	68 1e 09 00 00       	push   $0x91e
f012464d:	68 d2 99 13 f0       	push   $0xf01399d2
f0124652:	e8 59 bb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124657:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012465a:	e8 67 83 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012465f:	29 c3                	sub    %eax,%ebx
f0124661:	89 d8                	mov    %ebx,%eax
f0124663:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124668:	74 17                	je     f0124681 <test_kheap_virt_addr+0x7bc>
f012466a:	83 ec 04             	sub    $0x4,%esp
f012466d:	68 54 9a 13 f0       	push   $0xf0139a54
f0124672:	68 1f 09 00 00       	push   $0x91f
f0124677:	68 d2 99 13 f0       	push   $0xf01399d2
f012467c:	e8 2f bb fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124681:	e8 40 83 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124686:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124689:	e8 f6 ff fd ff       	call   f0104684 <pf_calculate_free_frames>
f012468e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124691:	83 ec 0c             	sub    $0xc,%esp
f0124694:	68 00 38 00 00       	push   $0x3800
f0124699:	e8 c1 38 fe ff       	call   f0107f5f <kmalloc>
f012469e:	83 c4 10             	add    $0x10,%esp
f01246a1:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246a7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01246ad:	89 c1                	mov    %eax,%ecx
f01246af:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01246b6:	10 00 00 
f01246b9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01246be:	0f b6 d0             	movzbl %al,%edx
f01246c1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01246c7:	01 d0                	add    %edx,%eax
f01246c9:	48                   	dec    %eax
f01246ca:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01246d0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01246d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01246db:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01246e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01246e7:	29 d0                	sub    %edx,%eax
f01246e9:	89 c3                	mov    %eax,%ebx
f01246eb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01246f2:	10 00 00 
f01246f5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01246fa:	0f b6 c0             	movzbl %al,%eax
f01246fd:	c1 e0 04             	shl    $0x4,%eax
f0124700:	89 c2                	mov    %eax,%edx
f0124702:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124708:	01 d0                	add    %edx,%eax
f012470a:	48                   	dec    %eax
f012470b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124711:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124717:	ba 00 00 00 00       	mov    $0x0,%edx
f012471c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124722:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124728:	29 d0                	sub    %edx,%eax
f012472a:	01 d8                	add    %ebx,%eax
f012472c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124731:	39 c1                	cmp    %eax,%ecx
f0124733:	74 17                	je     f012474c <test_kheap_virt_addr+0x887>
f0124735:	83 ec 04             	sub    $0x4,%esp
f0124738:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012473d:	68 25 09 00 00       	push   $0x925
f0124742:	68 d2 99 13 f0       	push   $0xf01399d2
f0124747:	e8 64 ba fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012474c:	e8 33 ff fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124751:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124754:	74 17                	je     f012476d <test_kheap_virt_addr+0x8a8>
f0124756:	83 ec 04             	sub    $0x4,%esp
f0124759:	68 ec 99 13 f0       	push   $0xf01399ec
f012475e:	68 26 09 00 00       	push   $0x926
f0124763:	68 d2 99 13 f0       	push   $0xf01399d2
f0124768:	e8 43 ba fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012476d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124770:	e8 51 82 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124775:	29 c3                	sub    %eax,%ebx
f0124777:	89 d8                	mov    %ebx,%eax
f0124779:	83 f8 04             	cmp    $0x4,%eax
f012477c:	74 17                	je     f0124795 <test_kheap_virt_addr+0x8d0>
f012477e:	83 ec 04             	sub    $0x4,%esp
f0124781:	68 54 9a 13 f0       	push   $0xf0139a54
f0124786:	68 27 09 00 00       	push   $0x927
f012478b:	68 d2 99 13 f0       	push   $0xf01399d2
f0124790:	e8 1b ba fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124795:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012479c:	10 00 00 
f012479f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01247a4:	0f b6 d0             	movzbl %al,%edx
f01247a7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01247ad:	01 d0                	add    %edx,%eax
f01247af:	48                   	dec    %eax
f01247b0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01247b6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01247bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01247c1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01247c7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01247cd:	29 d0                	sub    %edx,%eax
f01247cf:	89 c1                	mov    %eax,%ecx
f01247d1:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01247d8:	10 00 00 
f01247db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01247e0:	0f b6 c0             	movzbl %al,%eax
f01247e3:	c1 e0 04             	shl    $0x4,%eax
f01247e6:	89 c2                	mov    %eax,%edx
f01247e8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01247ee:	01 d0                	add    %edx,%eax
f01247f0:	48                   	dec    %eax
f01247f1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01247f7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01247fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124802:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124808:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012480e:	29 d0                	sub    %edx,%eax
f0124810:	01 c8                	add    %ecx,%eax
f0124812:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124817:	c1 e8 0c             	shr    $0xc,%eax
f012481a:	89 c2                	mov    %eax,%edx
f012481c:	4a                   	dec    %edx
f012481d:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0124823:	c1 e0 02             	shl    $0x2,%eax
f0124826:	8d 50 03             	lea    0x3(%eax),%edx
f0124829:	b8 10 00 00 00       	mov    $0x10,%eax
f012482e:	48                   	dec    %eax
f012482f:	01 d0                	add    %edx,%eax
f0124831:	bf 10 00 00 00       	mov    $0x10,%edi
f0124836:	ba 00 00 00 00       	mov    $0x0,%edx
f012483b:	f7 f7                	div    %edi
f012483d:	6b c0 10             	imul   $0x10,%eax,%eax
f0124840:	29 c4                	sub    %eax,%esp
f0124842:	89 e0                	mov    %esp,%eax
f0124844:	83 c0 03             	add    $0x3,%eax
f0124847:	c1 e8 02             	shr    $0x2,%eax
f012484a:	c1 e0 02             	shl    $0x2,%eax
f012484d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124853:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012485a:	10 00 00 
f012485d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124862:	0f b6 d0             	movzbl %al,%edx
f0124865:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012486b:	01 d0                	add    %edx,%eax
f012486d:	48                   	dec    %eax
f012486e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124874:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012487a:	ba 00 00 00 00       	mov    $0x0,%edx
f012487f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124885:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012488b:	29 d0                	sub    %edx,%eax
f012488d:	89 c1                	mov    %eax,%ecx
f012488f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124896:	10 00 00 
f0124899:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012489e:	0f b6 c0             	movzbl %al,%eax
f01248a1:	c1 e0 04             	shl    $0x4,%eax
f01248a4:	89 c2                	mov    %eax,%edx
f01248a6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248ac:	01 d0                	add    %edx,%eax
f01248ae:	48                   	dec    %eax
f01248af:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01248b5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01248bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01248c0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01248c6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01248cc:	29 d0                	sub    %edx,%eax
f01248ce:	01 c8                	add    %ecx,%eax
f01248d0:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01248d5:	c1 e8 0c             	shr    $0xc,%eax
f01248d8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01248de:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01248e5:	10 00 00 
f01248e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01248ed:	0f b6 d0             	movzbl %al,%edx
f01248f0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01248f6:	01 d0                	add    %edx,%eax
f01248f8:	48                   	dec    %eax
f01248f9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01248ff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124905:	ba 00 00 00 00       	mov    $0x0,%edx
f012490a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124910:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124916:	29 d0                	sub    %edx,%eax
f0124918:	89 c1                	mov    %eax,%ecx
f012491a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124921:	10 00 00 
f0124924:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124929:	0f b6 c0             	movzbl %al,%eax
f012492c:	c1 e0 04             	shl    $0x4,%eax
f012492f:	89 c2                	mov    %eax,%edx
f0124931:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124937:	01 d0                	add    %edx,%eax
f0124939:	48                   	dec    %eax
f012493a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124940:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124946:	ba 00 00 00 00       	mov    $0x0,%edx
f012494b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124951:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124957:	29 d0                	sub    %edx,%eax
f0124959:	01 c8                	add    %ecx,%eax
f012495b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124960:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0124966:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012496d:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124974:	e9 21 01 00 00       	jmp    f0124a9a <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124979:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012497e:	83 ec 04             	sub    $0x4,%esp
f0124981:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124987:	52                   	push   %edx
f0124988:	ff 75 e4             	pushl  -0x1c(%ebp)
f012498b:	50                   	push   %eax
f012498c:	e8 56 2b fe ff       	call   f01074e7 <get_page_table>
f0124991:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124994:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012499a:	85 c0                	test   %eax,%eax
f012499c:	75 17                	jne    f01249b5 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012499e:	83 ec 04             	sub    $0x4,%esp
f01249a1:	68 74 a3 13 f0       	push   $0xf013a374
f01249a6:	68 38 09 00 00       	push   $0x938
f01249ab:	68 d2 99 13 f0       	push   $0xf01399d2
f01249b0:	e8 fb b7 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01249b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01249b8:	c1 e8 0c             	shr    $0xc,%eax
f01249bb:	25 ff 03 00 00       	and    $0x3ff,%eax
f01249c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01249c3:	e9 ba 00 00 00       	jmp    f0124a82 <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01249c8:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01249ce:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01249d1:	c1 e2 02             	shl    $0x2,%edx
f01249d4:	01 d0                	add    %edx,%eax
f01249d6:	8b 00                	mov    (%eax),%eax
f01249d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01249dd:	89 c1                	mov    %eax,%ecx
f01249df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01249e5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01249e8:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01249eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01249f1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01249f4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01249f7:	83 ec 0c             	sub    $0xc,%esp
f01249fa:	50                   	push   %eax
f01249fb:	e8 93 35 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124a00:	83 c4 10             	add    $0x10,%esp
f0124a03:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124a09:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124a0f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124a12:	74 61                	je     f0124a75 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124a14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124a1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124a1d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124a20:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124a26:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124a29:	c1 e1 02             	shl    $0x2,%ecx
f0124a2c:	01 ca                	add    %ecx,%edx
f0124a2e:	8b 12                	mov    (%edx),%edx
f0124a30:	89 d1                	mov    %edx,%ecx
f0124a32:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124a38:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124a3b:	c1 e2 0c             	shl    $0xc,%edx
f0124a3e:	89 d3                	mov    %edx,%ebx
f0124a40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124a43:	01 da                	add    %ebx,%edx
f0124a45:	83 ec 0c             	sub    $0xc,%esp
f0124a48:	50                   	push   %eax
f0124a49:	51                   	push   %ecx
f0124a4a:	52                   	push   %edx
f0124a4b:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f0124a51:	68 68 a4 13 f0       	push   $0xf013a468
f0124a56:	e8 d6 c3 fd ff       	call   f0100e31 <cprintf>
f0124a5b:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0124a5e:	83 ec 04             	sub    $0x4,%esp
f0124a61:	68 ab a4 13 f0       	push   $0xf013a4ab
f0124a66:	68 42 09 00 00       	push   $0x942
f0124a6b:	68 d2 99 13 f0       	push   $0xf01399d2
f0124a70:	e8 3b b7 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124a75:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124a7c:	ff 45 dc             	incl   -0x24(%ebp)
f0124a7f:	ff 45 e0             	incl   -0x20(%ebp)
f0124a82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a85:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0124a8b:	7d 0d                	jge    f0124a9a <test_kheap_virt_addr+0xbd5>
f0124a8d:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124a94:	0f 8e 2e ff ff ff    	jle    f01249c8 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124a9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124a9d:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0124aa3:	0f 82 d0 fe ff ff    	jb     f0124979 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124aa9:	83 ec 0c             	sub    $0xc,%esp
f0124aac:	68 c8 a4 13 f0       	push   $0xf013a4c8
f0124ab1:	e8 7b c3 fd ff       	call   f0100e31 <cprintf>
f0124ab6:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124ab9:	e8 08 7f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124abe:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124ac4:	e8 bb fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124ac9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0124acf:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124ad5:	83 ec 0c             	sub    $0xc,%esp
f0124ad8:	50                   	push   %eax
f0124ad9:	e8 9b 34 fe ff       	call   f0107f79 <kfree>
f0124ade:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ae1:	e8 9e fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124ae6:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124aec:	74 17                	je     f0124b05 <test_kheap_virt_addr+0xc40>
f0124aee:	83 ec 04             	sub    $0x4,%esp
f0124af1:	68 ec 99 13 f0       	push   $0xf01399ec
f0124af6:	68 50 09 00 00       	push   $0x950
f0124afb:	68 d2 99 13 f0       	push   $0xf01399d2
f0124b00:	e8 ab b6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124b05:	e8 bc 7e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124b0a:	89 c2                	mov    %eax,%edx
f0124b0c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124b12:	29 c2                	sub    %eax,%edx
f0124b14:	89 d0                	mov    %edx,%eax
f0124b16:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b1b:	74 17                	je     f0124b34 <test_kheap_virt_addr+0xc6f>
f0124b1d:	83 ec 04             	sub    $0x4,%esp
f0124b20:	68 5c a1 13 f0       	push   $0xf013a15c
f0124b25:	68 51 09 00 00       	push   $0x951
f0124b2a:	68 d2 99 13 f0       	push   $0xf01399d2
f0124b2f:	e8 7c b6 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124b34:	e8 8d 7e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124b39:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b3f:	e8 40 fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124b44:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0124b4a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124b50:	83 ec 0c             	sub    $0xc,%esp
f0124b53:	50                   	push   %eax
f0124b54:	e8 20 34 fe ff       	call   f0107f79 <kfree>
f0124b59:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b5c:	e8 23 fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124b61:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124b67:	74 17                	je     f0124b80 <test_kheap_virt_addr+0xcbb>
f0124b69:	83 ec 04             	sub    $0x4,%esp
f0124b6c:	68 ec 99 13 f0       	push   $0xf01399ec
f0124b71:	68 57 09 00 00       	push   $0x957
f0124b76:	68 d2 99 13 f0       	push   $0xf01399d2
f0124b7b:	e8 30 b6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124b80:	e8 41 7e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124b85:	89 c2                	mov    %eax,%edx
f0124b87:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124b8d:	29 c2                	sub    %eax,%edx
f0124b8f:	89 d0                	mov    %edx,%eax
f0124b91:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b96:	74 17                	je     f0124baf <test_kheap_virt_addr+0xcea>
f0124b98:	83 ec 04             	sub    $0x4,%esp
f0124b9b:	68 5c a1 13 f0       	push   $0xf013a15c
f0124ba0:	68 58 09 00 00       	push   $0x958
f0124ba5:	68 d2 99 13 f0       	push   $0xf01399d2
f0124baa:	e8 01 b6 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124baf:	e8 12 7e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124bb4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124bba:	e8 c5 fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124bbf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0124bc5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124bcb:	83 ec 0c             	sub    $0xc,%esp
f0124bce:	50                   	push   %eax
f0124bcf:	e8 a5 33 fe ff       	call   f0107f79 <kfree>
f0124bd4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bd7:	e8 a8 fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124bdc:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124be2:	74 17                	je     f0124bfb <test_kheap_virt_addr+0xd36>
f0124be4:	83 ec 04             	sub    $0x4,%esp
f0124be7:	68 ec 99 13 f0       	push   $0xf01399ec
f0124bec:	68 5e 09 00 00       	push   $0x95e
f0124bf1:	68 d2 99 13 f0       	push   $0xf01399d2
f0124bf6:	e8 b5 b5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124bfb:	e8 c6 7d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124c00:	89 c2                	mov    %eax,%edx
f0124c02:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124c08:	29 c2                	sub    %eax,%edx
f0124c0a:	89 d0                	mov    %edx,%eax
f0124c0c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124c11:	74 17                	je     f0124c2a <test_kheap_virt_addr+0xd65>
f0124c13:	83 ec 04             	sub    $0x4,%esp
f0124c16:	68 5c a1 13 f0       	push   $0xf013a15c
f0124c1b:	68 5f 09 00 00       	push   $0x95f
f0124c20:	68 d2 99 13 f0       	push   $0xf01399d2
f0124c25:	e8 86 b5 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124c2a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124c31:	10 00 00 
f0124c34:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124c39:	0f b6 d0             	movzbl %al,%edx
f0124c3c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124c42:	01 d0                	add    %edx,%eax
f0124c44:	48                   	dec    %eax
f0124c45:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124c4b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124c51:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c56:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124c5c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124c62:	29 d0                	sub    %edx,%eax
f0124c64:	89 c1                	mov    %eax,%ecx
f0124c66:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124c6d:	10 00 00 
f0124c70:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124c75:	0f b6 c0             	movzbl %al,%eax
f0124c78:	c1 e0 04             	shl    $0x4,%eax
f0124c7b:	89 c2                	mov    %eax,%edx
f0124c7d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124c83:	01 d0                	add    %edx,%eax
f0124c85:	48                   	dec    %eax
f0124c86:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124c8c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c92:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c97:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124c9d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124ca3:	29 d0                	sub    %edx,%eax
f0124ca5:	01 c8                	add    %ecx,%eax
f0124ca7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124cac:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124cb2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124cb9:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124cc0:	10 00 00 
f0124cc3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124cc8:	0f b6 d0             	movzbl %al,%edx
f0124ccb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124cd1:	01 d0                	add    %edx,%eax
f0124cd3:	48                   	dec    %eax
f0124cd4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124cda:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124ce0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ce5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124ceb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124cf1:	29 d0                	sub    %edx,%eax
f0124cf3:	89 c1                	mov    %eax,%ecx
f0124cf5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124cfc:	10 00 00 
f0124cff:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124d04:	0f b6 c0             	movzbl %al,%eax
f0124d07:	c1 e0 04             	shl    $0x4,%eax
f0124d0a:	89 c2                	mov    %eax,%edx
f0124d0c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124d12:	01 d0                	add    %edx,%eax
f0124d14:	48                   	dec    %eax
f0124d15:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124d1b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124d21:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d26:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124d2c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124d32:	29 d0                	sub    %edx,%eax
f0124d34:	01 c8                	add    %ecx,%eax
f0124d36:	05 00 40 00 00       	add    $0x4000,%eax
f0124d3b:	c1 e8 0c             	shr    $0xc,%eax
f0124d3e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124d44:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124d4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124d4d:	eb 41                	jmp    f0124d90 <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124d4f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124d55:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124d58:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124d5b:	83 ec 0c             	sub    $0xc,%esp
f0124d5e:	50                   	push   %eax
f0124d5f:	e8 2f 32 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124d64:	83 c4 10             	add    $0x10,%esp
f0124d67:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0124d6d:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124d74:	74 17                	je     f0124d8d <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124d76:	83 ec 04             	sub    $0x4,%esp
f0124d79:	68 ab a4 13 f0       	push   $0xf013a4ab
f0124d7e:	68 70 09 00 00       	push   $0x970
f0124d83:	68 d2 99 13 f0       	push   $0xf01399d2
f0124d88:	e8 23 b4 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124d8d:	ff 45 d8             	incl   -0x28(%ebp)
f0124d90:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124d96:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0124d9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124d9f:	39 c2                	cmp    %eax,%edx
f0124da1:	77 ac                	ja     f0124d4f <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124da3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124da9:	05 00 04 00 00       	add    $0x400,%eax
f0124dae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124db1:	eb 4b                	jmp    f0124dfe <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124db3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124db9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124dbc:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124dbf:	83 ec 0c             	sub    $0xc,%esp
f0124dc2:	50                   	push   %eax
f0124dc3:	e8 cb 31 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124dc8:	83 c4 10             	add    $0x10,%esp
f0124dcb:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124dd1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124dd4:	c1 e0 0c             	shl    $0xc,%eax
f0124dd7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ddc:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124de2:	74 17                	je     f0124dfb <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124de4:	83 ec 04             	sub    $0x4,%esp
f0124de7:	68 ab a4 13 f0       	push   $0xf013a4ab
f0124dec:	68 7a 09 00 00       	push   $0x97a
f0124df1:	68 d2 99 13 f0       	push   $0xf01399d2
f0124df6:	e8 b5 b3 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124dfb:	ff 45 d8             	incl   -0x28(%ebp)
f0124dfe:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e04:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124e0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e0d:	39 c2                	cmp    %eax,%edx
f0124e0f:	77 a2                	ja     f0124db3 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124e11:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e17:	05 04 07 00 00       	add    $0x704,%eax
f0124e1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124e1f:	eb 41                	jmp    f0124e62 <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124e21:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124e27:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124e2a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124e2d:	83 ec 0c             	sub    $0xc,%esp
f0124e30:	50                   	push   %eax
f0124e31:	e8 5d 31 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124e36:	83 c4 10             	add    $0x10,%esp
f0124e39:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124e3f:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124e46:	74 17                	je     f0124e5f <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f0124e48:	83 ec 04             	sub    $0x4,%esp
f0124e4b:	68 ab a4 13 f0       	push   $0xf013a4ab
f0124e50:	68 83 09 00 00       	push   $0x983
f0124e55:	68 d2 99 13 f0       	push   $0xf01399d2
f0124e5a:	e8 51 b3 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124e5f:	ff 45 d8             	incl   -0x28(%ebp)
f0124e62:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e68:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0124e6e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e71:	39 c2                	cmp    %eax,%edx
f0124e73:	77 ac                	ja     f0124e21 <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124e75:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e7b:	05 04 0d 00 00       	add    $0xd04,%eax
f0124e80:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124e83:	eb 4b                	jmp    f0124ed0 <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124e85:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124e8b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124e8e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124e91:	83 ec 0c             	sub    $0xc,%esp
f0124e94:	50                   	push   %eax
f0124e95:	e8 f9 30 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124e9a:	83 c4 10             	add    $0x10,%esp
f0124e9d:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124ea3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124ea6:	c1 e0 0c             	shl    $0xc,%eax
f0124ea9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124eae:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124eb4:	74 17                	je     f0124ecd <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124eb6:	83 ec 04             	sub    $0x4,%esp
f0124eb9:	68 ab a4 13 f0       	push   $0xf013a4ab
f0124ebe:	68 8c 09 00 00       	push   $0x98c
f0124ec3:	68 d2 99 13 f0       	push   $0xf01399d2
f0124ec8:	e8 e3 b2 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124ecd:	ff 45 d8             	incl   -0x28(%ebp)
f0124ed0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124ed6:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0124edc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124edf:	39 c2                	cmp    %eax,%edx
f0124ee1:	77 a2                	ja     f0124e85 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124ee3:	83 ec 0c             	sub    $0xc,%esp
f0124ee6:	68 5d 9b 13 f0       	push   $0xf0139b5d
f0124eeb:	e8 41 bf fd ff       	call   f0100e31 <cprintf>
f0124ef0:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124ef3:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124efa:	eb 54                	jmp    f0124f50 <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0124efc:	83 ec 0c             	sub    $0xc,%esp
f0124eff:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124f02:	e8 8c 30 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124f07:	83 c4 10             	add    $0x10,%esp
f0124f0a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124f10:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124f17:	74 30                	je     f0124f49 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0124f19:	83 ec 04             	sub    $0x4,%esp
f0124f1c:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124f22:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124f25:	68 f9 a4 13 f0       	push   $0xf013a4f9
f0124f2a:	e8 02 bf fd ff       	call   f0100e31 <cprintf>
f0124f2f:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124f32:	83 ec 04             	sub    $0x4,%esp
f0124f35:	68 ab a4 13 f0       	push   $0xf013a4ab
f0124f3a:	68 9c 09 00 00       	push   $0x99c
f0124f3f:	68 d2 99 13 f0       	push   $0xf01399d2
f0124f44:	e8 67 b2 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124f49:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124f50:	b8 6c e5 2d 00       	mov    $0x2de56c,%eax
f0124f55:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0124f58:	72 a2                	jb     f0124efc <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124f5a:	83 ec 0c             	sub    $0xc,%esp
f0124f5d:	68 b6 9b 13 f0       	push   $0xf0139bb6
f0124f62:	e8 ca be fd ff       	call   f0100e31 <cprintf>
f0124f67:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0124f6a:	83 ec 0c             	sub    $0xc,%esp
f0124f6d:	68 18 a5 13 f0       	push   $0xf013a518
f0124f72:	e8 ba be fd ff       	call   f0100e31 <cprintf>
f0124f77:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124f7a:	b8 01 00 00 00       	mov    $0x1,%eax
f0124f7f:	89 f4                	mov    %esi,%esp

}
f0124f81:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124f84:	5b                   	pop    %ebx
f0124f85:	5e                   	pop    %esi
f0124f86:	5f                   	pop    %edi
f0124f87:	5d                   	pop    %ebp
f0124f88:	c3                   	ret    

f0124f89 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0124f89:	55                   	push   %ebp
f0124f8a:	89 e5                	mov    %esp,%ebp
f0124f8c:	57                   	push   %edi
f0124f8d:	56                   	push   %esi
f0124f8e:	53                   	push   %ebx
f0124f8f:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0124f95:	a0 3d eb 18 f0       	mov    0xf018eb3d,%al
f0124f9a:	84 c0                	test   %al,%al
f0124f9c:	74 56                	je     f0124ff4 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0124f9e:	c6 05 3d eb 18 f0 00 	movb   $0x0,0xf018eb3d
		initFreeFrames = sys_calculate_free_frames() ;
f0124fa5:	e8 1c 7a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124faa:	a3 68 e5 2d f0       	mov    %eax,0xf02de568
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0124faf:	e8 d0 f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124fb4:	a3 64 e5 2d f0       	mov    %eax,0xf02de564
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0124fb9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124fbf:	bb 75 a6 13 f0       	mov    $0xf013a675,%ebx
f0124fc4:	ba 11 00 00 00       	mov    $0x11,%edx
f0124fc9:	89 c7                	mov    %eax,%edi
f0124fcb:	89 de                	mov    %ebx,%esi
f0124fcd:	89 d1                	mov    %edx,%ecx
f0124fcf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124fd1:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124fd7:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124fdc:	b0 00                	mov    $0x0,%al
f0124fde:	89 d7                	mov    %edx,%edi
f0124fe0:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124fe2:	83 ec 0c             	sub    $0xc,%esp
f0124fe5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124feb:	50                   	push   %eax
f0124fec:	e8 d2 cb fd ff       	call   f0101bc3 <execute_command>
f0124ff1:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124ff4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124ffb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125002:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0125007:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012500a:	eb 2b                	jmp    f0125037 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f012500c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012500f:	83 c0 5c             	add    $0x5c,%eax
f0125012:	83 ec 08             	sub    $0x8,%esp
f0125015:	68 5f a5 13 f0       	push   $0xf013a55f
f012501a:	50                   	push   %eax
f012501b:	e8 ec a0 00 00       	call   f012f10c <strcmp>
f0125020:	83 c4 10             	add    $0x10,%esp
f0125023:	85 c0                	test   %eax,%eax
f0125025:	75 08                	jne    f012502f <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0125027:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012502a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f012502d:	eb 2f                	jmp    f012505e <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012502f:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0125034:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125037:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012503b:	74 08                	je     f0125045 <test_three_creation_functions+0xbc>
f012503d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125040:	8b 40 44             	mov    0x44(%eax),%eax
f0125043:	eb 05                	jmp    f012504a <test_three_creation_functions+0xc1>
f0125045:	b8 00 00 00 00       	mov    $0x0,%eax
f012504a:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f012504f:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0125054:	85 c0                	test   %eax,%eax
f0125056:	75 b4                	jne    f012500c <test_three_creation_functions+0x83>
f0125058:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012505c:	75 ae                	jne    f012500c <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012505e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125061:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0125067:	85 c0                	test   %eax,%eax
f0125069:	74 17                	je     f0125082 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f012506b:	83 ec 04             	sub    $0x4,%esp
f012506e:	68 68 a5 13 f0       	push   $0xf013a568
f0125073:	68 c6 09 00 00       	push   $0x9c6
f0125078:	68 d2 99 13 f0       	push   $0xf01399d2
f012507d:	e8 2e b1 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125082:	83 ec 0c             	sub    $0xc,%esp
f0125085:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125088:	e8 c8 31 fe ff       	call   f0108255 <env_page_ws_get_size>
f012508d:	83 c4 10             	add    $0x10,%esp
f0125090:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125093:	e8 2e 79 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125098:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f012509b:	e8 e4 f5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01250a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250a3:	a1 64 e5 2d f0       	mov    0xf02de564,%eax
f01250a8:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01250ab:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01250ae:	74 17                	je     f01250c7 <test_three_creation_functions+0x13e>
f01250b0:	83 ec 04             	sub    $0x4,%esp
f01250b3:	68 ec 99 13 f0       	push   $0xf01399ec
f01250b8:	68 cc 09 00 00       	push   $0x9cc
f01250bd:	68 d2 99 13 f0       	push   $0xf01399d2
f01250c2:	e8 e9 b0 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01250c7:	a1 68 e5 2d f0       	mov    0xf02de568,%eax
f01250cc:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01250cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01250d2:	83 c2 15             	add    $0x15,%edx
f01250d5:	39 d0                	cmp    %edx,%eax
f01250d7:	74 17                	je     f01250f0 <test_three_creation_functions+0x167>
f01250d9:	83 ec 04             	sub    $0x4,%esp
f01250dc:	68 54 9a 13 f0       	push   $0xf0139a54
f01250e1:	68 ce 09 00 00       	push   $0x9ce
f01250e6:	68 d2 99 13 f0       	push   $0xf01399d2
f01250eb:	e8 c0 b0 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f01250f0:	83 ec 0c             	sub    $0xc,%esp
f01250f3:	68 00 10 00 00       	push   $0x1000
f01250f8:	e8 62 2e fe ff       	call   f0107f5f <kmalloc>
f01250fd:	83 c4 10             	add    $0x10,%esp
f0125100:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125103:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012510a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012510f:	0f b6 d0             	movzbl %al,%edx
f0125112:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125115:	01 d0                	add    %edx,%eax
f0125117:	48                   	dec    %eax
f0125118:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012511b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012511e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125123:	f7 75 cc             	divl   -0x34(%ebp)
f0125126:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125129:	29 d0                	sub    %edx,%eax
f012512b:	89 c1                	mov    %eax,%ecx
f012512d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125134:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125139:	0f b6 c0             	movzbl %al,%eax
f012513c:	c1 e0 04             	shl    $0x4,%eax
f012513f:	89 c2                	mov    %eax,%edx
f0125141:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125144:	01 d0                	add    %edx,%eax
f0125146:	48                   	dec    %eax
f0125147:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012514a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012514d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125152:	f7 75 c4             	divl   -0x3c(%ebp)
f0125155:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125158:	29 d0                	sub    %edx,%eax
f012515a:	01 c8                	add    %ecx,%eax
f012515c:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125162:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125165:	39 c2                	cmp    %eax,%edx
f0125167:	74 17                	je     f0125180 <test_three_creation_functions+0x1f7>
f0125169:	83 ec 04             	sub    $0x4,%esp
f012516c:	68 b8 a5 13 f0       	push   $0xf013a5b8
f0125171:	68 d2 09 00 00       	push   $0x9d2
f0125176:	68 d2 99 13 f0       	push   $0xf01399d2
f012517b:	e8 30 b0 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125180:	83 ec 0c             	sub    $0xc,%esp
f0125183:	68 28 a6 13 f0       	push   $0xf013a628
f0125188:	e8 a4 bc fd ff       	call   f0100e31 <cprintf>
f012518d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125190:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125195:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125198:	5b                   	pop    %ebx
f0125199:	5e                   	pop    %esi
f012519a:	5f                   	pop    %edi
f012519b:	5d                   	pop    %ebp
f012519c:	c3                   	ret    

f012519d <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f012519d:	55                   	push   %ebp
f012519e:	89 e5                	mov    %esp,%ebp
f01251a0:	57                   	push   %edi
f01251a1:	53                   	push   %ebx
f01251a2:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f01251a8:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01251ac:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01251b0:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01251b6:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01251bc:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01251c3:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01251ca:	e8 f7 77 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01251cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01251d2:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f01251d8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01251dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01251e2:	89 d7                	mov    %edx,%edi
f01251e4:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01251e6:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f01251ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f01251f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01251f6:	89 d7                	mov    %edx,%edi
f01251f8:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01251fa:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0125200:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125205:	b8 00 00 00 00       	mov    $0x0,%eax
f012520a:	89 d7                	mov    %edx,%edi
f012520c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012520e:	e8 b3 77 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125213:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125216:	e8 69 f4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012521b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012521e:	83 ec 0c             	sub    $0xc,%esp
f0125221:	68 00 fc 1f 00       	push   $0x1ffc00
f0125226:	e8 34 2d fe ff       	call   f0107f5f <kmalloc>
f012522b:	83 c4 10             	add    $0x10,%esp
f012522e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125234:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012523a:	89 c1                	mov    %eax,%ecx
f012523c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125243:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125248:	0f b6 d0             	movzbl %al,%edx
f012524b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012524e:	01 d0                	add    %edx,%eax
f0125250:	48                   	dec    %eax
f0125251:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125254:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125257:	ba 00 00 00 00       	mov    $0x0,%edx
f012525c:	f7 75 c8             	divl   -0x38(%ebp)
f012525f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125262:	29 d0                	sub    %edx,%eax
f0125264:	89 c3                	mov    %eax,%ebx
f0125266:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012526d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125272:	0f b6 c0             	movzbl %al,%eax
f0125275:	c1 e0 04             	shl    $0x4,%eax
f0125278:	89 c2                	mov    %eax,%edx
f012527a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012527d:	01 d0                	add    %edx,%eax
f012527f:	48                   	dec    %eax
f0125280:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125283:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125286:	ba 00 00 00 00       	mov    $0x0,%edx
f012528b:	f7 75 c0             	divl   -0x40(%ebp)
f012528e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125291:	29 d0                	sub    %edx,%eax
f0125293:	01 d8                	add    %ebx,%eax
f0125295:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012529a:	39 c1                	cmp    %eax,%ecx
f012529c:	74 17                	je     f01252b5 <test_kfreeall+0x118>
f012529e:	83 ec 04             	sub    $0x4,%esp
f01252a1:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01252a6:	68 f9 09 00 00       	push   $0x9f9
f01252ab:	68 d2 99 13 f0       	push   $0xf01399d2
f01252b0:	e8 fb ae fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01252b5:	e8 ca f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01252ba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01252bd:	74 17                	je     f01252d6 <test_kfreeall+0x139>
f01252bf:	83 ec 04             	sub    $0x4,%esp
f01252c2:	68 ec 99 13 f0       	push   $0xf01399ec
f01252c7:	68 fa 09 00 00       	push   $0x9fa
f01252cc:	68 d2 99 13 f0       	push   $0xf01399d2
f01252d1:	e8 da ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252d6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01252d9:	e8 e8 76 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01252de:	29 c3                	sub    %eax,%ebx
f01252e0:	89 d8                	mov    %ebx,%eax
f01252e2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01252e7:	74 17                	je     f0125300 <test_kfreeall+0x163>
f01252e9:	83 ec 04             	sub    $0x4,%esp
f01252ec:	68 54 9a 13 f0       	push   $0xf0139a54
f01252f1:	68 fb 09 00 00       	push   $0x9fb
f01252f6:	68 d2 99 13 f0       	push   $0xf01399d2
f01252fb:	e8 b0 ae fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0125300:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0125307:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012530a:	e8 b7 76 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012530f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125312:	e8 6d f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125317:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012531a:	83 ec 0c             	sub    $0xc,%esp
f012531d:	68 00 fc 1f 00       	push   $0x1ffc00
f0125322:	e8 38 2c fe ff       	call   f0107f5f <kmalloc>
f0125327:	83 c4 10             	add    $0x10,%esp
f012532a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125330:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125336:	89 c1                	mov    %eax,%ecx
f0125338:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012533f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125344:	0f b6 d0             	movzbl %al,%edx
f0125347:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012534a:	01 d0                	add    %edx,%eax
f012534c:	48                   	dec    %eax
f012534d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125350:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125353:	ba 00 00 00 00       	mov    $0x0,%edx
f0125358:	f7 75 b8             	divl   -0x48(%ebp)
f012535b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012535e:	29 d0                	sub    %edx,%eax
f0125360:	89 c3                	mov    %eax,%ebx
f0125362:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125369:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012536e:	0f b6 c0             	movzbl %al,%eax
f0125371:	c1 e0 04             	shl    $0x4,%eax
f0125374:	89 c2                	mov    %eax,%edx
f0125376:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125379:	01 d0                	add    %edx,%eax
f012537b:	48                   	dec    %eax
f012537c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012537f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125382:	ba 00 00 00 00       	mov    $0x0,%edx
f0125387:	f7 75 b0             	divl   -0x50(%ebp)
f012538a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012538d:	29 d0                	sub    %edx,%eax
f012538f:	01 d8                	add    %ebx,%eax
f0125391:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125396:	39 c1                	cmp    %eax,%ecx
f0125398:	74 17                	je     f01253b1 <test_kfreeall+0x214>
f012539a:	83 ec 04             	sub    $0x4,%esp
f012539d:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01253a2:	68 02 0a 00 00       	push   $0xa02
f01253a7:	68 d2 99 13 f0       	push   $0xf01399d2
f01253ac:	e8 ff ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253b1:	e8 ce f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01253b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01253b9:	74 17                	je     f01253d2 <test_kfreeall+0x235>
f01253bb:	83 ec 04             	sub    $0x4,%esp
f01253be:	68 ec 99 13 f0       	push   $0xf01399ec
f01253c3:	68 03 0a 00 00       	push   $0xa03
f01253c8:	68 d2 99 13 f0       	push   $0xf01399d2
f01253cd:	e8 de ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253d2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01253d5:	e8 ec 75 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01253da:	29 c3                	sub    %eax,%ebx
f01253dc:	89 d8                	mov    %ebx,%eax
f01253de:	3d 00 02 00 00       	cmp    $0x200,%eax
f01253e3:	74 17                	je     f01253fc <test_kfreeall+0x25f>
f01253e5:	83 ec 04             	sub    $0x4,%esp
f01253e8:	68 54 9a 13 f0       	push   $0xf0139a54
f01253ed:	68 04 0a 00 00       	push   $0xa04
f01253f2:	68 d2 99 13 f0       	push   $0xf01399d2
f01253f7:	e8 b4 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01253fc:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0125403:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125406:	e8 bb 75 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012540b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012540e:	e8 71 f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125413:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125416:	83 ec 0c             	sub    $0xc,%esp
f0125419:	68 00 08 00 00       	push   $0x800
f012541e:	e8 3c 2b fe ff       	call   f0107f5f <kmalloc>
f0125423:	83 c4 10             	add    $0x10,%esp
f0125426:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012542c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125432:	89 c1                	mov    %eax,%ecx
f0125434:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012543b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125440:	0f b6 d0             	movzbl %al,%edx
f0125443:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125446:	01 d0                	add    %edx,%eax
f0125448:	48                   	dec    %eax
f0125449:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012544c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012544f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125454:	f7 75 a8             	divl   -0x58(%ebp)
f0125457:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012545a:	29 d0                	sub    %edx,%eax
f012545c:	89 c3                	mov    %eax,%ebx
f012545e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125465:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012546a:	0f b6 c0             	movzbl %al,%eax
f012546d:	c1 e0 04             	shl    $0x4,%eax
f0125470:	89 c2                	mov    %eax,%edx
f0125472:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125475:	01 d0                	add    %edx,%eax
f0125477:	48                   	dec    %eax
f0125478:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012547b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012547e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125483:	f7 75 a0             	divl   -0x60(%ebp)
f0125486:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125489:	29 d0                	sub    %edx,%eax
f012548b:	01 d8                	add    %ebx,%eax
f012548d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125492:	39 c1                	cmp    %eax,%ecx
f0125494:	74 17                	je     f01254ad <test_kfreeall+0x310>
f0125496:	83 ec 04             	sub    $0x4,%esp
f0125499:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012549e:	68 0b 0a 00 00       	push   $0xa0b
f01254a3:	68 d2 99 13 f0       	push   $0xf01399d2
f01254a8:	e8 03 ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254ad:	e8 d2 f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01254b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01254b5:	74 17                	je     f01254ce <test_kfreeall+0x331>
f01254b7:	83 ec 04             	sub    $0x4,%esp
f01254ba:	68 ec 99 13 f0       	push   $0xf01399ec
f01254bf:	68 0c 0a 00 00       	push   $0xa0c
f01254c4:	68 d2 99 13 f0       	push   $0xf01399d2
f01254c9:	e8 e2 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01254ce:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01254d1:	e8 f0 74 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01254d6:	29 c3                	sub    %eax,%ebx
f01254d8:	89 d8                	mov    %ebx,%eax
f01254da:	83 f8 01             	cmp    $0x1,%eax
f01254dd:	74 17                	je     f01254f6 <test_kfreeall+0x359>
f01254df:	83 ec 04             	sub    $0x4,%esp
f01254e2:	68 54 9a 13 f0       	push   $0xf0139a54
f01254e7:	68 0d 0a 00 00       	push   $0xa0d
f01254ec:	68 d2 99 13 f0       	push   $0xf01399d2
f01254f1:	e8 ba ac fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01254f6:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01254fd:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0125500:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125506:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125509:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125510:	eb 0e                	jmp    f0125520 <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f0125512:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125515:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125518:	01 d0                	add    %edx,%eax
f012551a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012551d:	ff 45 f4             	incl   -0xc(%ebp)
f0125520:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125526:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125529:	7f e7                	jg     f0125512 <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012552b:	e8 96 74 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125530:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125533:	e8 4c f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125538:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012553b:	83 ec 0c             	sub    $0xc,%esp
f012553e:	68 00 08 00 00       	push   $0x800
f0125543:	e8 17 2a fe ff       	call   f0107f5f <kmalloc>
f0125548:	83 c4 10             	add    $0x10,%esp
f012554b:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125551:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125557:	89 c1                	mov    %eax,%ecx
f0125559:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125560:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125565:	0f b6 d0             	movzbl %al,%edx
f0125568:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012556b:	01 d0                	add    %edx,%eax
f012556d:	48                   	dec    %eax
f012556e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125571:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125574:	ba 00 00 00 00       	mov    $0x0,%edx
f0125579:	f7 75 94             	divl   -0x6c(%ebp)
f012557c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012557f:	29 d0                	sub    %edx,%eax
f0125581:	89 c3                	mov    %eax,%ebx
f0125583:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012558a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012558f:	0f b6 c0             	movzbl %al,%eax
f0125592:	c1 e0 04             	shl    $0x4,%eax
f0125595:	89 c2                	mov    %eax,%edx
f0125597:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012559a:	01 d0                	add    %edx,%eax
f012559c:	48                   	dec    %eax
f012559d:	89 45 88             	mov    %eax,-0x78(%ebp)
f01255a0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01255a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01255a8:	f7 75 8c             	divl   -0x74(%ebp)
f01255ab:	8b 45 88             	mov    -0x78(%ebp),%eax
f01255ae:	29 d0                	sub    %edx,%eax
f01255b0:	01 d8                	add    %ebx,%eax
f01255b2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01255b7:	39 c1                	cmp    %eax,%ecx
f01255b9:	74 17                	je     f01255d2 <test_kfreeall+0x435>
f01255bb:	83 ec 04             	sub    $0x4,%esp
f01255be:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01255c3:	68 19 0a 00 00       	push   $0xa19
f01255c8:	68 d2 99 13 f0       	push   $0xf01399d2
f01255cd:	e8 de ab fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255d2:	e8 ad f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01255d7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01255da:	74 17                	je     f01255f3 <test_kfreeall+0x456>
f01255dc:	83 ec 04             	sub    $0x4,%esp
f01255df:	68 ec 99 13 f0       	push   $0xf01399ec
f01255e4:	68 1a 0a 00 00       	push   $0xa1a
f01255e9:	68 d2 99 13 f0       	push   $0xf01399d2
f01255ee:	e8 bd ab fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01255f3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01255f6:	e8 cb 73 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01255fb:	29 c3                	sub    %eax,%ebx
f01255fd:	89 d8                	mov    %ebx,%eax
f01255ff:	83 f8 01             	cmp    $0x1,%eax
f0125602:	74 17                	je     f012561b <test_kfreeall+0x47e>
f0125604:	83 ec 04             	sub    $0x4,%esp
f0125607:	68 54 9a 13 f0       	push   $0xf0139a54
f012560c:	68 1b 0a 00 00       	push   $0xa1b
f0125611:	68 d2 99 13 f0       	push   $0xf01399d2
f0125616:	e8 95 ab fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012561b:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0125622:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125625:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012562b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012562e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125635:	eb 0e                	jmp    f0125645 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f0125637:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012563a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012563d:	01 d0                	add    %edx,%eax
f012563f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125642:	ff 45 f4             	incl   -0xc(%ebp)
f0125645:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012564b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012564e:	7f e7                	jg     f0125637 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125650:	e8 71 73 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125655:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125658:	e8 27 f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012565d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125660:	83 ec 0c             	sub    $0xc,%esp
f0125663:	68 00 1c 00 00       	push   $0x1c00
f0125668:	e8 f2 28 fe ff       	call   f0107f5f <kmalloc>
f012566d:	83 c4 10             	add    $0x10,%esp
f0125670:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125676:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012567c:	89 c1                	mov    %eax,%ecx
f012567e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125685:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012568a:	0f b6 d0             	movzbl %al,%edx
f012568d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125690:	01 d0                	add    %edx,%eax
f0125692:	48                   	dec    %eax
f0125693:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125696:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125699:	ba 00 00 00 00       	mov    $0x0,%edx
f012569e:	f7 75 84             	divl   -0x7c(%ebp)
f01256a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01256a4:	29 d0                	sub    %edx,%eax
f01256a6:	89 c3                	mov    %eax,%ebx
f01256a8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01256af:	10 00 00 
f01256b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01256b7:	0f b6 c0             	movzbl %al,%eax
f01256ba:	c1 e0 04             	shl    $0x4,%eax
f01256bd:	89 c2                	mov    %eax,%edx
f01256bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01256c5:	01 d0                	add    %edx,%eax
f01256c7:	48                   	dec    %eax
f01256c8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01256ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01256d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01256d9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01256df:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01256e5:	29 d0                	sub    %edx,%eax
f01256e7:	01 d8                	add    %ebx,%eax
f01256e9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01256ee:	39 c1                	cmp    %eax,%ecx
f01256f0:	74 17                	je     f0125709 <test_kfreeall+0x56c>
f01256f2:	83 ec 04             	sub    $0x4,%esp
f01256f5:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01256fa:	68 27 0a 00 00       	push   $0xa27
f01256ff:	68 d2 99 13 f0       	push   $0xf01399d2
f0125704:	e8 a7 aa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125709:	e8 76 ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f012570e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125711:	74 17                	je     f012572a <test_kfreeall+0x58d>
f0125713:	83 ec 04             	sub    $0x4,%esp
f0125716:	68 ec 99 13 f0       	push   $0xf01399ec
f012571b:	68 28 0a 00 00       	push   $0xa28
f0125720:	68 d2 99 13 f0       	push   $0xf01399d2
f0125725:	e8 86 aa fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012572a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012572d:	e8 94 72 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125732:	29 c3                	sub    %eax,%ebx
f0125734:	89 d8                	mov    %ebx,%eax
f0125736:	83 f8 02             	cmp    $0x2,%eax
f0125739:	74 17                	je     f0125752 <test_kfreeall+0x5b5>
f012573b:	83 ec 04             	sub    $0x4,%esp
f012573e:	68 54 9a 13 f0       	push   $0xf0139a54
f0125743:	68 29 0a 00 00       	push   $0xa29
f0125748:	68 d2 99 13 f0       	push   $0xf01399d2
f012574d:	e8 5e aa fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125752:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0125759:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012575c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125762:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125765:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012576c:	eb 0e                	jmp    f012577c <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f012576e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125771:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125774:	01 d0                	add    %edx,%eax
f0125776:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125779:	ff 45 f4             	incl   -0xc(%ebp)
f012577c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125782:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125785:	7f e7                	jg     f012576e <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125787:	e8 3a 72 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012578c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012578f:	e8 f0 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125794:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125797:	83 ec 0c             	sub    $0xc,%esp
f012579a:	68 00 fc 2f 00       	push   $0x2ffc00
f012579f:	e8 bb 27 fe ff       	call   f0107f5f <kmalloc>
f01257a4:	83 c4 10             	add    $0x10,%esp
f01257a7:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01257ad:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01257b3:	89 c1                	mov    %eax,%ecx
f01257b5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01257bc:	10 00 00 
f01257bf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01257c4:	0f b6 d0             	movzbl %al,%edx
f01257c7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01257cd:	01 d0                	add    %edx,%eax
f01257cf:	48                   	dec    %eax
f01257d0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01257d6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01257dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01257e1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01257e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01257ed:	29 d0                	sub    %edx,%eax
f01257ef:	89 c3                	mov    %eax,%ebx
f01257f1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01257f8:	10 00 00 
f01257fb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125800:	0f b6 c0             	movzbl %al,%eax
f0125803:	c1 e0 04             	shl    $0x4,%eax
f0125806:	89 c2                	mov    %eax,%edx
f0125808:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012580e:	01 d0                	add    %edx,%eax
f0125810:	48                   	dec    %eax
f0125811:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125817:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012581d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125822:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125828:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012582e:	29 d0                	sub    %edx,%eax
f0125830:	01 d8                	add    %ebx,%eax
f0125832:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125837:	39 c1                	cmp    %eax,%ecx
f0125839:	74 17                	je     f0125852 <test_kfreeall+0x6b5>
f012583b:	83 ec 04             	sub    $0x4,%esp
f012583e:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0125843:	68 35 0a 00 00       	push   $0xa35
f0125848:	68 d2 99 13 f0       	push   $0xf01399d2
f012584d:	e8 5e a9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125852:	e8 2d ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125857:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012585a:	74 17                	je     f0125873 <test_kfreeall+0x6d6>
f012585c:	83 ec 04             	sub    $0x4,%esp
f012585f:	68 ec 99 13 f0       	push   $0xf01399ec
f0125864:	68 36 0a 00 00       	push   $0xa36
f0125869:	68 d2 99 13 f0       	push   $0xf01399d2
f012586e:	e8 3d a9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125873:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125876:	e8 4b 71 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012587b:	29 c3                	sub    %eax,%ebx
f012587d:	89 d8                	mov    %ebx,%eax
f012587f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125884:	74 17                	je     f012589d <test_kfreeall+0x700>
f0125886:	83 ec 04             	sub    $0x4,%esp
f0125889:	68 54 9a 13 f0       	push   $0xf0139a54
f012588e:	68 37 0a 00 00       	push   $0xa37
f0125893:	68 d2 99 13 f0       	push   $0xf01399d2
f0125898:	e8 13 a9 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012589d:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f01258a4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01258a7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01258ad:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01258b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01258b7:	eb 0e                	jmp    f01258c7 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f01258b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01258bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01258bf:	01 d0                	add    %edx,%eax
f01258c1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01258c4:	ff 45 f4             	incl   -0xc(%ebp)
f01258c7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01258cd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01258d0:	7f e7                	jg     f01258b9 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01258d2:	e8 ef 70 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01258d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258da:	e8 a5 ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f01258df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01258e2:	83 ec 0c             	sub    $0xc,%esp
f01258e5:	68 00 fc 5f 00       	push   $0x5ffc00
f01258ea:	e8 70 26 fe ff       	call   f0107f5f <kmalloc>
f01258ef:	83 c4 10             	add    $0x10,%esp
f01258f2:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01258f8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01258fe:	89 c1                	mov    %eax,%ecx
f0125900:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125907:	10 00 00 
f012590a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012590f:	0f b6 d0             	movzbl %al,%edx
f0125912:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125918:	01 d0                	add    %edx,%eax
f012591a:	48                   	dec    %eax
f012591b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125921:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125927:	ba 00 00 00 00       	mov    $0x0,%edx
f012592c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125932:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125938:	29 d0                	sub    %edx,%eax
f012593a:	89 c3                	mov    %eax,%ebx
f012593c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125943:	10 00 00 
f0125946:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012594b:	0f b6 c0             	movzbl %al,%eax
f012594e:	c1 e0 04             	shl    $0x4,%eax
f0125951:	89 c2                	mov    %eax,%edx
f0125953:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125959:	01 d0                	add    %edx,%eax
f012595b:	48                   	dec    %eax
f012595c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125962:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125968:	ba 00 00 00 00       	mov    $0x0,%edx
f012596d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125973:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125979:	29 d0                	sub    %edx,%eax
f012597b:	01 d8                	add    %ebx,%eax
f012597d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125982:	39 c1                	cmp    %eax,%ecx
f0125984:	74 17                	je     f012599d <test_kfreeall+0x800>
f0125986:	83 ec 04             	sub    $0x4,%esp
f0125989:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012598e:	68 43 0a 00 00       	push   $0xa43
f0125993:	68 d2 99 13 f0       	push   $0xf01399d2
f0125998:	e8 13 a8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012599d:	e8 e2 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f01259a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01259a5:	74 17                	je     f01259be <test_kfreeall+0x821>
f01259a7:	83 ec 04             	sub    $0x4,%esp
f01259aa:	68 ec 99 13 f0       	push   $0xf01399ec
f01259af:	68 44 0a 00 00       	push   $0xa44
f01259b4:	68 d2 99 13 f0       	push   $0xf01399d2
f01259b9:	e8 f2 a7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01259be:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01259c1:	e8 00 70 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01259c6:	29 c3                	sub    %eax,%ebx
f01259c8:	89 d8                	mov    %ebx,%eax
f01259ca:	3d 00 06 00 00       	cmp    $0x600,%eax
f01259cf:	74 17                	je     f01259e8 <test_kfreeall+0x84b>
f01259d1:	83 ec 04             	sub    $0x4,%esp
f01259d4:	68 54 9a 13 f0       	push   $0xf0139a54
f01259d9:	68 45 0a 00 00       	push   $0xa45
f01259de:	68 d2 99 13 f0       	push   $0xf01399d2
f01259e3:	e8 c8 a7 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01259e8:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01259ef:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01259f2:	e8 cf 6f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01259f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259fa:	e8 85 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f01259ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125a02:	83 ec 0c             	sub    $0xc,%esp
f0125a05:	68 00 38 00 00       	push   $0x3800
f0125a0a:	e8 50 25 fe ff       	call   f0107f5f <kmalloc>
f0125a0f:	83 c4 10             	add    $0x10,%esp
f0125a12:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a18:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a1e:	89 c1                	mov    %eax,%ecx
f0125a20:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125a27:	10 00 00 
f0125a2a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125a2f:	0f b6 d0             	movzbl %al,%edx
f0125a32:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125a38:	01 d0                	add    %edx,%eax
f0125a3a:	48                   	dec    %eax
f0125a3b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125a41:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125a47:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a4c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125a52:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125a58:	29 d0                	sub    %edx,%eax
f0125a5a:	89 c3                	mov    %eax,%ebx
f0125a5c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125a63:	10 00 00 
f0125a66:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125a6b:	0f b6 c0             	movzbl %al,%eax
f0125a6e:	c1 e0 04             	shl    $0x4,%eax
f0125a71:	89 c2                	mov    %eax,%edx
f0125a73:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125a79:	01 d0                	add    %edx,%eax
f0125a7b:	48                   	dec    %eax
f0125a7c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125a82:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125a88:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a8d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125a93:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125a99:	29 d0                	sub    %edx,%eax
f0125a9b:	01 d8                	add    %ebx,%eax
f0125a9d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125aa2:	39 c1                	cmp    %eax,%ecx
f0125aa4:	74 17                	je     f0125abd <test_kfreeall+0x920>
f0125aa6:	83 ec 04             	sub    $0x4,%esp
f0125aa9:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0125aae:	68 4c 0a 00 00       	push   $0xa4c
f0125ab3:	68 d2 99 13 f0       	push   $0xf01399d2
f0125ab8:	e8 f3 a6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125abd:	e8 c2 eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125ac2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ac5:	74 17                	je     f0125ade <test_kfreeall+0x941>
f0125ac7:	83 ec 04             	sub    $0x4,%esp
f0125aca:	68 ec 99 13 f0       	push   $0xf01399ec
f0125acf:	68 4d 0a 00 00       	push   $0xa4d
f0125ad4:	68 d2 99 13 f0       	push   $0xf01399d2
f0125ad9:	e8 d2 a6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ade:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ae1:	e8 e0 6e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125ae6:	29 c3                	sub    %eax,%ebx
f0125ae8:	89 d8                	mov    %ebx,%eax
f0125aea:	83 f8 04             	cmp    $0x4,%eax
f0125aed:	74 17                	je     f0125b06 <test_kfreeall+0x969>
f0125aef:	83 ec 04             	sub    $0x4,%esp
f0125af2:	68 54 9a 13 f0       	push   $0xf0139a54
f0125af7:	68 4e 0a 00 00       	push   $0xa4e
f0125afc:	68 d2 99 13 f0       	push   $0xf01399d2
f0125b01:	e8 aa a6 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125b06:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0125b0d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0125b10:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b16:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125b19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b20:	eb 0e                	jmp    f0125b30 <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f0125b22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125b25:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b28:	01 d0                	add    %edx,%eax
f0125b2a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125b2d:	ff 45 f4             	incl   -0xc(%ebp)
f0125b30:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125b36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b39:	7f e7                	jg     f0125b22 <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125b3b:	e8 86 6e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125b40:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125b46:	e8 39 eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125b4b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0125b51:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125b57:	83 ec 0c             	sub    $0xc,%esp
f0125b5a:	50                   	push   %eax
f0125b5b:	e8 19 24 fe ff       	call   f0107f79 <kfree>
f0125b60:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b63:	e8 1c eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125b68:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125b6e:	74 17                	je     f0125b87 <test_kfreeall+0x9ea>
f0125b70:	83 ec 04             	sub    $0x4,%esp
f0125b73:	68 ec 99 13 f0       	push   $0xf01399ec
f0125b78:	68 5d 0a 00 00       	push   $0xa5d
f0125b7d:	68 d2 99 13 f0       	push   $0xf01399d2
f0125b82:	e8 29 a6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125b87:	e8 3a 6e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125b8c:	89 c2                	mov    %eax,%edx
f0125b8e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125b94:	29 c2                	sub    %eax,%edx
f0125b96:	89 d0                	mov    %edx,%eax
f0125b98:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125b9d:	74 17                	je     f0125bb6 <test_kfreeall+0xa19>
f0125b9f:	83 ec 04             	sub    $0x4,%esp
f0125ba2:	68 5c a1 13 f0       	push   $0xf013a15c
f0125ba7:	68 5e 0a 00 00       	push   $0xa5e
f0125bac:	68 d2 99 13 f0       	push   $0xf01399d2
f0125bb1:	e8 fa a5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125bb6:	e8 0b 6e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125bbb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125bc1:	e8 be ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125bc6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0125bcc:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125bd2:	83 ec 0c             	sub    $0xc,%esp
f0125bd5:	50                   	push   %eax
f0125bd6:	e8 9e 23 fe ff       	call   f0107f79 <kfree>
f0125bdb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125bde:	e8 a1 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125be3:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125be9:	74 17                	je     f0125c02 <test_kfreeall+0xa65>
f0125beb:	83 ec 04             	sub    $0x4,%esp
f0125bee:	68 ec 99 13 f0       	push   $0xf01399ec
f0125bf3:	68 64 0a 00 00       	push   $0xa64
f0125bf8:	68 d2 99 13 f0       	push   $0xf01399d2
f0125bfd:	e8 ae a5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125c02:	e8 bf 6d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125c07:	89 c2                	mov    %eax,%edx
f0125c09:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c0f:	29 c2                	sub    %eax,%edx
f0125c11:	89 d0                	mov    %edx,%eax
f0125c13:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125c18:	74 17                	je     f0125c31 <test_kfreeall+0xa94>
f0125c1a:	83 ec 04             	sub    $0x4,%esp
f0125c1d:	68 5c a1 13 f0       	push   $0xf013a15c
f0125c22:	68 65 0a 00 00       	push   $0xa65
f0125c27:	68 d2 99 13 f0       	push   $0xf01399d2
f0125c2c:	e8 7f a5 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125c31:	e8 90 6d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125c36:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c3c:	e8 43 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125c41:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0125c47:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125c4d:	83 ec 0c             	sub    $0xc,%esp
f0125c50:	50                   	push   %eax
f0125c51:	e8 23 23 fe ff       	call   f0107f79 <kfree>
f0125c56:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c59:	e8 26 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125c5e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125c64:	74 17                	je     f0125c7d <test_kfreeall+0xae0>
f0125c66:	83 ec 04             	sub    $0x4,%esp
f0125c69:	68 ec 99 13 f0       	push   $0xf01399ec
f0125c6e:	68 6b 0a 00 00       	push   $0xa6b
f0125c73:	68 d2 99 13 f0       	push   $0xf01399d2
f0125c78:	e8 33 a5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125c7d:	e8 44 6d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125c82:	89 c2                	mov    %eax,%edx
f0125c84:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c8a:	29 c2                	sub    %eax,%edx
f0125c8c:	89 d0                	mov    %edx,%eax
f0125c8e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125c93:	74 17                	je     f0125cac <test_kfreeall+0xb0f>
f0125c95:	83 ec 04             	sub    $0x4,%esp
f0125c98:	68 5c a1 13 f0       	push   $0xf013a15c
f0125c9d:	68 6c 0a 00 00       	push   $0xa6c
f0125ca2:	68 d2 99 13 f0       	push   $0xf01399d2
f0125ca7:	e8 04 a5 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0125cac:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125cb2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125cb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125cbc:	eb 1e                	jmp    f0125cdc <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125cbe:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125cc4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125cc7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125cca:	01 c8                	add    %ecx,%eax
f0125ccc:	8a 00                	mov    (%eax),%al
f0125cce:	0f be c0             	movsbl %al,%eax
f0125cd1:	01 d0                	add    %edx,%eax
f0125cd3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125cd9:	ff 45 f4             	incl   -0xc(%ebp)
f0125cdc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125ce2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ce5:	7f d7                	jg     f0125cbe <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125ce7:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125ced:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125cf3:	01 c0                	add    %eax,%eax
f0125cf5:	39 c2                	cmp    %eax,%edx
f0125cf7:	74 17                	je     f0125d10 <test_kfreeall+0xb73>
f0125cf9:	83 ec 04             	sub    $0x4,%esp
f0125cfc:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0125d01:	68 78 0a 00 00       	push   $0xa78
f0125d06:	68 d2 99 13 f0       	push   $0xf01399d2
f0125d0b:	e8 a0 a4 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125d10:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125d16:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125d19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d20:	eb 1e                	jmp    f0125d40 <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125d22:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125d28:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125d2b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d2e:	01 c8                	add    %ecx,%eax
f0125d30:	8a 00                	mov    (%eax),%al
f0125d32:	0f be c0             	movsbl %al,%eax
f0125d35:	01 d0                	add    %edx,%eax
f0125d37:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125d3d:	ff 45 f4             	incl   -0xc(%ebp)
f0125d40:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125d46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125d49:	7f d7                	jg     f0125d22 <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0125d4b:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125d51:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125d57:	89 c1                	mov    %eax,%ecx
f0125d59:	01 c9                	add    %ecx,%ecx
f0125d5b:	01 c8                	add    %ecx,%eax
f0125d5d:	39 c2                	cmp    %eax,%edx
f0125d5f:	74 17                	je     f0125d78 <test_kfreeall+0xbdb>
f0125d61:	83 ec 04             	sub    $0x4,%esp
f0125d64:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0125d69:	68 80 0a 00 00       	push   $0xa80
f0125d6e:	68 d2 99 13 f0       	push   $0xf01399d2
f0125d73:	e8 38 a4 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125d78:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125d7e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125d81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d88:	eb 1e                	jmp    f0125da8 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125d8a:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0125d90:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125d93:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d96:	01 c8                	add    %ecx,%eax
f0125d98:	8a 00                	mov    (%eax),%al
f0125d9a:	0f be c0             	movsbl %al,%eax
f0125d9d:	01 d0                	add    %edx,%eax
f0125d9f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125da5:	ff 45 f4             	incl   -0xc(%ebp)
f0125da8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125dae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125db1:	7f d7                	jg     f0125d8a <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125db3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125db9:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125dbf:	c1 e2 02             	shl    $0x2,%edx
f0125dc2:	39 d0                	cmp    %edx,%eax
f0125dc4:	74 17                	je     f0125ddd <test_kfreeall+0xc40>
f0125dc6:	83 ec 04             	sub    $0x4,%esp
f0125dc9:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0125dce:	68 88 0a 00 00       	push   $0xa88
f0125dd3:	68 d2 99 13 f0       	push   $0xf01399d2
f0125dd8:	e8 d3 a3 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0125ddd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125de3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125de6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125ded:	eb 1e                	jmp    f0125e0d <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125def:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125df5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125df8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125dfb:	01 c8                	add    %ecx,%eax
f0125dfd:	8a 00                	mov    (%eax),%al
f0125dff:	0f be c0             	movsbl %al,%eax
f0125e02:	01 d0                	add    %edx,%eax
f0125e04:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125e0a:	ff 45 f4             	incl   -0xc(%ebp)
f0125e0d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125e13:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e16:	7f d7                	jg     f0125def <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0125e18:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125e1e:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125e24:	89 d0                	mov    %edx,%eax
f0125e26:	c1 e0 02             	shl    $0x2,%eax
f0125e29:	01 d0                	add    %edx,%eax
f0125e2b:	39 c1                	cmp    %eax,%ecx
f0125e2d:	74 17                	je     f0125e46 <test_kfreeall+0xca9>
f0125e2f:	83 ec 04             	sub    $0x4,%esp
f0125e32:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0125e37:	68 90 0a 00 00       	push   $0xa90
f0125e3c:	68 d2 99 13 f0       	push   $0xf01399d2
f0125e41:	e8 6a a3 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125e46:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125e4c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125e4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125e56:	eb 1e                	jmp    f0125e76 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f0125e58:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0125e5e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125e61:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125e64:	01 c8                	add    %ecx,%eax
f0125e66:	8a 00                	mov    (%eax),%al
f0125e68:	0f be c0             	movsbl %al,%eax
f0125e6b:	01 d0                	add    %edx,%eax
f0125e6d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125e73:	ff 45 f4             	incl   -0xc(%ebp)
f0125e76:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125e7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e7f:	7f d7                	jg     f0125e58 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0125e81:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125e87:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0125e8d:	89 d0                	mov    %edx,%eax
f0125e8f:	01 c0                	add    %eax,%eax
f0125e91:	01 d0                	add    %edx,%eax
f0125e93:	01 c0                	add    %eax,%eax
f0125e95:	01 d0                	add    %edx,%eax
f0125e97:	39 c1                	cmp    %eax,%ecx
f0125e99:	74 17                	je     f0125eb2 <test_kfreeall+0xd15>
f0125e9b:	83 ec 04             	sub    $0x4,%esp
f0125e9e:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0125ea3:	68 98 0a 00 00       	push   $0xa98
f0125ea8:	68 d2 99 13 f0       	push   $0xf01399d2
f0125ead:	e8 fe a2 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125eb2:	e8 0f 6b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125eb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125eba:	e8 c5 e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125ebf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125ec2:	83 ec 0c             	sub    $0xc,%esp
f0125ec5:	68 00 50 00 00       	push   $0x5000
f0125eca:	e8 90 20 fe ff       	call   f0107f5f <kmalloc>
f0125ecf:	83 c4 10             	add    $0x10,%esp
f0125ed2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125ed8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125ede:	89 c1                	mov    %eax,%ecx
f0125ee0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125ee7:	10 00 00 
f0125eea:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125eef:	0f b6 d0             	movzbl %al,%edx
f0125ef2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125ef8:	01 d0                	add    %edx,%eax
f0125efa:	48                   	dec    %eax
f0125efb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125f01:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125f07:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f0c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125f12:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125f18:	29 d0                	sub    %edx,%eax
f0125f1a:	89 c3                	mov    %eax,%ebx
f0125f1c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125f23:	10 00 00 
f0125f26:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125f2b:	0f b6 c0             	movzbl %al,%eax
f0125f2e:	c1 e0 04             	shl    $0x4,%eax
f0125f31:	89 c2                	mov    %eax,%edx
f0125f33:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125f39:	01 d0                	add    %edx,%eax
f0125f3b:	48                   	dec    %eax
f0125f3c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125f42:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125f48:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f4d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125f53:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125f59:	29 d0                	sub    %edx,%eax
f0125f5b:	01 d8                	add    %ebx,%eax
f0125f5d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125f62:	39 c1                	cmp    %eax,%ecx
f0125f64:	74 17                	je     f0125f7d <test_kfreeall+0xde0>
f0125f66:	83 ec 04             	sub    $0x4,%esp
f0125f69:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0125f6e:	68 a1 0a 00 00       	push   $0xaa1
f0125f73:	68 d2 99 13 f0       	push   $0xf01399d2
f0125f78:	e8 33 a2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f7d:	e8 02 e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f82:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f85:	74 17                	je     f0125f9e <test_kfreeall+0xe01>
f0125f87:	83 ec 04             	sub    $0x4,%esp
f0125f8a:	68 ec 99 13 f0       	push   $0xf01399ec
f0125f8f:	68 a2 0a 00 00       	push   $0xaa2
f0125f94:	68 d2 99 13 f0       	push   $0xf01399d2
f0125f99:	e8 12 a2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f9e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125fa1:	e8 20 6a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125fa6:	29 c3                	sub    %eax,%ebx
f0125fa8:	89 d8                	mov    %ebx,%eax
f0125faa:	83 f8 05             	cmp    $0x5,%eax
f0125fad:	74 17                	je     f0125fc6 <test_kfreeall+0xe29>
f0125faf:	83 ec 04             	sub    $0x4,%esp
f0125fb2:	68 54 9a 13 f0       	push   $0xf0139a54
f0125fb7:	68 a3 0a 00 00       	push   $0xaa3
f0125fbc:	68 d2 99 13 f0       	push   $0xf01399d2
f0125fc1:	e8 ea a1 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125fc6:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125fcd:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125fd0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125fd6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125fd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125fe0:	eb 0e                	jmp    f0125ff0 <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125fe5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125fe8:	01 d0                	add    %edx,%eax
f0125fea:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125fed:	ff 45 f4             	incl   -0xc(%ebp)
f0125ff0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125ff6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ff9:	7f e7                	jg     f0125fe2 <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125ffb:	e8 c6 69 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126000:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126003:	e8 7c e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126008:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012600b:	83 ec 0c             	sub    $0xc,%esp
f012600e:	68 00 00 10 00       	push   $0x100000
f0126013:	e8 47 1f fe ff       	call   f0107f5f <kmalloc>
f0126018:	83 c4 10             	add    $0x10,%esp
f012601b:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126021:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126027:	89 c1                	mov    %eax,%ecx
f0126029:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126030:	10 00 00 
f0126033:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126038:	0f b6 d0             	movzbl %al,%edx
f012603b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126041:	01 d0                	add    %edx,%eax
f0126043:	48                   	dec    %eax
f0126044:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012604a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126050:	ba 00 00 00 00       	mov    $0x0,%edx
f0126055:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012605b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126061:	29 d0                	sub    %edx,%eax
f0126063:	89 c3                	mov    %eax,%ebx
f0126065:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012606c:	10 00 00 
f012606f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126074:	0f b6 c0             	movzbl %al,%eax
f0126077:	c1 e0 04             	shl    $0x4,%eax
f012607a:	89 c2                	mov    %eax,%edx
f012607c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126082:	01 d0                	add    %edx,%eax
f0126084:	48                   	dec    %eax
f0126085:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012608b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126091:	ba 00 00 00 00       	mov    $0x0,%edx
f0126096:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012609c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01260a2:	29 d0                	sub    %edx,%eax
f01260a4:	01 d8                	add    %ebx,%eax
f01260a6:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01260ab:	39 c1                	cmp    %eax,%ecx
f01260ad:	74 17                	je     f01260c6 <test_kfreeall+0xf29>
f01260af:	83 ec 04             	sub    $0x4,%esp
f01260b2:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01260b7:	68 af 0a 00 00       	push   $0xaaf
f01260bc:	68 d2 99 13 f0       	push   $0xf01399d2
f01260c1:	e8 ea a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260c6:	e8 b9 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01260cb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01260ce:	74 17                	je     f01260e7 <test_kfreeall+0xf4a>
f01260d0:	83 ec 04             	sub    $0x4,%esp
f01260d3:	68 ec 99 13 f0       	push   $0xf01399ec
f01260d8:	68 b0 0a 00 00       	push   $0xab0
f01260dd:	68 d2 99 13 f0       	push   $0xf01399d2
f01260e2:	e8 c9 a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01260e7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01260ea:	e8 d7 68 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01260ef:	29 c3                	sub    %eax,%ebx
f01260f1:	89 d8                	mov    %ebx,%eax
f01260f3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01260f8:	74 17                	je     f0126111 <test_kfreeall+0xf74>
f01260fa:	83 ec 04             	sub    $0x4,%esp
f01260fd:	68 54 9a 13 f0       	push   $0xf0139a54
f0126102:	68 b1 0a 00 00       	push   $0xab1
f0126107:	68 d2 99 13 f0       	push   $0xf01399d2
f012610c:	e8 9f a0 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126111:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0126118:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012611b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126121:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0126124:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012612b:	eb 0e                	jmp    f012613b <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f012612d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126130:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126133:	01 d0                	add    %edx,%eax
f0126135:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0126138:	ff 45 f4             	incl   -0xc(%ebp)
f012613b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126141:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126144:	7f e7                	jg     f012612d <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0126146:	e8 7b 68 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012614b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012614e:	e8 31 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126153:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0126156:	e8 6c 1e fe ff       	call   f0107fc7 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012615b:	e8 24 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126160:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126163:	74 17                	je     f012617c <test_kfreeall+0xfdf>
f0126165:	83 ec 04             	sub    $0x4,%esp
f0126168:	68 ec 99 13 f0       	push   $0xf01399ec
f012616d:	68 c1 0a 00 00       	push   $0xac1
f0126172:	68 d2 99 13 f0       	push   $0xf01399d2
f0126177:	e8 34 a0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012617c:	e8 45 68 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126181:	89 c2                	mov    %eax,%edx
f0126183:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126186:	89 d1                	mov    %edx,%ecx
f0126188:	29 c1                	sub    %eax,%ecx
f012618a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126191:	10 00 00 
f0126194:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126199:	0f b6 d0             	movzbl %al,%edx
f012619c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01261a2:	01 d0                	add    %edx,%eax
f01261a4:	48                   	dec    %eax
f01261a5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01261ab:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01261b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01261b6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01261bc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01261c2:	29 d0                	sub    %edx,%eax
f01261c4:	89 c3                	mov    %eax,%ebx
f01261c6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01261cd:	10 00 00 
f01261d0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01261d5:	0f b6 c0             	movzbl %al,%eax
f01261d8:	c1 e0 04             	shl    $0x4,%eax
f01261db:	89 c2                	mov    %eax,%edx
f01261dd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01261e3:	01 d0                	add    %edx,%eax
f01261e5:	48                   	dec    %eax
f01261e6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01261ec:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01261f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01261f7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01261fd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126203:	29 d0                	sub    %edx,%eax
f0126205:	01 d8                	add    %ebx,%eax
f0126207:	05 00 40 00 00       	add    $0x4000,%eax
f012620c:	c1 e8 0c             	shr    $0xc,%eax
f012620f:	05 0d 04 00 00       	add    $0x40d,%eax
f0126214:	39 c1                	cmp    %eax,%ecx
f0126216:	74 17                	je     f012622f <test_kfreeall+0x1092>
f0126218:	83 ec 04             	sub    $0x4,%esp
f012621b:	68 5c a1 13 f0       	push   $0xf013a15c
f0126220:	68 c2 0a 00 00       	push   $0xac2
f0126225:	68 d2 99 13 f0       	push   $0xf01399d2
f012622a:	e8 81 9f fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012622f:	83 ec 0c             	sub    $0xc,%esp
f0126232:	6a 03                	push   $0x3
f0126234:	e8 28 6c fe ff       	call   f010ce61 <sys_bypassPageFault>
f0126239:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012623c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126243:	e9 82 00 00 00       	jmp    f01262ca <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0126248:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012624b:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0126252:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0126255:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126258:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012625b:	e8 ef 6b fe ff       	call   f010ce4f <sys_rcr2>
f0126260:	89 c2                	mov    %eax,%edx
f0126262:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126265:	39 c2                	cmp    %eax,%edx
f0126267:	74 17                	je     f0126280 <test_kfreeall+0x10e3>
f0126269:	83 ec 04             	sub    $0x4,%esp
f012626c:	68 38 a2 13 f0       	push   $0xf013a238
f0126271:	68 d0 0a 00 00       	push   $0xad0
f0126276:	68 d2 99 13 f0       	push   $0xf01399d2
f012627b:	e8 30 9f fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0126280:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126283:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f012628a:	89 c2                	mov    %eax,%edx
f012628c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012628f:	01 d0                	add    %edx,%eax
f0126291:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126294:	e8 b6 6b fe ff       	call   f010ce4f <sys_rcr2>
f0126299:	89 c2                	mov    %eax,%edx
f012629b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012629e:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01262a5:	89 c1                	mov    %eax,%ecx
f01262a7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01262aa:	01 c8                	add    %ecx,%eax
f01262ac:	39 c2                	cmp    %eax,%edx
f01262ae:	74 17                	je     f01262c7 <test_kfreeall+0x112a>
f01262b0:	83 ec 04             	sub    $0x4,%esp
f01262b3:	68 38 a2 13 f0       	push   $0xf013a238
f01262b8:	68 d2 0a 00 00       	push   $0xad2
f01262bd:	68 d2 99 13 f0       	push   $0xf01399d2
f01262c2:	e8 e9 9e fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01262c7:	ff 45 f4             	incl   -0xc(%ebp)
f01262ca:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01262ce:	0f 8e 74 ff ff ff    	jle    f0126248 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01262d4:	83 ec 0c             	sub    $0xc,%esp
f01262d7:	6a 00                	push   $0x0
f01262d9:	e8 83 6b fe ff       	call   f010ce61 <sys_bypassPageFault>
f01262de:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01262e1:	e8 e0 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01262e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262e9:	e8 96 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01262ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01262f1:	83 ec 0c             	sub    $0xc,%esp
f01262f4:	68 00 00 40 00       	push   $0x400000
f01262f9:	e8 61 1c fe ff       	call   f0107f5f <kmalloc>
f01262fe:	83 c4 10             	add    $0x10,%esp
f0126301:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126307:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012630d:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0126312:	74 17                	je     f012632b <test_kfreeall+0x118e>
f0126314:	83 ec 04             	sub    $0x4,%esp
f0126317:	68 dc a6 13 f0       	push   $0xf013a6dc
f012631c:	68 de 0a 00 00       	push   $0xade
f0126321:	68 d2 99 13 f0       	push   $0xf01399d2
f0126326:	e8 85 9e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012632b:	e8 54 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126330:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126333:	74 17                	je     f012634c <test_kfreeall+0x11af>
f0126335:	83 ec 04             	sub    $0x4,%esp
f0126338:	68 ec 99 13 f0       	push   $0xf01399ec
f012633d:	68 df 0a 00 00       	push   $0xadf
f0126342:	68 d2 99 13 f0       	push   $0xf01399d2
f0126347:	e8 64 9e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012634c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012634f:	e8 72 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126354:	29 c3                	sub    %eax,%ebx
f0126356:	89 d8                	mov    %ebx,%eax
f0126358:	3d 00 04 00 00       	cmp    $0x400,%eax
f012635d:	74 17                	je     f0126376 <test_kfreeall+0x11d9>
f012635f:	83 ec 04             	sub    $0x4,%esp
f0126362:	68 54 9a 13 f0       	push   $0xf0139a54
f0126367:	68 e0 0a 00 00       	push   $0xae0
f012636c:	68 d2 99 13 f0       	push   $0xf01399d2
f0126371:	e8 3a 9e fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126376:	e8 4b 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012637b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012637e:	e8 01 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126383:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126386:	83 ec 0c             	sub    $0xc,%esp
f0126389:	68 00 30 00 00       	push   $0x3000
f012638e:	e8 cc 1b fe ff       	call   f0107f5f <kmalloc>
f0126393:	83 c4 10             	add    $0x10,%esp
f0126396:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012639c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01263a2:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f01263a7:	74 17                	je     f01263c0 <test_kfreeall+0x1223>
f01263a9:	83 ec 04             	sub    $0x4,%esp
f01263ac:	68 dc a6 13 f0       	push   $0xf013a6dc
f01263b1:	68 e6 0a 00 00       	push   $0xae6
f01263b6:	68 d2 99 13 f0       	push   $0xf01399d2
f01263bb:	e8 f0 9d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01263c0:	e8 bf e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01263c5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01263c8:	74 17                	je     f01263e1 <test_kfreeall+0x1244>
f01263ca:	83 ec 04             	sub    $0x4,%esp
f01263cd:	68 ec 99 13 f0       	push   $0xf01399ec
f01263d2:	68 e7 0a 00 00       	push   $0xae7
f01263d7:	68 d2 99 13 f0       	push   $0xf01399d2
f01263dc:	e8 cf 9d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01263e1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01263e4:	e8 dd 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01263e9:	29 c3                	sub    %eax,%ebx
f01263eb:	89 d8                	mov    %ebx,%eax
f01263ed:	83 f8 03             	cmp    $0x3,%eax
f01263f0:	74 17                	je     f0126409 <test_kfreeall+0x126c>
f01263f2:	83 ec 04             	sub    $0x4,%esp
f01263f5:	68 54 9a 13 f0       	push   $0xf0139a54
f01263fa:	68 e8 0a 00 00       	push   $0xae8
f01263ff:	68 d2 99 13 f0       	push   $0xf01399d2
f0126404:	e8 a7 9d fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126409:	e8 b8 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012640e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126411:	e8 6e e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126416:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126419:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012641f:	83 ec 0c             	sub    $0xc,%esp
f0126422:	50                   	push   %eax
f0126423:	e8 51 1b fe ff       	call   f0107f79 <kfree>
f0126428:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012642b:	e8 54 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126430:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126433:	74 17                	je     f012644c <test_kfreeall+0x12af>
f0126435:	83 ec 04             	sub    $0x4,%esp
f0126438:	68 ec 99 13 f0       	push   $0xf01399ec
f012643d:	68 f2 0a 00 00       	push   $0xaf2
f0126442:	68 d2 99 13 f0       	push   $0xf01399d2
f0126447:	e8 64 9d fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012644c:	e8 75 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126451:	89 c2                	mov    %eax,%edx
f0126453:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126456:	29 c2                	sub    %eax,%edx
f0126458:	89 d0                	mov    %edx,%eax
f012645a:	83 f8 03             	cmp    $0x3,%eax
f012645d:	74 17                	je     f0126476 <test_kfreeall+0x12d9>
f012645f:	83 ec 04             	sub    $0x4,%esp
f0126462:	68 84 a2 13 f0       	push   $0xf013a284
f0126467:	68 f3 0a 00 00       	push   $0xaf3
f012646c:	68 d2 99 13 f0       	push   $0xf01399d2
f0126471:	e8 3a 9d fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126476:	e8 4b 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012647b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012647e:	e8 01 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126483:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126486:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012648c:	83 ec 0c             	sub    $0xc,%esp
f012648f:	50                   	push   %eax
f0126490:	e8 e4 1a fe ff       	call   f0107f79 <kfree>
f0126495:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126498:	e8 e7 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012649d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01264a0:	74 17                	je     f01264b9 <test_kfreeall+0x131c>
f01264a2:	83 ec 04             	sub    $0x4,%esp
f01264a5:	68 ec 99 13 f0       	push   $0xf01399ec
f01264aa:	68 fc 0a 00 00       	push   $0xafc
f01264af:	68 d2 99 13 f0       	push   $0xf01399d2
f01264b4:	e8 f7 9c fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01264b9:	e8 08 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01264be:	89 c2                	mov    %eax,%edx
f01264c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264c3:	39 c2                	cmp    %eax,%edx
f01264c5:	74 17                	je     f01264de <test_kfreeall+0x1341>
f01264c7:	83 ec 04             	sub    $0x4,%esp
f01264ca:	68 84 a2 13 f0       	push   $0xf013a284
f01264cf:	68 fd 0a 00 00       	push   $0xafd
f01264d4:	68 d2 99 13 f0       	push   $0xf01399d2
f01264d9:	e8 d2 9c fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01264de:	e8 e3 64 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01264e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264e6:	e8 99 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01264eb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01264ee:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01264f4:	83 ec 0c             	sub    $0xc,%esp
f01264f7:	50                   	push   %eax
f01264f8:	e8 7c 1a fe ff       	call   f0107f79 <kfree>
f01264fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126500:	e8 7f e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126505:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126508:	74 17                	je     f0126521 <test_kfreeall+0x1384>
f012650a:	83 ec 04             	sub    $0x4,%esp
f012650d:	68 ec 99 13 f0       	push   $0xf01399ec
f0126512:	68 03 0b 00 00       	push   $0xb03
f0126517:	68 d2 99 13 f0       	push   $0xf01399d2
f012651c:	e8 8f 9c fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126521:	e8 a0 64 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126526:	89 c2                	mov    %eax,%edx
f0126528:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012652b:	39 c2                	cmp    %eax,%edx
f012652d:	74 17                	je     f0126546 <test_kfreeall+0x13a9>
f012652f:	83 ec 04             	sub    $0x4,%esp
f0126532:	68 84 a2 13 f0       	push   $0xf013a284
f0126537:	68 04 0b 00 00       	push   $0xb04
f012653c:	68 d2 99 13 f0       	push   $0xf01399d2
f0126541:	e8 6a 9c fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126546:	e8 7b 64 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012654b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012654e:	e8 31 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126553:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126556:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012655c:	83 ec 0c             	sub    $0xc,%esp
f012655f:	50                   	push   %eax
f0126560:	e8 14 1a fe ff       	call   f0107f79 <kfree>
f0126565:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126568:	e8 17 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012656d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126570:	74 17                	je     f0126589 <test_kfreeall+0x13ec>
f0126572:	83 ec 04             	sub    $0x4,%esp
f0126575:	68 ec 99 13 f0       	push   $0xf01399ec
f012657a:	68 0a 0b 00 00       	push   $0xb0a
f012657f:	68 d2 99 13 f0       	push   $0xf01399d2
f0126584:	e8 27 9c fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126589:	e8 38 64 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012658e:	89 c2                	mov    %eax,%edx
f0126590:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126593:	39 c2                	cmp    %eax,%edx
f0126595:	74 17                	je     f01265ae <test_kfreeall+0x1411>
f0126597:	83 ec 04             	sub    $0x4,%esp
f012659a:	68 84 a2 13 f0       	push   $0xf013a284
f012659f:	68 0b 0b 00 00       	push   $0xb0b
f01265a4:	68 d2 99 13 f0       	push   $0xf01399d2
f01265a9:	e8 02 9c fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01265ae:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01265b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01265bc:	eb 48                	jmp    f0126606 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01265be:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01265c1:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01265c6:	83 ec 04             	sub    $0x4,%esp
f01265c9:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f01265cf:	51                   	push   %ecx
f01265d0:	52                   	push   %edx
f01265d1:	50                   	push   %eax
f01265d2:	e8 10 0f fe ff       	call   f01074e7 <get_page_table>
f01265d7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01265da:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01265e0:	85 c0                	test   %eax,%eax
f01265e2:	75 17                	jne    f01265fb <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01265e4:	83 ec 04             	sub    $0x4,%esp
f01265e7:	68 d4 a2 13 f0       	push   $0xf013a2d4
f01265ec:	68 18 0b 00 00       	push   $0xb18
f01265f1:	68 d2 99 13 f0       	push   $0xf01399d2
f01265f6:	e8 b5 9b fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01265fb:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126602:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126606:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012660a:	78 b2                	js     f01265be <test_kfreeall+0x1421>
f012660c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126610:	7f 09                	jg     f012661b <test_kfreeall+0x147e>
f0126612:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126619:	76 a3                	jbe    f01265be <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012661b:	83 ec 0c             	sub    $0xc,%esp
f012661e:	68 30 a7 13 f0       	push   $0xf013a730
f0126623:	e8 09 a8 fd ff       	call   f0100e31 <cprintf>
f0126628:	83 c4 10             	add    $0x10,%esp

	return 1;
f012662b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0126630:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126633:	5b                   	pop    %ebx
f0126634:	5f                   	pop    %edi
f0126635:	5d                   	pop    %ebp
f0126636:	c3                   	ret    

f0126637 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126637:	55                   	push   %ebp
f0126638:	89 e5                	mov    %esp,%ebp
f012663a:	57                   	push   %edi
f012663b:	53                   	push   %ebx
f012663c:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f0126642:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126646:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012664a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126650:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126656:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012665d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126664:	e8 5d 63 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126669:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012666c:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f0126672:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126677:	b8 00 00 00 00       	mov    $0x0,%eax
f012667c:	89 d7                	mov    %edx,%edi
f012667e:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126680:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126686:	b9 14 00 00 00       	mov    $0x14,%ecx
f012668b:	b8 00 00 00 00       	mov    $0x0,%eax
f0126690:	89 d7                	mov    %edx,%edi
f0126692:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126694:	e8 2d 63 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126699:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012669c:	e8 e3 df fd ff       	call   f0104684 <pf_calculate_free_frames>
f01266a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01266a4:	83 ec 0c             	sub    $0xc,%esp
f01266a7:	68 00 fc 1f 00       	push   $0x1ffc00
f01266ac:	e8 ae 18 fe ff       	call   f0107f5f <kmalloc>
f01266b1:	83 c4 10             	add    $0x10,%esp
f01266b4:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266ba:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01266c0:	89 c1                	mov    %eax,%ecx
f01266c2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01266c9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01266ce:	0f b6 d0             	movzbl %al,%edx
f01266d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01266d4:	01 d0                	add    %edx,%eax
f01266d6:	48                   	dec    %eax
f01266d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01266da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01266dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01266e2:	f7 75 d4             	divl   -0x2c(%ebp)
f01266e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01266e8:	29 d0                	sub    %edx,%eax
f01266ea:	89 c3                	mov    %eax,%ebx
f01266ec:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01266f3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01266f8:	0f b6 c0             	movzbl %al,%eax
f01266fb:	c1 e0 04             	shl    $0x4,%eax
f01266fe:	89 c2                	mov    %eax,%edx
f0126700:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126703:	01 d0                	add    %edx,%eax
f0126705:	48                   	dec    %eax
f0126706:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126709:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012670c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126711:	f7 75 cc             	divl   -0x34(%ebp)
f0126714:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126717:	29 d0                	sub    %edx,%eax
f0126719:	01 d8                	add    %ebx,%eax
f012671b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126720:	39 c1                	cmp    %eax,%ecx
f0126722:	74 17                	je     f012673b <test_kexpand+0x104>
f0126724:	83 ec 04             	sub    $0x4,%esp
f0126727:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012672c:	68 43 0b 00 00       	push   $0xb43
f0126731:	68 d2 99 13 f0       	push   $0xf01399d2
f0126736:	e8 75 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012673b:	e8 44 df fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126740:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126743:	74 17                	je     f012675c <test_kexpand+0x125>
f0126745:	83 ec 04             	sub    $0x4,%esp
f0126748:	68 ec 99 13 f0       	push   $0xf01399ec
f012674d:	68 44 0b 00 00       	push   $0xb44
f0126752:	68 d2 99 13 f0       	push   $0xf01399d2
f0126757:	e8 54 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012675c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012675f:	e8 62 62 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126764:	29 c3                	sub    %eax,%ebx
f0126766:	89 d8                	mov    %ebx,%eax
f0126768:	3d 00 02 00 00       	cmp    $0x200,%eax
f012676d:	74 17                	je     f0126786 <test_kexpand+0x14f>
f012676f:	83 ec 04             	sub    $0x4,%esp
f0126772:	68 54 9a 13 f0       	push   $0xf0139a54
f0126777:	68 45 0b 00 00       	push   $0xb45
f012677c:	68 d2 99 13 f0       	push   $0xf01399d2
f0126781:	e8 2a 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126786:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f012678d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126790:	e8 31 62 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126795:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126798:	e8 e7 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f012679d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01267a0:	83 ec 0c             	sub    $0xc,%esp
f01267a3:	68 00 fc 1f 00       	push   $0x1ffc00
f01267a8:	e8 b2 17 fe ff       	call   f0107f5f <kmalloc>
f01267ad:	83 c4 10             	add    $0x10,%esp
f01267b0:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267b6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01267bc:	89 c1                	mov    %eax,%ecx
f01267be:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01267c5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01267ca:	0f b6 d0             	movzbl %al,%edx
f01267cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01267d0:	01 d0                	add    %edx,%eax
f01267d2:	48                   	dec    %eax
f01267d3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01267d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01267d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01267de:	f7 75 c4             	divl   -0x3c(%ebp)
f01267e1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01267e4:	29 d0                	sub    %edx,%eax
f01267e6:	89 c3                	mov    %eax,%ebx
f01267e8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01267ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01267f4:	0f b6 c0             	movzbl %al,%eax
f01267f7:	c1 e0 04             	shl    $0x4,%eax
f01267fa:	89 c2                	mov    %eax,%edx
f01267fc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01267ff:	01 d0                	add    %edx,%eax
f0126801:	48                   	dec    %eax
f0126802:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126805:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126808:	ba 00 00 00 00       	mov    $0x0,%edx
f012680d:	f7 75 bc             	divl   -0x44(%ebp)
f0126810:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126813:	29 d0                	sub    %edx,%eax
f0126815:	01 d8                	add    %ebx,%eax
f0126817:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012681c:	39 c1                	cmp    %eax,%ecx
f012681e:	74 17                	je     f0126837 <test_kexpand+0x200>
f0126820:	83 ec 04             	sub    $0x4,%esp
f0126823:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0126828:	68 4c 0b 00 00       	push   $0xb4c
f012682d:	68 d2 99 13 f0       	push   $0xf01399d2
f0126832:	e8 79 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126837:	e8 48 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f012683c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012683f:	74 17                	je     f0126858 <test_kexpand+0x221>
f0126841:	83 ec 04             	sub    $0x4,%esp
f0126844:	68 ec 99 13 f0       	push   $0xf01399ec
f0126849:	68 4d 0b 00 00       	push   $0xb4d
f012684e:	68 d2 99 13 f0       	push   $0xf01399d2
f0126853:	e8 58 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126858:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012685b:	e8 66 61 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126860:	29 c3                	sub    %eax,%ebx
f0126862:	89 d8                	mov    %ebx,%eax
f0126864:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126869:	74 17                	je     f0126882 <test_kexpand+0x24b>
f012686b:	83 ec 04             	sub    $0x4,%esp
f012686e:	68 54 9a 13 f0       	push   $0xf0139a54
f0126873:	68 4e 0b 00 00       	push   $0xb4e
f0126878:	68 d2 99 13 f0       	push   $0xf01399d2
f012687d:	e8 2e 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126882:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126889:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012688c:	e8 35 61 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126891:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126894:	e8 eb dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126899:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012689c:	83 ec 0c             	sub    $0xc,%esp
f012689f:	68 00 08 00 00       	push   $0x800
f01268a4:	e8 b6 16 fe ff       	call   f0107f5f <kmalloc>
f01268a9:	83 c4 10             	add    $0x10,%esp
f01268ac:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01268b2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01268b8:	89 c1                	mov    %eax,%ecx
f01268ba:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01268c1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01268c6:	0f b6 d0             	movzbl %al,%edx
f01268c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01268cc:	01 d0                	add    %edx,%eax
f01268ce:	48                   	dec    %eax
f01268cf:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01268d2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01268d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01268da:	f7 75 b4             	divl   -0x4c(%ebp)
f01268dd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01268e0:	29 d0                	sub    %edx,%eax
f01268e2:	89 c3                	mov    %eax,%ebx
f01268e4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01268eb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01268f0:	0f b6 c0             	movzbl %al,%eax
f01268f3:	c1 e0 04             	shl    $0x4,%eax
f01268f6:	89 c2                	mov    %eax,%edx
f01268f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01268fb:	01 d0                	add    %edx,%eax
f01268fd:	48                   	dec    %eax
f01268fe:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126901:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126904:	ba 00 00 00 00       	mov    $0x0,%edx
f0126909:	f7 75 ac             	divl   -0x54(%ebp)
f012690c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012690f:	29 d0                	sub    %edx,%eax
f0126911:	01 d8                	add    %ebx,%eax
f0126913:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126918:	39 c1                	cmp    %eax,%ecx
f012691a:	74 17                	je     f0126933 <test_kexpand+0x2fc>
f012691c:	83 ec 04             	sub    $0x4,%esp
f012691f:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0126924:	68 55 0b 00 00       	push   $0xb55
f0126929:	68 d2 99 13 f0       	push   $0xf01399d2
f012692e:	e8 7d 98 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126933:	e8 4c dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126938:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012693b:	74 17                	je     f0126954 <test_kexpand+0x31d>
f012693d:	83 ec 04             	sub    $0x4,%esp
f0126940:	68 ec 99 13 f0       	push   $0xf01399ec
f0126945:	68 56 0b 00 00       	push   $0xb56
f012694a:	68 d2 99 13 f0       	push   $0xf01399d2
f012694f:	e8 5c 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126954:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126957:	e8 6a 60 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012695c:	29 c3                	sub    %eax,%ebx
f012695e:	89 d8                	mov    %ebx,%eax
f0126960:	83 f8 01             	cmp    $0x1,%eax
f0126963:	74 17                	je     f012697c <test_kexpand+0x345>
f0126965:	83 ec 04             	sub    $0x4,%esp
f0126968:	68 54 9a 13 f0       	push   $0xf0139a54
f012696d:	68 57 0b 00 00       	push   $0xb57
f0126972:	68 d2 99 13 f0       	push   $0xf01399d2
f0126977:	e8 34 98 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012697c:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126983:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126986:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012698c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012698f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126996:	eb 0e                	jmp    f01269a6 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f0126998:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012699b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012699e:	01 d0                	add    %edx,%eax
f01269a0:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01269a3:	ff 45 f4             	incl   -0xc(%ebp)
f01269a6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01269ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269af:	7f e7                	jg     f0126998 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01269b1:	e8 10 60 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01269b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269b9:	e8 c6 dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01269be:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01269c1:	83 ec 0c             	sub    $0xc,%esp
f01269c4:	68 00 08 00 00       	push   $0x800
f01269c9:	e8 91 15 fe ff       	call   f0107f5f <kmalloc>
f01269ce:	83 c4 10             	add    $0x10,%esp
f01269d1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269d7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01269dd:	89 c1                	mov    %eax,%ecx
f01269df:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01269e6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01269eb:	0f b6 d0             	movzbl %al,%edx
f01269ee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01269f1:	01 d0                	add    %edx,%eax
f01269f3:	48                   	dec    %eax
f01269f4:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01269f7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01269fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01269ff:	f7 75 a0             	divl   -0x60(%ebp)
f0126a02:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126a05:	29 d0                	sub    %edx,%eax
f0126a07:	89 c3                	mov    %eax,%ebx
f0126a09:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126a10:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126a15:	0f b6 c0             	movzbl %al,%eax
f0126a18:	c1 e0 04             	shl    $0x4,%eax
f0126a1b:	89 c2                	mov    %eax,%edx
f0126a1d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126a20:	01 d0                	add    %edx,%eax
f0126a22:	48                   	dec    %eax
f0126a23:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126a26:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126a29:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a2e:	f7 75 98             	divl   -0x68(%ebp)
f0126a31:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126a34:	29 d0                	sub    %edx,%eax
f0126a36:	01 d8                	add    %ebx,%eax
f0126a38:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126a3d:	39 c1                	cmp    %eax,%ecx
f0126a3f:	74 17                	je     f0126a58 <test_kexpand+0x421>
f0126a41:	83 ec 04             	sub    $0x4,%esp
f0126a44:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0126a49:	68 63 0b 00 00       	push   $0xb63
f0126a4e:	68 d2 99 13 f0       	push   $0xf01399d2
f0126a53:	e8 58 97 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a58:	e8 27 dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126a5d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126a60:	74 17                	je     f0126a79 <test_kexpand+0x442>
f0126a62:	83 ec 04             	sub    $0x4,%esp
f0126a65:	68 ec 99 13 f0       	push   $0xf01399ec
f0126a6a:	68 64 0b 00 00       	push   $0xb64
f0126a6f:	68 d2 99 13 f0       	push   $0xf01399d2
f0126a74:	e8 37 97 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a79:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126a7c:	e8 45 5f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126a81:	29 c3                	sub    %eax,%ebx
f0126a83:	89 d8                	mov    %ebx,%eax
f0126a85:	83 f8 01             	cmp    $0x1,%eax
f0126a88:	74 17                	je     f0126aa1 <test_kexpand+0x46a>
f0126a8a:	83 ec 04             	sub    $0x4,%esp
f0126a8d:	68 54 9a 13 f0       	push   $0xf0139a54
f0126a92:	68 65 0b 00 00       	push   $0xb65
f0126a97:	68 d2 99 13 f0       	push   $0xf01399d2
f0126a9c:	e8 0f 97 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126aa1:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f0126aa8:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126aab:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126ab1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126ab4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126abb:	eb 0e                	jmp    f0126acb <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f0126abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126ac0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126ac3:	01 d0                	add    %edx,%eax
f0126ac5:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126ac8:	ff 45 f4             	incl   -0xc(%ebp)
f0126acb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126ad1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126ad4:	7f e7                	jg     f0126abd <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126ad6:	e8 eb 5e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126adb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ade:	e8 a1 db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ae3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126ae6:	83 ec 0c             	sub    $0xc,%esp
f0126ae9:	68 00 1c 00 00       	push   $0x1c00
f0126aee:	e8 6c 14 fe ff       	call   f0107f5f <kmalloc>
f0126af3:	83 c4 10             	add    $0x10,%esp
f0126af6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126afc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126b02:	89 c1                	mov    %eax,%ecx
f0126b04:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126b0b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126b10:	0f b6 d0             	movzbl %al,%edx
f0126b13:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126b16:	01 d0                	add    %edx,%eax
f0126b18:	48                   	dec    %eax
f0126b19:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126b1c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126b1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b24:	f7 75 90             	divl   -0x70(%ebp)
f0126b27:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126b2a:	29 d0                	sub    %edx,%eax
f0126b2c:	89 c3                	mov    %eax,%ebx
f0126b2e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126b35:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126b3a:	0f b6 c0             	movzbl %al,%eax
f0126b3d:	c1 e0 04             	shl    $0x4,%eax
f0126b40:	89 c2                	mov    %eax,%edx
f0126b42:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126b45:	01 d0                	add    %edx,%eax
f0126b47:	48                   	dec    %eax
f0126b48:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126b4b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b53:	f7 75 88             	divl   -0x78(%ebp)
f0126b56:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126b59:	29 d0                	sub    %edx,%eax
f0126b5b:	01 d8                	add    %ebx,%eax
f0126b5d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126b62:	39 c1                	cmp    %eax,%ecx
f0126b64:	74 17                	je     f0126b7d <test_kexpand+0x546>
f0126b66:	83 ec 04             	sub    $0x4,%esp
f0126b69:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0126b6e:	68 71 0b 00 00       	push   $0xb71
f0126b73:	68 d2 99 13 f0       	push   $0xf01399d2
f0126b78:	e8 33 96 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b7d:	e8 02 db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126b82:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126b85:	74 17                	je     f0126b9e <test_kexpand+0x567>
f0126b87:	83 ec 04             	sub    $0x4,%esp
f0126b8a:	68 ec 99 13 f0       	push   $0xf01399ec
f0126b8f:	68 72 0b 00 00       	push   $0xb72
f0126b94:	68 d2 99 13 f0       	push   $0xf01399d2
f0126b99:	e8 12 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b9e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ba1:	e8 20 5e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126ba6:	29 c3                	sub    %eax,%ebx
f0126ba8:	89 d8                	mov    %ebx,%eax
f0126baa:	83 f8 02             	cmp    $0x2,%eax
f0126bad:	74 17                	je     f0126bc6 <test_kexpand+0x58f>
f0126baf:	83 ec 04             	sub    $0x4,%esp
f0126bb2:	68 54 9a 13 f0       	push   $0xf0139a54
f0126bb7:	68 73 0b 00 00       	push   $0xb73
f0126bbc:	68 d2 99 13 f0       	push   $0xf01399d2
f0126bc1:	e8 ea 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126bc6:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f0126bcd:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126bd0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126bd6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126bd9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126be0:	eb 0e                	jmp    f0126bf0 <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f0126be2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126be5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126be8:	01 d0                	add    %edx,%eax
f0126bea:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126bed:	ff 45 f4             	incl   -0xc(%ebp)
f0126bf0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126bf6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126bf9:	7f e7                	jg     f0126be2 <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126bfb:	e8 c6 5d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126c00:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c03:	e8 7c da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126c08:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126c0b:	83 ec 0c             	sub    $0xc,%esp
f0126c0e:	68 00 fc 2f 00       	push   $0x2ffc00
f0126c13:	e8 47 13 fe ff       	call   f0107f5f <kmalloc>
f0126c18:	83 c4 10             	add    $0x10,%esp
f0126c1b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126c21:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126c27:	89 c1                	mov    %eax,%ecx
f0126c29:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0126c30:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126c35:	0f b6 d0             	movzbl %al,%edx
f0126c38:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c3b:	01 d0                	add    %edx,%eax
f0126c3d:	48                   	dec    %eax
f0126c3e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0126c44:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126c4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c4f:	f7 75 80             	divl   -0x80(%ebp)
f0126c52:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126c58:	29 d0                	sub    %edx,%eax
f0126c5a:	89 c3                	mov    %eax,%ebx
f0126c5c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0126c63:	10 00 00 
f0126c66:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126c6b:	0f b6 c0             	movzbl %al,%eax
f0126c6e:	c1 e0 04             	shl    $0x4,%eax
f0126c71:	89 c2                	mov    %eax,%edx
f0126c73:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126c79:	01 d0                	add    %edx,%eax
f0126c7b:	48                   	dec    %eax
f0126c7c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126c82:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126c88:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c8d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126c93:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126c99:	29 d0                	sub    %edx,%eax
f0126c9b:	01 d8                	add    %ebx,%eax
f0126c9d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126ca2:	39 c1                	cmp    %eax,%ecx
f0126ca4:	74 17                	je     f0126cbd <test_kexpand+0x686>
f0126ca6:	83 ec 04             	sub    $0x4,%esp
f0126ca9:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0126cae:	68 7f 0b 00 00       	push   $0xb7f
f0126cb3:	68 d2 99 13 f0       	push   $0xf01399d2
f0126cb8:	e8 f3 94 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126cbd:	e8 c2 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126cc2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126cc5:	74 17                	je     f0126cde <test_kexpand+0x6a7>
f0126cc7:	83 ec 04             	sub    $0x4,%esp
f0126cca:	68 ec 99 13 f0       	push   $0xf01399ec
f0126ccf:	68 80 0b 00 00       	push   $0xb80
f0126cd4:	68 d2 99 13 f0       	push   $0xf01399d2
f0126cd9:	e8 d2 94 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126cde:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ce1:	e8 e0 5c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126ce6:	29 c3                	sub    %eax,%ebx
f0126ce8:	89 d8                	mov    %ebx,%eax
f0126cea:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126cef:	74 17                	je     f0126d08 <test_kexpand+0x6d1>
f0126cf1:	83 ec 04             	sub    $0x4,%esp
f0126cf4:	68 54 9a 13 f0       	push   $0xf0139a54
f0126cf9:	68 81 0b 00 00       	push   $0xb81
f0126cfe:	68 d2 99 13 f0       	push   $0xf01399d2
f0126d03:	e8 a8 94 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126d08:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126d0f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126d12:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126d18:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126d1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d22:	eb 0e                	jmp    f0126d32 <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126d24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126d27:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126d2a:	01 d0                	add    %edx,%eax
f0126d2c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126d2f:	ff 45 f4             	incl   -0xc(%ebp)
f0126d32:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126d38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d3b:	7f e7                	jg     f0126d24 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d3d:	e8 84 5c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126d42:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d45:	e8 3a d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126d4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0126d4d:	83 ec 0c             	sub    $0xc,%esp
f0126d50:	68 00 00 60 00       	push   $0x600000
f0126d55:	e8 05 12 fe ff       	call   f0107f5f <kmalloc>
f0126d5a:	83 c4 10             	add    $0x10,%esp
f0126d5d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d63:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126d69:	89 c1                	mov    %eax,%ecx
f0126d6b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126d72:	10 00 00 
f0126d75:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126d7a:	0f b6 d0             	movzbl %al,%edx
f0126d7d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126d83:	01 d0                	add    %edx,%eax
f0126d85:	48                   	dec    %eax
f0126d86:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0126d8c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126d92:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d97:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0126d9d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126da3:	29 d0                	sub    %edx,%eax
f0126da5:	89 c3                	mov    %eax,%ebx
f0126da7:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0126dae:	10 00 00 
f0126db1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126db6:	0f b6 c0             	movzbl %al,%eax
f0126db9:	c1 e0 04             	shl    $0x4,%eax
f0126dbc:	89 c2                	mov    %eax,%edx
f0126dbe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126dc4:	01 d0                	add    %edx,%eax
f0126dc6:	48                   	dec    %eax
f0126dc7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0126dcd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126dd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dd8:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126dde:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126de4:	29 d0                	sub    %edx,%eax
f0126de6:	01 d8                	add    %ebx,%eax
f0126de8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126ded:	39 c1                	cmp    %eax,%ecx
f0126def:	74 17                	je     f0126e08 <test_kexpand+0x7d1>
f0126df1:	83 ec 04             	sub    $0x4,%esp
f0126df4:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0126df9:	68 8d 0b 00 00       	push   $0xb8d
f0126dfe:	68 d2 99 13 f0       	push   $0xf01399d2
f0126e03:	e8 a8 93 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e08:	e8 77 d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126e0d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126e10:	74 17                	je     f0126e29 <test_kexpand+0x7f2>
f0126e12:	83 ec 04             	sub    $0x4,%esp
f0126e15:	68 ec 99 13 f0       	push   $0xf01399ec
f0126e1a:	68 8e 0b 00 00       	push   $0xb8e
f0126e1f:	68 d2 99 13 f0       	push   $0xf01399d2
f0126e24:	e8 87 93 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e29:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126e2c:	e8 95 5b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126e31:	29 c3                	sub    %eax,%ebx
f0126e33:	89 d8                	mov    %ebx,%eax
f0126e35:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126e3a:	74 17                	je     f0126e53 <test_kexpand+0x81c>
f0126e3c:	83 ec 04             	sub    $0x4,%esp
f0126e3f:	68 54 9a 13 f0       	push   $0xf0139a54
f0126e44:	68 8f 0b 00 00       	push   $0xb8f
f0126e49:	68 d2 99 13 f0       	push   $0xf01399d2
f0126e4e:	e8 5d 93 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126e53:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f0126e5a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0126e5d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126e63:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0126e69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e70:	eb 1a                	jmp    f0126e8c <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126e72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126e75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126e7c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126e82:	01 c2                	add    %eax,%edx
f0126e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126e87:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126e89:	ff 45 f4             	incl   -0xc(%ebp)
f0126e8c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126e92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e95:	7d db                	jge    f0126e72 <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126e97:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0126e9e:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0126ea1:	e8 20 5b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126ea6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ea9:	e8 d6 d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126eae:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0126eb1:	83 ec 0c             	sub    $0xc,%esp
f0126eb4:	68 00 00 70 00       	push   $0x700000
f0126eb9:	e8 3d 11 fe ff       	call   f0107ffb <kexpand>
f0126ebe:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126ec1:	e8 be d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ec6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ec9:	74 19                	je     f0126ee4 <test_kexpand+0x8ad>
f0126ecb:	68 6c a7 13 f0       	push   $0xf013a76c
f0126ed0:	68 9d a7 13 f0       	push   $0xf013a79d
f0126ed5:	68 a0 0b 00 00       	push   $0xba0
f0126eda:	68 d2 99 13 f0       	push   $0xf01399d2
f0126edf:	e8 cc 92 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126ee4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ee7:	e8 da 5a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126eec:	29 c3                	sub    %eax,%ebx
f0126eee:	89 d8                	mov    %ebx,%eax
f0126ef0:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126ef5:	74 19                	je     f0126f10 <test_kexpand+0x8d9>
f0126ef7:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0126efc:	68 9d a7 13 f0       	push   $0xf013a79d
f0126f01:	68 a1 0b 00 00       	push   $0xba1
f0126f06:	68 d2 99 13 f0       	push   $0xf01399d2
f0126f0b:	e8 a0 92 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126f10:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126f16:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0126f19:	eb 1a                	jmp    f0126f35 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0126f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126f25:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126f2b:	01 c2                	add    %eax,%edx
f0126f2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f30:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126f32:	ff 45 f4             	incl   -0xc(%ebp)
f0126f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f38:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126f3e:	7c db                	jl     f0126f1b <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126f40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f47:	eb 37                	jmp    f0126f80 <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f0126f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f4c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126f53:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126f59:	01 d0                	add    %edx,%eax
f0126f5b:	8b 10                	mov    (%eax),%edx
f0126f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f60:	39 c2                	cmp    %eax,%edx
f0126f62:	74 19                	je     f0126f7d <test_kexpand+0x946>
f0126f64:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0126f69:	68 9d a7 13 f0       	push   $0xf013a79d
f0126f6e:	68 ad 0b 00 00       	push   $0xbad
f0126f73:	68 d2 99 13 f0       	push   $0xf01399d2
f0126f78:	e8 33 92 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126f7d:	ff 45 f4             	incl   -0xc(%ebp)
f0126f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126f83:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126f89:	7c be                	jl     f0126f49 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126f8b:	e8 36 5a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126f90:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f93:	e8 ec d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f98:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0126f9b:	83 ec 0c             	sub    $0xc,%esp
f0126f9e:	68 00 00 a0 00       	push   $0xa00000
f0126fa3:	e8 53 10 fe ff       	call   f0107ffb <kexpand>
f0126fa8:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126fab:	e8 d4 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126fb0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126fb3:	74 19                	je     f0126fce <test_kexpand+0x997>
f0126fb5:	68 6c a7 13 f0       	push   $0xf013a76c
f0126fba:	68 9d a7 13 f0       	push   $0xf013a79d
f0126fbf:	68 b8 0b 00 00       	push   $0xbb8
f0126fc4:	68 d2 99 13 f0       	push   $0xf01399d2
f0126fc9:	e8 e2 91 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126fce:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126fd1:	e8 f0 59 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126fd6:	29 c3                	sub    %eax,%ebx
f0126fd8:	89 d8                	mov    %ebx,%eax
f0126fda:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126fdf:	74 19                	je     f0126ffa <test_kexpand+0x9c3>
f0126fe1:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0126fe6:	68 9d a7 13 f0       	push   $0xf013a79d
f0126feb:	68 b9 0b 00 00       	push   $0xbb9
f0126ff0:	68 d2 99 13 f0       	push   $0xf01399d2
f0126ff5:	e8 b6 91 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126ffa:	e8 c7 59 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126fff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127002:	e8 7d d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127007:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f012700a:	83 ec 0c             	sub    $0xc,%esp
f012700d:	68 00 00 40 00       	push   $0x400000
f0127012:	e8 48 0f fe ff       	call   f0107f5f <kmalloc>
f0127017:	83 c4 10             	add    $0x10,%esp
f012701a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127020:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127026:	89 c1                	mov    %eax,%ecx
f0127028:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012702f:	10 00 00 
f0127032:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127037:	0f b6 d0             	movzbl %al,%edx
f012703a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127040:	01 d0                	add    %edx,%eax
f0127042:	48                   	dec    %eax
f0127043:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127049:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012704f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127054:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012705a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127060:	29 d0                	sub    %edx,%eax
f0127062:	89 c3                	mov    %eax,%ebx
f0127064:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012706b:	10 00 00 
f012706e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127073:	0f b6 c0             	movzbl %al,%eax
f0127076:	c1 e0 04             	shl    $0x4,%eax
f0127079:	89 c2                	mov    %eax,%edx
f012707b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127081:	01 d0                	add    %edx,%eax
f0127083:	48                   	dec    %eax
f0127084:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012708a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127090:	ba 00 00 00 00       	mov    $0x0,%edx
f0127095:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012709b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01270a1:	29 d0                	sub    %edx,%eax
f01270a3:	01 d8                	add    %ebx,%eax
f01270a5:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01270aa:	39 c1                	cmp    %eax,%ecx
f01270ac:	74 17                	je     f01270c5 <test_kexpand+0xa8e>
f01270ae:	83 ec 04             	sub    $0x4,%esp
f01270b1:	68 20 a8 13 f0       	push   $0xf013a820
f01270b6:	68 c4 0b 00 00       	push   $0xbc4
f01270bb:	68 d2 99 13 f0       	push   $0xf01399d2
f01270c0:	e8 eb 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270c5:	e8 ba d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01270ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01270cd:	74 17                	je     f01270e6 <test_kexpand+0xaaf>
f01270cf:	83 ec 04             	sub    $0x4,%esp
f01270d2:	68 ec 99 13 f0       	push   $0xf01399ec
f01270d7:	68 c5 0b 00 00       	push   $0xbc5
f01270dc:	68 d2 99 13 f0       	push   $0xf01399d2
f01270e1:	e8 ca 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01270e9:	e8 d8 58 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01270ee:	29 c3                	sub    %eax,%ebx
f01270f0:	89 d8                	mov    %ebx,%eax
f01270f2:	3d 00 04 00 00       	cmp    $0x400,%eax
f01270f7:	74 17                	je     f0127110 <test_kexpand+0xad9>
f01270f9:	83 ec 04             	sub    $0x4,%esp
f01270fc:	68 54 9a 13 f0       	push   $0xf0139a54
f0127101:	68 c6 0b 00 00       	push   $0xbc6
f0127106:	68 d2 99 13 f0       	push   $0xf01399d2
f012710b:	e8 a0 90 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0127110:	e8 b1 58 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127115:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127118:	e8 67 d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012711d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127120:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127126:	83 ec 0c             	sub    $0xc,%esp
f0127129:	50                   	push   %eax
f012712a:	e8 4a 0e fe ff       	call   f0107f79 <kfree>
f012712f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127132:	e8 4d d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127137:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012713a:	74 17                	je     f0127153 <test_kexpand+0xb1c>
f012713c:	83 ec 04             	sub    $0x4,%esp
f012713f:	68 ec 99 13 f0       	push   $0xf01399ec
f0127144:	68 cf 0b 00 00       	push   $0xbcf
f0127149:	68 d2 99 13 f0       	push   $0xf01399d2
f012714e:	e8 5d 90 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127153:	e8 6e 58 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127158:	89 c2                	mov    %eax,%edx
f012715a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012715d:	29 c2                	sub    %eax,%edx
f012715f:	89 d0                	mov    %edx,%eax
f0127161:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0127166:	74 17                	je     f012717f <test_kexpand+0xb48>
f0127168:	83 ec 04             	sub    $0x4,%esp
f012716b:	68 84 a2 13 f0       	push   $0xf013a284
f0127170:	68 d0 0b 00 00       	push   $0xbd0
f0127175:	68 d2 99 13 f0       	push   $0xf01399d2
f012717a:	e8 31 90 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012717f:	e8 42 58 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127184:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127187:	e8 f8 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012718c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012718f:	83 ec 0c             	sub    $0xc,%esp
f0127192:	68 00 50 40 00       	push   $0x405000
f0127197:	e8 5f 0e fe ff       	call   f0107ffb <kexpand>
f012719c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012719f:	e8 e0 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01271a4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01271a7:	74 19                	je     f01271c2 <test_kexpand+0xb8b>
f01271a9:	68 6c a7 13 f0       	push   $0xf013a76c
f01271ae:	68 9d a7 13 f0       	push   $0xf013a79d
f01271b3:	68 da 0b 00 00       	push   $0xbda
f01271b8:	68 d2 99 13 f0       	push   $0xf01399d2
f01271bd:	e8 ee 8f fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01271c2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01271c5:	e8 fc 57 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01271ca:	29 c3                	sub    %eax,%ebx
f01271cc:	89 d8                	mov    %ebx,%eax
f01271ce:	83 f8 05             	cmp    $0x5,%eax
f01271d1:	74 19                	je     f01271ec <test_kexpand+0xbb5>
f01271d3:	68 48 a8 13 f0       	push   $0xf013a848
f01271d8:	68 9d a7 13 f0       	push   $0xf013a79d
f01271dd:	68 db 0b 00 00       	push   $0xbdb
f01271e2:	68 d2 99 13 f0       	push   $0xf01399d2
f01271e7:	e8 c4 8f fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01271ec:	83 ec 0c             	sub    $0xc,%esp
f01271ef:	68 30 a7 13 f0       	push   $0xf013a730
f01271f4:	e8 38 9c fd ff       	call   f0100e31 <cprintf>
f01271f9:	83 c4 10             	add    $0x10,%esp

	return 1;
f01271fc:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127201:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127204:	5b                   	pop    %ebx
f0127205:	5f                   	pop    %edi
f0127206:	5d                   	pop    %ebp
f0127207:	c3                   	ret    

f0127208 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127208:	55                   	push   %ebp
f0127209:	89 e5                	mov    %esp,%ebp
f012720b:	57                   	push   %edi
f012720c:	53                   	push   %ebx
f012720d:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0127213:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127217:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012721b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127221:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127227:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012722e:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127235:	e8 8c 57 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012723a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012723d:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0127243:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127248:	b8 00 00 00 00       	mov    $0x0,%eax
f012724d:	89 d7                	mov    %edx,%edi
f012724f:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127251:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0127257:	b9 14 00 00 00       	mov    $0x14,%ecx
f012725c:	b8 00 00 00 00       	mov    $0x0,%eax
f0127261:	89 d7                	mov    %edx,%edi
f0127263:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127265:	e8 5c 57 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012726a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012726d:	e8 12 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127272:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127275:	83 ec 0c             	sub    $0xc,%esp
f0127278:	68 00 fc 1f 00       	push   $0x1ffc00
f012727d:	e8 dd 0c fe ff       	call   f0107f5f <kmalloc>
f0127282:	83 c4 10             	add    $0x10,%esp
f0127285:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012728b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0127291:	89 c1                	mov    %eax,%ecx
f0127293:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012729a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012729f:	0f b6 d0             	movzbl %al,%edx
f01272a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01272a5:	01 d0                	add    %edx,%eax
f01272a7:	48                   	dec    %eax
f01272a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01272ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01272ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01272b3:	f7 75 d4             	divl   -0x2c(%ebp)
f01272b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01272b9:	29 d0                	sub    %edx,%eax
f01272bb:	89 c3                	mov    %eax,%ebx
f01272bd:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01272c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01272c9:	0f b6 c0             	movzbl %al,%eax
f01272cc:	c1 e0 04             	shl    $0x4,%eax
f01272cf:	89 c2                	mov    %eax,%edx
f01272d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01272d4:	01 d0                	add    %edx,%eax
f01272d6:	48                   	dec    %eax
f01272d7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01272da:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01272dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01272e2:	f7 75 cc             	divl   -0x34(%ebp)
f01272e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01272e8:	29 d0                	sub    %edx,%eax
f01272ea:	01 d8                	add    %ebx,%eax
f01272ec:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01272f1:	39 c1                	cmp    %eax,%ecx
f01272f3:	74 17                	je     f012730c <test_kshrink+0x104>
f01272f5:	83 ec 04             	sub    $0x4,%esp
f01272f8:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01272fd:	68 01 0c 00 00       	push   $0xc01
f0127302:	68 d2 99 13 f0       	push   $0xf01399d2
f0127307:	e8 a4 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012730c:	e8 73 d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127311:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127314:	74 17                	je     f012732d <test_kshrink+0x125>
f0127316:	83 ec 04             	sub    $0x4,%esp
f0127319:	68 ec 99 13 f0       	push   $0xf01399ec
f012731e:	68 02 0c 00 00       	push   $0xc02
f0127323:	68 d2 99 13 f0       	push   $0xf01399d2
f0127328:	e8 83 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012732d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127330:	e8 91 56 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127335:	29 c3                	sub    %eax,%ebx
f0127337:	89 d8                	mov    %ebx,%eax
f0127339:	3d 00 02 00 00       	cmp    $0x200,%eax
f012733e:	74 17                	je     f0127357 <test_kshrink+0x14f>
f0127340:	83 ec 04             	sub    $0x4,%esp
f0127343:	68 54 9a 13 f0       	push   $0xf0139a54
f0127348:	68 03 0c 00 00       	push   $0xc03
f012734d:	68 d2 99 13 f0       	push   $0xf01399d2
f0127352:	e8 59 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127357:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f012735e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127361:	e8 60 56 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127366:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127369:	e8 16 d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012736e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127371:	83 ec 0c             	sub    $0xc,%esp
f0127374:	68 00 fc 1f 00       	push   $0x1ffc00
f0127379:	e8 e1 0b fe ff       	call   f0107f5f <kmalloc>
f012737e:	83 c4 10             	add    $0x10,%esp
f0127381:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127387:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012738d:	89 c1                	mov    %eax,%ecx
f012738f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127396:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012739b:	0f b6 d0             	movzbl %al,%edx
f012739e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01273a1:	01 d0                	add    %edx,%eax
f01273a3:	48                   	dec    %eax
f01273a4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01273a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01273aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01273af:	f7 75 c4             	divl   -0x3c(%ebp)
f01273b2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01273b5:	29 d0                	sub    %edx,%eax
f01273b7:	89 c3                	mov    %eax,%ebx
f01273b9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01273c0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01273c5:	0f b6 c0             	movzbl %al,%eax
f01273c8:	c1 e0 04             	shl    $0x4,%eax
f01273cb:	89 c2                	mov    %eax,%edx
f01273cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01273d0:	01 d0                	add    %edx,%eax
f01273d2:	48                   	dec    %eax
f01273d3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01273d6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01273d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01273de:	f7 75 bc             	divl   -0x44(%ebp)
f01273e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01273e4:	29 d0                	sub    %edx,%eax
f01273e6:	01 d8                	add    %ebx,%eax
f01273e8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01273ed:	39 c1                	cmp    %eax,%ecx
f01273ef:	74 17                	je     f0127408 <test_kshrink+0x200>
f01273f1:	83 ec 04             	sub    $0x4,%esp
f01273f4:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01273f9:	68 0a 0c 00 00       	push   $0xc0a
f01273fe:	68 d2 99 13 f0       	push   $0xf01399d2
f0127403:	e8 a8 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127408:	e8 77 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012740d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127410:	74 17                	je     f0127429 <test_kshrink+0x221>
f0127412:	83 ec 04             	sub    $0x4,%esp
f0127415:	68 ec 99 13 f0       	push   $0xf01399ec
f012741a:	68 0b 0c 00 00       	push   $0xc0b
f012741f:	68 d2 99 13 f0       	push   $0xf01399d2
f0127424:	e8 87 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127429:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012742c:	e8 95 55 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127431:	29 c3                	sub    %eax,%ebx
f0127433:	89 d8                	mov    %ebx,%eax
f0127435:	3d 00 02 00 00       	cmp    $0x200,%eax
f012743a:	74 17                	je     f0127453 <test_kshrink+0x24b>
f012743c:	83 ec 04             	sub    $0x4,%esp
f012743f:	68 54 9a 13 f0       	push   $0xf0139a54
f0127444:	68 0c 0c 00 00       	push   $0xc0c
f0127449:	68 d2 99 13 f0       	push   $0xf01399d2
f012744e:	e8 5d 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127453:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f012745a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012745d:	e8 64 55 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127462:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127465:	e8 1a d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012746a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012746d:	83 ec 0c             	sub    $0xc,%esp
f0127470:	68 00 08 00 00       	push   $0x800
f0127475:	e8 e5 0a fe ff       	call   f0107f5f <kmalloc>
f012747a:	83 c4 10             	add    $0x10,%esp
f012747d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127483:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127489:	89 c1                	mov    %eax,%ecx
f012748b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127492:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127497:	0f b6 d0             	movzbl %al,%edx
f012749a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012749d:	01 d0                	add    %edx,%eax
f012749f:	48                   	dec    %eax
f01274a0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01274a3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01274a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01274ab:	f7 75 b4             	divl   -0x4c(%ebp)
f01274ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01274b1:	29 d0                	sub    %edx,%eax
f01274b3:	89 c3                	mov    %eax,%ebx
f01274b5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01274bc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01274c1:	0f b6 c0             	movzbl %al,%eax
f01274c4:	c1 e0 04             	shl    $0x4,%eax
f01274c7:	89 c2                	mov    %eax,%edx
f01274c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01274cc:	01 d0                	add    %edx,%eax
f01274ce:	48                   	dec    %eax
f01274cf:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01274d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01274d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01274da:	f7 75 ac             	divl   -0x54(%ebp)
f01274dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01274e0:	29 d0                	sub    %edx,%eax
f01274e2:	01 d8                	add    %ebx,%eax
f01274e4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01274e9:	39 c1                	cmp    %eax,%ecx
f01274eb:	74 17                	je     f0127504 <test_kshrink+0x2fc>
f01274ed:	83 ec 04             	sub    $0x4,%esp
f01274f0:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01274f5:	68 13 0c 00 00       	push   $0xc13
f01274fa:	68 d2 99 13 f0       	push   $0xf01399d2
f01274ff:	e8 ac 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127504:	e8 7b d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127509:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012750c:	74 17                	je     f0127525 <test_kshrink+0x31d>
f012750e:	83 ec 04             	sub    $0x4,%esp
f0127511:	68 ec 99 13 f0       	push   $0xf01399ec
f0127516:	68 14 0c 00 00       	push   $0xc14
f012751b:	68 d2 99 13 f0       	push   $0xf01399d2
f0127520:	e8 8b 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127525:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127528:	e8 99 54 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012752d:	29 c3                	sub    %eax,%ebx
f012752f:	89 d8                	mov    %ebx,%eax
f0127531:	83 f8 01             	cmp    $0x1,%eax
f0127534:	74 17                	je     f012754d <test_kshrink+0x345>
f0127536:	83 ec 04             	sub    $0x4,%esp
f0127539:	68 54 9a 13 f0       	push   $0xf0139a54
f012753e:	68 15 0c 00 00       	push   $0xc15
f0127543:	68 d2 99 13 f0       	push   $0xf01399d2
f0127548:	e8 63 8c fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012754d:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0127554:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127557:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012755d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127560:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127567:	eb 0e                	jmp    f0127577 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0127569:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012756c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012756f:	01 d0                	add    %edx,%eax
f0127571:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127574:	ff 45 f4             	incl   -0xc(%ebp)
f0127577:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012757d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127580:	7f e7                	jg     f0127569 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127582:	e8 3f 54 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127587:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012758a:	e8 f5 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012758f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127592:	83 ec 0c             	sub    $0xc,%esp
f0127595:	68 00 08 00 00       	push   $0x800
f012759a:	e8 c0 09 fe ff       	call   f0107f5f <kmalloc>
f012759f:	83 c4 10             	add    $0x10,%esp
f01275a2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275a8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01275ae:	89 c1                	mov    %eax,%ecx
f01275b0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01275b7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01275bc:	0f b6 d0             	movzbl %al,%edx
f01275bf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01275c2:	01 d0                	add    %edx,%eax
f01275c4:	48                   	dec    %eax
f01275c5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01275c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01275cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01275d0:	f7 75 a0             	divl   -0x60(%ebp)
f01275d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01275d6:	29 d0                	sub    %edx,%eax
f01275d8:	89 c3                	mov    %eax,%ebx
f01275da:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01275e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01275e6:	0f b6 c0             	movzbl %al,%eax
f01275e9:	c1 e0 04             	shl    $0x4,%eax
f01275ec:	89 c2                	mov    %eax,%edx
f01275ee:	8b 45 98             	mov    -0x68(%ebp),%eax
f01275f1:	01 d0                	add    %edx,%eax
f01275f3:	48                   	dec    %eax
f01275f4:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01275f7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01275fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01275ff:	f7 75 98             	divl   -0x68(%ebp)
f0127602:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127605:	29 d0                	sub    %edx,%eax
f0127607:	01 d8                	add    %ebx,%eax
f0127609:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012760e:	39 c1                	cmp    %eax,%ecx
f0127610:	74 17                	je     f0127629 <test_kshrink+0x421>
f0127612:	83 ec 04             	sub    $0x4,%esp
f0127615:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012761a:	68 21 0c 00 00       	push   $0xc21
f012761f:	68 d2 99 13 f0       	push   $0xf01399d2
f0127624:	e8 87 8b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127629:	e8 56 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012762e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127631:	74 17                	je     f012764a <test_kshrink+0x442>
f0127633:	83 ec 04             	sub    $0x4,%esp
f0127636:	68 ec 99 13 f0       	push   $0xf01399ec
f012763b:	68 22 0c 00 00       	push   $0xc22
f0127640:	68 d2 99 13 f0       	push   $0xf01399d2
f0127645:	e8 66 8b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012764a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012764d:	e8 74 53 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127652:	29 c3                	sub    %eax,%ebx
f0127654:	89 d8                	mov    %ebx,%eax
f0127656:	83 f8 01             	cmp    $0x1,%eax
f0127659:	74 17                	je     f0127672 <test_kshrink+0x46a>
f012765b:	83 ec 04             	sub    $0x4,%esp
f012765e:	68 54 9a 13 f0       	push   $0xf0139a54
f0127663:	68 23 0c 00 00       	push   $0xc23
f0127668:	68 d2 99 13 f0       	push   $0xf01399d2
f012766d:	e8 3e 8b fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127672:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127679:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012767c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127682:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127685:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012768c:	eb 0e                	jmp    f012769c <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f012768e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127691:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127694:	01 d0                	add    %edx,%eax
f0127696:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127699:	ff 45 f4             	incl   -0xc(%ebp)
f012769c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01276a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276a5:	7f e7                	jg     f012768e <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01276a7:	e8 1a 53 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01276ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276af:	e8 d0 cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01276b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01276b7:	83 ec 0c             	sub    $0xc,%esp
f01276ba:	68 00 1c 00 00       	push   $0x1c00
f01276bf:	e8 9b 08 fe ff       	call   f0107f5f <kmalloc>
f01276c4:	83 c4 10             	add    $0x10,%esp
f01276c7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01276cd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01276d3:	89 c1                	mov    %eax,%ecx
f01276d5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01276dc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01276e1:	0f b6 d0             	movzbl %al,%edx
f01276e4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01276e7:	01 d0                	add    %edx,%eax
f01276e9:	48                   	dec    %eax
f01276ea:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01276ed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01276f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01276f5:	f7 75 90             	divl   -0x70(%ebp)
f01276f8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01276fb:	29 d0                	sub    %edx,%eax
f01276fd:	89 c3                	mov    %eax,%ebx
f01276ff:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127706:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012770b:	0f b6 c0             	movzbl %al,%eax
f012770e:	c1 e0 04             	shl    $0x4,%eax
f0127711:	89 c2                	mov    %eax,%edx
f0127713:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127716:	01 d0                	add    %edx,%eax
f0127718:	48                   	dec    %eax
f0127719:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012771c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012771f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127724:	f7 75 88             	divl   -0x78(%ebp)
f0127727:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012772a:	29 d0                	sub    %edx,%eax
f012772c:	01 d8                	add    %ebx,%eax
f012772e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127733:	39 c1                	cmp    %eax,%ecx
f0127735:	74 17                	je     f012774e <test_kshrink+0x546>
f0127737:	83 ec 04             	sub    $0x4,%esp
f012773a:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012773f:	68 2f 0c 00 00       	push   $0xc2f
f0127744:	68 d2 99 13 f0       	push   $0xf01399d2
f0127749:	e8 62 8a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012774e:	e8 31 cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127753:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127756:	74 17                	je     f012776f <test_kshrink+0x567>
f0127758:	83 ec 04             	sub    $0x4,%esp
f012775b:	68 ec 99 13 f0       	push   $0xf01399ec
f0127760:	68 30 0c 00 00       	push   $0xc30
f0127765:	68 d2 99 13 f0       	push   $0xf01399d2
f012776a:	e8 41 8a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012776f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127772:	e8 4f 52 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127777:	29 c3                	sub    %eax,%ebx
f0127779:	89 d8                	mov    %ebx,%eax
f012777b:	83 f8 02             	cmp    $0x2,%eax
f012777e:	74 17                	je     f0127797 <test_kshrink+0x58f>
f0127780:	83 ec 04             	sub    $0x4,%esp
f0127783:	68 54 9a 13 f0       	push   $0xf0139a54
f0127788:	68 31 0c 00 00       	push   $0xc31
f012778d:	68 d2 99 13 f0       	push   $0xf01399d2
f0127792:	e8 19 8a fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127797:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f012779e:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01277a1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01277a7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01277aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01277b1:	eb 0e                	jmp    f01277c1 <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f01277b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01277b6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01277b9:	01 d0                	add    %edx,%eax
f01277bb:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01277be:	ff 45 f4             	incl   -0xc(%ebp)
f01277c1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01277c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01277ca:	7f e7                	jg     f01277b3 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01277cc:	e8 f5 51 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01277d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277d4:	e8 ab ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f01277d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01277dc:	83 ec 0c             	sub    $0xc,%esp
f01277df:	68 00 fc 2f 00       	push   $0x2ffc00
f01277e4:	e8 76 07 fe ff       	call   f0107f5f <kmalloc>
f01277e9:	83 c4 10             	add    $0x10,%esp
f01277ec:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01277f2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01277f8:	89 c1                	mov    %eax,%ecx
f01277fa:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127801:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127806:	0f b6 d0             	movzbl %al,%edx
f0127809:	8b 45 80             	mov    -0x80(%ebp),%eax
f012780c:	01 d0                	add    %edx,%eax
f012780e:	48                   	dec    %eax
f012780f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127815:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012781b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127820:	f7 75 80             	divl   -0x80(%ebp)
f0127823:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127829:	29 d0                	sub    %edx,%eax
f012782b:	89 c3                	mov    %eax,%ebx
f012782d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127834:	10 00 00 
f0127837:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012783c:	0f b6 c0             	movzbl %al,%eax
f012783f:	c1 e0 04             	shl    $0x4,%eax
f0127842:	89 c2                	mov    %eax,%edx
f0127844:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012784a:	01 d0                	add    %edx,%eax
f012784c:	48                   	dec    %eax
f012784d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127853:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127859:	ba 00 00 00 00       	mov    $0x0,%edx
f012785e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127864:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012786a:	29 d0                	sub    %edx,%eax
f012786c:	01 d8                	add    %ebx,%eax
f012786e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127873:	39 c1                	cmp    %eax,%ecx
f0127875:	74 17                	je     f012788e <test_kshrink+0x686>
f0127877:	83 ec 04             	sub    $0x4,%esp
f012787a:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012787f:	68 3d 0c 00 00       	push   $0xc3d
f0127884:	68 d2 99 13 f0       	push   $0xf01399d2
f0127889:	e8 22 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012788e:	e8 f1 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127893:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127896:	74 17                	je     f01278af <test_kshrink+0x6a7>
f0127898:	83 ec 04             	sub    $0x4,%esp
f012789b:	68 ec 99 13 f0       	push   $0xf01399ec
f01278a0:	68 3e 0c 00 00       	push   $0xc3e
f01278a5:	68 d2 99 13 f0       	push   $0xf01399d2
f01278aa:	e8 01 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01278af:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01278b2:	e8 0f 51 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01278b7:	29 c3                	sub    %eax,%ebx
f01278b9:	89 d8                	mov    %ebx,%eax
f01278bb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01278c0:	74 17                	je     f01278d9 <test_kshrink+0x6d1>
f01278c2:	83 ec 04             	sub    $0x4,%esp
f01278c5:	68 54 9a 13 f0       	push   $0xf0139a54
f01278ca:	68 3f 0c 00 00       	push   $0xc3f
f01278cf:	68 d2 99 13 f0       	push   $0xf01399d2
f01278d4:	e8 d7 88 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01278d9:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f01278e0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01278e3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01278e9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01278ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278f3:	eb 0e                	jmp    f0127903 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f01278f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01278f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01278fb:	01 d0                	add    %edx,%eax
f01278fd:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127900:	ff 45 f4             	incl   -0xc(%ebp)
f0127903:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0127909:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012790c:	7f e7                	jg     f01278f5 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012790e:	e8 b3 50 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127913:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127916:	e8 69 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012791b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012791e:	83 ec 0c             	sub    $0xc,%esp
f0127921:	68 00 00 60 00       	push   $0x600000
f0127926:	e8 34 06 fe ff       	call   f0107f5f <kmalloc>
f012792b:	83 c4 10             	add    $0x10,%esp
f012792e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127934:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012793a:	89 c1                	mov    %eax,%ecx
f012793c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127943:	10 00 00 
f0127946:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012794b:	0f b6 d0             	movzbl %al,%edx
f012794e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127954:	01 d0                	add    %edx,%eax
f0127956:	48                   	dec    %eax
f0127957:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012795d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127963:	ba 00 00 00 00       	mov    $0x0,%edx
f0127968:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012796e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127974:	29 d0                	sub    %edx,%eax
f0127976:	89 c3                	mov    %eax,%ebx
f0127978:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012797f:	10 00 00 
f0127982:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127987:	0f b6 c0             	movzbl %al,%eax
f012798a:	c1 e0 04             	shl    $0x4,%eax
f012798d:	89 c2                	mov    %eax,%edx
f012798f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127995:	01 d0                	add    %edx,%eax
f0127997:	48                   	dec    %eax
f0127998:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012799e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01279a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01279a9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01279af:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01279b5:	29 d0                	sub    %edx,%eax
f01279b7:	01 d8                	add    %ebx,%eax
f01279b9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01279be:	39 c1                	cmp    %eax,%ecx
f01279c0:	74 17                	je     f01279d9 <test_kshrink+0x7d1>
f01279c2:	83 ec 04             	sub    $0x4,%esp
f01279c5:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01279ca:	68 4b 0c 00 00       	push   $0xc4b
f01279cf:	68 d2 99 13 f0       	push   $0xf01399d2
f01279d4:	e8 d7 87 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279d9:	e8 a6 cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01279de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279e1:	74 17                	je     f01279fa <test_kshrink+0x7f2>
f01279e3:	83 ec 04             	sub    $0x4,%esp
f01279e6:	68 ec 99 13 f0       	push   $0xf01399ec
f01279eb:	68 4c 0c 00 00       	push   $0xc4c
f01279f0:	68 d2 99 13 f0       	push   $0xf01399d2
f01279f5:	e8 b6 87 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279fa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279fd:	e8 c4 4f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127a02:	29 c3                	sub    %eax,%ebx
f0127a04:	89 d8                	mov    %ebx,%eax
f0127a06:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127a0b:	74 17                	je     f0127a24 <test_kshrink+0x81c>
f0127a0d:	83 ec 04             	sub    $0x4,%esp
f0127a10:	68 54 9a 13 f0       	push   $0xf0139a54
f0127a15:	68 4d 0c 00 00       	push   $0xc4d
f0127a1a:	68 d2 99 13 f0       	push   $0xf01399d2
f0127a1f:	e8 8c 87 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127a24:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f0127a2b:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127a2e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127a34:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127a3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a41:	eb 1a                	jmp    f0127a5d <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127a46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127a4d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127a53:	01 c2                	add    %eax,%edx
f0127a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127a58:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127a5a:	ff 45 f4             	incl   -0xc(%ebp)
f0127a5d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127a63:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a66:	7d db                	jge    f0127a43 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127a68:	e8 59 4f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127a6d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a70:	e8 0f cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a75:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127a78:	83 ec 0c             	sub    $0xc,%esp
f0127a7b:	68 00 00 50 00       	push   $0x500000
f0127a80:	e8 5c 05 fe ff       	call   f0107fe1 <kshrink>
f0127a85:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127a88:	e8 f7 cb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a8d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a90:	74 19                	je     f0127aab <test_kshrink+0x8a3>
f0127a92:	68 6c a7 13 f0       	push   $0xf013a76c
f0127a97:	68 9d a7 13 f0       	push   $0xf013a79d
f0127a9c:	68 5d 0c 00 00       	push   $0xc5d
f0127aa1:	68 d2 99 13 f0       	push   $0xf01399d2
f0127aa6:	e8 05 87 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0127aab:	e8 16 4f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127ab0:	89 c2                	mov    %eax,%edx
f0127ab2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127ab5:	29 c2                	sub    %eax,%edx
f0127ab7:	89 d0                	mov    %edx,%eax
f0127ab9:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127abe:	74 19                	je     f0127ad9 <test_kshrink+0x8d1>
f0127ac0:	68 78 a8 13 f0       	push   $0xf013a878
f0127ac5:	68 9d a7 13 f0       	push   $0xf013a79d
f0127aca:	68 5e 0c 00 00       	push   $0xc5e
f0127acf:	68 d2 99 13 f0       	push   $0xf01399d2
f0127ad4:	e8 d7 86 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0127ad9:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f0127ae0:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127ae3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127aea:	eb 37                	jmp    f0127b23 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f0127aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127aef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127af6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127afc:	01 d0                	add    %edx,%eax
f0127afe:	8b 10                	mov    (%eax),%edx
f0127b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b03:	39 c2                	cmp    %eax,%edx
f0127b05:	74 19                	je     f0127b20 <test_kshrink+0x918>
f0127b07:	68 a8 a8 13 f0       	push   $0xf013a8a8
f0127b0c:	68 9d a7 13 f0       	push   $0xf013a79d
f0127b11:	68 66 0c 00 00       	push   $0xc66
f0127b16:	68 d2 99 13 f0       	push   $0xf01399d2
f0127b1b:	e8 90 86 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127b20:	ff 45 f4             	incl   -0xc(%ebp)
f0127b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b26:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0127b2c:	7e be                	jle    f0127aec <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127b2e:	83 ec 0c             	sub    $0xc,%esp
f0127b31:	6a 03                	push   $0x3
f0127b33:	e8 29 53 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0127b38:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0127b3b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127b41:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127b44:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127b47:	05 00 00 50 00       	add    $0x500000,%eax
f0127b4c:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0127b4f:	e8 fb 52 fe ff       	call   f010ce4f <sys_rcr2>
f0127b54:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127b57:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0127b5d:	39 d0                	cmp    %edx,%eax
f0127b5f:	74 19                	je     f0127b7a <test_kshrink+0x972>
f0127b61:	68 b4 a8 13 f0       	push   $0xf013a8b4
f0127b66:	68 9d a7 13 f0       	push   $0xf013a79d
f0127b6b:	68 6f 0c 00 00       	push   $0xc6f
f0127b70:	68 d2 99 13 f0       	push   $0xf01399d2
f0127b75:	e8 36 86 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0127b7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127b7d:	05 00 10 50 00       	add    $0x501000,%eax
f0127b82:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127b85:	e8 c5 52 fe ff       	call   f010ce4f <sys_rcr2>
f0127b8a:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127b8d:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0127b93:	39 d0                	cmp    %edx,%eax
f0127b95:	74 19                	je     f0127bb0 <test_kshrink+0x9a8>
f0127b97:	68 dc a8 13 f0       	push   $0xf013a8dc
f0127b9c:	68 9d a7 13 f0       	push   $0xf013a79d
f0127ba1:	68 72 0c 00 00       	push   $0xc72
f0127ba6:	68 d2 99 13 f0       	push   $0xf01399d2
f0127bab:	e8 00 86 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f0127bb0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127bb3:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0127bb8:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0127bbb:	e8 8f 52 fe ff       	call   f010ce4f <sys_rcr2>
f0127bc0:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127bc3:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0127bc9:	39 d0                	cmp    %edx,%eax
f0127bcb:	74 19                	je     f0127be6 <test_kshrink+0x9de>
f0127bcd:	68 08 a9 13 f0       	push   $0xf013a908
f0127bd2:	68 9d a7 13 f0       	push   $0xf013a79d
f0127bd7:	68 75 0c 00 00       	push   $0xc75
f0127bdc:	68 d2 99 13 f0       	push   $0xf01399d2
f0127be1:	e8 ca 85 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127be6:	83 ec 0c             	sub    $0xc,%esp
f0127be9:	6a 00                	push   $0x0
f0127beb:	e8 71 52 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0127bf0:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127bf3:	e8 ce 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127bf8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bfb:	e8 84 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c00:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0127c03:	83 ec 0c             	sub    $0xc,%esp
f0127c06:	68 00 00 20 00       	push   $0x200000
f0127c0b:	e8 d1 03 fe ff       	call   f0107fe1 <kshrink>
f0127c10:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127c13:	e8 6c ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c18:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c1b:	74 19                	je     f0127c36 <test_kshrink+0xa2e>
f0127c1d:	68 6c a7 13 f0       	push   $0xf013a76c
f0127c22:	68 9d a7 13 f0       	push   $0xf013a79d
f0127c27:	68 82 0c 00 00       	push   $0xc82
f0127c2c:	68 d2 99 13 f0       	push   $0xf01399d2
f0127c31:	e8 7a 85 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0127c36:	e8 8b 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127c3b:	89 c2                	mov    %eax,%edx
f0127c3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127c40:	29 c2                	sub    %eax,%edx
f0127c42:	89 d0                	mov    %edx,%eax
f0127c44:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127c49:	74 19                	je     f0127c64 <test_kshrink+0xa5c>
f0127c4b:	68 34 a9 13 f0       	push   $0xf013a934
f0127c50:	68 9d a7 13 f0       	push   $0xf013a79d
f0127c55:	68 83 0c 00 00       	push   $0xc83
f0127c5a:	68 d2 99 13 f0       	push   $0xf01399d2
f0127c5f:	e8 4c 85 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127c64:	e8 5d 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127c69:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c6c:	e8 13 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c71:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127c74:	83 ec 0c             	sub    $0xc,%esp
f0127c77:	68 00 00 40 00       	push   $0x400000
f0127c7c:	e8 de 02 fe ff       	call   f0107f5f <kmalloc>
f0127c81:	83 c4 10             	add    $0x10,%esp
f0127c84:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127c8a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127c91:	10 00 00 
f0127c94:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127c99:	0f b6 d0             	movzbl %al,%edx
f0127c9c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127ca2:	01 d0                	add    %edx,%eax
f0127ca4:	48                   	dec    %eax
f0127ca5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127cab:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127cb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cb6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127cbc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127cc2:	29 d0                	sub    %edx,%eax
f0127cc4:	89 c1                	mov    %eax,%ecx
f0127cc6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127ccd:	10 00 00 
f0127cd0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127cd5:	0f b6 c0             	movzbl %al,%eax
f0127cd8:	c1 e0 04             	shl    $0x4,%eax
f0127cdb:	89 c2                	mov    %eax,%edx
f0127cdd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127ce3:	01 d0                	add    %edx,%eax
f0127ce5:	48                   	dec    %eax
f0127ce6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127cec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cf7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127cfd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d03:	29 d0                	sub    %edx,%eax
f0127d05:	01 c8                	add    %ecx,%eax
f0127d07:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0127d0d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127d13:	83 ec 04             	sub    $0x4,%esp
f0127d16:	52                   	push   %edx
f0127d17:	50                   	push   %eax
f0127d18:	68 64 a9 13 f0       	push   $0xf013a964
f0127d1d:	e8 0f 91 fd ff       	call   f0100e31 <cprintf>
f0127d22:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127d25:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127d2b:	89 c1                	mov    %eax,%ecx
f0127d2d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127d34:	10 00 00 
f0127d37:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127d3c:	0f b6 d0             	movzbl %al,%edx
f0127d3f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127d45:	01 d0                	add    %edx,%eax
f0127d47:	48                   	dec    %eax
f0127d48:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127d4e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127d54:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d59:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127d5f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127d65:	29 d0                	sub    %edx,%eax
f0127d67:	89 c3                	mov    %eax,%ebx
f0127d69:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127d70:	10 00 00 
f0127d73:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127d78:	0f b6 c0             	movzbl %al,%eax
f0127d7b:	c1 e0 04             	shl    $0x4,%eax
f0127d7e:	89 c2                	mov    %eax,%edx
f0127d80:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127d86:	01 d0                	add    %edx,%eax
f0127d88:	48                   	dec    %eax
f0127d89:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127d8f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127d95:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d9a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127da0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127da6:	29 d0                	sub    %edx,%eax
f0127da8:	01 d8                	add    %ebx,%eax
f0127daa:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0127daf:	39 c1                	cmp    %eax,%ecx
f0127db1:	74 17                	je     f0127dca <test_kshrink+0xbc2>
f0127db3:	83 ec 04             	sub    $0x4,%esp
f0127db6:	68 80 a9 13 f0       	push   $0xf013a980
f0127dbb:	68 8e 0c 00 00       	push   $0xc8e
f0127dc0:	68 d2 99 13 f0       	push   $0xf01399d2
f0127dc5:	e8 e6 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dca:	e8 b5 c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127dcf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127dd2:	74 17                	je     f0127deb <test_kshrink+0xbe3>
f0127dd4:	83 ec 04             	sub    $0x4,%esp
f0127dd7:	68 ec 99 13 f0       	push   $0xf01399ec
f0127ddc:	68 8f 0c 00 00       	push   $0xc8f
f0127de1:	68 d2 99 13 f0       	push   $0xf01399d2
f0127de6:	e8 c5 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127deb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127dee:	e8 d3 4b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127df3:	29 c3                	sub    %eax,%ebx
f0127df5:	89 d8                	mov    %ebx,%eax
f0127df7:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127dfc:	74 17                	je     f0127e15 <test_kshrink+0xc0d>
f0127dfe:	83 ec 04             	sub    $0x4,%esp
f0127e01:	68 54 9a 13 f0       	push   $0xf0139a54
f0127e06:	68 90 0c 00 00       	push   $0xc90
f0127e0b:	68 d2 99 13 f0       	push   $0xf01399d2
f0127e10:	e8 9b 83 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127e15:	e8 ac 4b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127e1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e1d:	e8 62 c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e22:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127e25:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127e2b:	83 ec 0c             	sub    $0xc,%esp
f0127e2e:	50                   	push   %eax
f0127e2f:	e8 45 01 fe ff       	call   f0107f79 <kfree>
f0127e34:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e37:	e8 48 c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e3c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e3f:	74 17                	je     f0127e58 <test_kshrink+0xc50>
f0127e41:	83 ec 04             	sub    $0x4,%esp
f0127e44:	68 ec 99 13 f0       	push   $0xf01399ec
f0127e49:	68 9a 0c 00 00       	push   $0xc9a
f0127e4e:	68 d2 99 13 f0       	push   $0xf01399d2
f0127e53:	e8 58 83 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127e58:	e8 69 4b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127e5d:	89 c2                	mov    %eax,%edx
f0127e5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127e62:	29 c2                	sub    %eax,%edx
f0127e64:	89 d0                	mov    %edx,%eax
f0127e66:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e6b:	74 17                	je     f0127e84 <test_kshrink+0xc7c>
f0127e6d:	83 ec 04             	sub    $0x4,%esp
f0127e70:	68 84 a2 13 f0       	push   $0xf013a284
f0127e75:	68 9b 0c 00 00       	push   $0xc9b
f0127e7a:	68 d2 99 13 f0       	push   $0xf01399d2
f0127e7f:	e8 2c 83 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127e84:	e8 3d 4b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127e89:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e8c:	e8 f3 c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e91:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127e94:	83 ec 0c             	sub    $0xc,%esp
f0127e97:	68 00 b0 3f 00       	push   $0x3fb000
f0127e9c:	e8 40 01 fe ff       	call   f0107fe1 <kshrink>
f0127ea1:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127ea4:	e8 db c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127ea9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127eac:	74 19                	je     f0127ec7 <test_kshrink+0xcbf>
f0127eae:	68 6c a7 13 f0       	push   $0xf013a76c
f0127eb3:	68 9d a7 13 f0       	push   $0xf013a79d
f0127eb8:	68 a5 0c 00 00       	push   $0xca5
f0127ebd:	68 d2 99 13 f0       	push   $0xf01399d2
f0127ec2:	e8 e9 82 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127ec7:	e8 fa 4a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127ecc:	89 c2                	mov    %eax,%edx
f0127ece:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127ed1:	29 c2                	sub    %eax,%edx
f0127ed3:	89 d0                	mov    %edx,%eax
f0127ed5:	83 f8 05             	cmp    $0x5,%eax
f0127ed8:	74 19                	je     f0127ef3 <test_kshrink+0xceb>
f0127eda:	68 d4 a9 13 f0       	push   $0xf013a9d4
f0127edf:	68 9d a7 13 f0       	push   $0xf013a79d
f0127ee4:	68 a6 0c 00 00       	push   $0xca6
f0127ee9:	68 d2 99 13 f0       	push   $0xf01399d2
f0127eee:	e8 bd 82 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127ef3:	83 ec 0c             	sub    $0xc,%esp
f0127ef6:	68 30 a7 13 f0       	push   $0xf013a730
f0127efb:	e8 31 8f fd ff       	call   f0100e31 <cprintf>
f0127f00:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127f03:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127f08:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127f0b:	5b                   	pop    %ebx
f0127f0c:	5f                   	pop    %edi
f0127f0d:	5d                   	pop    %ebp
f0127f0e:	c3                   	ret    

f0127f0f <test_kfreelast>:


int test_kfreelast()
{
f0127f0f:	55                   	push   %ebp
f0127f10:	89 e5                	mov    %esp,%ebp
f0127f12:	57                   	push   %edi
f0127f13:	53                   	push   %ebx
f0127f14:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0127f1a:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127f1e:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127f22:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0127f28:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127f2e:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127f35:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127f3c:	e8 85 4a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127f41:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127f44:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f0127f4a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0127f54:	89 d7                	mov    %edx,%edi
f0127f56:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0127f58:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f0127f5e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127f63:	b8 00 00 00 00       	mov    $0x0,%eax
f0127f68:	89 d7                	mov    %edx,%edi
f0127f6a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0127f6c:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f0127f72:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127f77:	b8 00 00 00 00       	mov    $0x0,%eax
f0127f7c:	89 d7                	mov    %edx,%edi
f0127f7e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f80:	e8 41 4a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127f85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f88:	e8 f7 c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127f90:	83 ec 0c             	sub    $0xc,%esp
f0127f93:	68 00 fc 1f 00       	push   $0x1ffc00
f0127f98:	e8 c2 ff fd ff       	call   f0107f5f <kmalloc>
f0127f9d:	83 c4 10             	add    $0x10,%esp
f0127fa0:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127fa6:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127fac:	89 c1                	mov    %eax,%ecx
f0127fae:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127fb5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127fba:	0f b6 d0             	movzbl %al,%edx
f0127fbd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127fc0:	01 d0                	add    %edx,%eax
f0127fc2:	48                   	dec    %eax
f0127fc3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127fc6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127fc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fce:	f7 75 cc             	divl   -0x34(%ebp)
f0127fd1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127fd4:	29 d0                	sub    %edx,%eax
f0127fd6:	89 c3                	mov    %eax,%ebx
f0127fd8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127fdf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127fe4:	0f b6 c0             	movzbl %al,%eax
f0127fe7:	c1 e0 04             	shl    $0x4,%eax
f0127fea:	89 c2                	mov    %eax,%edx
f0127fec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127fef:	01 d0                	add    %edx,%eax
f0127ff1:	48                   	dec    %eax
f0127ff2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127ff5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127ff8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ffd:	f7 75 c4             	divl   -0x3c(%ebp)
f0128000:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128003:	29 d0                	sub    %edx,%eax
f0128005:	01 d8                	add    %ebx,%eax
f0128007:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012800c:	39 c1                	cmp    %eax,%ecx
f012800e:	74 17                	je     f0128027 <test_kfreelast+0x118>
f0128010:	83 ec 04             	sub    $0x4,%esp
f0128013:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128018:	68 ca 0c 00 00       	push   $0xcca
f012801d:	68 d2 99 13 f0       	push   $0xf01399d2
f0128022:	e8 89 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128027:	e8 58 c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012802c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012802f:	74 17                	je     f0128048 <test_kfreelast+0x139>
f0128031:	83 ec 04             	sub    $0x4,%esp
f0128034:	68 ec 99 13 f0       	push   $0xf01399ec
f0128039:	68 cb 0c 00 00       	push   $0xccb
f012803e:	68 d2 99 13 f0       	push   $0xf01399d2
f0128043:	e8 68 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128048:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012804b:	e8 76 49 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128050:	29 c3                	sub    %eax,%ebx
f0128052:	89 d8                	mov    %ebx,%eax
f0128054:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128059:	74 17                	je     f0128072 <test_kfreelast+0x163>
f012805b:	83 ec 04             	sub    $0x4,%esp
f012805e:	68 54 9a 13 f0       	push   $0xf0139a54
f0128063:	68 cc 0c 00 00       	push   $0xccc
f0128068:	68 d2 99 13 f0       	push   $0xf01399d2
f012806d:	e8 3e 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128072:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0128079:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012807c:	e8 45 49 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128081:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128084:	e8 fb c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128089:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012808c:	83 ec 0c             	sub    $0xc,%esp
f012808f:	68 00 fc 1f 00       	push   $0x1ffc00
f0128094:	e8 c6 fe fd ff       	call   f0107f5f <kmalloc>
f0128099:	83 c4 10             	add    $0x10,%esp
f012809c:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280a2:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01280a8:	89 c1                	mov    %eax,%ecx
f01280aa:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01280b1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01280b6:	0f b6 d0             	movzbl %al,%edx
f01280b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01280bc:	01 d0                	add    %edx,%eax
f01280be:	48                   	dec    %eax
f01280bf:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01280c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01280c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01280ca:	f7 75 bc             	divl   -0x44(%ebp)
f01280cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01280d0:	29 d0                	sub    %edx,%eax
f01280d2:	89 c3                	mov    %eax,%ebx
f01280d4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01280db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01280e0:	0f b6 c0             	movzbl %al,%eax
f01280e3:	c1 e0 04             	shl    $0x4,%eax
f01280e6:	89 c2                	mov    %eax,%edx
f01280e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01280eb:	01 d0                	add    %edx,%eax
f01280ed:	48                   	dec    %eax
f01280ee:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01280f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01280f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01280f9:	f7 75 b4             	divl   -0x4c(%ebp)
f01280fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01280ff:	29 d0                	sub    %edx,%eax
f0128101:	01 d8                	add    %ebx,%eax
f0128103:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128108:	39 c1                	cmp    %eax,%ecx
f012810a:	74 17                	je     f0128123 <test_kfreelast+0x214>
f012810c:	83 ec 04             	sub    $0x4,%esp
f012810f:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128114:	68 d3 0c 00 00       	push   $0xcd3
f0128119:	68 d2 99 13 f0       	push   $0xf01399d2
f012811e:	e8 8d 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128123:	e8 5c c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128128:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012812b:	74 17                	je     f0128144 <test_kfreelast+0x235>
f012812d:	83 ec 04             	sub    $0x4,%esp
f0128130:	68 ec 99 13 f0       	push   $0xf01399ec
f0128135:	68 d4 0c 00 00       	push   $0xcd4
f012813a:	68 d2 99 13 f0       	push   $0xf01399d2
f012813f:	e8 6c 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128144:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128147:	e8 7a 48 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012814c:	29 c3                	sub    %eax,%ebx
f012814e:	89 d8                	mov    %ebx,%eax
f0128150:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128155:	74 17                	je     f012816e <test_kfreelast+0x25f>
f0128157:	83 ec 04             	sub    $0x4,%esp
f012815a:	68 54 9a 13 f0       	push   $0xf0139a54
f012815f:	68 d5 0c 00 00       	push   $0xcd5
f0128164:	68 d2 99 13 f0       	push   $0xf01399d2
f0128169:	e8 42 80 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012816e:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0128175:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128178:	e8 49 48 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012817d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128180:	e8 ff c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128185:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128188:	83 ec 0c             	sub    $0xc,%esp
f012818b:	68 00 08 00 00       	push   $0x800
f0128190:	e8 ca fd fd ff       	call   f0107f5f <kmalloc>
f0128195:	83 c4 10             	add    $0x10,%esp
f0128198:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012819e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01281a4:	89 c1                	mov    %eax,%ecx
f01281a6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01281ad:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01281b2:	0f b6 d0             	movzbl %al,%edx
f01281b5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01281b8:	01 d0                	add    %edx,%eax
f01281ba:	48                   	dec    %eax
f01281bb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01281be:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01281c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01281c6:	f7 75 ac             	divl   -0x54(%ebp)
f01281c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01281cc:	29 d0                	sub    %edx,%eax
f01281ce:	89 c3                	mov    %eax,%ebx
f01281d0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01281d7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01281dc:	0f b6 c0             	movzbl %al,%eax
f01281df:	c1 e0 04             	shl    $0x4,%eax
f01281e2:	89 c2                	mov    %eax,%edx
f01281e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01281e7:	01 d0                	add    %edx,%eax
f01281e9:	48                   	dec    %eax
f01281ea:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01281ed:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01281f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01281f5:	f7 75 a4             	divl   -0x5c(%ebp)
f01281f8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01281fb:	29 d0                	sub    %edx,%eax
f01281fd:	01 d8                	add    %ebx,%eax
f01281ff:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128204:	39 c1                	cmp    %eax,%ecx
f0128206:	74 17                	je     f012821f <test_kfreelast+0x310>
f0128208:	83 ec 04             	sub    $0x4,%esp
f012820b:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128210:	68 dc 0c 00 00       	push   $0xcdc
f0128215:	68 d2 99 13 f0       	push   $0xf01399d2
f012821a:	e8 91 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012821f:	e8 60 c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128224:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128227:	74 17                	je     f0128240 <test_kfreelast+0x331>
f0128229:	83 ec 04             	sub    $0x4,%esp
f012822c:	68 ec 99 13 f0       	push   $0xf01399ec
f0128231:	68 dd 0c 00 00       	push   $0xcdd
f0128236:	68 d2 99 13 f0       	push   $0xf01399d2
f012823b:	e8 70 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128240:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128243:	e8 7e 47 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128248:	29 c3                	sub    %eax,%ebx
f012824a:	89 d8                	mov    %ebx,%eax
f012824c:	83 f8 01             	cmp    $0x1,%eax
f012824f:	74 17                	je     f0128268 <test_kfreelast+0x359>
f0128251:	83 ec 04             	sub    $0x4,%esp
f0128254:	68 54 9a 13 f0       	push   $0xf0139a54
f0128259:	68 de 0c 00 00       	push   $0xcde
f012825e:	68 d2 99 13 f0       	push   $0xf01399d2
f0128263:	e8 48 7f fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128268:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012826f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128272:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128278:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012827b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128282:	eb 0e                	jmp    f0128292 <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0128284:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128287:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012828a:	01 d0                	add    %edx,%eax
f012828c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012828f:	ff 45 f4             	incl   -0xc(%ebp)
f0128292:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128298:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012829b:	7f e7                	jg     f0128284 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012829d:	e8 24 47 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01282a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282a5:	e8 da c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01282aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01282ad:	83 ec 0c             	sub    $0xc,%esp
f01282b0:	68 00 08 00 00       	push   $0x800
f01282b5:	e8 a5 fc fd ff       	call   f0107f5f <kmalloc>
f01282ba:	83 c4 10             	add    $0x10,%esp
f01282bd:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01282c3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01282c9:	89 c1                	mov    %eax,%ecx
f01282cb:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01282d2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01282d7:	0f b6 d0             	movzbl %al,%edx
f01282da:	8b 45 98             	mov    -0x68(%ebp),%eax
f01282dd:	01 d0                	add    %edx,%eax
f01282df:	48                   	dec    %eax
f01282e0:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01282e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01282e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01282eb:	f7 75 98             	divl   -0x68(%ebp)
f01282ee:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01282f1:	29 d0                	sub    %edx,%eax
f01282f3:	89 c3                	mov    %eax,%ebx
f01282f5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01282fc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128301:	0f b6 c0             	movzbl %al,%eax
f0128304:	c1 e0 04             	shl    $0x4,%eax
f0128307:	89 c2                	mov    %eax,%edx
f0128309:	8b 45 90             	mov    -0x70(%ebp),%eax
f012830c:	01 d0                	add    %edx,%eax
f012830e:	48                   	dec    %eax
f012830f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0128312:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128315:	ba 00 00 00 00       	mov    $0x0,%edx
f012831a:	f7 75 90             	divl   -0x70(%ebp)
f012831d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128320:	29 d0                	sub    %edx,%eax
f0128322:	01 d8                	add    %ebx,%eax
f0128324:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128329:	39 c1                	cmp    %eax,%ecx
f012832b:	74 17                	je     f0128344 <test_kfreelast+0x435>
f012832d:	83 ec 04             	sub    $0x4,%esp
f0128330:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128335:	68 ea 0c 00 00       	push   $0xcea
f012833a:	68 d2 99 13 f0       	push   $0xf01399d2
f012833f:	e8 6c 7e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128344:	e8 3b c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128349:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012834c:	74 17                	je     f0128365 <test_kfreelast+0x456>
f012834e:	83 ec 04             	sub    $0x4,%esp
f0128351:	68 ec 99 13 f0       	push   $0xf01399ec
f0128356:	68 eb 0c 00 00       	push   $0xceb
f012835b:	68 d2 99 13 f0       	push   $0xf01399d2
f0128360:	e8 4b 7e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128365:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128368:	e8 59 46 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012836d:	29 c3                	sub    %eax,%ebx
f012836f:	89 d8                	mov    %ebx,%eax
f0128371:	83 f8 01             	cmp    $0x1,%eax
f0128374:	74 17                	je     f012838d <test_kfreelast+0x47e>
f0128376:	83 ec 04             	sub    $0x4,%esp
f0128379:	68 54 9a 13 f0       	push   $0xf0139a54
f012837e:	68 ec 0c 00 00       	push   $0xcec
f0128383:	68 d2 99 13 f0       	push   $0xf01399d2
f0128388:	e8 23 7e fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012838d:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f0128394:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128397:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012839d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01283a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01283a7:	eb 0e                	jmp    f01283b7 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f01283a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01283ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01283af:	01 d0                	add    %edx,%eax
f01283b1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01283b4:	ff 45 f4             	incl   -0xc(%ebp)
f01283b7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01283bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01283c0:	7f e7                	jg     f01283a9 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01283c2:	e8 ff 45 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01283c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283ca:	e8 b5 c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01283cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01283d2:	83 ec 0c             	sub    $0xc,%esp
f01283d5:	68 00 1c 00 00       	push   $0x1c00
f01283da:	e8 80 fb fd ff       	call   f0107f5f <kmalloc>
f01283df:	83 c4 10             	add    $0x10,%esp
f01283e2:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01283e8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01283ee:	89 c1                	mov    %eax,%ecx
f01283f0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01283f7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01283fc:	0f b6 d0             	movzbl %al,%edx
f01283ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128402:	01 d0                	add    %edx,%eax
f0128404:	48                   	dec    %eax
f0128405:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128408:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012840b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128410:	f7 75 88             	divl   -0x78(%ebp)
f0128413:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128416:	29 d0                	sub    %edx,%eax
f0128418:	89 c3                	mov    %eax,%ebx
f012841a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128421:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128426:	0f b6 c0             	movzbl %al,%eax
f0128429:	c1 e0 04             	shl    $0x4,%eax
f012842c:	89 c2                	mov    %eax,%edx
f012842e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128431:	01 d0                	add    %edx,%eax
f0128433:	48                   	dec    %eax
f0128434:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012843a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128440:	ba 00 00 00 00       	mov    $0x0,%edx
f0128445:	f7 75 80             	divl   -0x80(%ebp)
f0128448:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012844e:	29 d0                	sub    %edx,%eax
f0128450:	01 d8                	add    %ebx,%eax
f0128452:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128457:	39 c1                	cmp    %eax,%ecx
f0128459:	74 17                	je     f0128472 <test_kfreelast+0x563>
f012845b:	83 ec 04             	sub    $0x4,%esp
f012845e:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128463:	68 f8 0c 00 00       	push   $0xcf8
f0128468:	68 d2 99 13 f0       	push   $0xf01399d2
f012846d:	e8 3e 7d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128472:	e8 0d c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128477:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012847a:	74 17                	je     f0128493 <test_kfreelast+0x584>
f012847c:	83 ec 04             	sub    $0x4,%esp
f012847f:	68 ec 99 13 f0       	push   $0xf01399ec
f0128484:	68 f9 0c 00 00       	push   $0xcf9
f0128489:	68 d2 99 13 f0       	push   $0xf01399d2
f012848e:	e8 1d 7d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128493:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128496:	e8 2b 45 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012849b:	29 c3                	sub    %eax,%ebx
f012849d:	89 d8                	mov    %ebx,%eax
f012849f:	83 f8 02             	cmp    $0x2,%eax
f01284a2:	74 17                	je     f01284bb <test_kfreelast+0x5ac>
f01284a4:	83 ec 04             	sub    $0x4,%esp
f01284a7:	68 54 9a 13 f0       	push   $0xf0139a54
f01284ac:	68 fa 0c 00 00       	push   $0xcfa
f01284b1:	68 d2 99 13 f0       	push   $0xf01399d2
f01284b6:	e8 f5 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01284bb:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f01284c2:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01284c5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01284cb:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01284ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284d5:	eb 0e                	jmp    f01284e5 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f01284d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01284da:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01284dd:	01 d0                	add    %edx,%eax
f01284df:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01284e2:	ff 45 f4             	incl   -0xc(%ebp)
f01284e5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01284eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284ee:	7f e7                	jg     f01284d7 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01284f0:	e8 d1 44 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01284f5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284f8:	e8 87 c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01284fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128500:	83 ec 0c             	sub    $0xc,%esp
f0128503:	68 00 fc 2f 00       	push   $0x2ffc00
f0128508:	e8 52 fa fd ff       	call   f0107f5f <kmalloc>
f012850d:	83 c4 10             	add    $0x10,%esp
f0128510:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128516:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012851c:	89 c1                	mov    %eax,%ecx
f012851e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128525:	10 00 00 
f0128528:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012852d:	0f b6 d0             	movzbl %al,%edx
f0128530:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128536:	01 d0                	add    %edx,%eax
f0128538:	48                   	dec    %eax
f0128539:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012853f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128545:	ba 00 00 00 00       	mov    $0x0,%edx
f012854a:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128550:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128556:	29 d0                	sub    %edx,%eax
f0128558:	89 c3                	mov    %eax,%ebx
f012855a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128561:	10 00 00 
f0128564:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128569:	0f b6 c0             	movzbl %al,%eax
f012856c:	c1 e0 04             	shl    $0x4,%eax
f012856f:	89 c2                	mov    %eax,%edx
f0128571:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128577:	01 d0                	add    %edx,%eax
f0128579:	48                   	dec    %eax
f012857a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128580:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128586:	ba 00 00 00 00       	mov    $0x0,%edx
f012858b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128591:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128597:	29 d0                	sub    %edx,%eax
f0128599:	01 d8                	add    %ebx,%eax
f012859b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01285a0:	39 c1                	cmp    %eax,%ecx
f01285a2:	74 17                	je     f01285bb <test_kfreelast+0x6ac>
f01285a4:	83 ec 04             	sub    $0x4,%esp
f01285a7:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01285ac:	68 06 0d 00 00       	push   $0xd06
f01285b1:	68 d2 99 13 f0       	push   $0xf01399d2
f01285b6:	e8 f5 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285bb:	e8 c4 c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01285c0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01285c3:	74 17                	je     f01285dc <test_kfreelast+0x6cd>
f01285c5:	83 ec 04             	sub    $0x4,%esp
f01285c8:	68 ec 99 13 f0       	push   $0xf01399ec
f01285cd:	68 07 0d 00 00       	push   $0xd07
f01285d2:	68 d2 99 13 f0       	push   $0xf01399d2
f01285d7:	e8 d4 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285dc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01285df:	e8 e2 43 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01285e4:	29 c3                	sub    %eax,%ebx
f01285e6:	89 d8                	mov    %ebx,%eax
f01285e8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01285ed:	74 17                	je     f0128606 <test_kfreelast+0x6f7>
f01285ef:	83 ec 04             	sub    $0x4,%esp
f01285f2:	68 54 9a 13 f0       	push   $0xf0139a54
f01285f7:	68 08 0d 00 00       	push   $0xd08
f01285fc:	68 d2 99 13 f0       	push   $0xf01399d2
f0128601:	e8 aa 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128606:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f012860d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128610:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128616:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128619:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128620:	eb 0e                	jmp    f0128630 <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f0128622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128625:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128628:	01 d0                	add    %edx,%eax
f012862a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012862d:	ff 45 f4             	incl   -0xc(%ebp)
f0128630:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128636:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128639:	7f e7                	jg     f0128622 <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012863b:	e8 86 43 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128640:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128643:	e8 3c c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128648:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012864b:	83 ec 0c             	sub    $0xc,%esp
f012864e:	68 00 fc 5f 00       	push   $0x5ffc00
f0128653:	e8 07 f9 fd ff       	call   f0107f5f <kmalloc>
f0128658:	83 c4 10             	add    $0x10,%esp
f012865b:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128661:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128667:	89 c1                	mov    %eax,%ecx
f0128669:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128670:	10 00 00 
f0128673:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128678:	0f b6 d0             	movzbl %al,%edx
f012867b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128681:	01 d0                	add    %edx,%eax
f0128683:	48                   	dec    %eax
f0128684:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012868a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128690:	ba 00 00 00 00       	mov    $0x0,%edx
f0128695:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012869b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01286a1:	29 d0                	sub    %edx,%eax
f01286a3:	89 c3                	mov    %eax,%ebx
f01286a5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01286ac:	10 00 00 
f01286af:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01286b4:	0f b6 c0             	movzbl %al,%eax
f01286b7:	c1 e0 04             	shl    $0x4,%eax
f01286ba:	89 c2                	mov    %eax,%edx
f01286bc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01286c2:	01 d0                	add    %edx,%eax
f01286c4:	48                   	dec    %eax
f01286c5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01286cb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01286d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01286d6:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01286dc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01286e2:	29 d0                	sub    %edx,%eax
f01286e4:	01 d8                	add    %ebx,%eax
f01286e6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01286eb:	39 c1                	cmp    %eax,%ecx
f01286ed:	74 17                	je     f0128706 <test_kfreelast+0x7f7>
f01286ef:	83 ec 04             	sub    $0x4,%esp
f01286f2:	68 b8 9a 13 f0       	push   $0xf0139ab8
f01286f7:	68 14 0d 00 00       	push   $0xd14
f01286fc:	68 d2 99 13 f0       	push   $0xf01399d2
f0128701:	e8 aa 7a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128706:	e8 79 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f012870b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012870e:	74 17                	je     f0128727 <test_kfreelast+0x818>
f0128710:	83 ec 04             	sub    $0x4,%esp
f0128713:	68 ec 99 13 f0       	push   $0xf01399ec
f0128718:	68 15 0d 00 00       	push   $0xd15
f012871d:	68 d2 99 13 f0       	push   $0xf01399d2
f0128722:	e8 89 7a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128727:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012872a:	e8 97 42 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012872f:	29 c3                	sub    %eax,%ebx
f0128731:	89 d8                	mov    %ebx,%eax
f0128733:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128738:	74 17                	je     f0128751 <test_kfreelast+0x842>
f012873a:	83 ec 04             	sub    $0x4,%esp
f012873d:	68 54 9a 13 f0       	push   $0xf0139a54
f0128742:	68 16 0d 00 00       	push   $0xd16
f0128747:	68 d2 99 13 f0       	push   $0xf01399d2
f012874c:	e8 5f 7a fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0128751:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f0128758:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012875b:	e8 66 42 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128760:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128763:	e8 1c bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128768:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012876b:	83 ec 0c             	sub    $0xc,%esp
f012876e:	68 00 38 00 00       	push   $0x3800
f0128773:	e8 e7 f7 fd ff       	call   f0107f5f <kmalloc>
f0128778:	83 c4 10             	add    $0x10,%esp
f012877b:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128781:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128787:	89 c1                	mov    %eax,%ecx
f0128789:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128790:	10 00 00 
f0128793:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128798:	0f b6 d0             	movzbl %al,%edx
f012879b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01287a1:	01 d0                	add    %edx,%eax
f01287a3:	48                   	dec    %eax
f01287a4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01287aa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01287b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01287b5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01287bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01287c1:	29 d0                	sub    %edx,%eax
f01287c3:	89 c3                	mov    %eax,%ebx
f01287c5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01287cc:	10 00 00 
f01287cf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01287d4:	0f b6 c0             	movzbl %al,%eax
f01287d7:	c1 e0 04             	shl    $0x4,%eax
f01287da:	89 c2                	mov    %eax,%edx
f01287dc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01287e2:	01 d0                	add    %edx,%eax
f01287e4:	48                   	dec    %eax
f01287e5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01287eb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01287f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01287f6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01287fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128802:	29 d0                	sub    %edx,%eax
f0128804:	01 d8                	add    %ebx,%eax
f0128806:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012880b:	39 c1                	cmp    %eax,%ecx
f012880d:	74 17                	je     f0128826 <test_kfreelast+0x917>
f012880f:	83 ec 04             	sub    $0x4,%esp
f0128812:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128817:	68 1d 0d 00 00       	push   $0xd1d
f012881c:	68 d2 99 13 f0       	push   $0xf01399d2
f0128821:	e8 8a 79 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128826:	e8 59 be fd ff       	call   f0104684 <pf_calculate_free_frames>
f012882b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012882e:	74 17                	je     f0128847 <test_kfreelast+0x938>
f0128830:	83 ec 04             	sub    $0x4,%esp
f0128833:	68 ec 99 13 f0       	push   $0xf01399ec
f0128838:	68 1e 0d 00 00       	push   $0xd1e
f012883d:	68 d2 99 13 f0       	push   $0xf01399d2
f0128842:	e8 69 79 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128847:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012884a:	e8 77 41 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012884f:	29 c3                	sub    %eax,%ebx
f0128851:	89 d8                	mov    %ebx,%eax
f0128853:	83 f8 04             	cmp    $0x4,%eax
f0128856:	74 17                	je     f012886f <test_kfreelast+0x960>
f0128858:	83 ec 04             	sub    $0x4,%esp
f012885b:	68 54 9a 13 f0       	push   $0xf0139a54
f0128860:	68 1f 0d 00 00       	push   $0xd1f
f0128865:	68 d2 99 13 f0       	push   $0xf01399d2
f012886a:	e8 41 79 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012886f:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128876:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128879:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012887f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128882:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128889:	eb 0e                	jmp    f0128899 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f012888b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012888e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128891:	01 d0                	add    %edx,%eax
f0128893:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128896:	ff 45 f4             	incl   -0xc(%ebp)
f0128899:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012889f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288a2:	7f e7                	jg     f012888b <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01288a4:	e8 1d 41 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01288a9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01288af:	e8 d0 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01288b4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f01288ba:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01288c0:	83 ec 0c             	sub    $0xc,%esp
f01288c3:	50                   	push   %eax
f01288c4:	e8 b0 f6 fd ff       	call   f0107f79 <kfree>
f01288c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288cc:	e8 b3 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01288d1:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01288d7:	74 17                	je     f01288f0 <test_kfreelast+0x9e1>
f01288d9:	83 ec 04             	sub    $0x4,%esp
f01288dc:	68 ec 99 13 f0       	push   $0xf01399ec
f01288e1:	68 2e 0d 00 00       	push   $0xd2e
f01288e6:	68 d2 99 13 f0       	push   $0xf01399d2
f01288eb:	e8 c0 78 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01288f0:	e8 d1 40 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01288f5:	89 c2                	mov    %eax,%edx
f01288f7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01288fd:	29 c2                	sub    %eax,%edx
f01288ff:	89 d0                	mov    %edx,%eax
f0128901:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128906:	74 17                	je     f012891f <test_kfreelast+0xa10>
f0128908:	83 ec 04             	sub    $0x4,%esp
f012890b:	68 5c a1 13 f0       	push   $0xf013a15c
f0128910:	68 2f 0d 00 00       	push   $0xd2f
f0128915:	68 d2 99 13 f0       	push   $0xf01399d2
f012891a:	e8 91 78 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012891f:	e8 a2 40 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128924:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012892a:	e8 55 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012892f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f0128935:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012893b:	83 ec 0c             	sub    $0xc,%esp
f012893e:	50                   	push   %eax
f012893f:	e8 35 f6 fd ff       	call   f0107f79 <kfree>
f0128944:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128947:	e8 38 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012894c:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128952:	74 17                	je     f012896b <test_kfreelast+0xa5c>
f0128954:	83 ec 04             	sub    $0x4,%esp
f0128957:	68 ec 99 13 f0       	push   $0xf01399ec
f012895c:	68 35 0d 00 00       	push   $0xd35
f0128961:	68 d2 99 13 f0       	push   $0xf01399d2
f0128966:	e8 45 78 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012896b:	e8 56 40 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128970:	89 c2                	mov    %eax,%edx
f0128972:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128978:	29 c2                	sub    %eax,%edx
f012897a:	89 d0                	mov    %edx,%eax
f012897c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128981:	74 17                	je     f012899a <test_kfreelast+0xa8b>
f0128983:	83 ec 04             	sub    $0x4,%esp
f0128986:	68 5c a1 13 f0       	push   $0xf013a15c
f012898b:	68 36 0d 00 00       	push   $0xd36
f0128990:	68 d2 99 13 f0       	push   $0xf01399d2
f0128995:	e8 16 78 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012899a:	e8 27 40 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012899f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289a5:	e8 da bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01289aa:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f01289b0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01289b6:	83 ec 0c             	sub    $0xc,%esp
f01289b9:	50                   	push   %eax
f01289ba:	e8 ba f5 fd ff       	call   f0107f79 <kfree>
f01289bf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289c2:	e8 bd bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01289c7:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01289cd:	74 17                	je     f01289e6 <test_kfreelast+0xad7>
f01289cf:	83 ec 04             	sub    $0x4,%esp
f01289d2:	68 ec 99 13 f0       	push   $0xf01399ec
f01289d7:	68 3c 0d 00 00       	push   $0xd3c
f01289dc:	68 d2 99 13 f0       	push   $0xf01399d2
f01289e1:	e8 ca 77 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01289e6:	e8 db 3f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01289eb:	89 c2                	mov    %eax,%edx
f01289ed:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01289f3:	29 c2                	sub    %eax,%edx
f01289f5:	89 d0                	mov    %edx,%eax
f01289f7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01289fc:	74 17                	je     f0128a15 <test_kfreelast+0xb06>
f01289fe:	83 ec 04             	sub    $0x4,%esp
f0128a01:	68 5c a1 13 f0       	push   $0xf013a15c
f0128a06:	68 3d 0d 00 00       	push   $0xd3d
f0128a0b:	68 d2 99 13 f0       	push   $0xf01399d2
f0128a10:	e8 9b 77 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128a15:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128a1b:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128a1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a25:	eb 1e                	jmp    f0128a45 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128a27:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128a2d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128a30:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128a33:	01 c8                	add    %ecx,%eax
f0128a35:	8a 00                	mov    (%eax),%al
f0128a37:	0f be c0             	movsbl %al,%eax
f0128a3a:	01 d0                	add    %edx,%eax
f0128a3c:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128a42:	ff 45 f4             	incl   -0xc(%ebp)
f0128a45:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128a4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a4e:	7f d7                	jg     f0128a27 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0128a50:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128a56:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128a5c:	01 c0                	add    %eax,%eax
f0128a5e:	39 c2                	cmp    %eax,%edx
f0128a60:	74 17                	je     f0128a79 <test_kfreelast+0xb6a>
f0128a62:	83 ec 04             	sub    $0x4,%esp
f0128a65:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0128a6a:	68 48 0d 00 00       	push   $0xd48
f0128a6f:	68 d2 99 13 f0       	push   $0xf01399d2
f0128a74:	e8 37 77 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128a79:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128a7f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128a82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a89:	eb 1e                	jmp    f0128aa9 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f0128a8b:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128a91:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128a94:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128a97:	01 c8                	add    %ecx,%eax
f0128a99:	8a 00                	mov    (%eax),%al
f0128a9b:	0f be c0             	movsbl %al,%eax
f0128a9e:	01 d0                	add    %edx,%eax
f0128aa0:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128aa6:	ff 45 f4             	incl   -0xc(%ebp)
f0128aa9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128aaf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ab2:	7f d7                	jg     f0128a8b <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0128ab4:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128aba:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128ac0:	89 c1                	mov    %eax,%ecx
f0128ac2:	01 c9                	add    %ecx,%ecx
f0128ac4:	01 c8                	add    %ecx,%eax
f0128ac6:	39 c2                	cmp    %eax,%edx
f0128ac8:	74 17                	je     f0128ae1 <test_kfreelast+0xbd2>
f0128aca:	83 ec 04             	sub    $0x4,%esp
f0128acd:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0128ad2:	68 50 0d 00 00       	push   $0xd50
f0128ad7:	68 d2 99 13 f0       	push   $0xf01399d2
f0128adc:	e8 cf 76 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0128ae1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128ae7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128aea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128af1:	eb 1e                	jmp    f0128b11 <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128af3:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0128af9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128afc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128aff:	01 c8                	add    %ecx,%eax
f0128b01:	8a 00                	mov    (%eax),%al
f0128b03:	0f be c0             	movsbl %al,%eax
f0128b06:	01 d0                	add    %edx,%eax
f0128b08:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128b0e:	ff 45 f4             	incl   -0xc(%ebp)
f0128b11:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128b17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b1a:	7f d7                	jg     f0128af3 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0128b1c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128b22:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0128b28:	c1 e2 02             	shl    $0x2,%edx
f0128b2b:	39 d0                	cmp    %edx,%eax
f0128b2d:	74 17                	je     f0128b46 <test_kfreelast+0xc37>
f0128b2f:	83 ec 04             	sub    $0x4,%esp
f0128b32:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0128b37:	68 58 0d 00 00       	push   $0xd58
f0128b3c:	68 d2 99 13 f0       	push   $0xf01399d2
f0128b41:	e8 6a 76 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128b46:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128b4c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128b4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b56:	eb 1e                	jmp    f0128b76 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128b58:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f0128b5e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128b61:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b64:	01 c8                	add    %ecx,%eax
f0128b66:	8a 00                	mov    (%eax),%al
f0128b68:	0f be c0             	movsbl %al,%eax
f0128b6b:	01 d0                	add    %edx,%eax
f0128b6d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128b73:	ff 45 f4             	incl   -0xc(%ebp)
f0128b76:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128b7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b7f:	7f d7                	jg     f0128b58 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0128b81:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128b87:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f0128b8d:	89 d0                	mov    %edx,%eax
f0128b8f:	c1 e0 02             	shl    $0x2,%eax
f0128b92:	01 d0                	add    %edx,%eax
f0128b94:	39 c1                	cmp    %eax,%ecx
f0128b96:	74 17                	je     f0128baf <test_kfreelast+0xca0>
f0128b98:	83 ec 04             	sub    $0x4,%esp
f0128b9b:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0128ba0:	68 60 0d 00 00       	push   $0xd60
f0128ba5:	68 d2 99 13 f0       	push   $0xf01399d2
f0128baa:	e8 01 76 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0128baf:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128bb5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128bb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bbf:	eb 1e                	jmp    f0128bdf <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f0128bc1:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f0128bc7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128bca:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128bcd:	01 c8                	add    %ecx,%eax
f0128bcf:	8a 00                	mov    (%eax),%al
f0128bd1:	0f be c0             	movsbl %al,%eax
f0128bd4:	01 d0                	add    %edx,%eax
f0128bd6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128bdc:	ff 45 f4             	incl   -0xc(%ebp)
f0128bdf:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128be5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128be8:	7f d7                	jg     f0128bc1 <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0128bea:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f0128bf0:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f0128bf6:	89 d0                	mov    %edx,%eax
f0128bf8:	01 c0                	add    %eax,%eax
f0128bfa:	01 d0                	add    %edx,%eax
f0128bfc:	01 c0                	add    %eax,%eax
f0128bfe:	01 d0                	add    %edx,%eax
f0128c00:	39 c1                	cmp    %eax,%ecx
f0128c02:	74 17                	je     f0128c1b <test_kfreelast+0xd0c>
f0128c04:	83 ec 04             	sub    $0x4,%esp
f0128c07:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0128c0c:	68 68 0d 00 00       	push   $0xd68
f0128c11:	68 d2 99 13 f0       	push   $0xf01399d2
f0128c16:	e8 95 75 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0128c1b:	e8 a6 3d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128c20:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c23:	e8 5c ba fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128c28:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0128c2b:	83 ec 0c             	sub    $0xc,%esp
f0128c2e:	68 00 50 00 00       	push   $0x5000
f0128c33:	e8 27 f3 fd ff       	call   f0107f5f <kmalloc>
f0128c38:	83 c4 10             	add    $0x10,%esp
f0128c3b:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c41:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128c47:	89 c1                	mov    %eax,%ecx
f0128c49:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128c50:	10 00 00 
f0128c53:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128c58:	0f b6 d0             	movzbl %al,%edx
f0128c5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128c61:	01 d0                	add    %edx,%eax
f0128c63:	48                   	dec    %eax
f0128c64:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128c6a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c70:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c75:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128c7b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c81:	29 d0                	sub    %edx,%eax
f0128c83:	89 c3                	mov    %eax,%ebx
f0128c85:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128c8c:	10 00 00 
f0128c8f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128c94:	0f b6 c0             	movzbl %al,%eax
f0128c97:	c1 e0 04             	shl    $0x4,%eax
f0128c9a:	89 c2                	mov    %eax,%edx
f0128c9c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128ca2:	01 d0                	add    %edx,%eax
f0128ca4:	48                   	dec    %eax
f0128ca5:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128cab:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128cb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cb6:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128cbc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128cc2:	29 d0                	sub    %edx,%eax
f0128cc4:	01 d8                	add    %ebx,%eax
f0128cc6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128ccb:	39 c1                	cmp    %eax,%ecx
f0128ccd:	74 17                	je     f0128ce6 <test_kfreelast+0xdd7>
f0128ccf:	83 ec 04             	sub    $0x4,%esp
f0128cd2:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128cd7:	68 71 0d 00 00       	push   $0xd71
f0128cdc:	68 d2 99 13 f0       	push   $0xf01399d2
f0128ce1:	e8 ca 74 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ce6:	e8 99 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ceb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128cee:	74 17                	je     f0128d07 <test_kfreelast+0xdf8>
f0128cf0:	83 ec 04             	sub    $0x4,%esp
f0128cf3:	68 ec 99 13 f0       	push   $0xf01399ec
f0128cf8:	68 72 0d 00 00       	push   $0xd72
f0128cfd:	68 d2 99 13 f0       	push   $0xf01399d2
f0128d02:	e8 a9 74 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d07:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128d0a:	e8 b7 3c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128d0f:	29 c3                	sub    %eax,%ebx
f0128d11:	89 d8                	mov    %ebx,%eax
f0128d13:	83 f8 05             	cmp    $0x5,%eax
f0128d16:	74 17                	je     f0128d2f <test_kfreelast+0xe20>
f0128d18:	83 ec 04             	sub    $0x4,%esp
f0128d1b:	68 54 9a 13 f0       	push   $0xf0139a54
f0128d20:	68 73 0d 00 00       	push   $0xd73
f0128d25:	68 d2 99 13 f0       	push   $0xf01399d2
f0128d2a:	e8 81 74 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128d2f:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128d36:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0128d39:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128d3f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128d42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d49:	eb 0e                	jmp    f0128d59 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f0128d4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128d4e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128d51:	01 d0                	add    %edx,%eax
f0128d53:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128d56:	ff 45 f4             	incl   -0xc(%ebp)
f0128d59:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0128d5f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d62:	7f e7                	jg     f0128d4b <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128d64:	e8 5d 3c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128d69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d6c:	e8 13 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128d74:	83 ec 0c             	sub    $0xc,%esp
f0128d77:	68 00 00 10 00       	push   $0x100000
f0128d7c:	e8 de f1 fd ff       	call   f0107f5f <kmalloc>
f0128d81:	83 c4 10             	add    $0x10,%esp
f0128d84:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d8a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128d90:	89 c1                	mov    %eax,%ecx
f0128d92:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128d99:	10 00 00 
f0128d9c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128da1:	0f b6 d0             	movzbl %al,%edx
f0128da4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128daa:	01 d0                	add    %edx,%eax
f0128dac:	48                   	dec    %eax
f0128dad:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128db3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128db9:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dbe:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128dc4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128dca:	29 d0                	sub    %edx,%eax
f0128dcc:	89 c3                	mov    %eax,%ebx
f0128dce:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128dd5:	10 00 00 
f0128dd8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128ddd:	0f b6 c0             	movzbl %al,%eax
f0128de0:	c1 e0 04             	shl    $0x4,%eax
f0128de3:	89 c2                	mov    %eax,%edx
f0128de5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128deb:	01 d0                	add    %edx,%eax
f0128ded:	48                   	dec    %eax
f0128dee:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128df4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128dfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dff:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128e05:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128e0b:	29 d0                	sub    %edx,%eax
f0128e0d:	01 d8                	add    %ebx,%eax
f0128e0f:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128e14:	39 c1                	cmp    %eax,%ecx
f0128e16:	74 17                	je     f0128e2f <test_kfreelast+0xf20>
f0128e18:	83 ec 04             	sub    $0x4,%esp
f0128e1b:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128e20:	68 7f 0d 00 00       	push   $0xd7f
f0128e25:	68 d2 99 13 f0       	push   $0xf01399d2
f0128e2a:	e8 81 73 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e2f:	e8 50 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e34:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e37:	74 17                	je     f0128e50 <test_kfreelast+0xf41>
f0128e39:	83 ec 04             	sub    $0x4,%esp
f0128e3c:	68 ec 99 13 f0       	push   $0xf01399ec
f0128e41:	68 80 0d 00 00       	push   $0xd80
f0128e46:	68 d2 99 13 f0       	push   $0xf01399d2
f0128e4b:	e8 60 73 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e50:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e53:	e8 6e 3b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128e58:	29 c3                	sub    %eax,%ebx
f0128e5a:	89 d8                	mov    %ebx,%eax
f0128e5c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128e61:	74 17                	je     f0128e7a <test_kfreelast+0xf6b>
f0128e63:	83 ec 04             	sub    $0x4,%esp
f0128e66:	68 54 9a 13 f0       	push   $0xf0139a54
f0128e6b:	68 81 0d 00 00       	push   $0xd81
f0128e70:	68 d2 99 13 f0       	push   $0xf01399d2
f0128e75:	e8 36 73 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128e7a:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f0128e81:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128e84:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128e8a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0128e8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e94:	eb 0e                	jmp    f0128ea4 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128e96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e99:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128e9c:	01 d0                	add    %edx,%eax
f0128e9e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0128ea1:	ff 45 f4             	incl   -0xc(%ebp)
f0128ea4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128eaa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ead:	7f e7                	jg     f0128e96 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0128eaf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128eb6:	e8 0b 3b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128ebb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ebe:	e8 c1 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ec3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128ec6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128ecc:	83 ec 0c             	sub    $0xc,%esp
f0128ecf:	50                   	push   %eax
f0128ed0:	e8 a4 f0 fd ff       	call   f0107f79 <kfree>
f0128ed5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ed8:	e8 a7 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128edd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ee0:	74 17                	je     f0128ef9 <test_kfreelast+0xfea>
f0128ee2:	83 ec 04             	sub    $0x4,%esp
f0128ee5:	68 ec 99 13 f0       	push   $0xf01399ec
f0128eea:	68 91 0d 00 00       	push   $0xd91
f0128eef:	68 d2 99 13 f0       	push   $0xf01399d2
f0128ef4:	e8 b7 72 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128ef9:	e8 c8 3a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128efe:	89 c2                	mov    %eax,%edx
f0128f00:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128f03:	29 c2                	sub    %eax,%edx
f0128f05:	89 d0                	mov    %edx,%eax
f0128f07:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128f0c:	74 17                	je     f0128f25 <test_kfreelast+0x1016>
f0128f0e:	83 ec 04             	sub    $0x4,%esp
f0128f11:	68 5c a1 13 f0       	push   $0xf013a15c
f0128f16:	68 92 0d 00 00       	push   $0xd92
f0128f1b:	68 d2 99 13 f0       	push   $0xf01399d2
f0128f20:	e8 8b 72 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128f25:	e8 9c 3a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128f2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f2d:	e8 52 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128f32:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128f35:	83 ec 0c             	sub    $0xc,%esp
f0128f38:	68 00 78 00 00       	push   $0x7800
f0128f3d:	e8 1d f0 fd ff       	call   f0107f5f <kmalloc>
f0128f42:	83 c4 10             	add    $0x10,%esp
f0128f45:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128f4b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128f51:	89 c1                	mov    %eax,%ecx
f0128f53:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128f5a:	10 00 00 
f0128f5d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128f62:	0f b6 d0             	movzbl %al,%edx
f0128f65:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128f6b:	01 d0                	add    %edx,%eax
f0128f6d:	48                   	dec    %eax
f0128f6e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128f74:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f7f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128f85:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128f8b:	29 d0                	sub    %edx,%eax
f0128f8d:	89 c3                	mov    %eax,%ebx
f0128f8f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128f96:	10 00 00 
f0128f99:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128f9e:	0f b6 c0             	movzbl %al,%eax
f0128fa1:	c1 e0 04             	shl    $0x4,%eax
f0128fa4:	89 c2                	mov    %eax,%edx
f0128fa6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128fac:	01 d0                	add    %edx,%eax
f0128fae:	48                   	dec    %eax
f0128faf:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128fb5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fc0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128fc6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fcc:	29 d0                	sub    %edx,%eax
f0128fce:	01 d8                	add    %ebx,%eax
f0128fd0:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128fd5:	39 c1                	cmp    %eax,%ecx
f0128fd7:	74 17                	je     f0128ff0 <test_kfreelast+0x10e1>
f0128fd9:	83 ec 04             	sub    $0x4,%esp
f0128fdc:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0128fe1:	68 9b 0d 00 00       	push   $0xd9b
f0128fe6:	68 d2 99 13 f0       	push   $0xf01399d2
f0128feb:	e8 c0 71 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ff0:	e8 8f b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ff5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ff8:	74 17                	je     f0129011 <test_kfreelast+0x1102>
f0128ffa:	83 ec 04             	sub    $0x4,%esp
f0128ffd:	68 ec 99 13 f0       	push   $0xf01399ec
f0129002:	68 9c 0d 00 00       	push   $0xd9c
f0129007:	68 d2 99 13 f0       	push   $0xf01399d2
f012900c:	e8 9f 71 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129011:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129014:	e8 ad 39 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129019:	29 c3                	sub    %eax,%ebx
f012901b:	89 d8                	mov    %ebx,%eax
f012901d:	83 f8 08             	cmp    $0x8,%eax
f0129020:	74 17                	je     f0129039 <test_kfreelast+0x112a>
f0129022:	83 ec 04             	sub    $0x4,%esp
f0129025:	68 54 9a 13 f0       	push   $0xf0139a54
f012902a:	68 9d 0d 00 00       	push   $0xd9d
f012902f:	68 d2 99 13 f0       	push   $0xf01399d2
f0129034:	e8 77 71 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0129039:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0129040:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0129043:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0129049:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012904c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129053:	eb 0e                	jmp    f0129063 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0129055:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129058:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012905b:	01 d0                	add    %edx,%eax
f012905d:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0129060:	ff 45 f4             	incl   -0xc(%ebp)
f0129063:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129069:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012906c:	7f e7                	jg     f0129055 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012906e:	e8 53 39 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129073:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129076:	e8 09 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012907b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012907e:	83 ec 0c             	sub    $0xc,%esp
f0129081:	68 00 00 10 00       	push   $0x100000
f0129086:	e8 d4 ee fd ff       	call   f0107f5f <kmalloc>
f012908b:	83 c4 10             	add    $0x10,%esp
f012908e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129094:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012909a:	89 c1                	mov    %eax,%ecx
f012909c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01290a3:	10 00 00 
f01290a6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01290ab:	0f b6 d0             	movzbl %al,%edx
f01290ae:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01290b4:	01 d0                	add    %edx,%eax
f01290b6:	48                   	dec    %eax
f01290b7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01290bd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01290c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01290c8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01290ce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01290d4:	29 d0                	sub    %edx,%eax
f01290d6:	89 c3                	mov    %eax,%ebx
f01290d8:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01290df:	10 00 00 
f01290e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01290e7:	0f b6 c0             	movzbl %al,%eax
f01290ea:	c1 e0 04             	shl    $0x4,%eax
f01290ed:	89 c2                	mov    %eax,%edx
f01290ef:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01290f5:	01 d0                	add    %edx,%eax
f01290f7:	48                   	dec    %eax
f01290f8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01290fe:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129104:	ba 00 00 00 00       	mov    $0x0,%edx
f0129109:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012910f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129115:	29 d0                	sub    %edx,%eax
f0129117:	01 d8                	add    %ebx,%eax
f0129119:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012911e:	39 c1                	cmp    %eax,%ecx
f0129120:	74 17                	je     f0129139 <test_kfreelast+0x122a>
f0129122:	83 ec 04             	sub    $0x4,%esp
f0129125:	68 b8 9a 13 f0       	push   $0xf0139ab8
f012912a:	68 a9 0d 00 00       	push   $0xda9
f012912f:	68 d2 99 13 f0       	push   $0xf01399d2
f0129134:	e8 77 70 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129139:	e8 46 b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012913e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129141:	74 17                	je     f012915a <test_kfreelast+0x124b>
f0129143:	83 ec 04             	sub    $0x4,%esp
f0129146:	68 ec 99 13 f0       	push   $0xf01399ec
f012914b:	68 aa 0d 00 00       	push   $0xdaa
f0129150:	68 d2 99 13 f0       	push   $0xf01399d2
f0129155:	e8 56 70 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012915a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012915d:	e8 64 38 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129162:	29 c3                	sub    %eax,%ebx
f0129164:	89 d8                	mov    %ebx,%eax
f0129166:	3d 00 01 00 00       	cmp    $0x100,%eax
f012916b:	74 17                	je     f0129184 <test_kfreelast+0x1275>
f012916d:	83 ec 04             	sub    $0x4,%esp
f0129170:	68 54 9a 13 f0       	push   $0xf0139a54
f0129175:	68 ab 0d 00 00       	push   $0xdab
f012917a:	68 d2 99 13 f0       	push   $0xf01399d2
f012917f:	e8 2c 70 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0129184:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f012918b:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012918e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0129194:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0129197:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012919e:	eb 0e                	jmp    f01291ae <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f01291a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01291a3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01291a6:	01 d0                	add    %edx,%eax
f01291a8:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f01291ab:	ff 45 f4             	incl   -0xc(%ebp)
f01291ae:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01291b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01291b7:	7f e7                	jg     f01291a0 <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f01291b9:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f01291bd:	83 ec 08             	sub    $0x8,%esp
f01291c0:	ff 75 f0             	pushl  -0x10(%ebp)
f01291c3:	68 04 aa 13 f0       	push   $0xf013aa04
f01291c8:	e8 64 7c fd ff       	call   f0100e31 <cprintf>
f01291cd:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f01291d0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01291d7:	e8 ea 37 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01291dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291df:	e8 a0 b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01291e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f01291e7:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01291ed:	83 ec 0c             	sub    $0xc,%esp
f01291f0:	50                   	push   %eax
f01291f1:	e8 83 ed fd ff       	call   f0107f79 <kfree>
f01291f6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01291f9:	e8 86 b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01291fe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129201:	74 1d                	je     f0129220 <test_kfreelast+0x1311>
f0129203:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129207:	75 17                	jne    f0129220 <test_kfreelast+0x1311>
f0129209:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129210:	83 ec 0c             	sub    $0xc,%esp
f0129213:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129218:	e8 14 7c fd ff       	call   f0100e31 <cprintf>
f012921d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129220:	e8 a1 37 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129225:	89 c2                	mov    %eax,%edx
f0129227:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012922a:	29 c2                	sub    %eax,%edx
f012922c:	89 d0                	mov    %edx,%eax
f012922e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129233:	74 1d                	je     f0129252 <test_kfreelast+0x1343>
f0129235:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129239:	75 17                	jne    f0129252 <test_kfreelast+0x1343>
f012923b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129242:	83 ec 0c             	sub    $0xc,%esp
f0129245:	68 98 aa 13 f0       	push   $0xf013aa98
f012924a:	e8 e2 7b fd ff       	call   f0100e31 <cprintf>
f012924f:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129252:	e8 6f 37 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129257:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012925a:	e8 25 b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012925f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0129262:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0129268:	83 ec 0c             	sub    $0xc,%esp
f012926b:	50                   	push   %eax
f012926c:	e8 08 ed fd ff       	call   f0107f79 <kfree>
f0129271:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129274:	e8 0b b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129279:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012927c:	74 1d                	je     f012929b <test_kfreelast+0x138c>
f012927e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129282:	75 17                	jne    f012929b <test_kfreelast+0x138c>
f0129284:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012928b:	83 ec 0c             	sub    $0xc,%esp
f012928e:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129293:	e8 99 7b fd ff       	call   f0100e31 <cprintf>
f0129298:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012929b:	e8 26 37 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01292a0:	89 c2                	mov    %eax,%edx
f01292a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01292a5:	29 c2                	sub    %eax,%edx
f01292a7:	89 d0                	mov    %edx,%eax
f01292a9:	83 f8 08             	cmp    $0x8,%eax
f01292ac:	74 1d                	je     f01292cb <test_kfreelast+0x13bc>
f01292ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292b2:	75 17                	jne    f01292cb <test_kfreelast+0x13bc>
f01292b4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292bb:	83 ec 0c             	sub    $0xc,%esp
f01292be:	68 98 aa 13 f0       	push   $0xf013aa98
f01292c3:	e8 69 7b fd ff       	call   f0100e31 <cprintf>
f01292c8:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f01292cb:	e8 f6 36 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01292d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292d3:	e8 ac b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01292d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f01292db:	83 ec 0c             	sub    $0xc,%esp
f01292de:	68 00 28 00 00       	push   $0x2800
f01292e3:	e8 77 ec fd ff       	call   f0107f5f <kmalloc>
f01292e8:	83 c4 10             	add    $0x10,%esp
f01292eb:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01292f1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01292f7:	89 c1                	mov    %eax,%ecx
f01292f9:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129300:	10 00 00 
f0129303:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129308:	0f b6 d0             	movzbl %al,%edx
f012930b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129311:	01 d0                	add    %edx,%eax
f0129313:	48                   	dec    %eax
f0129314:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012931a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129320:	ba 00 00 00 00       	mov    $0x0,%edx
f0129325:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012932b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129331:	29 d0                	sub    %edx,%eax
f0129333:	89 c3                	mov    %eax,%ebx
f0129335:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012933c:	10 00 00 
f012933f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129344:	0f b6 c0             	movzbl %al,%eax
f0129347:	c1 e0 04             	shl    $0x4,%eax
f012934a:	89 c2                	mov    %eax,%edx
f012934c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129352:	01 d0                	add    %edx,%eax
f0129354:	48                   	dec    %eax
f0129355:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012935b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129361:	ba 00 00 00 00       	mov    $0x0,%edx
f0129366:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012936c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129372:	29 d0                	sub    %edx,%eax
f0129374:	01 d8                	add    %ebx,%eax
f0129376:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012937b:	39 c1                	cmp    %eax,%ecx
f012937d:	74 1d                	je     f012939c <test_kfreelast+0x148d>
f012937f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129383:	75 17                	jne    f012939c <test_kfreelast+0x148d>
f0129385:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012938c:	83 ec 0c             	sub    $0xc,%esp
f012938f:	68 d0 aa 13 f0       	push   $0xf013aad0
f0129394:	e8 98 7a fd ff       	call   f0100e31 <cprintf>
f0129399:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012939c:	e8 e3 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01293a1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293a4:	74 1d                	je     f01293c3 <test_kfreelast+0x14b4>
f01293a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293aa:	75 17                	jne    f01293c3 <test_kfreelast+0x14b4>
f01293ac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293b3:	83 ec 0c             	sub    $0xc,%esp
f01293b6:	68 2c aa 13 f0       	push   $0xf013aa2c
f01293bb:	e8 71 7a fd ff       	call   f0100e31 <cprintf>
f01293c0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01293c3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01293c6:	e8 fb 35 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01293cb:	29 c3                	sub    %eax,%ebx
f01293cd:	89 d8                	mov    %ebx,%eax
f01293cf:	83 f8 03             	cmp    $0x3,%eax
f01293d2:	74 1d                	je     f01293f1 <test_kfreelast+0x14e2>
f01293d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293d8:	75 17                	jne    f01293f1 <test_kfreelast+0x14e2>
f01293da:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293e1:	83 ec 0c             	sub    $0xc,%esp
f01293e4:	68 38 ab 13 f0       	push   $0xf013ab38
f01293e9:	e8 43 7a fd ff       	call   f0100e31 <cprintf>
f01293ee:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f01293f1:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f01293f8:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f01293fb:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129401:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129404:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012940b:	eb 0e                	jmp    f012941b <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f012940d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129410:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129413:	01 d0                	add    %edx,%eax
f0129415:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129418:	ff 45 f4             	incl   -0xc(%ebp)
f012941b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129421:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129424:	7f e7                	jg     f012940d <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129426:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012942a:	75 17                	jne    f0129443 <test_kfreelast+0x1534>
f012942c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129430:	83 ec 08             	sub    $0x8,%esp
f0129433:	ff 75 f0             	pushl  -0x10(%ebp)
f0129436:	68 04 aa 13 f0       	push   $0xf013aa04
f012943b:	e8 f1 79 fd ff       	call   f0100e31 <cprintf>
f0129440:	83 c4 10             	add    $0x10,%esp
f0129443:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012944a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129450:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129453:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012945a:	eb 1e                	jmp    f012947a <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f012945c:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f0129462:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129465:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129468:	01 c8                	add    %ecx,%eax
f012946a:	8a 00                	mov    (%eax),%al
f012946c:	0f be c0             	movsbl %al,%eax
f012946f:	01 d0                	add    %edx,%eax
f0129471:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129477:	ff 45 f4             	incl   -0xc(%ebp)
f012947a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129480:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129483:	7f d7                	jg     f012945c <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129485:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f012948b:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f0129491:	89 d0                	mov    %edx,%eax
f0129493:	01 c0                	add    %eax,%eax
f0129495:	01 d0                	add    %edx,%eax
f0129497:	c1 e0 02             	shl    $0x2,%eax
f012949a:	39 c1                	cmp    %eax,%ecx
f012949c:	74 1d                	je     f01294bb <test_kfreelast+0x15ac>
f012949e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294a2:	75 17                	jne    f01294bb <test_kfreelast+0x15ac>
f01294a4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01294ab:	83 ec 0c             	sub    $0xc,%esp
f01294ae:	68 7c ab 13 f0       	push   $0xf013ab7c
f01294b3:	e8 79 79 fd ff       	call   f0100e31 <cprintf>
f01294b8:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01294bb:	83 ec 0c             	sub    $0xc,%esp
f01294be:	6a 03                	push   $0x3
f01294c0:	e8 9c 39 fe ff       	call   f010ce61 <sys_bypassPageFault>
f01294c5:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f01294c8:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01294ce:	05 00 30 00 00       	add    $0x3000,%eax
f01294d3:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f01294d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294dd:	eb 3c                	jmp    f012951b <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f01294df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01294e2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01294e5:	01 d0                	add    %edx,%eax
f01294e7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01294ea:	e8 60 39 fe ff       	call   f010ce4f <sys_rcr2>
f01294ef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01294f2:	8b 55 9c             	mov    -0x64(%ebp),%edx
f01294f5:	01 ca                	add    %ecx,%edx
f01294f7:	39 d0                	cmp    %edx,%eax
f01294f9:	74 1d                	je     f0129518 <test_kfreelast+0x1609>
f01294fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294ff:	75 17                	jne    f0129518 <test_kfreelast+0x1609>
f0129501:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129508:	83 ec 0c             	sub    $0xc,%esp
f012950b:	68 b0 ab 13 f0       	push   $0xf013abb0
f0129510:	e8 1c 79 fd ff       	call   f0100e31 <cprintf>
f0129515:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0129518:	ff 45 f4             	incl   -0xc(%ebp)
f012951b:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f0129522:	7e bb                	jle    f01294df <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129524:	83 ec 0c             	sub    $0xc,%esp
f0129527:	6a 00                	push   $0x0
f0129529:	e8 33 39 fe ff       	call   f010ce61 <sys_bypassPageFault>
f012952e:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129531:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129535:	75 17                	jne    f012954e <test_kfreelast+0x163f>
f0129537:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012953b:	83 ec 08             	sub    $0x8,%esp
f012953e:	ff 75 f0             	pushl  -0x10(%ebp)
f0129541:	68 04 aa 13 f0       	push   $0xf013aa04
f0129546:	e8 e6 78 fd ff       	call   f0100e31 <cprintf>
f012954b:	83 c4 10             	add    $0x10,%esp
f012954e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129555:	e8 6c 34 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012955a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012955d:	e8 22 b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129562:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0129565:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012956b:	83 ec 0c             	sub    $0xc,%esp
f012956e:	50                   	push   %eax
f012956f:	e8 05 ea fd ff       	call   f0107f79 <kfree>
f0129574:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129577:	e8 08 b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012957c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012957f:	74 1d                	je     f012959e <test_kfreelast+0x168f>
f0129581:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129585:	75 17                	jne    f012959e <test_kfreelast+0x168f>
f0129587:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012958e:	83 ec 0c             	sub    $0xc,%esp
f0129591:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129596:	e8 96 78 fd ff       	call   f0100e31 <cprintf>
f012959b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012959e:	e8 23 34 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01295a3:	89 c2                	mov    %eax,%edx
f01295a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01295a8:	29 c2                	sub    %eax,%edx
f01295aa:	89 d0                	mov    %edx,%eax
f01295ac:	83 f8 03             	cmp    $0x3,%eax
f01295af:	74 1d                	je     f01295ce <test_kfreelast+0x16bf>
f01295b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295b5:	75 17                	jne    f01295ce <test_kfreelast+0x16bf>
f01295b7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295be:	83 ec 0c             	sub    $0xc,%esp
f01295c1:	68 98 aa 13 f0       	push   $0xf013aa98
f01295c6:	e8 66 78 fd ff       	call   f0100e31 <cprintf>
f01295cb:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01295ce:	e8 f3 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01295d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295d6:	e8 a9 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01295db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f01295de:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01295e4:	83 ec 0c             	sub    $0xc,%esp
f01295e7:	50                   	push   %eax
f01295e8:	e8 8c e9 fd ff       	call   f0107f79 <kfree>
f01295ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01295f0:	e8 8f b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01295f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01295f8:	74 1d                	je     f0129617 <test_kfreelast+0x1708>
f01295fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295fe:	75 17                	jne    f0129617 <test_kfreelast+0x1708>
f0129600:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129607:	83 ec 0c             	sub    $0xc,%esp
f012960a:	68 2c aa 13 f0       	push   $0xf013aa2c
f012960f:	e8 1d 78 fd ff       	call   f0100e31 <cprintf>
f0129614:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129617:	e8 aa 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012961c:	89 c2                	mov    %eax,%edx
f012961e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129621:	29 c2                	sub    %eax,%edx
f0129623:	89 d0                	mov    %edx,%eax
f0129625:	83 f8 04             	cmp    $0x4,%eax
f0129628:	74 1d                	je     f0129647 <test_kfreelast+0x1738>
f012962a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012962e:	75 17                	jne    f0129647 <test_kfreelast+0x1738>
f0129630:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129637:	83 ec 0c             	sub    $0xc,%esp
f012963a:	68 98 aa 13 f0       	push   $0xf013aa98
f012963f:	e8 ed 77 fd ff       	call   f0100e31 <cprintf>
f0129644:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129647:	e8 7a 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012964c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012964f:	e8 30 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129657:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012965d:	83 ec 0c             	sub    $0xc,%esp
f0129660:	50                   	push   %eax
f0129661:	e8 13 e9 fd ff       	call   f0107f79 <kfree>
f0129666:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129669:	e8 16 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012966e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129671:	74 1d                	je     f0129690 <test_kfreelast+0x1781>
f0129673:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129677:	75 17                	jne    f0129690 <test_kfreelast+0x1781>
f0129679:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129680:	83 ec 0c             	sub    $0xc,%esp
f0129683:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129688:	e8 a4 77 fd ff       	call   f0100e31 <cprintf>
f012968d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129690:	e8 31 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129695:	89 c2                	mov    %eax,%edx
f0129697:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012969a:	29 c2                	sub    %eax,%edx
f012969c:	89 d0                	mov    %edx,%eax
f012969e:	83 f8 05             	cmp    $0x5,%eax
f01296a1:	74 1d                	je     f01296c0 <test_kfreelast+0x17b1>
f01296a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296a7:	75 17                	jne    f01296c0 <test_kfreelast+0x17b1>
f01296a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296b0:	83 ec 0c             	sub    $0xc,%esp
f01296b3:	68 98 aa 13 f0       	push   $0xf013aa98
f01296b8:	e8 74 77 fd ff       	call   f0100e31 <cprintf>
f01296bd:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f01296c0:	e8 01 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01296c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296c8:	e8 b7 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f01296cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f01296d0:	83 ec 0c             	sub    $0xc,%esp
f01296d3:	68 00 c8 00 00       	push   $0xc800
f01296d8:	e8 82 e8 fd ff       	call   f0107f5f <kmalloc>
f01296dd:	83 c4 10             	add    $0x10,%esp
f01296e0:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01296e6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01296ec:	89 c1                	mov    %eax,%ecx
f01296ee:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01296f5:	10 00 00 
f01296f8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01296fd:	0f b6 d0             	movzbl %al,%edx
f0129700:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129706:	01 d0                	add    %edx,%eax
f0129708:	48                   	dec    %eax
f0129709:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012970f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129715:	ba 00 00 00 00       	mov    $0x0,%edx
f012971a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129720:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129726:	29 d0                	sub    %edx,%eax
f0129728:	89 c3                	mov    %eax,%ebx
f012972a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129731:	10 00 00 
f0129734:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129739:	0f b6 c0             	movzbl %al,%eax
f012973c:	c1 e0 04             	shl    $0x4,%eax
f012973f:	89 c2                	mov    %eax,%edx
f0129741:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129747:	01 d0                	add    %edx,%eax
f0129749:	48                   	dec    %eax
f012974a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129750:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129756:	ba 00 00 00 00       	mov    $0x0,%edx
f012975b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0129761:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129767:	29 d0                	sub    %edx,%eax
f0129769:	01 d8                	add    %ebx,%eax
f012976b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129770:	39 c1                	cmp    %eax,%ecx
f0129772:	74 1d                	je     f0129791 <test_kfreelast+0x1882>
f0129774:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129778:	75 17                	jne    f0129791 <test_kfreelast+0x1882>
f012977a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129781:	83 ec 0c             	sub    $0xc,%esp
f0129784:	68 d0 aa 13 f0       	push   $0xf013aad0
f0129789:	e8 a3 76 fd ff       	call   f0100e31 <cprintf>
f012978e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129791:	e8 ee ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129796:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129799:	74 1d                	je     f01297b8 <test_kfreelast+0x18a9>
f012979b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012979f:	75 17                	jne    f01297b8 <test_kfreelast+0x18a9>
f01297a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297a8:	83 ec 0c             	sub    $0xc,%esp
f01297ab:	68 2c aa 13 f0       	push   $0xf013aa2c
f01297b0:	e8 7c 76 fd ff       	call   f0100e31 <cprintf>
f01297b5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01297b8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01297bb:	e8 06 32 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01297c0:	29 c3                	sub    %eax,%ebx
f01297c2:	89 d8                	mov    %ebx,%eax
f01297c4:	83 f8 0d             	cmp    $0xd,%eax
f01297c7:	74 1d                	je     f01297e6 <test_kfreelast+0x18d7>
f01297c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297cd:	75 17                	jne    f01297e6 <test_kfreelast+0x18d7>
f01297cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297d6:	83 ec 0c             	sub    $0xc,%esp
f01297d9:	68 38 ab 13 f0       	push   $0xf013ab38
f01297de:	e8 4e 76 fd ff       	call   f0100e31 <cprintf>
f01297e3:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f01297e6:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f01297ed:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f01297f0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297f6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f01297f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129800:	eb 0e                	jmp    f0129810 <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f0129802:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129805:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129808:	01 d0                	add    %edx,%eax
f012980a:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012980d:	ff 45 f4             	incl   -0xc(%ebp)
f0129810:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129816:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129819:	7f e7                	jg     f0129802 <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012981b:	e8 a6 31 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129820:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129823:	e8 5c ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129828:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012982b:	83 ec 0c             	sub    $0xc,%esp
f012982e:	68 00 fc 2f 00       	push   $0x2ffc00
f0129833:	e8 27 e7 fd ff       	call   f0107f5f <kmalloc>
f0129838:	83 c4 10             	add    $0x10,%esp
f012983b:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129841:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129847:	89 c1                	mov    %eax,%ecx
f0129849:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129850:	10 00 00 
f0129853:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129858:	0f b6 d0             	movzbl %al,%edx
f012985b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0129861:	01 d0                	add    %edx,%eax
f0129863:	48                   	dec    %eax
f0129864:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012986a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129870:	ba 00 00 00 00       	mov    $0x0,%edx
f0129875:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012987b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129881:	29 d0                	sub    %edx,%eax
f0129883:	89 c3                	mov    %eax,%ebx
f0129885:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012988c:	10 00 00 
f012988f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129894:	0f b6 c0             	movzbl %al,%eax
f0129897:	c1 e0 04             	shl    $0x4,%eax
f012989a:	89 c2                	mov    %eax,%edx
f012989c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01298a2:	01 d0                	add    %edx,%eax
f01298a4:	48                   	dec    %eax
f01298a5:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01298ab:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01298b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01298b6:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01298bc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01298c2:	29 d0                	sub    %edx,%eax
f01298c4:	01 d8                	add    %ebx,%eax
f01298c6:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f01298cb:	39 c1                	cmp    %eax,%ecx
f01298cd:	74 1d                	je     f01298ec <test_kfreelast+0x19dd>
f01298cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298d3:	75 17                	jne    f01298ec <test_kfreelast+0x19dd>
f01298d5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01298dc:	83 ec 0c             	sub    $0xc,%esp
f01298df:	68 d0 aa 13 f0       	push   $0xf013aad0
f01298e4:	e8 48 75 fd ff       	call   f0100e31 <cprintf>
f01298e9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01298ec:	e8 93 ad fd ff       	call   f0104684 <pf_calculate_free_frames>
f01298f1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298f4:	74 1d                	je     f0129913 <test_kfreelast+0x1a04>
f01298f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298fa:	75 17                	jne    f0129913 <test_kfreelast+0x1a04>
f01298fc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129903:	83 ec 0c             	sub    $0xc,%esp
f0129906:	68 2c aa 13 f0       	push   $0xf013aa2c
f012990b:	e8 21 75 fd ff       	call   f0100e31 <cprintf>
f0129910:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129913:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129916:	e8 ab 30 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012991b:	29 c3                	sub    %eax,%ebx
f012991d:	89 d8                	mov    %ebx,%eax
f012991f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129924:	74 1d                	je     f0129943 <test_kfreelast+0x1a34>
f0129926:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012992a:	75 17                	jne    f0129943 <test_kfreelast+0x1a34>
f012992c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129933:	83 ec 0c             	sub    $0xc,%esp
f0129936:	68 38 ab 13 f0       	push   $0xf013ab38
f012993b:	e8 f1 74 fd ff       	call   f0100e31 <cprintf>
f0129940:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0129943:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f012994a:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012994d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129953:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129956:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012995d:	eb 0e                	jmp    f012996d <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f012995f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129962:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129965:	01 d0                	add    %edx,%eax
f0129967:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012996a:	ff 45 f4             	incl   -0xc(%ebp)
f012996d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129973:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129976:	7f e7                	jg     f012995f <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129978:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012997c:	75 17                	jne    f0129995 <test_kfreelast+0x1a86>
f012997e:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129982:	83 ec 08             	sub    $0x8,%esp
f0129985:	ff 75 f0             	pushl  -0x10(%ebp)
f0129988:	68 04 aa 13 f0       	push   $0xf013aa04
f012998d:	e8 9f 74 fd ff       	call   f0100e31 <cprintf>
f0129992:	83 c4 10             	add    $0x10,%esp
f0129995:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012999c:	e8 25 30 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01299a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299a4:	e8 db ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f01299ac:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01299b2:	83 ec 0c             	sub    $0xc,%esp
f01299b5:	50                   	push   %eax
f01299b6:	e8 be e5 fd ff       	call   f0107f79 <kfree>
f01299bb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299be:	e8 c1 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299c3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299c6:	74 1d                	je     f01299e5 <test_kfreelast+0x1ad6>
f01299c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299cc:	75 17                	jne    f01299e5 <test_kfreelast+0x1ad6>
f01299ce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299d5:	83 ec 0c             	sub    $0xc,%esp
f01299d8:	68 2c aa 13 f0       	push   $0xf013aa2c
f01299dd:	e8 4f 74 fd ff       	call   f0100e31 <cprintf>
f01299e2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01299e5:	e8 dc 2f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01299ea:	89 c2                	mov    %eax,%edx
f01299ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01299ef:	29 c2                	sub    %eax,%edx
f01299f1:	89 d0                	mov    %edx,%eax
f01299f3:	83 f8 0d             	cmp    $0xd,%eax
f01299f6:	74 1d                	je     f0129a15 <test_kfreelast+0x1b06>
f01299f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299fc:	75 17                	jne    f0129a15 <test_kfreelast+0x1b06>
f01299fe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a05:	83 ec 0c             	sub    $0xc,%esp
f0129a08:	68 98 aa 13 f0       	push   $0xf013aa98
f0129a0d:	e8 1f 74 fd ff       	call   f0100e31 <cprintf>
f0129a12:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129a15:	83 ec 0c             	sub    $0xc,%esp
f0129a18:	6a 03                	push   $0x3
f0129a1a:	e8 42 34 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129a1f:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0129a22:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129a28:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f0129a2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a32:	eb 3c                	jmp    f0129a70 <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129a34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129a37:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129a3a:	01 d0                	add    %edx,%eax
f0129a3c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129a3f:	e8 0b 34 fe ff       	call   f010ce4f <sys_rcr2>
f0129a44:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129a47:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129a4a:	01 ca                	add    %ecx,%edx
f0129a4c:	39 d0                	cmp    %edx,%eax
f0129a4e:	74 1d                	je     f0129a6d <test_kfreelast+0x1b5e>
f0129a50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a54:	75 17                	jne    f0129a6d <test_kfreelast+0x1b5e>
f0129a56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a5d:	83 ec 0c             	sub    $0xc,%esp
f0129a60:	68 b0 ab 13 f0       	push   $0xf013abb0
f0129a65:	e8 c7 73 fd ff       	call   f0100e31 <cprintf>
f0129a6a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f0129a6d:	ff 45 f4             	incl   -0xc(%ebp)
f0129a70:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129a77:	7e bb                	jle    f0129a34 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129a79:	83 ec 0c             	sub    $0xc,%esp
f0129a7c:	6a 00                	push   $0x0
f0129a7e:	e8 de 33 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129a83:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129a86:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129a8c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129a8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a96:	eb 1e                	jmp    f0129ab6 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f0129a98:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f0129a9e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129aa1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129aa4:	01 c8                	add    %ecx,%eax
f0129aa6:	8a 00                	mov    (%eax),%al
f0129aa8:	0f be c0             	movsbl %al,%eax
f0129aab:	01 d0                	add    %edx,%eax
f0129aad:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129ab3:	ff 45 f4             	incl   -0xc(%ebp)
f0129ab6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129abc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129abf:	7f d7                	jg     f0129a98 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129ac1:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129ac7:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f0129acd:	89 d0                	mov    %edx,%eax
f0129acf:	01 c0                	add    %eax,%eax
f0129ad1:	01 d0                	add    %edx,%eax
f0129ad3:	01 c0                	add    %eax,%eax
f0129ad5:	01 d0                	add    %edx,%eax
f0129ad7:	01 c0                	add    %eax,%eax
f0129ad9:	39 c1                	cmp    %eax,%ecx
f0129adb:	74 1d                	je     f0129afa <test_kfreelast+0x1beb>
f0129add:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ae1:	75 17                	jne    f0129afa <test_kfreelast+0x1beb>
f0129ae3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129aea:	83 ec 0c             	sub    $0xc,%esp
f0129aed:	68 7c ab 13 f0       	push   $0xf013ab7c
f0129af2:	e8 3a 73 fd ff       	call   f0100e31 <cprintf>
f0129af7:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129afa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129afe:	75 17                	jne    f0129b17 <test_kfreelast+0x1c08>
f0129b00:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129b04:	83 ec 08             	sub    $0x8,%esp
f0129b07:	ff 75 f0             	pushl  -0x10(%ebp)
f0129b0a:	68 04 aa 13 f0       	push   $0xf013aa04
f0129b0f:	e8 1d 73 fd ff       	call   f0100e31 <cprintf>
f0129b14:	83 c4 10             	add    $0x10,%esp
f0129b17:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b1e:	e8 a3 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129b23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b26:	e8 59 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f0129b2e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129b34:	83 ec 0c             	sub    $0xc,%esp
f0129b37:	50                   	push   %eax
f0129b38:	e8 3c e4 fd ff       	call   f0107f79 <kfree>
f0129b3d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129b40:	e8 3f ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b45:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b48:	74 1d                	je     f0129b67 <test_kfreelast+0x1c58>
f0129b4a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b4e:	75 17                	jne    f0129b67 <test_kfreelast+0x1c58>
f0129b50:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b57:	83 ec 0c             	sub    $0xc,%esp
f0129b5a:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129b5f:	e8 cd 72 fd ff       	call   f0100e31 <cprintf>
f0129b64:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129b67:	e8 5a 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129b6c:	89 c2                	mov    %eax,%edx
f0129b6e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b71:	29 c2                	sub    %eax,%edx
f0129b73:	89 d0                	mov    %edx,%eax
f0129b75:	83 f8 02             	cmp    $0x2,%eax
f0129b78:	74 1d                	je     f0129b97 <test_kfreelast+0x1c88>
f0129b7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b7e:	75 17                	jne    f0129b97 <test_kfreelast+0x1c88>
f0129b80:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b87:	83 ec 0c             	sub    $0xc,%esp
f0129b8a:	68 98 aa 13 f0       	push   $0xf013aa98
f0129b8f:	e8 9d 72 fd ff       	call   f0100e31 <cprintf>
f0129b94:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129b97:	e8 2a 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129b9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b9f:	e8 e0 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ba4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f0129ba7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129bad:	83 ec 0c             	sub    $0xc,%esp
f0129bb0:	50                   	push   %eax
f0129bb1:	e8 c3 e3 fd ff       	call   f0107f79 <kfree>
f0129bb6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129bb9:	e8 c6 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129bbe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129bc1:	74 1d                	je     f0129be0 <test_kfreelast+0x1cd1>
f0129bc3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bc7:	75 17                	jne    f0129be0 <test_kfreelast+0x1cd1>
f0129bc9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bd0:	83 ec 0c             	sub    $0xc,%esp
f0129bd3:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129bd8:	e8 54 72 fd ff       	call   f0100e31 <cprintf>
f0129bdd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129be0:	e8 e1 2d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129be5:	89 c2                	mov    %eax,%edx
f0129be7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129bea:	29 c2                	sub    %eax,%edx
f0129bec:	89 d0                	mov    %edx,%eax
f0129bee:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129bf3:	74 1d                	je     f0129c12 <test_kfreelast+0x1d03>
f0129bf5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bf9:	75 17                	jne    f0129c12 <test_kfreelast+0x1d03>
f0129bfb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c02:	83 ec 0c             	sub    $0xc,%esp
f0129c05:	68 98 aa 13 f0       	push   $0xf013aa98
f0129c0a:	e8 22 72 fd ff       	call   f0100e31 <cprintf>
f0129c0f:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c12:	e8 af 2d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129c17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c1a:	e8 65 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0129c22:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0129c28:	83 ec 0c             	sub    $0xc,%esp
f0129c2b:	50                   	push   %eax
f0129c2c:	e8 48 e3 fd ff       	call   f0107f79 <kfree>
f0129c31:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129c34:	e8 4b aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c39:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c3c:	74 1d                	je     f0129c5b <test_kfreelast+0x1d4c>
f0129c3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c42:	75 17                	jne    f0129c5b <test_kfreelast+0x1d4c>
f0129c44:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c4b:	83 ec 0c             	sub    $0xc,%esp
f0129c4e:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129c53:	e8 d9 71 fd ff       	call   f0100e31 <cprintf>
f0129c58:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129c5b:	e8 66 2d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129c60:	89 c2                	mov    %eax,%edx
f0129c62:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129c65:	29 c2                	sub    %eax,%edx
f0129c67:	89 d0                	mov    %edx,%eax
f0129c69:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129c6e:	74 1d                	je     f0129c8d <test_kfreelast+0x1d7e>
f0129c70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c74:	75 17                	jne    f0129c8d <test_kfreelast+0x1d7e>
f0129c76:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c7d:	83 ec 0c             	sub    $0xc,%esp
f0129c80:	68 98 aa 13 f0       	push   $0xf013aa98
f0129c85:	e8 a7 71 fd ff       	call   f0100e31 <cprintf>
f0129c8a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129c8d:	e8 34 2d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129c92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c95:	e8 ea a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129c9d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129ca3:	83 ec 0c             	sub    $0xc,%esp
f0129ca6:	50                   	push   %eax
f0129ca7:	e8 cd e2 fd ff       	call   f0107f79 <kfree>
f0129cac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129caf:	e8 d0 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129cb4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129cb7:	74 1d                	je     f0129cd6 <test_kfreelast+0x1dc7>
f0129cb9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cbd:	75 17                	jne    f0129cd6 <test_kfreelast+0x1dc7>
f0129cbf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cc6:	83 ec 0c             	sub    $0xc,%esp
f0129cc9:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129cce:	e8 5e 71 fd ff       	call   f0100e31 <cprintf>
f0129cd3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129cd6:	e8 eb 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129cdb:	89 c2                	mov    %eax,%edx
f0129cdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129ce0:	29 c2                	sub    %eax,%edx
f0129ce2:	89 d0                	mov    %edx,%eax
f0129ce4:	83 f8 01             	cmp    $0x1,%eax
f0129ce7:	74 1d                	je     f0129d06 <test_kfreelast+0x1df7>
f0129ce9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ced:	75 17                	jne    f0129d06 <test_kfreelast+0x1df7>
f0129cef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cf6:	83 ec 0c             	sub    $0xc,%esp
f0129cf9:	68 98 aa 13 f0       	push   $0xf013aa98
f0129cfe:	e8 2e 71 fd ff       	call   f0100e31 <cprintf>
f0129d03:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d06:	e8 bb 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129d0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d0e:	e8 71 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d13:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129d16:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0129d1c:	83 ec 0c             	sub    $0xc,%esp
f0129d1f:	50                   	push   %eax
f0129d20:	e8 54 e2 fd ff       	call   f0107f79 <kfree>
f0129d25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d28:	e8 57 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d2d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d30:	74 1d                	je     f0129d4f <test_kfreelast+0x1e40>
f0129d32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d36:	75 17                	jne    f0129d4f <test_kfreelast+0x1e40>
f0129d38:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d3f:	83 ec 0c             	sub    $0xc,%esp
f0129d42:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129d47:	e8 e5 70 fd ff       	call   f0100e31 <cprintf>
f0129d4c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129d4f:	e8 72 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129d54:	89 c2                	mov    %eax,%edx
f0129d56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d59:	29 c2                	sub    %eax,%edx
f0129d5b:	89 d0                	mov    %edx,%eax
f0129d5d:	83 f8 01             	cmp    $0x1,%eax
f0129d60:	74 1d                	je     f0129d7f <test_kfreelast+0x1e70>
f0129d62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d66:	75 17                	jne    f0129d7f <test_kfreelast+0x1e70>
f0129d68:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d6f:	83 ec 0c             	sub    $0xc,%esp
f0129d72:	68 98 aa 13 f0       	push   $0xf013aa98
f0129d77:	e8 b5 70 fd ff       	call   f0100e31 <cprintf>
f0129d7c:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f0129d7f:	e8 42 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129d84:	89 c2                	mov    %eax,%edx
f0129d86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129d89:	39 c2                	cmp    %eax,%edx
f0129d8b:	74 1d                	je     f0129daa <test_kfreelast+0x1e9b>
f0129d8d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d91:	75 17                	jne    f0129daa <test_kfreelast+0x1e9b>
f0129d93:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d9a:	83 ec 0c             	sub    $0xc,%esp
f0129d9d:	68 f8 ab 13 f0       	push   $0xf013abf8
f0129da2:	e8 8a 70 fd ff       	call   f0100e31 <cprintf>
f0129da7:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129daa:	83 ec 0c             	sub    $0xc,%esp
f0129dad:	6a 03                	push   $0x3
f0129daf:	e8 ad 30 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129db4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129db7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129dbe:	e9 8e 00 00 00       	jmp    f0129e51 <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129dc6:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f0129dcd:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129dd0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129dd3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129dd6:	e8 74 30 fe ff       	call   f010ce4f <sys_rcr2>
f0129ddb:	89 c2                	mov    %eax,%edx
f0129ddd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129de0:	39 c2                	cmp    %eax,%edx
f0129de2:	74 1d                	je     f0129e01 <test_kfreelast+0x1ef2>
f0129de4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129de8:	75 17                	jne    f0129e01 <test_kfreelast+0x1ef2>
f0129dea:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129df1:	83 ec 0c             	sub    $0xc,%esp
f0129df4:	68 b0 ab 13 f0       	push   $0xf013abb0
f0129df9:	e8 33 70 fd ff       	call   f0100e31 <cprintf>
f0129dfe:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129e04:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129e0b:	89 c2                	mov    %eax,%edx
f0129e0d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129e10:	01 d0                	add    %edx,%eax
f0129e12:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129e15:	e8 35 30 fe ff       	call   f010ce4f <sys_rcr2>
f0129e1a:	89 c2                	mov    %eax,%edx
f0129e1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129e1f:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129e26:	89 c1                	mov    %eax,%ecx
f0129e28:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129e2b:	01 c8                	add    %ecx,%eax
f0129e2d:	39 c2                	cmp    %eax,%edx
f0129e2f:	74 1d                	je     f0129e4e <test_kfreelast+0x1f3f>
f0129e31:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e35:	75 17                	jne    f0129e4e <test_kfreelast+0x1f3f>
f0129e37:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e3e:	83 ec 0c             	sub    $0xc,%esp
f0129e41:	68 b0 ab 13 f0       	push   $0xf013abb0
f0129e46:	e8 e6 6f fd ff       	call   f0100e31 <cprintf>
f0129e4b:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129e4e:	ff 45 f4             	incl   -0xc(%ebp)
f0129e51:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129e55:	0f 8e 68 ff ff ff    	jle    f0129dc3 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129e5b:	83 ec 0c             	sub    $0xc,%esp
f0129e5e:	6a 00                	push   $0x0
f0129e60:	e8 fc 2f fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129e65:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e68:	e8 59 2b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129e6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e70:	e8 0f a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129e75:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129e78:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0129e7e:	83 ec 0c             	sub    $0xc,%esp
f0129e81:	50                   	push   %eax
f0129e82:	e8 f2 e0 fd ff       	call   f0107f79 <kfree>
f0129e87:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129e8a:	e8 f5 a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129e8f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e92:	74 1d                	je     f0129eb1 <test_kfreelast+0x1fa2>
f0129e94:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e98:	75 17                	jne    f0129eb1 <test_kfreelast+0x1fa2>
f0129e9a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ea1:	83 ec 0c             	sub    $0xc,%esp
f0129ea4:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129ea9:	e8 83 6f fd ff       	call   f0100e31 <cprintf>
f0129eae:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129eb1:	e8 10 2b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129eb6:	89 c2                	mov    %eax,%edx
f0129eb8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129ebb:	39 c2                	cmp    %eax,%edx
f0129ebd:	74 1d                	je     f0129edc <test_kfreelast+0x1fcd>
f0129ebf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ec3:	75 17                	jne    f0129edc <test_kfreelast+0x1fcd>
f0129ec5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ecc:	83 ec 0c             	sub    $0xc,%esp
f0129ecf:	68 30 ac 13 f0       	push   $0xf013ac30
f0129ed4:	e8 58 6f fd ff       	call   f0100e31 <cprintf>
f0129ed9:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129edc:	e8 e5 2a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129ee1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ee4:	e8 9b a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ee9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129eec:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129ef2:	83 ec 0c             	sub    $0xc,%esp
f0129ef5:	50                   	push   %eax
f0129ef6:	e8 7e e0 fd ff       	call   f0107f79 <kfree>
f0129efb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129efe:	e8 81 a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f03:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f06:	74 1d                	je     f0129f25 <test_kfreelast+0x2016>
f0129f08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f0c:	75 17                	jne    f0129f25 <test_kfreelast+0x2016>
f0129f0e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f15:	83 ec 0c             	sub    $0xc,%esp
f0129f18:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129f1d:	e8 0f 6f fd ff       	call   f0100e31 <cprintf>
f0129f22:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129f25:	e8 9c 2a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129f2a:	89 c2                	mov    %eax,%edx
f0129f2c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129f2f:	39 c2                	cmp    %eax,%edx
f0129f31:	74 1d                	je     f0129f50 <test_kfreelast+0x2041>
f0129f33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f37:	75 17                	jne    f0129f50 <test_kfreelast+0x2041>
f0129f39:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f40:	83 ec 0c             	sub    $0xc,%esp
f0129f43:	68 30 ac 13 f0       	push   $0xf013ac30
f0129f48:	e8 e4 6e fd ff       	call   f0100e31 <cprintf>
f0129f4d:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f50:	e8 71 2a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129f55:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f58:	e8 27 a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129f60:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0129f66:	83 ec 0c             	sub    $0xc,%esp
f0129f69:	50                   	push   %eax
f0129f6a:	e8 0a e0 fd ff       	call   f0107f79 <kfree>
f0129f6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129f72:	e8 0d a7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129f77:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f7a:	74 1d                	je     f0129f99 <test_kfreelast+0x208a>
f0129f7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f80:	75 17                	jne    f0129f99 <test_kfreelast+0x208a>
f0129f82:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f89:	83 ec 0c             	sub    $0xc,%esp
f0129f8c:	68 2c aa 13 f0       	push   $0xf013aa2c
f0129f91:	e8 9b 6e fd ff       	call   f0100e31 <cprintf>
f0129f96:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129f99:	e8 28 2a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129f9e:	89 c2                	mov    %eax,%edx
f0129fa0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129fa3:	39 c2                	cmp    %eax,%edx
f0129fa5:	74 1d                	je     f0129fc4 <test_kfreelast+0x20b5>
f0129fa7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129fab:	75 17                	jne    f0129fc4 <test_kfreelast+0x20b5>
f0129fad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129fb4:	83 ec 0c             	sub    $0xc,%esp
f0129fb7:	68 30 ac 13 f0       	push   $0xf013ac30
f0129fbc:	e8 70 6e fd ff       	call   f0100e31 <cprintf>
f0129fc1:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129fc4:	e8 fd 29 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129fc9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129fcc:	e8 b3 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129fd1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129fd4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129fda:	83 ec 0c             	sub    $0xc,%esp
f0129fdd:	50                   	push   %eax
f0129fde:	e8 96 df fd ff       	call   f0107f79 <kfree>
f0129fe3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129fe6:	e8 99 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129feb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fee:	74 1d                	je     f012a00d <test_kfreelast+0x20fe>
f0129ff0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ff4:	75 17                	jne    f012a00d <test_kfreelast+0x20fe>
f0129ff6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ffd:	83 ec 0c             	sub    $0xc,%esp
f012a000:	68 2c aa 13 f0       	push   $0xf013aa2c
f012a005:	e8 27 6e fd ff       	call   f0100e31 <cprintf>
f012a00a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a00d:	e8 b4 29 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a012:	89 c2                	mov    %eax,%edx
f012a014:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a017:	39 c2                	cmp    %eax,%edx
f012a019:	74 1d                	je     f012a038 <test_kfreelast+0x2129>
f012a01b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a01f:	75 17                	jne    f012a038 <test_kfreelast+0x2129>
f012a021:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a028:	83 ec 0c             	sub    $0xc,%esp
f012a02b:	68 30 ac 13 f0       	push   $0xf013ac30
f012a030:	e8 fc 6d fd ff       	call   f0100e31 <cprintf>
f012a035:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a038:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a03c:	75 17                	jne    f012a055 <test_kfreelast+0x2146>
f012a03e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a042:	83 ec 08             	sub    $0x8,%esp
f012a045:	ff 75 f0             	pushl  -0x10(%ebp)
f012a048:	68 04 aa 13 f0       	push   $0xf013aa04
f012a04d:	e8 df 6d fd ff       	call   f0100e31 <cprintf>
f012a052:	83 c4 10             	add    $0x10,%esp
f012a055:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012a05c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a061:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a064:	5b                   	pop    %ebx
f012a065:	5f                   	pop    %edi
f012a066:	5d                   	pop    %ebp
f012a067:	c3                   	ret    

f012a068 <test_krealloc>:

int test_krealloc() {
f012a068:	55                   	push   %ebp
f012a069:	89 e5                	mov    %esp,%ebp
f012a06b:	57                   	push   %edi
f012a06c:	53                   	push   %ebx
f012a06d:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f012a073:	83 ec 0c             	sub    $0xc,%esp
f012a076:	68 14 99 13 f0       	push   $0xf0139914
f012a07b:	e8 b1 6d fd ff       	call   f0100e31 <cprintf>
f012a080:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012a083:	83 ec 0c             	sub    $0xc,%esp
f012a086:	68 44 99 13 f0       	push   $0xf0139944
f012a08b:	e8 a1 6d fd ff       	call   f0100e31 <cprintf>
f012a090:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012a093:	83 ec 0c             	sub    $0xc,%esp
f012a096:	68 14 99 13 f0       	push   $0xf0139914
f012a09b:	e8 91 6d fd ff       	call   f0100e31 <cprintf>
f012a0a0:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012a0a3:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012a0a7:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012a0ab:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012a0b1:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012a0b7:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a0be:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012a0c5:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f012a0cb:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0d0:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0d5:	89 d7                	mov    %edx,%edi
f012a0d7:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012a0d9:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012a0e0:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012a0e6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0eb:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0f0:	89 d7                	mov    %edx,%edi
f012a0f2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012a0f4:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012a0fa:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0ff:	b8 00 00 00 00       	mov    $0x0,%eax
f012a104:	89 d7                	mov    %edx,%edi
f012a106:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a108:	e8 b9 28 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a10d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012a110:	83 ec 08             	sub    $0x8,%esp
f012a113:	68 00 fc 0f 00       	push   $0xffc00
f012a118:	6a 00                	push   $0x0
f012a11a:	e8 f6 de fd ff       	call   f0108015 <krealloc>
f012a11f:	83 c4 10             	add    $0x10,%esp
f012a122:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012a128:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a12e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012a133:	77 17                	ja     f012a14c <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a135:	83 ec 04             	sub    $0x4,%esp
f012a138:	68 78 ac 13 f0       	push   $0xf013ac78
f012a13d:	68 e2 0e 00 00       	push   $0xee2
f012a142:	68 d2 99 13 f0       	push   $0xf01399d2
f012a147:	e8 64 60 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012a14c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a152:	89 c1                	mov    %eax,%ecx
f012a154:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a15b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a160:	0f b6 d0             	movzbl %al,%edx
f012a163:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a166:	01 d0                	add    %edx,%eax
f012a168:	48                   	dec    %eax
f012a169:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a16c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a16f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a174:	f7 75 b4             	divl   -0x4c(%ebp)
f012a177:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a17a:	29 d0                	sub    %edx,%eax
f012a17c:	89 c3                	mov    %eax,%ebx
f012a17e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a185:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a18a:	0f b6 c0             	movzbl %al,%eax
f012a18d:	c1 e0 04             	shl    $0x4,%eax
f012a190:	89 c2                	mov    %eax,%edx
f012a192:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a195:	01 d0                	add    %edx,%eax
f012a197:	48                   	dec    %eax
f012a198:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a19b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a19e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1a3:	f7 75 ac             	divl   -0x54(%ebp)
f012a1a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a1a9:	29 d0                	sub    %edx,%eax
f012a1ab:	01 d8                	add    %ebx,%eax
f012a1ad:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a1b2:	39 c1                	cmp    %eax,%ecx
f012a1b4:	74 17                	je     f012a1cd <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012a1b6:	83 ec 04             	sub    $0x4,%esp
f012a1b9:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a1be:	68 e4 0e 00 00       	push   $0xee4
f012a1c3:	68 d2 99 13 f0       	push   $0xf01399d2
f012a1c8:	e8 e3 5f fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a1cd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a1d0:	e8 f1 27 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a1d5:	29 c3                	sub    %eax,%ebx
f012a1d7:	89 d8                	mov    %ebx,%eax
f012a1d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a1de:	74 17                	je     f012a1f7 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f012a1e0:	83 ec 04             	sub    $0x4,%esp
f012a1e3:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a1e8:	68 e7 0e 00 00       	push   $0xee7
f012a1ed:	68 d2 99 13 f0       	push   $0xf01399d2
f012a1f2:	e8 b9 5f fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a1f7:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f012a1fe:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a201:	e8 c0 27 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a206:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012a209:	83 ec 08             	sub    $0x8,%esp
f012a20c:	68 00 fc 0f 00       	push   $0xffc00
f012a211:	6a 00                	push   $0x0
f012a213:	e8 fd dd fd ff       	call   f0108015 <krealloc>
f012a218:	83 c4 10             	add    $0x10,%esp
f012a21b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012a221:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a227:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012a22c:	77 17                	ja     f012a245 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a22e:	83 ec 04             	sub    $0x4,%esp
f012a231:	68 78 ac 13 f0       	push   $0xf013ac78
f012a236:	68 ef 0e 00 00       	push   $0xeef
f012a23b:	68 d2 99 13 f0       	push   $0xf01399d2
f012a240:	e8 6b 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012a245:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a24b:	89 c1                	mov    %eax,%ecx
f012a24d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a254:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a259:	0f b6 d0             	movzbl %al,%edx
f012a25c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a25f:	01 d0                	add    %edx,%eax
f012a261:	48                   	dec    %eax
f012a262:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a265:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a268:	ba 00 00 00 00       	mov    $0x0,%edx
f012a26d:	f7 75 a4             	divl   -0x5c(%ebp)
f012a270:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a273:	29 d0                	sub    %edx,%eax
f012a275:	89 c3                	mov    %eax,%ebx
f012a277:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a27e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a283:	0f b6 c0             	movzbl %al,%eax
f012a286:	c1 e0 04             	shl    $0x4,%eax
f012a289:	89 c2                	mov    %eax,%edx
f012a28b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a28e:	01 d0                	add    %edx,%eax
f012a290:	48                   	dec    %eax
f012a291:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a294:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a297:	ba 00 00 00 00       	mov    $0x0,%edx
f012a29c:	f7 75 9c             	divl   -0x64(%ebp)
f012a29f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a2a2:	29 d0                	sub    %edx,%eax
f012a2a4:	01 d8                	add    %ebx,%eax
f012a2a6:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a2ab:	39 c1                	cmp    %eax,%ecx
f012a2ad:	74 17                	je     f012a2c6 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a2af:	83 ec 04             	sub    $0x4,%esp
f012a2b2:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a2b7:	68 f1 0e 00 00       	push   $0xef1
f012a2bc:	68 d2 99 13 f0       	push   $0xf01399d2
f012a2c1:	e8 ea 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a2c6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a2c9:	e8 f8 26 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a2ce:	29 c3                	sub    %eax,%ebx
f012a2d0:	89 d8                	mov    %ebx,%eax
f012a2d2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a2d7:	74 17                	je     f012a2f0 <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a2d9:	83 ec 04             	sub    $0x4,%esp
f012a2dc:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a2e1:	68 f3 0e 00 00       	push   $0xef3
f012a2e6:	68 d2 99 13 f0       	push   $0xf01399d2
f012a2eb:	e8 c0 5e fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a2f0:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a2f7:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a2fa:	e8 c7 26 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a2ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a302:	83 ec 08             	sub    $0x8,%esp
f012a305:	68 00 fc 0f 00       	push   $0xffc00
f012a30a:	6a 00                	push   $0x0
f012a30c:	e8 04 dd fd ff       	call   f0108015 <krealloc>
f012a311:	83 c4 10             	add    $0x10,%esp
f012a314:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a31a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a320:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a325:	77 17                	ja     f012a33e <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a327:	83 ec 04             	sub    $0x4,%esp
f012a32a:	68 78 ac 13 f0       	push   $0xf013ac78
f012a32f:	68 fb 0e 00 00       	push   $0xefb
f012a334:	68 d2 99 13 f0       	push   $0xf01399d2
f012a339:	e8 72 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a33e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a344:	89 c1                	mov    %eax,%ecx
f012a346:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a34d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a352:	0f b6 d0             	movzbl %al,%edx
f012a355:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a358:	01 d0                	add    %edx,%eax
f012a35a:	48                   	dec    %eax
f012a35b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a35e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a361:	ba 00 00 00 00       	mov    $0x0,%edx
f012a366:	f7 75 94             	divl   -0x6c(%ebp)
f012a369:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a36c:	29 d0                	sub    %edx,%eax
f012a36e:	89 c3                	mov    %eax,%ebx
f012a370:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a377:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a37c:	0f b6 c0             	movzbl %al,%eax
f012a37f:	c1 e0 04             	shl    $0x4,%eax
f012a382:	89 c2                	mov    %eax,%edx
f012a384:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a387:	01 d0                	add    %edx,%eax
f012a389:	48                   	dec    %eax
f012a38a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a38d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a390:	ba 00 00 00 00       	mov    $0x0,%edx
f012a395:	f7 75 8c             	divl   -0x74(%ebp)
f012a398:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a39b:	29 d0                	sub    %edx,%eax
f012a39d:	01 d8                	add    %ebx,%eax
f012a39f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a3a4:	39 c1                	cmp    %eax,%ecx
f012a3a6:	74 17                	je     f012a3bf <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a3a8:	83 ec 04             	sub    $0x4,%esp
f012a3ab:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a3b0:	68 fd 0e 00 00       	push   $0xefd
f012a3b5:	68 d2 99 13 f0       	push   $0xf01399d2
f012a3ba:	e8 f1 5d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a3bf:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a3c2:	e8 ff 25 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a3c7:	29 c3                	sub    %eax,%ebx
f012a3c9:	89 d8                	mov    %ebx,%eax
f012a3cb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a3d0:	74 17                	je     f012a3e9 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a3d2:	83 ec 04             	sub    $0x4,%esp
f012a3d5:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a3da:	68 ff 0e 00 00       	push   $0xeff
f012a3df:	68 d2 99 13 f0       	push   $0xf01399d2
f012a3e4:	e8 c7 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a3e9:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a3f0:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a3f3:	e8 ce 25 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a3f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a3fb:	83 ec 08             	sub    $0x8,%esp
f012a3fe:	68 00 fc 0f 00       	push   $0xffc00
f012a403:	6a 00                	push   $0x0
f012a405:	e8 0b dc fd ff       	call   f0108015 <krealloc>
f012a40a:	83 c4 10             	add    $0x10,%esp
f012a40d:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a413:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a419:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a41e:	77 17                	ja     f012a437 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a420:	83 ec 04             	sub    $0x4,%esp
f012a423:	68 78 ac 13 f0       	push   $0xf013ac78
f012a428:	68 06 0f 00 00       	push   $0xf06
f012a42d:	68 d2 99 13 f0       	push   $0xf01399d2
f012a432:	e8 79 5d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a437:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a43d:	89 c1                	mov    %eax,%ecx
f012a43f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a446:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a44b:	0f b6 d0             	movzbl %al,%edx
f012a44e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a451:	01 d0                	add    %edx,%eax
f012a453:	48                   	dec    %eax
f012a454:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a457:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a45a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a45f:	f7 75 84             	divl   -0x7c(%ebp)
f012a462:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a465:	29 d0                	sub    %edx,%eax
f012a467:	89 c3                	mov    %eax,%ebx
f012a469:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a470:	10 00 00 
f012a473:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a478:	0f b6 c0             	movzbl %al,%eax
f012a47b:	c1 e0 04             	shl    $0x4,%eax
f012a47e:	89 c2                	mov    %eax,%edx
f012a480:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a486:	01 d0                	add    %edx,%eax
f012a488:	48                   	dec    %eax
f012a489:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a48f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a495:	ba 00 00 00 00       	mov    $0x0,%edx
f012a49a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a4a0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a4a6:	29 d0                	sub    %edx,%eax
f012a4a8:	01 d8                	add    %ebx,%eax
f012a4aa:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a4af:	39 c1                	cmp    %eax,%ecx
f012a4b1:	74 17                	je     f012a4ca <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a4b3:	83 ec 04             	sub    $0x4,%esp
f012a4b6:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a4bb:	68 08 0f 00 00       	push   $0xf08
f012a4c0:	68 d2 99 13 f0       	push   $0xf01399d2
f012a4c5:	e8 e6 5c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a4ca:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a4cd:	e8 f4 24 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a4d2:	29 c3                	sub    %eax,%ebx
f012a4d4:	89 d8                	mov    %ebx,%eax
f012a4d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a4db:	74 17                	je     f012a4f4 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a4dd:	83 ec 04             	sub    $0x4,%esp
f012a4e0:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a4e5:	68 0a 0f 00 00       	push   $0xf0a
f012a4ea:	68 d2 99 13 f0       	push   $0xf01399d2
f012a4ef:	e8 bc 5c fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a4f4:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a4fb:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a4fe:	e8 c3 24 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a503:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a506:	83 ec 08             	sub    $0x8,%esp
f012a509:	68 00 fc 1f 00       	push   $0x1ffc00
f012a50e:	6a 00                	push   $0x0
f012a510:	e8 00 db fd ff       	call   f0108015 <krealloc>
f012a515:	83 c4 10             	add    $0x10,%esp
f012a518:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a51e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a524:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a529:	77 17                	ja     f012a542 <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a52b:	83 ec 04             	sub    $0x4,%esp
f012a52e:	68 78 ac 13 f0       	push   $0xf013ac78
f012a533:	68 11 0f 00 00       	push   $0xf11
f012a538:	68 d2 99 13 f0       	push   $0xf01399d2
f012a53d:	e8 6e 5c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a542:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a548:	89 c1                	mov    %eax,%ecx
f012a54a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a551:	10 00 00 
f012a554:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a559:	0f b6 d0             	movzbl %al,%edx
f012a55c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a562:	01 d0                	add    %edx,%eax
f012a564:	48                   	dec    %eax
f012a565:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a56b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a571:	ba 00 00 00 00       	mov    $0x0,%edx
f012a576:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a57c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a582:	29 d0                	sub    %edx,%eax
f012a584:	89 c3                	mov    %eax,%ebx
f012a586:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a58d:	10 00 00 
f012a590:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a595:	0f b6 c0             	movzbl %al,%eax
f012a598:	c1 e0 04             	shl    $0x4,%eax
f012a59b:	89 c2                	mov    %eax,%edx
f012a59d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a5a3:	01 d0                	add    %edx,%eax
f012a5a5:	48                   	dec    %eax
f012a5a6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a5ac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a5b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5b7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a5bd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a5c3:	29 d0                	sub    %edx,%eax
f012a5c5:	01 d8                	add    %ebx,%eax
f012a5c7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a5cc:	39 c1                	cmp    %eax,%ecx
f012a5ce:	74 17                	je     f012a5e7 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a5d0:	83 ec 04             	sub    $0x4,%esp
f012a5d3:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a5d8:	68 13 0f 00 00       	push   $0xf13
f012a5dd:	68 d2 99 13 f0       	push   $0xf01399d2
f012a5e2:	e8 c9 5b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a5e7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a5ea:	e8 d7 23 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a5ef:	29 c3                	sub    %eax,%ebx
f012a5f1:	89 d8                	mov    %ebx,%eax
f012a5f3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a5f8:	74 17                	je     f012a611 <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a5fa:	83 ec 04             	sub    $0x4,%esp
f012a5fd:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a602:	68 15 0f 00 00       	push   $0xf15
f012a607:	68 d2 99 13 f0       	push   $0xf01399d2
f012a60c:	e8 9f 5b fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a611:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a618:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a61b:	e8 a6 23 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a620:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a623:	83 ec 08             	sub    $0x8,%esp
f012a626:	68 00 fc 1f 00       	push   $0x1ffc00
f012a62b:	6a 00                	push   $0x0
f012a62d:	e8 e3 d9 fd ff       	call   f0108015 <krealloc>
f012a632:	83 c4 10             	add    $0x10,%esp
f012a635:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a63b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a641:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a646:	77 17                	ja     f012a65f <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a648:	83 ec 04             	sub    $0x4,%esp
f012a64b:	68 78 ac 13 f0       	push   $0xf013ac78
f012a650:	68 1c 0f 00 00       	push   $0xf1c
f012a655:	68 d2 99 13 f0       	push   $0xf01399d2
f012a65a:	e8 51 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a65f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a665:	89 c1                	mov    %eax,%ecx
f012a667:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a66e:	10 00 00 
f012a671:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a676:	0f b6 d0             	movzbl %al,%edx
f012a679:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a67f:	01 d0                	add    %edx,%eax
f012a681:	48                   	dec    %eax
f012a682:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a688:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a68e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a693:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a699:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a69f:	29 d0                	sub    %edx,%eax
f012a6a1:	89 c3                	mov    %eax,%ebx
f012a6a3:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a6aa:	10 00 00 
f012a6ad:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a6b2:	0f b6 c0             	movzbl %al,%eax
f012a6b5:	c1 e0 04             	shl    $0x4,%eax
f012a6b8:	89 c2                	mov    %eax,%edx
f012a6ba:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a6c0:	01 d0                	add    %edx,%eax
f012a6c2:	48                   	dec    %eax
f012a6c3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a6c9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a6cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6d4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a6da:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a6e0:	29 d0                	sub    %edx,%eax
f012a6e2:	01 d8                	add    %ebx,%eax
f012a6e4:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a6e9:	39 c1                	cmp    %eax,%ecx
f012a6eb:	74 17                	je     f012a704 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a6ed:	83 ec 04             	sub    $0x4,%esp
f012a6f0:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a6f5:	68 1e 0f 00 00       	push   $0xf1e
f012a6fa:	68 d2 99 13 f0       	push   $0xf01399d2
f012a6ff:	e8 ac 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a704:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a707:	e8 ba 22 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a70c:	29 c3                	sub    %eax,%ebx
f012a70e:	89 d8                	mov    %ebx,%eax
f012a710:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a715:	74 17                	je     f012a72e <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a717:	83 ec 04             	sub    $0x4,%esp
f012a71a:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a71f:	68 20 0f 00 00       	push   $0xf20
f012a724:	68 d2 99 13 f0       	push   $0xf01399d2
f012a729:	e8 82 5a fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a72e:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a735:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a738:	e8 89 22 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a73d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a740:	83 ec 08             	sub    $0x8,%esp
f012a743:	68 00 fc 2f 00       	push   $0x2ffc00
f012a748:	6a 00                	push   $0x0
f012a74a:	e8 c6 d8 fd ff       	call   f0108015 <krealloc>
f012a74f:	83 c4 10             	add    $0x10,%esp
f012a752:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a758:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a75e:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a763:	77 17                	ja     f012a77c <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a765:	83 ec 04             	sub    $0x4,%esp
f012a768:	68 78 ac 13 f0       	push   $0xf013ac78
f012a76d:	68 27 0f 00 00       	push   $0xf27
f012a772:	68 d2 99 13 f0       	push   $0xf01399d2
f012a777:	e8 34 5a fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a77c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a782:	89 c1                	mov    %eax,%ecx
f012a784:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a78b:	10 00 00 
f012a78e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a793:	0f b6 d0             	movzbl %al,%edx
f012a796:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a79c:	01 d0                	add    %edx,%eax
f012a79e:	48                   	dec    %eax
f012a79f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a7a5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a7ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7b0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a7b6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a7bc:	29 d0                	sub    %edx,%eax
f012a7be:	89 c3                	mov    %eax,%ebx
f012a7c0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a7c7:	10 00 00 
f012a7ca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a7cf:	0f b6 c0             	movzbl %al,%eax
f012a7d2:	c1 e0 04             	shl    $0x4,%eax
f012a7d5:	89 c2                	mov    %eax,%edx
f012a7d7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7dd:	01 d0                	add    %edx,%eax
f012a7df:	48                   	dec    %eax
f012a7e0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a7e6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a7ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7f1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a7f7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a7fd:	29 d0                	sub    %edx,%eax
f012a7ff:	01 d8                	add    %ebx,%eax
f012a801:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a806:	39 c1                	cmp    %eax,%ecx
f012a808:	74 17                	je     f012a821 <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a80a:	83 ec 04             	sub    $0x4,%esp
f012a80d:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a812:	68 29 0f 00 00       	push   $0xf29
f012a817:	68 d2 99 13 f0       	push   $0xf01399d2
f012a81c:	e8 8f 59 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a821:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a824:	e8 9d 21 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a829:	29 c3                	sub    %eax,%ebx
f012a82b:	89 d8                	mov    %ebx,%eax
f012a82d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a832:	74 17                	je     f012a84b <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a834:	83 ec 04             	sub    $0x4,%esp
f012a837:	68 1c 9e 13 f0       	push   $0xf0139e1c
f012a83c:	68 2b 0f 00 00       	push   $0xf2b
f012a841:	68 d2 99 13 f0       	push   $0xf01399d2
f012a846:	e8 65 59 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a84b:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a852:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a855:	e8 6c 21 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a85a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a85d:	83 ec 08             	sub    $0x8,%esp
f012a860:	68 00 fc 2f 00       	push   $0x2ffc00
f012a865:	6a 00                	push   $0x0
f012a867:	e8 a9 d7 fd ff       	call   f0108015 <krealloc>
f012a86c:	83 c4 10             	add    $0x10,%esp
f012a86f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a875:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a87b:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a880:	77 17                	ja     f012a899 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a882:	83 ec 04             	sub    $0x4,%esp
f012a885:	68 78 ac 13 f0       	push   $0xf013ac78
f012a88a:	68 32 0f 00 00       	push   $0xf32
f012a88f:	68 d2 99 13 f0       	push   $0xf01399d2
f012a894:	e8 17 59 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a899:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a89f:	89 c1                	mov    %eax,%ecx
f012a8a1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a8a8:	10 00 00 
f012a8ab:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a8b0:	0f b6 d0             	movzbl %al,%edx
f012a8b3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a8b9:	01 d0                	add    %edx,%eax
f012a8bb:	48                   	dec    %eax
f012a8bc:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a8c2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a8cd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a8d3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a8d9:	29 d0                	sub    %edx,%eax
f012a8db:	89 c3                	mov    %eax,%ebx
f012a8dd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a8e4:	10 00 00 
f012a8e7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a8ec:	0f b6 c0             	movzbl %al,%eax
f012a8ef:	c1 e0 04             	shl    $0x4,%eax
f012a8f2:	89 c2                	mov    %eax,%edx
f012a8f4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a8fa:	01 d0                	add    %edx,%eax
f012a8fc:	48                   	dec    %eax
f012a8fd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a903:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a909:	ba 00 00 00 00       	mov    $0x0,%edx
f012a90e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a914:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a91a:	29 d0                	sub    %edx,%eax
f012a91c:	01 d8                	add    %ebx,%eax
f012a91e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a923:	39 c1                	cmp    %eax,%ecx
f012a925:	74 17                	je     f012a93e <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a927:	83 ec 04             	sub    $0x4,%esp
f012a92a:	68 b4 ac 13 f0       	push   $0xf013acb4
f012a92f:	68 34 0f 00 00       	push   $0xf34
f012a934:	68 d2 99 13 f0       	push   $0xf01399d2
f012a939:	e8 72 58 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a93e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a941:	e8 80 20 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a946:	29 c3                	sub    %eax,%ebx
f012a948:	89 d8                	mov    %ebx,%eax
f012a94a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a94f:	74 17                	je     f012a968 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a951:	83 ec 04             	sub    $0x4,%esp
f012a954:	68 e6 ac 13 f0       	push   $0xf013ace6
f012a959:	68 36 0f 00 00       	push   $0xf36
f012a95e:	68 d2 99 13 f0       	push   $0xf01399d2
f012a963:	e8 48 58 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a968:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a96f:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a972:	e8 4f 20 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a977:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a97a:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a981:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a984:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a98a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a990:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a996:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a999:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a99b:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a9a1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9a7:	01 c2                	add    %eax,%edx
f012a9a9:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a9ac:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a9ae:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a9b4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a9ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a9c1:	eb 11                	jmp    f012a9d4 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a9c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a9c6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9cc:	01 d0                	add    %edx,%eax
f012a9ce:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a9d1:	ff 45 f4             	incl   -0xc(%ebp)
f012a9d4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a9dd:	7d e4                	jge    f012a9c3 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a9df:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a9e5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a9eb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a9f1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a9f7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a9fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa04:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa0a:	01 d0                	add    %edx,%eax
f012aa0c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012aa12:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aa18:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012aa1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012aa25:	eb 1b                	jmp    f012aa42 <test_krealloc+0x9da>
			intArr[i] = 4;
f012aa27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012aa2a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa31:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa37:	01 d0                	add    %edx,%eax
f012aa39:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012aa3f:	ff 45 f0             	incl   -0x10(%ebp)
f012aa42:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aa48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012aa4b:	7d da                	jge    f012aa27 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012aa4d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aa53:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012aa59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012aa60:	eb 17                	jmp    f012aa79 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012aa62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012aa65:	01 c0                	add    %eax,%eax
f012aa67:	89 c2                	mov    %eax,%edx
f012aa69:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aa6f:	01 d0                	add    %edx,%eax
f012aa71:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012aa76:	ff 45 ec             	incl   -0x14(%ebp)
f012aa79:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012aa7f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012aa82:	7d de                	jge    f012aa62 <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012aa84:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aa8a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012aa90:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aa96:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012aa9b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012aaa1:	01 c0                	add    %eax,%eax
f012aaa3:	89 c2                	mov    %eax,%edx
f012aaa5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aaab:	01 d0                	add    %edx,%eax
f012aaad:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012aab2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012aab8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012aabe:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012aac5:	eb 49                	jmp    f012ab10 <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012aac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012aaca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012aad1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aad7:	01 d0                	add    %edx,%eax
f012aad9:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012aadc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012aadf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012aae6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aaec:	01 d0                	add    %edx,%eax
f012aaee:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012aaf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012aaf7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012aafe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab04:	01 d0                	add    %edx,%eax
f012ab06:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ab0d:	ff 45 e8             	incl   -0x18(%ebp)
f012ab10:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ab16:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ab19:	7d ac                	jge    f012aac7 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ab1b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ab21:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012ab27:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab2d:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ab30:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab36:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ab3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab42:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ab49:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ab4f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab56:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab5c:	01 d0                	add    %edx,%eax
f012ab5e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ab61:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ab67:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab6e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab74:	01 d0                	add    %edx,%eax
f012ab76:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ab7c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ab82:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab89:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab8f:	01 d0                	add    %edx,%eax
f012ab91:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ab98:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ab9e:	8a 00                	mov    (%eax),%al
f012aba0:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012aba3:	75 17                	jne    f012abbc <test_krealloc+0xb54>
f012aba5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012abab:	89 c2                	mov    %eax,%edx
f012abad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012abb3:	01 d0                	add    %edx,%eax
f012abb5:	8a 00                	mov    (%eax),%al
f012abb7:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012abba:	74 17                	je     f012abd3 <test_krealloc+0xb6b>
			panic(
f012abbc:	83 ec 04             	sub    $0x4,%esp
f012abbf:	68 04 ad 13 f0       	push   $0xf013ad04
f012abc4:	68 79 0f 00 00       	push   $0xf79
f012abc9:	68 d2 99 13 f0       	push   $0xf01399d2
f012abce:	e8 dd 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012abd3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012abd9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012abdf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012abe5:	8a 00                	mov    (%eax),%al
f012abe7:	3c 02                	cmp    $0x2,%al
f012abe9:	75 16                	jne    f012ac01 <test_krealloc+0xb99>
f012abeb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012abf1:	89 c2                	mov    %eax,%edx
f012abf3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012abf9:	01 d0                	add    %edx,%eax
f012abfb:	8a 00                	mov    (%eax),%al
f012abfd:	3c 02                	cmp    $0x2,%al
f012abff:	74 20                	je     f012ac21 <test_krealloc+0xbb9>
			panic(
f012ac01:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ac07:	8a 00                	mov    (%eax),%al
f012ac09:	0f be c0             	movsbl %al,%eax
f012ac0c:	50                   	push   %eax
f012ac0d:	68 44 ad 13 f0       	push   $0xf013ad44
f012ac12:	68 7f 0f 00 00       	push   $0xf7f
f012ac17:	68 d2 99 13 f0       	push   $0xf01399d2
f012ac1c:	e8 8f 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ac21:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ac27:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ac2d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ac33:	8b 00                	mov    (%eax),%eax
f012ac35:	83 f8 03             	cmp    $0x3,%eax
f012ac38:	75 1c                	jne    f012ac56 <test_krealloc+0xbee>
f012ac3a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ac40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ac47:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ac4d:	01 d0                	add    %edx,%eax
f012ac4f:	8b 00                	mov    (%eax),%eax
f012ac51:	83 f8 03             	cmp    $0x3,%eax
f012ac54:	74 17                	je     f012ac6d <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012ac56:	83 ec 04             	sub    $0x4,%esp
f012ac59:	68 90 ad 13 f0       	push   $0xf013ad90
f012ac5e:	68 83 0f 00 00       	push   $0xf83
f012ac63:	68 d2 99 13 f0       	push   $0xf01399d2
f012ac68:	e8 43 55 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ac6d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ac73:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ac79:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ac7f:	8b 00                	mov    (%eax),%eax
f012ac81:	83 f8 04             	cmp    $0x4,%eax
f012ac84:	75 1c                	jne    f012aca2 <test_krealloc+0xc3a>
f012ac86:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ac8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ac93:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ac99:	01 d0                	add    %edx,%eax
f012ac9b:	8b 00                	mov    (%eax),%eax
f012ac9d:	83 f8 04             	cmp    $0x4,%eax
f012aca0:	74 17                	je     f012acb9 <test_krealloc+0xc51>
			panic(
f012aca2:	83 ec 04             	sub    $0x4,%esp
f012aca5:	68 04 ad 13 f0       	push   $0xf013ad04
f012acaa:	68 88 0f 00 00       	push   $0xf88
f012acaf:	68 d2 99 13 f0       	push   $0xf01399d2
f012acb4:	e8 f7 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012acb9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012acbf:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012acc5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012accb:	66 8b 00             	mov    (%eax),%ax
f012acce:	66 83 f8 05          	cmp    $0x5,%ax
f012acd2:	75 1b                	jne    f012acef <test_krealloc+0xc87>
f012acd4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012acda:	01 c0                	add    %eax,%eax
f012acdc:	89 c2                	mov    %eax,%edx
f012acde:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ace4:	01 d0                	add    %edx,%eax
f012ace6:	66 8b 00             	mov    (%eax),%ax
f012ace9:	66 83 f8 05          	cmp    $0x5,%ax
f012aced:	74 17                	je     f012ad06 <test_krealloc+0xc9e>
			panic(
f012acef:	83 ec 04             	sub    $0x4,%esp
f012acf2:	68 04 ad 13 f0       	push   $0xf013ad04
f012acf7:	68 8d 0f 00 00       	push   $0xf8d
f012acfc:	68 d2 99 13 f0       	push   $0xf01399d2
f012ad01:	e8 aa 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ad06:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ad0c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ad12:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ad18:	66 8b 00             	mov    (%eax),%ax
f012ad1b:	66 83 f8 06          	cmp    $0x6,%ax
f012ad1f:	75 1b                	jne    f012ad3c <test_krealloc+0xcd4>
f012ad21:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ad27:	01 c0                	add    %eax,%eax
f012ad29:	89 c2                	mov    %eax,%edx
f012ad2b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ad31:	01 d0                	add    %edx,%eax
f012ad33:	66 8b 00             	mov    (%eax),%ax
f012ad36:	66 83 f8 06          	cmp    $0x6,%ax
f012ad3a:	74 17                	je     f012ad53 <test_krealloc+0xceb>
			panic(
f012ad3c:	83 ec 04             	sub    $0x4,%esp
f012ad3f:	68 04 ad 13 f0       	push   $0xf013ad04
f012ad44:	68 92 0f 00 00       	push   $0xf92
f012ad49:	68 d2 99 13 f0       	push   $0xf01399d2
f012ad4e:	e8 5d 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ad53:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ad59:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ad5f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad65:	8a 00                	mov    (%eax),%al
f012ad67:	3c 07                	cmp    $0x7,%al
f012ad69:	75 1b                	jne    f012ad86 <test_krealloc+0xd1e>
f012ad6b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ad71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ad78:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad7e:	01 d0                	add    %edx,%eax
f012ad80:	8a 00                	mov    (%eax),%al
f012ad82:	3c 07                	cmp    $0x7,%al
f012ad84:	74 17                	je     f012ad9d <test_krealloc+0xd35>
			panic(
f012ad86:	83 ec 04             	sub    $0x4,%esp
f012ad89:	68 04 ad 13 f0       	push   $0xf013ad04
f012ad8e:	68 97 0f 00 00       	push   $0xf97
f012ad93:	68 d2 99 13 f0       	push   $0xf01399d2
f012ad98:	e8 13 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ad9d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ada3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ada7:	66 83 f8 07          	cmp    $0x7,%ax
f012adab:	75 1f                	jne    f012adcc <test_krealloc+0xd64>
f012adad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012adb3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012adba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012adc0:	01 d0                	add    %edx,%eax
f012adc2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012adc6:	66 83 f8 07          	cmp    $0x7,%ax
f012adca:	74 17                	je     f012ade3 <test_krealloc+0xd7b>
			panic(
f012adcc:	83 ec 04             	sub    $0x4,%esp
f012adcf:	68 04 ad 13 f0       	push   $0xf013ad04
f012add4:	68 9a 0f 00 00       	push   $0xf9a
f012add9:	68 d2 99 13 f0       	push   $0xf01399d2
f012adde:	e8 cd 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ade3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ade9:	8b 40 04             	mov    0x4(%eax),%eax
f012adec:	83 f8 07             	cmp    $0x7,%eax
f012adef:	75 1d                	jne    f012ae0e <test_krealloc+0xda6>
f012adf1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012adf7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012adfe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae04:	01 d0                	add    %edx,%eax
f012ae06:	8b 40 04             	mov    0x4(%eax),%eax
f012ae09:	83 f8 07             	cmp    $0x7,%eax
f012ae0c:	74 17                	je     f012ae25 <test_krealloc+0xdbd>
			panic(
f012ae0e:	83 ec 04             	sub    $0x4,%esp
f012ae11:	68 04 ad 13 f0       	push   $0xf013ad04
f012ae16:	68 9d 0f 00 00       	push   $0xf9d
f012ae1b:	68 d2 99 13 f0       	push   $0xf01399d2
f012ae20:	e8 8b 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012ae25:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ae2b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ae31:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae37:	8a 00                	mov    (%eax),%al
f012ae39:	3c 08                	cmp    $0x8,%al
f012ae3b:	75 1b                	jne    f012ae58 <test_krealloc+0xdf0>
f012ae3d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ae43:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ae4a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae50:	01 d0                	add    %edx,%eax
f012ae52:	8a 00                	mov    (%eax),%al
f012ae54:	3c 08                	cmp    $0x8,%al
f012ae56:	74 17                	je     f012ae6f <test_krealloc+0xe07>
			panic(
f012ae58:	83 ec 04             	sub    $0x4,%esp
f012ae5b:	68 04 ad 13 f0       	push   $0xf013ad04
f012ae60:	68 a2 0f 00 00       	push   $0xfa2
f012ae65:	68 d2 99 13 f0       	push   $0xf01399d2
f012ae6a:	e8 41 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ae6f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae75:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ae79:	66 83 f8 08          	cmp    $0x8,%ax
f012ae7d:	75 1f                	jne    f012ae9e <test_krealloc+0xe36>
f012ae7f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ae85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ae8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ae92:	01 d0                	add    %edx,%eax
f012ae94:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ae98:	66 83 f8 08          	cmp    $0x8,%ax
f012ae9c:	74 17                	je     f012aeb5 <test_krealloc+0xe4d>
			panic(
f012ae9e:	83 ec 04             	sub    $0x4,%esp
f012aea1:	68 04 ad 13 f0       	push   $0xf013ad04
f012aea6:	68 a5 0f 00 00       	push   $0xfa5
f012aeab:	68 d2 99 13 f0       	push   $0xf01399d2
f012aeb0:	e8 fb 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012aeb5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aebb:	8b 40 04             	mov    0x4(%eax),%eax
f012aebe:	83 f8 08             	cmp    $0x8,%eax
f012aec1:	75 1d                	jne    f012aee0 <test_krealloc+0xe78>
f012aec3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012aec9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012aed0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aed6:	01 d0                	add    %edx,%eax
f012aed8:	8b 40 04             	mov    0x4(%eax),%eax
f012aedb:	83 f8 08             	cmp    $0x8,%eax
f012aede:	74 17                	je     f012aef7 <test_krealloc+0xe8f>
			panic(
f012aee0:	83 ec 04             	sub    $0x4,%esp
f012aee3:	68 04 ad 13 f0       	push   $0xf013ad04
f012aee8:	68 a8 0f 00 00       	push   $0xfa8
f012aeed:	68 d2 99 13 f0       	push   $0xf01399d2
f012aef2:	e8 b9 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012aef7:	e8 ca 1a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012aefc:	89 c2                	mov    %eax,%edx
f012aefe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012af01:	39 c2                	cmp    %eax,%edx
f012af03:	74 17                	je     f012af1c <test_krealloc+0xeb4>
			panic(
f012af05:	83 ec 04             	sub    $0x4,%esp
f012af08:	68 c4 ad 13 f0       	push   $0xf013adc4
f012af0d:	68 ac 0f 00 00       	push   $0xfac
f012af12:	68 d2 99 13 f0       	push   $0xf01399d2
f012af17:	e8 94 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012af1c:	83 ec 0c             	sub    $0xc,%esp
f012af1f:	68 10 ae 13 f0       	push   $0xf013ae10
f012af24:	e8 08 5f fd ff       	call   f0100e31 <cprintf>
f012af29:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012af2c:	e8 95 1a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012af31:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012af34:	e8 4b 97 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012af39:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012af3f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012af45:	83 ec 08             	sub    $0x8,%esp
f012af48:	6a 00                	push   $0x0
f012af4a:	50                   	push   %eax
f012af4b:	e8 c5 d0 fd ff       	call   f0108015 <krealloc>
f012af50:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012af53:	e8 2c 97 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012af58:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012af5e:	74 17                	je     f012af77 <test_krealloc+0xf0f>
			panic(
f012af60:	83 ec 04             	sub    $0x4,%esp
f012af63:	68 34 ae 13 f0       	push   $0xf013ae34
f012af68:	68 b9 0f 00 00       	push   $0xfb9
f012af6d:	68 d2 99 13 f0       	push   $0xf01399d2
f012af72:	e8 39 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012af77:	e8 4a 1a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012af7c:	89 c2                	mov    %eax,%edx
f012af7e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012af81:	29 c2                	sub    %eax,%edx
f012af83:	89 d0                	mov    %edx,%eax
f012af85:	3d 00 01 00 00       	cmp    $0x100,%eax
f012af8a:	74 17                	je     f012afa3 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012af8c:	83 ec 04             	sub    $0x4,%esp
f012af8f:	68 a8 ae 13 f0       	push   $0xf013aea8
f012af94:	68 bb 0f 00 00       	push   $0xfbb
f012af99:	68 d2 99 13 f0       	push   $0xf01399d2
f012af9e:	e8 0d 52 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012afa3:	e8 1e 1a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012afa8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012afab:	e8 d4 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012afb0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012afb6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012afbc:	83 ec 08             	sub    $0x8,%esp
f012afbf:	6a 00                	push   $0x0
f012afc1:	50                   	push   %eax
f012afc2:	e8 4e d0 fd ff       	call   f0108015 <krealloc>
f012afc7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012afca:	e8 b5 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012afcf:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012afd5:	74 17                	je     f012afee <test_krealloc+0xf86>
			panic(
f012afd7:	83 ec 04             	sub    $0x4,%esp
f012afda:	68 34 ae 13 f0       	push   $0xf013ae34
f012afdf:	68 c4 0f 00 00       	push   $0xfc4
f012afe4:	68 d2 99 13 f0       	push   $0xf01399d2
f012afe9:	e8 c2 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012afee:	e8 d3 19 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012aff3:	89 c2                	mov    %eax,%edx
f012aff5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aff8:	29 c2                	sub    %eax,%edx
f012affa:	89 d0                	mov    %edx,%eax
f012affc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b001:	74 17                	je     f012b01a <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012b003:	83 ec 04             	sub    $0x4,%esp
f012b006:	68 a8 ae 13 f0       	push   $0xf013aea8
f012b00b:	68 c6 0f 00 00       	push   $0xfc6
f012b010:	68 d2 99 13 f0       	push   $0xf01399d2
f012b015:	e8 96 51 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012b01a:	e8 a7 19 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b01f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b022:	e8 5d 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b027:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012b02d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b033:	83 ec 08             	sub    $0x8,%esp
f012b036:	6a 00                	push   $0x0
f012b038:	50                   	push   %eax
f012b039:	e8 d7 cf fd ff       	call   f0108015 <krealloc>
f012b03e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b041:	e8 3e 96 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b046:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b04c:	74 17                	je     f012b065 <test_krealloc+0xffd>
			panic(
f012b04e:	83 ec 04             	sub    $0x4,%esp
f012b051:	68 ec 99 13 f0       	push   $0xf01399ec
f012b056:	68 ce 0f 00 00       	push   $0xfce
f012b05b:	68 d2 99 13 f0       	push   $0xf01399d2
f012b060:	e8 4b 51 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012b065:	e8 5c 19 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b06a:	89 c2                	mov    %eax,%edx
f012b06c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b06f:	29 c2                	sub    %eax,%edx
f012b071:	89 d0                	mov    %edx,%eax
f012b073:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b078:	74 17                	je     f012b091 <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012b07a:	83 ec 04             	sub    $0x4,%esp
f012b07d:	68 a8 ae 13 f0       	push   $0xf013aea8
f012b082:	68 d0 0f 00 00       	push   $0xfd0
f012b087:	68 d2 99 13 f0       	push   $0xf01399d2
f012b08c:	e8 1f 51 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012b091:	e8 30 19 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b096:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b099:	e8 e6 95 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b09e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012b0a4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b0aa:	83 ec 08             	sub    $0x8,%esp
f012b0ad:	6a 00                	push   $0x0
f012b0af:	50                   	push   %eax
f012b0b0:	e8 60 cf fd ff       	call   f0108015 <krealloc>
f012b0b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b0b8:	e8 c7 95 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b0bd:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b0c3:	74 17                	je     f012b0dc <test_krealloc+0x1074>
			panic(
f012b0c5:	83 ec 04             	sub    $0x4,%esp
f012b0c8:	68 34 ae 13 f0       	push   $0xf013ae34
f012b0cd:	68 d8 0f 00 00       	push   $0xfd8
f012b0d2:	68 d2 99 13 f0       	push   $0xf01399d2
f012b0d7:	e8 d4 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012b0dc:	e8 e5 18 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b0e1:	89 c2                	mov    %eax,%edx
f012b0e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b0e6:	29 c2                	sub    %eax,%edx
f012b0e8:	89 d0                	mov    %edx,%eax
f012b0ea:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b0ef:	74 17                	je     f012b108 <test_krealloc+0x10a0>
			panic(
f012b0f1:	83 ec 04             	sub    $0x4,%esp
f012b0f4:	68 dc ae 13 f0       	push   $0xf013aedc
f012b0f9:	68 db 0f 00 00       	push   $0xfdb
f012b0fe:	68 d2 99 13 f0       	push   $0xf01399d2
f012b103:	e8 a8 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b108:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012b10f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012b116:	eb 48                	jmp    f012b160 <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012b118:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012b11b:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012b120:	83 ec 04             	sub    $0x4,%esp
f012b123:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012b129:	51                   	push   %ecx
f012b12a:	52                   	push   %edx
f012b12b:	50                   	push   %eax
f012b12c:	e8 b6 c3 fd ff       	call   f01074e7 <get_page_table>
f012b131:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012b134:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012b13a:	85 c0                	test   %eax,%eax
f012b13c:	75 17                	jne    f012b155 <test_krealloc+0x10ed>
					panic(
f012b13e:	83 ec 04             	sub    $0x4,%esp
f012b141:	68 d4 a2 13 f0       	push   $0xf013a2d4
f012b146:	68 e7 0f 00 00       	push   $0xfe7
f012b14b:	68 d2 99 13 f0       	push   $0xf01399d2
f012b150:	e8 5b 50 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b155:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012b15c:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012b160:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012b164:	78 b2                	js     f012b118 <test_krealloc+0x10b0>
f012b166:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012b16a:	7f 09                	jg     f012b175 <test_krealloc+0x110d>
f012b16c:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012b173:	76 a3                	jbe    f012b118 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012b175:	83 ec 0c             	sub    $0xc,%esp
f012b178:	68 1b af 13 f0       	push   $0xf013af1b
f012b17d:	e8 af 5c fd ff       	call   f0100e31 <cprintf>
f012b182:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012b185:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b18b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b191:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b198:	eb 21                	jmp    f012b1bb <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012b19a:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b1a0:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012b1a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b1a9:	01 c8                	add    %ecx,%eax
f012b1ab:	8a 00                	mov    (%eax),%al
f012b1ad:	0f be c0             	movsbl %al,%eax
f012b1b0:	01 d0                	add    %edx,%eax
f012b1b2:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b1b8:	ff 45 dc             	incl   -0x24(%ebp)
f012b1bb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b1c1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b1c4:	7d d4                	jge    f012b19a <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b1c6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b1cc:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b1d2:	42                   	inc    %edx
f012b1d3:	01 d2                	add    %edx,%edx
f012b1d5:	39 d0                	cmp    %edx,%eax
f012b1d7:	74 17                	je     f012b1f0 <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012b1d9:	83 ec 04             	sub    $0x4,%esp
f012b1dc:	68 24 af 13 f0       	push   $0xf013af24
f012b1e1:	68 f9 0f 00 00       	push   $0xff9
f012b1e6:	68 d2 99 13 f0       	push   $0xf01399d2
f012b1eb:	e8 c0 4f fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012b1f0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b1f6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b1fc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b203:	eb 25                	jmp    f012b22a <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012b205:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b20b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b20e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012b215:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b21b:	01 c8                	add    %ecx,%eax
f012b21d:	8b 00                	mov    (%eax),%eax
f012b21f:	01 d0                	add    %edx,%eax
f012b221:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b227:	ff 45 dc             	incl   -0x24(%ebp)
f012b22a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b230:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b233:	7d d0                	jge    f012b205 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012b235:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b23b:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012b241:	42                   	inc    %edx
f012b242:	c1 e2 02             	shl    $0x2,%edx
f012b245:	39 d0                	cmp    %edx,%eax
f012b247:	74 17                	je     f012b260 <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012b249:	83 ec 04             	sub    $0x4,%esp
f012b24c:	68 24 af 13 f0       	push   $0xf013af24
f012b251:	68 03 10 00 00       	push   $0x1003
f012b256:	68 d2 99 13 f0       	push   $0xf01399d2
f012b25b:	e8 50 4f fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b260:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b266:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b26c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b273:	eb 24                	jmp    f012b299 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b275:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b27b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b27e:	01 c0                	add    %eax,%eax
f012b280:	89 c1                	mov    %eax,%ecx
f012b282:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b288:	01 c8                	add    %ecx,%eax
f012b28a:	66 8b 00             	mov    (%eax),%ax
f012b28d:	98                   	cwtl   
f012b28e:	01 d0                	add    %edx,%eax
f012b290:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b296:	ff 45 dc             	incl   -0x24(%ebp)
f012b299:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b29f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b2a2:	7d d1                	jge    f012b275 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b2a4:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b2aa:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b2b0:	8d 48 01             	lea    0x1(%eax),%ecx
f012b2b3:	89 c8                	mov    %ecx,%eax
f012b2b5:	c1 e0 02             	shl    $0x2,%eax
f012b2b8:	01 c8                	add    %ecx,%eax
f012b2ba:	39 c2                	cmp    %eax,%edx
f012b2bc:	74 17                	je     f012b2d5 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b2be:	83 ec 04             	sub    $0x4,%esp
f012b2c1:	68 24 af 13 f0       	push   $0xf013af24
f012b2c6:	68 0d 10 00 00       	push   $0x100d
f012b2cb:	68 d2 99 13 f0       	push   $0xf01399d2
f012b2d0:	e8 db 4e fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b2d5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b2db:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b2e1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b2e8:	eb 70                	jmp    f012b35a <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b2ea:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b2f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b2f3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b2fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b300:	01 c8                	add    %ecx,%eax
f012b302:	8a 00                	mov    (%eax),%al
f012b304:	0f be c0             	movsbl %al,%eax
f012b307:	01 d0                	add    %edx,%eax
f012b309:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b30f:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b315:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b318:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b31f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b325:	01 c8                	add    %ecx,%eax
f012b327:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b32b:	98                   	cwtl   
f012b32c:	01 d0                	add    %edx,%eax
f012b32e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b334:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b33a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b33d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b344:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b34a:	01 c8                	add    %ecx,%eax
f012b34c:	8b 40 04             	mov    0x4(%eax),%eax
f012b34f:	01 d0                	add    %edx,%eax
f012b351:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b357:	ff 45 dc             	incl   -0x24(%ebp)
f012b35a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b360:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b363:	7d 85                	jge    f012b2ea <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b365:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b36b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b371:	8d 50 01             	lea    0x1(%eax),%edx
f012b374:	89 d0                	mov    %edx,%eax
f012b376:	01 c0                	add    %eax,%eax
f012b378:	01 d0                	add    %edx,%eax
f012b37a:	01 c0                	add    %eax,%eax
f012b37c:	01 d0                	add    %edx,%eax
f012b37e:	39 c1                	cmp    %eax,%ecx
f012b380:	75 3a                	jne    f012b3bc <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b382:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b388:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b38e:	8d 50 01             	lea    0x1(%eax),%edx
f012b391:	89 d0                	mov    %edx,%eax
f012b393:	01 c0                	add    %eax,%eax
f012b395:	01 d0                	add    %edx,%eax
f012b397:	01 c0                	add    %eax,%eax
f012b399:	01 d0                	add    %edx,%eax
f012b39b:	39 c1                	cmp    %eax,%ecx
f012b39d:	75 1d                	jne    f012b3bc <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b39f:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b3a5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b3ab:	8d 50 01             	lea    0x1(%eax),%edx
f012b3ae:	89 d0                	mov    %edx,%eax
f012b3b0:	01 c0                	add    %eax,%eax
f012b3b2:	01 d0                	add    %edx,%eax
f012b3b4:	01 c0                	add    %eax,%eax
f012b3b6:	01 d0                	add    %edx,%eax
f012b3b8:	39 c1                	cmp    %eax,%ecx
f012b3ba:	74 17                	je     f012b3d3 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b3bc:	83 ec 04             	sub    $0x4,%esp
f012b3bf:	68 24 af 13 f0       	push   $0xf013af24
f012b3c4:	68 1b 10 00 00       	push   $0x101b
f012b3c9:	68 d2 99 13 f0       	push   $0xf01399d2
f012b3ce:	e8 dd 4d fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b3d3:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b3da:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b3dd:	e8 e4 15 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b3e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b3e5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b3eb:	83 ec 08             	sub    $0x8,%esp
f012b3ee:	68 00 3c 00 00       	push   $0x3c00
f012b3f3:	50                   	push   %eax
f012b3f4:	e8 1c cc fd ff       	call   f0108015 <krealloc>
f012b3f9:	83 c4 10             	add    $0x10,%esp
f012b3fc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b402:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b408:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b40d:	77 17                	ja     f012b426 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b40f:	83 ec 04             	sub    $0x4,%esp
f012b412:	68 78 ac 13 f0       	push   $0xf013ac78
f012b417:	68 27 10 00 00       	push   $0x1027
f012b41c:	68 d2 99 13 f0       	push   $0xf01399d2
f012b421:	e8 8a 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b426:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b42c:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b432:	74 17                	je     f012b44b <test_krealloc+0x13e3>
			panic(
f012b434:	83 ec 04             	sub    $0x4,%esp
f012b437:	68 5c af 13 f0       	push   $0xf013af5c
f012b43c:	68 2a 10 00 00       	push   $0x102a
f012b441:	68 d2 99 13 f0       	push   $0xf01399d2
f012b446:	e8 65 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b44b:	e8 76 15 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b450:	89 c2                	mov    %eax,%edx
f012b452:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b455:	39 c2                	cmp    %eax,%edx
f012b457:	74 17                	je     f012b470 <test_krealloc+0x1408>
			panic(
f012b459:	83 ec 04             	sub    $0x4,%esp
f012b45c:	68 c8 af 13 f0       	push   $0xf013afc8
f012b461:	68 2d 10 00 00       	push   $0x102d
f012b466:	68 d2 99 13 f0       	push   $0xf01399d2
f012b46b:	e8 40 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b470:	e8 51 15 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b475:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b478:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b47e:	83 ec 08             	sub    $0x8,%esp
f012b481:	68 00 fc 0f 00       	push   $0xffc00
f012b486:	50                   	push   %eax
f012b487:	e8 89 cb fd ff       	call   f0108015 <krealloc>
f012b48c:	83 c4 10             	add    $0x10,%esp
f012b48f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b495:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b49b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b4a0:	77 17                	ja     f012b4b9 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b4a2:	83 ec 04             	sub    $0x4,%esp
f012b4a5:	68 78 ac 13 f0       	push   $0xf013ac78
f012b4aa:	68 33 10 00 00       	push   $0x1033
f012b4af:	68 d2 99 13 f0       	push   $0xf01399d2
f012b4b4:	e8 f7 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b4b9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b4bf:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b4c5:	74 17                	je     f012b4de <test_krealloc+0x1476>
			panic(
f012b4c7:	83 ec 04             	sub    $0x4,%esp
f012b4ca:	68 5c af 13 f0       	push   $0xf013af5c
f012b4cf:	68 36 10 00 00       	push   $0x1036
f012b4d4:	68 d2 99 13 f0       	push   $0xf01399d2
f012b4d9:	e8 d2 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b4de:	e8 e3 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b4e3:	89 c2                	mov    %eax,%edx
f012b4e5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b4e8:	39 c2                	cmp    %eax,%edx
f012b4ea:	74 17                	je     f012b503 <test_krealloc+0x149b>
			panic(
f012b4ec:	83 ec 04             	sub    $0x4,%esp
f012b4ef:	68 c8 af 13 f0       	push   $0xf013afc8
f012b4f4:	68 39 10 00 00       	push   $0x1039
f012b4f9:	68 d2 99 13 f0       	push   $0xf01399d2
f012b4fe:	e8 ad 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b503:	e8 be 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b508:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b50b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b511:	83 ec 08             	sub    $0x8,%esp
f012b514:	68 00 fc 0f 00       	push   $0xffc00
f012b519:	50                   	push   %eax
f012b51a:	e8 f6 ca fd ff       	call   f0108015 <krealloc>
f012b51f:	83 c4 10             	add    $0x10,%esp
f012b522:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b528:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b52e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b533:	77 17                	ja     f012b54c <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b535:	83 ec 04             	sub    $0x4,%esp
f012b538:	68 78 ac 13 f0       	push   $0xf013ac78
f012b53d:	68 3f 10 00 00       	push   $0x103f
f012b542:	68 d2 99 13 f0       	push   $0xf01399d2
f012b547:	e8 64 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b54c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b552:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b558:	74 17                	je     f012b571 <test_krealloc+0x1509>
			panic(
f012b55a:	83 ec 04             	sub    $0x4,%esp
f012b55d:	68 5c af 13 f0       	push   $0xf013af5c
f012b562:	68 42 10 00 00       	push   $0x1042
f012b567:	68 d2 99 13 f0       	push   $0xf01399d2
f012b56c:	e8 3f 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b571:	e8 50 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b576:	89 c2                	mov    %eax,%edx
f012b578:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b57b:	39 c2                	cmp    %eax,%edx
f012b57d:	74 17                	je     f012b596 <test_krealloc+0x152e>
			panic(
f012b57f:	83 ec 04             	sub    $0x4,%esp
f012b582:	68 c8 af 13 f0       	push   $0xf013afc8
f012b587:	68 45 10 00 00       	push   $0x1045
f012b58c:	68 d2 99 13 f0       	push   $0xf01399d2
f012b591:	e8 1a 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b596:	e8 2b 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b59b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b59e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b5a4:	83 ec 08             	sub    $0x8,%esp
f012b5a7:	68 00 fc 0f 00       	push   $0xffc00
f012b5ac:	50                   	push   %eax
f012b5ad:	e8 63 ca fd ff       	call   f0108015 <krealloc>
f012b5b2:	83 c4 10             	add    $0x10,%esp
f012b5b5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b5bb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b5c1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b5c6:	77 17                	ja     f012b5df <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b5c8:	83 ec 04             	sub    $0x4,%esp
f012b5cb:	68 78 ac 13 f0       	push   $0xf013ac78
f012b5d0:	68 4d 10 00 00       	push   $0x104d
f012b5d5:	68 d2 99 13 f0       	push   $0xf01399d2
f012b5da:	e8 d1 4b fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b5df:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b5e5:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b5eb:	74 17                	je     f012b604 <test_krealloc+0x159c>
			panic(
f012b5ed:	83 ec 04             	sub    $0x4,%esp
f012b5f0:	68 0c b0 13 f0       	push   $0xf013b00c
f012b5f5:	68 50 10 00 00       	push   $0x1050
f012b5fa:	68 d2 99 13 f0       	push   $0xf01399d2
f012b5ff:	e8 ac 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b604:	e8 bd 13 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b609:	89 c2                	mov    %eax,%edx
f012b60b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b60e:	39 c2                	cmp    %eax,%edx
f012b610:	74 17                	je     f012b629 <test_krealloc+0x15c1>
			panic(
f012b612:	83 ec 04             	sub    $0x4,%esp
f012b615:	68 c8 af 13 f0       	push   $0xf013afc8
f012b61a:	68 53 10 00 00       	push   $0x1053
f012b61f:	68 d2 99 13 f0       	push   $0xf01399d2
f012b624:	e8 87 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b629:	83 ec 0c             	sub    $0xc,%esp
f012b62c:	68 eb a1 13 f0       	push   $0xf013a1eb
f012b631:	e8 fb 57 fd ff       	call   f0100e31 <cprintf>
f012b636:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b639:	e8 88 13 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b63e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b641:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b647:	83 ec 08             	sub    $0x8,%esp
f012b64a:	68 00 18 10 00       	push   $0x101800
f012b64f:	50                   	push   %eax
f012b650:	e8 c0 c9 fd ff       	call   f0108015 <krealloc>
f012b655:	83 c4 10             	add    $0x10,%esp
f012b658:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b65b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b65e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b663:	77 17                	ja     f012b67c <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b665:	83 ec 04             	sub    $0x4,%esp
f012b668:	68 78 ac 13 f0       	push   $0xf013ac78
f012b66d:	68 5c 10 00 00       	push   $0x105c
f012b672:	68 d2 99 13 f0       	push   $0xf01399d2
f012b677:	e8 34 4b fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b67c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b682:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b685:	74 17                	je     f012b69e <test_krealloc+0x1636>
			panic(
f012b687:	83 ec 04             	sub    $0x4,%esp
f012b68a:	68 6c b0 13 f0       	push   $0xf013b06c
f012b68f:	68 5f 10 00 00       	push   $0x105f
f012b694:	68 d2 99 13 f0       	push   $0xf01399d2
f012b699:	e8 12 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b69e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6a1:	e8 20 13 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b6a6:	29 c3                	sub    %eax,%ebx
f012b6a8:	89 d8                	mov    %ebx,%eax
f012b6aa:	83 f8 02             	cmp    $0x2,%eax
f012b6ad:	74 17                	je     f012b6c6 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b6af:	83 ec 04             	sub    $0x4,%esp
f012b6b2:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012b6b7:	68 61 10 00 00       	push   $0x1061
f012b6bc:	68 d2 99 13 f0       	push   $0xf01399d2
f012b6c1:	e8 ea 4a fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b6c6:	e8 fb 12 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b6cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b6ce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b6d4:	83 ec 08             	sub    $0x8,%esp
f012b6d7:	68 00 fc 3f 00       	push   $0x3ffc00
f012b6dc:	50                   	push   %eax
f012b6dd:	e8 33 c9 fd ff       	call   f0108015 <krealloc>
f012b6e2:	83 c4 10             	add    $0x10,%esp
f012b6e5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b6e8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b6eb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b6f0:	77 17                	ja     f012b709 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b6f2:	83 ec 04             	sub    $0x4,%esp
f012b6f5:	68 78 ac 13 f0       	push   $0xf013ac78
f012b6fa:	68 67 10 00 00       	push   $0x1067
f012b6ff:	68 d2 99 13 f0       	push   $0xf01399d2
f012b704:	e8 a7 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b709:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b70f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b712:	74 17                	je     f012b72b <test_krealloc+0x16c3>
			panic(
f012b714:	83 ec 04             	sub    $0x4,%esp
f012b717:	68 6c b0 13 f0       	push   $0xf013b06c
f012b71c:	68 6a 10 00 00       	push   $0x106a
f012b721:	68 d2 99 13 f0       	push   $0xf01399d2
f012b726:	e8 85 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b72b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b72e:	e8 93 12 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b733:	29 c3                	sub    %eax,%ebx
f012b735:	89 d8                	mov    %ebx,%eax
f012b737:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b73c:	74 17                	je     f012b755 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b73e:	83 ec 04             	sub    $0x4,%esp
f012b741:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012b746:	68 6d 10 00 00       	push   $0x106d
f012b74b:	68 d2 99 13 f0       	push   $0xf01399d2
f012b750:	e8 5b 4a fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b755:	83 ec 0c             	sub    $0xc,%esp
f012b758:	68 30 a2 13 f0       	push   $0xf013a230
f012b75d:	e8 cf 56 fd ff       	call   f0100e31 <cprintf>
f012b762:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b765:	e8 5c 12 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b76a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b76d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b773:	83 ec 08             	sub    $0x8,%esp
f012b776:	68 00 fc 9f 00       	push   $0x9ffc00
f012b77b:	50                   	push   %eax
f012b77c:	e8 94 c8 fd ff       	call   f0108015 <krealloc>
f012b781:	83 c4 10             	add    $0x10,%esp
f012b784:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b787:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b78a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b78f:	77 17                	ja     f012b7a8 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b791:	83 ec 04             	sub    $0x4,%esp
f012b794:	68 78 ac 13 f0       	push   $0xf013ac78
f012b799:	68 78 10 00 00       	push   $0x1078
f012b79e:	68 d2 99 13 f0       	push   $0xf01399d2
f012b7a3:	e8 08 4a fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b7a8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b7af:	10 00 00 
f012b7b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b7b7:	0f b6 d0             	movzbl %al,%edx
f012b7ba:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b7c0:	01 d0                	add    %edx,%eax
f012b7c2:	48                   	dec    %eax
f012b7c3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b7c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b7cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7d4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b7da:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b7e0:	29 d0                	sub    %edx,%eax
f012b7e2:	89 c1                	mov    %eax,%ecx
f012b7e4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b7eb:	10 00 00 
f012b7ee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b7f3:	0f b6 c0             	movzbl %al,%eax
f012b7f6:	c1 e0 04             	shl    $0x4,%eax
f012b7f9:	89 c2                	mov    %eax,%edx
f012b7fb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b801:	01 d0                	add    %edx,%eax
f012b803:	48                   	dec    %eax
f012b804:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b80a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b810:	ba 00 00 00 00       	mov    $0x0,%edx
f012b815:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b81b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b821:	29 d0                	sub    %edx,%eax
f012b823:	01 c8                	add    %ecx,%eax
f012b825:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b82b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b82e:	39 c2                	cmp    %eax,%edx
f012b830:	74 18                	je     f012b84a <test_krealloc+0x17e2>
			panic(
f012b832:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b835:	50                   	push   %eax
f012b836:	68 1c b1 13 f0       	push   $0xf013b11c
f012b83b:	68 7c 10 00 00       	push   $0x107c
f012b840:	68 d2 99 13 f0       	push   $0xf01399d2
f012b845:	e8 66 49 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b84a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b850:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b853:	75 17                	jne    f012b86c <test_krealloc+0x1804>
			panic(
f012b855:	83 ec 04             	sub    $0x4,%esp
f012b858:	68 60 b1 13 f0       	push   $0xf013b160
f012b85d:	68 7f 10 00 00       	push   $0x107f
f012b862:	68 d2 99 13 f0       	push   $0xf01399d2
f012b867:	e8 44 49 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b86c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b86f:	e8 52 11 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b874:	29 c3                	sub    %eax,%ebx
f012b876:	89 d8                	mov    %ebx,%eax
f012b878:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b87d:	74 17                	je     f012b896 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b87f:	83 ec 04             	sub    $0x4,%esp
f012b882:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012b887:	68 82 10 00 00       	push   $0x1082
f012b88c:	68 d2 99 13 f0       	push   $0xf01399d2
f012b891:	e8 1a 49 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b896:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b899:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b89f:	e8 22 11 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b8a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b8a7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b8ad:	83 ec 08             	sub    $0x8,%esp
f012b8b0:	68 00 fc 5f 00       	push   $0x5ffc00
f012b8b5:	50                   	push   %eax
f012b8b6:	e8 5a c7 fd ff       	call   f0108015 <krealloc>
f012b8bb:	83 c4 10             	add    $0x10,%esp
f012b8be:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b8c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b8c4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b8c9:	77 17                	ja     f012b8e2 <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b8cb:	83 ec 04             	sub    $0x4,%esp
f012b8ce:	68 78 ac 13 f0       	push   $0xf013ac78
f012b8d3:	68 8b 10 00 00       	push   $0x108b
f012b8d8:	68 d2 99 13 f0       	push   $0xf01399d2
f012b8dd:	e8 ce 48 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b8e2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b8e8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b8eb:	74 17                	je     f012b904 <test_krealloc+0x189c>
			panic(
f012b8ed:	83 ec 04             	sub    $0x4,%esp
f012b8f0:	68 6c b0 13 f0       	push   $0xf013b06c
f012b8f5:	68 8e 10 00 00       	push   $0x108e
f012b8fa:	68 d2 99 13 f0       	push   $0xf01399d2
f012b8ff:	e8 ac 48 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b904:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b907:	e8 ba 10 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b90c:	29 c3                	sub    %eax,%ebx
f012b90e:	89 d8                	mov    %ebx,%eax
f012b910:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b915:	74 17                	je     f012b92e <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b917:	83 ec 04             	sub    $0x4,%esp
f012b91a:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012b91f:	68 91 10 00 00       	push   $0x1091
f012b924:	68 d2 99 13 f0       	push   $0xf01399d2
f012b929:	e8 82 48 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b92e:	e8 93 10 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b933:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b936:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b93c:	83 ec 08             	sub    $0x8,%esp
f012b93f:	68 00 fc 3f 01       	push   $0x13ffc00
f012b944:	50                   	push   %eax
f012b945:	e8 cb c6 fd ff       	call   f0108015 <krealloc>
f012b94a:	83 c4 10             	add    $0x10,%esp
f012b94d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b950:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b953:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b958:	77 17                	ja     f012b971 <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b95a:	83 ec 04             	sub    $0x4,%esp
f012b95d:	68 78 ac 13 f0       	push   $0xf013ac78
f012b962:	68 98 10 00 00       	push   $0x1098
f012b967:	68 d2 99 13 f0       	push   $0xf01399d2
f012b96c:	e8 3f 48 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b971:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b977:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b97a:	75 17                	jne    f012b993 <test_krealloc+0x192b>
			panic(
f012b97c:	83 ec 04             	sub    $0x4,%esp
f012b97f:	68 60 b1 13 f0       	push   $0xf013b160
f012b984:	68 9b 10 00 00       	push   $0x109b
f012b989:	68 d2 99 13 f0       	push   $0xf01399d2
f012b98e:	e8 1d 48 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b993:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b99a:	10 00 00 
f012b99d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b9a2:	0f b6 d0             	movzbl %al,%edx
f012b9a5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b9ab:	01 d0                	add    %edx,%eax
f012b9ad:	48                   	dec    %eax
f012b9ae:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b9b4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b9ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9bf:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b9c5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b9cb:	29 d0                	sub    %edx,%eax
f012b9cd:	89 c1                	mov    %eax,%ecx
f012b9cf:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b9d6:	10 00 00 
f012b9d9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b9de:	0f b6 c0             	movzbl %al,%eax
f012b9e1:	c1 e0 04             	shl    $0x4,%eax
f012b9e4:	89 c2                	mov    %eax,%edx
f012b9e6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b9ec:	01 d0                	add    %edx,%eax
f012b9ee:	48                   	dec    %eax
f012b9ef:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b9f5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b9fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba00:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ba06:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ba0c:	29 d0                	sub    %edx,%eax
f012ba0e:	01 c8                	add    %ecx,%eax
f012ba10:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012ba16:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ba19:	39 c2                	cmp    %eax,%edx
f012ba1b:	74 17                	je     f012ba34 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012ba1d:	83 ec 04             	sub    $0x4,%esp
f012ba20:	68 e4 b1 13 f0       	push   $0xf013b1e4
f012ba25:	68 9d 10 00 00       	push   $0x109d
f012ba2a:	68 d2 99 13 f0       	push   $0xf01399d2
f012ba2f:	e8 7c 47 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012ba34:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ba37:	e8 8a 0f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ba3c:	29 c3                	sub    %eax,%ebx
f012ba3e:	89 d8                	mov    %ebx,%eax
f012ba40:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012ba45:	74 17                	je     f012ba5e <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012ba47:	83 ec 04             	sub    $0x4,%esp
f012ba4a:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012ba4f:	68 a0 10 00 00       	push   $0x10a0
f012ba54:	68 d2 99 13 f0       	push   $0xf01399d2
f012ba59:	e8 52 47 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012ba5e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ba61:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ba67:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ba6d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012ba73:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012ba7a:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ba7d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ba84:	eb 21                	jmp    f012baa7 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012ba86:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba8c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012ba8f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ba95:	01 c8                	add    %ecx,%eax
f012ba97:	8a 00                	mov    (%eax),%al
f012ba99:	0f be c0             	movsbl %al,%eax
f012ba9c:	01 d0                	add    %edx,%eax
f012ba9e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012baa4:	ff 45 d8             	incl   -0x28(%ebp)
f012baa7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012baad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bab0:	7d d4                	jge    f012ba86 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012bab2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012bab8:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012babe:	42                   	inc    %edx
f012babf:	01 d2                	add    %edx,%edx
f012bac1:	39 d0                	cmp    %edx,%eax
f012bac3:	74 17                	je     f012badc <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012bac5:	83 ec 04             	sub    $0x4,%esp
f012bac8:	68 18 b2 13 f0       	push   $0xf013b218
f012bacd:	68 ae 10 00 00       	push   $0x10ae
f012bad2:	68 d2 99 13 f0       	push   $0xf01399d2
f012bad7:	e8 d4 46 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012badc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bae2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012bae8:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012baef:	00 00 00 
		sums[1] = 0;
f012baf2:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012baf9:	00 00 00 
		sums[2] = 0;
f012bafc:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012bb03:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012bb06:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012bb0d:	eb 70                	jmp    f012bb7f <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012bb0f:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bb15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bb18:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bb1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bb25:	01 c8                	add    %ecx,%eax
f012bb27:	8a 00                	mov    (%eax),%al
f012bb29:	0f be c0             	movsbl %al,%eax
f012bb2c:	01 d0                	add    %edx,%eax
f012bb2e:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012bb34:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012bb3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bb3d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bb44:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bb4a:	01 c8                	add    %ecx,%eax
f012bb4c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bb50:	98                   	cwtl   
f012bb51:	01 d0                	add    %edx,%eax
f012bb53:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012bb59:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012bb5f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bb62:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bb69:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bb6f:	01 c8                	add    %ecx,%eax
f012bb71:	8b 40 04             	mov    0x4(%eax),%eax
f012bb74:	01 d0                	add    %edx,%eax
f012bb76:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012bb7c:	ff 45 d8             	incl   -0x28(%ebp)
f012bb7f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bb85:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bb88:	7d 85                	jge    f012bb0f <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012bb8a:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012bb90:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bb96:	8d 50 01             	lea    0x1(%eax),%edx
f012bb99:	89 d0                	mov    %edx,%eax
f012bb9b:	01 c0                	add    %eax,%eax
f012bb9d:	01 d0                	add    %edx,%eax
f012bb9f:	01 c0                	add    %eax,%eax
f012bba1:	01 d0                	add    %edx,%eax
f012bba3:	39 c1                	cmp    %eax,%ecx
f012bba5:	75 3a                	jne    f012bbe1 <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012bba7:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012bbad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bbb3:	8d 50 01             	lea    0x1(%eax),%edx
f012bbb6:	89 d0                	mov    %edx,%eax
f012bbb8:	01 c0                	add    %eax,%eax
f012bbba:	01 d0                	add    %edx,%eax
f012bbbc:	01 c0                	add    %eax,%eax
f012bbbe:	01 d0                	add    %edx,%eax
f012bbc0:	39 c1                	cmp    %eax,%ecx
f012bbc2:	75 1d                	jne    f012bbe1 <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012bbc4:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012bbca:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bbd0:	8d 50 01             	lea    0x1(%eax),%edx
f012bbd3:	89 d0                	mov    %edx,%eax
f012bbd5:	01 c0                	add    %eax,%eax
f012bbd7:	01 d0                	add    %edx,%eax
f012bbd9:	01 c0                	add    %eax,%eax
f012bbdb:	01 d0                	add    %edx,%eax
f012bbdd:	39 c1                	cmp    %eax,%ecx
f012bbdf:	74 17                	je     f012bbf8 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012bbe1:	83 ec 04             	sub    $0x4,%esp
f012bbe4:	68 18 b2 13 f0       	push   $0xf013b218
f012bbe9:	68 c0 10 00 00       	push   $0x10c0
f012bbee:	68 d2 99 13 f0       	push   $0xf01399d2
f012bbf3:	e8 b8 45 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012bbf8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bbfe:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012bc04:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012bc0b:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012bc0e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012bc15:	eb 24                	jmp    f012bc3b <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012bc17:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bc1d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bc20:	01 c0                	add    %eax,%eax
f012bc22:	89 c1                	mov    %eax,%ecx
f012bc24:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012bc2a:	01 c8                	add    %ecx,%eax
f012bc2c:	66 8b 00             	mov    (%eax),%ax
f012bc2f:	98                   	cwtl   
f012bc30:	01 d0                	add    %edx,%eax
f012bc32:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012bc38:	ff 45 d8             	incl   -0x28(%ebp)
f012bc3b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bc41:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bc44:	7d d1                	jge    f012bc17 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012bc46:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bc4c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bc52:	8d 48 01             	lea    0x1(%eax),%ecx
f012bc55:	89 c8                	mov    %ecx,%eax
f012bc57:	c1 e0 02             	shl    $0x2,%eax
f012bc5a:	01 c8                	add    %ecx,%eax
f012bc5c:	39 c2                	cmp    %eax,%edx
f012bc5e:	74 17                	je     f012bc77 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012bc60:	83 ec 04             	sub    $0x4,%esp
f012bc63:	68 18 b2 13 f0       	push   $0xf013b218
f012bc68:	68 ca 10 00 00       	push   $0x10ca
f012bc6d:	68 d2 99 13 f0       	push   $0xf01399d2
f012bc72:	e8 39 45 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012bc77:	e8 4a 0d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bc7c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bc7f:	e8 00 8a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bc84:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012bc8a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bc90:	83 ec 08             	sub    $0x8,%esp
f012bc93:	6a 00                	push   $0x0
f012bc95:	50                   	push   %eax
f012bc96:	e8 7a c3 fd ff       	call   f0108015 <krealloc>
f012bc9b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bc9e:	e8 e1 89 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bca3:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bca9:	74 17                	je     f012bcc2 <test_krealloc+0x1c5a>
			panic(
f012bcab:	83 ec 04             	sub    $0x4,%esp
f012bcae:	68 ec 99 13 f0       	push   $0xf01399ec
f012bcb3:	68 d2 10 00 00       	push   $0x10d2
f012bcb8:	68 d2 99 13 f0       	push   $0xf01399d2
f012bcbd:	e8 ee 44 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012bcc2:	e8 ff 0c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bcc7:	89 c2                	mov    %eax,%edx
f012bcc9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bccc:	29 c2                	sub    %eax,%edx
f012bcce:	89 d0                	mov    %edx,%eax
f012bcd0:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012bcd5:	74 17                	je     f012bcee <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012bcd7:	83 ec 04             	sub    $0x4,%esp
f012bcda:	68 a8 ae 13 f0       	push   $0xf013aea8
f012bcdf:	68 d4 10 00 00       	push   $0x10d4
f012bce4:	68 d2 99 13 f0       	push   $0xf01399d2
f012bce9:	e8 c2 44 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012bcee:	e8 d3 0c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bcf3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bcf6:	e8 89 89 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bcfb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012bd01:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bd07:	83 ec 0c             	sub    $0xc,%esp
f012bd0a:	50                   	push   %eax
f012bd0b:	e8 69 c2 fd ff       	call   f0107f79 <kfree>
f012bd10:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bd13:	e8 6c 89 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bd18:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bd1e:	74 17                	je     f012bd37 <test_krealloc+0x1ccf>
			panic(
f012bd20:	83 ec 04             	sub    $0x4,%esp
f012bd23:	68 ec 99 13 f0       	push   $0xf01399ec
f012bd28:	68 dc 10 00 00       	push   $0x10dc
f012bd2d:	68 d2 99 13 f0       	push   $0xf01399d2
f012bd32:	e8 79 44 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012bd37:	e8 8a 0c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bd3c:	89 c2                	mov    %eax,%edx
f012bd3e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bd41:	29 c2                	sub    %eax,%edx
f012bd43:	89 d0                	mov    %edx,%eax
f012bd45:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012bd4a:	74 17                	je     f012bd63 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012bd4c:	83 ec 04             	sub    $0x4,%esp
f012bd4f:	68 a8 ae 13 f0       	push   $0xf013aea8
f012bd54:	68 de 10 00 00       	push   $0x10de
f012bd59:	68 d2 99 13 f0       	push   $0xf01399d2
f012bd5e:	e8 4d 44 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bd63:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012bd6a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012bd71:	eb 48                	jmp    f012bdbb <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012bd73:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012bd76:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012bd7b:	83 ec 04             	sub    $0x4,%esp
f012bd7e:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012bd84:	51                   	push   %ecx
f012bd85:	52                   	push   %edx
f012bd86:	50                   	push   %eax
f012bd87:	e8 5b b7 fd ff       	call   f01074e7 <get_page_table>
f012bd8c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012bd8f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012bd95:	85 c0                	test   %eax,%eax
f012bd97:	75 17                	jne    f012bdb0 <test_krealloc+0x1d48>
					panic(
f012bd99:	83 ec 04             	sub    $0x4,%esp
f012bd9c:	68 d4 a2 13 f0       	push   $0xf013a2d4
f012bda1:	68 eb 10 00 00       	push   $0x10eb
f012bda6:	68 d2 99 13 f0       	push   $0xf01399d2
f012bdab:	e8 00 44 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bdb0:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012bdb7:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012bdbb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bdbf:	78 b2                	js     f012bd73 <test_krealloc+0x1d0b>
f012bdc1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bdc5:	7f 09                	jg     f012bdd0 <test_krealloc+0x1d68>
f012bdc7:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012bdce:	76 a3                	jbe    f012bd73 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012bdd0:	83 ec 0c             	sub    $0xc,%esp
f012bdd3:	68 b6 9b 13 f0       	push   $0xf0139bb6
f012bdd8:	e8 54 50 fd ff       	call   f0100e31 <cprintf>
f012bddd:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012bde0:	83 ec 0c             	sub    $0xc,%esp
f012bde3:	68 44 b2 13 f0       	push   $0xf013b244
f012bde8:	e8 44 50 fd ff       	call   f0100e31 <cprintf>
f012bded:	83 c4 10             	add    $0x10,%esp
	return 0;
f012bdf0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012bdf5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bdf8:	5b                   	pop    %ebx
f012bdf9:	5f                   	pop    %edi
f012bdfa:	5d                   	pop    %ebp
f012bdfb:	c3                   	ret    

f012bdfc <test_krealloc_BF>:


int test_krealloc_BF() {
f012bdfc:	55                   	push   %ebp
f012bdfd:	89 e5                	mov    %esp,%ebp
f012bdff:	57                   	push   %edi
f012be00:	53                   	push   %ebx
f012be01:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012be07:	83 ec 0c             	sub    $0xc,%esp
f012be0a:	68 14 99 13 f0       	push   $0xf0139914
f012be0f:	e8 1d 50 fd ff       	call   f0100e31 <cprintf>
f012be14:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012be17:	83 ec 0c             	sub    $0xc,%esp
f012be1a:	68 44 99 13 f0       	push   $0xf0139944
f012be1f:	e8 0d 50 fd ff       	call   f0100e31 <cprintf>
f012be24:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012be27:	83 ec 0c             	sub    $0xc,%esp
f012be2a:	68 14 99 13 f0       	push   $0xf0139914
f012be2f:	e8 fd 4f fd ff       	call   f0100e31 <cprintf>
f012be34:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012be37:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012be3b:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012be3f:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012be45:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012be4b:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012be52:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012be59:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012be5f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012be64:	b8 00 00 00 00       	mov    $0x0,%eax
f012be69:	89 d7                	mov    %edx,%edi
f012be6b:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012be6d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012be74:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012be7a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012be7f:	b8 00 00 00 00       	mov    $0x0,%eax
f012be84:	89 d7                	mov    %edx,%edi
f012be86:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012be88:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012be8e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012be93:	b8 00 00 00 00       	mov    $0x0,%eax
f012be98:	89 d7                	mov    %edx,%edi
f012be9a:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012be9c:	e8 25 0b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bea1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bea4:	83 ec 08             	sub    $0x8,%esp
f012bea7:	68 00 fc 0f 00       	push   $0xffc00
f012beac:	6a 00                	push   $0x0
f012beae:	e8 62 c1 fd ff       	call   f0108015 <krealloc>
f012beb3:	83 c4 10             	add    $0x10,%esp
f012beb6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bebc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bec2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bec7:	77 17                	ja     f012bee0 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bec9:	83 ec 04             	sub    $0x4,%esp
f012becc:	68 78 ac 13 f0       	push   $0xf013ac78
f012bed1:	68 1a 11 00 00       	push   $0x111a
f012bed6:	68 d2 99 13 f0       	push   $0xf01399d2
f012bedb:	e8 d0 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bee0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bee6:	89 c1                	mov    %eax,%ecx
f012bee8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012beef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bef4:	0f b6 d0             	movzbl %al,%edx
f012bef7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012befa:	01 d0                	add    %edx,%eax
f012befc:	48                   	dec    %eax
f012befd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bf00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bf03:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf08:	f7 75 b4             	divl   -0x4c(%ebp)
f012bf0b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bf0e:	29 d0                	sub    %edx,%eax
f012bf10:	89 c3                	mov    %eax,%ebx
f012bf12:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bf19:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bf1e:	0f b6 c0             	movzbl %al,%eax
f012bf21:	c1 e0 04             	shl    $0x4,%eax
f012bf24:	89 c2                	mov    %eax,%edx
f012bf26:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bf29:	01 d0                	add    %edx,%eax
f012bf2b:	48                   	dec    %eax
f012bf2c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bf2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bf32:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf37:	f7 75 ac             	divl   -0x54(%ebp)
f012bf3a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bf3d:	29 d0                	sub    %edx,%eax
f012bf3f:	01 d8                	add    %ebx,%eax
f012bf41:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bf46:	39 c1                	cmp    %eax,%ecx
f012bf48:	74 17                	je     f012bf61 <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012bf4a:	83 ec 04             	sub    $0x4,%esp
f012bf4d:	68 b4 ac 13 f0       	push   $0xf013acb4
f012bf52:	68 1c 11 00 00       	push   $0x111c
f012bf57:	68 d2 99 13 f0       	push   $0xf01399d2
f012bf5c:	e8 4f 42 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf61:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf64:	e8 5d 0a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bf69:	29 c3                	sub    %eax,%ebx
f012bf6b:	89 d8                	mov    %ebx,%eax
f012bf6d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf72:	74 17                	je     f012bf8b <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012bf74:	83 ec 04             	sub    $0x4,%esp
f012bf77:	68 e6 ac 13 f0       	push   $0xf013ace6
f012bf7c:	68 1f 11 00 00       	push   $0x111f
f012bf81:	68 d2 99 13 f0       	push   $0xf01399d2
f012bf86:	e8 25 42 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bf8b:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012bf92:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf95:	e8 2c 0a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bf9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bf9d:	83 ec 08             	sub    $0x8,%esp
f012bfa0:	68 00 fc 0f 00       	push   $0xffc00
f012bfa5:	6a 00                	push   $0x0
f012bfa7:	e8 69 c0 fd ff       	call   f0108015 <krealloc>
f012bfac:	83 c4 10             	add    $0x10,%esp
f012bfaf:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bfb5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bfbb:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bfc0:	77 17                	ja     f012bfd9 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bfc2:	83 ec 04             	sub    $0x4,%esp
f012bfc5:	68 78 ac 13 f0       	push   $0xf013ac78
f012bfca:	68 27 11 00 00       	push   $0x1127
f012bfcf:	68 d2 99 13 f0       	push   $0xf01399d2
f012bfd4:	e8 d7 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bfd9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bfdf:	89 c1                	mov    %eax,%ecx
f012bfe1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012bfe8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bfed:	0f b6 d0             	movzbl %al,%edx
f012bff0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012bff3:	01 d0                	add    %edx,%eax
f012bff5:	48                   	dec    %eax
f012bff6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012bff9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012bffc:	ba 00 00 00 00       	mov    $0x0,%edx
f012c001:	f7 75 a4             	divl   -0x5c(%ebp)
f012c004:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c007:	29 d0                	sub    %edx,%eax
f012c009:	89 c3                	mov    %eax,%ebx
f012c00b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c012:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c017:	0f b6 c0             	movzbl %al,%eax
f012c01a:	c1 e0 04             	shl    $0x4,%eax
f012c01d:	89 c2                	mov    %eax,%edx
f012c01f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c022:	01 d0                	add    %edx,%eax
f012c024:	48                   	dec    %eax
f012c025:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c028:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c02b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c030:	f7 75 9c             	divl   -0x64(%ebp)
f012c033:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c036:	29 d0                	sub    %edx,%eax
f012c038:	01 d8                	add    %ebx,%eax
f012c03a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c03f:	39 c1                	cmp    %eax,%ecx
f012c041:	74 17                	je     f012c05a <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012c043:	83 ec 04             	sub    $0x4,%esp
f012c046:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c04b:	68 29 11 00 00       	push   $0x1129
f012c050:	68 d2 99 13 f0       	push   $0xf01399d2
f012c055:	e8 56 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c05a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c05d:	e8 64 09 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c062:	29 c3                	sub    %eax,%ebx
f012c064:	89 d8                	mov    %ebx,%eax
f012c066:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c06b:	74 17                	je     f012c084 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012c06d:	83 ec 04             	sub    $0x4,%esp
f012c070:	68 e6 ac 13 f0       	push   $0xf013ace6
f012c075:	68 2b 11 00 00       	push   $0x112b
f012c07a:	68 d2 99 13 f0       	push   $0xf01399d2
f012c07f:	e8 2c 41 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c084:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012c08b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c08e:	e8 33 09 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c093:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c096:	83 ec 08             	sub    $0x8,%esp
f012c099:	68 00 fc 0f 00       	push   $0xffc00
f012c09e:	6a 00                	push   $0x0
f012c0a0:	e8 70 bf fd ff       	call   f0108015 <krealloc>
f012c0a5:	83 c4 10             	add    $0x10,%esp
f012c0a8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c0ae:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c0b4:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c0b9:	77 17                	ja     f012c0d2 <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0bb:	83 ec 04             	sub    $0x4,%esp
f012c0be:	68 78 ac 13 f0       	push   $0xf013ac78
f012c0c3:	68 33 11 00 00       	push   $0x1133
f012c0c8:	68 d2 99 13 f0       	push   $0xf01399d2
f012c0cd:	e8 de 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c0d2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c0d8:	89 c1                	mov    %eax,%ecx
f012c0da:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c0e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c0e6:	0f b6 d0             	movzbl %al,%edx
f012c0e9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c0ec:	01 d0                	add    %edx,%eax
f012c0ee:	48                   	dec    %eax
f012c0ef:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c0f2:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c0f5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0fa:	f7 75 94             	divl   -0x6c(%ebp)
f012c0fd:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c100:	29 d0                	sub    %edx,%eax
f012c102:	89 c3                	mov    %eax,%ebx
f012c104:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c10b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c110:	0f b6 c0             	movzbl %al,%eax
f012c113:	c1 e0 04             	shl    $0x4,%eax
f012c116:	89 c2                	mov    %eax,%edx
f012c118:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c11b:	01 d0                	add    %edx,%eax
f012c11d:	48                   	dec    %eax
f012c11e:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c121:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c124:	ba 00 00 00 00       	mov    $0x0,%edx
f012c129:	f7 75 8c             	divl   -0x74(%ebp)
f012c12c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c12f:	29 d0                	sub    %edx,%eax
f012c131:	01 d8                	add    %ebx,%eax
f012c133:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c138:	39 c1                	cmp    %eax,%ecx
f012c13a:	74 17                	je     f012c153 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012c13c:	83 ec 04             	sub    $0x4,%esp
f012c13f:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c144:	68 35 11 00 00       	push   $0x1135
f012c149:	68 d2 99 13 f0       	push   $0xf01399d2
f012c14e:	e8 5d 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c153:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c156:	e8 6b 08 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c15b:	29 c3                	sub    %eax,%ebx
f012c15d:	89 d8                	mov    %ebx,%eax
f012c15f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c164:	74 17                	je     f012c17d <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012c166:	83 ec 04             	sub    $0x4,%esp
f012c169:	68 e6 ac 13 f0       	push   $0xf013ace6
f012c16e:	68 37 11 00 00       	push   $0x1137
f012c173:	68 d2 99 13 f0       	push   $0xf01399d2
f012c178:	e8 33 40 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c17d:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012c184:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c187:	e8 3a 08 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c18c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c18f:	83 ec 08             	sub    $0x8,%esp
f012c192:	68 00 fc 0f 00       	push   $0xffc00
f012c197:	6a 00                	push   $0x0
f012c199:	e8 77 be fd ff       	call   f0108015 <krealloc>
f012c19e:	83 c4 10             	add    $0x10,%esp
f012c1a1:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c1a7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c1ad:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c1b2:	77 17                	ja     f012c1cb <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c1b4:	83 ec 04             	sub    $0x4,%esp
f012c1b7:	68 78 ac 13 f0       	push   $0xf013ac78
f012c1bc:	68 3e 11 00 00       	push   $0x113e
f012c1c1:	68 d2 99 13 f0       	push   $0xf01399d2
f012c1c6:	e8 e5 3f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c1cb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c1d1:	89 c1                	mov    %eax,%ecx
f012c1d3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c1da:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c1df:	0f b6 d0             	movzbl %al,%edx
f012c1e2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c1e5:	01 d0                	add    %edx,%eax
f012c1e7:	48                   	dec    %eax
f012c1e8:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c1eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c1ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1f3:	f7 75 84             	divl   -0x7c(%ebp)
f012c1f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c1f9:	29 d0                	sub    %edx,%eax
f012c1fb:	89 c3                	mov    %eax,%ebx
f012c1fd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c204:	10 00 00 
f012c207:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c20c:	0f b6 c0             	movzbl %al,%eax
f012c20f:	c1 e0 04             	shl    $0x4,%eax
f012c212:	89 c2                	mov    %eax,%edx
f012c214:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c21a:	01 d0                	add    %edx,%eax
f012c21c:	48                   	dec    %eax
f012c21d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c223:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c229:	ba 00 00 00 00       	mov    $0x0,%edx
f012c22e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c234:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c23a:	29 d0                	sub    %edx,%eax
f012c23c:	01 d8                	add    %ebx,%eax
f012c23e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c243:	39 c1                	cmp    %eax,%ecx
f012c245:	74 17                	je     f012c25e <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012c247:	83 ec 04             	sub    $0x4,%esp
f012c24a:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c24f:	68 40 11 00 00       	push   $0x1140
f012c254:	68 d2 99 13 f0       	push   $0xf01399d2
f012c259:	e8 52 3f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c25e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c261:	e8 60 07 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c266:	29 c3                	sub    %eax,%ebx
f012c268:	89 d8                	mov    %ebx,%eax
f012c26a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c26f:	74 17                	je     f012c288 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c271:	83 ec 04             	sub    $0x4,%esp
f012c274:	68 e6 ac 13 f0       	push   $0xf013ace6
f012c279:	68 42 11 00 00       	push   $0x1142
f012c27e:	68 d2 99 13 f0       	push   $0xf01399d2
f012c283:	e8 28 3f fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c288:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c28f:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c292:	e8 2f 07 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c297:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c29a:	83 ec 08             	sub    $0x8,%esp
f012c29d:	68 00 fc 1f 00       	push   $0x1ffc00
f012c2a2:	6a 00                	push   $0x0
f012c2a4:	e8 6c bd fd ff       	call   f0108015 <krealloc>
f012c2a9:	83 c4 10             	add    $0x10,%esp
f012c2ac:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c2b2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c2b8:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c2bd:	77 17                	ja     f012c2d6 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c2bf:	83 ec 04             	sub    $0x4,%esp
f012c2c2:	68 78 ac 13 f0       	push   $0xf013ac78
f012c2c7:	68 49 11 00 00       	push   $0x1149
f012c2cc:	68 d2 99 13 f0       	push   $0xf01399d2
f012c2d1:	e8 da 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c2d6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c2dc:	89 c1                	mov    %eax,%ecx
f012c2de:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c2e5:	10 00 00 
f012c2e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c2ed:	0f b6 d0             	movzbl %al,%edx
f012c2f0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c2f6:	01 d0                	add    %edx,%eax
f012c2f8:	48                   	dec    %eax
f012c2f9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c2ff:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c305:	ba 00 00 00 00       	mov    $0x0,%edx
f012c30a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c310:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c316:	29 d0                	sub    %edx,%eax
f012c318:	89 c3                	mov    %eax,%ebx
f012c31a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c321:	10 00 00 
f012c324:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c329:	0f b6 c0             	movzbl %al,%eax
f012c32c:	c1 e0 04             	shl    $0x4,%eax
f012c32f:	89 c2                	mov    %eax,%edx
f012c331:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c337:	01 d0                	add    %edx,%eax
f012c339:	48                   	dec    %eax
f012c33a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c340:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c346:	ba 00 00 00 00       	mov    $0x0,%edx
f012c34b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c351:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c357:	29 d0                	sub    %edx,%eax
f012c359:	01 d8                	add    %ebx,%eax
f012c35b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c360:	39 c1                	cmp    %eax,%ecx
f012c362:	74 17                	je     f012c37b <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c364:	83 ec 04             	sub    $0x4,%esp
f012c367:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c36c:	68 4b 11 00 00       	push   $0x114b
f012c371:	68 d2 99 13 f0       	push   $0xf01399d2
f012c376:	e8 35 3e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c37b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c37e:	e8 43 06 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c383:	29 c3                	sub    %eax,%ebx
f012c385:	89 d8                	mov    %ebx,%eax
f012c387:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c38c:	74 17                	je     f012c3a5 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c38e:	83 ec 04             	sub    $0x4,%esp
f012c391:	68 e6 ac 13 f0       	push   $0xf013ace6
f012c396:	68 4d 11 00 00       	push   $0x114d
f012c39b:	68 d2 99 13 f0       	push   $0xf01399d2
f012c3a0:	e8 0b 3e fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c3a5:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c3ac:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c3af:	e8 12 06 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c3b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c3b7:	83 ec 08             	sub    $0x8,%esp
f012c3ba:	68 00 fc 1f 00       	push   $0x1ffc00
f012c3bf:	6a 00                	push   $0x0
f012c3c1:	e8 4f bc fd ff       	call   f0108015 <krealloc>
f012c3c6:	83 c4 10             	add    $0x10,%esp
f012c3c9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c3cf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c3d5:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c3da:	77 17                	ja     f012c3f3 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3dc:	83 ec 04             	sub    $0x4,%esp
f012c3df:	68 78 ac 13 f0       	push   $0xf013ac78
f012c3e4:	68 54 11 00 00       	push   $0x1154
f012c3e9:	68 d2 99 13 f0       	push   $0xf01399d2
f012c3ee:	e8 bd 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c3f3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c3f9:	89 c1                	mov    %eax,%ecx
f012c3fb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c402:	10 00 00 
f012c405:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c40a:	0f b6 d0             	movzbl %al,%edx
f012c40d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c413:	01 d0                	add    %edx,%eax
f012c415:	48                   	dec    %eax
f012c416:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c41c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c422:	ba 00 00 00 00       	mov    $0x0,%edx
f012c427:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c42d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c433:	29 d0                	sub    %edx,%eax
f012c435:	89 c3                	mov    %eax,%ebx
f012c437:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c43e:	10 00 00 
f012c441:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c446:	0f b6 c0             	movzbl %al,%eax
f012c449:	c1 e0 04             	shl    $0x4,%eax
f012c44c:	89 c2                	mov    %eax,%edx
f012c44e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c454:	01 d0                	add    %edx,%eax
f012c456:	48                   	dec    %eax
f012c457:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c45d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c463:	ba 00 00 00 00       	mov    $0x0,%edx
f012c468:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c46e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c474:	29 d0                	sub    %edx,%eax
f012c476:	01 d8                	add    %ebx,%eax
f012c478:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c47d:	39 c1                	cmp    %eax,%ecx
f012c47f:	74 17                	je     f012c498 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c481:	83 ec 04             	sub    $0x4,%esp
f012c484:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c489:	68 56 11 00 00       	push   $0x1156
f012c48e:	68 d2 99 13 f0       	push   $0xf01399d2
f012c493:	e8 18 3d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c498:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c49b:	e8 26 05 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c4a0:	29 c3                	sub    %eax,%ebx
f012c4a2:	89 d8                	mov    %ebx,%eax
f012c4a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c4a9:	74 17                	je     f012c4c2 <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c4ab:	83 ec 04             	sub    $0x4,%esp
f012c4ae:	68 e6 ac 13 f0       	push   $0xf013ace6
f012c4b3:	68 58 11 00 00       	push   $0x1158
f012c4b8:	68 d2 99 13 f0       	push   $0xf01399d2
f012c4bd:	e8 ee 3c fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c4c2:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c4c9:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c4cc:	e8 f5 04 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c4d1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c4d4:	83 ec 08             	sub    $0x8,%esp
f012c4d7:	68 00 fc 2f 00       	push   $0x2ffc00
f012c4dc:	6a 00                	push   $0x0
f012c4de:	e8 32 bb fd ff       	call   f0108015 <krealloc>
f012c4e3:	83 c4 10             	add    $0x10,%esp
f012c4e6:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c4ec:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c4f2:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c4f7:	77 17                	ja     f012c510 <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c4f9:	83 ec 04             	sub    $0x4,%esp
f012c4fc:	68 78 ac 13 f0       	push   $0xf013ac78
f012c501:	68 5f 11 00 00       	push   $0x115f
f012c506:	68 d2 99 13 f0       	push   $0xf01399d2
f012c50b:	e8 a0 3c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c510:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c516:	89 c1                	mov    %eax,%ecx
f012c518:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c51f:	10 00 00 
f012c522:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c527:	0f b6 d0             	movzbl %al,%edx
f012c52a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c530:	01 d0                	add    %edx,%eax
f012c532:	48                   	dec    %eax
f012c533:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c539:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c53f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c544:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c54a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c550:	29 d0                	sub    %edx,%eax
f012c552:	89 c3                	mov    %eax,%ebx
f012c554:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c55b:	10 00 00 
f012c55e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c563:	0f b6 c0             	movzbl %al,%eax
f012c566:	c1 e0 04             	shl    $0x4,%eax
f012c569:	89 c2                	mov    %eax,%edx
f012c56b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c571:	01 d0                	add    %edx,%eax
f012c573:	48                   	dec    %eax
f012c574:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c57a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c580:	ba 00 00 00 00       	mov    $0x0,%edx
f012c585:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c58b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c591:	29 d0                	sub    %edx,%eax
f012c593:	01 d8                	add    %ebx,%eax
f012c595:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c59a:	39 c1                	cmp    %eax,%ecx
f012c59c:	74 17                	je     f012c5b5 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c59e:	83 ec 04             	sub    $0x4,%esp
f012c5a1:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c5a6:	68 61 11 00 00       	push   $0x1161
f012c5ab:	68 d2 99 13 f0       	push   $0xf01399d2
f012c5b0:	e8 fb 3b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c5b5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c5b8:	e8 09 04 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c5bd:	29 c3                	sub    %eax,%ebx
f012c5bf:	89 d8                	mov    %ebx,%eax
f012c5c1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c5c6:	74 17                	je     f012c5df <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c5c8:	83 ec 04             	sub    $0x4,%esp
f012c5cb:	68 1c 9e 13 f0       	push   $0xf0139e1c
f012c5d0:	68 63 11 00 00       	push   $0x1163
f012c5d5:	68 d2 99 13 f0       	push   $0xf01399d2
f012c5da:	e8 d1 3b fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c5df:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c5e6:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c5e9:	e8 d8 03 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c5ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c5f1:	83 ec 08             	sub    $0x8,%esp
f012c5f4:	68 00 fc 2f 00       	push   $0x2ffc00
f012c5f9:	6a 00                	push   $0x0
f012c5fb:	e8 15 ba fd ff       	call   f0108015 <krealloc>
f012c600:	83 c4 10             	add    $0x10,%esp
f012c603:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c609:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c60f:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c614:	77 17                	ja     f012c62d <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c616:	83 ec 04             	sub    $0x4,%esp
f012c619:	68 78 ac 13 f0       	push   $0xf013ac78
f012c61e:	68 6a 11 00 00       	push   $0x116a
f012c623:	68 d2 99 13 f0       	push   $0xf01399d2
f012c628:	e8 83 3b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c62d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c633:	89 c1                	mov    %eax,%ecx
f012c635:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c63c:	10 00 00 
f012c63f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c644:	0f b6 d0             	movzbl %al,%edx
f012c647:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c64d:	01 d0                	add    %edx,%eax
f012c64f:	48                   	dec    %eax
f012c650:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c656:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c65c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c661:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c667:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c66d:	29 d0                	sub    %edx,%eax
f012c66f:	89 c3                	mov    %eax,%ebx
f012c671:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c678:	10 00 00 
f012c67b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c680:	0f b6 c0             	movzbl %al,%eax
f012c683:	c1 e0 04             	shl    $0x4,%eax
f012c686:	89 c2                	mov    %eax,%edx
f012c688:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c68e:	01 d0                	add    %edx,%eax
f012c690:	48                   	dec    %eax
f012c691:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c697:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c69d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6a2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c6a8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c6ae:	29 d0                	sub    %edx,%eax
f012c6b0:	01 d8                	add    %ebx,%eax
f012c6b2:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c6b7:	39 c1                	cmp    %eax,%ecx
f012c6b9:	74 17                	je     f012c6d2 <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c6bb:	83 ec 04             	sub    $0x4,%esp
f012c6be:	68 b4 ac 13 f0       	push   $0xf013acb4
f012c6c3:	68 6c 11 00 00       	push   $0x116c
f012c6c8:	68 d2 99 13 f0       	push   $0xf01399d2
f012c6cd:	e8 de 3a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c6d2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c6d5:	e8 ec 02 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c6da:	29 c3                	sub    %eax,%ebx
f012c6dc:	89 d8                	mov    %ebx,%eax
f012c6de:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c6e3:	74 17                	je     f012c6fc <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c6e5:	83 ec 04             	sub    $0x4,%esp
f012c6e8:	68 e6 ac 13 f0       	push   $0xf013ace6
f012c6ed:	68 6e 11 00 00       	push   $0x116e
f012c6f2:	68 d2 99 13 f0       	push   $0xf01399d2
f012c6f7:	e8 b4 3a fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c6fc:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c703:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c706:	e8 bb 02 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c70b:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c70e:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c715:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c718:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c71e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c724:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c72a:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c72d:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c72f:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c735:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c73b:	01 c2                	add    %eax,%edx
f012c73d:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c740:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c742:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c748:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c74e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c755:	eb 11                	jmp    f012c768 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c757:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c75a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c760:	01 d0                	add    %edx,%eax
f012c762:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c765:	ff 45 f4             	incl   -0xc(%ebp)
f012c768:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c76e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c771:	7d e4                	jge    f012c757 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c773:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c779:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c77f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c785:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c78b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c791:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c798:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c79e:	01 d0                	add    %edx,%eax
f012c7a0:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c7a6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c7ac:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c7b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c7b9:	eb 1b                	jmp    f012c7d6 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c7bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c7be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c7c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7cb:	01 d0                	add    %edx,%eax
f012c7cd:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c7d3:	ff 45 f0             	incl   -0x10(%ebp)
f012c7d6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c7dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c7df:	7d da                	jge    f012c7bb <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c7e1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c7e7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c7ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c7f4:	eb 17                	jmp    f012c80d <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c7f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c7f9:	01 c0                	add    %eax,%eax
f012c7fb:	89 c2                	mov    %eax,%edx
f012c7fd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c803:	01 d0                	add    %edx,%eax
f012c805:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c80a:	ff 45 ec             	incl   -0x14(%ebp)
f012c80d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c813:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c816:	7d de                	jge    f012c7f6 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c818:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c81e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c824:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c82a:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c82f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c835:	01 c0                	add    %eax,%eax
f012c837:	89 c2                	mov    %eax,%edx
f012c839:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c83f:	01 d0                	add    %edx,%eax
f012c841:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c846:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c84c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c852:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c859:	eb 49                	jmp    f012c8a4 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c85b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c85e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c865:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c86b:	01 d0                	add    %edx,%eax
f012c86d:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c870:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c873:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c87a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c880:	01 d0                	add    %edx,%eax
f012c882:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c888:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c88b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c892:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c898:	01 d0                	add    %edx,%eax
f012c89a:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c8a1:	ff 45 e8             	incl   -0x18(%ebp)
f012c8a4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c8aa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c8ad:	7d ac                	jge    f012c85b <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c8af:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c8b5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c8bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8c1:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c8c4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8ca:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c8d0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8d6:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c8dd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c8e3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c8ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c8f0:	01 d0                	add    %edx,%eax
f012c8f2:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c8f5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c8fb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c902:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c908:	01 d0                	add    %edx,%eax
f012c90a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c910:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c916:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c91d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c923:	01 d0                	add    %edx,%eax
f012c925:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c92c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c932:	8a 00                	mov    (%eax),%al
f012c934:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c937:	75 17                	jne    f012c950 <test_krealloc_BF+0xb54>
f012c939:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c93f:	89 c2                	mov    %eax,%edx
f012c941:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c947:	01 d0                	add    %edx,%eax
f012c949:	8a 00                	mov    (%eax),%al
f012c94b:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c94e:	74 17                	je     f012c967 <test_krealloc_BF+0xb6b>
			panic(
f012c950:	83 ec 04             	sub    $0x4,%esp
f012c953:	68 04 ad 13 f0       	push   $0xf013ad04
f012c958:	68 b1 11 00 00       	push   $0x11b1
f012c95d:	68 d2 99 13 f0       	push   $0xf01399d2
f012c962:	e8 49 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c967:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c96d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c973:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c979:	8a 00                	mov    (%eax),%al
f012c97b:	3c 02                	cmp    $0x2,%al
f012c97d:	75 16                	jne    f012c995 <test_krealloc_BF+0xb99>
f012c97f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c985:	89 c2                	mov    %eax,%edx
f012c987:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c98d:	01 d0                	add    %edx,%eax
f012c98f:	8a 00                	mov    (%eax),%al
f012c991:	3c 02                	cmp    $0x2,%al
f012c993:	74 20                	je     f012c9b5 <test_krealloc_BF+0xbb9>
			panic(
f012c995:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c99b:	8a 00                	mov    (%eax),%al
f012c99d:	0f be c0             	movsbl %al,%eax
f012c9a0:	50                   	push   %eax
f012c9a1:	68 44 ad 13 f0       	push   $0xf013ad44
f012c9a6:	68 b7 11 00 00       	push   $0x11b7
f012c9ab:	68 d2 99 13 f0       	push   $0xf01399d2
f012c9b0:	e8 fb 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c9b5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c9bb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c9c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c9c7:	8b 00                	mov    (%eax),%eax
f012c9c9:	83 f8 03             	cmp    $0x3,%eax
f012c9cc:	75 1c                	jne    f012c9ea <test_krealloc_BF+0xbee>
f012c9ce:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c9d4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c9db:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c9e1:	01 d0                	add    %edx,%eax
f012c9e3:	8b 00                	mov    (%eax),%eax
f012c9e5:	83 f8 03             	cmp    $0x3,%eax
f012c9e8:	74 17                	je     f012ca01 <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c9ea:	83 ec 04             	sub    $0x4,%esp
f012c9ed:	68 90 ad 13 f0       	push   $0xf013ad90
f012c9f2:	68 bb 11 00 00       	push   $0x11bb
f012c9f7:	68 d2 99 13 f0       	push   $0xf01399d2
f012c9fc:	e8 af 37 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ca01:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ca07:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ca0d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ca13:	8b 00                	mov    (%eax),%eax
f012ca15:	83 f8 04             	cmp    $0x4,%eax
f012ca18:	75 1c                	jne    f012ca36 <test_krealloc_BF+0xc3a>
f012ca1a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ca20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ca27:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ca2d:	01 d0                	add    %edx,%eax
f012ca2f:	8b 00                	mov    (%eax),%eax
f012ca31:	83 f8 04             	cmp    $0x4,%eax
f012ca34:	74 17                	je     f012ca4d <test_krealloc_BF+0xc51>
			panic(
f012ca36:	83 ec 04             	sub    $0x4,%esp
f012ca39:	68 04 ad 13 f0       	push   $0xf013ad04
f012ca3e:	68 c0 11 00 00       	push   $0x11c0
f012ca43:	68 d2 99 13 f0       	push   $0xf01399d2
f012ca48:	e8 63 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ca4d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ca53:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ca59:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ca5f:	66 8b 00             	mov    (%eax),%ax
f012ca62:	66 83 f8 05          	cmp    $0x5,%ax
f012ca66:	75 1b                	jne    f012ca83 <test_krealloc_BF+0xc87>
f012ca68:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ca6e:	01 c0                	add    %eax,%eax
f012ca70:	89 c2                	mov    %eax,%edx
f012ca72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ca78:	01 d0                	add    %edx,%eax
f012ca7a:	66 8b 00             	mov    (%eax),%ax
f012ca7d:	66 83 f8 05          	cmp    $0x5,%ax
f012ca81:	74 17                	je     f012ca9a <test_krealloc_BF+0xc9e>
			panic(
f012ca83:	83 ec 04             	sub    $0x4,%esp
f012ca86:	68 04 ad 13 f0       	push   $0xf013ad04
f012ca8b:	68 c5 11 00 00       	push   $0x11c5
f012ca90:	68 d2 99 13 f0       	push   $0xf01399d2
f012ca95:	e8 16 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ca9a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012caa0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012caa6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012caac:	66 8b 00             	mov    (%eax),%ax
f012caaf:	66 83 f8 06          	cmp    $0x6,%ax
f012cab3:	75 1b                	jne    f012cad0 <test_krealloc_BF+0xcd4>
f012cab5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cabb:	01 c0                	add    %eax,%eax
f012cabd:	89 c2                	mov    %eax,%edx
f012cabf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cac5:	01 d0                	add    %edx,%eax
f012cac7:	66 8b 00             	mov    (%eax),%ax
f012caca:	66 83 f8 06          	cmp    $0x6,%ax
f012cace:	74 17                	je     f012cae7 <test_krealloc_BF+0xceb>
			panic(
f012cad0:	83 ec 04             	sub    $0x4,%esp
f012cad3:	68 04 ad 13 f0       	push   $0xf013ad04
f012cad8:	68 ca 11 00 00       	push   $0x11ca
f012cadd:	68 d2 99 13 f0       	push   $0xf01399d2
f012cae2:	e8 c9 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cae7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012caed:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012caf3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012caf9:	8a 00                	mov    (%eax),%al
f012cafb:	3c 07                	cmp    $0x7,%al
f012cafd:	75 1b                	jne    f012cb1a <test_krealloc_BF+0xd1e>
f012caff:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb05:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cb0c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb12:	01 d0                	add    %edx,%eax
f012cb14:	8a 00                	mov    (%eax),%al
f012cb16:	3c 07                	cmp    $0x7,%al
f012cb18:	74 17                	je     f012cb31 <test_krealloc_BF+0xd35>
			panic(
f012cb1a:	83 ec 04             	sub    $0x4,%esp
f012cb1d:	68 04 ad 13 f0       	push   $0xf013ad04
f012cb22:	68 cf 11 00 00       	push   $0x11cf
f012cb27:	68 d2 99 13 f0       	push   $0xf01399d2
f012cb2c:	e8 7f 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cb31:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb37:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb3b:	66 83 f8 07          	cmp    $0x7,%ax
f012cb3f:	75 1f                	jne    f012cb60 <test_krealloc_BF+0xd64>
f012cb41:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb47:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cb4e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb54:	01 d0                	add    %edx,%eax
f012cb56:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb5a:	66 83 f8 07          	cmp    $0x7,%ax
f012cb5e:	74 17                	je     f012cb77 <test_krealloc_BF+0xd7b>
			panic(
f012cb60:	83 ec 04             	sub    $0x4,%esp
f012cb63:	68 04 ad 13 f0       	push   $0xf013ad04
f012cb68:	68 d2 11 00 00       	push   $0x11d2
f012cb6d:	68 d2 99 13 f0       	push   $0xf01399d2
f012cb72:	e8 39 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cb77:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb7d:	8b 40 04             	mov    0x4(%eax),%eax
f012cb80:	83 f8 07             	cmp    $0x7,%eax
f012cb83:	75 1d                	jne    f012cba2 <test_krealloc_BF+0xda6>
f012cb85:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cb8b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cb92:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cb98:	01 d0                	add    %edx,%eax
f012cb9a:	8b 40 04             	mov    0x4(%eax),%eax
f012cb9d:	83 f8 07             	cmp    $0x7,%eax
f012cba0:	74 17                	je     f012cbb9 <test_krealloc_BF+0xdbd>
			panic(
f012cba2:	83 ec 04             	sub    $0x4,%esp
f012cba5:	68 04 ad 13 f0       	push   $0xf013ad04
f012cbaa:	68 d5 11 00 00       	push   $0x11d5
f012cbaf:	68 d2 99 13 f0       	push   $0xf01399d2
f012cbb4:	e8 f7 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012cbb9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cbbf:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012cbc5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cbcb:	8a 00                	mov    (%eax),%al
f012cbcd:	3c 08                	cmp    $0x8,%al
f012cbcf:	75 1b                	jne    f012cbec <test_krealloc_BF+0xdf0>
f012cbd1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cbd7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbde:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cbe4:	01 d0                	add    %edx,%eax
f012cbe6:	8a 00                	mov    (%eax),%al
f012cbe8:	3c 08                	cmp    $0x8,%al
f012cbea:	74 17                	je     f012cc03 <test_krealloc_BF+0xe07>
			panic(
f012cbec:	83 ec 04             	sub    $0x4,%esp
f012cbef:	68 04 ad 13 f0       	push   $0xf013ad04
f012cbf4:	68 da 11 00 00       	push   $0x11da
f012cbf9:	68 d2 99 13 f0       	push   $0xf01399d2
f012cbfe:	e8 ad 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012cc03:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc09:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cc0d:	66 83 f8 08          	cmp    $0x8,%ax
f012cc11:	75 1f                	jne    f012cc32 <test_krealloc_BF+0xe36>
f012cc13:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc19:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc26:	01 d0                	add    %edx,%eax
f012cc28:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cc2c:	66 83 f8 08          	cmp    $0x8,%ax
f012cc30:	74 17                	je     f012cc49 <test_krealloc_BF+0xe4d>
			panic(
f012cc32:	83 ec 04             	sub    $0x4,%esp
f012cc35:	68 04 ad 13 f0       	push   $0xf013ad04
f012cc3a:	68 dd 11 00 00       	push   $0x11dd
f012cc3f:	68 d2 99 13 f0       	push   $0xf01399d2
f012cc44:	e8 67 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012cc49:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc4f:	8b 40 04             	mov    0x4(%eax),%eax
f012cc52:	83 f8 08             	cmp    $0x8,%eax
f012cc55:	75 1d                	jne    f012cc74 <test_krealloc_BF+0xe78>
f012cc57:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc5d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc64:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cc6a:	01 d0                	add    %edx,%eax
f012cc6c:	8b 40 04             	mov    0x4(%eax),%eax
f012cc6f:	83 f8 08             	cmp    $0x8,%eax
f012cc72:	74 17                	je     f012cc8b <test_krealloc_BF+0xe8f>
			panic(
f012cc74:	83 ec 04             	sub    $0x4,%esp
f012cc77:	68 04 ad 13 f0       	push   $0xf013ad04
f012cc7c:	68 e0 11 00 00       	push   $0x11e0
f012cc81:	68 d2 99 13 f0       	push   $0xf01399d2
f012cc86:	e8 25 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cc8b:	e8 36 fd fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cc90:	89 c2                	mov    %eax,%edx
f012cc92:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc95:	39 c2                	cmp    %eax,%edx
f012cc97:	74 17                	je     f012ccb0 <test_krealloc_BF+0xeb4>
			panic(
f012cc99:	83 ec 04             	sub    $0x4,%esp
f012cc9c:	68 c4 ad 13 f0       	push   $0xf013adc4
f012cca1:	68 e4 11 00 00       	push   $0x11e4
f012cca6:	68 d2 99 13 f0       	push   $0xf01399d2
f012ccab:	e8 00 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ccb0:	83 ec 0c             	sub    $0xc,%esp
f012ccb3:	68 10 ae 13 f0       	push   $0xf013ae10
f012ccb8:	e8 74 41 fd ff       	call   f0100e31 <cprintf>
f012ccbd:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ccc0:	e8 01 fd fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ccc5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ccc8:	e8 b7 79 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cccd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ccd3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ccd9:	83 ec 08             	sub    $0x8,%esp
f012ccdc:	6a 00                	push   $0x0
f012ccde:	50                   	push   %eax
f012ccdf:	e8 31 b3 fd ff       	call   f0108015 <krealloc>
f012cce4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cce7:	e8 98 79 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ccec:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ccf2:	74 17                	je     f012cd0b <test_krealloc_BF+0xf0f>
			panic(
f012ccf4:	83 ec 04             	sub    $0x4,%esp
f012ccf7:	68 34 ae 13 f0       	push   $0xf013ae34
f012ccfc:	68 f1 11 00 00       	push   $0x11f1
f012cd01:	68 d2 99 13 f0       	push   $0xf01399d2
f012cd06:	e8 a5 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cd0b:	e8 b6 fc fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cd10:	89 c2                	mov    %eax,%edx
f012cd12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd15:	29 c2                	sub    %eax,%edx
f012cd17:	89 d0                	mov    %edx,%eax
f012cd19:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cd1e:	74 17                	je     f012cd37 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012cd20:	83 ec 04             	sub    $0x4,%esp
f012cd23:	68 a8 ae 13 f0       	push   $0xf013aea8
f012cd28:	68 f3 11 00 00       	push   $0x11f3
f012cd2d:	68 d2 99 13 f0       	push   $0xf01399d2
f012cd32:	e8 79 34 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cd37:	e8 8a fc fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cd3c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cd3f:	e8 40 79 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cd44:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cd4a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cd50:	83 ec 08             	sub    $0x8,%esp
f012cd53:	6a 00                	push   $0x0
f012cd55:	50                   	push   %eax
f012cd56:	e8 ba b2 fd ff       	call   f0108015 <krealloc>
f012cd5b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cd5e:	e8 21 79 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cd63:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cd69:	74 17                	je     f012cd82 <test_krealloc_BF+0xf86>
			panic(
f012cd6b:	83 ec 04             	sub    $0x4,%esp
f012cd6e:	68 34 ae 13 f0       	push   $0xf013ae34
f012cd73:	68 fc 11 00 00       	push   $0x11fc
f012cd78:	68 d2 99 13 f0       	push   $0xf01399d2
f012cd7d:	e8 2e 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cd82:	e8 3f fc fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cd87:	89 c2                	mov    %eax,%edx
f012cd89:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd8c:	29 c2                	sub    %eax,%edx
f012cd8e:	89 d0                	mov    %edx,%eax
f012cd90:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cd95:	74 17                	je     f012cdae <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012cd97:	83 ec 04             	sub    $0x4,%esp
f012cd9a:	68 a8 ae 13 f0       	push   $0xf013aea8
f012cd9f:	68 fe 11 00 00       	push   $0x11fe
f012cda4:	68 d2 99 13 f0       	push   $0xf01399d2
f012cda9:	e8 02 34 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cdae:	e8 13 fc fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cdb3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cdb6:	e8 c9 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cdbb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cdc1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cdc7:	83 ec 08             	sub    $0x8,%esp
f012cdca:	6a 00                	push   $0x0
f012cdcc:	50                   	push   %eax
f012cdcd:	e8 43 b2 fd ff       	call   f0108015 <krealloc>
f012cdd2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cdd5:	e8 aa 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cdda:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cde0:	74 17                	je     f012cdf9 <test_krealloc_BF+0xffd>
			panic(
f012cde2:	83 ec 04             	sub    $0x4,%esp
f012cde5:	68 ec 99 13 f0       	push   $0xf01399ec
f012cdea:	68 06 12 00 00       	push   $0x1206
f012cdef:	68 d2 99 13 f0       	push   $0xf01399d2
f012cdf4:	e8 b7 33 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cdf9:	e8 c8 fb fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cdfe:	89 c2                	mov    %eax,%edx
f012ce00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce03:	29 c2                	sub    %eax,%edx
f012ce05:	89 d0                	mov    %edx,%eax
f012ce07:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ce0c:	74 17                	je     f012ce25 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012ce0e:	83 ec 04             	sub    $0x4,%esp
f012ce11:	68 a8 ae 13 f0       	push   $0xf013aea8
f012ce16:	68 08 12 00 00       	push   $0x1208
f012ce1b:	68 d2 99 13 f0       	push   $0xf01399d2
f012ce20:	e8 8b 33 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ce25:	e8 9c fb fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ce2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ce2d:	e8 52 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ce32:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012ce38:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ce3e:	83 ec 08             	sub    $0x8,%esp
f012ce41:	6a 00                	push   $0x0
f012ce43:	50                   	push   %eax
f012ce44:	e8 cc b1 fd ff       	call   f0108015 <krealloc>
f012ce49:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ce4c:	e8 33 78 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ce51:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ce57:	74 17                	je     f012ce70 <test_krealloc_BF+0x1074>
			panic(
f012ce59:	83 ec 04             	sub    $0x4,%esp
f012ce5c:	68 34 ae 13 f0       	push   $0xf013ae34
f012ce61:	68 10 12 00 00       	push   $0x1210
f012ce66:	68 d2 99 13 f0       	push   $0xf01399d2
f012ce6b:	e8 40 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ce70:	e8 51 fb fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ce75:	89 c2                	mov    %eax,%edx
f012ce77:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce7a:	29 c2                	sub    %eax,%edx
f012ce7c:	89 d0                	mov    %edx,%eax
f012ce7e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ce83:	74 17                	je     f012ce9c <test_krealloc_BF+0x10a0>
			panic(
f012ce85:	83 ec 04             	sub    $0x4,%esp
f012ce88:	68 dc ae 13 f0       	push   $0xf013aedc
f012ce8d:	68 13 12 00 00       	push   $0x1213
f012ce92:	68 d2 99 13 f0       	push   $0xf01399d2
f012ce97:	e8 14 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ce9c:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cea3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ceaa:	eb 48                	jmp    f012cef4 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ceac:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ceaf:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012ceb4:	83 ec 04             	sub    $0x4,%esp
f012ceb7:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012cebd:	51                   	push   %ecx
f012cebe:	52                   	push   %edx
f012cebf:	50                   	push   %eax
f012cec0:	e8 22 a6 fd ff       	call   f01074e7 <get_page_table>
f012cec5:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cec8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012cece:	85 c0                	test   %eax,%eax
f012ced0:	75 17                	jne    f012cee9 <test_krealloc_BF+0x10ed>
					panic(
f012ced2:	83 ec 04             	sub    $0x4,%esp
f012ced5:	68 d4 a2 13 f0       	push   $0xf013a2d4
f012ceda:	68 1f 12 00 00       	push   $0x121f
f012cedf:	68 d2 99 13 f0       	push   $0xf01399d2
f012cee4:	e8 c7 32 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cee9:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cef0:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cef4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cef8:	78 b2                	js     f012ceac <test_krealloc_BF+0x10b0>
f012cefa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cefe:	7f 09                	jg     f012cf09 <test_krealloc_BF+0x110d>
f012cf00:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cf07:	76 a3                	jbe    f012ceac <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cf09:	83 ec 0c             	sub    $0xc,%esp
f012cf0c:	68 1b af 13 f0       	push   $0xf013af1b
f012cf11:	e8 1b 3f fd ff       	call   f0100e31 <cprintf>
f012cf16:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cf19:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cf1f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cf25:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cf2c:	eb 21                	jmp    f012cf4f <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012cf2e:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012cf34:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cf37:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cf3d:	01 c8                	add    %ecx,%eax
f012cf3f:	8a 00                	mov    (%eax),%al
f012cf41:	0f be c0             	movsbl %al,%eax
f012cf44:	01 d0                	add    %edx,%eax
f012cf46:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cf4c:	ff 45 dc             	incl   -0x24(%ebp)
f012cf4f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cf55:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cf58:	7d d4                	jge    f012cf2e <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cf5a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012cf60:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012cf66:	42                   	inc    %edx
f012cf67:	01 d2                	add    %edx,%edx
f012cf69:	39 d0                	cmp    %edx,%eax
f012cf6b:	74 17                	je     f012cf84 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012cf6d:	83 ec 04             	sub    $0x4,%esp
f012cf70:	68 24 af 13 f0       	push   $0xf013af24
f012cf75:	68 31 12 00 00       	push   $0x1231
f012cf7a:	68 d2 99 13 f0       	push   $0xf01399d2
f012cf7f:	e8 2c 32 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cf84:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cf8a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cf90:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cf97:	eb 25                	jmp    f012cfbe <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012cf99:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012cf9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cfa2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cfa9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cfaf:	01 c8                	add    %ecx,%eax
f012cfb1:	8b 00                	mov    (%eax),%eax
f012cfb3:	01 d0                	add    %edx,%eax
f012cfb5:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cfbb:	ff 45 dc             	incl   -0x24(%ebp)
f012cfbe:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012cfc4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cfc7:	7d d0                	jge    f012cf99 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cfc9:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012cfcf:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012cfd5:	42                   	inc    %edx
f012cfd6:	c1 e2 02             	shl    $0x2,%edx
f012cfd9:	39 d0                	cmp    %edx,%eax
f012cfdb:	74 17                	je     f012cff4 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012cfdd:	83 ec 04             	sub    $0x4,%esp
f012cfe0:	68 24 af 13 f0       	push   $0xf013af24
f012cfe5:	68 3b 12 00 00       	push   $0x123b
f012cfea:	68 d2 99 13 f0       	push   $0xf01399d2
f012cfef:	e8 bc 31 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cff4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cffa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d000:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d007:	eb 24                	jmp    f012d02d <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012d009:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d00f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d012:	01 c0                	add    %eax,%eax
f012d014:	89 c1                	mov    %eax,%ecx
f012d016:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d01c:	01 c8                	add    %ecx,%eax
f012d01e:	66 8b 00             	mov    (%eax),%ax
f012d021:	98                   	cwtl   
f012d022:	01 d0                	add    %edx,%eax
f012d024:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d02a:	ff 45 dc             	incl   -0x24(%ebp)
f012d02d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d033:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d036:	7d d1                	jge    f012d009 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d038:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d03e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d044:	8d 48 01             	lea    0x1(%eax),%ecx
f012d047:	89 c8                	mov    %ecx,%eax
f012d049:	c1 e0 02             	shl    $0x2,%eax
f012d04c:	01 c8                	add    %ecx,%eax
f012d04e:	39 c2                	cmp    %eax,%edx
f012d050:	74 17                	je     f012d069 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012d052:	83 ec 04             	sub    $0x4,%esp
f012d055:	68 24 af 13 f0       	push   $0xf013af24
f012d05a:	68 45 12 00 00       	push   $0x1245
f012d05f:	68 d2 99 13 f0       	push   $0xf01399d2
f012d064:	e8 47 31 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d069:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d06f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d075:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d07c:	eb 70                	jmp    f012d0ee <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012d07e:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012d084:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d087:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d08e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d094:	01 c8                	add    %ecx,%eax
f012d096:	8a 00                	mov    (%eax),%al
f012d098:	0f be c0             	movsbl %al,%eax
f012d09b:	01 d0                	add    %edx,%eax
f012d09d:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012d0a3:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012d0a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d0ac:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d0b3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d0b9:	01 c8                	add    %ecx,%eax
f012d0bb:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0bf:	98                   	cwtl   
f012d0c0:	01 d0                	add    %edx,%eax
f012d0c2:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012d0c8:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d0ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d0d1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d0d8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d0de:	01 c8                	add    %ecx,%eax
f012d0e0:	8b 40 04             	mov    0x4(%eax),%eax
f012d0e3:	01 d0                	add    %edx,%eax
f012d0e5:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d0eb:	ff 45 dc             	incl   -0x24(%ebp)
f012d0ee:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d0f4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d0f7:	7d 85                	jge    f012d07e <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d0f9:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012d0ff:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d105:	8d 50 01             	lea    0x1(%eax),%edx
f012d108:	89 d0                	mov    %edx,%eax
f012d10a:	01 c0                	add    %eax,%eax
f012d10c:	01 d0                	add    %edx,%eax
f012d10e:	01 c0                	add    %eax,%eax
f012d110:	01 d0                	add    %edx,%eax
f012d112:	39 c1                	cmp    %eax,%ecx
f012d114:	75 3a                	jne    f012d150 <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d116:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012d11c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d122:	8d 50 01             	lea    0x1(%eax),%edx
f012d125:	89 d0                	mov    %edx,%eax
f012d127:	01 c0                	add    %eax,%eax
f012d129:	01 d0                	add    %edx,%eax
f012d12b:	01 c0                	add    %eax,%eax
f012d12d:	01 d0                	add    %edx,%eax
f012d12f:	39 c1                	cmp    %eax,%ecx
f012d131:	75 1d                	jne    f012d150 <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d133:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012d139:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d13f:	8d 50 01             	lea    0x1(%eax),%edx
f012d142:	89 d0                	mov    %edx,%eax
f012d144:	01 c0                	add    %eax,%eax
f012d146:	01 d0                	add    %edx,%eax
f012d148:	01 c0                	add    %eax,%eax
f012d14a:	01 d0                	add    %edx,%eax
f012d14c:	39 c1                	cmp    %eax,%ecx
f012d14e:	74 17                	je     f012d167 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012d150:	83 ec 04             	sub    $0x4,%esp
f012d153:	68 24 af 13 f0       	push   $0xf013af24
f012d158:	68 53 12 00 00       	push   $0x1253
f012d15d:	68 d2 99 13 f0       	push   $0xf01399d2
f012d162:	e8 49 30 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d167:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012d16e:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d171:	e8 50 f8 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d176:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d179:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d17f:	83 ec 08             	sub    $0x8,%esp
f012d182:	68 00 3c 00 00       	push   $0x3c00
f012d187:	50                   	push   %eax
f012d188:	e8 88 ae fd ff       	call   f0108015 <krealloc>
f012d18d:	83 c4 10             	add    $0x10,%esp
f012d190:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d196:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d19c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1a1:	77 17                	ja     f012d1ba <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1a3:	83 ec 04             	sub    $0x4,%esp
f012d1a6:	68 78 ac 13 f0       	push   $0xf013ac78
f012d1ab:	68 5f 12 00 00       	push   $0x125f
f012d1b0:	68 d2 99 13 f0       	push   $0xf01399d2
f012d1b5:	e8 f6 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d1ba:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d1c0:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d1c6:	74 17                	je     f012d1df <test_krealloc_BF+0x13e3>
			panic(
f012d1c8:	83 ec 04             	sub    $0x4,%esp
f012d1cb:	68 5c af 13 f0       	push   $0xf013af5c
f012d1d0:	68 62 12 00 00       	push   $0x1262
f012d1d5:	68 d2 99 13 f0       	push   $0xf01399d2
f012d1da:	e8 d1 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d1df:	e8 e2 f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d1e4:	89 c2                	mov    %eax,%edx
f012d1e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1e9:	39 c2                	cmp    %eax,%edx
f012d1eb:	74 17                	je     f012d204 <test_krealloc_BF+0x1408>
			panic(
f012d1ed:	83 ec 04             	sub    $0x4,%esp
f012d1f0:	68 c8 af 13 f0       	push   $0xf013afc8
f012d1f5:	68 65 12 00 00       	push   $0x1265
f012d1fa:	68 d2 99 13 f0       	push   $0xf01399d2
f012d1ff:	e8 ac 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d204:	e8 bd f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d209:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d20c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d212:	83 ec 08             	sub    $0x8,%esp
f012d215:	68 00 fc 0f 00       	push   $0xffc00
f012d21a:	50                   	push   %eax
f012d21b:	e8 f5 ad fd ff       	call   f0108015 <krealloc>
f012d220:	83 c4 10             	add    $0x10,%esp
f012d223:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d229:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d22f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d234:	77 17                	ja     f012d24d <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d236:	83 ec 04             	sub    $0x4,%esp
f012d239:	68 78 ac 13 f0       	push   $0xf013ac78
f012d23e:	68 6b 12 00 00       	push   $0x126b
f012d243:	68 d2 99 13 f0       	push   $0xf01399d2
f012d248:	e8 63 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d24d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d253:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d259:	74 17                	je     f012d272 <test_krealloc_BF+0x1476>
			panic(
f012d25b:	83 ec 04             	sub    $0x4,%esp
f012d25e:	68 5c af 13 f0       	push   $0xf013af5c
f012d263:	68 6e 12 00 00       	push   $0x126e
f012d268:	68 d2 99 13 f0       	push   $0xf01399d2
f012d26d:	e8 3e 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d272:	e8 4f f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d277:	89 c2                	mov    %eax,%edx
f012d279:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d27c:	39 c2                	cmp    %eax,%edx
f012d27e:	74 17                	je     f012d297 <test_krealloc_BF+0x149b>
			panic(
f012d280:	83 ec 04             	sub    $0x4,%esp
f012d283:	68 c8 af 13 f0       	push   $0xf013afc8
f012d288:	68 71 12 00 00       	push   $0x1271
f012d28d:	68 d2 99 13 f0       	push   $0xf01399d2
f012d292:	e8 19 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d297:	e8 2a f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d29c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d29f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d2a5:	83 ec 08             	sub    $0x8,%esp
f012d2a8:	68 00 fc 0f 00       	push   $0xffc00
f012d2ad:	50                   	push   %eax
f012d2ae:	e8 62 ad fd ff       	call   f0108015 <krealloc>
f012d2b3:	83 c4 10             	add    $0x10,%esp
f012d2b6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2bc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d2c2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2c7:	77 17                	ja     f012d2e0 <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2c9:	83 ec 04             	sub    $0x4,%esp
f012d2cc:	68 78 ac 13 f0       	push   $0xf013ac78
f012d2d1:	68 77 12 00 00       	push   $0x1277
f012d2d6:	68 d2 99 13 f0       	push   $0xf01399d2
f012d2db:	e8 d0 2e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d2e0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d2e6:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d2ec:	74 17                	je     f012d305 <test_krealloc_BF+0x1509>
			panic(
f012d2ee:	83 ec 04             	sub    $0x4,%esp
f012d2f1:	68 5c af 13 f0       	push   $0xf013af5c
f012d2f6:	68 7a 12 00 00       	push   $0x127a
f012d2fb:	68 d2 99 13 f0       	push   $0xf01399d2
f012d300:	e8 ab 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d305:	e8 bc f6 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d30a:	89 c2                	mov    %eax,%edx
f012d30c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d30f:	39 c2                	cmp    %eax,%edx
f012d311:	74 17                	je     f012d32a <test_krealloc_BF+0x152e>
			panic(
f012d313:	83 ec 04             	sub    $0x4,%esp
f012d316:	68 c8 af 13 f0       	push   $0xf013afc8
f012d31b:	68 7d 12 00 00       	push   $0x127d
f012d320:	68 d2 99 13 f0       	push   $0xf01399d2
f012d325:	e8 86 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d32a:	e8 97 f6 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d32f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d332:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d338:	83 ec 08             	sub    $0x8,%esp
f012d33b:	68 00 fc 0f 00       	push   $0xffc00
f012d340:	50                   	push   %eax
f012d341:	e8 cf ac fd ff       	call   f0108015 <krealloc>
f012d346:	83 c4 10             	add    $0x10,%esp
f012d349:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d34f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d355:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d35a:	77 17                	ja     f012d373 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d35c:	83 ec 04             	sub    $0x4,%esp
f012d35f:	68 78 ac 13 f0       	push   $0xf013ac78
f012d364:	68 85 12 00 00       	push   $0x1285
f012d369:	68 d2 99 13 f0       	push   $0xf01399d2
f012d36e:	e8 3d 2e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d373:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d379:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d37f:	74 17                	je     f012d398 <test_krealloc_BF+0x159c>
			panic(
f012d381:	83 ec 04             	sub    $0x4,%esp
f012d384:	68 0c b0 13 f0       	push   $0xf013b00c
f012d389:	68 88 12 00 00       	push   $0x1288
f012d38e:	68 d2 99 13 f0       	push   $0xf01399d2
f012d393:	e8 18 2e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d398:	e8 29 f6 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d39d:	89 c2                	mov    %eax,%edx
f012d39f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d3a2:	39 c2                	cmp    %eax,%edx
f012d3a4:	74 17                	je     f012d3bd <test_krealloc_BF+0x15c1>
			panic(
f012d3a6:	83 ec 04             	sub    $0x4,%esp
f012d3a9:	68 c8 af 13 f0       	push   $0xf013afc8
f012d3ae:	68 8b 12 00 00       	push   $0x128b
f012d3b3:	68 d2 99 13 f0       	push   $0xf01399d2
f012d3b8:	e8 f3 2d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d3bd:	83 ec 0c             	sub    $0xc,%esp
f012d3c0:	68 eb a1 13 f0       	push   $0xf013a1eb
f012d3c5:	e8 67 3a fd ff       	call   f0100e31 <cprintf>
f012d3ca:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d3cd:	e8 f4 f5 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d3d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d3d5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d3db:	83 ec 08             	sub    $0x8,%esp
f012d3de:	68 00 18 10 00       	push   $0x101800
f012d3e3:	50                   	push   %eax
f012d3e4:	e8 2c ac fd ff       	call   f0108015 <krealloc>
f012d3e9:	83 c4 10             	add    $0x10,%esp
f012d3ec:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d3ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3f2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d3f7:	77 17                	ja     f012d410 <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d3f9:	83 ec 04             	sub    $0x4,%esp
f012d3fc:	68 78 ac 13 f0       	push   $0xf013ac78
f012d401:	68 93 12 00 00       	push   $0x1293
f012d406:	68 d2 99 13 f0       	push   $0xf01399d2
f012d40b:	e8 a0 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d410:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d416:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d419:	74 17                	je     f012d432 <test_krealloc_BF+0x1636>
			panic(
f012d41b:	83 ec 04             	sub    $0x4,%esp
f012d41e:	68 6c b0 13 f0       	push   $0xf013b06c
f012d423:	68 96 12 00 00       	push   $0x1296
f012d428:	68 d2 99 13 f0       	push   $0xf01399d2
f012d42d:	e8 7e 2d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d432:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d435:	e8 8c f5 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d43a:	29 c3                	sub    %eax,%ebx
f012d43c:	89 d8                	mov    %ebx,%eax
f012d43e:	83 f8 02             	cmp    $0x2,%eax
f012d441:	74 17                	je     f012d45a <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d443:	83 ec 04             	sub    $0x4,%esp
f012d446:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012d44b:	68 98 12 00 00       	push   $0x1298
f012d450:	68 d2 99 13 f0       	push   $0xf01399d2
f012d455:	e8 56 2d fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d45a:	e8 67 f5 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d45f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d462:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d468:	83 ec 08             	sub    $0x8,%esp
f012d46b:	68 00 fc 3f 00       	push   $0x3ffc00
f012d470:	50                   	push   %eax
f012d471:	e8 9f ab fd ff       	call   f0108015 <krealloc>
f012d476:	83 c4 10             	add    $0x10,%esp
f012d479:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d47c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d47f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d484:	77 17                	ja     f012d49d <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d486:	83 ec 04             	sub    $0x4,%esp
f012d489:	68 78 ac 13 f0       	push   $0xf013ac78
f012d48e:	68 9e 12 00 00       	push   $0x129e
f012d493:	68 d2 99 13 f0       	push   $0xf01399d2
f012d498:	e8 13 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d49d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d4a3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d4a6:	74 17                	je     f012d4bf <test_krealloc_BF+0x16c3>
			panic(
f012d4a8:	83 ec 04             	sub    $0x4,%esp
f012d4ab:	68 6c b0 13 f0       	push   $0xf013b06c
f012d4b0:	68 a1 12 00 00       	push   $0x12a1
f012d4b5:	68 d2 99 13 f0       	push   $0xf01399d2
f012d4ba:	e8 f1 2c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d4bf:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d4c2:	e8 ff f4 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d4c7:	29 c3                	sub    %eax,%ebx
f012d4c9:	89 d8                	mov    %ebx,%eax
f012d4cb:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d4d0:	74 17                	je     f012d4e9 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d4d2:	83 ec 04             	sub    $0x4,%esp
f012d4d5:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012d4da:	68 a4 12 00 00       	push   $0x12a4
f012d4df:	68 d2 99 13 f0       	push   $0xf01399d2
f012d4e4:	e8 c7 2c fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d4e9:	83 ec 0c             	sub    $0xc,%esp
f012d4ec:	68 30 a2 13 f0       	push   $0xf013a230
f012d4f1:	e8 3b 39 fd ff       	call   f0100e31 <cprintf>
f012d4f6:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d4f9:	e8 c8 f4 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d4fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d501:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d507:	83 ec 08             	sub    $0x8,%esp
f012d50a:	68 00 fc 9f 00       	push   $0x9ffc00
f012d50f:	50                   	push   %eax
f012d510:	e8 00 ab fd ff       	call   f0108015 <krealloc>
f012d515:	83 c4 10             	add    $0x10,%esp
f012d518:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d51b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d51e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d523:	77 17                	ja     f012d53c <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d525:	83 ec 04             	sub    $0x4,%esp
f012d528:	68 78 ac 13 f0       	push   $0xf013ac78
f012d52d:	68 af 12 00 00       	push   $0x12af
f012d532:	68 d2 99 13 f0       	push   $0xf01399d2
f012d537:	e8 74 2c fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d53c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d543:	10 00 00 
f012d546:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d54b:	0f b6 d0             	movzbl %al,%edx
f012d54e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d554:	01 d0                	add    %edx,%eax
f012d556:	48                   	dec    %eax
f012d557:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d55d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d563:	ba 00 00 00 00       	mov    $0x0,%edx
f012d568:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d56e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d574:	29 d0                	sub    %edx,%eax
f012d576:	89 c1                	mov    %eax,%ecx
f012d578:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d57f:	10 00 00 
f012d582:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d587:	0f b6 c0             	movzbl %al,%eax
f012d58a:	c1 e0 04             	shl    $0x4,%eax
f012d58d:	89 c2                	mov    %eax,%edx
f012d58f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d595:	01 d0                	add    %edx,%eax
f012d597:	48                   	dec    %eax
f012d598:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d59e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d5a4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5a9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d5af:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d5b5:	29 d0                	sub    %edx,%eax
f012d5b7:	01 c8                	add    %ecx,%eax
f012d5b9:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d5bf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5c2:	39 c2                	cmp    %eax,%edx
f012d5c4:	74 18                	je     f012d5de <test_krealloc_BF+0x17e2>
			panic(
f012d5c6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5c9:	50                   	push   %eax
f012d5ca:	68 1c b1 13 f0       	push   $0xf013b11c
f012d5cf:	68 b3 12 00 00       	push   $0x12b3
f012d5d4:	68 d2 99 13 f0       	push   $0xf01399d2
f012d5d9:	e8 d2 2b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d5de:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d5e4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d5e7:	75 17                	jne    f012d600 <test_krealloc_BF+0x1804>
			panic(
f012d5e9:	83 ec 04             	sub    $0x4,%esp
f012d5ec:	68 60 b1 13 f0       	push   $0xf013b160
f012d5f1:	68 b6 12 00 00       	push   $0x12b6
f012d5f6:	68 d2 99 13 f0       	push   $0xf01399d2
f012d5fb:	e8 b0 2b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d600:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d603:	e8 be f3 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d608:	29 c3                	sub    %eax,%ebx
f012d60a:	89 d8                	mov    %ebx,%eax
f012d60c:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d611:	74 17                	je     f012d62a <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d613:	83 ec 04             	sub    $0x4,%esp
f012d616:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012d61b:	68 b9 12 00 00       	push   $0x12b9
f012d620:	68 d2 99 13 f0       	push   $0xf01399d2
f012d625:	e8 86 2b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d62a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d62d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d633:	e8 8e f3 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d638:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d63b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d641:	83 ec 08             	sub    $0x8,%esp
f012d644:	68 00 fc 3f 00       	push   $0x3ffc00
f012d649:	50                   	push   %eax
f012d64a:	e8 c6 a9 fd ff       	call   f0108015 <krealloc>
f012d64f:	83 c4 10             	add    $0x10,%esp
f012d652:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d655:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d658:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d65d:	77 17                	ja     f012d676 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d65f:	83 ec 04             	sub    $0x4,%esp
f012d662:	68 78 ac 13 f0       	push   $0xf013ac78
f012d667:	68 c2 12 00 00       	push   $0x12c2
f012d66c:	68 d2 99 13 f0       	push   $0xf01399d2
f012d671:	e8 3a 2b fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d676:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d67c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d67f:	75 17                	jne    f012d698 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d681:	83 ec 04             	sub    $0x4,%esp
f012d684:	68 60 b1 13 f0       	push   $0xf013b160
f012d689:	68 c4 12 00 00       	push   $0x12c4
f012d68e:	68 d2 99 13 f0       	push   $0xf01399d2
f012d693:	e8 18 2b fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d698:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d69f:	10 00 00 
f012d6a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d6a7:	0f b6 d0             	movzbl %al,%edx
f012d6aa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d6b0:	01 d0                	add    %edx,%eax
f012d6b2:	48                   	dec    %eax
f012d6b3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d6b9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d6bf:	ba 00 00 00 00       	mov    $0x0,%edx
f012d6c4:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d6ca:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d6d0:	29 d0                	sub    %edx,%eax
f012d6d2:	89 c1                	mov    %eax,%ecx
f012d6d4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d6db:	10 00 00 
f012d6de:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d6e3:	0f b6 c0             	movzbl %al,%eax
f012d6e6:	c1 e0 04             	shl    $0x4,%eax
f012d6e9:	89 c2                	mov    %eax,%edx
f012d6eb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d6f1:	01 d0                	add    %edx,%eax
f012d6f3:	48                   	dec    %eax
f012d6f4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d6fa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d700:	ba 00 00 00 00       	mov    $0x0,%edx
f012d705:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d70b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d711:	29 d0                	sub    %edx,%eax
f012d713:	01 c8                	add    %ecx,%eax
f012d715:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d71b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d71e:	39 c2                	cmp    %eax,%edx
f012d720:	74 17                	je     f012d739 <test_krealloc_BF+0x193d>
f012d722:	83 ec 04             	sub    $0x4,%esp
f012d725:	68 b4 ac 13 f0       	push   $0xf013acb4
f012d72a:	68 c5 12 00 00       	push   $0x12c5
f012d72f:	68 d2 99 13 f0       	push   $0xf01399d2
f012d734:	e8 77 2a fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d739:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d73c:	e8 85 f2 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d741:	29 c3                	sub    %eax,%ebx
f012d743:	89 d8                	mov    %ebx,%eax
f012d745:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d74a:	74 17                	je     f012d763 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d74c:	83 ec 04             	sub    $0x4,%esp
f012d74f:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012d754:	68 c9 12 00 00       	push   $0x12c9
f012d759:	68 d2 99 13 f0       	push   $0xf01399d2
f012d75e:	e8 4d 2a fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d763:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d766:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d76c:	e8 55 f2 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d771:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d774:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d77a:	83 ec 08             	sub    $0x8,%esp
f012d77d:	68 00 fc 3f 01       	push   $0x13ffc00
f012d782:	50                   	push   %eax
f012d783:	e8 8d a8 fd ff       	call   f0108015 <krealloc>
f012d788:	83 c4 10             	add    $0x10,%esp
f012d78b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d78e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d791:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d796:	77 17                	ja     f012d7af <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d798:	83 ec 04             	sub    $0x4,%esp
f012d79b:	68 78 ac 13 f0       	push   $0xf013ac78
f012d7a0:	68 cf 12 00 00       	push   $0x12cf
f012d7a5:	68 d2 99 13 f0       	push   $0xf01399d2
f012d7aa:	e8 01 2a fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d7af:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d7b5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d7b8:	75 17                	jne    f012d7d1 <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d7ba:	83 ec 04             	sub    $0x4,%esp
f012d7bd:	68 60 b1 13 f0       	push   $0xf013b160
f012d7c2:	68 d1 12 00 00       	push   $0x12d1
f012d7c7:	68 d2 99 13 f0       	push   $0xf01399d2
f012d7cc:	e8 df 29 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d7d1:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d7d8:	10 00 00 
f012d7db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d7e0:	0f b6 d0             	movzbl %al,%edx
f012d7e3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d7e9:	01 d0                	add    %edx,%eax
f012d7eb:	48                   	dec    %eax
f012d7ec:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d7f2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d7f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7fd:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d803:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d809:	29 d0                	sub    %edx,%eax
f012d80b:	89 c1                	mov    %eax,%ecx
f012d80d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d814:	10 00 00 
f012d817:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d81c:	0f b6 c0             	movzbl %al,%eax
f012d81f:	c1 e0 04             	shl    $0x4,%eax
f012d822:	89 c2                	mov    %eax,%edx
f012d824:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d82a:	01 d0                	add    %edx,%eax
f012d82c:	48                   	dec    %eax
f012d82d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d833:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d839:	ba 00 00 00 00       	mov    $0x0,%edx
f012d83e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d844:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d84a:	29 d0                	sub    %edx,%eax
f012d84c:	01 c8                	add    %ecx,%eax
f012d84e:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d854:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d857:	39 c2                	cmp    %eax,%edx
f012d859:	74 17                	je     f012d872 <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d85b:	83 ec 04             	sub    $0x4,%esp
f012d85e:	68 80 b2 13 f0       	push   $0xf013b280
f012d863:	68 d3 12 00 00       	push   $0x12d3
f012d868:	68 d2 99 13 f0       	push   $0xf01399d2
f012d86d:	e8 3e 29 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d872:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d875:	e8 4c f1 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d87a:	29 c3                	sub    %eax,%ebx
f012d87c:	89 d8                	mov    %ebx,%eax
f012d87e:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d883:	74 17                	je     f012d89c <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d885:	83 ec 04             	sub    $0x4,%esp
f012d888:	68 e8 b0 13 f0       	push   $0xf013b0e8
f012d88d:	68 d6 12 00 00       	push   $0x12d6
f012d892:	68 d2 99 13 f0       	push   $0xf01399d2
f012d897:	e8 14 29 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d89c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d89f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d8a5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d8ab:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d8b1:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d8b8:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d8bb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d8c2:	eb 21                	jmp    f012d8e5 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d8c4:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d8ca:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d8cd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d8d3:	01 c8                	add    %ecx,%eax
f012d8d5:	8a 00                	mov    (%eax),%al
f012d8d7:	0f be c0             	movsbl %al,%eax
f012d8da:	01 d0                	add    %edx,%eax
f012d8dc:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d8e2:	ff 45 d8             	incl   -0x28(%ebp)
f012d8e5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d8eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d8ee:	7d d4                	jge    f012d8c4 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d8f0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d8f6:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d8fc:	42                   	inc    %edx
f012d8fd:	01 d2                	add    %edx,%edx
f012d8ff:	39 d0                	cmp    %edx,%eax
f012d901:	74 17                	je     f012d91a <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d903:	83 ec 04             	sub    $0x4,%esp
f012d906:	68 18 b2 13 f0       	push   $0xf013b218
f012d90b:	68 e4 12 00 00       	push   $0x12e4
f012d910:	68 d2 99 13 f0       	push   $0xf01399d2
f012d915:	e8 96 28 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d91a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d920:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d926:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d92d:	00 00 00 
		sums[1] = 0;
f012d930:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d937:	00 00 00 
		sums[2] = 0;
f012d93a:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d941:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d944:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d94b:	eb 70                	jmp    f012d9bd <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d94d:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d953:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d956:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d95d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d963:	01 c8                	add    %ecx,%eax
f012d965:	8a 00                	mov    (%eax),%al
f012d967:	0f be c0             	movsbl %al,%eax
f012d96a:	01 d0                	add    %edx,%eax
f012d96c:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d972:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d978:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d97b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d982:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d988:	01 c8                	add    %ecx,%eax
f012d98a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d98e:	98                   	cwtl   
f012d98f:	01 d0                	add    %edx,%eax
f012d991:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d997:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d99d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d9a0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d9ad:	01 c8                	add    %ecx,%eax
f012d9af:	8b 40 04             	mov    0x4(%eax),%eax
f012d9b2:	01 d0                	add    %edx,%eax
f012d9b4:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d9ba:	ff 45 d8             	incl   -0x28(%ebp)
f012d9bd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d9c3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d9c6:	7d 85                	jge    f012d94d <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d9c8:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d9ce:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d9d4:	8d 50 01             	lea    0x1(%eax),%edx
f012d9d7:	89 d0                	mov    %edx,%eax
f012d9d9:	01 c0                	add    %eax,%eax
f012d9db:	01 d0                	add    %edx,%eax
f012d9dd:	01 c0                	add    %eax,%eax
f012d9df:	01 d0                	add    %edx,%eax
f012d9e1:	39 c1                	cmp    %eax,%ecx
f012d9e3:	75 3a                	jne    f012da1f <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d9e5:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d9eb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d9f1:	8d 50 01             	lea    0x1(%eax),%edx
f012d9f4:	89 d0                	mov    %edx,%eax
f012d9f6:	01 c0                	add    %eax,%eax
f012d9f8:	01 d0                	add    %edx,%eax
f012d9fa:	01 c0                	add    %eax,%eax
f012d9fc:	01 d0                	add    %edx,%eax
f012d9fe:	39 c1                	cmp    %eax,%ecx
f012da00:	75 1d                	jne    f012da1f <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012da02:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012da08:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012da0e:	8d 50 01             	lea    0x1(%eax),%edx
f012da11:	89 d0                	mov    %edx,%eax
f012da13:	01 c0                	add    %eax,%eax
f012da15:	01 d0                	add    %edx,%eax
f012da17:	01 c0                	add    %eax,%eax
f012da19:	01 d0                	add    %edx,%eax
f012da1b:	39 c1                	cmp    %eax,%ecx
f012da1d:	74 17                	je     f012da36 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012da1f:	83 ec 04             	sub    $0x4,%esp
f012da22:	68 18 b2 13 f0       	push   $0xf013b218
f012da27:	68 f6 12 00 00       	push   $0x12f6
f012da2c:	68 d2 99 13 f0       	push   $0xf01399d2
f012da31:	e8 7a 27 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012da36:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012da3c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012da42:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012da49:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012da4c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012da53:	eb 24                	jmp    f012da79 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012da55:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012da5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012da5e:	01 c0                	add    %eax,%eax
f012da60:	89 c1                	mov    %eax,%ecx
f012da62:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012da68:	01 c8                	add    %ecx,%eax
f012da6a:	66 8b 00             	mov    (%eax),%ax
f012da6d:	98                   	cwtl   
f012da6e:	01 d0                	add    %edx,%eax
f012da70:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012da76:	ff 45 d8             	incl   -0x28(%ebp)
f012da79:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012da7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012da82:	7d d1                	jge    f012da55 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012da84:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012da8a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012da90:	8d 48 01             	lea    0x1(%eax),%ecx
f012da93:	89 c8                	mov    %ecx,%eax
f012da95:	c1 e0 02             	shl    $0x2,%eax
f012da98:	01 c8                	add    %ecx,%eax
f012da9a:	39 c2                	cmp    %eax,%edx
f012da9c:	74 17                	je     f012dab5 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012da9e:	83 ec 04             	sub    $0x4,%esp
f012daa1:	68 18 b2 13 f0       	push   $0xf013b218
f012daa6:	68 00 13 00 00       	push   $0x1300
f012daab:	68 d2 99 13 f0       	push   $0xf01399d2
f012dab0:	e8 fb 26 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012dab5:	e8 0c ef fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012daba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dabd:	e8 c2 6b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012dac2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012dac8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dace:	83 ec 08             	sub    $0x8,%esp
f012dad1:	6a 00                	push   $0x0
f012dad3:	50                   	push   %eax
f012dad4:	e8 3c a5 fd ff       	call   f0108015 <krealloc>
f012dad9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dadc:	e8 a3 6b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012dae1:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012dae7:	74 17                	je     f012db00 <test_krealloc_BF+0x1d04>
			panic(
f012dae9:	83 ec 04             	sub    $0x4,%esp
f012daec:	68 ec 99 13 f0       	push   $0xf01399ec
f012daf1:	68 08 13 00 00       	push   $0x1308
f012daf6:	68 d2 99 13 f0       	push   $0xf01399d2
f012dafb:	e8 b0 26 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012db00:	e8 c1 ee fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012db05:	89 c2                	mov    %eax,%edx
f012db07:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db0a:	29 c2                	sub    %eax,%edx
f012db0c:	89 d0                	mov    %edx,%eax
f012db0e:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012db13:	74 17                	je     f012db2c <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012db15:	83 ec 04             	sub    $0x4,%esp
f012db18:	68 a8 ae 13 f0       	push   $0xf013aea8
f012db1d:	68 0a 13 00 00       	push   $0x130a
f012db22:	68 d2 99 13 f0       	push   $0xf01399d2
f012db27:	e8 84 26 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012db2c:	e8 95 ee fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012db31:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012db34:	e8 4b 6b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012db39:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012db3f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012db45:	83 ec 0c             	sub    $0xc,%esp
f012db48:	50                   	push   %eax
f012db49:	e8 2b a4 fd ff       	call   f0107f79 <kfree>
f012db4e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012db51:	e8 2e 6b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012db56:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012db5c:	74 17                	je     f012db75 <test_krealloc_BF+0x1d79>
			panic(
f012db5e:	83 ec 04             	sub    $0x4,%esp
f012db61:	68 ec 99 13 f0       	push   $0xf01399ec
f012db66:	68 12 13 00 00       	push   $0x1312
f012db6b:	68 d2 99 13 f0       	push   $0xf01399d2
f012db70:	e8 3b 26 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012db75:	e8 4c ee fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012db7a:	89 c2                	mov    %eax,%edx
f012db7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db7f:	29 c2                	sub    %eax,%edx
f012db81:	89 d0                	mov    %edx,%eax
f012db83:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012db88:	74 17                	je     f012dba1 <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012db8a:	83 ec 04             	sub    $0x4,%esp
f012db8d:	68 a8 ae 13 f0       	push   $0xf013aea8
f012db92:	68 14 13 00 00       	push   $0x1314
f012db97:	68 d2 99 13 f0       	push   $0xf01399d2
f012db9c:	e8 0f 26 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dba1:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012dba8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dbaf:	eb 48                	jmp    f012dbf9 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dbb1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dbb4:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012dbb9:	83 ec 04             	sub    $0x4,%esp
f012dbbc:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012dbc2:	51                   	push   %ecx
f012dbc3:	52                   	push   %edx
f012dbc4:	50                   	push   %eax
f012dbc5:	e8 1d 99 fd ff       	call   f01074e7 <get_page_table>
f012dbca:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dbcd:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012dbd3:	85 c0                	test   %eax,%eax
f012dbd5:	75 17                	jne    f012dbee <test_krealloc_BF+0x1df2>
					panic(
f012dbd7:	83 ec 04             	sub    $0x4,%esp
f012dbda:	68 d4 a2 13 f0       	push   $0xf013a2d4
f012dbdf:	68 21 13 00 00       	push   $0x1321
f012dbe4:	68 d2 99 13 f0       	push   $0xf01399d2
f012dbe9:	e8 c2 25 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dbee:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012dbf5:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012dbf9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dbfd:	78 b2                	js     f012dbb1 <test_krealloc_BF+0x1db5>
f012dbff:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012dc03:	7f 09                	jg     f012dc0e <test_krealloc_BF+0x1e12>
f012dc05:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012dc0c:	76 a3                	jbe    f012dbb1 <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012dc0e:	83 ec 0c             	sub    $0xc,%esp
f012dc11:	68 b6 9b 13 f0       	push   $0xf0139bb6
f012dc16:	e8 16 32 fd ff       	call   f0100e31 <cprintf>
f012dc1b:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012dc1e:	83 ec 0c             	sub    $0xc,%esp
f012dc21:	68 b8 b2 13 f0       	push   $0xf013b2b8
f012dc26:	e8 06 32 fd ff       	call   f0100e31 <cprintf>
f012dc2b:	83 c4 10             	add    $0x10,%esp
	return 0;
f012dc2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dc33:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012dc36:	5b                   	pop    %ebx
f012dc37:	5f                   	pop    %edi
f012dc38:	5d                   	pop    %ebp
f012dc39:	c3                   	ret    

f012dc3a <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012dc3a:	55                   	push   %ebp
f012dc3b:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012dc3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012dc42:	5d                   	pop    %ebp
f012dc43:	c3                   	ret    

f012dc44 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012dc44:	55                   	push   %ebp
f012dc45:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012dc47:	c7 05 54 3a 25 f0 00 	movl   $0x0,0xf0253a54
f012dc4e:	00 00 00 
}
f012dc51:	90                   	nop
f012dc52:	5d                   	pop    %ebp
f012dc53:	c3                   	ret    

f012dc54 <inctst>:
void inctst()
{
f012dc54:	55                   	push   %ebp
f012dc55:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012dc57:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012dc5c:	40                   	inc    %eax
f012dc5d:	a3 54 3a 25 f0       	mov    %eax,0xf0253a54
}
f012dc62:	90                   	nop
f012dc63:	5d                   	pop    %ebp
f012dc64:	c3                   	ret    

f012dc65 <gettst>:
uint32 gettst()
{
f012dc65:	55                   	push   %ebp
f012dc66:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012dc68:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
}
f012dc6d:	5d                   	pop    %ebp
f012dc6e:	c3                   	ret    

f012dc6f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012dc6f:	55                   	push   %ebp
f012dc70:	89 e5                	mov    %esp,%ebp
f012dc72:	83 ec 28             	sub    $0x28,%esp
f012dc75:	8b 45 14             	mov    0x14(%ebp),%eax
f012dc78:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012dc7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012dc82:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012dc86:	83 f8 65             	cmp    $0x65,%eax
f012dc89:	74 5d                	je     f012dce8 <tst+0x79>
f012dc8b:	83 f8 65             	cmp    $0x65,%eax
f012dc8e:	7f 0a                	jg     f012dc9a <tst+0x2b>
f012dc90:	83 f8 62             	cmp    $0x62,%eax
f012dc93:	74 73                	je     f012dd08 <tst+0x99>
f012dc95:	e9 91 00 00 00       	jmp    f012dd2b <tst+0xbc>
f012dc9a:	83 f8 67             	cmp    $0x67,%eax
f012dc9d:	74 29                	je     f012dcc8 <tst+0x59>
f012dc9f:	83 f8 6c             	cmp    $0x6c,%eax
f012dca2:	0f 85 83 00 00 00    	jne    f012dd2b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012dca8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dcab:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dcae:	73 09                	jae    f012dcb9 <tst+0x4a>
			chk = 1;
f012dcb0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dcb7:	eb 68                	jmp    f012dd21 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012dcb9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dcbd:	74 62                	je     f012dd21 <tst+0xb2>
			chk = 1;
f012dcbf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dcc6:	eb 59                	jmp    f012dd21 <tst+0xb2>
	case 'g':
		if (n > v1)
f012dcc8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dccb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dcce:	76 09                	jbe    f012dcd9 <tst+0x6a>
			chk = 1;
f012dcd0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dcd7:	eb 4b                	jmp    f012dd24 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012dcd9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dcdd:	74 45                	je     f012dd24 <tst+0xb5>
			chk = 1;
f012dcdf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dce6:	eb 3c                	jmp    f012dd24 <tst+0xb5>
	case 'e':
		if (n == v1)
f012dce8:	8b 45 08             	mov    0x8(%ebp),%eax
f012dceb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dcee:	75 09                	jne    f012dcf9 <tst+0x8a>
			chk = 1;
f012dcf0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dcf7:	eb 2e                	jmp    f012dd27 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012dcf9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dcfd:	74 28                	je     f012dd27 <tst+0xb8>
			chk = 1;
f012dcff:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dd06:	eb 1f                	jmp    f012dd27 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012dd08:	8b 45 08             	mov    0x8(%ebp),%eax
f012dd0b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dd0e:	72 1a                	jb     f012dd2a <tst+0xbb>
f012dd10:	8b 45 08             	mov    0x8(%ebp),%eax
f012dd13:	3b 45 10             	cmp    0x10(%ebp),%eax
f012dd16:	77 12                	ja     f012dd2a <tst+0xbb>
			chk = 1;
f012dd18:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dd1f:	eb 09                	jmp    f012dd2a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012dd21:	90                   	nop
f012dd22:	eb 07                	jmp    f012dd2b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012dd24:	90                   	nop
f012dd25:	eb 04                	jmp    f012dd2b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012dd27:	90                   	nop
f012dd28:	eb 01                	jmp    f012dd2b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012dd2a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012dd2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012dd2f:	75 14                	jne    f012dd45 <tst+0xd6>
f012dd31:	83 ec 04             	sub    $0x4,%esp
f012dd34:	68 f8 b2 13 f0       	push   $0xf013b2f8
f012dd39:	6a 3c                	push   $0x3c
f012dd3b:	68 0b b3 13 f0       	push   $0xf013b30b
f012dd40:	e8 6b 24 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012dd45:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012dd4a:	40                   	inc    %eax
f012dd4b:	a3 54 3a 25 f0       	mov    %eax,0xf0253a54
	return;
f012dd50:	90                   	nop
}
f012dd51:	c9                   	leave  
f012dd52:	c3                   	ret    

f012dd53 <chktst>:

void chktst(uint32 n)
{
f012dd53:	55                   	push   %ebp
f012dd54:	89 e5                	mov    %esp,%ebp
f012dd56:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012dd59:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012dd5e:	3b 45 08             	cmp    0x8(%ebp),%eax
f012dd61:	75 12                	jne    f012dd75 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012dd63:	83 ec 0c             	sub    $0xc,%esp
f012dd66:	68 24 b3 13 f0       	push   $0xf013b324
f012dd6b:	e8 c1 30 fd ff       	call   f0100e31 <cprintf>
f012dd70:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012dd73:	eb 14                	jmp    f012dd89 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012dd75:	83 ec 04             	sub    $0x4,%esp
f012dd78:	68 50 b3 13 f0       	push   $0xf013b350
f012dd7d:	6a 46                	push   $0x46
f012dd7f:	68 0b b3 13 f0       	push   $0xf013b30b
f012dd84:	e8 27 24 fd ff       	call   f01001b0 <_panic>
}
f012dd89:	c9                   	leave  
f012dd8a:	c3                   	ret    

f012dd8b <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012dd8b:	55                   	push   %ebp
f012dd8c:	89 e5                	mov    %esp,%ebp
f012dd8e:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012dd91:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dd95:	77 07                	ja     f012dd9e <nearest_pow2_ceil+0x13>
f012dd97:	b8 01 00 00 00       	mov    $0x1,%eax
f012dd9c:	eb 20                	jmp    f012ddbe <nearest_pow2_ceil+0x33>
    int power = 2;
f012dd9e:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012dda5:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dda8:	eb 08                	jmp    f012ddb2 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012ddaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ddad:	01 c0                	add    %eax,%eax
f012ddaf:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012ddb2:	d1 6d 08             	shrl   0x8(%ebp)
f012ddb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ddb9:	75 ef                	jne    f012ddaa <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012ddbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ddbe:	c9                   	leave  
f012ddbf:	c3                   	ret    

f012ddc0 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012ddc0:	55                   	push   %ebp
f012ddc1:	89 e5                	mov    %esp,%ebp
f012ddc3:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012ddc6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012ddca:	77 07                	ja     f012ddd3 <log2_ceil+0x13>
f012ddcc:	b8 01 00 00 00       	mov    $0x1,%eax
f012ddd1:	eb 1b                	jmp    f012ddee <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012ddd3:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ddda:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dddd:	eb 03                	jmp    f012dde2 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012dddf:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012dde2:	d1 6d 08             	shrl   0x8(%ebp)
f012dde5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dde9:	75 f4                	jne    f012dddf <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012ddeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ddee:	c9                   	leave  
f012ddef:	c3                   	ret    

f012ddf0 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012ddf0:	55                   	push   %ebp
f012ddf1:	89 e5                	mov    %esp,%ebp
f012ddf3:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012ddf6:	8b 45 08             	mov    0x8(%ebp),%eax
f012ddf9:	8b 00                	mov    (%eax),%eax
f012ddfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012ddfe:	8b 45 08             	mov    0x8(%ebp),%eax
f012de01:	8b 00                	mov    (%eax),%eax
f012de03:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012de06:	eb 52                	jmp    f012de5a <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012de08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012de0b:	8b 00                	mov    (%eax),%eax
f012de0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012de10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012de13:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012de16:	75 12                	jne    f012de2a <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012de18:	83 ec 0c             	sub    $0xc,%esp
f012de1b:	68 6c b3 13 f0       	push   $0xf013b36c
f012de20:	e8 0c 30 fd ff       	call   f0100e31 <cprintf>
f012de25:	83 c4 10             	add    $0x10,%esp
			break;
f012de28:	eb 3f                	jmp    f012de69 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012de2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012de2e:	74 38                	je     f012de68 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012de30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012de33:	8b 00                	mov    (%eax),%eax
f012de35:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012de38:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012de3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012de3e:	75 12                	jne    f012de52 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012de40:	83 ec 0c             	sub    $0xc,%esp
f012de43:	68 88 b3 13 f0       	push   $0xf013b388
f012de48:	e8 e4 2f fd ff       	call   f0100e31 <cprintf>
f012de4d:	83 c4 10             	add    $0x10,%esp
			break;
f012de50:	eb 17                	jmp    f012de69 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012de52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012de55:	8b 00                	mov    (%eax),%eax
f012de57:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012de5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012de5e:	74 09                	je     f012de69 <detect_loop_in_FrameInfo_list+0x79>
f012de60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012de64:	75 a2                	jne    f012de08 <detect_loop_in_FrameInfo_list+0x18>
f012de66:	eb 01                	jmp    f012de69 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012de68:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012de69:	83 ec 0c             	sub    $0xc,%esp
f012de6c:	68 9f b3 13 f0       	push   $0xf013b39f
f012de71:	e8 bb 2f fd ff       	call   f0100e31 <cprintf>
f012de76:	83 c4 10             	add    $0x10,%esp
}
f012de79:	90                   	nop
f012de7a:	c9                   	leave  
f012de7b:	c3                   	ret    

f012de7c <scarce_memory>:

void scarce_memory()
{
f012de7c:	55                   	push   %ebp
f012de7d:	89 e5                	mov    %esp,%ebp
f012de7f:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012de82:	a1 c0 99 2b f0       	mov    0xf02b99c0,%eax
f012de87:	ba 64 00 00 00       	mov    $0x64,%edx
f012de8c:	29 c2                	sub    %eax,%edx
f012de8e:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012de93:	0f af c2             	imul   %edx,%eax
f012de96:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012de9b:	f7 e2                	mul    %edx
f012de9d:	89 d0                	mov    %edx,%eax
f012de9f:	c1 e8 05             	shr    $0x5,%eax
f012dea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012dea5:	a1 c0 99 2b f0       	mov    0xf02b99c0,%eax
f012deaa:	ba 64 00 00 00       	mov    $0x64,%edx
f012deaf:	29 c2                	sub    %eax,%edx
f012deb1:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012deb6:	89 d1                	mov    %edx,%ecx
f012deb8:	0f af c8             	imul   %eax,%ecx
f012debb:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dec0:	f7 e1                	mul    %ecx
f012dec2:	c1 ea 05             	shr    $0x5,%edx
f012dec5:	89 d0                	mov    %edx,%eax
f012dec7:	c1 e0 02             	shl    $0x2,%eax
f012deca:	01 d0                	add    %edx,%eax
f012decc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ded3:	01 d0                	add    %edx,%eax
f012ded5:	c1 e0 02             	shl    $0x2,%eax
f012ded8:	29 c1                	sub    %eax,%ecx
f012deda:	89 ca                	mov    %ecx,%edx
f012dedc:	85 d2                	test   %edx,%edx
f012dede:	74 03                	je     f012dee3 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012dee0:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012dee3:	8b 15 d0 bd 2b f0    	mov    0xf02bbdd0,%edx
f012dee9:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f012deee:	29 c2                	sub    %eax,%edx
f012def0:	89 d0                	mov    %edx,%eax
f012def2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012def5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012def8:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012defb:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012defe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012df05:	eb 12                	jmp    f012df19 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012df07:	83 ec 0c             	sub    $0xc,%esp
f012df0a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012df0d:	50                   	push   %eax
f012df0e:	e8 12 94 fd ff       	call   f0107325 <allocate_frame>
f012df13:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012df16:	ff 45 f0             	incl   -0x10(%ebp)
f012df19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012df1c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012df1f:	76 e6                	jbe    f012df07 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012df21:	90                   	nop
f012df22:	c9                   	leave  
f012df23:	c3                   	ret    

f012df24 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012df24:	55                   	push   %ebp
f012df25:	89 e5                	mov    %esp,%ebp
f012df27:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012df2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012df31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012df38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012df3f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012df43:	0f 85 d3 01 00 00    	jne    f012e11c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012df49:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012df50:	e9 e1 00 00 00       	jmp    f012e036 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012df55:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012df5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012df5f:	c1 e0 04             	shl    $0x4,%eax
f012df62:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012df67:	8b 00                	mov    (%eax),%eax
f012df69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012df6c:	e9 82 00 00 00       	jmp    f012dff3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012df71:	83 ec 0c             	sub    $0xc,%esp
f012df74:	ff 75 e4             	pushl  -0x1c(%ebp)
f012df77:	e8 d9 a2 fd ff       	call   f0108255 <env_page_ws_get_size>
f012df7c:	83 c4 10             	add    $0x10,%esp
f012df7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012df82:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012df87:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df8d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012df90:	0f af c2             	imul   %edx,%eax
f012df93:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012df98:	f7 e2                	mul    %edx
f012df9a:	89 d0                	mov    %edx,%eax
f012df9c:	c1 e8 05             	shr    $0x5,%eax
f012df9f:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dfa2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012dfa7:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dfad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dfb0:	89 d1                	mov    %edx,%ecx
f012dfb2:	0f af c8             	imul   %eax,%ecx
f012dfb5:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dfba:	f7 e1                	mul    %ecx
f012dfbc:	c1 ea 05             	shr    $0x5,%edx
f012dfbf:	89 d0                	mov    %edx,%eax
f012dfc1:	c1 e0 02             	shl    $0x2,%eax
f012dfc4:	01 d0                	add    %edx,%eax
f012dfc6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dfcd:	01 d0                	add    %edx,%eax
f012dfcf:	c1 e0 02             	shl    $0x2,%eax
f012dfd2:	29 c1                	sub    %eax,%ecx
f012dfd4:	89 ca                	mov    %ecx,%edx
f012dfd6:	85 d2                	test   %edx,%edx
f012dfd8:	74 03                	je     f012dfdd <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012dfda:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012dfdd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012dfe0:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dfe3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dfe6:	c1 e0 04             	shl    $0x4,%eax
f012dfe9:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f012dfee:	8b 00                	mov    (%eax),%eax
f012dff0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dff3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dff7:	74 08                	je     f012e001 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012dff9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012dffc:	8b 40 44             	mov    0x44(%eax),%eax
f012dfff:	eb 05                	jmp    f012e006 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012e001:	b8 00 00 00 00       	mov    $0x0,%eax
f012e006:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012e009:	c1 e2 04             	shl    $0x4,%edx
f012e00c:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f012e012:	89 02                	mov    %eax,(%edx)
f012e014:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e017:	c1 e0 04             	shl    $0x4,%eax
f012e01a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f012e01f:	8b 00                	mov    (%eax),%eax
f012e021:	85 c0                	test   %eax,%eax
f012e023:	0f 85 48 ff ff ff    	jne    f012df71 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012e029:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e02d:	0f 85 3e ff ff ff    	jne    f012df71 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012e033:	ff 45 e8             	incl   -0x18(%ebp)
f012e036:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e03b:	0f b6 c0             	movzbl %al,%eax
f012e03e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e041:	0f 8f 0e ff ff ff    	jg     f012df55 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012e047:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012e04e:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f012e053:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012e056:	eb 19                	jmp    f012e071 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012e058:	83 ec 0c             	sub    $0xc,%esp
f012e05b:	ff 75 dc             	pushl  -0x24(%ebp)
f012e05e:	e8 f2 a1 fd ff       	call   f0108255 <env_page_ws_get_size>
f012e063:	83 c4 10             	add    $0x10,%esp
f012e066:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012e069:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f012e06e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012e071:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e075:	74 08                	je     f012e07f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012e077:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e07a:	8b 40 44             	mov    0x44(%eax),%eax
f012e07d:	eb 05                	jmp    f012e084 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012e07f:	b8 00 00 00 00       	mov    $0x0,%eax
f012e084:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f012e089:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f012e08e:	85 c0                	test   %eax,%eax
f012e090:	75 c6                	jne    f012e058 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012e092:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e096:	75 c0                	jne    f012e058 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012e098:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e09d:	85 c0                	test   %eax,%eax
f012e09f:	0f 84 ec 00 00 00    	je     f012e191 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012e0a5:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e0aa:	83 ec 0c             	sub    $0xc,%esp
f012e0ad:	50                   	push   %eax
f012e0ae:	e8 a2 a1 fd ff       	call   f0108255 <env_page_ws_get_size>
f012e0b3:	83 c4 10             	add    $0x10,%esp
f012e0b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e0b9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e0be:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e0c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012e0c7:	0f af c2             	imul   %edx,%eax
f012e0ca:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e0cf:	f7 e2                	mul    %edx
f012e0d1:	89 d0                	mov    %edx,%eax
f012e0d3:	c1 e8 05             	shr    $0x5,%eax
f012e0d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e0d9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e0de:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e0e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012e0e7:	89 d1                	mov    %edx,%ecx
f012e0e9:	0f af c8             	imul   %eax,%ecx
f012e0ec:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e0f1:	f7 e1                	mul    %ecx
f012e0f3:	c1 ea 05             	shr    $0x5,%edx
f012e0f6:	89 d0                	mov    %edx,%eax
f012e0f8:	c1 e0 02             	shl    $0x2,%eax
f012e0fb:	01 d0                	add    %edx,%eax
f012e0fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e104:	01 d0                	add    %edx,%eax
f012e106:	c1 e0 02             	shl    $0x2,%eax
f012e109:	29 c1                	sub    %eax,%ecx
f012e10b:	89 ca                	mov    %ecx,%edx
f012e10d:	85 d2                	test   %edx,%edx
f012e10f:	74 03                	je     f012e114 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012e111:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012e114:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e117:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e11a:	eb 75                	jmp    f012e191 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012e11c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e121:	83 ec 0c             	sub    $0xc,%esp
f012e124:	50                   	push   %eax
f012e125:	e8 2b a1 fd ff       	call   f0108255 <env_page_ws_get_size>
f012e12a:	83 c4 10             	add    $0x10,%esp
f012e12d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e130:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e135:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e13b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012e13e:	0f af c2             	imul   %edx,%eax
f012e141:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e146:	f7 e2                	mul    %edx
f012e148:	89 d0                	mov    %edx,%eax
f012e14a:	c1 e8 05             	shr    $0x5,%eax
f012e14d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e150:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e155:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e15b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012e15e:	89 d1                	mov    %edx,%ecx
f012e160:	0f af c8             	imul   %eax,%ecx
f012e163:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e168:	f7 e1                	mul    %ecx
f012e16a:	c1 ea 05             	shr    $0x5,%edx
f012e16d:	89 d0                	mov    %edx,%eax
f012e16f:	c1 e0 02             	shl    $0x2,%eax
f012e172:	01 d0                	add    %edx,%eax
f012e174:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e17b:	01 d0                	add    %edx,%eax
f012e17d:	c1 e0 02             	shl    $0x2,%eax
f012e180:	29 c1                	sub    %eax,%ecx
f012e182:	89 ca                	mov    %ecx,%edx
f012e184:	85 d2                	test   %edx,%edx
f012e186:	74 03                	je     f012e18b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012e188:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012e18b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012e18e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012e191:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012e194:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e197:	01 c2                	add    %eax,%edx
f012e199:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e19c:	01 d0                	add    %edx,%eax
}
f012e19e:	c9                   	leave  
f012e19f:	c3                   	ret    

f012e1a0 <schenv>:


void schenv()
{
f012e1a0:	55                   	push   %ebp
f012e1a1:	89 e5                	mov    %esp,%ebp
f012e1a3:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012e1a6:	c6 05 6c be 2b f0 00 	movb   $0x0,0xf02bbe6c
	__ne = NULL;
f012e1ad:	c7 05 f4 bd 2b f0 00 	movl   $0x0,0xf02bbdf4
f012e1b4:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e1b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e1be:	eb 3a                	jmp    f012e1fa <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012e1c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e1c3:	c1 e0 04             	shl    $0x4,%eax
f012e1c6:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e1cb:	83 ec 0c             	sub    $0xc,%esp
f012e1ce:	50                   	push   %eax
f012e1cf:	e8 d9 6b fd ff       	call   f0104dad <queue_size>
f012e1d4:	83 c4 10             	add    $0x10,%esp
f012e1d7:	85 c0                	test   %eax,%eax
f012e1d9:	74 1c                	je     f012e1f7 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012e1db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e1de:	c1 e0 04             	shl    $0x4,%eax
f012e1e1:	05 64 3a 25 f0       	add    $0xf0253a64,%eax
f012e1e6:	8b 00                	mov    (%eax),%eax
f012e1e8:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
			__nl = i;
f012e1ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e1f0:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
			break;
f012e1f5:	eb 10                	jmp    f012e207 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e1f7:	ff 45 f4             	incl   -0xc(%ebp)
f012e1fa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e1ff:	0f b6 c0             	movzbl %al,%eax
f012e202:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e205:	7f b9                	jg     f012e1c0 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012e207:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e20c:	85 c0                	test   %eax,%eax
f012e20e:	0f 84 86 00 00 00    	je     f012e29a <schenv+0xfa>
	{
		if (__ne != NULL)
f012e214:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e219:	85 c0                	test   %eax,%eax
f012e21b:	74 4b                	je     f012e268 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012e21d:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e222:	0f b6 c0             	movzbl %al,%eax
f012e225:	8d 50 01             	lea    0x1(%eax),%edx
f012e228:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e22d:	0f b6 c0             	movzbl %al,%eax
f012e230:	39 c2                	cmp    %eax,%edx
f012e232:	7d 66                	jge    f012e29a <schenv+0xfa>
			{
				__ne = curenv;
f012e234:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e239:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e23e:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e243:	0f b6 c0             	movzbl %al,%eax
f012e246:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e24c:	0f b6 d2             	movzbl %dl,%edx
f012e24f:	4a                   	dec    %edx
f012e250:	39 d0                	cmp    %edx,%eax
f012e252:	7d 08                	jge    f012e25c <schenv+0xbc>
f012e254:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e259:	40                   	inc    %eax
f012e25a:	eb 05                	jmp    f012e261 <schenv+0xc1>
f012e25c:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e261:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e266:	eb 32                	jmp    f012e29a <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e268:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e26d:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e272:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e277:	0f b6 c0             	movzbl %al,%eax
f012e27a:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e280:	0f b6 d2             	movzbl %dl,%edx
f012e283:	4a                   	dec    %edx
f012e284:	39 d0                	cmp    %edx,%eax
f012e286:	7d 08                	jge    f012e290 <schenv+0xf0>
f012e288:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e28d:	40                   	inc    %eax
f012e28e:	eb 05                	jmp    f012e295 <schenv+0xf5>
f012e290:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e295:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
		}
	}
}
f012e29a:	90                   	nop
f012e29b:	c9                   	leave  
f012e29c:	c3                   	ret    

f012e29d <chksch>:

void chksch(uint8 onoff)
{
f012e29d:	55                   	push   %ebp
f012e29e:	89 e5                	mov    %esp,%ebp
f012e2a0:	83 ec 04             	sub    $0x4,%esp
f012e2a3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e2a6:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e2a9:	c7 05 68 be 2b f0 00 	movl   $0x0,0xf02bbe68
f012e2b0:	00 00 00 
	__ne = NULL;
f012e2b3:	c7 05 f4 bd 2b f0 00 	movl   $0x0,0xf02bbdf4
f012e2ba:	00 00 00 
	__pl = 0 ;
f012e2bd:	c6 05 58 3a 25 f0 00 	movb   $0x0,0xf0253a58
	__nl = 0 ;
f012e2c4:	c6 05 6c be 2b f0 00 	movb   $0x0,0xf02bbe6c
	__chkstatus = onoff;
f012e2cb:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e2ce:	a2 f0 bd 2b f0       	mov    %al,0xf02bbdf0
}
f012e2d3:	90                   	nop
f012e2d4:	c9                   	leave  
f012e2d5:	c3                   	ret    

f012e2d6 <chk1>:
void chk1()
{
f012e2d6:	55                   	push   %ebp
f012e2d7:	89 e5                	mov    %esp,%ebp
f012e2d9:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e2dc:	a0 f0 bd 2b f0       	mov    0xf02bbdf0,%al
f012e2e1:	84 c0                	test   %al,%al
f012e2e3:	74 2b                	je     f012e310 <chk1+0x3a>
		return ;
	__pe = curenv;
f012e2e5:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e2ea:	a3 68 be 2b f0       	mov    %eax,0xf02bbe68
	__pl = __nl ;
f012e2ef:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e2f4:	a2 58 3a 25 f0       	mov    %al,0xf0253a58
	if (__pe == NULL)
f012e2f9:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e2fe:	85 c0                	test   %eax,%eax
f012e300:	75 07                	jne    f012e309 <chk1+0x33>
	{
		__pl = 0;
f012e302:	c6 05 58 3a 25 f0 00 	movb   $0x0,0xf0253a58
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e309:	e8 92 fe ff ff       	call   f012e1a0 <schenv>
f012e30e:	eb 01                	jmp    f012e311 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e310:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e311:	c9                   	leave  
f012e312:	c3                   	ret    

f012e313 <chk2>:
void chk2(struct Env* __se)
{
f012e313:	55                   	push   %ebp
f012e314:	89 e5                	mov    %esp,%ebp
f012e316:	53                   	push   %ebx
f012e317:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e31a:	a0 f0 bd 2b f0       	mov    0xf02bbdf0,%al
f012e31f:	84 c0                	test   %al,%al
f012e321:	0f 84 35 02 00 00    	je     f012e55c <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e327:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e32c:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e32f:	74 19                	je     f012e34a <chk2+0x37>
f012e331:	68 b9 b3 13 f0       	push   $0xf013b3b9
f012e336:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e33b:	68 f8 00 00 00       	push   $0xf8
f012e340:	68 0b b3 13 f0       	push   $0xf013b30b
f012e345:	e8 1c 1f fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e34a:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e34f:	85 c0                	test   %eax,%eax
f012e351:	0f 84 1b 01 00 00    	je     f012e472 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e357:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e35c:	0f b6 c0             	movzbl %al,%eax
f012e35f:	8a 80 e8 bd 2b f0    	mov    -0xfd44218(%eax),%al
f012e365:	0f b6 d8             	movzbl %al,%ebx
f012e368:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e36d:	99                   	cltd   
f012e36e:	f7 fb                	idiv   %ebx
f012e370:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e376:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e37b:	0f b6 c0             	movzbl %al,%eax
f012e37e:	8a 80 e8 bd 2b f0    	mov    -0xfd44218(%eax),%al
f012e384:	0f b6 d8             	movzbl %al,%ebx
f012e387:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e38c:	99                   	cltd   
f012e38d:	f7 fb                	idiv   %ebx
f012e38f:	89 c3                	mov    %eax,%ebx
f012e391:	89 c8                	mov    %ecx,%eax
f012e393:	99                   	cltd   
f012e394:	f7 fb                	idiv   %ebx
f012e396:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e39a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e39e:	83 e0 01             	and    $0x1,%eax
f012e3a1:	66 85 c0             	test   %ax,%ax
f012e3a4:	74 07                	je     f012e3ad <chk2+0x9a>
f012e3a6:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e3aa:	40                   	inc    %eax
f012e3ab:	eb 04                	jmp    f012e3b1 <chk2+0x9e>
f012e3ad:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e3b1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e3b5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e3b9:	89 d0                	mov    %edx,%eax
f012e3bb:	c1 e0 02             	shl    $0x2,%eax
f012e3be:	01 d0                	add    %edx,%eax
f012e3c0:	01 c0                	add    %eax,%eax
f012e3c2:	01 d0                	add    %edx,%eax
f012e3c4:	c1 e0 02             	shl    $0x2,%eax
f012e3c7:	01 d0                	add    %edx,%eax
f012e3c9:	01 c0                	add    %eax,%eax
f012e3cb:	89 c1                	mov    %eax,%ecx
f012e3cd:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e3d2:	f7 e9                	imul   %ecx
f012e3d4:	c1 fa 05             	sar    $0x5,%edx
f012e3d7:	89 c8                	mov    %ecx,%eax
f012e3d9:	c1 f8 1f             	sar    $0x1f,%eax
f012e3dc:	29 c2                	sub    %eax,%edx
f012e3de:	89 d0                	mov    %edx,%eax
f012e3e0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e3e4:	e8 ca 68 fd ff       	call   f0104cb3 <kclock_read_cnt0>
f012e3e9:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e3ed:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e3f1:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e3f5:	76 0a                	jbe    f012e401 <chk2+0xee>
f012e3f7:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e3fb:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e3ff:	76 19                	jbe    f012e41a <chk2+0x107>
f012e401:	68 dc b3 13 f0       	push   $0xf013b3dc
f012e406:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e40b:	68 02 01 00 00       	push   $0x102
f012e410:	68 0b b3 13 f0       	push   $0xf013b30b
f012e415:	e8 4c 1e fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e41a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e421:	eb 42                	jmp    f012e465 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e423:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e428:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e42b:	89 c2                	mov    %eax,%edx
f012e42d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e430:	c1 e0 04             	shl    $0x4,%eax
f012e433:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e438:	83 ec 08             	sub    $0x8,%esp
f012e43b:	52                   	push   %edx
f012e43c:	50                   	push   %eax
f012e43d:	e8 85 6b fd ff       	call   f0104fc7 <find_env_in_queue>
f012e442:	83 c4 10             	add    $0x10,%esp
f012e445:	85 c0                	test   %eax,%eax
f012e447:	74 19                	je     f012e462 <chk2+0x14f>
f012e449:	68 00 b4 13 f0       	push   $0xf013b400
f012e44e:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e453:	68 06 01 00 00       	push   $0x106
f012e458:	68 0b b3 13 f0       	push   $0xf013b30b
f012e45d:	e8 04 1e fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e462:	ff 45 f4             	incl   -0xc(%ebp)
f012e465:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e46a:	0f b6 c0             	movzbl %al,%eax
f012e46d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e470:	7f b1                	jg     f012e423 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e472:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e477:	85 c0                	test   %eax,%eax
f012e479:	0f 84 de 00 00 00    	je     f012e55d <chk2+0x24a>
f012e47f:	8b 15 68 be 2b f0    	mov    0xf02bbe68,%edx
f012e485:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e48a:	39 c2                	cmp    %eax,%edx
f012e48c:	0f 84 cb 00 00 00    	je     f012e55d <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e492:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e497:	0f b6 c0             	movzbl %al,%eax
f012e49a:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e4a0:	0f b6 d2             	movzbl %dl,%edx
f012e4a3:	4a                   	dec    %edx
f012e4a4:	39 d0                	cmp    %edx,%eax
f012e4a6:	74 08                	je     f012e4b0 <chk2+0x19d>
f012e4a8:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e4ad:	40                   	inc    %eax
f012e4ae:	eb 05                	jmp    f012e4b5 <chk2+0x1a2>
f012e4b0:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e4b5:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e4b8:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e4bd:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e4c0:	89 c2                	mov    %eax,%edx
f012e4c2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e4c6:	c1 e0 04             	shl    $0x4,%eax
f012e4c9:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e4ce:	83 ec 08             	sub    $0x8,%esp
f012e4d1:	52                   	push   %edx
f012e4d2:	50                   	push   %eax
f012e4d3:	e8 ef 6a fd ff       	call   f0104fc7 <find_env_in_queue>
f012e4d8:	83 c4 10             	add    $0x10,%esp
f012e4db:	85 c0                	test   %eax,%eax
f012e4dd:	75 19                	jne    f012e4f8 <chk2+0x1e5>
f012e4df:	68 40 b4 13 f0       	push   $0xf013b440
f012e4e4:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e4e9:	68 0c 01 00 00       	push   $0x10c
f012e4ee:	68 0b b3 13 f0       	push   $0xf013b30b
f012e4f3:	e8 6e 1d fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e4f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e4ff:	eb 4c                	jmp    f012e54d <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e501:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e505:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e508:	74 3f                	je     f012e549 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e50a:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e50f:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e512:	89 c2                	mov    %eax,%edx
f012e514:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e517:	c1 e0 04             	shl    $0x4,%eax
f012e51a:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e51f:	83 ec 08             	sub    $0x8,%esp
f012e522:	52                   	push   %edx
f012e523:	50                   	push   %eax
f012e524:	e8 9e 6a fd ff       	call   f0104fc7 <find_env_in_queue>
f012e529:	83 c4 10             	add    $0x10,%esp
f012e52c:	85 c0                	test   %eax,%eax
f012e52e:	74 1a                	je     f012e54a <chk2+0x237>
f012e530:	68 84 b4 13 f0       	push   $0xf013b484
f012e535:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e53a:	68 10 01 00 00       	push   $0x110
f012e53f:	68 0b b3 13 f0       	push   $0xf013b30b
f012e544:	e8 1d 1d fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e549:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e54a:	ff 45 f0             	incl   -0x10(%ebp)
f012e54d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e552:	0f b6 c0             	movzbl %al,%eax
f012e555:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e558:	7f a7                	jg     f012e501 <chk2+0x1ee>
f012e55a:	eb 01                	jmp    f012e55d <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e55c:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e55d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e560:	c9                   	leave  
f012e561:	c3                   	ret    

f012e562 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e562:	55                   	push   %ebp
f012e563:	89 e5                	mov    %esp,%ebp
f012e565:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e568:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e56f:	eb 40                	jmp    f012e5b1 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e574:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e57a:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e57f:	83 ec 08             	sub    $0x8,%esp
f012e582:	52                   	push   %edx
f012e583:	50                   	push   %eax
f012e584:	e8 92 01 00 00       	call   f012e71b <check_va2pa>
f012e589:	83 c4 10             	add    $0x10,%esp
f012e58c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e58f:	74 19                	je     f012e5aa <check_boot_pgdir+0x48>
f012e591:	68 c4 b4 13 f0       	push   $0xf013b4c4
f012e596:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e59b:	68 37 01 00 00       	push   $0x137
f012e5a0:	68 0b b3 13 f0       	push   $0xf013b30b
f012e5a5:	e8 06 1c fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e5aa:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e5b1:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e5b8:	75 b7                	jne    f012e571 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e5ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e5c1:	eb 74                	jmp    f012e637 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e5c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e5c6:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e5cc:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e5d1:	83 ec 08             	sub    $0x8,%esp
f012e5d4:	52                   	push   %edx
f012e5d5:	50                   	push   %eax
f012e5d6:	e8 40 01 00 00       	call   f012e71b <check_va2pa>
f012e5db:	83 c4 10             	add    $0x10,%esp
f012e5de:	c7 45 f0 00 60 18 f0 	movl   $0xf0186000,-0x10(%ebp)
f012e5e5:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e5ec:	77 17                	ja     f012e605 <check_boot_pgdir+0xa3>
f012e5ee:	ff 75 f0             	pushl  -0x10(%ebp)
f012e5f1:	68 fc b4 13 f0       	push   $0xf013b4fc
f012e5f6:	68 3c 01 00 00       	push   $0x13c
f012e5fb:	68 0b b3 13 f0       	push   $0xf013b30b
f012e600:	e8 ab 1b fd ff       	call   f01001b0 <_panic>
f012e605:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e608:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e60e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e611:	01 ca                	add    %ecx,%edx
f012e613:	39 d0                	cmp    %edx,%eax
f012e615:	74 19                	je     f012e630 <check_boot_pgdir+0xce>
f012e617:	68 30 b5 13 f0       	push   $0xf013b530
f012e61c:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e621:	68 3c 01 00 00       	push   $0x13c
f012e626:	68 0b b3 13 f0       	push   $0xf013b30b
f012e62b:	e8 80 1b fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e630:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e637:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e63e:	76 83                	jbe    f012e5c3 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e640:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e647:	e9 af 00 00 00       	jmp    f012e6fb <check_boot_pgdir+0x199>
		switch (i) {
f012e64c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e64f:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e654:	74 11                	je     f012e667 <check_boot_pgdir+0x105>
f012e656:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e65b:	72 36                	jb     f012e693 <check_boot_pgdir+0x131>
f012e65d:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e662:	83 f8 02             	cmp    $0x2,%eax
f012e665:	77 2c                	ja     f012e693 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e667:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e66c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e66f:	c1 e2 02             	shl    $0x2,%edx
f012e672:	01 d0                	add    %edx,%eax
f012e674:	8b 00                	mov    (%eax),%eax
f012e676:	85 c0                	test   %eax,%eax
f012e678:	75 7a                	jne    f012e6f4 <check_boot_pgdir+0x192>
f012e67a:	68 b2 b5 13 f0       	push   $0xf013b5b2
f012e67f:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e684:	68 47 01 00 00       	push   $0x147
f012e689:	68 0b b3 13 f0       	push   $0xf013b30b
f012e68e:	e8 1d 1b fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e693:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e69a:	76 2c                	jbe    f012e6c8 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e69c:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e6a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e6a4:	c1 e2 02             	shl    $0x2,%edx
f012e6a7:	01 d0                	add    %edx,%eax
f012e6a9:	8b 00                	mov    (%eax),%eax
f012e6ab:	85 c0                	test   %eax,%eax
f012e6ad:	75 48                	jne    f012e6f7 <check_boot_pgdir+0x195>
f012e6af:	68 b2 b5 13 f0       	push   $0xf013b5b2
f012e6b4:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e6b9:	68 4b 01 00 00       	push   $0x14b
f012e6be:	68 0b b3 13 f0       	push   $0xf013b30b
f012e6c3:	e8 e8 1a fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e6c8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e6cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e6d0:	c1 e2 02             	shl    $0x2,%edx
f012e6d3:	01 d0                	add    %edx,%eax
f012e6d5:	8b 00                	mov    (%eax),%eax
f012e6d7:	85 c0                	test   %eax,%eax
f012e6d9:	74 1c                	je     f012e6f7 <check_boot_pgdir+0x195>
f012e6db:	68 c8 b5 13 f0       	push   $0xf013b5c8
f012e6e0:	68 c6 b3 13 f0       	push   $0xf013b3c6
f012e6e5:	68 4d 01 00 00       	push   $0x14d
f012e6ea:	68 0b b3 13 f0       	push   $0xf013b30b
f012e6ef:	e8 bc 1a fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e6f4:	90                   	nop
f012e6f5:	eb 01                	jmp    f012e6f8 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e6f7:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e6f8:	ff 45 f4             	incl   -0xc(%ebp)
f012e6fb:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e702:	0f 86 44 ff ff ff    	jbe    f012e64c <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e708:	83 ec 0c             	sub    $0xc,%esp
f012e70b:	68 e4 b5 13 f0       	push   $0xf013b5e4
f012e710:	e8 1c 27 fd ff       	call   f0100e31 <cprintf>
f012e715:	83 c4 10             	add    $0x10,%esp
}
f012e718:	90                   	nop
f012e719:	c9                   	leave  
f012e71a:	c3                   	ret    

f012e71b <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e71b:	55                   	push   %ebp
f012e71c:	89 e5                	mov    %esp,%ebp
f012e71e:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e721:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e724:	c1 e8 16             	shr    $0x16,%eax
f012e727:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e72e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e731:	01 d0                	add    %edx,%eax
f012e733:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e736:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e739:	8b 00                	mov    (%eax),%eax
f012e73b:	83 e0 01             	and    $0x1,%eax
f012e73e:	85 c0                	test   %eax,%eax
f012e740:	75 0a                	jne    f012e74c <check_va2pa+0x31>
		return ~0;
f012e742:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e747:	e9 87 00 00 00       	jmp    f012e7d3 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e74c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e74f:	8b 00                	mov    (%eax),%eax
f012e751:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e756:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e759:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e75c:	c1 e8 0c             	shr    $0xc,%eax
f012e75f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e762:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012e767:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e76a:	72 17                	jb     f012e783 <check_va2pa+0x68>
f012e76c:	ff 75 f0             	pushl  -0x10(%ebp)
f012e76f:	68 04 b6 13 f0       	push   $0xf013b604
f012e774:	68 63 01 00 00       	push   $0x163
f012e779:	68 0b b3 13 f0       	push   $0xf013b30b
f012e77e:	e8 2d 1a fd ff       	call   f01001b0 <_panic>
f012e783:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e786:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e78b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e78e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e791:	c1 e8 0c             	shr    $0xc,%eax
f012e794:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e799:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e7a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e7a3:	01 d0                	add    %edx,%eax
f012e7a5:	8b 00                	mov    (%eax),%eax
f012e7a7:	83 e0 01             	and    $0x1,%eax
f012e7aa:	85 c0                	test   %eax,%eax
f012e7ac:	75 07                	jne    f012e7b5 <check_va2pa+0x9a>
		return ~0;
f012e7ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e7b3:	eb 1e                	jmp    f012e7d3 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e7b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e7b8:	c1 e8 0c             	shr    $0xc,%eax
f012e7bb:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e7c0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e7c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e7ca:	01 d0                	add    %edx,%eax
f012e7cc:	8b 00                	mov    (%eax),%eax
f012e7ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e7d3:	c9                   	leave  
f012e7d4:	c3                   	ret    

f012e7d5 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e7d5:	55                   	push   %ebp
f012e7d6:	89 e5                	mov    %esp,%ebp
f012e7d8:	53                   	push   %ebx
f012e7d9:	83 ec 14             	sub    $0x14,%esp
f012e7dc:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7df:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e7e2:	8b 45 14             	mov    0x14(%ebp),%eax
f012e7e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e7e8:	8b 45 18             	mov    0x18(%ebp),%eax
f012e7eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7f0:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e7f3:	77 55                	ja     f012e84a <printnum+0x75>
f012e7f5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e7f8:	72 05                	jb     f012e7ff <printnum+0x2a>
f012e7fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e7fd:	77 4b                	ja     f012e84a <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e7ff:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e802:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e805:	8b 45 18             	mov    0x18(%ebp),%eax
f012e808:	ba 00 00 00 00       	mov    $0x0,%edx
f012e80d:	52                   	push   %edx
f012e80e:	50                   	push   %eax
f012e80f:	ff 75 f4             	pushl  -0xc(%ebp)
f012e812:	ff 75 f0             	pushl  -0x10(%ebp)
f012e815:	e8 de 1a 00 00       	call   f01302f8 <__udivdi3>
f012e81a:	83 c4 10             	add    $0x10,%esp
f012e81d:	83 ec 04             	sub    $0x4,%esp
f012e820:	ff 75 20             	pushl  0x20(%ebp)
f012e823:	53                   	push   %ebx
f012e824:	ff 75 18             	pushl  0x18(%ebp)
f012e827:	52                   	push   %edx
f012e828:	50                   	push   %eax
f012e829:	ff 75 0c             	pushl  0xc(%ebp)
f012e82c:	ff 75 08             	pushl  0x8(%ebp)
f012e82f:	e8 a1 ff ff ff       	call   f012e7d5 <printnum>
f012e834:	83 c4 20             	add    $0x20,%esp
f012e837:	eb 1a                	jmp    f012e853 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e839:	83 ec 08             	sub    $0x8,%esp
f012e83c:	ff 75 0c             	pushl  0xc(%ebp)
f012e83f:	ff 75 20             	pushl  0x20(%ebp)
f012e842:	8b 45 08             	mov    0x8(%ebp),%eax
f012e845:	ff d0                	call   *%eax
f012e847:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e84a:	ff 4d 1c             	decl   0x1c(%ebp)
f012e84d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e851:	7f e6                	jg     f012e839 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e853:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e856:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e85b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e85e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e861:	53                   	push   %ebx
f012e862:	51                   	push   %ecx
f012e863:	52                   	push   %edx
f012e864:	50                   	push   %eax
f012e865:	e8 9e 1b 00 00       	call   f0130408 <__umoddi3>
f012e86a:	83 c4 10             	add    $0x10,%esp
f012e86d:	05 54 b8 13 f0       	add    $0xf013b854,%eax
f012e872:	8a 00                	mov    (%eax),%al
f012e874:	0f be c0             	movsbl %al,%eax
f012e877:	83 ec 08             	sub    $0x8,%esp
f012e87a:	ff 75 0c             	pushl  0xc(%ebp)
f012e87d:	50                   	push   %eax
f012e87e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e881:	ff d0                	call   *%eax
f012e883:	83 c4 10             	add    $0x10,%esp
}
f012e886:	90                   	nop
f012e887:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e88a:	c9                   	leave  
f012e88b:	c3                   	ret    

f012e88c <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e88c:	55                   	push   %ebp
f012e88d:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e88f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e893:	7e 1c                	jle    f012e8b1 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e895:	8b 45 08             	mov    0x8(%ebp),%eax
f012e898:	8b 00                	mov    (%eax),%eax
f012e89a:	8d 50 08             	lea    0x8(%eax),%edx
f012e89d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8a0:	89 10                	mov    %edx,(%eax)
f012e8a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8a5:	8b 00                	mov    (%eax),%eax
f012e8a7:	83 e8 08             	sub    $0x8,%eax
f012e8aa:	8b 50 04             	mov    0x4(%eax),%edx
f012e8ad:	8b 00                	mov    (%eax),%eax
f012e8af:	eb 40                	jmp    f012e8f1 <getuint+0x65>
	else if (lflag)
f012e8b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e8b5:	74 1e                	je     f012e8d5 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e8b7:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8ba:	8b 00                	mov    (%eax),%eax
f012e8bc:	8d 50 04             	lea    0x4(%eax),%edx
f012e8bf:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8c2:	89 10                	mov    %edx,(%eax)
f012e8c4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8c7:	8b 00                	mov    (%eax),%eax
f012e8c9:	83 e8 04             	sub    $0x4,%eax
f012e8cc:	8b 00                	mov    (%eax),%eax
f012e8ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8d3:	eb 1c                	jmp    f012e8f1 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e8d5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8d8:	8b 00                	mov    (%eax),%eax
f012e8da:	8d 50 04             	lea    0x4(%eax),%edx
f012e8dd:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8e0:	89 10                	mov    %edx,(%eax)
f012e8e2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8e5:	8b 00                	mov    (%eax),%eax
f012e8e7:	83 e8 04             	sub    $0x4,%eax
f012e8ea:	8b 00                	mov    (%eax),%eax
f012e8ec:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e8f1:	5d                   	pop    %ebp
f012e8f2:	c3                   	ret    

f012e8f3 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e8f3:	55                   	push   %ebp
f012e8f4:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e8f6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e8fa:	7e 1c                	jle    f012e918 <getint+0x25>
		return va_arg(*ap, long long);
f012e8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8ff:	8b 00                	mov    (%eax),%eax
f012e901:	8d 50 08             	lea    0x8(%eax),%edx
f012e904:	8b 45 08             	mov    0x8(%ebp),%eax
f012e907:	89 10                	mov    %edx,(%eax)
f012e909:	8b 45 08             	mov    0x8(%ebp),%eax
f012e90c:	8b 00                	mov    (%eax),%eax
f012e90e:	83 e8 08             	sub    $0x8,%eax
f012e911:	8b 50 04             	mov    0x4(%eax),%edx
f012e914:	8b 00                	mov    (%eax),%eax
f012e916:	eb 38                	jmp    f012e950 <getint+0x5d>
	else if (lflag)
f012e918:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e91c:	74 1a                	je     f012e938 <getint+0x45>
		return va_arg(*ap, long);
f012e91e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e921:	8b 00                	mov    (%eax),%eax
f012e923:	8d 50 04             	lea    0x4(%eax),%edx
f012e926:	8b 45 08             	mov    0x8(%ebp),%eax
f012e929:	89 10                	mov    %edx,(%eax)
f012e92b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e92e:	8b 00                	mov    (%eax),%eax
f012e930:	83 e8 04             	sub    $0x4,%eax
f012e933:	8b 00                	mov    (%eax),%eax
f012e935:	99                   	cltd   
f012e936:	eb 18                	jmp    f012e950 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e938:	8b 45 08             	mov    0x8(%ebp),%eax
f012e93b:	8b 00                	mov    (%eax),%eax
f012e93d:	8d 50 04             	lea    0x4(%eax),%edx
f012e940:	8b 45 08             	mov    0x8(%ebp),%eax
f012e943:	89 10                	mov    %edx,(%eax)
f012e945:	8b 45 08             	mov    0x8(%ebp),%eax
f012e948:	8b 00                	mov    (%eax),%eax
f012e94a:	83 e8 04             	sub    $0x4,%eax
f012e94d:	8b 00                	mov    (%eax),%eax
f012e94f:	99                   	cltd   
}
f012e950:	5d                   	pop    %ebp
f012e951:	c3                   	ret    

f012e952 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e952:	55                   	push   %ebp
f012e953:	89 e5                	mov    %esp,%ebp
f012e955:	56                   	push   %esi
f012e956:	53                   	push   %ebx
f012e957:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e95a:	eb 17                	jmp    f012e973 <vprintfmt+0x21>
			if (ch == '\0')
f012e95c:	85 db                	test   %ebx,%ebx
f012e95e:	0f 84 af 03 00 00    	je     f012ed13 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e964:	83 ec 08             	sub    $0x8,%esp
f012e967:	ff 75 0c             	pushl  0xc(%ebp)
f012e96a:	53                   	push   %ebx
f012e96b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e96e:	ff d0                	call   *%eax
f012e970:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e973:	8b 45 10             	mov    0x10(%ebp),%eax
f012e976:	8d 50 01             	lea    0x1(%eax),%edx
f012e979:	89 55 10             	mov    %edx,0x10(%ebp)
f012e97c:	8a 00                	mov    (%eax),%al
f012e97e:	0f b6 d8             	movzbl %al,%ebx
f012e981:	83 fb 25             	cmp    $0x25,%ebx
f012e984:	75 d6                	jne    f012e95c <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e986:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e98a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e991:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e998:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e99f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e9a6:	8b 45 10             	mov    0x10(%ebp),%eax
f012e9a9:	8d 50 01             	lea    0x1(%eax),%edx
f012e9ac:	89 55 10             	mov    %edx,0x10(%ebp)
f012e9af:	8a 00                	mov    (%eax),%al
f012e9b1:	0f b6 d8             	movzbl %al,%ebx
f012e9b4:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e9b7:	83 f8 55             	cmp    $0x55,%eax
f012e9ba:	0f 87 2b 03 00 00    	ja     f012eceb <vprintfmt+0x399>
f012e9c0:	8b 04 85 78 b8 13 f0 	mov    -0xfec4788(,%eax,4),%eax
f012e9c7:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e9c9:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e9cd:	eb d7                	jmp    f012e9a6 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e9cf:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e9d3:	eb d1                	jmp    f012e9a6 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e9d5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e9dc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e9df:	89 d0                	mov    %edx,%eax
f012e9e1:	c1 e0 02             	shl    $0x2,%eax
f012e9e4:	01 d0                	add    %edx,%eax
f012e9e6:	01 c0                	add    %eax,%eax
f012e9e8:	01 d8                	add    %ebx,%eax
f012e9ea:	83 e8 30             	sub    $0x30,%eax
f012e9ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e9f0:	8b 45 10             	mov    0x10(%ebp),%eax
f012e9f3:	8a 00                	mov    (%eax),%al
f012e9f5:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e9f8:	83 fb 2f             	cmp    $0x2f,%ebx
f012e9fb:	7e 3e                	jle    f012ea3b <vprintfmt+0xe9>
f012e9fd:	83 fb 39             	cmp    $0x39,%ebx
f012ea00:	7f 39                	jg     f012ea3b <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012ea02:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012ea05:	eb d5                	jmp    f012e9dc <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012ea07:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea0a:	83 c0 04             	add    $0x4,%eax
f012ea0d:	89 45 14             	mov    %eax,0x14(%ebp)
f012ea10:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea13:	83 e8 04             	sub    $0x4,%eax
f012ea16:	8b 00                	mov    (%eax),%eax
f012ea18:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012ea1b:	eb 1f                	jmp    f012ea3c <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012ea1d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ea21:	79 83                	jns    f012e9a6 <vprintfmt+0x54>
				width = 0;
f012ea23:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012ea2a:	e9 77 ff ff ff       	jmp    f012e9a6 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012ea2f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012ea36:	e9 6b ff ff ff       	jmp    f012e9a6 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012ea3b:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012ea3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ea40:	0f 89 60 ff ff ff    	jns    f012e9a6 <vprintfmt+0x54>
				width = precision, precision = -1;
f012ea46:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ea49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012ea4c:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012ea53:	e9 4e ff ff ff       	jmp    f012e9a6 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012ea58:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012ea5b:	e9 46 ff ff ff       	jmp    f012e9a6 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012ea60:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea63:	83 c0 04             	add    $0x4,%eax
f012ea66:	89 45 14             	mov    %eax,0x14(%ebp)
f012ea69:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea6c:	83 e8 04             	sub    $0x4,%eax
f012ea6f:	8b 00                	mov    (%eax),%eax
f012ea71:	83 ec 08             	sub    $0x8,%esp
f012ea74:	ff 75 0c             	pushl  0xc(%ebp)
f012ea77:	50                   	push   %eax
f012ea78:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea7b:	ff d0                	call   *%eax
f012ea7d:	83 c4 10             	add    $0x10,%esp
			break;
f012ea80:	e9 89 02 00 00       	jmp    f012ed0e <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012ea85:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea88:	83 c0 04             	add    $0x4,%eax
f012ea8b:	89 45 14             	mov    %eax,0x14(%ebp)
f012ea8e:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea91:	83 e8 04             	sub    $0x4,%eax
f012ea94:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012ea96:	85 db                	test   %ebx,%ebx
f012ea98:	79 02                	jns    f012ea9c <vprintfmt+0x14a>
				err = -err;
f012ea9a:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012ea9c:	83 fb 64             	cmp    $0x64,%ebx
f012ea9f:	7f 0b                	jg     f012eaac <vprintfmt+0x15a>
f012eaa1:	8b 34 9d c0 b6 13 f0 	mov    -0xfec4940(,%ebx,4),%esi
f012eaa8:	85 f6                	test   %esi,%esi
f012eaaa:	75 19                	jne    f012eac5 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012eaac:	53                   	push   %ebx
f012eaad:	68 65 b8 13 f0       	push   $0xf013b865
f012eab2:	ff 75 0c             	pushl  0xc(%ebp)
f012eab5:	ff 75 08             	pushl  0x8(%ebp)
f012eab8:	e8 5e 02 00 00       	call   f012ed1b <printfmt>
f012eabd:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012eac0:	e9 49 02 00 00       	jmp    f012ed0e <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012eac5:	56                   	push   %esi
f012eac6:	68 6e b8 13 f0       	push   $0xf013b86e
f012eacb:	ff 75 0c             	pushl  0xc(%ebp)
f012eace:	ff 75 08             	pushl  0x8(%ebp)
f012ead1:	e8 45 02 00 00       	call   f012ed1b <printfmt>
f012ead6:	83 c4 10             	add    $0x10,%esp
			break;
f012ead9:	e9 30 02 00 00       	jmp    f012ed0e <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012eade:	8b 45 14             	mov    0x14(%ebp),%eax
f012eae1:	83 c0 04             	add    $0x4,%eax
f012eae4:	89 45 14             	mov    %eax,0x14(%ebp)
f012eae7:	8b 45 14             	mov    0x14(%ebp),%eax
f012eaea:	83 e8 04             	sub    $0x4,%eax
f012eaed:	8b 30                	mov    (%eax),%esi
f012eaef:	85 f6                	test   %esi,%esi
f012eaf1:	75 05                	jne    f012eaf8 <vprintfmt+0x1a6>
				p = "(null)";
f012eaf3:	be 71 b8 13 f0       	mov    $0xf013b871,%esi
			if (width > 0 && padc != '-')
f012eaf8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eafc:	7e 6d                	jle    f012eb6b <vprintfmt+0x219>
f012eafe:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012eb02:	74 67                	je     f012eb6b <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012eb04:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012eb07:	83 ec 08             	sub    $0x8,%esp
f012eb0a:	50                   	push   %eax
f012eb0b:	56                   	push   %esi
f012eb0c:	e8 12 05 00 00       	call   f012f023 <strnlen>
f012eb11:	83 c4 10             	add    $0x10,%esp
f012eb14:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012eb17:	eb 16                	jmp    f012eb2f <vprintfmt+0x1dd>
					putch(padc, putdat);
f012eb19:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012eb1d:	83 ec 08             	sub    $0x8,%esp
f012eb20:	ff 75 0c             	pushl  0xc(%ebp)
f012eb23:	50                   	push   %eax
f012eb24:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb27:	ff d0                	call   *%eax
f012eb29:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012eb2c:	ff 4d e4             	decl   -0x1c(%ebp)
f012eb2f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eb33:	7f e4                	jg     f012eb19 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012eb35:	eb 34                	jmp    f012eb6b <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012eb37:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012eb3b:	74 1c                	je     f012eb59 <vprintfmt+0x207>
f012eb3d:	83 fb 1f             	cmp    $0x1f,%ebx
f012eb40:	7e 05                	jle    f012eb47 <vprintfmt+0x1f5>
f012eb42:	83 fb 7e             	cmp    $0x7e,%ebx
f012eb45:	7e 12                	jle    f012eb59 <vprintfmt+0x207>
					putch('?', putdat);
f012eb47:	83 ec 08             	sub    $0x8,%esp
f012eb4a:	ff 75 0c             	pushl  0xc(%ebp)
f012eb4d:	6a 3f                	push   $0x3f
f012eb4f:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb52:	ff d0                	call   *%eax
f012eb54:	83 c4 10             	add    $0x10,%esp
f012eb57:	eb 0f                	jmp    f012eb68 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012eb59:	83 ec 08             	sub    $0x8,%esp
f012eb5c:	ff 75 0c             	pushl  0xc(%ebp)
f012eb5f:	53                   	push   %ebx
f012eb60:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb63:	ff d0                	call   *%eax
f012eb65:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012eb68:	ff 4d e4             	decl   -0x1c(%ebp)
f012eb6b:	89 f0                	mov    %esi,%eax
f012eb6d:	8d 70 01             	lea    0x1(%eax),%esi
f012eb70:	8a 00                	mov    (%eax),%al
f012eb72:	0f be d8             	movsbl %al,%ebx
f012eb75:	85 db                	test   %ebx,%ebx
f012eb77:	74 24                	je     f012eb9d <vprintfmt+0x24b>
f012eb79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012eb7d:	78 b8                	js     f012eb37 <vprintfmt+0x1e5>
f012eb7f:	ff 4d e0             	decl   -0x20(%ebp)
f012eb82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012eb86:	79 af                	jns    f012eb37 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012eb88:	eb 13                	jmp    f012eb9d <vprintfmt+0x24b>
				putch(' ', putdat);
f012eb8a:	83 ec 08             	sub    $0x8,%esp
f012eb8d:	ff 75 0c             	pushl  0xc(%ebp)
f012eb90:	6a 20                	push   $0x20
f012eb92:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb95:	ff d0                	call   *%eax
f012eb97:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012eb9a:	ff 4d e4             	decl   -0x1c(%ebp)
f012eb9d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eba1:	7f e7                	jg     f012eb8a <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012eba3:	e9 66 01 00 00       	jmp    f012ed0e <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012eba8:	83 ec 08             	sub    $0x8,%esp
f012ebab:	ff 75 e8             	pushl  -0x18(%ebp)
f012ebae:	8d 45 14             	lea    0x14(%ebp),%eax
f012ebb1:	50                   	push   %eax
f012ebb2:	e8 3c fd ff ff       	call   f012e8f3 <getint>
f012ebb7:	83 c4 10             	add    $0x10,%esp
f012ebba:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ebbd:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012ebc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ebc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ebc6:	85 d2                	test   %edx,%edx
f012ebc8:	79 23                	jns    f012ebed <vprintfmt+0x29b>
				putch('-', putdat);
f012ebca:	83 ec 08             	sub    $0x8,%esp
f012ebcd:	ff 75 0c             	pushl  0xc(%ebp)
f012ebd0:	6a 2d                	push   $0x2d
f012ebd2:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebd5:	ff d0                	call   *%eax
f012ebd7:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012ebda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ebdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ebe0:	f7 d8                	neg    %eax
f012ebe2:	83 d2 00             	adc    $0x0,%edx
f012ebe5:	f7 da                	neg    %edx
f012ebe7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ebea:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012ebed:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ebf4:	e9 bc 00 00 00       	jmp    f012ecb5 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012ebf9:	83 ec 08             	sub    $0x8,%esp
f012ebfc:	ff 75 e8             	pushl  -0x18(%ebp)
f012ebff:	8d 45 14             	lea    0x14(%ebp),%eax
f012ec02:	50                   	push   %eax
f012ec03:	e8 84 fc ff ff       	call   f012e88c <getuint>
f012ec08:	83 c4 10             	add    $0x10,%esp
f012ec0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ec0e:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012ec11:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ec18:	e9 98 00 00 00       	jmp    f012ecb5 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012ec1d:	83 ec 08             	sub    $0x8,%esp
f012ec20:	ff 75 0c             	pushl  0xc(%ebp)
f012ec23:	6a 58                	push   $0x58
f012ec25:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec28:	ff d0                	call   *%eax
f012ec2a:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ec2d:	83 ec 08             	sub    $0x8,%esp
f012ec30:	ff 75 0c             	pushl  0xc(%ebp)
f012ec33:	6a 58                	push   $0x58
f012ec35:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec38:	ff d0                	call   *%eax
f012ec3a:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ec3d:	83 ec 08             	sub    $0x8,%esp
f012ec40:	ff 75 0c             	pushl  0xc(%ebp)
f012ec43:	6a 58                	push   $0x58
f012ec45:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec48:	ff d0                	call   *%eax
f012ec4a:	83 c4 10             	add    $0x10,%esp
			break;
f012ec4d:	e9 bc 00 00 00       	jmp    f012ed0e <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012ec52:	83 ec 08             	sub    $0x8,%esp
f012ec55:	ff 75 0c             	pushl  0xc(%ebp)
f012ec58:	6a 30                	push   $0x30
f012ec5a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec5d:	ff d0                	call   *%eax
f012ec5f:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012ec62:	83 ec 08             	sub    $0x8,%esp
f012ec65:	ff 75 0c             	pushl  0xc(%ebp)
f012ec68:	6a 78                	push   $0x78
f012ec6a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ec6d:	ff d0                	call   *%eax
f012ec6f:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012ec72:	8b 45 14             	mov    0x14(%ebp),%eax
f012ec75:	83 c0 04             	add    $0x4,%eax
f012ec78:	89 45 14             	mov    %eax,0x14(%ebp)
f012ec7b:	8b 45 14             	mov    0x14(%ebp),%eax
f012ec7e:	83 e8 04             	sub    $0x4,%eax
f012ec81:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012ec83:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ec86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012ec8d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012ec94:	eb 1f                	jmp    f012ecb5 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012ec96:	83 ec 08             	sub    $0x8,%esp
f012ec99:	ff 75 e8             	pushl  -0x18(%ebp)
f012ec9c:	8d 45 14             	lea    0x14(%ebp),%eax
f012ec9f:	50                   	push   %eax
f012eca0:	e8 e7 fb ff ff       	call   f012e88c <getuint>
f012eca5:	83 c4 10             	add    $0x10,%esp
f012eca8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ecab:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012ecae:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012ecb5:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012ecb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ecbc:	83 ec 04             	sub    $0x4,%esp
f012ecbf:	52                   	push   %edx
f012ecc0:	ff 75 e4             	pushl  -0x1c(%ebp)
f012ecc3:	50                   	push   %eax
f012ecc4:	ff 75 f4             	pushl  -0xc(%ebp)
f012ecc7:	ff 75 f0             	pushl  -0x10(%ebp)
f012ecca:	ff 75 0c             	pushl  0xc(%ebp)
f012eccd:	ff 75 08             	pushl  0x8(%ebp)
f012ecd0:	e8 00 fb ff ff       	call   f012e7d5 <printnum>
f012ecd5:	83 c4 20             	add    $0x20,%esp
			break;
f012ecd8:	eb 34                	jmp    f012ed0e <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012ecda:	83 ec 08             	sub    $0x8,%esp
f012ecdd:	ff 75 0c             	pushl  0xc(%ebp)
f012ece0:	53                   	push   %ebx
f012ece1:	8b 45 08             	mov    0x8(%ebp),%eax
f012ece4:	ff d0                	call   *%eax
f012ece6:	83 c4 10             	add    $0x10,%esp
			break;
f012ece9:	eb 23                	jmp    f012ed0e <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012eceb:	83 ec 08             	sub    $0x8,%esp
f012ecee:	ff 75 0c             	pushl  0xc(%ebp)
f012ecf1:	6a 25                	push   $0x25
f012ecf3:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecf6:	ff d0                	call   *%eax
f012ecf8:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012ecfb:	ff 4d 10             	decl   0x10(%ebp)
f012ecfe:	eb 03                	jmp    f012ed03 <vprintfmt+0x3b1>
f012ed00:	ff 4d 10             	decl   0x10(%ebp)
f012ed03:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed06:	48                   	dec    %eax
f012ed07:	8a 00                	mov    (%eax),%al
f012ed09:	3c 25                	cmp    $0x25,%al
f012ed0b:	75 f3                	jne    f012ed00 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012ed0d:	90                   	nop
		}
	}
f012ed0e:	e9 47 fc ff ff       	jmp    f012e95a <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012ed13:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012ed14:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012ed17:	5b                   	pop    %ebx
f012ed18:	5e                   	pop    %esi
f012ed19:	5d                   	pop    %ebp
f012ed1a:	c3                   	ret    

f012ed1b <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012ed1b:	55                   	push   %ebp
f012ed1c:	89 e5                	mov    %esp,%ebp
f012ed1e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012ed21:	8d 45 10             	lea    0x10(%ebp),%eax
f012ed24:	83 c0 04             	add    $0x4,%eax
f012ed27:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012ed2a:	8b 45 10             	mov    0x10(%ebp),%eax
f012ed2d:	ff 75 f4             	pushl  -0xc(%ebp)
f012ed30:	50                   	push   %eax
f012ed31:	ff 75 0c             	pushl  0xc(%ebp)
f012ed34:	ff 75 08             	pushl  0x8(%ebp)
f012ed37:	e8 16 fc ff ff       	call   f012e952 <vprintfmt>
f012ed3c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012ed3f:	90                   	nop
f012ed40:	c9                   	leave  
f012ed41:	c3                   	ret    

f012ed42 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012ed42:	55                   	push   %ebp
f012ed43:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012ed45:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed48:	8b 40 08             	mov    0x8(%eax),%eax
f012ed4b:	8d 50 01             	lea    0x1(%eax),%edx
f012ed4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed51:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012ed54:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed57:	8b 10                	mov    (%eax),%edx
f012ed59:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed5c:	8b 40 04             	mov    0x4(%eax),%eax
f012ed5f:	39 c2                	cmp    %eax,%edx
f012ed61:	73 12                	jae    f012ed75 <sprintputch+0x33>
		*b->buf++ = ch;
f012ed63:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed66:	8b 00                	mov    (%eax),%eax
f012ed68:	8d 48 01             	lea    0x1(%eax),%ecx
f012ed6b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ed6e:	89 0a                	mov    %ecx,(%edx)
f012ed70:	8b 55 08             	mov    0x8(%ebp),%edx
f012ed73:	88 10                	mov    %dl,(%eax)
}
f012ed75:	90                   	nop
f012ed76:	5d                   	pop    %ebp
f012ed77:	c3                   	ret    

f012ed78 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012ed78:	55                   	push   %ebp
f012ed79:	89 e5                	mov    %esp,%ebp
f012ed7b:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012ed7e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed81:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012ed84:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed87:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ed8a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed8d:	01 d0                	add    %edx,%eax
f012ed8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ed92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012ed99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ed9d:	74 06                	je     f012eda5 <vsnprintf+0x2d>
f012ed9f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012eda3:	7f 07                	jg     f012edac <vsnprintf+0x34>
		return -E_INVAL;
f012eda5:	b8 03 00 00 00       	mov    $0x3,%eax
f012edaa:	eb 20                	jmp    f012edcc <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012edac:	ff 75 14             	pushl  0x14(%ebp)
f012edaf:	ff 75 10             	pushl  0x10(%ebp)
f012edb2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012edb5:	50                   	push   %eax
f012edb6:	68 42 ed 12 f0       	push   $0xf012ed42
f012edbb:	e8 92 fb ff ff       	call   f012e952 <vprintfmt>
f012edc0:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012edc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012edc6:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012edc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012edcc:	c9                   	leave  
f012edcd:	c3                   	ret    

f012edce <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012edce:	55                   	push   %ebp
f012edcf:	89 e5                	mov    %esp,%ebp
f012edd1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012edd4:	8d 45 10             	lea    0x10(%ebp),%eax
f012edd7:	83 c0 04             	add    $0x4,%eax
f012edda:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012eddd:	8b 45 10             	mov    0x10(%ebp),%eax
f012ede0:	ff 75 f4             	pushl  -0xc(%ebp)
f012ede3:	50                   	push   %eax
f012ede4:	ff 75 0c             	pushl  0xc(%ebp)
f012ede7:	ff 75 08             	pushl  0x8(%ebp)
f012edea:	e8 89 ff ff ff       	call   f012ed78 <vsnprintf>
f012edef:	83 c4 10             	add    $0x10,%esp
f012edf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012edf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012edf8:	c9                   	leave  
f012edf9:	c3                   	ret    

f012edfa <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012edfa:	55                   	push   %ebp
f012edfb:	89 e5                	mov    %esp,%ebp
f012edfd:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012ee00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ee04:	74 13                	je     f012ee19 <readline+0x1f>
		cprintf("%s", prompt);
f012ee06:	83 ec 08             	sub    $0x8,%esp
f012ee09:	ff 75 08             	pushl  0x8(%ebp)
f012ee0c:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012ee11:	e8 1b 20 fd ff       	call   f0100e31 <cprintf>
f012ee16:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ee19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ee20:	83 ec 0c             	sub    $0xc,%esp
f012ee23:	6a 00                	push   $0x0
f012ee25:	e8 b0 1f fd ff       	call   f0100dda <iscons>
f012ee2a:	83 c4 10             	add    $0x10,%esp
f012ee2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ee30:	e8 8c 1f fd ff       	call   f0100dc1 <getchar>
f012ee35:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ee38:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ee3c:	79 22                	jns    f012ee60 <readline+0x66>
			if (c != -E_EOF)
f012ee3e:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ee42:	0f 84 ad 00 00 00    	je     f012eef5 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012ee48:	83 ec 08             	sub    $0x8,%esp
f012ee4b:	ff 75 ec             	pushl  -0x14(%ebp)
f012ee4e:	68 d3 b9 13 f0       	push   $0xf013b9d3
f012ee53:	e8 d9 1f fd ff       	call   f0100e31 <cprintf>
f012ee58:	83 c4 10             	add    $0x10,%esp
			return;
f012ee5b:	e9 95 00 00 00       	jmp    f012eef5 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ee60:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ee64:	7e 34                	jle    f012ee9a <readline+0xa0>
f012ee66:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ee6d:	7f 2b                	jg     f012ee9a <readline+0xa0>
			if (echoing)
f012ee6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ee73:	74 0e                	je     f012ee83 <readline+0x89>
				cputchar(c);
f012ee75:	83 ec 0c             	sub    $0xc,%esp
f012ee78:	ff 75 ec             	pushl  -0x14(%ebp)
f012ee7b:	e8 2a 1f fd ff       	call   f0100daa <cputchar>
f012ee80:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ee83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ee86:	8d 50 01             	lea    0x1(%eax),%edx
f012ee89:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ee8c:	89 c2                	mov    %eax,%edx
f012ee8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ee91:	01 d0                	add    %edx,%eax
f012ee93:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ee96:	88 10                	mov    %dl,(%eax)
f012ee98:	eb 56                	jmp    f012eef0 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012ee9a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ee9e:	75 1f                	jne    f012eebf <readline+0xc5>
f012eea0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012eea4:	7e 19                	jle    f012eebf <readline+0xc5>
			if (echoing)
f012eea6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012eeaa:	74 0e                	je     f012eeba <readline+0xc0>
				cputchar(c);
f012eeac:	83 ec 0c             	sub    $0xc,%esp
f012eeaf:	ff 75 ec             	pushl  -0x14(%ebp)
f012eeb2:	e8 f3 1e fd ff       	call   f0100daa <cputchar>
f012eeb7:	83 c4 10             	add    $0x10,%esp

			i--;
f012eeba:	ff 4d f4             	decl   -0xc(%ebp)
f012eebd:	eb 31                	jmp    f012eef0 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012eebf:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012eec3:	74 0a                	je     f012eecf <readline+0xd5>
f012eec5:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012eec9:	0f 85 61 ff ff ff    	jne    f012ee30 <readline+0x36>
			if (echoing)
f012eecf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012eed3:	74 0e                	je     f012eee3 <readline+0xe9>
				cputchar(c);
f012eed5:	83 ec 0c             	sub    $0xc,%esp
f012eed8:	ff 75 ec             	pushl  -0x14(%ebp)
f012eedb:	e8 ca 1e fd ff       	call   f0100daa <cputchar>
f012eee0:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012eee3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eee9:	01 d0                	add    %edx,%eax
f012eeeb:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012eeee:	eb 06                	jmp    f012eef6 <readline+0xfc>
		}
	}
f012eef0:	e9 3b ff ff ff       	jmp    f012ee30 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012eef5:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012eef6:	c9                   	leave  
f012eef7:	c3                   	ret    

f012eef8 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012eef8:	55                   	push   %ebp
f012eef9:	89 e5                	mov    %esp,%ebp
f012eefb:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012eefe:	e8 47 dc fd ff       	call   f010cb4a <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ef03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ef07:	74 13                	je     f012ef1c <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ef09:	83 ec 08             	sub    $0x8,%esp
f012ef0c:	ff 75 08             	pushl  0x8(%ebp)
f012ef0f:	68 d0 b9 13 f0       	push   $0xf013b9d0
f012ef14:	e8 18 1f fd ff       	call   f0100e31 <cprintf>
f012ef19:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ef1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ef23:	83 ec 0c             	sub    $0xc,%esp
f012ef26:	6a 00                	push   $0x0
f012ef28:	e8 ad 1e fd ff       	call   f0100dda <iscons>
f012ef2d:	83 c4 10             	add    $0x10,%esp
f012ef30:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ef33:	e8 89 1e fd ff       	call   f0100dc1 <getchar>
f012ef38:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ef3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ef3f:	79 23                	jns    f012ef64 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ef41:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ef45:	74 13                	je     f012ef5a <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ef47:	83 ec 08             	sub    $0x8,%esp
f012ef4a:	ff 75 ec             	pushl  -0x14(%ebp)
f012ef4d:	68 d3 b9 13 f0       	push   $0xf013b9d3
f012ef52:	e8 da 1e fd ff       	call   f0100e31 <cprintf>
f012ef57:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012ef5a:	e8 05 dc fd ff       	call   f010cb64 <sys_enable_interrupt>
			return;
f012ef5f:	e9 9a 00 00 00       	jmp    f012effe <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ef64:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ef68:	7e 34                	jle    f012ef9e <atomic_readline+0xa6>
f012ef6a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ef71:	7f 2b                	jg     f012ef9e <atomic_readline+0xa6>
			if (echoing)
f012ef73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ef77:	74 0e                	je     f012ef87 <atomic_readline+0x8f>
				cputchar(c);
f012ef79:	83 ec 0c             	sub    $0xc,%esp
f012ef7c:	ff 75 ec             	pushl  -0x14(%ebp)
f012ef7f:	e8 26 1e fd ff       	call   f0100daa <cputchar>
f012ef84:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ef87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ef8a:	8d 50 01             	lea    0x1(%eax),%edx
f012ef8d:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ef90:	89 c2                	mov    %eax,%edx
f012ef92:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef95:	01 d0                	add    %edx,%eax
f012ef97:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ef9a:	88 10                	mov    %dl,(%eax)
f012ef9c:	eb 5b                	jmp    f012eff9 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012ef9e:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012efa2:	75 1f                	jne    f012efc3 <atomic_readline+0xcb>
f012efa4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012efa8:	7e 19                	jle    f012efc3 <atomic_readline+0xcb>
			if (echoing)
f012efaa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012efae:	74 0e                	je     f012efbe <atomic_readline+0xc6>
				cputchar(c);
f012efb0:	83 ec 0c             	sub    $0xc,%esp
f012efb3:	ff 75 ec             	pushl  -0x14(%ebp)
f012efb6:	e8 ef 1d fd ff       	call   f0100daa <cputchar>
f012efbb:	83 c4 10             	add    $0x10,%esp
			i--;
f012efbe:	ff 4d f4             	decl   -0xc(%ebp)
f012efc1:	eb 36                	jmp    f012eff9 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012efc3:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012efc7:	74 0a                	je     f012efd3 <atomic_readline+0xdb>
f012efc9:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012efcd:	0f 85 60 ff ff ff    	jne    f012ef33 <atomic_readline+0x3b>
			if (echoing)
f012efd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012efd7:	74 0e                	je     f012efe7 <atomic_readline+0xef>
				cputchar(c);
f012efd9:	83 ec 0c             	sub    $0xc,%esp
f012efdc:	ff 75 ec             	pushl  -0x14(%ebp)
f012efdf:	e8 c6 1d fd ff       	call   f0100daa <cputchar>
f012efe4:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012efe7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012efea:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efed:	01 d0                	add    %edx,%eax
f012efef:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012eff2:	e8 6d db fd ff       	call   f010cb64 <sys_enable_interrupt>
			return;
f012eff7:	eb 05                	jmp    f012effe <atomic_readline+0x106>
		}
	}
f012eff9:	e9 35 ff ff ff       	jmp    f012ef33 <atomic_readline+0x3b>
}
f012effe:	c9                   	leave  
f012efff:	c3                   	ret    

f012f000 <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012f000:	55                   	push   %ebp
f012f001:	89 e5                	mov    %esp,%ebp
f012f003:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012f006:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f00d:	eb 06                	jmp    f012f015 <strlen+0x15>
		n++;
f012f00f:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012f012:	ff 45 08             	incl   0x8(%ebp)
f012f015:	8b 45 08             	mov    0x8(%ebp),%eax
f012f018:	8a 00                	mov    (%eax),%al
f012f01a:	84 c0                	test   %al,%al
f012f01c:	75 f1                	jne    f012f00f <strlen+0xf>
		n++;
	return n;
f012f01e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f021:	c9                   	leave  
f012f022:	c3                   	ret    

f012f023 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012f023:	55                   	push   %ebp
f012f024:	89 e5                	mov    %esp,%ebp
f012f026:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012f029:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f030:	eb 09                	jmp    f012f03b <strnlen+0x18>
		n++;
f012f032:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012f035:	ff 45 08             	incl   0x8(%ebp)
f012f038:	ff 4d 0c             	decl   0xc(%ebp)
f012f03b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f03f:	74 09                	je     f012f04a <strnlen+0x27>
f012f041:	8b 45 08             	mov    0x8(%ebp),%eax
f012f044:	8a 00                	mov    (%eax),%al
f012f046:	84 c0                	test   %al,%al
f012f048:	75 e8                	jne    f012f032 <strnlen+0xf>
		n++;
	return n;
f012f04a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f04d:	c9                   	leave  
f012f04e:	c3                   	ret    

f012f04f <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012f04f:	55                   	push   %ebp
f012f050:	89 e5                	mov    %esp,%ebp
f012f052:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012f055:	8b 45 08             	mov    0x8(%ebp),%eax
f012f058:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012f05b:	90                   	nop
f012f05c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f05f:	8d 50 01             	lea    0x1(%eax),%edx
f012f062:	89 55 08             	mov    %edx,0x8(%ebp)
f012f065:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f068:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f06b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012f06e:	8a 12                	mov    (%edx),%dl
f012f070:	88 10                	mov    %dl,(%eax)
f012f072:	8a 00                	mov    (%eax),%al
f012f074:	84 c0                	test   %al,%al
f012f076:	75 e4                	jne    f012f05c <strcpy+0xd>
		/* do nothing */;
	return ret;
f012f078:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f07b:	c9                   	leave  
f012f07c:	c3                   	ret    

f012f07d <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012f07d:	55                   	push   %ebp
f012f07e:	89 e5                	mov    %esp,%ebp
f012f080:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012f083:	8b 45 08             	mov    0x8(%ebp),%eax
f012f086:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012f089:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f090:	eb 1f                	jmp    f012f0b1 <strncpy+0x34>
		*dst++ = *src;
f012f092:	8b 45 08             	mov    0x8(%ebp),%eax
f012f095:	8d 50 01             	lea    0x1(%eax),%edx
f012f098:	89 55 08             	mov    %edx,0x8(%ebp)
f012f09b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f09e:	8a 12                	mov    (%edx),%dl
f012f0a0:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012f0a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0a5:	8a 00                	mov    (%eax),%al
f012f0a7:	84 c0                	test   %al,%al
f012f0a9:	74 03                	je     f012f0ae <strncpy+0x31>
			src++;
f012f0ab:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012f0ae:	ff 45 fc             	incl   -0x4(%ebp)
f012f0b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0b4:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f0b7:	72 d9                	jb     f012f092 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012f0b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f0bc:	c9                   	leave  
f012f0bd:	c3                   	ret    

f012f0be <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012f0be:	55                   	push   %ebp
f012f0bf:	89 e5                	mov    %esp,%ebp
f012f0c1:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012f0c4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012f0ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f0ce:	74 30                	je     f012f100 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012f0d0:	eb 16                	jmp    f012f0e8 <strlcpy+0x2a>
			*dst++ = *src++;
f012f0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0d5:	8d 50 01             	lea    0x1(%eax),%edx
f012f0d8:	89 55 08             	mov    %edx,0x8(%ebp)
f012f0db:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f0de:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f0e1:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012f0e4:	8a 12                	mov    (%edx),%dl
f012f0e6:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012f0e8:	ff 4d 10             	decl   0x10(%ebp)
f012f0eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f0ef:	74 09                	je     f012f0fa <strlcpy+0x3c>
f012f0f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0f4:	8a 00                	mov    (%eax),%al
f012f0f6:	84 c0                	test   %al,%al
f012f0f8:	75 d8                	jne    f012f0d2 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012f0fa:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0fd:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012f100:	8b 55 08             	mov    0x8(%ebp),%edx
f012f103:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f106:	29 c2                	sub    %eax,%edx
f012f108:	89 d0                	mov    %edx,%eax
}
f012f10a:	c9                   	leave  
f012f10b:	c3                   	ret    

f012f10c <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012f10c:	55                   	push   %ebp
f012f10d:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012f10f:	eb 06                	jmp    f012f117 <strcmp+0xb>
		p++, q++;
f012f111:	ff 45 08             	incl   0x8(%ebp)
f012f114:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012f117:	8b 45 08             	mov    0x8(%ebp),%eax
f012f11a:	8a 00                	mov    (%eax),%al
f012f11c:	84 c0                	test   %al,%al
f012f11e:	74 0e                	je     f012f12e <strcmp+0x22>
f012f120:	8b 45 08             	mov    0x8(%ebp),%eax
f012f123:	8a 10                	mov    (%eax),%dl
f012f125:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f128:	8a 00                	mov    (%eax),%al
f012f12a:	38 c2                	cmp    %al,%dl
f012f12c:	74 e3                	je     f012f111 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012f12e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f131:	8a 00                	mov    (%eax),%al
f012f133:	0f b6 d0             	movzbl %al,%edx
f012f136:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f139:	8a 00                	mov    (%eax),%al
f012f13b:	0f b6 c0             	movzbl %al,%eax
f012f13e:	29 c2                	sub    %eax,%edx
f012f140:	89 d0                	mov    %edx,%eax
}
f012f142:	5d                   	pop    %ebp
f012f143:	c3                   	ret    

f012f144 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012f144:	55                   	push   %ebp
f012f145:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012f147:	eb 09                	jmp    f012f152 <strncmp+0xe>
		n--, p++, q++;
f012f149:	ff 4d 10             	decl   0x10(%ebp)
f012f14c:	ff 45 08             	incl   0x8(%ebp)
f012f14f:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012f152:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f156:	74 17                	je     f012f16f <strncmp+0x2b>
f012f158:	8b 45 08             	mov    0x8(%ebp),%eax
f012f15b:	8a 00                	mov    (%eax),%al
f012f15d:	84 c0                	test   %al,%al
f012f15f:	74 0e                	je     f012f16f <strncmp+0x2b>
f012f161:	8b 45 08             	mov    0x8(%ebp),%eax
f012f164:	8a 10                	mov    (%eax),%dl
f012f166:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f169:	8a 00                	mov    (%eax),%al
f012f16b:	38 c2                	cmp    %al,%dl
f012f16d:	74 da                	je     f012f149 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012f16f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f173:	75 07                	jne    f012f17c <strncmp+0x38>
		return 0;
f012f175:	b8 00 00 00 00       	mov    $0x0,%eax
f012f17a:	eb 14                	jmp    f012f190 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012f17c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f17f:	8a 00                	mov    (%eax),%al
f012f181:	0f b6 d0             	movzbl %al,%edx
f012f184:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f187:	8a 00                	mov    (%eax),%al
f012f189:	0f b6 c0             	movzbl %al,%eax
f012f18c:	29 c2                	sub    %eax,%edx
f012f18e:	89 d0                	mov    %edx,%eax
}
f012f190:	5d                   	pop    %ebp
f012f191:	c3                   	ret    

f012f192 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012f192:	55                   	push   %ebp
f012f193:	89 e5                	mov    %esp,%ebp
f012f195:	83 ec 04             	sub    $0x4,%esp
f012f198:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f19b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f19e:	eb 12                	jmp    f012f1b2 <strchr+0x20>
		if (*s == c)
f012f1a0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1a3:	8a 00                	mov    (%eax),%al
f012f1a5:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f1a8:	75 05                	jne    f012f1af <strchr+0x1d>
			return (char *) s;
f012f1aa:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1ad:	eb 11                	jmp    f012f1c0 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012f1af:	ff 45 08             	incl   0x8(%ebp)
f012f1b2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1b5:	8a 00                	mov    (%eax),%al
f012f1b7:	84 c0                	test   %al,%al
f012f1b9:	75 e5                	jne    f012f1a0 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012f1bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f1c0:	c9                   	leave  
f012f1c1:	c3                   	ret    

f012f1c2 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012f1c2:	55                   	push   %ebp
f012f1c3:	89 e5                	mov    %esp,%ebp
f012f1c5:	83 ec 04             	sub    $0x4,%esp
f012f1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1cb:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f1ce:	eb 0d                	jmp    f012f1dd <strfind+0x1b>
		if (*s == c)
f012f1d0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1d3:	8a 00                	mov    (%eax),%al
f012f1d5:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f1d8:	74 0e                	je     f012f1e8 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012f1da:	ff 45 08             	incl   0x8(%ebp)
f012f1dd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1e0:	8a 00                	mov    (%eax),%al
f012f1e2:	84 c0                	test   %al,%al
f012f1e4:	75 ea                	jne    f012f1d0 <strfind+0xe>
f012f1e6:	eb 01                	jmp    f012f1e9 <strfind+0x27>
		if (*s == c)
			break;
f012f1e8:	90                   	nop
	return (char *) s;
f012f1e9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f1ec:	c9                   	leave  
f012f1ed:	c3                   	ret    

f012f1ee <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012f1ee:	55                   	push   %ebp
f012f1ef:	89 e5                	mov    %esp,%ebp
f012f1f1:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012f1f4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012f1fa:	8b 45 10             	mov    0x10(%ebp),%eax
f012f1fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012f200:	eb 0e                	jmp    f012f210 <memset+0x22>
		*p++ = c;
f012f202:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f205:	8d 50 01             	lea    0x1(%eax),%edx
f012f208:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f20b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f20e:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012f210:	ff 4d f8             	decl   -0x8(%ebp)
f012f213:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012f217:	79 e9                	jns    f012f202 <memset+0x14>
		*p++ = c;

	return v;
f012f219:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f21c:	c9                   	leave  
f012f21d:	c3                   	ret    

f012f21e <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012f21e:	55                   	push   %ebp
f012f21f:	89 e5                	mov    %esp,%ebp
f012f221:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f224:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f227:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f22a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f22d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012f230:	eb 16                	jmp    f012f248 <memcpy+0x2a>
		*d++ = *s++;
f012f232:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f235:	8d 50 01             	lea    0x1(%eax),%edx
f012f238:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f23b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f23e:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f241:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f244:	8a 12                	mov    (%edx),%dl
f012f246:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012f248:	8b 45 10             	mov    0x10(%ebp),%eax
f012f24b:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f24e:	89 55 10             	mov    %edx,0x10(%ebp)
f012f251:	85 c0                	test   %eax,%eax
f012f253:	75 dd                	jne    f012f232 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f255:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f258:	c9                   	leave  
f012f259:	c3                   	ret    

f012f25a <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f25a:	55                   	push   %ebp
f012f25b:	89 e5                	mov    %esp,%ebp
f012f25d:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f260:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f263:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f266:	8b 45 08             	mov    0x8(%ebp),%eax
f012f269:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f26c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f26f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f272:	73 50                	jae    f012f2c4 <memmove+0x6a>
f012f274:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f277:	8b 45 10             	mov    0x10(%ebp),%eax
f012f27a:	01 d0                	add    %edx,%eax
f012f27c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f27f:	76 43                	jbe    f012f2c4 <memmove+0x6a>
		s += n;
f012f281:	8b 45 10             	mov    0x10(%ebp),%eax
f012f284:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f287:	8b 45 10             	mov    0x10(%ebp),%eax
f012f28a:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f28d:	eb 10                	jmp    f012f29f <memmove+0x45>
			*--d = *--s;
f012f28f:	ff 4d f8             	decl   -0x8(%ebp)
f012f292:	ff 4d fc             	decl   -0x4(%ebp)
f012f295:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f298:	8a 10                	mov    (%eax),%dl
f012f29a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f29d:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f29f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f2a2:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f2a5:	89 55 10             	mov    %edx,0x10(%ebp)
f012f2a8:	85 c0                	test   %eax,%eax
f012f2aa:	75 e3                	jne    f012f28f <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f2ac:	eb 23                	jmp    f012f2d1 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f2ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2b1:	8d 50 01             	lea    0x1(%eax),%edx
f012f2b4:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f2b7:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f2ba:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f2bd:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f2c0:	8a 12                	mov    (%edx),%dl
f012f2c2:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f2c4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f2c7:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f2ca:	89 55 10             	mov    %edx,0x10(%ebp)
f012f2cd:	85 c0                	test   %eax,%eax
f012f2cf:	75 dd                	jne    f012f2ae <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f2d1:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f2d4:	c9                   	leave  
f012f2d5:	c3                   	ret    

f012f2d6 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f2d6:	55                   	push   %ebp
f012f2d7:	89 e5                	mov    %esp,%ebp
f012f2d9:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f2dc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f2df:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f2e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2e5:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f2e8:	eb 2a                	jmp    f012f314 <memcmp+0x3e>
		if (*s1 != *s2)
f012f2ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f2ed:	8a 10                	mov    (%eax),%dl
f012f2ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2f2:	8a 00                	mov    (%eax),%al
f012f2f4:	38 c2                	cmp    %al,%dl
f012f2f6:	74 16                	je     f012f30e <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f2f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f2fb:	8a 00                	mov    (%eax),%al
f012f2fd:	0f b6 d0             	movzbl %al,%edx
f012f300:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f303:	8a 00                	mov    (%eax),%al
f012f305:	0f b6 c0             	movzbl %al,%eax
f012f308:	29 c2                	sub    %eax,%edx
f012f30a:	89 d0                	mov    %edx,%eax
f012f30c:	eb 18                	jmp    f012f326 <memcmp+0x50>
		s1++, s2++;
f012f30e:	ff 45 fc             	incl   -0x4(%ebp)
f012f311:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f314:	8b 45 10             	mov    0x10(%ebp),%eax
f012f317:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f31a:	89 55 10             	mov    %edx,0x10(%ebp)
f012f31d:	85 c0                	test   %eax,%eax
f012f31f:	75 c9                	jne    f012f2ea <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f321:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f326:	c9                   	leave  
f012f327:	c3                   	ret    

f012f328 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f328:	55                   	push   %ebp
f012f329:	89 e5                	mov    %esp,%ebp
f012f32b:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f32e:	8b 55 08             	mov    0x8(%ebp),%edx
f012f331:	8b 45 10             	mov    0x10(%ebp),%eax
f012f334:	01 d0                	add    %edx,%eax
f012f336:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f339:	eb 15                	jmp    f012f350 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f33b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f33e:	8a 00                	mov    (%eax),%al
f012f340:	0f b6 d0             	movzbl %al,%edx
f012f343:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f346:	0f b6 c0             	movzbl %al,%eax
f012f349:	39 c2                	cmp    %eax,%edx
f012f34b:	74 0d                	je     f012f35a <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f34d:	ff 45 08             	incl   0x8(%ebp)
f012f350:	8b 45 08             	mov    0x8(%ebp),%eax
f012f353:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f356:	72 e3                	jb     f012f33b <memfind+0x13>
f012f358:	eb 01                	jmp    f012f35b <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f35a:	90                   	nop
	return (void *) s;
f012f35b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f35e:	c9                   	leave  
f012f35f:	c3                   	ret    

f012f360 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f360:	55                   	push   %ebp
f012f361:	89 e5                	mov    %esp,%ebp
f012f363:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f366:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f36d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f374:	eb 03                	jmp    f012f379 <strtol+0x19>
		s++;
f012f376:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f379:	8b 45 08             	mov    0x8(%ebp),%eax
f012f37c:	8a 00                	mov    (%eax),%al
f012f37e:	3c 20                	cmp    $0x20,%al
f012f380:	74 f4                	je     f012f376 <strtol+0x16>
f012f382:	8b 45 08             	mov    0x8(%ebp),%eax
f012f385:	8a 00                	mov    (%eax),%al
f012f387:	3c 09                	cmp    $0x9,%al
f012f389:	74 eb                	je     f012f376 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f38b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f38e:	8a 00                	mov    (%eax),%al
f012f390:	3c 2b                	cmp    $0x2b,%al
f012f392:	75 05                	jne    f012f399 <strtol+0x39>
		s++;
f012f394:	ff 45 08             	incl   0x8(%ebp)
f012f397:	eb 13                	jmp    f012f3ac <strtol+0x4c>
	else if (*s == '-')
f012f399:	8b 45 08             	mov    0x8(%ebp),%eax
f012f39c:	8a 00                	mov    (%eax),%al
f012f39e:	3c 2d                	cmp    $0x2d,%al
f012f3a0:	75 0a                	jne    f012f3ac <strtol+0x4c>
		s++, neg = 1;
f012f3a2:	ff 45 08             	incl   0x8(%ebp)
f012f3a5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f3ac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f3b0:	74 06                	je     f012f3b8 <strtol+0x58>
f012f3b2:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f3b6:	75 20                	jne    f012f3d8 <strtol+0x78>
f012f3b8:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3bb:	8a 00                	mov    (%eax),%al
f012f3bd:	3c 30                	cmp    $0x30,%al
f012f3bf:	75 17                	jne    f012f3d8 <strtol+0x78>
f012f3c1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3c4:	40                   	inc    %eax
f012f3c5:	8a 00                	mov    (%eax),%al
f012f3c7:	3c 78                	cmp    $0x78,%al
f012f3c9:	75 0d                	jne    f012f3d8 <strtol+0x78>
		s += 2, base = 16;
f012f3cb:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f3cf:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f3d6:	eb 28                	jmp    f012f400 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f3d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f3dc:	75 15                	jne    f012f3f3 <strtol+0x93>
f012f3de:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3e1:	8a 00                	mov    (%eax),%al
f012f3e3:	3c 30                	cmp    $0x30,%al
f012f3e5:	75 0c                	jne    f012f3f3 <strtol+0x93>
		s++, base = 8;
f012f3e7:	ff 45 08             	incl   0x8(%ebp)
f012f3ea:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f3f1:	eb 0d                	jmp    f012f400 <strtol+0xa0>
	else if (base == 0)
f012f3f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f3f7:	75 07                	jne    f012f400 <strtol+0xa0>
		base = 10;
f012f3f9:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f400:	8b 45 08             	mov    0x8(%ebp),%eax
f012f403:	8a 00                	mov    (%eax),%al
f012f405:	3c 2f                	cmp    $0x2f,%al
f012f407:	7e 19                	jle    f012f422 <strtol+0xc2>
f012f409:	8b 45 08             	mov    0x8(%ebp),%eax
f012f40c:	8a 00                	mov    (%eax),%al
f012f40e:	3c 39                	cmp    $0x39,%al
f012f410:	7f 10                	jg     f012f422 <strtol+0xc2>
			dig = *s - '0';
f012f412:	8b 45 08             	mov    0x8(%ebp),%eax
f012f415:	8a 00                	mov    (%eax),%al
f012f417:	0f be c0             	movsbl %al,%eax
f012f41a:	83 e8 30             	sub    $0x30,%eax
f012f41d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f420:	eb 42                	jmp    f012f464 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f422:	8b 45 08             	mov    0x8(%ebp),%eax
f012f425:	8a 00                	mov    (%eax),%al
f012f427:	3c 60                	cmp    $0x60,%al
f012f429:	7e 19                	jle    f012f444 <strtol+0xe4>
f012f42b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f42e:	8a 00                	mov    (%eax),%al
f012f430:	3c 7a                	cmp    $0x7a,%al
f012f432:	7f 10                	jg     f012f444 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f434:	8b 45 08             	mov    0x8(%ebp),%eax
f012f437:	8a 00                	mov    (%eax),%al
f012f439:	0f be c0             	movsbl %al,%eax
f012f43c:	83 e8 57             	sub    $0x57,%eax
f012f43f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f442:	eb 20                	jmp    f012f464 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f444:	8b 45 08             	mov    0x8(%ebp),%eax
f012f447:	8a 00                	mov    (%eax),%al
f012f449:	3c 40                	cmp    $0x40,%al
f012f44b:	7e 39                	jle    f012f486 <strtol+0x126>
f012f44d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f450:	8a 00                	mov    (%eax),%al
f012f452:	3c 5a                	cmp    $0x5a,%al
f012f454:	7f 30                	jg     f012f486 <strtol+0x126>
			dig = *s - 'A' + 10;
f012f456:	8b 45 08             	mov    0x8(%ebp),%eax
f012f459:	8a 00                	mov    (%eax),%al
f012f45b:	0f be c0             	movsbl %al,%eax
f012f45e:	83 e8 37             	sub    $0x37,%eax
f012f461:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f464:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f467:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f46a:	7d 19                	jge    f012f485 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f46c:	ff 45 08             	incl   0x8(%ebp)
f012f46f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f472:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f476:	89 c2                	mov    %eax,%edx
f012f478:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f47b:	01 d0                	add    %edx,%eax
f012f47d:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f480:	e9 7b ff ff ff       	jmp    f012f400 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f485:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f486:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f48a:	74 08                	je     f012f494 <strtol+0x134>
		*endptr = (char *) s;
f012f48c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f48f:	8b 55 08             	mov    0x8(%ebp),%edx
f012f492:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f494:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f498:	74 07                	je     f012f4a1 <strtol+0x141>
f012f49a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f49d:	f7 d8                	neg    %eax
f012f49f:	eb 03                	jmp    f012f4a4 <strtol+0x144>
f012f4a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f4a4:	c9                   	leave  
f012f4a5:	c3                   	ret    

f012f4a6 <ltostr>:

void
ltostr(long value, char *str)
{
f012f4a6:	55                   	push   %ebp
f012f4a7:	89 e5                	mov    %esp,%ebp
f012f4a9:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f4ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f4b3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f4ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f4be:	79 13                	jns    f012f4d3 <ltostr+0x2d>
	{
		neg = 1;
f012f4c0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f4c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f4ca:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f4cd:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f4d0:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f4d3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4d6:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f4db:	99                   	cltd   
f012f4dc:	f7 f9                	idiv   %ecx
f012f4de:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f4e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f4e4:	8d 50 01             	lea    0x1(%eax),%edx
f012f4e7:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f4ea:	89 c2                	mov    %eax,%edx
f012f4ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f4ef:	01 d0                	add    %edx,%eax
f012f4f1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f4f4:	83 c2 30             	add    $0x30,%edx
f012f4f7:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f4f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f4fc:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f501:	f7 e9                	imul   %ecx
f012f503:	c1 fa 02             	sar    $0x2,%edx
f012f506:	89 c8                	mov    %ecx,%eax
f012f508:	c1 f8 1f             	sar    $0x1f,%eax
f012f50b:	29 c2                	sub    %eax,%edx
f012f50d:	89 d0                	mov    %edx,%eax
f012f50f:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f512:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f515:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f51a:	f7 e9                	imul   %ecx
f012f51c:	c1 fa 02             	sar    $0x2,%edx
f012f51f:	89 c8                	mov    %ecx,%eax
f012f521:	c1 f8 1f             	sar    $0x1f,%eax
f012f524:	29 c2                	sub    %eax,%edx
f012f526:	89 d0                	mov    %edx,%eax
f012f528:	c1 e0 02             	shl    $0x2,%eax
f012f52b:	01 d0                	add    %edx,%eax
f012f52d:	01 c0                	add    %eax,%eax
f012f52f:	29 c1                	sub    %eax,%ecx
f012f531:	89 ca                	mov    %ecx,%edx
f012f533:	85 d2                	test   %edx,%edx
f012f535:	75 9c                	jne    f012f4d3 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f537:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f53e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f541:	48                   	dec    %eax
f012f542:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f545:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f549:	74 3d                	je     f012f588 <ltostr+0xe2>
		start = 1 ;
f012f54b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f552:	eb 34                	jmp    f012f588 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f554:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f557:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f55a:	01 d0                	add    %edx,%eax
f012f55c:	8a 00                	mov    (%eax),%al
f012f55e:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f561:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f564:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f567:	01 c2                	add    %eax,%edx
f012f569:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f56c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f56f:	01 c8                	add    %ecx,%eax
f012f571:	8a 00                	mov    (%eax),%al
f012f573:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f575:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f578:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f57b:	01 c2                	add    %eax,%edx
f012f57d:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f580:	88 02                	mov    %al,(%edx)
		start++ ;
f012f582:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f585:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f588:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f58b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f58e:	7c c4                	jl     f012f554 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f590:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f593:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f596:	01 d0                	add    %edx,%eax
f012f598:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f59b:	90                   	nop
f012f59c:	c9                   	leave  
f012f59d:	c3                   	ret    

f012f59e <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f59e:	55                   	push   %ebp
f012f59f:	89 e5                	mov    %esp,%ebp
f012f5a1:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f5a4:	ff 75 08             	pushl  0x8(%ebp)
f012f5a7:	e8 54 fa ff ff       	call   f012f000 <strlen>
f012f5ac:	83 c4 04             	add    $0x4,%esp
f012f5af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f5b2:	ff 75 0c             	pushl  0xc(%ebp)
f012f5b5:	e8 46 fa ff ff       	call   f012f000 <strlen>
f012f5ba:	83 c4 04             	add    $0x4,%esp
f012f5bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f5c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f5c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f5ce:	eb 17                	jmp    f012f5e7 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f5d0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f5d3:	8b 45 10             	mov    0x10(%ebp),%eax
f012f5d6:	01 c2                	add    %eax,%edx
f012f5d8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f5db:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5de:	01 c8                	add    %ecx,%eax
f012f5e0:	8a 00                	mov    (%eax),%al
f012f5e2:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f5e4:	ff 45 fc             	incl   -0x4(%ebp)
f012f5e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f5ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f5ed:	7c e1                	jl     f012f5d0 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f5ef:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f5f6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f5fd:	eb 1f                	jmp    f012f61e <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f5ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f602:	8d 50 01             	lea    0x1(%eax),%edx
f012f605:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f608:	89 c2                	mov    %eax,%edx
f012f60a:	8b 45 10             	mov    0x10(%ebp),%eax
f012f60d:	01 c2                	add    %eax,%edx
f012f60f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f612:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f615:	01 c8                	add    %ecx,%eax
f012f617:	8a 00                	mov    (%eax),%al
f012f619:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f61b:	ff 45 f8             	incl   -0x8(%ebp)
f012f61e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f621:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f624:	7c d9                	jl     f012f5ff <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f626:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f629:	8b 45 10             	mov    0x10(%ebp),%eax
f012f62c:	01 d0                	add    %edx,%eax
f012f62e:	c6 00 00             	movb   $0x0,(%eax)
}
f012f631:	90                   	nop
f012f632:	c9                   	leave  
f012f633:	c3                   	ret    

f012f634 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f634:	55                   	push   %ebp
f012f635:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f637:	8b 45 14             	mov    0x14(%ebp),%eax
f012f63a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f640:	8b 45 14             	mov    0x14(%ebp),%eax
f012f643:	8b 00                	mov    (%eax),%eax
f012f645:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f64c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f64f:	01 d0                	add    %edx,%eax
f012f651:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f657:	eb 0c                	jmp    f012f665 <strsplit+0x31>
			*string++ = 0;
f012f659:	8b 45 08             	mov    0x8(%ebp),%eax
f012f65c:	8d 50 01             	lea    0x1(%eax),%edx
f012f65f:	89 55 08             	mov    %edx,0x8(%ebp)
f012f662:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f665:	8b 45 08             	mov    0x8(%ebp),%eax
f012f668:	8a 00                	mov    (%eax),%al
f012f66a:	84 c0                	test   %al,%al
f012f66c:	74 18                	je     f012f686 <strsplit+0x52>
f012f66e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f671:	8a 00                	mov    (%eax),%al
f012f673:	0f be c0             	movsbl %al,%eax
f012f676:	50                   	push   %eax
f012f677:	ff 75 0c             	pushl  0xc(%ebp)
f012f67a:	e8 13 fb ff ff       	call   f012f192 <strchr>
f012f67f:	83 c4 08             	add    $0x8,%esp
f012f682:	85 c0                	test   %eax,%eax
f012f684:	75 d3                	jne    f012f659 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f686:	8b 45 08             	mov    0x8(%ebp),%eax
f012f689:	8a 00                	mov    (%eax),%al
f012f68b:	84 c0                	test   %al,%al
f012f68d:	74 5a                	je     f012f6e9 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f68f:	8b 45 14             	mov    0x14(%ebp),%eax
f012f692:	8b 00                	mov    (%eax),%eax
f012f694:	83 f8 0f             	cmp    $0xf,%eax
f012f697:	75 07                	jne    f012f6a0 <strsplit+0x6c>
		{
			return 0;
f012f699:	b8 00 00 00 00       	mov    $0x0,%eax
f012f69e:	eb 66                	jmp    f012f706 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f6a0:	8b 45 14             	mov    0x14(%ebp),%eax
f012f6a3:	8b 00                	mov    (%eax),%eax
f012f6a5:	8d 48 01             	lea    0x1(%eax),%ecx
f012f6a8:	8b 55 14             	mov    0x14(%ebp),%edx
f012f6ab:	89 0a                	mov    %ecx,(%edx)
f012f6ad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f6b4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6b7:	01 c2                	add    %eax,%edx
f012f6b9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6bc:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f6be:	eb 03                	jmp    f012f6c3 <strsplit+0x8f>
			string++;
f012f6c0:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f6c3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6c6:	8a 00                	mov    (%eax),%al
f012f6c8:	84 c0                	test   %al,%al
f012f6ca:	74 8b                	je     f012f657 <strsplit+0x23>
f012f6cc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6cf:	8a 00                	mov    (%eax),%al
f012f6d1:	0f be c0             	movsbl %al,%eax
f012f6d4:	50                   	push   %eax
f012f6d5:	ff 75 0c             	pushl  0xc(%ebp)
f012f6d8:	e8 b5 fa ff ff       	call   f012f192 <strchr>
f012f6dd:	83 c4 08             	add    $0x8,%esp
f012f6e0:	85 c0                	test   %eax,%eax
f012f6e2:	74 dc                	je     f012f6c0 <strsplit+0x8c>
			string++;
	}
f012f6e4:	e9 6e ff ff ff       	jmp    f012f657 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f6e9:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f6ea:	8b 45 14             	mov    0x14(%ebp),%eax
f012f6ed:	8b 00                	mov    (%eax),%eax
f012f6ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f6f6:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6f9:	01 d0                	add    %edx,%eax
f012f6fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f701:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f706:	c9                   	leave  
f012f707:	c3                   	ret    

f012f708 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f708:	55                   	push   %ebp
f012f709:	89 e5                	mov    %esp,%ebp
f012f70b:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
f012f70e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f712:	74 06                	je     f012f71a <str2lower+0x12>
f012f714:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f718:	75 07                	jne    f012f721 <str2lower+0x19>
		return NULL;
f012f71a:	b8 00 00 00 00       	mov    $0x0,%eax
f012f71f:	eb 4d                	jmp    f012f76e <str2lower+0x66>
	}
	char *ref=dst;
f012f721:	8b 45 08             	mov    0x8(%ebp),%eax
f012f724:	89 45 fc             	mov    %eax,-0x4(%ebp)
		while(*src!='\0'){
f012f727:	eb 33                	jmp    f012f75c <str2lower+0x54>
			if(*src>=65&&*src<=90){
f012f729:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f72c:	8a 00                	mov    (%eax),%al
f012f72e:	3c 40                	cmp    $0x40,%al
f012f730:	7e 1a                	jle    f012f74c <str2lower+0x44>
f012f732:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f735:	8a 00                	mov    (%eax),%al
f012f737:	3c 5a                	cmp    $0x5a,%al
f012f739:	7f 11                	jg     f012f74c <str2lower+0x44>
				*dst=*src+32;
f012f73b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f73e:	8a 00                	mov    (%eax),%al
f012f740:	83 c0 20             	add    $0x20,%eax
f012f743:	88 c2                	mov    %al,%dl
f012f745:	8b 45 08             	mov    0x8(%ebp),%eax
f012f748:	88 10                	mov    %dl,(%eax)
f012f74a:	eb 0a                	jmp    f012f756 <str2lower+0x4e>
			}
			else{
				*dst=*src;
f012f74c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f74f:	8a 10                	mov    (%eax),%dl
f012f751:	8b 45 08             	mov    0x8(%ebp),%eax
f012f754:	88 10                	mov    %dl,(%eax)
			}
			src++;
f012f756:	ff 45 0c             	incl   0xc(%ebp)
			dst++;
f012f759:	ff 45 08             	incl   0x8(%ebp)
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
		return NULL;
	}
	char *ref=dst;
		while(*src!='\0'){
f012f75c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f75f:	8a 00                	mov    (%eax),%al
f012f761:	84 c0                	test   %al,%al
f012f763:	75 c4                	jne    f012f729 <str2lower+0x21>
				*dst=*src;
			}
			src++;
			dst++;
		}
		*dst='\0';
f012f765:	8b 45 08             	mov    0x8(%ebp),%eax
f012f768:	c6 00 00             	movb   $0x0,(%eax)
		return ref;
f012f76b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f76e:	c9                   	leave  
f012f76f:	c3                   	ret    

f012f770 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f770:	55                   	push   %ebp
f012f771:	89 e5                	mov    %esp,%ebp
f012f773:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f776:	90                   	nop
f012f777:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f77e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f781:	89 c2                	mov    %eax,%edx
f012f783:	ec                   	in     (%dx),%al
f012f784:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f787:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f78a:	0f b6 c0             	movzbl %al,%eax
f012f78d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f790:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f793:	25 c0 00 00 00       	and    $0xc0,%eax
f012f798:	83 f8 40             	cmp    $0x40,%eax
f012f79b:	75 da                	jne    f012f777 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f79d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f7a1:	74 11                	je     f012f7b4 <ide_wait_ready+0x44>
f012f7a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f7a6:	83 e0 21             	and    $0x21,%eax
f012f7a9:	85 c0                	test   %eax,%eax
f012f7ab:	74 07                	je     f012f7b4 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f7ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f7b2:	eb 05                	jmp    f012f7b9 <ide_wait_ready+0x49>
	}
	return 0;
f012f7b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f7b9:	c9                   	leave  
f012f7ba:	c3                   	ret    

f012f7bb <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f7bb:	55                   	push   %ebp
f012f7bc:	89 e5                	mov    %esp,%ebp
f012f7be:	57                   	push   %edi
f012f7bf:	53                   	push   %ebx
f012f7c0:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f7c3:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f7ca:	76 16                	jbe    f012f7e2 <ide_read+0x27>
f012f7cc:	68 e3 b9 13 f0       	push   $0xf013b9e3
f012f7d1:	68 f0 b9 13 f0       	push   $0xf013b9f0
f012f7d6:	6a 25                	push   $0x25
f012f7d8:	68 05 ba 13 f0       	push   $0xf013ba05
f012f7dd:	e8 ce 09 fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f7e2:	83 ec 0c             	sub    $0xc,%esp
f012f7e5:	6a 00                	push   $0x0
f012f7e7:	e8 84 ff ff ff       	call   f012f770 <ide_wait_ready>
f012f7ec:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f7ef:	8b 45 10             	mov    0x10(%ebp),%eax
f012f7f2:	0f b6 c0             	movzbl %al,%eax
f012f7f5:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f7fc:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f7ff:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f802:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f805:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f806:	8b 45 08             	mov    0x8(%ebp),%eax
f012f809:	0f b6 c0             	movzbl %al,%eax
f012f80c:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f813:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f816:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f819:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f81c:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f81d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f820:	c1 e8 08             	shr    $0x8,%eax
f012f823:	0f b6 c0             	movzbl %al,%eax
f012f826:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f82d:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f830:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f833:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f836:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f837:	8b 45 08             	mov    0x8(%ebp),%eax
f012f83a:	c1 e8 10             	shr    $0x10,%eax
f012f83d:	0f b6 c0             	movzbl %al,%eax
f012f840:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f847:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f84a:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f84d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f850:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f851:	a1 2c 3a 25 f0       	mov    0xf0253a2c,%eax
f012f856:	83 e0 01             	and    $0x1,%eax
f012f859:	c1 e0 04             	shl    $0x4,%eax
f012f85c:	88 c2                	mov    %al,%dl
f012f85e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f861:	c1 e8 18             	shr    $0x18,%eax
f012f864:	83 e0 0f             	and    $0xf,%eax
f012f867:	09 d0                	or     %edx,%eax
f012f869:	83 c8 e0             	or     $0xffffffe0,%eax
f012f86c:	0f b6 c0             	movzbl %al,%eax
f012f86f:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f876:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f879:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f87c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f87f:	ee                   	out    %al,(%dx)
f012f880:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f887:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f88b:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f88e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f891:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f892:	eb 55                	jmp    f012f8e9 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f894:	83 ec 0c             	sub    $0xc,%esp
f012f897:	6a 01                	push   $0x1
f012f899:	e8 d2 fe ff ff       	call   f012f770 <ide_wait_ready>
f012f89e:	83 c4 10             	add    $0x10,%esp
f012f8a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f8a4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f8a8:	79 05                	jns    f012f8af <ide_read+0xf4>
			return r;
f012f8aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f8ad:	eb 45                	jmp    f012f8f4 <ide_read+0x139>
f012f8af:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f8b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f8b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f8bc:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f8c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f8c6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f8c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f8cc:	89 cb                	mov    %ecx,%ebx
f012f8ce:	89 df                	mov    %ebx,%edi
f012f8d0:	89 c1                	mov    %eax,%ecx
f012f8d2:	fc                   	cld    
f012f8d3:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f8d5:	89 c8                	mov    %ecx,%eax
f012f8d7:	89 fb                	mov    %edi,%ebx
f012f8d9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f8dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f8df:	ff 4d 10             	decl   0x10(%ebp)
f012f8e2:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f8e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f8ed:	75 a5                	jne    f012f894 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f8ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f8f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f8f7:	5b                   	pop    %ebx
f012f8f8:	5f                   	pop    %edi
f012f8f9:	5d                   	pop    %ebp
f012f8fa:	c3                   	ret    

f012f8fb <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f8fb:	55                   	push   %ebp
f012f8fc:	89 e5                	mov    %esp,%ebp
f012f8fe:	56                   	push   %esi
f012f8ff:	53                   	push   %ebx
f012f900:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f903:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f90a:	76 16                	jbe    f012f922 <ide_write+0x27>
f012f90c:	68 e3 b9 13 f0       	push   $0xf013b9e3
f012f911:	68 f0 b9 13 f0       	push   $0xf013b9f0
f012f916:	6a 3f                	push   $0x3f
f012f918:	68 05 ba 13 f0       	push   $0xf013ba05
f012f91d:	e8 8e 08 fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f922:	83 ec 0c             	sub    $0xc,%esp
f012f925:	6a 00                	push   $0x0
f012f927:	e8 44 fe ff ff       	call   f012f770 <ide_wait_ready>
f012f92c:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f92f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f932:	0f b6 c0             	movzbl %al,%eax
f012f935:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f93c:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f93f:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f942:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f945:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f946:	8b 45 08             	mov    0x8(%ebp),%eax
f012f949:	0f b6 c0             	movzbl %al,%eax
f012f94c:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f953:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f956:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f959:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f95c:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f95d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f960:	c1 e8 08             	shr    $0x8,%eax
f012f963:	0f b6 c0             	movzbl %al,%eax
f012f966:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f96d:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f970:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f973:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f976:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f977:	8b 45 08             	mov    0x8(%ebp),%eax
f012f97a:	c1 e8 10             	shr    $0x10,%eax
f012f97d:	0f b6 c0             	movzbl %al,%eax
f012f980:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f987:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f98a:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f98d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f990:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f991:	a1 2c 3a 25 f0       	mov    0xf0253a2c,%eax
f012f996:	83 e0 01             	and    $0x1,%eax
f012f999:	c1 e0 04             	shl    $0x4,%eax
f012f99c:	88 c2                	mov    %al,%dl
f012f99e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9a1:	c1 e8 18             	shr    $0x18,%eax
f012f9a4:	83 e0 0f             	and    $0xf,%eax
f012f9a7:	09 d0                	or     %edx,%eax
f012f9a9:	83 c8 e0             	or     $0xffffffe0,%eax
f012f9ac:	0f b6 c0             	movzbl %al,%eax
f012f9af:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f9b6:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f9b9:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f9bc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f9bf:	ee                   	out    %al,(%dx)
f012f9c0:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f9c7:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f9cb:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f9ce:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f9d1:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f9d2:	eb 55                	jmp    f012fa29 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f9d4:	83 ec 0c             	sub    $0xc,%esp
f012f9d7:	6a 01                	push   $0x1
f012f9d9:	e8 92 fd ff ff       	call   f012f770 <ide_wait_ready>
f012f9de:	83 c4 10             	add    $0x10,%esp
f012f9e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f9e4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f9e8:	79 05                	jns    f012f9ef <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f9ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f9ed:	eb 45                	jmp    f012fa34 <ide_write+0x139>
f012f9ef:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f9f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f9f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f9fc:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012fa03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fa06:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012fa09:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fa0c:	89 cb                	mov    %ecx,%ebx
f012fa0e:	89 de                	mov    %ebx,%esi
f012fa10:	89 c1                	mov    %eax,%ecx
f012fa12:	fc                   	cld    
f012fa13:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012fa15:	89 c8                	mov    %ecx,%eax
f012fa17:	89 f3                	mov    %esi,%ebx
f012fa19:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012fa1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012fa1f:	ff 4d 10             	decl   0x10(%ebp)
f012fa22:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012fa29:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012fa2d:	75 a5                	jne    f012f9d4 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012fa2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fa34:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fa37:	5b                   	pop    %ebx
f012fa38:	5e                   	pop    %esi
f012fa39:	5d                   	pop    %ebp
f012fa3a:	c3                   	ret    

f012fa3b <get_block_size>:
//==================================================================================//

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va) {
f012fa3b:	55                   	push   %ebp
f012fa3c:	89 e5                	mov    %esp,%ebp
f012fa3e:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012fa41:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa44:	83 e8 10             	sub    $0x10,%eax
f012fa47:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size;
f012fa4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa4d:	8b 00                	mov    (%eax),%eax
}
f012fa4f:	c9                   	leave  
f012fa50:	c3                   	ret    

f012fa51 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va) {
f012fa51:	55                   	push   %ebp
f012fa52:	89 e5                	mov    %esp,%ebp
f012fa54:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012fa57:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa5a:	83 e8 10             	sub    $0x10,%eax
f012fa5d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free;
f012fa60:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa63:	8a 40 04             	mov    0x4(%eax),%al
}
f012fa66:	c9                   	leave  
f012fa67:	c3                   	ret    

f012fa68 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY) {
f012fa68:	55                   	push   %ebp
f012fa69:	89 e5                	mov    %esp,%ebp
f012fa6b:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012fa6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY) {
f012fa75:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fa78:	83 f8 02             	cmp    $0x2,%eax
f012fa7b:	74 2b                	je     f012faa8 <alloc_block+0x40>
f012fa7d:	83 f8 02             	cmp    $0x2,%eax
f012fa80:	7f 07                	jg     f012fa89 <alloc_block+0x21>
f012fa82:	83 f8 01             	cmp    $0x1,%eax
f012fa85:	74 0e                	je     f012fa95 <alloc_block+0x2d>
f012fa87:	eb 58                	jmp    f012fae1 <alloc_block+0x79>
f012fa89:	83 f8 03             	cmp    $0x3,%eax
f012fa8c:	74 2d                	je     f012fabb <alloc_block+0x53>
f012fa8e:	83 f8 04             	cmp    $0x4,%eax
f012fa91:	74 3b                	je     f012face <alloc_block+0x66>
f012fa93:	eb 4c                	jmp    f012fae1 <alloc_block+0x79>
	case DA_FF:
		va = alloc_block_FF(size);
f012fa95:	83 ec 0c             	sub    $0xc,%esp
f012fa98:	ff 75 08             	pushl  0x8(%ebp)
f012fa9b:	e8 69 01 00 00       	call   f012fc09 <alloc_block_FF>
f012faa0:	83 c4 10             	add    $0x10,%esp
f012faa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012faa6:	eb 4a                	jmp    f012faf2 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012faa8:	83 ec 0c             	sub    $0xc,%esp
f012faab:	ff 75 08             	pushl  0x8(%ebp)
f012faae:	e8 df 04 00 00       	call   f012ff92 <alloc_block_NF>
f012fab3:	83 c4 10             	add    $0x10,%esp
f012fab6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012fab9:	eb 37                	jmp    f012faf2 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012fabb:	83 ec 0c             	sub    $0xc,%esp
f012fabe:	ff 75 08             	pushl  0x8(%ebp)
f012fac1:	e8 ee 02 00 00       	call   f012fdb4 <alloc_block_BF>
f012fac6:	83 c4 10             	add    $0x10,%esp
f012fac9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012facc:	eb 24                	jmp    f012faf2 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012face:	83 ec 0c             	sub    $0xc,%esp
f012fad1:	ff 75 08             	pushl  0x8(%ebp)
f012fad4:	e8 9c 04 00 00       	call   f012ff75 <alloc_block_WF>
f012fad9:	83 c4 10             	add    $0x10,%esp
f012fadc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012fadf:	eb 11                	jmp    f012faf2 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012fae1:	83 ec 0c             	sub    $0xc,%esp
f012fae4:	68 10 ba 13 f0       	push   $0xf013ba10
f012fae9:	e8 43 13 fd ff       	call   f0100e31 <cprintf>
f012faee:	83 c4 10             	add    $0x10,%esp
		break;
f012faf1:	90                   	nop
	}
	return va;
f012faf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012faf5:	c9                   	leave  
f012faf6:	c3                   	ret    

f012faf7 <print_blocks_list>:

//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list) {
f012faf7:	55                   	push   %ebp
f012faf8:	89 e5                	mov    %esp,%ebp
f012fafa:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012fafd:	83 ec 0c             	sub    $0xc,%esp
f012fb00:	68 30 ba 13 f0       	push   $0xf013ba30
f012fb05:	e8 27 13 fd ff       	call   f0100e31 <cprintf>
f012fb0a:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
f012fb0d:	83 ec 0c             	sub    $0xc,%esp
f012fb10:	68 5b ba 13 f0       	push   $0xf013ba5b
f012fb15:	e8 17 13 fd ff       	call   f0100e31 <cprintf>
f012fb1a:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012fb1d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fb23:	eb 26                	jmp    f012fb4b <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
f012fb25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb28:	8a 40 04             	mov    0x4(%eax),%al
f012fb2b:	0f b6 d0             	movzbl %al,%edx
f012fb2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb31:	8b 00                	mov    (%eax),%eax
f012fb33:	83 ec 04             	sub    $0x4,%esp
f012fb36:	52                   	push   %edx
f012fb37:	50                   	push   %eax
f012fb38:	68 73 ba 13 f0       	push   $0xf013ba73
f012fb3d:	e8 ef 12 fd ff       	call   f0100e31 <cprintf>
f012fb42:	83 c4 10             	add    $0x10,%esp

void print_blocks_list(struct MemBlock_LIST list) {
	cprintf("=========================================\n");
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012fb45:	8b 45 10             	mov    0x10(%ebp),%eax
f012fb48:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fb4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fb4f:	74 08                	je     f012fb59 <print_blocks_list+0x62>
f012fb51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb54:	8b 40 08             	mov    0x8(%eax),%eax
f012fb57:	eb 05                	jmp    f012fb5e <print_blocks_list+0x67>
f012fb59:	b8 00 00 00 00       	mov    $0x0,%eax
f012fb5e:	89 45 10             	mov    %eax,0x10(%ebp)
f012fb61:	8b 45 10             	mov    0x10(%ebp),%eax
f012fb64:	85 c0                	test   %eax,%eax
f012fb66:	75 bd                	jne    f012fb25 <print_blocks_list+0x2e>
f012fb68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fb6c:	75 b7                	jne    f012fb25 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
	}
	cprintf("=========================================\n");
f012fb6e:	83 ec 0c             	sub    $0xc,%esp
f012fb71:	68 30 ba 13 f0       	push   $0xf013ba30
f012fb76:	e8 b6 12 fd ff       	call   f0100e31 <cprintf>
f012fb7b:	83 c4 10             	add    $0x10,%esp

}
f012fb7e:	90                   	nop
f012fb7f:	c9                   	leave  
f012fb80:	c3                   	ret    

f012fb81 <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
f012fb81:	55                   	push   %ebp
f012fb82:	89 e5                	mov    %esp,%ebp
f012fb84:	83 ec 18             	sub    $0x18,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012fb87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fb8b:	74 79                	je     f012fc06 <initialize_dynamic_allocator+0x85>
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	//panic("initialize_dynamic_allocator is not implemented yet");
	struct BlockMetaData *firstMeta = (struct BlockMetaData *) daStart;
f012fb8d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
f012fb93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb96:	8b 55 0c             	mov    0xc(%ebp),%edx
f012fb99:	89 10                	mov    %edx,(%eax)
	firstMeta->is_free = 1;
f012fb9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb9e:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);
f012fba2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fba6:	75 14                	jne    f012fbbc <initialize_dynamic_allocator+0x3b>
f012fba8:	83 ec 04             	sub    $0x4,%esp
f012fbab:	68 8c ba 13 f0       	push   $0xf013ba8c
f012fbb0:	6a 63                	push   $0x63
f012fbb2:	68 af ba 13 f0       	push   $0xf013baaf
f012fbb7:	e8 f4 05 fd ff       	call   f01001b0 <_panic>
f012fbbc:	8b 15 34 be 2b f0    	mov    0xf02bbe34,%edx
f012fbc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbc5:	89 50 08             	mov    %edx,0x8(%eax)
f012fbc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbcb:	8b 40 08             	mov    0x8(%eax),%eax
f012fbce:	85 c0                	test   %eax,%eax
f012fbd0:	74 0d                	je     f012fbdf <initialize_dynamic_allocator+0x5e>
f012fbd2:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fbd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fbda:	89 50 0c             	mov    %edx,0xc(%eax)
f012fbdd:	eb 08                	jmp    f012fbe7 <initialize_dynamic_allocator+0x66>
f012fbdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbe2:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fbe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbea:	a3 34 be 2b f0       	mov    %eax,0xf02bbe34
f012fbef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbf2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f012fbf9:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fbfe:	40                   	inc    %eax
f012fbff:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
f012fc04:	eb 01                	jmp    f012fc07 <initialize_dynamic_allocator+0x86>
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return;
f012fc06:	90                   	nop
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
	firstMeta->is_free = 1;
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);

}
f012fc07:	c9                   	leave  
f012fc08:	c3                   	ret    

f012fc09 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================

void *alloc_block_FF(uint32 size) {
f012fc09:	55                   	push   %ebp
f012fc0a:	89 e5                	mov    %esp,%ebp
f012fc0c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	//panic("alloc_block_FF is not implemented yet");
	if (size == 0) {
f012fc0f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fc13:	75 0a                	jne    f012fc1f <alloc_block_FF+0x16>
		return NULL;
f012fc15:	b8 00 00 00 00       	mov    $0x0,%eax
f012fc1a:	e9 93 01 00 00       	jmp    f012fdb2 <alloc_block_FF+0x1a9>
	}
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
f012fc1f:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc22:	83 c0 10             	add    $0x10,%eax
f012fc25:	89 45 f0             	mov    %eax,-0x10(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fc28:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fc2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fc30:	e9 16 01 00 00       	jmp    f012fd4b <alloc_block_FF+0x142>
	{
		if (!iterator->is_free) {
f012fc35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc38:	8a 40 04             	mov    0x4(%eax),%al
f012fc3b:	84 c0                	test   %al,%al
f012fc3d:	0f 84 fc 00 00 00    	je     f012fd3f <alloc_block_FF+0x136>
			continue;
		} else if (iterator->size < sizeToAllocate) {
f012fc43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc46:	8b 00                	mov    (%eax),%eax
f012fc48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fc4b:	0f 82 f1 00 00 00    	jb     f012fd42 <alloc_block_FF+0x139>
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
f012fc51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc54:	8a 40 04             	mov    0x4(%eax),%al
f012fc57:	84 c0                	test   %al,%al
f012fc59:	0f 84 e4 00 00 00    	je     f012fd43 <alloc_block_FF+0x13a>
f012fc5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc62:	8b 00                	mov    (%eax),%eax
f012fc64:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fc67:	0f 82 d6 00 00 00    	jb     f012fd43 <alloc_block_FF+0x13a>
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
f012fc6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc70:	8b 00                	mov    (%eax),%eax
f012fc72:	2b 45 f0             	sub    -0x10(%ebp),%eax
f012fc75:	83 f8 0f             	cmp    $0xf,%eax
f012fc78:	77 12                	ja     f012fc8c <alloc_block_FF+0x83>
				iterator->is_free = 0;
f012fc7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc7d:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
f012fc81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc84:	83 c0 10             	add    $0x10,%eax
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
f012fc87:	e9 26 01 00 00       	jmp    f012fdb2 <alloc_block_FF+0x1a9>
						+ sizeOfMetaData());
			} else {
				temp = iterator;
f012fc8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
				iterator = (struct BlockMetaData *) ((uint32) iterator
f012fc92:	8b 55 f4             	mov    -0xc(%ebp),%edx
						+ sizeToAllocate);
f012fc95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc98:	01 d0                	add    %edx,%eax
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
			} else {
				temp = iterator;
				iterator = (struct BlockMetaData *) ((uint32) iterator
f012fc9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
						+ sizeToAllocate);
				iterator->size = temp->size - (size + sizeOfMetaData());
f012fc9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fca0:	8b 00                	mov    (%eax),%eax
f012fca2:	2b 45 08             	sub    0x8(%ebp),%eax
f012fca5:	8d 50 f0             	lea    -0x10(%eax),%edx
f012fca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fcab:	89 10                	mov    %edx,(%eax)
				iterator->is_free = 1;
f012fcad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fcb0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
f012fcb4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f012fcb8:	74 06                	je     f012fcc0 <alloc_block_FF+0xb7>
f012fcba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fcbe:	75 17                	jne    f012fcd7 <alloc_block_FF+0xce>
f012fcc0:	83 ec 04             	sub    $0x4,%esp
f012fcc3:	68 c8 ba 13 f0       	push   $0xf013bac8
f012fcc8:	68 85 00 00 00       	push   $0x85
f012fccd:	68 af ba 13 f0       	push   $0xf013baaf
f012fcd2:	e8 d9 04 fd ff       	call   f01001b0 <_panic>
f012fcd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fcda:	8b 50 08             	mov    0x8(%eax),%edx
f012fcdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fce0:	89 50 08             	mov    %edx,0x8(%eax)
f012fce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fce6:	8b 40 08             	mov    0x8(%eax),%eax
f012fce9:	85 c0                	test   %eax,%eax
f012fceb:	74 0c                	je     f012fcf9 <alloc_block_FF+0xf0>
f012fced:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fcf0:	8b 40 08             	mov    0x8(%eax),%eax
f012fcf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fcf6:	89 50 0c             	mov    %edx,0xc(%eax)
f012fcf9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fcfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fcff:	89 50 08             	mov    %edx,0x8(%eax)
f012fd02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd05:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fd08:	89 50 0c             	mov    %edx,0xc(%eax)
f012fd0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd0e:	8b 40 08             	mov    0x8(%eax),%eax
f012fd11:	85 c0                	test   %eax,%eax
f012fd13:	75 08                	jne    f012fd1d <alloc_block_FF+0x114>
f012fd15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd18:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fd1d:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fd22:	40                   	inc    %eax
f012fd23:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
				temp->is_free = 0;
f012fd28:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd2b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f012fd2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fd35:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
f012fd37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd3a:	83 c0 10             	add    $0x10,%eax
				iterator->size = temp->size - (size + sizeOfMetaData());
				iterator->is_free = 1;
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
				temp->is_free = 0;
				temp->size = sizeToAllocate;
				return (struct BlockMetaData *) ((uint32) temp
f012fd3d:	eb 73                	jmp    f012fdb2 <alloc_block_FF+0x1a9>
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{
		if (!iterator->is_free) {
			continue;
f012fd3f:	90                   	nop
f012fd40:	eb 01                	jmp    f012fd43 <alloc_block_FF+0x13a>
		} else if (iterator->size < sizeToAllocate) {
			continue;
f012fd42:	90                   	nop
	if (size == 0) {
		return NULL;
	}
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fd43:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fd48:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fd4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fd4f:	74 08                	je     f012fd59 <alloc_block_FF+0x150>
f012fd51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd54:	8b 40 08             	mov    0x8(%eax),%eax
f012fd57:	eb 05                	jmp    f012fd5e <alloc_block_FF+0x155>
f012fd59:	b8 00 00 00 00       	mov    $0x0,%eax
f012fd5e:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f012fd63:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fd68:	85 c0                	test   %eax,%eax
f012fd6a:	0f 85 c5 fe ff ff    	jne    f012fc35 <alloc_block_FF+0x2c>
f012fd70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fd74:	0f 85 bb fe ff ff    	jne    f012fc35 <alloc_block_FF+0x2c>
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
			}
		}
	}
	if (sbrk(sizeToAllocate) == (void*) -1) {
f012fd7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd7d:	83 ec 0c             	sub    $0xc,%esp
f012fd80:	50                   	push   %eax
f012fd81:	e8 cf 81 fd ff       	call   f0107f55 <sbrk>
f012fd86:	83 c4 10             	add    $0x10,%esp
f012fd89:	83 f8 ff             	cmp    $0xffffffff,%eax
f012fd8c:	75 07                	jne    f012fd95 <alloc_block_FF+0x18c>
		return NULL;
f012fd8e:	b8 00 00 00 00       	mov    $0x0,%eax
f012fd93:	eb 1d                	jmp    f012fdb2 <alloc_block_FF+0x1a9>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f012fd95:	a1 38 be 2b f0       	mov    0xf02bbe38,%eax
f012fd9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	extendingBlock->is_free = 0;
f012fd9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fda0:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f012fda4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fda7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fdaa:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f012fdac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fdaf:	83 c0 10             	add    $0x10,%eax

}
f012fdb2:	c9                   	leave  
f012fdb3:	c3                   	ret    

f012fdb4 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size) {
f012fdb4:	55                   	push   %ebp
f012fdb5:	89 e5                	mov    %esp,%ebp
f012fdb7:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	//panic("alloc_block_BF is not implemented yet");
	if (size == 0) {
f012fdba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fdbe:	75 0a                	jne    f012fdca <alloc_block_BF+0x16>
		return NULL;
f012fdc0:	b8 00 00 00 00       	mov    $0x0,%eax
f012fdc5:	e9 a9 01 00 00       	jmp    f012ff73 <alloc_block_BF+0x1bf>
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
f012fdca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 diff = -1;
f012fdd1:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
	uint32 sizeToAllocate = size + sizeOfMetaData();
f012fdd8:	8b 45 08             	mov    0x8(%ebp),%eax
f012fddb:	83 c0 10             	add    $0x10,%eax
f012fdde:	89 45 e8             	mov    %eax,-0x18(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fde1:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fde6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fde9:	eb 4d                	jmp    f012fe38 <alloc_block_BF+0x84>
	{

		if (!iterator->is_free)
f012fdeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdee:	8a 40 04             	mov    0x4(%eax),%al
f012fdf1:	84 c0                	test   %al,%al
f012fdf3:	74 37                	je     f012fe2c <alloc_block_BF+0x78>
		{
			continue;
		} else if (iterator->size < sizeToAllocate)
f012fdf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdf8:	8b 00                	mov    (%eax),%eax
f012fdfa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fdfd:	72 30                	jb     f012fe2f <alloc_block_BF+0x7b>
		{
			continue;
		}
		if(allocate==NULL)
f012fdff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fe03:	75 06                	jne    f012fe0b <alloc_block_BF+0x57>
		 {
			allocate=iterator;
f012fe05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 }
		uint32 newdiff = iterator->size - sizeToAllocate;
f012fe0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe0e:	8b 00                	mov    (%eax),%eax
f012fe10:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012fe13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (diff > newdiff)
f012fe16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fe19:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012fe1c:	76 12                	jbe    f012fe30 <alloc_block_BF+0x7c>
		{
			diff = newdiff;
f012fe1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fe21:	89 45 ec             	mov    %eax,-0x14(%ebp)
			allocate = iterator;
f012fe24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fe2a:	eb 04                	jmp    f012fe30 <alloc_block_BF+0x7c>
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{

		if (!iterator->is_free)
		{
			continue;
f012fe2c:	90                   	nop
f012fe2d:	eb 01                	jmp    f012fe30 <alloc_block_BF+0x7c>
		} else if (iterator->size < sizeToAllocate)
		{
			continue;
f012fe2f:	90                   	nop
		return NULL;
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
	uint32 diff = -1;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fe30:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fe35:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fe38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fe3c:	74 08                	je     f012fe46 <alloc_block_BF+0x92>
f012fe3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe41:	8b 40 08             	mov    0x8(%eax),%eax
f012fe44:	eb 05                	jmp    f012fe4b <alloc_block_BF+0x97>
f012fe46:	b8 00 00 00 00       	mov    $0x0,%eax
f012fe4b:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f012fe50:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fe55:	85 c0                	test   %eax,%eax
f012fe57:	75 92                	jne    f012fdeb <alloc_block_BF+0x37>
f012fe59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fe5d:	75 8c                	jne    f012fdeb <alloc_block_BF+0x37>
		{
			diff = newdiff;
			allocate = iterator;
		}
	}
	if(allocate!=NULL)
f012fe5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fe63:	0f 84 d2 00 00 00    	je     f012ff3b <alloc_block_BF+0x187>
	{
		if (allocate->size - sizeToAllocate < sizeOfMetaData()) {
f012fe69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe6c:	8b 00                	mov    (%eax),%eax
f012fe6e:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012fe71:	83 f8 0f             	cmp    $0xf,%eax
f012fe74:	77 12                	ja     f012fe88 <alloc_block_BF+0xd4>

				allocate->is_free = 0;
f012fe76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe79:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
f012fe7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe80:	83 c0 10             	add    $0x10,%eax
f012fe83:	e9 eb 00 00 00       	jmp    f012ff73 <alloc_block_BF+0x1bf>
			} else {
				temp = allocate;
f012fe88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fe8b:	89 45 e0             	mov    %eax,-0x20(%ebp)
				allocate = (struct BlockMetaData *) ((uint32) allocate
f012fe8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
						+ sizeToAllocate);
f012fe91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fe94:	01 d0                	add    %edx,%eax

				allocate->is_free = 0;
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
			} else {
				temp = allocate;
				allocate = (struct BlockMetaData *) ((uint32) allocate
f012fe96:	89 45 f0             	mov    %eax,-0x10(%ebp)
						+ sizeToAllocate);
				allocate->size = temp->size - (size + sizeOfMetaData());
f012fe99:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe9c:	8b 00                	mov    (%eax),%eax
f012fe9e:	2b 45 08             	sub    0x8(%ebp),%eax
f012fea1:	8d 50 f0             	lea    -0x10(%eax),%edx
f012fea4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fea7:	89 10                	mov    %edx,(%eax)
				allocate->is_free = 1;
f012fea9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012feac:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, allocate);
f012feb0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012feb4:	74 06                	je     f012febc <alloc_block_BF+0x108>
f012feb6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012feba:	75 17                	jne    f012fed3 <alloc_block_BF+0x11f>
f012febc:	83 ec 04             	sub    $0x4,%esp
f012febf:	68 c8 ba 13 f0       	push   $0xf013bac8
f012fec4:	68 c5 00 00 00       	push   $0xc5
f012fec9:	68 af ba 13 f0       	push   $0xf013baaf
f012fece:	e8 dd 02 fd ff       	call   f01001b0 <_panic>
f012fed3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fed6:	8b 50 08             	mov    0x8(%eax),%edx
f012fed9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fedc:	89 50 08             	mov    %edx,0x8(%eax)
f012fedf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fee2:	8b 40 08             	mov    0x8(%eax),%eax
f012fee5:	85 c0                	test   %eax,%eax
f012fee7:	74 0c                	je     f012fef5 <alloc_block_BF+0x141>
f012fee9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012feec:	8b 40 08             	mov    0x8(%eax),%eax
f012feef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fef2:	89 50 0c             	mov    %edx,0xc(%eax)
f012fef5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fef8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fefb:	89 50 08             	mov    %edx,0x8(%eax)
f012fefe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff01:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ff04:	89 50 0c             	mov    %edx,0xc(%eax)
f012ff07:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff0a:	8b 40 08             	mov    0x8(%eax),%eax
f012ff0d:	85 c0                	test   %eax,%eax
f012ff0f:	75 08                	jne    f012ff19 <alloc_block_BF+0x165>
f012ff11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff14:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012ff19:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012ff1e:	40                   	inc    %eax
f012ff1f:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
				temp->is_free = 0;
f012ff24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ff27:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f012ff2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ff2e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012ff31:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f012ff33:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ff36:	83 c0 10             	add    $0x10,%eax
f012ff39:	eb 38                	jmp    f012ff73 <alloc_block_BF+0x1bf>
			}
	}
	else{
	if (sbrk(sizeToAllocate) == (void*) -1) {
f012ff3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff3e:	83 ec 0c             	sub    $0xc,%esp
f012ff41:	50                   	push   %eax
f012ff42:	e8 0e 80 fd ff       	call   f0107f55 <sbrk>
f012ff47:	83 c4 10             	add    $0x10,%esp
f012ff4a:	83 f8 ff             	cmp    $0xffffffff,%eax
f012ff4d:	75 07                	jne    f012ff56 <alloc_block_BF+0x1a2>
		return NULL;
f012ff4f:	b8 00 00 00 00       	mov    $0x0,%eax
f012ff54:	eb 1d                	jmp    f012ff73 <alloc_block_BF+0x1bf>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f012ff56:	a1 38 be 2b f0       	mov    0xf02bbe38,%eax
f012ff5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	extendingBlock->is_free = 0;
f012ff5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ff61:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f012ff65:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ff68:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012ff6b:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f012ff6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ff70:	83 c0 10             	add    $0x10,%eax
	}


}
f012ff73:	c9                   	leave  
f012ff74:	c3                   	ret    

f012ff75 <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size) {
f012ff75:	55                   	push   %ebp
f012ff76:	89 e5                	mov    %esp,%ebp
f012ff78:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012ff7b:	83 ec 04             	sub    $0x4,%esp
f012ff7e:	68 fc ba 13 f0       	push   $0xf013bafc
f012ff83:	68 dd 00 00 00       	push   $0xdd
f012ff88:	68 af ba 13 f0       	push   $0xf013baaf
f012ff8d:	e8 1e 02 fd ff       	call   f01001b0 <_panic>

f012ff92 <alloc_block_NF>:
}

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size) {
f012ff92:	55                   	push   %ebp
f012ff93:	89 e5                	mov    %esp,%ebp
f012ff95:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012ff98:	83 ec 04             	sub    $0x4,%esp
f012ff9b:	68 24 bb 13 f0       	push   $0xf013bb24
f012ffa0:	68 e5 00 00 00       	push   $0xe5
f012ffa5:	68 af ba 13 f0       	push   $0xf013baaf
f012ffaa:	e8 01 02 fd ff       	call   f01001b0 <_panic>

f012ffaf <free_block>:
}

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va) {
f012ffaf:	55                   	push   %ebp
f012ffb0:	89 e5                	mov    %esp,%ebp
f012ffb2:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
f012ffb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ffb9:	0f 84 8c 00 00 00    	je     f013004b <free_block+0x9c>
		return;
	}
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f012ffbf:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffc2:	83 e8 10             	sub    $0x10,%eax
f012ffc5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f012ffc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ffcb:	8b 40 08             	mov    0x8(%eax),%eax
f012ffce:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
f012ffd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ffd4:	8b 40 0c             	mov    0xc(%eax),%eax
f012ffd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//address is null or block is already free
	if (/*currBlock->is_free ||*/ currBlock == NULL) {
f012ffda:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012ffde:	74 6e                	je     f013004e <free_block+0x9f>
		return;
	}

	//freeing the block
	currBlock->is_free = 1;
f012ffe0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ffe3:	c6 40 04 01          	movb   $0x1,0x4(%eax)

	//next is free
	if (nextBlock != NULL && nextBlock->is_free) {
f012ffe7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012ffeb:	74 2b                	je     f0130018 <free_block+0x69>
f012ffed:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fff0:	8a 40 04             	mov    0x4(%eax),%al
f012fff3:	84 c0                	test   %al,%al
f012fff5:	74 21                	je     f0130018 <free_block+0x69>
		currBlock->size += nextBlock->size;
f012fff7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fffa:	8b 10                	mov    (%eax),%edx
f012fffc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012ffff:	8b 00                	mov    (%eax),%eax
f0130001:	01 c2                	add    %eax,%edx
f0130003:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130006:	89 10                	mov    %edx,(%eax)
		nextBlock->is_free = 0;
f0130008:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013000b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		nextBlock->size = 0;
f013000f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130012:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	//prev is free or prev and next are free
	if (prevBlock != NULL && prevBlock->is_free) {
f0130018:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013001c:	74 31                	je     f013004f <free_block+0xa0>
f013001e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130021:	8a 40 04             	mov    0x4(%eax),%al
f0130024:	84 c0                	test   %al,%al
f0130026:	74 27                	je     f013004f <free_block+0xa0>
		prevBlock->size += currBlock->size;
f0130028:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013002b:	8b 10                	mov    (%eax),%edx
f013002d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130030:	8b 00                	mov    (%eax),%eax
f0130032:	01 c2                	add    %eax,%edx
f0130034:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130037:	89 10                	mov    %edx,(%eax)
		currBlock->size = 0;
f0130039:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013003c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		currBlock->is_free = 0;
f0130042:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130045:	c6 40 04 00          	movb   $0x0,0x4(%eax)
f0130049:	eb 04                	jmp    f013004f <free_block+0xa0>
//===================================================
void free_block(void *va) {
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
		return;
f013004b:	90                   	nop
f013004c:	eb 01                	jmp    f013004f <free_block+0xa0>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
	//address is null or block is already free
	if (/*currBlock->is_free ||*/ currBlock == NULL) {
		return;
f013004e:	90                   	nop
		currBlock->size = 0;
		currBlock->is_free = 0;

	}

}
f013004f:	c9                   	leave  
f0130050:	c3                   	ret    

f0130051 <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size) {
f0130051:	55                   	push   %ebp
f0130052:	89 e5                	mov    %esp,%ebp
f0130054:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");

	if (va == NULL && new_size != 0) {
f0130057:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013005b:	75 19                	jne    f0130076 <realloc_block_FF+0x25>
f013005d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130061:	74 13                	je     f0130076 <realloc_block_FF+0x25>
		return alloc_block_FF(new_size);
f0130063:	83 ec 0c             	sub    $0xc,%esp
f0130066:	ff 75 0c             	pushl  0xc(%ebp)
f0130069:	e8 9b fb ff ff       	call   f012fc09 <alloc_block_FF>
f013006e:	83 c4 10             	add    $0x10,%esp
f0130071:	e9 7f 02 00 00       	jmp    f01302f5 <realloc_block_FF+0x2a4>
	} else if (va != NULL && new_size == 0) {
f0130076:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013007a:	74 1e                	je     f013009a <realloc_block_FF+0x49>
f013007c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130080:	75 18                	jne    f013009a <realloc_block_FF+0x49>
		free_block(va);
f0130082:	83 ec 0c             	sub    $0xc,%esp
f0130085:	ff 75 08             	pushl  0x8(%ebp)
f0130088:	e8 22 ff ff ff       	call   f012ffaf <free_block>
f013008d:	83 c4 10             	add    $0x10,%esp
		return NULL;
f0130090:	b8 00 00 00 00       	mov    $0x0,%eax
f0130095:	e9 5b 02 00 00       	jmp    f01302f5 <realloc_block_FF+0x2a4>
	} else if (va == NULL && new_size == 0) {
f013009a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013009e:	75 10                	jne    f01300b0 <realloc_block_FF+0x5f>
f01300a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01300a4:	75 0a                	jne    f01300b0 <realloc_block_FF+0x5f>
		return NULL;
f01300a6:	b8 00 00 00 00       	mov    $0x0,%eax
f01300ab:	e9 45 02 00 00       	jmp    f01302f5 <realloc_block_FF+0x2a4>
	}
	uint32 sizeToAllocate = new_size + sizeOfMetaData();
f01300b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01300b3:	83 c0 10             	add    $0x10,%eax
f01300b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f01300b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01300bc:	83 e8 10             	sub    $0x10,%eax
f01300bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f01300c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300c5:	8b 40 08             	mov    0x8(%eax),%eax
f01300c8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	 if (sizeToAllocate < currBlock->size) {
f01300cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300ce:	8b 00                	mov    (%eax),%eax
f01300d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01300d3:	0f 86 0e 01 00 00    	jbe    f01301e7 <realloc_block_FF+0x196>
		 if (currBlock->size - sizeToAllocate < sizeOfMetaData()) {
f01300d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300dc:	8b 00                	mov    (%eax),%eax
f01300de:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01300e1:	83 f8 0f             	cmp    $0xf,%eax
f01300e4:	77 0b                	ja     f01300f1 <realloc_block_FF+0xa0>

		 				return (struct BlockMetaData*) ((uint32) currBlock
		 						+ sizeOfMetaData());
f01300e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300e9:	83 c0 10             	add    $0x10,%eax
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;

	 if (sizeToAllocate < currBlock->size) {
		 if (currBlock->size - sizeToAllocate < sizeOfMetaData()) {

		 				return (struct BlockMetaData*) ((uint32) currBlock
f01300ec:	e9 04 02 00 00       	jmp    f01302f5 <realloc_block_FF+0x2a4>
		 						+ sizeOfMetaData());
		 			}
		 struct BlockMetaData *temp = currBlock;
f01300f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	 currBlock = (struct BlockMetaData *) ((uint32) currBlock
f01300f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
								+ sizeToAllocate);
f01300fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01300fd:	01 d0                	add    %edx,%eax

		 				return (struct BlockMetaData*) ((uint32) currBlock
		 						+ sizeOfMetaData());
		 			}
		 struct BlockMetaData *temp = currBlock;
	 currBlock = (struct BlockMetaData *) ((uint32) currBlock
f01300ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
								+ sizeToAllocate);
	 currBlock->size = temp->size - (sizeToAllocate /*+ sizeOfMetaData()*/);
f0130102:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130105:	8b 00                	mov    (%eax),%eax
f0130107:	2b 45 f4             	sub    -0xc(%ebp),%eax
f013010a:	89 c2                	mov    %eax,%edx
f013010c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013010f:	89 10                	mov    %edx,(%eax)
	 currBlock->is_free = 1;
f0130111:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130114:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	 LIST_INSERT_AFTER(&Heap_MetaBlock, temp, currBlock);
f0130118:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013011c:	74 06                	je     f0130124 <realloc_block_FF+0xd3>
f013011e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130122:	75 17                	jne    f013013b <realloc_block_FF+0xea>
f0130124:	83 ec 04             	sub    $0x4,%esp
f0130127:	68 c8 ba 13 f0       	push   $0xf013bac8
f013012c:	68 2b 01 00 00       	push   $0x12b
f0130131:	68 af ba 13 f0       	push   $0xf013baaf
f0130136:	e8 75 00 fd ff       	call   f01001b0 <_panic>
f013013b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013013e:	8b 50 08             	mov    0x8(%eax),%edx
f0130141:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130144:	89 50 08             	mov    %edx,0x8(%eax)
f0130147:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013014a:	8b 40 08             	mov    0x8(%eax),%eax
f013014d:	85 c0                	test   %eax,%eax
f013014f:	74 0c                	je     f013015d <realloc_block_FF+0x10c>
f0130151:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130154:	8b 40 08             	mov    0x8(%eax),%eax
f0130157:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013015a:	89 50 0c             	mov    %edx,0xc(%eax)
f013015d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130160:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130163:	89 50 08             	mov    %edx,0x8(%eax)
f0130166:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130169:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013016c:	89 50 0c             	mov    %edx,0xc(%eax)
f013016f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130172:	8b 40 08             	mov    0x8(%eax),%eax
f0130175:	85 c0                	test   %eax,%eax
f0130177:	75 08                	jne    f0130181 <realloc_block_FF+0x130>
f0130179:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013017c:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f0130181:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f0130186:	40                   	inc    %eax
f0130187:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
	 temp->is_free = 0;
f013018c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013018f:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	 temp->size = sizeToAllocate;
f0130193:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130196:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130199:	89 10                	mov    %edx,(%eax)

	   if(currBlock->prev_next_info.le_next!=NULL&&currBlock->prev_next_info.le_next->is_free){
f013019b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013019e:	8b 40 08             	mov    0x8(%eax),%eax
f01301a1:	85 c0                	test   %eax,%eax
f01301a3:	74 37                	je     f01301dc <realloc_block_FF+0x18b>
f01301a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301a8:	8b 40 08             	mov    0x8(%eax),%eax
f01301ab:	8a 40 04             	mov    0x4(%eax),%al
f01301ae:	84 c0                	test   %al,%al
f01301b0:	74 2a                	je     f01301dc <realloc_block_FF+0x18b>
		   currBlock->size += currBlock->prev_next_info.le_next->size;
f01301b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301b5:	8b 10                	mov    (%eax),%edx
f01301b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301ba:	8b 40 08             	mov    0x8(%eax),%eax
f01301bd:	8b 00                	mov    (%eax),%eax
f01301bf:	01 c2                	add    %eax,%edx
f01301c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301c4:	89 10                	mov    %edx,(%eax)
		   currBlock->prev_next_info.le_next->is_free = 0;
f01301c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301c9:	8b 40 08             	mov    0x8(%eax),%eax
f01301cc:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		   currBlock->prev_next_info.le_next->size = 0;
f01301d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301d3:	8b 40 08             	mov    0x8(%eax),%eax
f01301d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	   }

		return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f01301dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01301df:	83 c0 10             	add    $0x10,%eax
f01301e2:	e9 0e 01 00 00       	jmp    f01302f5 <realloc_block_FF+0x2a4>
	} else if (sizeToAllocate > currBlock->size) {
f01301e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301ea:	8b 00                	mov    (%eax),%eax
f01301ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01301ef:	0f 83 e9 00 00 00    	jae    f01302de <realloc_block_FF+0x28d>
		if (nextBlock->is_free && nextBlock != NULL) {
f01301f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01301f8:	8a 40 04             	mov    0x4(%eax),%al
f01301fb:	84 c0                	test   %al,%al
f01301fd:	0f 84 98 00 00 00    	je     f013029b <realloc_block_FF+0x24a>
f0130203:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130207:	0f 84 8e 00 00 00    	je     f013029b <realloc_block_FF+0x24a>
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
f013020d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130210:	8b 10                	mov    (%eax),%edx
f0130212:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130215:	8b 00                	mov    (%eax),%eax
f0130217:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013021a:	29 c1                	sub    %eax,%ecx
f013021c:	89 c8                	mov    %ecx,%eax
f013021e:	39 c2                	cmp    %eax,%edx
f0130220:	75 1a                	jne    f013023c <realloc_block_FF+0x1eb>
				currBlock->size = sizeToAllocate;
f0130222:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130225:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130228:	89 10                	mov    %edx,(%eax)
				nextBlock->is_free = 0;
f013022a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013022d:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				nextBlock->size = 0;
f0130231:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130234:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013023a:	eb 57                	jmp    f0130293 <realloc_block_FF+0x242>
			} else if (nextBlock->size - sizeOfMetaData()
f013023c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013023f:	8b 00                	mov    (%eax),%eax
f0130241:	8d 48 f0             	lea    -0x10(%eax),%ecx
					> sizeToAllocate - currBlock->size) {
f0130244:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130247:	8b 00                	mov    (%eax),%eax
f0130249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013024c:	29 c2                	sub    %eax,%edx
f013024e:	89 d0                	mov    %edx,%eax
		if (nextBlock->is_free && nextBlock != NULL) {
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
				currBlock->size = sizeToAllocate;
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
f0130250:	39 c1                	cmp    %eax,%ecx
f0130252:	76 3f                	jbe    f0130293 <realloc_block_FF+0x242>
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
f0130254:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130257:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			  	nextBlock = (struct BlockMetaData *) ((uint32) temp
f013025a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
						+ sizeToAllocate);
f013025d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130260:	01 d0                	add    %edx,%eax
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
			  	nextBlock = (struct BlockMetaData *) ((uint32) temp
f0130262:	89 45 ec             	mov    %eax,-0x14(%ebp)
						+ sizeToAllocate);
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
f0130265:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130268:	8b 00                	mov    (%eax),%eax
f013026a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f013026d:	89 c2                	mov    %eax,%edx
f013026f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130272:	8b 00                	mov    (%eax),%eax
f0130274:	29 c2                	sub    %eax,%edx
f0130276:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130279:	89 10                	mov    %edx,(%eax)
				temp->size = 0;
f013027b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013027e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				temp->is_free = 0;
f0130284:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130287:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				currBlock->size = sizeToAllocate;
f013028b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013028e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130291:	89 10                	mov    %edx,(%eax)
			}
			return (struct BlockMetaData *) ((uint32) currBlock
					+ sizeOfMetaData());
f0130293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130296:	83 c0 10             	add    $0x10,%eax
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
				temp->size = 0;
				temp->is_free = 0;
				currBlock->size = sizeToAllocate;
			}
			return (struct BlockMetaData *) ((uint32) currBlock
f0130299:	eb 5a                	jmp    f01302f5 <realloc_block_FF+0x2a4>
					+ sizeOfMetaData());
		} else if (nextBlock == NULL
f013029b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013029f:	74 1f                	je     f01302c0 <realloc_block_FF+0x26f>
				|| nextBlock->size < sizeToAllocate - currBlock->size
f01302a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01302a4:	8b 10                	mov    (%eax),%edx
f01302a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302a9:	8b 00                	mov    (%eax),%eax
f01302ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01302ae:	29 c1                	sub    %eax,%ecx
f01302b0:	89 c8                	mov    %ecx,%eax
f01302b2:	39 c2                	cmp    %eax,%edx
f01302b4:	72 0a                	jb     f01302c0 <realloc_block_FF+0x26f>
				|| !nextBlock->is_free) {
f01302b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01302b9:	8a 40 04             	mov    0x4(%eax),%al
f01302bc:	84 c0                	test   %al,%al
f01302be:	75 30                	jne    f01302f0 <realloc_block_FF+0x29f>
			free_block(currBlock);
f01302c0:	83 ec 0c             	sub    $0xc,%esp
f01302c3:	ff 75 f0             	pushl  -0x10(%ebp)
f01302c6:	e8 e4 fc ff ff       	call   f012ffaf <free_block>
f01302cb:	83 c4 10             	add    $0x10,%esp
			return alloc_block_FF(new_size);
f01302ce:	83 ec 0c             	sub    $0xc,%esp
f01302d1:	ff 75 0c             	pushl  0xc(%ebp)
f01302d4:	e8 30 f9 ff ff       	call   f012fc09 <alloc_block_FF>
f01302d9:	83 c4 10             	add    $0x10,%esp
f01302dc:	eb 17                	jmp    f01302f5 <realloc_block_FF+0x2a4>

		}
	} else if (sizeToAllocate == currBlock->size) {
f01302de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302e1:	8b 00                	mov    (%eax),%eax
f01302e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01302e6:	75 08                	jne    f01302f0 <realloc_block_FF+0x29f>
		return (struct BlockMetaData *) ((uint32) currBlock + sizeOfMetaData());
f01302e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302eb:	83 c0 10             	add    $0x10,%eax
f01302ee:	eb 05                	jmp    f01302f5 <realloc_block_FF+0x2a4>
	}
	return NULL;
f01302f0:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01302f5:	c9                   	leave  
f01302f6:	c3                   	ret    
f01302f7:	90                   	nop

f01302f8 <__udivdi3>:
f01302f8:	55                   	push   %ebp
f01302f9:	57                   	push   %edi
f01302fa:	56                   	push   %esi
f01302fb:	53                   	push   %ebx
f01302fc:	83 ec 1c             	sub    $0x1c,%esp
f01302ff:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0130303:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0130307:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013030b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f013030f:	89 ca                	mov    %ecx,%edx
f0130311:	89 f8                	mov    %edi,%eax
f0130313:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0130317:	85 f6                	test   %esi,%esi
f0130319:	75 2d                	jne    f0130348 <__udivdi3+0x50>
f013031b:	39 cf                	cmp    %ecx,%edi
f013031d:	77 65                	ja     f0130384 <__udivdi3+0x8c>
f013031f:	89 fd                	mov    %edi,%ebp
f0130321:	85 ff                	test   %edi,%edi
f0130323:	75 0b                	jne    f0130330 <__udivdi3+0x38>
f0130325:	b8 01 00 00 00       	mov    $0x1,%eax
f013032a:	31 d2                	xor    %edx,%edx
f013032c:	f7 f7                	div    %edi
f013032e:	89 c5                	mov    %eax,%ebp
f0130330:	31 d2                	xor    %edx,%edx
f0130332:	89 c8                	mov    %ecx,%eax
f0130334:	f7 f5                	div    %ebp
f0130336:	89 c1                	mov    %eax,%ecx
f0130338:	89 d8                	mov    %ebx,%eax
f013033a:	f7 f5                	div    %ebp
f013033c:	89 cf                	mov    %ecx,%edi
f013033e:	89 fa                	mov    %edi,%edx
f0130340:	83 c4 1c             	add    $0x1c,%esp
f0130343:	5b                   	pop    %ebx
f0130344:	5e                   	pop    %esi
f0130345:	5f                   	pop    %edi
f0130346:	5d                   	pop    %ebp
f0130347:	c3                   	ret    
f0130348:	39 ce                	cmp    %ecx,%esi
f013034a:	77 28                	ja     f0130374 <__udivdi3+0x7c>
f013034c:	0f bd fe             	bsr    %esi,%edi
f013034f:	83 f7 1f             	xor    $0x1f,%edi
f0130352:	75 40                	jne    f0130394 <__udivdi3+0x9c>
f0130354:	39 ce                	cmp    %ecx,%esi
f0130356:	72 0a                	jb     f0130362 <__udivdi3+0x6a>
f0130358:	3b 44 24 08          	cmp    0x8(%esp),%eax
f013035c:	0f 87 9e 00 00 00    	ja     f0130400 <__udivdi3+0x108>
f0130362:	b8 01 00 00 00       	mov    $0x1,%eax
f0130367:	89 fa                	mov    %edi,%edx
f0130369:	83 c4 1c             	add    $0x1c,%esp
f013036c:	5b                   	pop    %ebx
f013036d:	5e                   	pop    %esi
f013036e:	5f                   	pop    %edi
f013036f:	5d                   	pop    %ebp
f0130370:	c3                   	ret    
f0130371:	8d 76 00             	lea    0x0(%esi),%esi
f0130374:	31 ff                	xor    %edi,%edi
f0130376:	31 c0                	xor    %eax,%eax
f0130378:	89 fa                	mov    %edi,%edx
f013037a:	83 c4 1c             	add    $0x1c,%esp
f013037d:	5b                   	pop    %ebx
f013037e:	5e                   	pop    %esi
f013037f:	5f                   	pop    %edi
f0130380:	5d                   	pop    %ebp
f0130381:	c3                   	ret    
f0130382:	66 90                	xchg   %ax,%ax
f0130384:	89 d8                	mov    %ebx,%eax
f0130386:	f7 f7                	div    %edi
f0130388:	31 ff                	xor    %edi,%edi
f013038a:	89 fa                	mov    %edi,%edx
f013038c:	83 c4 1c             	add    $0x1c,%esp
f013038f:	5b                   	pop    %ebx
f0130390:	5e                   	pop    %esi
f0130391:	5f                   	pop    %edi
f0130392:	5d                   	pop    %ebp
f0130393:	c3                   	ret    
f0130394:	bd 20 00 00 00       	mov    $0x20,%ebp
f0130399:	89 eb                	mov    %ebp,%ebx
f013039b:	29 fb                	sub    %edi,%ebx
f013039d:	89 f9                	mov    %edi,%ecx
f013039f:	d3 e6                	shl    %cl,%esi
f01303a1:	89 c5                	mov    %eax,%ebp
f01303a3:	88 d9                	mov    %bl,%cl
f01303a5:	d3 ed                	shr    %cl,%ebp
f01303a7:	89 e9                	mov    %ebp,%ecx
f01303a9:	09 f1                	or     %esi,%ecx
f01303ab:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01303af:	89 f9                	mov    %edi,%ecx
f01303b1:	d3 e0                	shl    %cl,%eax
f01303b3:	89 c5                	mov    %eax,%ebp
f01303b5:	89 d6                	mov    %edx,%esi
f01303b7:	88 d9                	mov    %bl,%cl
f01303b9:	d3 ee                	shr    %cl,%esi
f01303bb:	89 f9                	mov    %edi,%ecx
f01303bd:	d3 e2                	shl    %cl,%edx
f01303bf:	8b 44 24 08          	mov    0x8(%esp),%eax
f01303c3:	88 d9                	mov    %bl,%cl
f01303c5:	d3 e8                	shr    %cl,%eax
f01303c7:	09 c2                	or     %eax,%edx
f01303c9:	89 d0                	mov    %edx,%eax
f01303cb:	89 f2                	mov    %esi,%edx
f01303cd:	f7 74 24 0c          	divl   0xc(%esp)
f01303d1:	89 d6                	mov    %edx,%esi
f01303d3:	89 c3                	mov    %eax,%ebx
f01303d5:	f7 e5                	mul    %ebp
f01303d7:	39 d6                	cmp    %edx,%esi
f01303d9:	72 19                	jb     f01303f4 <__udivdi3+0xfc>
f01303db:	74 0b                	je     f01303e8 <__udivdi3+0xf0>
f01303dd:	89 d8                	mov    %ebx,%eax
f01303df:	31 ff                	xor    %edi,%edi
f01303e1:	e9 58 ff ff ff       	jmp    f013033e <__udivdi3+0x46>
f01303e6:	66 90                	xchg   %ax,%ax
f01303e8:	8b 54 24 08          	mov    0x8(%esp),%edx
f01303ec:	89 f9                	mov    %edi,%ecx
f01303ee:	d3 e2                	shl    %cl,%edx
f01303f0:	39 c2                	cmp    %eax,%edx
f01303f2:	73 e9                	jae    f01303dd <__udivdi3+0xe5>
f01303f4:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01303f7:	31 ff                	xor    %edi,%edi
f01303f9:	e9 40 ff ff ff       	jmp    f013033e <__udivdi3+0x46>
f01303fe:	66 90                	xchg   %ax,%ax
f0130400:	31 c0                	xor    %eax,%eax
f0130402:	e9 37 ff ff ff       	jmp    f013033e <__udivdi3+0x46>
f0130407:	90                   	nop

f0130408 <__umoddi3>:
f0130408:	55                   	push   %ebp
f0130409:	57                   	push   %edi
f013040a:	56                   	push   %esi
f013040b:	53                   	push   %ebx
f013040c:	83 ec 1c             	sub    $0x1c,%esp
f013040f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0130413:	8b 74 24 34          	mov    0x34(%esp),%esi
f0130417:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013041b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f013041f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0130423:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0130427:	89 f3                	mov    %esi,%ebx
f0130429:	89 fa                	mov    %edi,%edx
f013042b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013042f:	89 34 24             	mov    %esi,(%esp)
f0130432:	85 c0                	test   %eax,%eax
f0130434:	75 1a                	jne    f0130450 <__umoddi3+0x48>
f0130436:	39 f7                	cmp    %esi,%edi
f0130438:	0f 86 a2 00 00 00    	jbe    f01304e0 <__umoddi3+0xd8>
f013043e:	89 c8                	mov    %ecx,%eax
f0130440:	89 f2                	mov    %esi,%edx
f0130442:	f7 f7                	div    %edi
f0130444:	89 d0                	mov    %edx,%eax
f0130446:	31 d2                	xor    %edx,%edx
f0130448:	83 c4 1c             	add    $0x1c,%esp
f013044b:	5b                   	pop    %ebx
f013044c:	5e                   	pop    %esi
f013044d:	5f                   	pop    %edi
f013044e:	5d                   	pop    %ebp
f013044f:	c3                   	ret    
f0130450:	39 f0                	cmp    %esi,%eax
f0130452:	0f 87 ac 00 00 00    	ja     f0130504 <__umoddi3+0xfc>
f0130458:	0f bd e8             	bsr    %eax,%ebp
f013045b:	83 f5 1f             	xor    $0x1f,%ebp
f013045e:	0f 84 ac 00 00 00    	je     f0130510 <__umoddi3+0x108>
f0130464:	bf 20 00 00 00       	mov    $0x20,%edi
f0130469:	29 ef                	sub    %ebp,%edi
f013046b:	89 fe                	mov    %edi,%esi
f013046d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0130471:	89 e9                	mov    %ebp,%ecx
f0130473:	d3 e0                	shl    %cl,%eax
f0130475:	89 d7                	mov    %edx,%edi
f0130477:	89 f1                	mov    %esi,%ecx
f0130479:	d3 ef                	shr    %cl,%edi
f013047b:	09 c7                	or     %eax,%edi
f013047d:	89 e9                	mov    %ebp,%ecx
f013047f:	d3 e2                	shl    %cl,%edx
f0130481:	89 14 24             	mov    %edx,(%esp)
f0130484:	89 d8                	mov    %ebx,%eax
f0130486:	d3 e0                	shl    %cl,%eax
f0130488:	89 c2                	mov    %eax,%edx
f013048a:	8b 44 24 08          	mov    0x8(%esp),%eax
f013048e:	d3 e0                	shl    %cl,%eax
f0130490:	89 44 24 04          	mov    %eax,0x4(%esp)
f0130494:	8b 44 24 08          	mov    0x8(%esp),%eax
f0130498:	89 f1                	mov    %esi,%ecx
f013049a:	d3 e8                	shr    %cl,%eax
f013049c:	09 d0                	or     %edx,%eax
f013049e:	d3 eb                	shr    %cl,%ebx
f01304a0:	89 da                	mov    %ebx,%edx
f01304a2:	f7 f7                	div    %edi
f01304a4:	89 d3                	mov    %edx,%ebx
f01304a6:	f7 24 24             	mull   (%esp)
f01304a9:	89 c6                	mov    %eax,%esi
f01304ab:	89 d1                	mov    %edx,%ecx
f01304ad:	39 d3                	cmp    %edx,%ebx
f01304af:	0f 82 87 00 00 00    	jb     f013053c <__umoddi3+0x134>
f01304b5:	0f 84 91 00 00 00    	je     f013054c <__umoddi3+0x144>
f01304bb:	8b 54 24 04          	mov    0x4(%esp),%edx
f01304bf:	29 f2                	sub    %esi,%edx
f01304c1:	19 cb                	sbb    %ecx,%ebx
f01304c3:	89 d8                	mov    %ebx,%eax
f01304c5:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01304c9:	d3 e0                	shl    %cl,%eax
f01304cb:	89 e9                	mov    %ebp,%ecx
f01304cd:	d3 ea                	shr    %cl,%edx
f01304cf:	09 d0                	or     %edx,%eax
f01304d1:	89 e9                	mov    %ebp,%ecx
f01304d3:	d3 eb                	shr    %cl,%ebx
f01304d5:	89 da                	mov    %ebx,%edx
f01304d7:	83 c4 1c             	add    $0x1c,%esp
f01304da:	5b                   	pop    %ebx
f01304db:	5e                   	pop    %esi
f01304dc:	5f                   	pop    %edi
f01304dd:	5d                   	pop    %ebp
f01304de:	c3                   	ret    
f01304df:	90                   	nop
f01304e0:	89 fd                	mov    %edi,%ebp
f01304e2:	85 ff                	test   %edi,%edi
f01304e4:	75 0b                	jne    f01304f1 <__umoddi3+0xe9>
f01304e6:	b8 01 00 00 00       	mov    $0x1,%eax
f01304eb:	31 d2                	xor    %edx,%edx
f01304ed:	f7 f7                	div    %edi
f01304ef:	89 c5                	mov    %eax,%ebp
f01304f1:	89 f0                	mov    %esi,%eax
f01304f3:	31 d2                	xor    %edx,%edx
f01304f5:	f7 f5                	div    %ebp
f01304f7:	89 c8                	mov    %ecx,%eax
f01304f9:	f7 f5                	div    %ebp
f01304fb:	89 d0                	mov    %edx,%eax
f01304fd:	e9 44 ff ff ff       	jmp    f0130446 <__umoddi3+0x3e>
f0130502:	66 90                	xchg   %ax,%ax
f0130504:	89 c8                	mov    %ecx,%eax
f0130506:	89 f2                	mov    %esi,%edx
f0130508:	83 c4 1c             	add    $0x1c,%esp
f013050b:	5b                   	pop    %ebx
f013050c:	5e                   	pop    %esi
f013050d:	5f                   	pop    %edi
f013050e:	5d                   	pop    %ebp
f013050f:	c3                   	ret    
f0130510:	3b 04 24             	cmp    (%esp),%eax
f0130513:	72 06                	jb     f013051b <__umoddi3+0x113>
f0130515:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0130519:	77 0f                	ja     f013052a <__umoddi3+0x122>
f013051b:	89 f2                	mov    %esi,%edx
f013051d:	29 f9                	sub    %edi,%ecx
f013051f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0130523:	89 14 24             	mov    %edx,(%esp)
f0130526:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013052a:	8b 44 24 04          	mov    0x4(%esp),%eax
f013052e:	8b 14 24             	mov    (%esp),%edx
f0130531:	83 c4 1c             	add    $0x1c,%esp
f0130534:	5b                   	pop    %ebx
f0130535:	5e                   	pop    %esi
f0130536:	5f                   	pop    %edi
f0130537:	5d                   	pop    %ebp
f0130538:	c3                   	ret    
f0130539:	8d 76 00             	lea    0x0(%esi),%esi
f013053c:	2b 04 24             	sub    (%esp),%eax
f013053f:	19 fa                	sbb    %edi,%edx
f0130541:	89 d1                	mov    %edx,%ecx
f0130543:	89 c6                	mov    %eax,%esi
f0130545:	e9 71 ff ff ff       	jmp    f01304bb <__umoddi3+0xb3>
f013054a:	66 90                	xchg   %ax,%ax
f013054c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0130550:	72 ea                	jb     f013053c <__umoddi3+0x134>
f0130552:	89 d9                	mov    %ebx,%ecx
f0130554:	e9 62 ff ff ff       	jmp    f01304bb <__umoddi3+0xb3>
