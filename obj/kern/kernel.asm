
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 18 00 	lgdtl  0x18c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 18 f0       	mov    $0xf018bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 f8 be 2b f0 01 	movl   $0x1,0xf02bbef8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 cc be 2b f0 01 	movl   $0x1,0xf02bbecc
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 5c e6 2d f0       	mov    $0xf02de65c,%edx
f010006a:	b8 f2 2f 25 f0       	mov    $0xf0252ff2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 f2 2f 25 f0       	push   $0xf0252ff2
f010007e:	e8 79 ef 02 00       	call   f012effc <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 f4 be 2b f0 ff 	movl   $0xffffffff,0xf02bbef4
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 d6 6a 00 00       	call   f0106b75 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 af 66 00 00       	call   f0106753 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 2a 6e 00 00       	call   f0106ed3 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 17 9a 00 00       	call   f0109ac5 <env_init>
	idt_init();
f01000ae:	e8 50 af 00 00       	call   f010b003 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 50 d6 00 00       	call   f010d708 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 d9 79 00 00       	call   f0107aa5 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 19 d8 00 00       	call   f010d8f2 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 1f d7 00 00       	call   f010d805 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 fa d6 00 00       	call   f010d7ed <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 1a d7 00 00       	call   f010d81d <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 c2 64 00 00       	call   f01065cd <pic_init>
	sched_init() ;
f010010b:	e8 bf 60 00 00       	call   f01061cf <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 a0 fe 12 f0       	push   $0xf012fea0
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 cc fe 12 f0       	push   $0xf012fecc
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 f1 fe 12 f0       	push   $0xf012fef1
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 f8 fe 12 f0       	push   $0xf012fef8
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 40 ff 12 f0       	push   $0xf012ff40
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 88 ff 12 f0       	push   $0xf012ff88
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 40 ff 12 f0       	push   $0xf012ff40
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 f8 fe 12 f0       	push   $0xf012fef8
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 cd ff 12 f0       	push   $0xf012ffcd
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 00 30 25 f0       	mov    %eax,0xf0253000

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 d2 ff 12 f0       	push   $0xf012ffd2
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 eb ff 12 f0       	push   $0xf012ffeb
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 95 97 00 00       	call   f01099af <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 ed ff 12 f0       	push   $0xf012ffed
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 da 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 00 30 25 f0       	mov    %eax,0xf0253000

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 d2 ff 12 f0       	push   $0xf012ffd2
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 eb ff 12 f0       	push   $0xf012ffeb
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 cc 5c 00 00       	call   f0105f90 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 f3 50 00 00       	call   f01053d1 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 33 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 00 30 25 f0       	mov    %eax,0xf0253000

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 d2 ff 12 f0       	push   $0xf012ffd2
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 eb ff 12 f0       	push   $0xf012ffeb
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 cb 4e 00 00       	call   f010524b <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 02 00 13 f0       	push   $0xf0130002
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 eb ff 12 f0       	push   $0xf012ffeb
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 24 30 25 f0       	mov    0xf0253024,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 24 30 25 f0       	mov    %eax,0xf0253024
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 28 30 25 f0 b4 	movl   $0x3b4,0xf0253028
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 28 30 25 f0 d4 	movl   $0x3d4,0xf0253028
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 2c 30 25 f0       	mov    %eax,0xf025302c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 2c 30 25 f0    	mov    0xf025302c,%edx
f0100732:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
		text_length = 0;
f010075e:	c7 05 20 30 25 f0 00 	movl   $0x0,0xf0253020
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 30 30 25 f0 	mov    0xf0253030,%cx
f010076f:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 2c 30 25 f0    	mov    0xf025302c,%ecx
f010082a:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 30 30 25 f0 	mov    %dx,0xf0253030
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 20 30 25 f0    	mov    0xf0253020,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 20 30 25 f0       	mov    %eax,0xf0253020
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 2c 30 25 f0       	mov    0xf025302c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 2c 30 25 f0       	mov    0xf025302c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 89 e7 02 00       	call   f012f02c <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 2c 30 25 f0    	mov    0xf025302c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 30 30 25 f0    	mov    %ax,0xf0253030
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 28 30 25 f0    	mov    0xf0253028,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 28 30 25 f0       	mov    0xf0253028,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 28 30 25 f0    	mov    0xf0253028,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 48 32 25 f0       	mov    %eax,0xf0253248
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 48 32 25 f0       	mov    %eax,0xf0253248
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 48 32 25 f0       	mov    %eax,0xf0253248
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 c0 18 f0    	mov    -0xfe73fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 48 32 25 f0       	mov    %eax,0xf0253248
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 c1 18 f0    	mov    -0xfe73ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 48 32 25 f0       	mov    %eax,0xf0253248

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 c5 18 f0 	mov    -0xfe73ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 20 30 25 f0    	mov    0xf0253020,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 20 30 25 f0       	mov    %eax,0xf0253020
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 30 30 25 f0    	mov    0xf0253030,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 2c 30 25 f0    	mov    0xf025302c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 2c 30 25 f0       	mov    0xf025302c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 20 30 25 f0       	mov    0xf0253020,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 48 32 25 f0       	mov    0xf0253248,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 1d 00 13 f0       	push   $0xf013001d
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 44 32 25 f0    	mov    %edx,0xf0253244
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 40 30 25 f0    	mov    %dl,-0xfdacfc0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 44 32 25 f0 00 	movl   $0x0,0xf0253244
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 40 32 25 f0    	mov    0xf0253240,%edx
f0100c22:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 40 32 25 f0    	mov    %edx,0xf0253240
f0100c39:	8a 80 40 30 25 f0    	mov    -0xfdacfc0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 40 32 25 f0 00 	movl   $0x0,0xf0253240
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 24 30 25 f0       	mov    0xf0253024,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 44 32 25 f0    	mov    %edx,0xf0253244
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 40 30 25 f0    	mov    %dl,-0xfdacfc0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 44 32 25 f0 00 	movl   $0x0,0xf0253244
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 44 32 25 f0    	mov    %edx,0xf0253244
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 40 30 25 f0    	mov    %dl,-0xfdacfc0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 44 32 25 f0 00 	movl   $0x0,0xf0253244
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 40 32 25 f0    	mov    0xf0253240,%edx
f0100d12:	a1 44 32 25 f0       	mov    0xf0253244,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 40 32 25 f0    	mov    %edx,0xf0253240
f0100d29:	8a 80 40 30 25 f0    	mov    -0xfdacfc0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 40 32 25 f0       	mov    0xf0253240,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 40 32 25 f0 00 	movl   $0x0,0xf0253240
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 24 30 25 f0       	mov    0xf0253024,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 29 00 13 f0       	push   $0xf0130029
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 37 d9 02 00       	call   f012e760 <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 7a df 02 00       	call   f012ee0e <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 60 9f 2d f0       	push   $0xf02d9f60
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 7d e1 02 00       	call   f012f02c <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 b8 de 02 00       	call   f012ee0e <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 60 9f 2d f0       	push   $0xf02d9f60
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 bb e0 02 00       	call   f012f02c <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 f8 df 02 00       	call   f012effc <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 48 00 13 f0       	push   $0xf0130048
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 4b 00 13 f0       	push   $0xf013004b
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 60 bf 2b f0       	push   $0xf02bbf60
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 9d dc 02 00       	call   f012ee0e <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 b2 dc 02 00       	call   f012ee5d <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 55 dc 02 00       	call   f012ee0e <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 5b 00 13 f0       	push   $0xf013005b
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 4f e2 02 00       	call   f012f442 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 60 00 13 f0       	push   $0xf0130060
f010121a:	50                   	push   %eax
f010121b:	e8 fa dc 02 00       	call   f012ef1a <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 64 00 13 f0       	push   $0xf0130064
f0101235:	50                   	push   %eax
f0101236:	e8 df dc 02 00       	call   f012ef1a <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 69 00 13 f0       	push   $0xf0130069
f0101250:	50                   	push   %eax
f0101251:	e8 c4 dc 02 00       	call   f012ef1a <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 69 00 13 f0       	push   $0xf0130069
f0101271:	50                   	push   %eax
f0101272:	e8 a3 dc 02 00       	call   f012ef1a <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 4b db 02 00       	call   f012ee0e <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 4d db 02 00       	call   f012ee5d <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 2c db 02 00       	call   f012ee5d <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 a9 da 02 00       	call   f012ee0e <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 c4 db 02 00       	call   f012ef52 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 f9 d9 02 00       	call   f012ee0e <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 c4 db 02 00       	call   f012effc <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 60 bf 2b f0    	add    $0xf02bbf60,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 2f da 02 00       	call   f012ee8b <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 60 c9 18 f0       	mov    0xf018c960,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 6f d9 02 00       	call   f012ee0e <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 68 ca 18 f0    	mov    0xf018ca68,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 87 da 02 00       	call   f012ef52 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 d2 d8 02 00       	call   f012ee0e <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 68 ca 18 f0    	mov    0xf018ca68,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 68 ca 18 f0    	mov    0xf018ca68,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 72 d8 02 00       	call   f012ee0e <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 3d da 02 00       	call   f012effc <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 60 bf 2b f0    	add    $0xf02bbf60,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 a8 d8 02 00       	call   f012ee8b <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 ea d7 02 00       	call   f012ee0e <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 05 d9 02 00       	call   f012ef52 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 50 d7 02 00       	call   f012ee0e <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 f6 d6 02 00       	call   f012ee0e <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 c1 d8 02 00       	call   f012effc <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 60 bf 2b f0    	add    $0xf02bbf60,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 2c d7 02 00       	call   f012ee8b <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 1c cb 18 f0       	mov    0xf018cb1c,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 60 bf 2b f0       	push   $0xf02bbf60
f01017c5:	e8 44 d6 02 00       	call   f012ee0e <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 eb d5 02 00       	call   f012ee0e <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 d8 d5 02 00       	call   f012ee0e <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 60 bf 2b f0    	lea    -0xfd440a0(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 60 bf 2b f0       	add    $0xf02bbf60,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 7d d5 02 00       	call   f012ee0e <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 60 4f 2d f0    	lea    -0xfd2b0a0(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 72 d5 02 00       	call   f012f02c <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 60 9b 2d f0       	push   $0xf02d9b60
f0101ad6:	e8 51 d5 02 00       	call   f012f02c <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 21 d4 02 00       	call   f012ef1a <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 c5 18 f0       	mov    %eax,0xf018c530
f0101b0b:	a1 30 c5 18 f0       	mov    0xf018c530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 60 4f 2d f0       	add    $0xf02d4f60,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 03 d5 02 00       	call   f012f02c <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 20 bf 2b f0 00 	movl   $0x0,0xf02bbf20
f0101b60:	00 00 00 
f0101b63:	c7 05 24 bf 2b f0 00 	movl   $0x0,0xf02bbf24
f0101b6a:	00 00 00 
f0101b6d:	c7 05 2c bf 2b f0 00 	movl   $0x0,0xf02bbf2c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 6f d4 02 00       	call   f012effc <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 6d 00 13 f0       	push   $0xf013006d
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 5b 00 13 f0       	push   $0xf013005b
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 64 d8 02 00       	call   f012f442 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 73 00 13 f0       	push   $0xf0130073
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 8c 00 13 f0       	push   $0xf013008c
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 dd 00 13 f0       	push   $0xf01300dd
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 f8 00 13 f0       	push   $0xf01300f8
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 28 01 13 f0       	push   $0xf0130128
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 dd 00 13 f0       	push   $0xf01300dd
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 52 01 13 f0       	push   $0xf0130152
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 28 bf 2b f0       	mov    %eax,0xf02bbf28
f0101d03:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 5c 01 13 f0       	push   $0xf013015c
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 bf 01 13 f0       	push   $0xf01301bf
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 c8 01 13 f0       	push   $0xf01301c8
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 28 bf 2b f0       	mov    %eax,0xf02bbf28
f0101e53:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 c5 18 f0       	add    $0xf018c548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 5e cf 02 00       	call   f012ee0e <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 4d cf 02 00       	call   f012ee0e <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 20 bf 2b f0       	mov    0xf02bbf20,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 d0 01 13 f0       	push   $0xf01301d0
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 dd 00 13 f0       	push   $0xf01300dd
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 2c bf 2b f0       	mov    %eax,0xf02bbf2c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 28 bf 2b f0       	mov    %eax,0xf02bbf28
f0101fcc:	a1 28 bf 2b f0       	mov    0xf02bbf28,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 19 02 00 00       	jmp    f010221d <process_command+0x237>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 ee cd 02 00       	call   f012ee0e <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 06 cf 02 00       	call   f012ef52 <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 f5 00 00 00    	jne    f010214c <process_command+0x166>
			{
				if((number_of_arguments-1)==commands[i].num_of_args||(number_of_arguments>1&&commands[i].num_of_args==-1)){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c c5 18 f0       	add    $0xf018c54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	74 1e                	je     f0102092 <process_command+0xac>
f0102074:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102078:	7e 27                	jle    f01020a1 <process_command+0xbb>
f010207a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010207d:	89 d0                	mov    %edx,%eax
f010207f:	01 c0                	add    %eax,%eax
f0102081:	01 d0                	add    %edx,%eax
f0102083:	c1 e0 03             	shl    $0x3,%eax
f0102086:	05 4c c5 18 f0       	add    $0xf018c54c,%eax
f010208b:	8b 00                	mov    (%eax),%eax
f010208d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102090:	75 0f                	jne    f01020a1 <process_command+0xbb>
					command_found=1;
f0102092:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f0102099:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010209c:	e9 9e 01 00 00       	jmp    f010223f <process_command+0x259>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f01020a1:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f01020a7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020aa:	89 c8                	mov    %ecx,%eax
f01020ac:	01 c0                	add    %eax,%eax
f01020ae:	01 c8                	add    %ecx,%eax
f01020b0:	c1 e0 03             	shl    $0x3,%eax
f01020b3:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f01020b8:	89 10                	mov    %edx,(%eax)
f01020ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020bd:	89 d0                	mov    %edx,%eax
f01020bf:	01 c0                	add    %eax,%eax
f01020c1:	01 d0                	add    %edx,%eax
f01020c3:	c1 e0 03             	shl    $0x3,%eax
f01020c6:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	85 c0                	test   %eax,%eax
f01020cf:	74 1c                	je     f01020ed <process_command+0x107>
f01020d1:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f01020d7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020da:	89 c8                	mov    %ecx,%eax
f01020dc:	01 c0                	add    %eax,%eax
f01020de:	01 c8                	add    %ecx,%eax
f01020e0:	c1 e0 03             	shl    $0x3,%eax
f01020e3:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020e8:	89 42 10             	mov    %eax,0x10(%edx)
f01020eb:	eb 16                	jmp    f0102103 <process_command+0x11d>
f01020ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020f0:	89 d0                	mov    %edx,%eax
f01020f2:	01 c0                	add    %eax,%eax
f01020f4:	01 d0                	add    %edx,%eax
f01020f6:	c1 e0 03             	shl    $0x3,%eax
f01020f9:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01020fe:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
f0102103:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102106:	89 d0                	mov    %edx,%eax
f0102108:	01 c0                	add    %eax,%eax
f010210a:	01 d0                	add    %edx,%eax
f010210c:	c1 e0 03             	shl    $0x3,%eax
f010210f:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102114:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f0102119:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010211c:	89 d0                	mov    %edx,%eax
f010211e:	01 c0                	add    %eax,%eax
f0102120:	01 d0                	add    %edx,%eax
f0102122:	c1 e0 03             	shl    $0x3,%eax
f0102125:	05 50 c5 18 f0       	add    $0xf018c550,%eax
f010212a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102130:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0102135:	40                   	inc    %eax
f0102136:	a3 2c bf 2b f0       	mov    %eax,0xf02bbf2c
					command_found=1;
f010213b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102142:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102147:	e9 f3 00 00 00       	jmp    f010223f <process_command+0x259>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010214c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010214f:	8b 10                	mov    (%eax),%edx
f0102151:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102154:	89 c8                	mov    %ecx,%eax
f0102156:	01 c0                	add    %eax,%eax
f0102158:	01 c8                	add    %ecx,%eax
f010215a:	c1 e0 03             	shl    $0x3,%eax
f010215d:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102162:	8b 00                	mov    (%eax),%eax
f0102164:	83 ec 08             	sub    $0x8,%esp
f0102167:	52                   	push   %edx
f0102168:	50                   	push   %eax
f0102169:	e8 2a fd ff ff       	call   f0101e98 <subSequence>
f010216e:	83 c4 10             	add    $0x10,%esp
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 84 a1 00 00 00    	je     f010221a <process_command+0x234>
				command_found=1;
f0102179:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102180:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f0102186:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102189:	89 c8                	mov    %ecx,%eax
f010218b:	01 c0                	add    %eax,%eax
f010218d:	01 c8                	add    %ecx,%eax
f010218f:	c1 e0 03             	shl    $0x3,%eax
f0102192:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f0102197:	89 10                	mov    %edx,(%eax)
f0102199:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010219c:	89 d0                	mov    %edx,%eax
f010219e:	01 c0                	add    %eax,%eax
f01021a0:	01 d0                	add    %edx,%eax
f01021a2:	c1 e0 03             	shl    $0x3,%eax
f01021a5:	05 54 c5 18 f0       	add    $0xf018c554,%eax
f01021aa:	8b 00                	mov    (%eax),%eax
f01021ac:	85 c0                	test   %eax,%eax
f01021ae:	74 1c                	je     f01021cc <process_command+0x1e6>
f01021b0:	8b 15 24 bf 2b f0    	mov    0xf02bbf24,%edx
f01021b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01021b9:	89 c8                	mov    %ecx,%eax
f01021bb:	01 c0                	add    %eax,%eax
f01021bd:	01 c8                	add    %ecx,%eax
f01021bf:	c1 e0 03             	shl    $0x3,%eax
f01021c2:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021c7:	89 42 10             	mov    %eax,0x10(%edx)
f01021ca:	eb 16                	jmp    f01021e2 <process_command+0x1fc>
f01021cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021cf:	89 d0                	mov    %edx,%eax
f01021d1:	01 c0                	add    %eax,%eax
f01021d3:	01 d0                	add    %edx,%eax
f01021d5:	c1 e0 03             	shl    $0x3,%eax
f01021d8:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021dd:	a3 20 bf 2b f0       	mov    %eax,0xf02bbf20
f01021e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021e5:	89 d0                	mov    %edx,%eax
f01021e7:	01 c0                	add    %eax,%eax
f01021e9:	01 d0                	add    %edx,%eax
f01021eb:	c1 e0 03             	shl    $0x3,%eax
f01021ee:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f01021f3:	a3 24 bf 2b f0       	mov    %eax,0xf02bbf24
f01021f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021fb:	89 d0                	mov    %edx,%eax
f01021fd:	01 c0                	add    %eax,%eax
f01021ff:	01 d0                	add    %edx,%eax
f0102201:	c1 e0 03             	shl    $0x3,%eax
f0102204:	05 50 c5 18 f0       	add    $0xf018c550,%eax
f0102209:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010220f:	a1 2c bf 2b f0       	mov    0xf02bbf2c,%eax
f0102214:	40                   	inc    %eax
f0102215:	a3 2c bf 2b f0       	mov    %eax,0xf02bbf2c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f010221a:	ff 45 f0             	incl   -0x10(%ebp)
f010221d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102220:	a1 60 c9 18 f0       	mov    0xf018c960,%eax
f0102225:	39 c2                	cmp    %eax,%edx
f0102227:	0f 82 d7 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010222d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102231:	75 07                	jne    f010223a <process_command+0x254>
		return CMD_INVALID;
f0102233:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f0102238:	eb 05                	jmp    f010223f <process_command+0x259>
	}
	return CMD_MATCHED;
f010223a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f010223f:	c9                   	leave  
f0102240:	c3                   	ret    

f0102241 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102241:	55                   	push   %ebp
f0102242:	89 e5                	mov    %esp,%ebp
f0102244:	c7 05 f8 be 2b f0 00 	movl   $0x0,0xf02bbef8
f010224b:	00 00 00 
f010224e:	90                   	nop
f010224f:	5d                   	pop    %ebp
f0102250:	c3                   	ret    

f0102251 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102251:	55                   	push   %ebp
f0102252:	89 e5                	mov    %esp,%ebp
f0102254:	c7 05 f8 be 2b f0 01 	movl   $0x1,0xf02bbef8
f010225b:	00 00 00 
f010225e:	90                   	nop
f010225f:	5d                   	pop    %ebp
f0102260:	c3                   	ret    

f0102261 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102261:	55                   	push   %ebp
f0102262:	89 e5                	mov    %esp,%ebp
f0102264:	c7 05 f8 be 2b f0 02 	movl   $0x2,0xf02bbef8
f010226b:	00 00 00 
f010226e:	90                   	nop
f010226f:	5d                   	pop    %ebp
f0102270:	c3                   	ret    

f0102271 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102271:	55                   	push   %ebp
f0102272:	89 e5                	mov    %esp,%ebp
f0102274:	c7 05 f8 be 2b f0 03 	movl   $0x3,0xf02bbef8
f010227b:	00 00 00 
f010227e:	90                   	nop
f010227f:	5d                   	pop    %ebp
f0102280:	c3                   	ret    

f0102281 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102281:	55                   	push   %ebp
f0102282:	89 e5                	mov    %esp,%ebp
f0102284:	c7 05 f8 be 2b f0 04 	movl   $0x4,0xf02bbef8
f010228b:	00 00 00 
f010228e:	90                   	nop
f010228f:	5d                   	pop    %ebp
f0102290:	c3                   	ret    

f0102291 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102291:	55                   	push   %ebp
f0102292:	89 e5                	mov    %esp,%ebp
f0102294:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f0102299:	85 c0                	test   %eax,%eax
f010229b:	75 04                	jne    f01022a1 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010229d:	b0 01                	mov    $0x1,%al
f010229f:	eb 02                	jmp    f01022a3 <isKHeapPlacementStrategyCONTALLOC+0x12>
f01022a1:	b0 00                	mov    $0x0,%al
f01022a3:	5d                   	pop    %ebp
f01022a4:	c3                   	ret    

f01022a5 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01022a5:	55                   	push   %ebp
f01022a6:	89 e5                	mov    %esp,%ebp
f01022a8:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022ad:	83 f8 01             	cmp    $0x1,%eax
f01022b0:	75 04                	jne    f01022b6 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01022b2:	b0 01                	mov    $0x1,%al
f01022b4:	eb 02                	jmp    f01022b8 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01022b6:	b0 00                	mov    $0x0,%al
f01022b8:	5d                   	pop    %ebp
f01022b9:	c3                   	ret    

f01022ba <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01022ba:	55                   	push   %ebp
f01022bb:	89 e5                	mov    %esp,%ebp
f01022bd:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022c2:	83 f8 02             	cmp    $0x2,%eax
f01022c5:	75 04                	jne    f01022cb <isKHeapPlacementStrategyBESTFIT+0x11>
f01022c7:	b0 01                	mov    $0x1,%al
f01022c9:	eb 02                	jmp    f01022cd <isKHeapPlacementStrategyBESTFIT+0x13>
f01022cb:	b0 00                	mov    $0x0,%al
f01022cd:	5d                   	pop    %ebp
f01022ce:	c3                   	ret    

f01022cf <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022cf:	55                   	push   %ebp
f01022d0:	89 e5                	mov    %esp,%ebp
f01022d2:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022d7:	83 f8 03             	cmp    $0x3,%eax
f01022da:	75 04                	jne    f01022e0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022dc:	b0 01                	mov    $0x1,%al
f01022de:	eb 02                	jmp    f01022e2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022e0:	b0 00                	mov    $0x0,%al
f01022e2:	5d                   	pop    %ebp
f01022e3:	c3                   	ret    

f01022e4 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022e4:	55                   	push   %ebp
f01022e5:	89 e5                	mov    %esp,%ebp
f01022e7:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f01022ec:	83 f8 04             	cmp    $0x4,%eax
f01022ef:	75 04                	jne    f01022f5 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022f1:	b0 01                	mov    $0x1,%al
f01022f3:	eb 02                	jmp    f01022f7 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022f5:	b0 00                	mov    $0x0,%al
f01022f7:	5d                   	pop    %ebp
f01022f8:	c3                   	ret    

f01022f9 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	c7 05 cc be 2b f0 01 	movl   $0x1,0xf02bbecc
f0102303:	00 00 00 
f0102306:	90                   	nop
f0102307:	5d                   	pop    %ebp
f0102308:	c3                   	ret    

f0102309 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0102309:	55                   	push   %ebp
f010230a:	89 e5                	mov    %esp,%ebp
f010230c:	c7 05 cc be 2b f0 02 	movl   $0x2,0xf02bbecc
f0102313:	00 00 00 
f0102316:	90                   	nop
f0102317:	5d                   	pop    %ebp
f0102318:	c3                   	ret    

f0102319 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0102319:	55                   	push   %ebp
f010231a:	89 e5                	mov    %esp,%ebp
f010231c:	c7 05 cc be 2b f0 03 	movl   $0x3,0xf02bbecc
f0102323:	00 00 00 
f0102326:	90                   	nop
f0102327:	5d                   	pop    %ebp
f0102328:	c3                   	ret    

f0102329 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0102329:	55                   	push   %ebp
f010232a:	89 e5                	mov    %esp,%ebp
f010232c:	c7 05 cc be 2b f0 04 	movl   $0x4,0xf02bbecc
f0102333:	00 00 00 
f0102336:	90                   	nop
f0102337:	5d                   	pop    %ebp
f0102338:	c3                   	ret    

f0102339 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f0102341:	83 f8 01             	cmp    $0x1,%eax
f0102344:	75 04                	jne    f010234a <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102346:	b0 01                	mov    $0x1,%al
f0102348:	eb 02                	jmp    f010234c <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010234a:	b0 00                	mov    $0x0,%al
f010234c:	5d                   	pop    %ebp
f010234d:	c3                   	ret    

f010234e <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f010234e:	55                   	push   %ebp
f010234f:	89 e5                	mov    %esp,%ebp
f0102351:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f0102356:	83 f8 02             	cmp    $0x2,%eax
f0102359:	75 04                	jne    f010235f <isUHeapPlacementStrategyBESTFIT+0x11>
f010235b:	b0 01                	mov    $0x1,%al
f010235d:	eb 02                	jmp    f0102361 <isUHeapPlacementStrategyBESTFIT+0x13>
f010235f:	b0 00                	mov    $0x0,%al
f0102361:	5d                   	pop    %ebp
f0102362:	c3                   	ret    

f0102363 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f010236b:	83 f8 03             	cmp    $0x3,%eax
f010236e:	75 04                	jne    f0102374 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102370:	b0 01                	mov    $0x1,%al
f0102372:	eb 02                	jmp    f0102376 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102374:	b0 00                	mov    $0x0,%al
f0102376:	5d                   	pop    %ebp
f0102377:	c3                   	ret    

f0102378 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0102378:	55                   	push   %ebp
f0102379:	89 e5                	mov    %esp,%ebp
f010237b:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
f0102380:	83 f8 04             	cmp    $0x4,%eax
f0102383:	75 04                	jne    f0102389 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102385:	b0 01                	mov    $0x1,%al
f0102387:	eb 02                	jmp    f010238b <isUHeapPlacementStrategyWORSTFIT+0x13>
f0102389:	b0 00                	mov    $0x0,%al
f010238b:	5d                   	pop    %ebp
f010238c:	c3                   	ret    

f010238d <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010238d:	55                   	push   %ebp
f010238e:	89 e5                	mov    %esp,%ebp
f0102390:	53                   	push   %ebx
f0102391:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102394:	8b 45 08             	mov    0x8(%ebp),%eax
f0102397:	c1 e8 0c             	shr    $0xc,%eax
f010239a:	89 c2                	mov    %eax,%edx
f010239c:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01023a1:	39 c2                	cmp    %eax,%edx
f01023a3:	72 14                	jb     f01023b9 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01023a5:	83 ec 04             	sub    $0x4,%esp
f01023a8:	68 f0 01 13 f0       	push   $0xf01301f0
f01023ad:	6a 55                	push   $0x55
f01023af:	68 18 02 13 f0       	push   $0xf0130218
f01023b4:	e8 f7 dd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01023b9:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01023bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01023c2:	c1 e8 0c             	shr    $0xc,%eax
f01023c5:	89 c2                	mov    %eax,%edx
f01023c7:	89 d0                	mov    %edx,%eax
f01023c9:	01 c0                	add    %eax,%eax
f01023cb:	01 d0                	add    %edx,%eax
f01023cd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023d4:	01 d8                	add    %ebx,%eax
f01023d6:	01 d0                	add    %edx,%eax
f01023d8:	01 c8                	add    %ecx,%eax
}
f01023da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023dd:	c9                   	leave  
f01023de:	c3                   	ret    

f01023df <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023df:	55                   	push   %ebp
f01023e0:	89 e5                	mov    %esp,%ebp
f01023e2:	53                   	push   %ebx
f01023e3:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023ed:	eb 3b                	jmp    f010242a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023f2:	89 d0                	mov    %edx,%eax
f01023f4:	01 c0                	add    %eax,%eax
f01023f6:	01 d0                	add    %edx,%eax
f01023f8:	c1 e0 03             	shl    $0x3,%eax
f01023fb:	05 44 c5 18 f0       	add    $0xf018c544,%eax
f0102400:	8b 10                	mov    (%eax),%edx
f0102402:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102405:	89 c8                	mov    %ecx,%eax
f0102407:	01 c0                	add    %eax,%eax
f0102409:	01 c8                	add    %ecx,%eax
f010240b:	c1 e0 03             	shl    $0x3,%eax
f010240e:	05 40 c5 18 f0       	add    $0xf018c540,%eax
f0102413:	8b 00                	mov    (%eax),%eax
f0102415:	83 ec 04             	sub    $0x4,%esp
f0102418:	52                   	push   %edx
f0102419:	50                   	push   %eax
f010241a:	68 bf 0a 13 f0       	push   $0xf0130abf
f010241f:	e8 0d ea ff ff       	call   f0100e31 <cprintf>
f0102424:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102427:	ff 45 f4             	incl   -0xc(%ebp)
f010242a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010242d:	a1 60 c9 18 f0       	mov    0xf018c960,%eax
f0102432:	39 c2                	cmp    %eax,%edx
f0102434:	72 b9                	jb     f01023ef <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102436:	83 ec 0c             	sub    $0xc,%esp
f0102439:	68 c8 0a 13 f0       	push   $0xf0130ac8
f010243e:	e8 ee e9 ff ff       	call   f0100e31 <cprintf>
f0102443:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102446:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010244d:	eb 42                	jmp    f0102491 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010244f:	8b 0d 68 ca 18 f0    	mov    0xf018ca68,%ecx
f0102455:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102458:	89 d0                	mov    %edx,%eax
f010245a:	01 c0                	add    %eax,%eax
f010245c:	01 d0                	add    %edx,%eax
f010245e:	c1 e0 02             	shl    $0x2,%eax
f0102461:	01 c8                	add    %ecx,%eax
f0102463:	8b 50 04             	mov    0x4(%eax),%edx
f0102466:	8b 1d 68 ca 18 f0    	mov    0xf018ca68,%ebx
f010246c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010246f:	89 c8                	mov    %ecx,%eax
f0102471:	01 c0                	add    %eax,%eax
f0102473:	01 c8                	add    %ecx,%eax
f0102475:	c1 e0 02             	shl    $0x2,%eax
f0102478:	01 d8                	add    %ebx,%eax
f010247a:	8b 00                	mov    (%eax),%eax
f010247c:	83 ec 04             	sub    $0x4,%esp
f010247f:	52                   	push   %edx
f0102480:	50                   	push   %eax
f0102481:	68 dd 0a 13 f0       	push   $0xf0130add
f0102486:	e8 a6 e9 ff ff       	call   f0100e31 <cprintf>
f010248b:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010248e:	ff 45 f4             	incl   -0xc(%ebp)
f0102491:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f0102496:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0102499:	7c b4                	jl     f010244f <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010249b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01024a3:	c9                   	leave  
f01024a4:	c3                   	ret    

f01024a5 <command_str2lower>:
int command_str2lower(int number_of_arguments,char **arguments){
f01024a5:	55                   	push   %ebp
f01024a6:	89 e5                	mov    %esp,%ebp
f01024a8:	83 ec 18             	sub    $0x18,%esp
	char*s=str2lower(arguments[1],arguments[2]);
f01024ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024ae:	83 c0 08             	add    $0x8,%eax
f01024b1:	8b 10                	mov    (%eax),%edx
f01024b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024b6:	83 c0 04             	add    $0x4,%eax
f01024b9:	8b 00                	mov    (%eax),%eax
f01024bb:	83 ec 08             	sub    $0x8,%esp
f01024be:	52                   	push   %edx
f01024bf:	50                   	push   %eax
f01024c0:	e8 51 d0 02 00       	call   f012f516 <str2lower>
f01024c5:	83 c4 10             	add    $0x10,%esp
f01024c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("%s\n",s);
f01024cb:	83 ec 08             	sub    $0x8,%esp
f01024ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01024d1:	68 f9 0a 13 f0       	push   $0xf0130af9
f01024d6:	e8 56 e9 ff ff       	call   f0100e31 <cprintf>
f01024db:	83 c4 10             	add    $0x10,%esp
return 0;
f01024de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e3:	c9                   	leave  
f01024e4:	c3                   	ret    

f01024e5 <command_kernel_info>:
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01024e5:	55                   	push   %ebp
f01024e6:	89 e5                	mov    %esp,%ebp
f01024e8:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01024eb:	83 ec 0c             	sub    $0xc,%esp
f01024ee:	68 fd 0a 13 f0       	push   $0xf0130afd
f01024f3:	e8 39 e9 ff ff       	call   f0100e31 <cprintf>
f01024f8:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01024fb:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102500:	83 ec 04             	sub    $0x4,%esp
f0102503:	50                   	push   %eax
f0102504:	68 0c 00 10 f0       	push   $0xf010000c
f0102509:	68 18 0b 13 f0       	push   $0xf0130b18
f010250e:	e8 1e e9 ff ff       	call   f0100e31 <cprintf>
f0102513:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0102516:	b8 99 fe 12 00       	mov    $0x12fe99,%eax
f010251b:	83 ec 04             	sub    $0x4,%esp
f010251e:	50                   	push   %eax
f010251f:	68 99 fe 12 f0       	push   $0xf012fe99
f0102524:	68 54 0b 13 f0       	push   $0xf0130b54
f0102529:	e8 03 e9 ff ff       	call   f0100e31 <cprintf>
f010252e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102531:	b8 f2 2f 25 00       	mov    $0x252ff2,%eax
f0102536:	83 ec 04             	sub    $0x4,%esp
f0102539:	50                   	push   %eax
f010253a:	68 f2 2f 25 f0       	push   $0xf0252ff2
f010253f:	68 90 0b 13 f0       	push   $0xf0130b90
f0102544:	e8 e8 e8 ff ff       	call   f0100e31 <cprintf>
f0102549:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010254c:	b8 5c e6 2d 00       	mov    $0x2de65c,%eax
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	50                   	push   %eax
f0102555:	68 5c e6 2d f0       	push   $0xf02de65c
f010255a:	68 d8 0b 13 f0       	push   $0xf0130bd8
f010255f:	e8 cd e8 ff ff       	call   f0100e31 <cprintf>
f0102564:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102567:	b8 5c e6 2d f0       	mov    $0xf02de65c,%eax
f010256c:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102572:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102577:	29 c2                	sub    %eax,%edx
f0102579:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010257b:	85 c0                	test   %eax,%eax
f010257d:	79 05                	jns    f0102584 <command_kernel_info+0x9f>
f010257f:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102584:	c1 f8 0a             	sar    $0xa,%eax
f0102587:	83 ec 08             	sub    $0x8,%esp
f010258a:	50                   	push   %eax
f010258b:	68 14 0c 13 f0       	push   $0xf0130c14
f0102590:	e8 9c e8 ff ff       	call   f0100e31 <cprintf>
f0102595:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0102598:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259d:	c9                   	leave  
f010259e:	c3                   	ret    

f010259f <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f010259f:	55                   	push   %ebp
f01025a0:	89 e5                	mov    %esp,%ebp
f01025a2:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01025a5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01025a9:	75 37                	jne    f01025e2 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01025ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ae:	83 c0 04             	add    $0x4,%eax
f01025b1:	8b 00                	mov    (%eax),%eax
f01025b3:	83 ec 04             	sub    $0x4,%esp
f01025b6:	6a 10                	push   $0x10
f01025b8:	6a 00                	push   $0x0
f01025ba:	50                   	push   %eax
f01025bb:	e8 ae cb 02 00       	call   f012f16e <strtol>
f01025c0:	83 c4 10             	add    $0x10,%esp
f01025c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01025c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025c9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01025cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025cf:	83 c0 08             	add    $0x8,%eax
f01025d2:	8b 00                	mov    (%eax),%eax
f01025d4:	8a 00                	mov    (%eax),%al
f01025d6:	88 c2                	mov    %al,%dl
f01025d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025db:	88 10                	mov    %dl,(%eax)
f01025dd:	e9 bc 00 00 00       	jmp    f010269e <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01025e2:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01025e6:	0f 85 a2 00 00 00    	jne    f010268e <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01025ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ef:	83 c0 04             	add    $0x4,%eax
f01025f2:	8b 00                	mov    (%eax),%eax
f01025f4:	83 ec 04             	sub    $0x4,%esp
f01025f7:	6a 0a                	push   $0xa
f01025f9:	6a 00                	push   $0x0
f01025fb:	50                   	push   %eax
f01025fc:	e8 6d cb 02 00       	call   f012f16e <strtol>
f0102601:	83 c4 10             	add    $0x10,%esp
f0102604:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102607:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010260e:	83 ec 04             	sub    $0x4,%esp
f0102611:	6a 00                	push   $0x0
f0102613:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102616:	50                   	push   %eax
f0102617:	ff 75 f4             	pushl  -0xc(%ebp)
f010261a:	e8 af 73 00 00       	call   f01099ce <envid2env>
f010261f:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102622:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102625:	83 c0 08             	add    $0x8,%eax
f0102628:	8b 00                	mov    (%eax),%eax
f010262a:	83 ec 04             	sub    $0x4,%esp
f010262d:	6a 10                	push   $0x10
f010262f:	6a 00                	push   $0x0
f0102631:	50                   	push   %eax
f0102632:	e8 37 cb 02 00       	call   f012f16e <strtol>
f0102637:	83 c4 10             	add    $0x10,%esp
f010263a:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010263d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102640:	85 c0                	test   %eax,%eax
f0102642:	75 07                	jne    f010264b <command_writeusermem+0xac>
f0102644:	b8 00 00 00 00       	mov    $0x0,%eax
f0102649:	eb 58                	jmp    f01026a3 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010264b:	0f 20 d8             	mov    %cr3,%eax
f010264e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102651:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102657:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010265a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102660:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102663:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102666:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010266c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010266f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102672:	83 c0 0c             	add    $0xc,%eax
f0102675:	8b 00                	mov    (%eax),%eax
f0102677:	8a 00                	mov    (%eax),%al
f0102679:	88 c2                	mov    %al,%dl
f010267b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010267e:	88 10                	mov    %dl,(%eax)
f0102680:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102683:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102686:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102689:	0f 22 d8             	mov    %eax,%cr3
f010268c:	eb 10                	jmp    f010269e <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010268e:	83 ec 0c             	sub    $0xc,%esp
f0102691:	68 40 0c 13 f0       	push   $0xf0130c40
f0102696:	e8 96 e7 ff ff       	call   f0100e31 <cprintf>
f010269b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010269e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a3:	c9                   	leave  
f01026a4:	c3                   	ret    

f01026a5 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01026a5:	55                   	push   %ebp
f01026a6:	89 e5                	mov    %esp,%ebp
f01026a8:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01026ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ae:	83 c0 04             	add    $0x4,%eax
f01026b1:	8b 00                	mov    (%eax),%eax
f01026b3:	83 ec 04             	sub    $0x4,%esp
f01026b6:	6a 10                	push   $0x10
f01026b8:	6a 00                	push   $0x0
f01026ba:	50                   	push   %eax
f01026bb:	e8 ae ca 02 00       	call   f012f16e <strtol>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01026c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01026cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f01026d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026d5:	83 c0 08             	add    $0x8,%eax
f01026d8:	8b 00                	mov    (%eax),%eax
f01026da:	83 ec 0c             	sub    $0xc,%esp
f01026dd:	50                   	push   %eax
f01026de:	e8 2b c7 02 00       	call   f012ee0e <strlen>
f01026e3:	83 c4 10             	add    $0x10,%esp
f01026e6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01026e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01026f0:	eb 1c                	jmp    f010270e <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01026f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026f5:	83 c0 08             	add    $0x8,%eax
f01026f8:	8b 10                	mov    (%eax),%edx
f01026fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026fd:	01 d0                	add    %edx,%eax
f01026ff:	8a 00                	mov    (%eax),%al
f0102701:	88 c2                	mov    %al,%dl
f0102703:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102706:	88 10                	mov    %dl,(%eax)
		address++;
f0102708:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010270b:	ff 45 f0             	incl   -0x10(%ebp)
f010270e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102711:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102714:	7c dc                	jl     f01026f2 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102716:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010271b:	c9                   	leave  
f010271c:	c3                   	ret    

f010271d <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010271d:	55                   	push   %ebp
f010271e:	89 e5                	mov    %esp,%ebp
f0102720:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102723:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102727:	75 42                	jne    f010276b <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010272c:	83 c0 04             	add    $0x4,%eax
f010272f:	8b 00                	mov    (%eax),%eax
f0102731:	83 ec 04             	sub    $0x4,%esp
f0102734:	6a 10                	push   $0x10
f0102736:	6a 00                	push   $0x0
f0102738:	50                   	push   %eax
f0102739:	e8 30 ca 02 00       	call   f012f16e <strtol>
f010273e:	83 c4 10             	add    $0x10,%esp
f0102741:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102747:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010274a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010274d:	8a 00                	mov    (%eax),%al
f010274f:	0f b6 c0             	movzbl %al,%eax
f0102752:	83 ec 04             	sub    $0x4,%esp
f0102755:	50                   	push   %eax
f0102756:	ff 75 d8             	pushl  -0x28(%ebp)
f0102759:	68 6a 0c 13 f0       	push   $0xf0130c6a
f010275e:	e8 ce e6 ff ff       	call   f0100e31 <cprintf>
f0102763:	83 c4 10             	add    $0x10,%esp
f0102766:	e9 c7 00 00 00       	jmp    f0102832 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010276b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010276f:	0f 85 ad 00 00 00    	jne    f0102822 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102775:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102778:	83 c0 04             	add    $0x4,%eax
f010277b:	8b 00                	mov    (%eax),%eax
f010277d:	83 ec 04             	sub    $0x4,%esp
f0102780:	6a 0a                	push   $0xa
f0102782:	6a 00                	push   $0x0
f0102784:	50                   	push   %eax
f0102785:	e8 e4 c9 02 00       	call   f012f16e <strtol>
f010278a:	83 c4 10             	add    $0x10,%esp
f010278d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102790:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102797:	83 ec 04             	sub    $0x4,%esp
f010279a:	6a 00                	push   $0x0
f010279c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010279f:	50                   	push   %eax
f01027a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01027a3:	e8 26 72 00 00       	call   f01099ce <envid2env>
f01027a8:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01027ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027ae:	83 c0 08             	add    $0x8,%eax
f01027b1:	8b 00                	mov    (%eax),%eax
f01027b3:	83 ec 04             	sub    $0x4,%esp
f01027b6:	6a 10                	push   $0x10
f01027b8:	6a 00                	push   $0x0
f01027ba:	50                   	push   %eax
f01027bb:	e8 ae c9 02 00       	call   f012f16e <strtol>
f01027c0:	83 c4 10             	add    $0x10,%esp
f01027c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01027c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	75 07                	jne    f01027d4 <command_readusermem+0xb7>
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d2:	eb 63                	jmp    f0102837 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01027d4:	0f 20 d8             	mov    %cr3,%eax
f01027d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01027da:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01027dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01027e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027e3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01027e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01027ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01027ef:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01027f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01027f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01027fb:	8a 00                	mov    (%eax),%al
f01027fd:	0f b6 c0             	movzbl %al,%eax
f0102800:	83 ec 04             	sub    $0x4,%esp
f0102803:	50                   	push   %eax
f0102804:	ff 75 f0             	pushl  -0x10(%ebp)
f0102807:	68 6a 0c 13 f0       	push   $0xf0130c6a
f010280c:	e8 20 e6 ff ff       	call   f0100e31 <cprintf>
f0102811:	83 c4 10             	add    $0x10,%esp
f0102814:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102817:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010281a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010281d:	0f 22 d8             	mov    %eax,%cr3
f0102820:	eb 10                	jmp    f0102832 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102822:	83 ec 0c             	sub    $0xc,%esp
f0102825:	68 84 0c 13 f0       	push   $0xf0130c84
f010282a:	e8 02 e6 ff ff       	call   f0100e31 <cprintf>
f010282f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102832:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102837:	c9                   	leave  
f0102838:	c3                   	ret    

f0102839 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102839:	55                   	push   %ebp
f010283a:	89 e5                	mov    %esp,%ebp
f010283c:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010283f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102842:	83 c0 04             	add    $0x4,%eax
f0102845:	8b 00                	mov    (%eax),%eax
f0102847:	83 ec 04             	sub    $0x4,%esp
f010284a:	6a 10                	push   $0x10
f010284c:	6a 00                	push   $0x0
f010284e:	50                   	push   %eax
f010284f:	e8 1a c9 02 00       	call   f012f16e <strtol>
f0102854:	83 c4 10             	add    $0x10,%esp
f0102857:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010285c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f010285f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102869:	8a 00                	mov    (%eax),%al
f010286b:	0f b6 c0             	movzbl %al,%eax
f010286e:	83 ec 08             	sub    $0x8,%esp
f0102871:	50                   	push   %eax
f0102872:	68 ae 0c 13 f0       	push   $0xf0130cae
f0102877:	e8 b5 e5 ff ff       	call   f0100e31 <cprintf>
f010287c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010287f:	83 ec 0c             	sub    $0xc,%esp
f0102882:	68 b1 0c 13 f0       	push   $0xf0130cb1
f0102887:	e8 a5 e5 ff ff       	call   f0100e31 <cprintf>
f010288c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010288f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102894:	c9                   	leave  
f0102895:	c3                   	ret    

f0102896 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102896:	55                   	push   %ebp
f0102897:	89 e5                	mov    %esp,%ebp
f0102899:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 04             	sub    $0x4,%esp
f01028a7:	6a 0a                	push   $0xa
f01028a9:	6a 00                	push   $0x0
f01028ab:	50                   	push   %eax
f01028ac:	e8 bd c8 02 00       	call   f012f16e <strtol>
f01028b1:	83 c4 10             	add    $0x10,%esp
f01028b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01028b7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01028be:	83 ec 04             	sub    $0x4,%esp
f01028c1:	6a 00                	push   $0x0
f01028c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01028c6:	50                   	push   %eax
f01028c7:	ff 75 ec             	pushl  -0x14(%ebp)
f01028ca:	e8 ff 70 00 00       	call   f01099ce <envid2env>
f01028cf:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01028d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028d5:	83 c0 08             	add    $0x8,%eax
f01028d8:	8b 00                	mov    (%eax),%eax
f01028da:	83 ec 04             	sub    $0x4,%esp
f01028dd:	6a 10                	push   $0x10
f01028df:	6a 00                	push   $0x0
f01028e1:	50                   	push   %eax
f01028e2:	e8 87 c8 02 00       	call   f012f16e <strtol>
f01028e7:	83 c4 10             	add    $0x10,%esp
f01028ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01028ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028f0:	83 c0 0c             	add    $0xc,%eax
f01028f3:	8b 00                	mov    (%eax),%eax
f01028f5:	83 ec 04             	sub    $0x4,%esp
f01028f8:	6a 0a                	push   $0xa
f01028fa:	6a 00                	push   $0x0
f01028fc:	50                   	push   %eax
f01028fd:	e8 6c c8 02 00       	call   f012f16e <strtol>
f0102902:	83 c4 10             	add    $0x10,%esp
f0102905:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102908:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010290e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102911:	85 c0                	test   %eax,%eax
f0102913:	75 07                	jne    f010291c <command_readuserblock+0x86>
f0102915:	b8 00 00 00 00       	mov    $0x0,%eax
f010291a:	eb 68                	jmp    f0102984 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010291c:	0f 20 d8             	mov    %cr3,%eax
f010291f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102922:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102925:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102928:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010292b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102931:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102934:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102937:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010293a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102941:	eb 28                	jmp    f010296b <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102946:	8a 00                	mov    (%eax),%al
f0102948:	0f b6 d0             	movzbl %al,%edx
f010294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010294e:	8a 00                	mov    (%eax),%al
f0102950:	0f b6 c0             	movzbl %al,%eax
f0102953:	52                   	push   %edx
f0102954:	50                   	push   %eax
f0102955:	ff 75 f4             	pushl  -0xc(%ebp)
f0102958:	68 b3 0c 13 f0       	push   $0xf0130cb3
f010295d:	e8 cf e4 ff ff       	call   f0100e31 <cprintf>
f0102962:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102965:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102968:	ff 45 f0             	incl   -0x10(%ebp)
f010296b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010296e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102971:	7c d0                	jl     f0102943 <command_readuserblock+0xad>
f0102973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102976:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102979:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010297c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010297f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102984:	c9                   	leave  
f0102985:	c3                   	ret    

f0102986 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102986:	55                   	push   %ebp
f0102987:	89 e5                	mov    %esp,%ebp
f0102989:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010298c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298f:	83 c0 04             	add    $0x4,%eax
f0102992:	8b 00                	mov    (%eax),%eax
f0102994:	83 ec 04             	sub    $0x4,%esp
f0102997:	6a 0a                	push   $0xa
f0102999:	6a 00                	push   $0x0
f010299b:	50                   	push   %eax
f010299c:	e8 cd c7 02 00       	call   f012f16e <strtol>
f01029a1:	83 c4 10             	add    $0x10,%esp
f01029a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01029a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01029ae:	83 ec 04             	sub    $0x4,%esp
f01029b1:	6a 00                	push   $0x0
f01029b3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01029b6:	50                   	push   %eax
f01029b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01029ba:	e8 0f 70 00 00       	call   f01099ce <envid2env>
f01029bf:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01029c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c5:	85 c0                	test   %eax,%eax
f01029c7:	75 0a                	jne    f01029d3 <command_remove_table+0x4d>
f01029c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ce:	e9 aa 00 00 00       	jmp    f0102a7d <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f01029d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d6:	83 c0 08             	add    $0x8,%eax
f01029d9:	8b 00                	mov    (%eax),%eax
f01029db:	83 ec 04             	sub    $0x4,%esp
f01029de:	6a 10                	push   $0x10
f01029e0:	6a 00                	push   $0x0
f01029e2:	50                   	push   %eax
f01029e3:	e8 86 c7 02 00       	call   f012f16e <strtol>
f01029e8:	83 c4 10             	add    $0x10,%esp
f01029eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01029ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01029f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01029f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102a00:	c1 ea 16             	shr    $0x16,%edx
f0102a03:	c1 e2 02             	shl    $0x2,%edx
f0102a06:	01 d0                	add    %edx,%eax
f0102a08:	8b 00                	mov    (%eax),%eax
f0102a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102a0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102a12:	83 ec 0c             	sub    $0xc,%esp
f0102a15:	ff 75 e8             	pushl  -0x18(%ebp)
f0102a18:	e8 70 f9 ff ff       	call   f010238d <to_frame_info>
f0102a1d:	83 c4 10             	add    $0x10,%esp
f0102a20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a26:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102a2c:	83 ec 0c             	sub    $0xc,%esp
f0102a2f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102a32:	e8 06 4a 00 00       	call   f010743d <free_frame>
f0102a37:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a3d:	c1 e8 16             	shr    $0x16,%eax
f0102a40:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102a43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a46:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a4c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102a4f:	c1 e2 02             	shl    $0x2,%edx
f0102a52:	01 c2                	add    %eax,%edx
f0102a54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a5d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a60:	c1 e1 02             	shl    $0x2,%ecx
f0102a63:	01 c8                	add    %ecx,%eax
f0102a65:	8b 00                	mov    (%eax),%eax
f0102a67:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a6a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a6c:	0f 20 d8             	mov    %cr3,%eax
f0102a6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a75:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a85:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a89:	7e 06                	jle    f0102a91 <command_allocuserpage+0x12>
f0102a8b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a8f:	7e 1a                	jle    f0102aab <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a91:	83 ec 0c             	sub    $0xc,%esp
f0102a94:	68 c4 0c 13 f0       	push   $0xf0130cc4
f0102a99:	e8 93 e3 ff ff       	call   f0100e31 <cprintf>
f0102a9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa6:	e9 4c 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 04             	sub    $0x4,%esp
f0102ab6:	6a 0a                	push   $0xa
f0102ab8:	6a 00                	push   $0x0
f0102aba:	50                   	push   %eax
f0102abb:	e8 ae c6 02 00       	call   f012f16e <strtol>
f0102ac0:	83 c4 10             	add    $0x10,%esp
f0102ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102ac6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102acd:	83 ec 04             	sub    $0x4,%esp
f0102ad0:	6a 00                	push   $0x0
f0102ad2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102ad5:	50                   	push   %eax
f0102ad6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ad9:	e8 f0 6e 00 00       	call   f01099ce <envid2env>
f0102ade:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ae4:	85 c0                	test   %eax,%eax
f0102ae6:	75 0a                	jne    f0102af2 <command_allocuserpage+0x73>
f0102ae8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aed:	e9 05 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102af2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af5:	83 c0 08             	add    $0x8,%eax
f0102af8:	8b 00                	mov    (%eax),%eax
f0102afa:	83 ec 04             	sub    $0x4,%esp
f0102afd:	6a 10                	push   $0x10
f0102aff:	6a 00                	push   $0x0
f0102b01:	50                   	push   %eax
f0102b02:	e8 67 c6 02 00       	call   f012f16e <strtol>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102b0d:	83 ec 0c             	sub    $0xc,%esp
f0102b10:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102b13:	50                   	push   %eax
f0102b14:	e8 0c 48 00 00       	call   f0107325 <allocate_frame>
f0102b19:	83 c4 10             	add    $0x10,%esp
f0102b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102b1f:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102b23:	75 1a                	jne    f0102b3f <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102b25:	83 ec 0c             	sub    $0xc,%esp
f0102b28:	68 ee 0c 13 f0       	push   $0xf0130cee
f0102b2d:	e8 ff e2 ff ff       	call   f0100e31 <cprintf>
f0102b32:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b35:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b3a:	e9 b8 00 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102b3f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b43:	75 20                	jne    f0102b65 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102b45:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b51:	6a 06                	push   $0x6
f0102b53:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b56:	52                   	push   %edx
f0102b57:	50                   	push   %eax
f0102b58:	e8 63 4b 00 00       	call   f01076c0 <map_frame>
f0102b5d:	83 c4 10             	add    $0x10,%esp
f0102b60:	e9 8d 00 00 00       	jmp    f0102bf2 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b65:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b69:	0f 85 83 00 00 00    	jne    f0102bf2 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b72:	83 c0 0c             	add    $0xc,%eax
f0102b75:	8b 00                	mov    (%eax),%eax
f0102b77:	8a 00                	mov    (%eax),%al
f0102b79:	3c 72                	cmp    $0x72,%al
f0102b7b:	74 0e                	je     f0102b8b <command_allocuserpage+0x10c>
f0102b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b80:	83 c0 0c             	add    $0xc,%eax
f0102b83:	8b 00                	mov    (%eax),%eax
f0102b85:	8a 00                	mov    (%eax),%al
f0102b87:	3c 52                	cmp    $0x52,%al
f0102b89:	75 09                	jne    f0102b94 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b92:	eb 3c                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b97:	83 c0 0c             	add    $0xc,%eax
f0102b9a:	8b 00                	mov    (%eax),%eax
f0102b9c:	8a 00                	mov    (%eax),%al
f0102b9e:	3c 77                	cmp    $0x77,%al
f0102ba0:	74 0e                	je     f0102bb0 <command_allocuserpage+0x131>
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 0c             	add    $0xc,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	8a 00                	mov    (%eax),%al
f0102bac:	3c 57                	cmp    $0x57,%al
f0102bae:	75 09                	jne    f0102bb9 <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102bb0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102bb7:	eb 17                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102bb9:	83 ec 0c             	sub    $0xc,%esp
f0102bbc:	68 08 0d 13 f0       	push   $0xf0130d08
f0102bc1:	e8 6b e2 ff ff       	call   f0100e31 <cprintf>
f0102bc6:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102bc9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bd3:	83 c8 04             	or     $0x4,%eax
f0102bd6:	89 c1                	mov    %eax,%ecx
f0102bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102bdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bde:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102be4:	51                   	push   %ecx
f0102be5:	ff 75 ec             	pushl  -0x14(%ebp)
f0102be8:	52                   	push   %edx
f0102be9:	50                   	push   %eax
f0102bea:	e8 d1 4a 00 00       	call   f01076c0 <map_frame>
f0102bef:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	56                   	push   %esi
f0102bfd:	53                   	push   %ebx
f0102bfe:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102c01:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102c04:	83 ec 0c             	sub    $0xc,%esp
f0102c07:	50                   	push   %eax
f0102c08:	e8 23 4d 00 00       	call   f0107930 <calculate_available_frames>
f0102c0d:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102c13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102c19:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102c1c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102c1f:	01 de                	add    %ebx,%esi
f0102c21:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c24:	01 f3                	add    %esi,%ebx
f0102c26:	83 ec 0c             	sub    $0xc,%esp
f0102c29:	51                   	push   %ecx
f0102c2a:	52                   	push   %edx
f0102c2b:	50                   	push   %eax
f0102c2c:	53                   	push   %ebx
f0102c2d:	68 4c 0d 13 f0       	push   $0xf0130d4c
f0102c32:	e8 fa e1 ff ff       	call   f0100e31 <cprintf>
f0102c37:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102c3a:	a1 08 bf 2b f0       	mov    0xf02bbf08,%eax
f0102c3f:	83 ec 08             	sub    $0x8,%esp
f0102c42:	50                   	push   %eax
f0102c43:	68 a4 0d 13 f0       	push   $0xf0130da4
f0102c48:	e8 e4 e1 ff ff       	call   f0100e31 <cprintf>
f0102c4d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102c58:	5b                   	pop    %ebx
f0102c59:	5e                   	pop    %esi
f0102c5a:	5d                   	pop    %ebp
f0102c5b:	c3                   	ret    

f0102c5c <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102c5c:	55                   	push   %ebp
f0102c5d:	89 e5                	mov    %esp,%ebp
f0102c5f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c62:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c7a:	83 f8 02             	cmp    $0x2,%eax
f0102c7d:	74 39                	je     f0102cb8 <CreateEnv+0x5c>
f0102c7f:	83 f8 03             	cmp    $0x3,%eax
f0102c82:	75 1d                	jne    f0102ca1 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 08             	add    $0x8,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 04             	sub    $0x4,%esp
f0102c8f:	6a 0a                	push   $0xa
f0102c91:	6a 00                	push   $0x0
f0102c93:	50                   	push   %eax
f0102c94:	e8 d5 c4 02 00       	call   f012f16e <strtol>
f0102c99:	83 c4 10             	add    $0x10,%esp
f0102c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c9f:	eb 18                	jmp    f0102cb9 <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102ca1:	83 ec 0c             	sub    $0xc,%esp
f0102ca4:	68 e0 0d 13 f0       	push   $0xf0130de0
f0102ca9:	e8 83 e1 ff ff       	call   f0100e31 <cprintf>
f0102cae:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102cb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cb6:	eb 58                	jmp    f0102d10 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102cb8:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102cb9:	83 ec 0c             	sub    $0xc,%esp
f0102cbc:	6a 02                	push   $0x2
f0102cbe:	e8 8d aa 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f0102cc3:	83 c4 10             	add    $0x10,%esp
f0102cc6:	85 c0                	test   %eax,%eax
f0102cc8:	74 07                	je     f0102cd1 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102cca:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102cd1:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102cd5:	76 19                	jbe    f0102cf0 <CreateEnv+0x94>
f0102cd7:	68 50 0e 13 f0       	push   $0xf0130e50
f0102cdc:	68 95 0e 13 f0       	push   $0xf0130e95
f0102ce1:	68 bb 01 00 00       	push   $0x1bb
f0102ce6:	68 aa 0e 13 f0       	push   $0xf0130eaa
f0102ceb:	e8 c0 d4 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf3:	83 c0 04             	add    $0x4,%eax
f0102cf6:	8b 00                	mov    (%eax),%eax
f0102cf8:	ff 75 f0             	pushl  -0x10(%ebp)
f0102cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102cfe:	ff 75 ec             	pushl  -0x14(%ebp)
f0102d01:	50                   	push   %eax
f0102d02:	e8 c4 5f 00 00       	call   f0108ccb <env_create>
f0102d07:	83 c4 10             	add    $0x10,%esp
f0102d0a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102d10:	c9                   	leave  
f0102d11:	c3                   	ret    

f0102d12 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102d12:	55                   	push   %ebp
f0102d13:	89 e5                	mov    %esp,%ebp
f0102d15:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	ff 75 0c             	pushl  0xc(%ebp)
f0102d1e:	ff 75 08             	pushl  0x8(%ebp)
f0102d21:	e8 36 ff ff ff       	call   f0102c5c <CreateEnv>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102d2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d30:	75 07                	jne    f0102d39 <command_run_program+0x27>
f0102d32:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d37:	eb 46                	jmp    f0102d7f <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d3c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	50                   	push   %eax
f0102d43:	68 be 0e 13 f0       	push   $0xf0130ebe
f0102d48:	e8 e4 e0 ff ff       	call   f0100e31 <cprintf>
f0102d4d:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102d50:	c7 05 08 bf 2b f0 00 	movl   $0x0,0xf02bbf08
f0102d57:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102d5a:	83 ec 0c             	sub    $0xc,%esp
f0102d5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d60:	e8 ce 25 00 00       	call   f0105333 <sched_new_env>
f0102d65:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d6e:	83 ec 0c             	sub    $0xc,%esp
f0102d71:	50                   	push   %eax
f0102d72:	e8 d9 25 00 00       	call   f0105350 <sched_run_env>
f0102d77:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
f0102d84:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8a:	83 c0 04             	add    $0x4,%eax
f0102d8d:	8b 00                	mov    (%eax),%eax
f0102d8f:	83 ec 04             	sub    $0x4,%esp
f0102d92:	6a 0a                	push   $0xa
f0102d94:	6a 00                	push   $0x0
f0102d96:	50                   	push   %eax
f0102d97:	e8 d2 c3 02 00       	call   f012f16e <strtol>
f0102d9c:	83 c4 10             	add    $0x10,%esp
f0102d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102da5:	83 ec 0c             	sub    $0xc,%esp
f0102da8:	50                   	push   %eax
f0102da9:	e8 63 28 00 00       	call   f0105611 <sched_kill_env>
f0102dae:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db6:	c9                   	leave  
f0102db7:	c3                   	ret    

f0102db8 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102db8:	55                   	push   %ebp
f0102db9:	89 e5                	mov    %esp,%ebp
f0102dbb:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102dbe:	83 ec 08             	sub    $0x8,%esp
f0102dc1:	ff 75 0c             	pushl  0xc(%ebp)
f0102dc4:	ff 75 08             	pushl  0x8(%ebp)
f0102dc7:	e8 90 fe ff ff       	call   f0102c5c <CreateEnv>
f0102dcc:	83 c4 10             	add    $0x10,%esp
f0102dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102dd6:	75 07                	jne    f0102ddf <commnad_load_env+0x27>
		return 0 ;
f0102dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ddd:	eb 2a                	jmp    f0102e09 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102ddf:	83 ec 0c             	sub    $0xc,%esp
f0102de2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102de5:	e8 49 25 00 00       	call   f0105333 <sched_new_env>
f0102dea:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102df0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102df3:	83 ec 08             	sub    $0x8,%esp
f0102df6:	50                   	push   %eax
f0102df7:	68 be 0e 13 f0       	push   $0xf0130ebe
f0102dfc:	e8 30 e0 ff ff       	call   f0100e31 <cprintf>
f0102e01:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102e04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e09:	c9                   	leave  
f0102e0a:	c3                   	ret    

f0102e0b <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102e0b:	55                   	push   %ebp
f0102e0c:	89 e5                	mov    %esp,%ebp
f0102e0e:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102e11:	c7 05 08 bf 2b f0 00 	movl   $0x0,0xf02bbf08
f0102e18:	00 00 00 
	sched_run_all();
f0102e1b:	e8 ba 2d 00 00       	call   f0105bda <sched_run_all>

	return 0 ;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e25:	c9                   	leave  
f0102e26:	c3                   	ret    

f0102e27 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102e27:	55                   	push   %ebp
f0102e28:	89 e5                	mov    %esp,%ebp
f0102e2a:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102e2d:	e8 a6 2b 00 00       	call   f01059d8 <sched_print_all>

	return 0 ;
f0102e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e37:	c9                   	leave  
f0102e38:	c3                   	ret    

f0102e39 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102e39:	55                   	push   %ebp
f0102e3a:	89 e5                	mov    %esp,%ebp
f0102e3c:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102e3f:	e8 09 2e 00 00       	call   f0105c4d <sched_kill_all>

	return 0 ;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e49:	c9                   	leave  
f0102e4a:	c3                   	ret    

f0102e4b <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102e4b:	55                   	push   %ebp
f0102e4c:	89 e5                	mov    %esp,%ebp
f0102e4e:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102e51:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102e55:	7f 1a                	jg     f0102e71 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e57:	83 ec 0c             	sub    $0xc,%esp
f0102e5a:	68 d4 0e 13 f0       	push   $0xf0130ed4
f0102e5f:	e8 cd df ff ff       	call   f0100e31 <cprintf>
f0102e64:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e67:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e6c:	e9 83 00 00 00       	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e74:	83 c0 04             	add    $0x4,%eax
f0102e77:	8b 00                	mov    (%eax),%eax
f0102e79:	83 ec 04             	sub    $0x4,%esp
f0102e7c:	6a 0a                	push   $0xa
f0102e7e:	6a 00                	push   $0x0
f0102e80:	50                   	push   %eax
f0102e81:	e8 e8 c2 02 00       	call   f012f16e <strtol>
f0102e86:	83 c4 10             	add    $0x10,%esp
f0102e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e8c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e90:	75 20                	jne    f0102eb2 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e92:	83 ec 0c             	sub    $0xc,%esp
f0102e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e98:	e8 28 a8 00 00       	call   f010d6c5 <setPageReplacmentAlgorithmLRU>
f0102e9d:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 34 0f 13 f0       	push   $0xf0130f34
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
f0102eb0:	eb 3d                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102eb2:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102eb6:	75 20                	jne    f0102ed8 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102eb8:	83 ec 0c             	sub    $0xc,%esp
f0102ebb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ebe:	e8 02 a8 00 00       	call   f010d6c5 <setPageReplacmentAlgorithmLRU>
f0102ec3:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 78 0f 13 f0       	push   $0xf0130f78
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	eb 17                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102ed8:	83 ec 0c             	sub    $0xc,%esp
f0102edb:	68 b8 0f 13 f0       	push   $0xf0130fb8
f0102ee0:	e8 4c df ff ff       	call   f0100e31 <cprintf>
f0102ee5:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102ee8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eed:	eb 05                	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102eef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ef4:	c9                   	leave  
f0102ef5:	c3                   	ret    

f0102ef6 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102ef6:	55                   	push   %ebp
f0102ef7:	89 e5                	mov    %esp,%ebp
f0102ef9:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102efc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eff:	83 c0 04             	add    $0x4,%eax
f0102f02:	8b 00                	mov    (%eax),%eax
f0102f04:	83 ec 04             	sub    $0x4,%esp
f0102f07:	6a 0a                	push   $0xa
f0102f09:	6a 00                	push   $0x0
f0102f0b:	50                   	push   %eax
f0102f0c:	e8 5d c2 02 00       	call   f012f16e <strtol>
f0102f11:	83 c4 10             	add    $0x10,%esp
f0102f14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102f17:	83 ec 0c             	sub    $0xc,%esp
f0102f1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f1d:	e8 16 a8 00 00       	call   f010d738 <setPageReplacmentAlgorithmNchanceCLOCK>
f0102f22:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102f25:	83 ec 0c             	sub    $0xc,%esp
f0102f28:	68 0c 10 13 f0       	push   $0xf013100c
f0102f2d:	e8 ff de ff ff       	call   f0100e31 <cprintf>
f0102f32:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f3a:	c9                   	leave  
f0102f3b:	c3                   	ret    

f0102f3c <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102f3c:	55                   	push   %ebp
f0102f3d:	89 e5                	mov    %esp,%ebp
f0102f3f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102f42:	e8 b1 a7 00 00       	call   f010d6f8 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102f47:	83 ec 0c             	sub    $0xc,%esp
f0102f4a:	68 40 10 13 f0       	push   $0xf0131040
f0102f4f:	e8 dd de ff ff       	call   f0100e31 <cprintf>
f0102f54:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f57:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f5c:	c9                   	leave  
f0102f5d:	c3                   	ret    

f0102f5e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f5e:	55                   	push   %ebp
f0102f5f:	89 e5                	mov    %esp,%ebp
f0102f61:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f64:	e8 9f a7 00 00       	call   f010d708 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	68 6c 10 13 f0       	push   $0xf013106c
f0102f71:	e8 bb de ff ff       	call   f0100e31 <cprintf>
f0102f76:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f7e:	c9                   	leave  
f0102f7f:	c3                   	ret    

f0102f80 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f80:	55                   	push   %ebp
f0102f81:	89 e5                	mov    %esp,%ebp
f0102f83:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f86:	e8 8d a7 00 00       	call   f010d718 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 94 10 13 f0       	push   $0xf0131094
f0102f93:	e8 99 de ff ff       	call   f0100e31 <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fa0:	c9                   	leave  
f0102fa1:	c3                   	ret    

f0102fa2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102fa2:	55                   	push   %ebp
f0102fa3:	89 e5                	mov    %esp,%ebp
f0102fa5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fab:	83 c0 04             	add    $0x4,%eax
f0102fae:	8b 00                	mov    (%eax),%eax
f0102fb0:	83 ec 04             	sub    $0x4,%esp
f0102fb3:	6a 0a                	push   $0xa
f0102fb5:	6a 00                	push   $0x0
f0102fb7:	50                   	push   %eax
f0102fb8:	e8 b1 c1 02 00       	call   f012f16e <strtol>
f0102fbd:	83 c4 10             	add    $0x10,%esp
f0102fc0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102fc3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102fc7:	83 ec 0c             	sub    $0xc,%esp
f0102fca:	50                   	push   %eax
f0102fcb:	e8 44 33 00 00       	call   f0106314 <sched_init_RR>
f0102fd0:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102fd3:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f0102fd8:	0f b6 c0             	movzbl %al,%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	50                   	push   %eax
f0102fdf:	68 c8 10 13 f0       	push   $0xf01310c8
f0102fe4:	e8 48 de ff ff       	call   f0100e31 <cprintf>
f0102fe9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff1:	c9                   	leave  
f0102ff2:	c3                   	ret    

f0102ff3 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102ff3:	55                   	push   %ebp
f0102ff4:	89 e5                	mov    %esp,%ebp
f0102ff6:	53                   	push   %ebx
f0102ff7:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ffd:	83 c0 04             	add    $0x4,%eax
f0103000:	8b 00                	mov    (%eax),%eax
f0103002:	83 ec 04             	sub    $0x4,%esp
f0103005:	6a 0a                	push   $0xa
f0103007:	6a 00                	push   $0x0
f0103009:	50                   	push   %eax
f010300a:	e8 5f c1 02 00       	call   f012f16e <strtol>
f010300f:	83 c4 10             	add    $0x10,%esp
f0103012:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103015:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010301c:	eb 2e                	jmp    f010304c <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f010301e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103021:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0103024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103027:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010302e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103031:	01 d0                	add    %edx,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 04             	sub    $0x4,%esp
f0103038:	6a 0a                	push   $0xa
f010303a:	6a 00                	push   $0x0
f010303c:	50                   	push   %eax
f010303d:	e8 2c c1 02 00       	call   f012f16e <strtol>
f0103042:	83 c4 10             	add    $0x10,%esp
f0103045:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103049:	ff 45 f4             	incl   -0xc(%ebp)
f010304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010304f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103052:	7c ca                	jl     f010301e <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0103054:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0103058:	83 ec 08             	sub    $0x8,%esp
f010305b:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010305e:	52                   	push   %edx
f010305f:	50                   	push   %eax
f0103060:	e8 05 33 00 00       	call   f010636a <sched_init_MLFQ>
f0103065:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 00 11 13 f0       	push   $0xf0131100
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010307f:	eb 21                	jmp    f01030a2 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103081:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103084:	05 c8 be 2b f0       	add    $0xf02bbec8,%eax
f0103089:	8a 00                	mov    (%eax),%al
f010308b:	0f b6 c0             	movzbl %al,%eax
f010308e:	83 ec 08             	sub    $0x8,%esp
f0103091:	50                   	push   %eax
f0103092:	68 2d 11 13 f0       	push   $0xf013112d
f0103097:	e8 95 dd ff ff       	call   f0100e31 <cprintf>
f010309c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010309f:	ff 45 f0             	incl   -0x10(%ebp)
f01030a2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01030a7:	0f b6 c0             	movzbl %al,%eax
f01030aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01030ad:	7f d2                	jg     f0103081 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01030af:	83 ec 0c             	sub    $0xc,%esp
f01030b2:	68 b1 0c 13 f0       	push   $0xf0130cb1
f01030b7:	e8 75 dd ff ff       	call   f0100e31 <cprintf>
f01030bc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030c7:	c9                   	leave  
f01030c8:	c3                   	ret    

f01030c9 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f01030c9:	55                   	push   %ebp
f01030ca:	89 e5                	mov    %esp,%ebp
f01030cc:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01030cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030d2:	83 c0 04             	add    $0x4,%eax
f01030d5:	8b 00                	mov    (%eax),%eax
f01030d7:	83 ec 04             	sub    $0x4,%esp
f01030da:	6a 0a                	push   $0xa
f01030dc:	6a 00                	push   $0x0
f01030de:	50                   	push   %eax
f01030df:	e8 8a c0 02 00       	call   f012f16e <strtol>
f01030e4:	83 c4 10             	add    $0x10,%esp
f01030e7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01030ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030ed:	83 c0 08             	add    $0x8,%eax
f01030f0:	8b 00                	mov    (%eax),%eax
f01030f2:	83 ec 04             	sub    $0x4,%esp
f01030f5:	6a 0a                	push   $0xa
f01030f7:	6a 00                	push   $0x0
f01030f9:	50                   	push   %eax
f01030fa:	e8 6f c0 02 00       	call   f012f16e <strtol>
f01030ff:	83 c4 10             	add    $0x10,%esp
f0103102:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0103105:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0103109:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010310d:	83 ec 08             	sub    $0x8,%esp
f0103110:	52                   	push   %edx
f0103111:	50                   	push   %eax
f0103112:	e8 62 32 00 00       	call   f0106379 <sched_init_BSD>
f0103117:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f010311a:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f010311e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103122:	83 ec 04             	sub    $0x4,%esp
f0103125:	52                   	push   %edx
f0103126:	50                   	push   %eax
f0103127:	68 34 11 13 f0       	push   $0xf0131134
f010312c:	e8 00 dd ff ff       	call   f0100e31 <cprintf>
f0103131:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0103134:	83 ec 0c             	sub    $0xc,%esp
f0103137:	68 b1 0c 13 f0       	push   $0xf0130cb1
f010313c:	e8 f0 dc ff ff       	call   f0100e31 <cprintf>
f0103141:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103144:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103149:	c9                   	leave  
f010314a:	c3                   	ret    

f010314b <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010314b:	55                   	push   %ebp
f010314c:	89 e5                	mov    %esp,%ebp
f010314e:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103151:	e8 43 30 00 00       	call   f0106199 <isSchedMethodMLFQ>
f0103156:	85 c0                	test   %eax,%eax
f0103158:	74 59                	je     f01031b3 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010315a:	83 ec 0c             	sub    $0xc,%esp
f010315d:	68 70 11 13 f0       	push   $0xf0131170
f0103162:	e8 ca dc ff ff       	call   f0100e31 <cprintf>
f0103167:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010316a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103171:	eb 21                	jmp    f0103194 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103176:	05 c8 be 2b f0       	add    $0xf02bbec8,%eax
f010317b:	8a 00                	mov    (%eax),%al
f010317d:	0f b6 c0             	movzbl %al,%eax
f0103180:	83 ec 08             	sub    $0x8,%esp
f0103183:	50                   	push   %eax
f0103184:	68 2d 11 13 f0       	push   $0xf013112d
f0103189:	e8 a3 dc ff ff       	call   f0100e31 <cprintf>
f010318e:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103191:	ff 45 f4             	incl   -0xc(%ebp)
f0103194:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0103199:	0f b6 c0             	movzbl %al,%eax
f010319c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010319f:	7f d2                	jg     f0103173 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01031a1:	83 ec 0c             	sub    $0xc,%esp
f01031a4:	68 b1 0c 13 f0       	push   $0xf0130cb1
f01031a9:	e8 83 dc ff ff       	call   f0100e31 <cprintf>
f01031ae:	83 c4 10             	add    $0x10,%esp
f01031b1:	eb 61                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f01031b3:	e8 c7 2f 00 00       	call   f010617f <isSchedMethodRR>
f01031b8:	85 c0                	test   %eax,%eax
f01031ba:	74 1b                	je     f01031d7 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01031bc:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f01031c1:	0f b6 c0             	movzbl %al,%eax
f01031c4:	83 ec 08             	sub    $0x8,%esp
f01031c7:	50                   	push   %eax
f01031c8:	68 a4 11 13 f0       	push   $0xf01311a4
f01031cd:	e8 5f dc ff ff       	call   f0100e31 <cprintf>
f01031d2:	83 c4 10             	add    $0x10,%esp
f01031d5:	eb 3d                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f01031d7:	e8 d8 2f 00 00       	call   f01061b4 <isSchedMethodBSD>
f01031dc:	85 c0                	test   %eax,%eax
f01031de:	74 24                	je     f0103204 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f01031e0:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f01031e5:	0f b6 d0             	movzbl %al,%edx
f01031e8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01031ed:	0f b6 c0             	movzbl %al,%eax
f01031f0:	83 ec 04             	sub    $0x4,%esp
f01031f3:	52                   	push   %edx
f01031f4:	50                   	push   %eax
f01031f5:	68 34 11 13 f0       	push   $0xf0131134
f01031fa:	e8 32 dc ff ff       	call   f0100e31 <cprintf>
f01031ff:	83 c4 10             	add    $0x10,%esp
f0103202:	eb 10                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0103204:	83 ec 0c             	sub    $0xc,%esp
f0103207:	68 e0 11 13 f0       	push   $0xf01311e0
f010320c:	e8 20 dc ff ff       	call   f0100e31 <cprintf>
f0103211:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103214:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103219:	c9                   	leave  
f010321a:	c3                   	ret    

f010321b <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010321b:	55                   	push   %ebp
f010321c:	89 e5                	mov    %esp,%ebp
f010321e:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0103221:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103224:	83 c0 04             	add    $0x4,%eax
f0103227:	8b 00                	mov    (%eax),%eax
f0103229:	83 ec 04             	sub    $0x4,%esp
f010322c:	6a 0a                	push   $0xa
f010322e:	6a 00                	push   $0x0
f0103230:	50                   	push   %eax
f0103231:	e8 38 bf 02 00       	call   f012f16e <strtol>
f0103236:	83 c4 10             	add    $0x10,%esp
f0103239:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010323c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010323f:	0f b6 c0             	movzbl %al,%eax
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	50                   	push   %eax
f0103246:	e8 60 ae 02 00       	call   f012e0ab <chksch>
f010324b:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010324e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103252:	75 12                	jne    f0103266 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0103254:	83 ec 0c             	sub    $0xc,%esp
f0103257:	68 08 12 13 f0       	push   $0xf0131208
f010325c:	e8 d0 db ff ff       	call   f0100e31 <cprintf>
f0103261:	83 c4 10             	add    $0x10,%esp
f0103264:	eb 16                	jmp    f010327c <command_sch_test+0x61>
	else if (status == 1)
f0103266:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010326a:	75 10                	jne    f010327c <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010326c:	83 ec 0c             	sub    $0xc,%esp
f010326f:	68 30 12 13 f0       	push   $0xf0131230
f0103274:	e8 b8 db ff ff       	call   f0100e31 <cprintf>
f0103279:	83 c4 10             	add    $0x10,%esp
	return 0;
f010327c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103281:	c9                   	leave  
f0103282:	c3                   	ret    

f0103283 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103283:	55                   	push   %ebp
f0103284:	89 e5                	mov    %esp,%ebp
f0103286:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103289:	e8 d8 a4 00 00       	call   f010d766 <isPageReplacmentAlgorithmCLOCK>
f010328e:	85 c0                	test   %eax,%eax
f0103290:	74 15                	je     f01032a7 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103292:	83 ec 0c             	sub    $0xc,%esp
f0103295:	68 54 12 13 f0       	push   $0xf0131254
f010329a:	e8 92 db ff ff       	call   f0100e31 <cprintf>
f010329f:	83 c4 10             	add    $0x10,%esp
f01032a2:	e9 8c 00 00 00       	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01032a7:	83 ec 0c             	sub    $0xc,%esp
f01032aa:	6a 01                	push   $0x1
f01032ac:	e8 9f a4 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f01032b1:	83 c4 10             	add    $0x10,%esp
f01032b4:	85 c0                	test   %eax,%eax
f01032b6:	74 12                	je     f01032ca <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01032b8:	83 ec 0c             	sub    $0xc,%esp
f01032bb:	68 7c 12 13 f0       	push   $0xf013127c
f01032c0:	e8 6c db ff ff       	call   f0100e31 <cprintf>
f01032c5:	83 c4 10             	add    $0x10,%esp
f01032c8:	eb 69                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01032ca:	83 ec 0c             	sub    $0xc,%esp
f01032cd:	6a 02                	push   $0x2
f01032cf:	e8 7c a4 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f01032d4:	83 c4 10             	add    $0x10,%esp
f01032d7:	85 c0                	test   %eax,%eax
f01032d9:	74 12                	je     f01032ed <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01032db:	83 ec 0c             	sub    $0xc,%esp
f01032de:	68 bc 12 13 f0       	push   $0xf01312bc
f01032e3:	e8 49 db ff ff       	call   f0100e31 <cprintf>
f01032e8:	83 c4 10             	add    $0x10,%esp
f01032eb:	eb 46                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01032ed:	e8 8f a4 00 00       	call   f010d781 <isPageReplacmentAlgorithmFIFO>
f01032f2:	85 c0                	test   %eax,%eax
f01032f4:	74 12                	je     f0103308 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01032f6:	83 ec 0c             	sub    $0xc,%esp
f01032f9:	68 f8 12 13 f0       	push   $0xf01312f8
f01032fe:	e8 2e db ff ff       	call   f0100e31 <cprintf>
f0103303:	83 c4 10             	add    $0x10,%esp
f0103306:	eb 2b                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0103308:	e8 8f a4 00 00       	call   f010d79c <isPageReplacmentAlgorithmModifiedCLOCK>
f010330d:	85 c0                	test   %eax,%eax
f010330f:	74 12                	je     f0103323 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0103311:	83 ec 0c             	sub    $0xc,%esp
f0103314:	68 1c 13 13 f0       	push   $0xf013131c
f0103319:	e8 13 db ff ff       	call   f0100e31 <cprintf>
f010331e:	83 c4 10             	add    $0x10,%esp
f0103321:	eb 10                	jmp    f0103333 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0103323:	83 ec 0c             	sub    $0xc,%esp
f0103326:	68 4c 13 13 f0       	push   $0xf013134c
f010332b:	e8 01 db ff ff       	call   f0100e31 <cprintf>
f0103330:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103333:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103338:	c9                   	leave  
f0103339:	c3                   	ret    

f010333a <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010333a:	55                   	push   %ebp
f010333b:	89 e5                	mov    %esp,%ebp
f010333d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0103340:	e8 b4 ef ff ff       	call   f01022f9 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0103345:	83 ec 0c             	sub    $0xc,%esp
f0103348:	68 78 13 13 f0       	push   $0xf0131378
f010334d:	e8 df da ff ff       	call   f0100e31 <cprintf>
f0103352:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103355:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010335a:	c9                   	leave  
f010335b:	c3                   	ret    

f010335c <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010335c:	55                   	push   %ebp
f010335d:	89 e5                	mov    %esp,%ebp
f010335f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103362:	e8 a2 ef ff ff       	call   f0102309 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103367:	83 ec 0c             	sub    $0xc,%esp
f010336a:	68 a8 13 13 f0       	push   $0xf01313a8
f010336f:	e8 bd da ff ff       	call   f0100e31 <cprintf>
f0103374:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103377:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337c:	c9                   	leave  
f010337d:	c3                   	ret    

f010337e <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010337e:	55                   	push   %ebp
f010337f:	89 e5                	mov    %esp,%ebp
f0103381:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103384:	e8 90 ef ff ff       	call   f0102319 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103389:	83 ec 0c             	sub    $0xc,%esp
f010338c:	68 d8 13 13 f0       	push   $0xf01313d8
f0103391:	e8 9b da ff ff       	call   f0100e31 <cprintf>
f0103396:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103399:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010339e:	c9                   	leave  
f010339f:	c3                   	ret    

f01033a0 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01033a0:	55                   	push   %ebp
f01033a1:	89 e5                	mov    %esp,%ebp
f01033a3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01033a6:	e8 7e ef ff ff       	call   f0102329 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01033ab:	83 ec 0c             	sub    $0xc,%esp
f01033ae:	68 08 14 13 f0       	push   $0xf0131408
f01033b3:	e8 79 da ff ff       	call   f0100e31 <cprintf>
f01033b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033c0:	c9                   	leave  
f01033c1:	c3                   	ret    

f01033c2 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01033c2:	55                   	push   %ebp
f01033c3:	89 e5                	mov    %esp,%ebp
f01033c5:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01033c8:	e8 6c ef ff ff       	call   f0102339 <isUHeapPlacementStrategyFIRSTFIT>
f01033cd:	84 c0                	test   %al,%al
f01033cf:	74 12                	je     f01033e3 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01033d1:	83 ec 0c             	sub    $0xc,%esp
f01033d4:	68 38 14 13 f0       	push   $0xf0131438
f01033d9:	e8 53 da ff ff       	call   f0100e31 <cprintf>
f01033de:	83 c4 10             	add    $0x10,%esp
f01033e1:	eb 61                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01033e3:	e8 66 ef ff ff       	call   f010234e <isUHeapPlacementStrategyBESTFIT>
f01033e8:	84 c0                	test   %al,%al
f01033ea:	74 12                	je     f01033fe <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01033ec:	83 ec 0c             	sub    $0xc,%esp
f01033ef:	68 64 14 13 f0       	push   $0xf0131464
f01033f4:	e8 38 da ff ff       	call   f0100e31 <cprintf>
f01033f9:	83 c4 10             	add    $0x10,%esp
f01033fc:	eb 46                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033fe:	e8 60 ef ff ff       	call   f0102363 <isUHeapPlacementStrategyNEXTFIT>
f0103403:	84 c0                	test   %al,%al
f0103405:	74 12                	je     f0103419 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0103407:	83 ec 0c             	sub    $0xc,%esp
f010340a:	68 90 14 13 f0       	push   $0xf0131490
f010340f:	e8 1d da ff ff       	call   f0100e31 <cprintf>
f0103414:	83 c4 10             	add    $0x10,%esp
f0103417:	eb 2b                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0103419:	e8 5a ef ff ff       	call   f0102378 <isUHeapPlacementStrategyWORSTFIT>
f010341e:	84 c0                	test   %al,%al
f0103420:	74 12                	je     f0103434 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103422:	83 ec 0c             	sub    $0xc,%esp
f0103425:	68 bc 14 13 f0       	push   $0xf01314bc
f010342a:	e8 02 da ff ff       	call   f0100e31 <cprintf>
f010342f:	83 c4 10             	add    $0x10,%esp
f0103432:	eb 10                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103434:	83 ec 0c             	sub    $0xc,%esp
f0103437:	68 e8 14 13 f0       	push   $0xf01314e8
f010343c:	e8 f0 d9 ff ff       	call   f0100e31 <cprintf>
f0103441:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103444:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103449:	c9                   	leave  
f010344a:	c3                   	ret    

f010344b <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
f010344e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103451:	e8 eb ed ff ff       	call   f0102241 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103456:	83 ec 0c             	sub    $0xc,%esp
f0103459:	68 14 15 13 f0       	push   $0xf0131514
f010345e:	e8 ce d9 ff ff       	call   f0100e31 <cprintf>
f0103463:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010346b:	c9                   	leave  
f010346c:	c3                   	ret    

f010346d <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010346d:	55                   	push   %ebp
f010346e:	89 e5                	mov    %esp,%ebp
f0103470:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103473:	e8 d9 ed ff ff       	call   f0102251 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103478:	83 ec 0c             	sub    $0xc,%esp
f010347b:	68 14 15 13 f0       	push   $0xf0131514
f0103480:	e8 ac d9 ff ff       	call   f0100e31 <cprintf>
f0103485:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103488:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010348d:	c9                   	leave  
f010348e:	c3                   	ret    

f010348f <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010348f:	55                   	push   %ebp
f0103490:	89 e5                	mov    %esp,%ebp
f0103492:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103495:	e8 c7 ed ff ff       	call   f0102261 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010349a:	83 ec 0c             	sub    $0xc,%esp
f010349d:	68 48 15 13 f0       	push   $0xf0131548
f01034a2:	e8 8a d9 ff ff       	call   f0100e31 <cprintf>
f01034a7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034af:	c9                   	leave  
f01034b0:	c3                   	ret    

f01034b1 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01034b1:	55                   	push   %ebp
f01034b2:	89 e5                	mov    %esp,%ebp
f01034b4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01034b7:	e8 b5 ed ff ff       	call   f0102271 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01034bc:	83 ec 0c             	sub    $0xc,%esp
f01034bf:	68 78 15 13 f0       	push   $0xf0131578
f01034c4:	e8 68 d9 ff ff       	call   f0100e31 <cprintf>
f01034c9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d1:	c9                   	leave  
f01034d2:	c3                   	ret    

f01034d3 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01034d3:	55                   	push   %ebp
f01034d4:	89 e5                	mov    %esp,%ebp
f01034d6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01034d9:	e8 a3 ed ff ff       	call   f0102281 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01034de:	83 ec 0c             	sub    $0xc,%esp
f01034e1:	68 a8 15 13 f0       	push   $0xf01315a8
f01034e6:	e8 46 d9 ff ff       	call   f0100e31 <cprintf>
f01034eb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034f3:	c9                   	leave  
f01034f4:	c3                   	ret    

f01034f5 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01034f5:	55                   	push   %ebp
f01034f6:	89 e5                	mov    %esp,%ebp
f01034f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01034fb:	e8 91 ed ff ff       	call   f0102291 <isKHeapPlacementStrategyCONTALLOC>
f0103500:	84 c0                	test   %al,%al
f0103502:	74 12                	je     f0103516 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103504:	83 ec 0c             	sub    $0xc,%esp
f0103507:	68 dc 15 13 f0       	push   $0xf01315dc
f010350c:	e8 20 d9 ff ff       	call   f0100e31 <cprintf>
f0103511:	83 c4 10             	add    $0x10,%esp
f0103514:	eb 7c                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0103516:	e8 8a ed ff ff       	call   f01022a5 <isKHeapPlacementStrategyFIRSTFIT>
f010351b:	84 c0                	test   %al,%al
f010351d:	74 12                	je     f0103531 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010351f:	83 ec 0c             	sub    $0xc,%esp
f0103522:	68 18 16 13 f0       	push   $0xf0131618
f0103527:	e8 05 d9 ff ff       	call   f0100e31 <cprintf>
f010352c:	83 c4 10             	add    $0x10,%esp
f010352f:	eb 61                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103531:	e8 84 ed ff ff       	call   f01022ba <isKHeapPlacementStrategyBESTFIT>
f0103536:	84 c0                	test   %al,%al
f0103538:	74 12                	je     f010354c <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010353a:	83 ec 0c             	sub    $0xc,%esp
f010353d:	68 48 16 13 f0       	push   $0xf0131648
f0103542:	e8 ea d8 ff ff       	call   f0100e31 <cprintf>
f0103547:	83 c4 10             	add    $0x10,%esp
f010354a:	eb 46                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010354c:	e8 7e ed ff ff       	call   f01022cf <isKHeapPlacementStrategyNEXTFIT>
f0103551:	84 c0                	test   %al,%al
f0103553:	74 12                	je     f0103567 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103555:	83 ec 0c             	sub    $0xc,%esp
f0103558:	68 74 16 13 f0       	push   $0xf0131674
f010355d:	e8 cf d8 ff ff       	call   f0100e31 <cprintf>
f0103562:	83 c4 10             	add    $0x10,%esp
f0103565:	eb 2b                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103567:	e8 78 ed ff ff       	call   f01022e4 <isKHeapPlacementStrategyWORSTFIT>
f010356c:	84 c0                	test   %al,%al
f010356e:	74 12                	je     f0103582 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103570:	83 ec 0c             	sub    $0xc,%esp
f0103573:	68 a0 16 13 f0       	push   $0xf01316a0
f0103578:	e8 b4 d8 ff ff       	call   f0100e31 <cprintf>
f010357d:	83 c4 10             	add    $0x10,%esp
f0103580:	eb 10                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103582:	83 ec 0c             	sub    $0xc,%esp
f0103585:	68 d0 16 13 f0       	push   $0xf01316d0
f010358a:	e8 a2 d8 ff ff       	call   f0100e31 <cprintf>
f010358f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103592:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103597:	c9                   	leave  
f0103598:	c3                   	ret    

f0103599 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103599:	55                   	push   %ebp
f010359a:	89 e5                	mov    %esp,%ebp
f010359c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010359f:	e8 6f a2 00 00       	call   f010d813 <isBufferingEnabled>
f01035a4:	84 c0                	test   %al,%al
f01035a6:	75 12                	jne    f01035ba <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035a8:	83 ec 0c             	sub    $0xc,%esp
f01035ab:	68 00 17 13 f0       	push   $0xf0131700
f01035b0:	e8 7c d8 ff ff       	call   f0100e31 <cprintf>
f01035b5:	83 c4 10             	add    $0x10,%esp
f01035b8:	eb 1d                	jmp    f01035d7 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01035ba:	83 ec 0c             	sub    $0xc,%esp
f01035bd:	6a 00                	push   $0x0
f01035bf:	e8 29 a2 00 00       	call   f010d7ed <enableModifiedBuffer>
f01035c4:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01035c7:	83 ec 0c             	sub    $0xc,%esp
f01035ca:	68 3c 17 13 f0       	push   $0xf013173c
f01035cf:	e8 5d d8 ff ff       	call   f0100e31 <cprintf>
f01035d4:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035dc:	c9                   	leave  
f01035dd:	c3                   	ret    

f01035de <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01035de:	55                   	push   %ebp
f01035df:	89 e5                	mov    %esp,%ebp
f01035e1:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01035e4:	e8 2a a2 00 00       	call   f010d813 <isBufferingEnabled>
f01035e9:	84 c0                	test   %al,%al
f01035eb:	75 12                	jne    f01035ff <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035ed:	83 ec 0c             	sub    $0xc,%esp
f01035f0:	68 00 17 13 f0       	push   $0xf0131700
f01035f5:	e8 37 d8 ff ff       	call   f0100e31 <cprintf>
f01035fa:	83 c4 10             	add    $0x10,%esp
f01035fd:	eb 1d                	jmp    f010361c <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035ff:	83 ec 0c             	sub    $0xc,%esp
f0103602:	6a 01                	push   $0x1
f0103604:	e8 e4 a1 00 00       	call   f010d7ed <enableModifiedBuffer>
f0103609:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010360c:	83 ec 0c             	sub    $0xc,%esp
f010360f:	68 60 17 13 f0       	push   $0xf0131760
f0103614:	e8 18 d8 ff ff       	call   f0100e31 <cprintf>
f0103619:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010361c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103621:	c9                   	leave  
f0103622:	c3                   	ret    

f0103623 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103623:	55                   	push   %ebp
f0103624:	89 e5                	mov    %esp,%ebp
f0103626:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0103629:	83 ec 0c             	sub    $0xc,%esp
f010362c:	6a 00                	push   $0x0
f010362e:	e8 d2 a1 00 00       	call   f010d805 <enableBuffering>
f0103633:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0103636:	83 ec 0c             	sub    $0xc,%esp
f0103639:	6a 00                	push   $0x0
f010363b:	e8 ad a1 00 00       	call   f010d7ed <enableModifiedBuffer>
f0103640:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103643:	83 ec 0c             	sub    $0xc,%esp
f0103646:	68 80 17 13 f0       	push   $0xf0131780
f010364b:	e8 e1 d7 ff ff       	call   f0100e31 <cprintf>
f0103650:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103653:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103658:	c9                   	leave  
f0103659:	c3                   	ret    

f010365a <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010365a:	55                   	push   %ebp
f010365b:	89 e5                	mov    %esp,%ebp
f010365d:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103660:	83 ec 0c             	sub    $0xc,%esp
f0103663:	6a 01                	push   $0x1
f0103665:	e8 9b a1 00 00       	call   f010d805 <enableBuffering>
f010366a:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010366d:	83 ec 0c             	sub    $0xc,%esp
f0103670:	6a 01                	push   $0x1
f0103672:	e8 76 a1 00 00       	call   f010d7ed <enableModifiedBuffer>
f0103677:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010367a:	e8 ac a1 00 00       	call   f010d82b <getModifiedBufferLength>
f010367f:	85 c0                	test   %eax,%eax
f0103681:	75 59                	jne    f01036dc <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103683:	83 ec 0c             	sub    $0xc,%esp
f0103686:	68 9c 17 13 f0       	push   $0xf013179c
f010368b:	e8 a1 d7 ff ff       	call   f0100e31 <cprintf>
f0103690:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103699:	50                   	push   %eax
f010369a:	68 cc 17 13 f0       	push   $0xf01317cc
f010369f:	e8 64 b5 02 00       	call   f012ec08 <readline>
f01036a4:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01036a7:	83 ec 04             	sub    $0x4,%esp
f01036aa:	6a 0a                	push   $0xa
f01036ac:	6a 00                	push   $0x0
f01036ae:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01036b1:	50                   	push   %eax
f01036b2:	e8 b7 ba 02 00       	call   f012f16e <strtol>
f01036b7:	83 c4 10             	add    $0x10,%esp
f01036ba:	83 ec 0c             	sub    $0xc,%esp
f01036bd:	50                   	push   %eax
f01036be:	e8 5a a1 00 00       	call   f010d81d <setModifiedBufferLength>
f01036c3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036c6:	e8 60 a1 00 00       	call   f010d82b <getModifiedBufferLength>
f01036cb:	83 ec 08             	sub    $0x8,%esp
f01036ce:	50                   	push   %eax
f01036cf:	68 f8 17 13 f0       	push   $0xf01317f8
f01036d4:	e8 58 d7 ff ff       	call   f0100e31 <cprintf>
f01036d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01036dc:	83 ec 0c             	sub    $0xc,%esp
f01036df:	68 1d 18 13 f0       	push   $0xf013181d
f01036e4:	e8 48 d7 ff ff       	call   f0100e31 <cprintf>
f01036e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01036f9:	e8 15 a1 00 00       	call   f010d813 <isBufferingEnabled>
f01036fe:	84 c0                	test   %al,%al
f0103700:	75 12                	jne    f0103714 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103702:	83 ec 0c             	sub    $0xc,%esp
f0103705:	68 38 18 13 f0       	push   $0xf0131838
f010370a:	e8 22 d7 ff ff       	call   f0100e31 <cprintf>
f010370f:	83 c4 10             	add    $0x10,%esp
f0103712:	eb 19                	jmp    f010372d <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103714:	e8 e2 a0 00 00       	call   f010d7fb <isModifiedBufferEnabled>
f0103719:	84 c0                	test   %al,%al
f010371b:	75 10                	jne    f010372d <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010371d:	83 ec 0c             	sub    $0xc,%esp
f0103720:	68 88 18 13 f0       	push   $0xf0131888
f0103725:	e8 07 d7 ff ff       	call   f0100e31 <cprintf>
f010372a:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010372d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103730:	83 c0 04             	add    $0x4,%eax
f0103733:	8b 00                	mov    (%eax),%eax
f0103735:	83 ec 04             	sub    $0x4,%esp
f0103738:	6a 0a                	push   $0xa
f010373a:	6a 00                	push   $0x0
f010373c:	50                   	push   %eax
f010373d:	e8 2c ba 02 00       	call   f012f16e <strtol>
f0103742:	83 c4 10             	add    $0x10,%esp
f0103745:	83 ec 0c             	sub    $0xc,%esp
f0103748:	50                   	push   %eax
f0103749:	e8 cf a0 00 00       	call   f010d81d <setModifiedBufferLength>
f010374e:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103751:	e8 d5 a0 00 00       	call   f010d82b <getModifiedBufferLength>
f0103756:	83 ec 08             	sub    $0x8,%esp
f0103759:	50                   	push   %eax
f010375a:	68 f8 17 13 f0       	push   $0xf01317f8
f010375f:	e8 cd d6 ff ff       	call   f0100e31 <cprintf>
f0103764:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010376c:	c9                   	leave  
f010376d:	c3                   	ret    

f010376e <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010376e:	55                   	push   %ebp
f010376f:	89 e5                	mov    %esp,%ebp
f0103771:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103774:	e8 9a a0 00 00       	call   f010d813 <isBufferingEnabled>
f0103779:	84 c0                	test   %al,%al
f010377b:	75 12                	jne    f010378f <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010377d:	83 ec 0c             	sub    $0xc,%esp
f0103780:	68 38 18 13 f0       	push   $0xf0131838
f0103785:	e8 a7 d6 ff ff       	call   f0100e31 <cprintf>
f010378a:	83 c4 10             	add    $0x10,%esp
f010378d:	eb 19                	jmp    f01037a8 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010378f:	e8 67 a0 00 00       	call   f010d7fb <isModifiedBufferEnabled>
f0103794:	84 c0                	test   %al,%al
f0103796:	75 10                	jne    f01037a8 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103798:	83 ec 0c             	sub    $0xc,%esp
f010379b:	68 88 18 13 f0       	push   $0xf0131888
f01037a0:	e8 8c d6 ff ff       	call   f0100e31 <cprintf>
f01037a5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01037a8:	e8 7e a0 00 00       	call   f010d82b <getModifiedBufferLength>
f01037ad:	83 ec 08             	sub    $0x8,%esp
f01037b0:	50                   	push   %eax
f01037b1:	68 ce 18 13 f0       	push   $0xf01318ce
f01037b6:	e8 76 d6 ff ff       	call   f0100e31 <cprintf>
f01037bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037c3:	c9                   	leave  
f01037c4:	c3                   	ret    

f01037c5 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01037c5:	55                   	push   %ebp
f01037c6:	89 e5                	mov    %esp,%ebp
f01037c8:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01037cb:	83 ec 08             	sub    $0x8,%esp
f01037ce:	ff 75 0c             	pushl  0xc(%ebp)
f01037d1:	ff 75 08             	pushl  0x8(%ebp)
f01037d4:	e8 98 a4 00 00       	call   f010dc71 <tst_handler>
f01037d9:	83 c4 10             	add    $0x10,%esp
}
f01037dc:	c9                   	leave  
f01037dd:	c3                   	ret    

f01037de <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01037de:	55                   	push   %ebp
f01037df:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01037e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01037e4:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f01037ea:	29 d0                	sub    %edx,%eax
f01037ec:	c1 f8 02             	sar    $0x2,%eax
f01037ef:	89 c2                	mov    %eax,%edx
f01037f1:	89 d0                	mov    %edx,%eax
f01037f3:	c1 e0 03             	shl    $0x3,%eax
f01037f6:	01 d0                	add    %edx,%eax
f01037f8:	c1 e0 03             	shl    $0x3,%eax
f01037fb:	01 d0                	add    %edx,%eax
f01037fd:	c1 e0 03             	shl    $0x3,%eax
f0103800:	01 d0                	add    %edx,%eax
f0103802:	c1 e0 03             	shl    $0x3,%eax
f0103805:	01 d0                	add    %edx,%eax
f0103807:	89 c1                	mov    %eax,%ecx
f0103809:	c1 e1 0f             	shl    $0xf,%ecx
f010380c:	01 c8                	add    %ecx,%eax
f010380e:	c1 e0 03             	shl    $0x3,%eax
f0103811:	01 d0                	add    %edx,%eax
f0103813:	f7 d8                	neg    %eax
}
f0103815:	5d                   	pop    %ebp
f0103816:	c3                   	ret    

f0103817 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103817:	55                   	push   %ebp
f0103818:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010381a:	ff 75 08             	pushl  0x8(%ebp)
f010381d:	e8 bc ff ff ff       	call   f01037de <to_frame_number>
f0103822:	83 c4 04             	add    $0x4,%esp
f0103825:	c1 e0 0c             	shl    $0xc,%eax
}
f0103828:	c9                   	leave  
f0103829:	c3                   	ret    

f010382a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010382a:	55                   	push   %ebp
f010382b:	89 e5                	mov    %esp,%ebp
f010382d:	53                   	push   %ebx
f010382e:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103831:	8b 45 08             	mov    0x8(%ebp),%eax
f0103834:	c1 e8 0c             	shr    $0xc,%eax
f0103837:	89 c2                	mov    %eax,%edx
f0103839:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010383e:	39 c2                	cmp    %eax,%edx
f0103840:	72 14                	jb     f0103856 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103842:	83 ec 04             	sub    $0x4,%esp
f0103845:	68 ec 18 13 f0       	push   $0xf01318ec
f010384a:	6a 55                	push   $0x55
f010384c:	68 14 19 13 f0       	push   $0xf0131914
f0103851:	e8 5a c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0103856:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f010385c:	8b 45 08             	mov    0x8(%ebp),%eax
f010385f:	c1 e8 0c             	shr    $0xc,%eax
f0103862:	89 c2                	mov    %eax,%edx
f0103864:	89 d0                	mov    %edx,%eax
f0103866:	01 c0                	add    %eax,%eax
f0103868:	01 d0                	add    %edx,%eax
f010386a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103871:	01 d8                	add    %ebx,%eax
f0103873:	01 d0                	add    %edx,%eax
f0103875:	01 c8                	add    %ecx,%eax
}
f0103877:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010387a:	c9                   	leave  
f010387b:	c3                   	ret    

f010387c <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010387c:	55                   	push   %ebp
f010387d:	89 e5                	mov    %esp,%ebp
f010387f:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103882:	8b 45 08             	mov    0x8(%ebp),%eax
f0103885:	05 00 14 00 00       	add    $0x1400,%eax
f010388a:	c1 e0 03             	shl    $0x3,%eax
f010388d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103890:	83 ec 04             	sub    $0x4,%esp
f0103893:	6a 08                	push   $0x8
f0103895:	ff 75 0c             	pushl  0xc(%ebp)
f0103898:	ff 75 f4             	pushl  -0xc(%ebp)
f010389b:	e8 29 bd 02 00       	call   f012f5c9 <ide_read>
f01038a0:	83 c4 10             	add    $0x10,%esp
f01038a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01038a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038a9:	c9                   	leave  
f01038aa:	c3                   	ret    

f01038ab <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01038ab:	55                   	push   %ebp
f01038ac:	89 e5                	mov    %esp,%ebp
f01038ae:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01038b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b4:	05 00 14 00 00       	add    $0x1400,%eax
f01038b9:	c1 e0 03             	shl    $0x3,%eax
f01038bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01038bf:	83 ec 04             	sub    $0x4,%esp
f01038c2:	6a 08                	push   $0x8
f01038c4:	ff 75 0c             	pushl  0xc(%ebp)
f01038c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01038ca:	e8 3a be 02 00       	call   f012f709 <ide_write>
f01038cf:	83 c4 10             	add    $0x10,%esp
f01038d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01038d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038d9:	74 14                	je     f01038ef <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01038db:	83 ec 04             	sub    $0x4,%esp
f01038de:	68 36 19 13 f0       	push   $0xf0131936
f01038e3:	6a 2e                	push   $0x2e
f01038e5:	68 4d 19 13 f0       	push   $0xf013194d
f01038ea:	e8 c1 c8 ff ff       	call   f01001b0 <_panic>
	return success;
f01038ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038f2:	c9                   	leave  
f01038f3:	c3                   	ret    

f01038f4 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01038f4:	55                   	push   %ebp
f01038f5:	89 e5                	mov    %esp,%ebp
f01038f7:	56                   	push   %esi
f01038f8:	53                   	push   %ebx
f01038f9:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01038fc:	c7 05 64 a3 2d f0 00 	movl   $0x0,0xf02da364
f0103903:	00 00 00 
f0103906:	c7 05 68 a3 2d f0 00 	movl   $0x0,0xf02da368
f010390d:	00 00 00 
f0103910:	c7 05 70 a3 2d f0 00 	movl   $0x0,0xf02da370
f0103917:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010391a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103921:	e9 20 01 00 00       	jmp    f0103a46 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103926:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f010392c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392f:	89 d0                	mov    %edx,%eax
f0103931:	01 c0                	add    %eax,%eax
f0103933:	01 d0                	add    %edx,%eax
f0103935:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010393c:	01 d8                	add    %ebx,%eax
f010393e:	01 d0                	add    %edx,%eax
f0103940:	01 c8                	add    %ecx,%eax
f0103942:	83 ec 0c             	sub    $0xc,%esp
f0103945:	50                   	push   %eax
f0103946:	e8 bf 39 00 00       	call   f010730a <initialize_frame_info>
f010394b:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010394e:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103954:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103957:	89 d0                	mov    %edx,%eax
f0103959:	01 c0                	add    %eax,%eax
f010395b:	01 d0                	add    %edx,%eax
f010395d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103964:	01 d8                	add    %ebx,%eax
f0103966:	01 d0                	add    %edx,%eax
f0103968:	01 c8                	add    %ecx,%eax
f010396a:	85 c0                	test   %eax,%eax
f010396c:	75 14                	jne    f0103982 <initialize_disk_page_file+0x8e>
f010396e:	83 ec 04             	sub    $0x4,%esp
f0103971:	68 6c 19 13 f0       	push   $0xf013196c
f0103976:	6a 59                	push   $0x59
f0103978:	68 4d 19 13 f0       	push   $0xf013194d
f010397d:	e8 2e c8 ff ff       	call   f01001b0 <_panic>
f0103982:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103988:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010398b:	89 d0                	mov    %edx,%eax
f010398d:	01 c0                	add    %eax,%eax
f010398f:	01 d0                	add    %edx,%eax
f0103991:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103998:	01 d8                	add    %ebx,%eax
f010399a:	01 d0                	add    %edx,%eax
f010399c:	01 c8                	add    %ecx,%eax
f010399e:	8b 15 64 a3 2d f0    	mov    0xf02da364,%edx
f01039a4:	89 10                	mov    %edx,(%eax)
f01039a6:	8b 00                	mov    (%eax),%eax
f01039a8:	85 c0                	test   %eax,%eax
f01039aa:	74 27                	je     f01039d3 <initialize_disk_page_file+0xdf>
f01039ac:	8b 0d 64 a3 2d f0    	mov    0xf02da364,%ecx
f01039b2:	8b 1d 30 3b 25 f0    	mov    0xf0253b30,%ebx
f01039b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039bb:	89 d0                	mov    %edx,%eax
f01039bd:	01 c0                	add    %eax,%eax
f01039bf:	01 d0                	add    %edx,%eax
f01039c1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01039c8:	01 f0                	add    %esi,%eax
f01039ca:	01 d0                	add    %edx,%eax
f01039cc:	01 d8                	add    %ebx,%eax
f01039ce:	89 41 04             	mov    %eax,0x4(%ecx)
f01039d1:	eb 21                	jmp    f01039f4 <initialize_disk_page_file+0x100>
f01039d3:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f01039d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039dc:	89 d0                	mov    %edx,%eax
f01039de:	01 c0                	add    %eax,%eax
f01039e0:	01 d0                	add    %edx,%eax
f01039e2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039e9:	01 d8                	add    %ebx,%eax
f01039eb:	01 d0                	add    %edx,%eax
f01039ed:	01 c8                	add    %ecx,%eax
f01039ef:	a3 68 a3 2d f0       	mov    %eax,0xf02da368
f01039f4:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f01039fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039fd:	89 d0                	mov    %edx,%eax
f01039ff:	01 c0                	add    %eax,%eax
f0103a01:	01 d0                	add    %edx,%eax
f0103a03:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a0a:	01 d8                	add    %ebx,%eax
f0103a0c:	01 d0                	add    %edx,%eax
f0103a0e:	01 c8                	add    %ecx,%eax
f0103a10:	a3 64 a3 2d f0       	mov    %eax,0xf02da364
f0103a15:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a1e:	89 d0                	mov    %edx,%eax
f0103a20:	01 c0                	add    %eax,%eax
f0103a22:	01 d0                	add    %edx,%eax
f0103a24:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a2b:	01 d8                	add    %ebx,%eax
f0103a2d:	01 d0                	add    %edx,%eax
f0103a2f:	01 c8                	add    %ecx,%eax
f0103a31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a38:	a1 70 a3 2d f0       	mov    0xf02da370,%eax
f0103a3d:	40                   	inc    %eax
f0103a3e:	a3 70 a3 2d f0       	mov    %eax,0xf02da370
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103a43:	ff 45 f4             	incl   -0xc(%ebp)
f0103a46:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103a4d:	0f 8e d3 fe ff ff    	jle    f0103926 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103a53:	90                   	nop
f0103a54:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103a57:	5b                   	pop    %ebx
f0103a58:	5e                   	pop    %esi
f0103a59:	5d                   	pop    %ebp
f0103a5a:	c3                   	ret    

f0103a5b <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a5b:	55                   	push   %ebp
f0103a5c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a61:	8b 15 30 3b 25 f0    	mov    0xf0253b30,%edx
f0103a67:	29 d0                	sub    %edx,%eax
f0103a69:	c1 f8 02             	sar    $0x2,%eax
f0103a6c:	89 c2                	mov    %eax,%edx
f0103a6e:	89 d0                	mov    %edx,%eax
f0103a70:	c1 e0 03             	shl    $0x3,%eax
f0103a73:	01 d0                	add    %edx,%eax
f0103a75:	c1 e0 03             	shl    $0x3,%eax
f0103a78:	01 d0                	add    %edx,%eax
f0103a7a:	c1 e0 03             	shl    $0x3,%eax
f0103a7d:	01 d0                	add    %edx,%eax
f0103a7f:	c1 e0 03             	shl    $0x3,%eax
f0103a82:	01 d0                	add    %edx,%eax
f0103a84:	89 c1                	mov    %eax,%ecx
f0103a86:	c1 e1 0f             	shl    $0xf,%ecx
f0103a89:	01 c8                	add    %ecx,%eax
f0103a8b:	c1 e0 03             	shl    $0x3,%eax
f0103a8e:	01 d0                	add    %edx,%eax
f0103a90:	f7 d8                	neg    %eax
}
f0103a92:	5d                   	pop    %ebp
f0103a93:	c3                   	ret    

f0103a94 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a94:	55                   	push   %ebp
f0103a95:	89 e5                	mov    %esp,%ebp
f0103a97:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a9a:	a1 64 a3 2d f0       	mov    0xf02da364,%eax
f0103a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103aa6:	75 0a                	jne    f0103ab2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103aa8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103aad:	e9 a7 00 00 00       	jmp    f0103b59 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103ab2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ab6:	75 14                	jne    f0103acc <allocate_disk_frame+0x38>
f0103ab8:	83 ec 04             	sub    $0x4,%esp
f0103abb:	68 8f 19 13 f0       	push   $0xf013198f
f0103ac0:	6a 78                	push   $0x78
f0103ac2:	68 4d 19 13 f0       	push   $0xf013194d
f0103ac7:	e8 e4 c6 ff ff       	call   f01001b0 <_panic>
f0103acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103acf:	8b 00                	mov    (%eax),%eax
f0103ad1:	85 c0                	test   %eax,%eax
f0103ad3:	74 10                	je     f0103ae5 <allocate_disk_frame+0x51>
f0103ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ad8:	8b 00                	mov    (%eax),%eax
f0103ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103add:	8b 52 04             	mov    0x4(%edx),%edx
f0103ae0:	89 50 04             	mov    %edx,0x4(%eax)
f0103ae3:	eb 0b                	jmp    f0103af0 <allocate_disk_frame+0x5c>
f0103ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ae8:	8b 40 04             	mov    0x4(%eax),%eax
f0103aeb:	a3 68 a3 2d f0       	mov    %eax,0xf02da368
f0103af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103af3:	8b 40 04             	mov    0x4(%eax),%eax
f0103af6:	85 c0                	test   %eax,%eax
f0103af8:	74 0f                	je     f0103b09 <allocate_disk_frame+0x75>
f0103afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103afd:	8b 40 04             	mov    0x4(%eax),%eax
f0103b00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b03:	8b 12                	mov    (%edx),%edx
f0103b05:	89 10                	mov    %edx,(%eax)
f0103b07:	eb 0a                	jmp    f0103b13 <allocate_disk_frame+0x7f>
f0103b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b0c:	8b 00                	mov    (%eax),%eax
f0103b0e:	a3 64 a3 2d f0       	mov    %eax,0xf02da364
f0103b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b26:	a1 70 a3 2d f0       	mov    0xf02da370,%eax
f0103b2b:	48                   	dec    %eax
f0103b2c:	a3 70 a3 2d f0       	mov    %eax,0xf02da370
	initialize_frame_info(ptr_frame_info);
f0103b31:	83 ec 0c             	sub    $0xc,%esp
f0103b34:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b37:	e8 ce 37 00 00       	call   f010730a <initialize_frame_info>
f0103b3c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103b3f:	83 ec 0c             	sub    $0xc,%esp
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 11 ff ff ff       	call   f0103a5b <to_disk_frame_number>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 c2                	mov    %eax,%edx
f0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b52:	89 10                	mov    %edx,(%eax)
	return 0;
f0103b54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103b59:	c9                   	leave  
f0103b5a:	c3                   	ret    

f0103b5b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103b5b:	55                   	push   %ebp
f0103b5c:	89 e5                	mov    %esp,%ebp
f0103b5e:	56                   	push   %esi
f0103b5f:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b64:	0f 84 fa 00 00 00    	je     f0103c64 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b6a:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103b70:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b73:	89 d0                	mov    %edx,%eax
f0103b75:	01 c0                	add    %eax,%eax
f0103b77:	01 d0                	add    %edx,%eax
f0103b79:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b80:	01 d8                	add    %ebx,%eax
f0103b82:	01 d0                	add    %edx,%eax
f0103b84:	01 c8                	add    %ecx,%eax
f0103b86:	85 c0                	test   %eax,%eax
f0103b88:	75 17                	jne    f0103ba1 <free_disk_frame+0x46>
f0103b8a:	83 ec 04             	sub    $0x4,%esp
f0103b8d:	68 6c 19 13 f0       	push   $0xf013196c
f0103b92:	68 85 00 00 00       	push   $0x85
f0103b97:	68 4d 19 13 f0       	push   $0xf013194d
f0103b9c:	e8 0f c6 ff ff       	call   f01001b0 <_panic>
f0103ba1:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103ba7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103baa:	89 d0                	mov    %edx,%eax
f0103bac:	01 c0                	add    %eax,%eax
f0103bae:	01 d0                	add    %edx,%eax
f0103bb0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bb7:	01 d8                	add    %ebx,%eax
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	01 c8                	add    %ecx,%eax
f0103bbd:	8b 15 64 a3 2d f0    	mov    0xf02da364,%edx
f0103bc3:	89 10                	mov    %edx,(%eax)
f0103bc5:	8b 00                	mov    (%eax),%eax
f0103bc7:	85 c0                	test   %eax,%eax
f0103bc9:	74 27                	je     f0103bf2 <free_disk_frame+0x97>
f0103bcb:	8b 0d 64 a3 2d f0    	mov    0xf02da364,%ecx
f0103bd1:	8b 1d 30 3b 25 f0    	mov    0xf0253b30,%ebx
f0103bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bda:	89 d0                	mov    %edx,%eax
f0103bdc:	01 c0                	add    %eax,%eax
f0103bde:	01 d0                	add    %edx,%eax
f0103be0:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103be7:	01 f0                	add    %esi,%eax
f0103be9:	01 d0                	add    %edx,%eax
f0103beb:	01 d8                	add    %ebx,%eax
f0103bed:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bf0:	eb 21                	jmp    f0103c13 <free_disk_frame+0xb8>
f0103bf2:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103bf8:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bfb:	89 d0                	mov    %edx,%eax
f0103bfd:	01 c0                	add    %eax,%eax
f0103bff:	01 d0                	add    %edx,%eax
f0103c01:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c08:	01 d8                	add    %ebx,%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	01 c8                	add    %ecx,%eax
f0103c0e:	a3 68 a3 2d f0       	mov    %eax,0xf02da368
f0103c13:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103c19:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c1c:	89 d0                	mov    %edx,%eax
f0103c1e:	01 c0                	add    %eax,%eax
f0103c20:	01 d0                	add    %edx,%eax
f0103c22:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c29:	01 d8                	add    %ebx,%eax
f0103c2b:	01 d0                	add    %edx,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	a3 64 a3 2d f0       	mov    %eax,0xf02da364
f0103c34:	8b 0d 30 3b 25 f0    	mov    0xf0253b30,%ecx
f0103c3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c3d:	89 d0                	mov    %edx,%eax
f0103c3f:	01 c0                	add    %eax,%eax
f0103c41:	01 d0                	add    %edx,%eax
f0103c43:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c4a:	01 d8                	add    %ebx,%eax
f0103c4c:	01 d0                	add    %edx,%eax
f0103c4e:	01 c8                	add    %ecx,%eax
f0103c50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c57:	a1 70 a3 2d f0       	mov    0xf02da370,%eax
f0103c5c:	40                   	inc    %eax
f0103c5d:	a3 70 a3 2d f0       	mov    %eax,0xf02da370
f0103c62:	eb 01                	jmp    f0103c65 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c64:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c65:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c68:	5b                   	pop    %ebx
f0103c69:	5e                   	pop    %esi
f0103c6a:	5d                   	pop    %ebp
f0103c6b:	c3                   	ret    

f0103c6c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c6c:	55                   	push   %ebp
f0103c6d:	89 e5                	mov    %esp,%ebp
f0103c6f:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c75:	c1 e8 16             	shr    $0x16,%eax
f0103c78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	8b 00                	mov    (%eax),%eax
f0103c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c97:	c1 e8 0c             	shr    $0xc,%eax
f0103c9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c9d:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0103ca2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ca5:	72 17                	jb     f0103cbe <get_disk_page_table+0x52>
f0103ca7:	ff 75 f0             	pushl  -0x10(%ebp)
f0103caa:	68 b0 19 13 f0       	push   $0xf01319b0
f0103caf:	68 92 00 00 00       	push   $0x92
f0103cb4:	68 4d 19 13 f0       	push   $0xf013194d
f0103cb9:	e8 f2 c4 ff ff       	call   f01001b0 <_panic>
f0103cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103cc6:	89 c2                	mov    %eax,%edx
f0103cc8:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ccb:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103ccd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cd1:	0f 85 b7 00 00 00    	jne    f0103d8e <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103cd7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103cdb:	0f 84 9d 00 00 00    	je     f0103d7e <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103ce7:	50                   	push   %eax
f0103ce8:	e8 38 36 00 00       	call   f0107325 <allocate_frame>
f0103ced:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103cf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103cf3:	83 ec 0c             	sub    $0xc,%esp
f0103cf6:	50                   	push   %eax
f0103cf7:	e8 1b fb ff ff       	call   f0103817 <to_physical_address>
f0103cfc:	83 c4 10             	add    $0x10,%esp
f0103cff:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103d08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d0b:	c1 e8 0c             	shr    $0xc,%eax
f0103d0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103d11:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0103d16:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103d19:	72 17                	jb     f0103d32 <get_disk_page_table+0xc6>
f0103d1b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103d1e:	68 b0 19 13 f0       	push   $0xf01319b0
f0103d23:	68 ae 00 00 00       	push   $0xae
f0103d28:	68 4d 19 13 f0       	push   $0xf013194d
f0103d2d:	e8 7e c4 ff ff       	call   f01001b0 <_panic>
f0103d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d3a:	89 c2                	mov    %eax,%edx
f0103d3c:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d3f:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103d44:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d4d:	c1 e8 16             	shr    $0x16,%eax
f0103d50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	01 d0                	add    %edx,%eax
f0103d5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d5f:	83 ca 01             	or     $0x1,%edx
f0103d62:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d64:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	83 ec 04             	sub    $0x4,%esp
f0103d6c:	68 00 10 00 00       	push   $0x1000
f0103d71:	6a 00                	push   $0x0
f0103d73:	50                   	push   %eax
f0103d74:	e8 83 b2 02 00       	call   f012effc <memset>
f0103d79:	83 c4 10             	add    $0x10,%esp
f0103d7c:	eb 10                	jmp    f0103d8e <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d7e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d87:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d8c:	eb 05                	jmp    f0103d93 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d93:	c9                   	leave  
f0103d94:	c3                   	ret    

f0103d95 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d95:	55                   	push   %ebp
f0103d96:	89 e5                	mov    %esp,%ebp
f0103d98:	83 ec 28             	sub    $0x28,%esp
f0103d9b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d9e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103da1:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103da5:	74 75                	je     f0103e1c <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103da7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103db1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103dc1:	f7 75 f4             	divl   -0xc(%ebp)
f0103dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dc7:	29 d0                	sub    %edx,%eax
f0103dc9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dcc:	73 32                	jae    f0103e00 <pf_add_empty_env_page+0x6b>
f0103dce:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd1:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103dd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ddc:	29 d0                	sub    %edx,%eax
f0103dde:	c1 e0 0c             	shl    $0xc,%eax
f0103de1:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103de6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103de9:	76 15                	jbe    f0103e00 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dee:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103df4:	8d 50 01             	lea    0x1(%eax),%edx
f0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfa:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103e00:	a1 fc be 2b f0       	mov    0xf02bbefc,%eax
f0103e05:	83 ec 04             	sub    $0x4,%esp
f0103e08:	50                   	push   %eax
f0103e09:	ff 75 0c             	pushl  0xc(%ebp)
f0103e0c:	ff 75 08             	pushl  0x8(%ebp)
f0103e0f:	e8 b7 00 00 00       	call   f0103ecb <pf_add_env_page>
f0103e14:	83 c4 10             	add    $0x10,%esp
f0103e17:	e9 ad 00 00 00       	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e1c:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e23:	76 19                	jbe    f0103e3e <pf_add_empty_env_page+0xa9>
f0103e25:	68 e0 19 13 f0       	push   $0xf01319e0
f0103e2a:	68 06 1a 13 f0       	push   $0xf0131a06
f0103e2f:	68 d1 00 00 00       	push   $0xd1
f0103e34:	68 4d 19 13 f0       	push   $0xf013194d
f0103e39:	e8 72 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e41:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e46:	83 ec 08             	sub    $0x8,%esp
f0103e49:	50                   	push   %eax
f0103e4a:	ff 75 08             	pushl  0x8(%ebp)
f0103e4d:	e8 86 06 00 00       	call   f01044d8 <get_disk_page_directory>
f0103e52:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e58:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e5e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e61:	52                   	push   %edx
f0103e62:	6a 01                	push   $0x1
f0103e64:	ff 75 0c             	pushl  0xc(%ebp)
f0103e67:	50                   	push   %eax
f0103e68:	e8 ff fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103e6d:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e76:	c1 ea 0c             	shr    $0xc,%edx
f0103e79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e7f:	c1 e2 02             	shl    $0x2,%edx
f0103e82:	01 d0                	add    %edx,%eax
f0103e84:	8b 00                	mov    (%eax),%eax
f0103e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e8c:	85 c0                	test   %eax,%eax
f0103e8e:	75 34                	jne    f0103ec4 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e90:	83 ec 0c             	sub    $0xc,%esp
f0103e93:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e96:	50                   	push   %eax
f0103e97:	e8 f8 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ea2:	75 07                	jne    f0103eab <pf_add_empty_env_page+0x116>
f0103ea4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103ea9:	eb 1e                	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	c1 ea 0c             	shr    $0xc,%edx
f0103eb4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103eba:	c1 e2 02             	shl    $0x2,%edx
f0103ebd:	01 c2                	add    %eax,%edx
f0103ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ec2:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103ec4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103ec9:	c9                   	leave  
f0103eca:	c3                   	ret    

f0103ecb <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103ecb:	55                   	push   %ebp
f0103ecc:	89 e5                	mov    %esp,%ebp
f0103ece:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103ed1:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103ed8:	76 19                	jbe    f0103ef3 <pf_add_env_page+0x28>
f0103eda:	68 e0 19 13 f0       	push   $0xf01319e0
f0103edf:	68 06 1a 13 f0       	push   $0xf0131a06
f0103ee4:	68 e6 00 00 00       	push   $0xe6
f0103ee9:	68 4d 19 13 f0       	push   $0xf013194d
f0103eee:	e8 bd c2 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef6:	05 a8 00 00 00       	add    $0xa8,%eax
f0103efb:	83 ec 08             	sub    $0x8,%esp
f0103efe:	50                   	push   %eax
f0103eff:	ff 75 08             	pushl  0x8(%ebp)
f0103f02:	e8 d1 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103f07:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f0d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f13:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f16:	52                   	push   %edx
f0103f17:	6a 01                	push   $0x1
f0103f19:	ff 75 0c             	pushl  0xc(%ebp)
f0103f1c:	50                   	push   %eax
f0103f1d:	e8 4a fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103f22:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f28:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2b:	c1 ea 0c             	shr    $0xc,%edx
f0103f2e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f34:	c1 e2 02             	shl    $0x2,%edx
f0103f37:	01 d0                	add    %edx,%eax
f0103f39:	8b 00                	mov    (%eax),%eax
f0103f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f41:	85 c0                	test   %eax,%eax
f0103f43:	75 34                	jne    f0103f79 <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f45:	83 ec 0c             	sub    $0xc,%esp
f0103f48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103f4b:	50                   	push   %eax
f0103f4c:	e8 43 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103f51:	83 c4 10             	add    $0x10,%esp
f0103f54:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f57:	75 07                	jne    f0103f60 <pf_add_env_page+0x95>
f0103f59:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f5e:	eb 31                	jmp    f0103f91 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f63:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f66:	c1 ea 0c             	shr    $0xc,%edx
f0103f69:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f6f:	c1 e2 02             	shl    $0x2,%edx
f0103f72:	01 c2                	add    %eax,%edx
f0103f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f77:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f7c:	83 ec 08             	sub    $0x8,%esp
f0103f7f:	ff 75 10             	pushl  0x10(%ebp)
f0103f82:	50                   	push   %eax
f0103f83:	e8 23 f9 ff ff       	call   f01038ab <write_disk_page>
f0103f88:	83 c4 10             	add    $0x10,%esp
f0103f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f91:	c9                   	leave  
f0103f92:	c3                   	ret    

f0103f93 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f93:	55                   	push   %ebp
f0103f94:	89 e5                	mov    %esp,%ebp
f0103f96:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f99:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103fa0:	76 19                	jbe    f0103fbb <pf_update_env_page+0x28>
f0103fa2:	68 e0 19 13 f0       	push   $0xf01319e0
f0103fa7:	68 06 1a 13 f0       	push   $0xf0131a06
f0103fac:	68 08 01 00 00       	push   $0x108
f0103fb1:	68 4d 19 13 f0       	push   $0xf013194d
f0103fb6:	e8 f5 c1 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbe:	05 a8 00 00 00       	add    $0xa8,%eax
f0103fc3:	83 ec 08             	sub    $0x8,%esp
f0103fc6:	50                   	push   %eax
f0103fc7:	ff 75 08             	pushl  0x8(%ebp)
f0103fca:	e8 09 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103fcf:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fd5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103fdb:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103fde:	52                   	push   %edx
f0103fdf:	6a 00                	push   $0x0
f0103fe1:	ff 75 0c             	pushl  0xc(%ebp)
f0103fe4:	50                   	push   %eax
f0103fe5:	e8 82 fc ff ff       	call   f0103c6c <get_disk_page_table>
f0103fea:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103fed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff0:	85 c0                	test   %eax,%eax
f0103ff2:	74 29                	je     f010401d <pf_update_env_page+0x8a>
f0103ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff7:	85 c0                	test   %eax,%eax
f0103ff9:	0f 84 46 01 00 00    	je     f0104145 <pf_update_env_page+0x1b2>
f0103fff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104002:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104005:	c1 ea 0c             	shr    $0xc,%edx
f0104008:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010400e:	c1 e2 02             	shl    $0x2,%edx
f0104011:	01 d0                	add    %edx,%eax
f0104013:	8b 00                	mov    (%eax),%eax
f0104015:	85 c0                	test   %eax,%eax
f0104017:	0f 85 28 01 00 00    	jne    f0104145 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f010401d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104020:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104026:	85 c0                	test   %eax,%eax
f0104028:	79 09                	jns    f0104033 <pf_update_env_page+0xa0>
f010402a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0104031:	76 38                	jbe    f010406b <pf_update_env_page+0xd8>
f0104033:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010403a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010403d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0104042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104048:	ba 00 00 00 00       	mov    $0x0,%edx
f010404d:	f7 75 f0             	divl   -0x10(%ebp)
f0104050:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104053:	29 d0                	sub    %edx,%eax
f0104055:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104058:	0f 87 d0 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
f010405e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104065:	0f 87 c3 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010406b:	8b 45 08             	mov    0x8(%ebp),%eax
f010406e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104074:	83 ec 04             	sub    $0x4,%esp
f0104077:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010407a:	52                   	push   %edx
f010407b:	ff 75 0c             	pushl  0xc(%ebp)
f010407e:	50                   	push   %eax
f010407f:	e8 fb 36 00 00       	call   f010777f <get_frame_info>
f0104084:	83 c4 10             	add    $0x10,%esp
f0104087:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010408a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010408d:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104090:	75 52                	jne    f01040e4 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104092:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104095:	83 ec 04             	sub    $0x4,%esp
f0104098:	50                   	push   %eax
f0104099:	ff 75 f4             	pushl  -0xc(%ebp)
f010409c:	ff 75 08             	pushl  0x8(%ebp)
f010409f:	e8 27 fe ff ff       	call   f0103ecb <pf_add_env_page>
f01040a4:	83 c4 10             	add    $0x10,%esp
f01040a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040aa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040ae:	75 17                	jne    f01040c7 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01040b0:	83 ec 04             	sub    $0x4,%esp
f01040b3:	68 1c 1a 13 f0       	push   $0xf0131a1c
f01040b8:	68 1d 01 00 00       	push   $0x11d
f01040bd:	68 4d 19 13 f0       	push   $0xf013194d
f01040c2:	e8 e9 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ca:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040d0:	8d 50 01             	lea    0x1(%eax),%edx
f01040d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d6:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f01040dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040df:	e9 02 01 00 00       	jmp    f01041e6 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01040e4:	83 ec 04             	sub    $0x4,%esp
f01040e7:	6a 00                	push   $0x0
f01040e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01040ec:	ff 75 08             	pushl  0x8(%ebp)
f01040ef:	e8 a1 fc ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01040f4:	83 c4 10             	add    $0x10,%esp
f01040f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040fa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040fe:	75 17                	jne    f0104117 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0104100:	83 ec 04             	sub    $0x4,%esp
f0104103:	68 48 1a 13 f0       	push   $0xf0131a48
f0104108:	68 28 01 00 00       	push   $0x128
f010410d:	68 4d 19 13 f0       	push   $0xf013194d
f0104112:	e8 99 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0104117:	8b 45 08             	mov    0x8(%ebp),%eax
f010411a:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104120:	8d 50 01             	lea    0x1(%eax),%edx
f0104123:	8b 45 08             	mov    0x8(%ebp),%eax
f0104126:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f010412c:	eb 17                	jmp    f0104145 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010412e:	83 ec 04             	sub    $0x4,%esp
f0104131:	68 94 1a 13 f0       	push   $0xf0131a94
f0104136:	68 2f 01 00 00       	push   $0x12f
f010413b:	68 4d 19 13 f0       	push   $0xf013194d
f0104140:	e8 6b c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104145:	8b 45 08             	mov    0x8(%ebp),%eax
f0104148:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010414e:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0104151:	52                   	push   %edx
f0104152:	6a 00                	push   $0x0
f0104154:	ff 75 0c             	pushl  0xc(%ebp)
f0104157:	50                   	push   %eax
f0104158:	e8 0f fb ff ff       	call   f0103c6c <get_disk_page_table>
f010415d:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104160:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104163:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104166:	c1 ea 0c             	shr    $0xc,%edx
f0104169:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010416f:	c1 e2 02             	shl    $0x2,%edx
f0104172:	01 d0                	add    %edx,%eax
f0104174:	8b 00                	mov    (%eax),%eax
f0104176:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104179:	83 ec 0c             	sub    $0xc,%esp
f010417c:	ff 75 10             	pushl  0x10(%ebp)
f010417f:	e8 93 f6 ff ff       	call   f0103817 <to_physical_address>
f0104184:	83 c4 10             	add    $0x10,%esp
f0104187:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010418a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010418d:	c1 e8 0c             	shr    $0xc,%eax
f0104190:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104193:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0104198:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010419b:	72 17                	jb     f01041b4 <pf_update_env_page+0x221>
f010419d:	ff 75 dc             	pushl  -0x24(%ebp)
f01041a0:	68 b0 19 13 f0       	push   $0xf01319b0
f01041a5:	68 47 01 00 00       	push   $0x147
f01041aa:	68 4d 19 13 f0       	push   $0xf013194d
f01041af:	e8 fc bf ff ff       	call   f01001b0 <_panic>
f01041b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041b7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041bc:	83 ec 08             	sub    $0x8,%esp
f01041bf:	50                   	push   %eax
f01041c0:	ff 75 e0             	pushl  -0x20(%ebp)
f01041c3:	e8 e3 f6 ff ff       	call   f01038ab <write_disk_page>
f01041c8:	83 c4 10             	add    $0x10,%esp
f01041cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01041ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d1:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f01041d7:	8d 50 01             	lea    0x1(%eax),%edx
f01041da:	8b 45 08             	mov    0x8(%ebp),%eax
f01041dd:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f01041e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01041e6:	c9                   	leave  
f01041e7:	c3                   	ret    

f01041e8 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01041e8:	55                   	push   %ebp
f01041e9:	89 e5                	mov    %esp,%ebp
f01041eb:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01041ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01041f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041fc:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104202:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104208:	85 c0                	test   %eax,%eax
f010420a:	75 0a                	jne    f0104216 <pf_read_env_page+0x2e>
f010420c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104211:	e9 96 00 00 00       	jmp    f01042ac <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104216:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104219:	8b 45 08             	mov    0x8(%ebp),%eax
f010421c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104222:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0104225:	51                   	push   %ecx
f0104226:	6a 00                	push   $0x0
f0104228:	52                   	push   %edx
f0104229:	50                   	push   %eax
f010422a:	e8 3d fa ff ff       	call   f0103c6c <get_disk_page_table>
f010422f:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104232:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104235:	85 c0                	test   %eax,%eax
f0104237:	75 07                	jne    f0104240 <pf_read_env_page+0x58>
f0104239:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010423e:	eb 6c                	jmp    f01042ac <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104240:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104243:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104246:	c1 ea 0c             	shr    $0xc,%edx
f0104249:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010424f:	c1 e2 02             	shl    $0x2,%edx
f0104252:	01 d0                	add    %edx,%eax
f0104254:	8b 00                	mov    (%eax),%eax
f0104256:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010425d:	75 07                	jne    f0104266 <pf_read_env_page+0x7e>
f010425f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104264:	eb 46                	jmp    f01042ac <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104266:	83 ec 08             	sub    $0x8,%esp
f0104269:	ff 75 0c             	pushl  0xc(%ebp)
f010426c:	ff 75 f0             	pushl  -0x10(%ebp)
f010426f:	e8 08 f6 ff ff       	call   f010387c <read_disk_page>
f0104274:	83 c4 10             	add    $0x10,%esp
f0104277:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010427a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010427d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104280:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104286:	6a 40                	push   $0x40
f0104288:	6a 00                	push   $0x0
f010428a:	52                   	push   %edx
f010428b:	50                   	push   %eax
f010428c:	e8 8e 3d 00 00       	call   f010801f <pt_set_page_permissions>
f0104291:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104294:	8b 45 08             	mov    0x8(%ebp),%eax
f0104297:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010429d:	8d 50 01             	lea    0x1(%eax),%edx
f01042a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a3:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f01042a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01042ac:	c9                   	leave  
f01042ad:	c3                   	ret    

f01042ae <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01042ae:	55                   	push   %ebp
f01042af:	89 e5                	mov    %esp,%ebp
f01042b1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01042b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01042b7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	74 65                	je     f0104326 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042c4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ca:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01042cd:	52                   	push   %edx
f01042ce:	6a 00                	push   $0x0
f01042d0:	ff 75 0c             	pushl  0xc(%ebp)
f01042d3:	50                   	push   %eax
f01042d4:	e8 93 f9 ff ff       	call   f0103c6c <get_disk_page_table>
f01042d9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01042dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042df:	85 c0                	test   %eax,%eax
f01042e1:	74 46                	je     f0104329 <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e9:	c1 ea 0c             	shr    $0xc,%edx
f01042ec:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042f2:	c1 e2 02             	shl    $0x2,%edx
f01042f5:	01 d0                	add    %edx,%eax
f01042f7:	8b 00                	mov    (%eax),%eax
f01042f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01042fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104302:	c1 ea 0c             	shr    $0xc,%edx
f0104305:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010430b:	c1 e2 02             	shl    $0x2,%edx
f010430e:	01 d0                	add    %edx,%eax
f0104310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104316:	83 ec 0c             	sub    $0xc,%esp
f0104319:	ff 75 f4             	pushl  -0xc(%ebp)
f010431c:	e8 3a f8 ff ff       	call   f0103b5b <free_disk_frame>
f0104321:	83 c4 10             	add    $0x10,%esp
f0104324:	eb 04                	jmp    f010432a <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104326:	90                   	nop
f0104327:	eb 01                	jmp    f010432a <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104329:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010432a:	c9                   	leave  
f010432b:	c3                   	ret    

f010432c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010432c:	55                   	push   %ebp
f010432d:	89 e5                	mov    %esp,%ebp
f010432f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104339:	e9 f7 00 00 00       	jmp    f0104435 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010433e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104341:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010434a:	c1 e2 02             	shl    $0x2,%edx
f010434d:	01 d0                	add    %edx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	83 e0 01             	and    $0x1,%eax
f0104354:	85 c0                	test   %eax,%eax
f0104356:	0f 84 d5 00 00 00    	je     f0104431 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010435c:	8b 45 08             	mov    0x8(%ebp),%eax
f010435f:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104368:	c1 e2 02             	shl    $0x2,%edx
f010436b:	01 d0                	add    %edx,%eax
f010436d:	8b 00                	mov    (%eax),%eax
f010436f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104374:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104377:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010437a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010437d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104380:	c1 e8 0c             	shr    $0xc,%eax
f0104383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104386:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010438b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010438e:	72 17                	jb     f01043a7 <pf_free_env+0x7b>
f0104390:	ff 75 e8             	pushl  -0x18(%ebp)
f0104393:	68 b0 19 13 f0       	push   $0xf01319b0
f0104398:	68 a7 01 00 00       	push   $0x1a7
f010439d:	68 4d 19 13 f0       	push   $0xf013194d
f01043a2:	e8 09 be ff ff       	call   f01001b0 <_panic>
f01043a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01043b9:	eb 3a                	jmp    f01043f5 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01043bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043c8:	01 d0                	add    %edx,%eax
f01043ca:	8b 00                	mov    (%eax),%eax
f01043cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01043cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043dc:	01 d0                	add    %edx,%eax
f01043de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01043e4:	83 ec 0c             	sub    $0xc,%esp
f01043e7:	ff 75 dc             	pushl  -0x24(%ebp)
f01043ea:	e8 6c f7 ff ff       	call   f0103b5b <free_disk_frame>
f01043ef:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043f2:	ff 45 f0             	incl   -0x10(%ebp)
f01043f5:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01043fc:	76 bd                	jbe    f01043bb <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104401:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010440a:	c1 e2 02             	shl    $0x2,%edx
f010440d:	01 d0                	add    %edx,%eax
f010440f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104415:	83 ec 0c             	sub    $0xc,%esp
f0104418:	ff 75 ec             	pushl  -0x14(%ebp)
f010441b:	e8 0a f4 ff ff       	call   f010382a <to_frame_info>
f0104420:	83 c4 10             	add    $0x10,%esp
f0104423:	83 ec 0c             	sub    $0xc,%esp
f0104426:	50                   	push   %eax
f0104427:	e8 8b 30 00 00       	call   f01074b7 <decrement_references>
f010442c:	83 c4 10             	add    $0x10,%esp
f010442f:	eb 01                	jmp    f0104432 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104431:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104432:	ff 45 f4             	incl   -0xc(%ebp)
f0104435:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010443c:	0f 86 fc fe ff ff    	jbe    f010433e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104442:	8b 45 08             	mov    0x8(%ebp),%eax
f0104445:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010444b:	83 ec 0c             	sub    $0xc,%esp
f010444e:	50                   	push   %eax
f010444f:	e8 d6 f3 ff ff       	call   f010382a <to_frame_info>
f0104454:	83 c4 10             	add    $0x10,%esp
f0104457:	83 ec 0c             	sub    $0xc,%esp
f010445a:	50                   	push   %eax
f010445b:	e8 57 30 00 00       	call   f01074b7 <decrement_references>
f0104460:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104463:	8b 45 08             	mov    0x8(%ebp),%eax
f0104466:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010446d:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104470:	8b 45 08             	mov    0x8(%ebp),%eax
f0104473:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010447a:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104486:	85 c0                	test   %eax,%eax
f0104488:	74 4b                	je     f01044d5 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010448a:	83 ec 0c             	sub    $0xc,%esp
f010448d:	ff 75 08             	pushl  0x8(%ebp)
f0104490:	e8 17 04 00 00       	call   f01048ac <__pf_remove_env_all_tables>
f0104495:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104498:	8b 45 08             	mov    0x8(%ebp),%eax
f010449b:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01044a1:	83 ec 0c             	sub    $0xc,%esp
f01044a4:	50                   	push   %eax
f01044a5:	e8 80 f3 ff ff       	call   f010382a <to_frame_info>
f01044aa:	83 c4 10             	add    $0x10,%esp
f01044ad:	83 ec 0c             	sub    $0xc,%esp
f01044b0:	50                   	push   %eax
f01044b1:	e8 01 30 00 00       	call   f01074b7 <decrement_references>
f01044b6:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01044b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01044c3:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01044c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f01044d0:	00 00 00 
f01044d3:	eb 01                	jmp    f01044d6 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f01044d5:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f01044d6:	c9                   	leave  
f01044d7:	c3                   	ret    

f01044d8 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01044d8:	55                   	push   %ebp
f01044d9:	89 e5                	mov    %esp,%ebp
f01044db:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01044de:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e1:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f01044e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ea:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01044ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ef:	8b 00                	mov    (%eax),%eax
f01044f1:	85 c0                	test   %eax,%eax
f01044f3:	0f 85 ad 00 00 00    	jne    f01045a6 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01044f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104500:	83 ec 0c             	sub    $0xc,%esp
f0104503:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104506:	50                   	push   %eax
f0104507:	e8 19 2e 00 00       	call   f0107325 <allocate_frame>
f010450c:	83 c4 10             	add    $0x10,%esp
f010450f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104516:	79 08                	jns    f0104520 <get_disk_page_directory+0x48>
				return r;
f0104518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010451b:	e9 8b 00 00 00       	jmp    f01045ab <get_disk_page_directory+0xd3>
			p->references = 1;
f0104520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104523:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104529:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010452c:	83 ec 0c             	sub    $0xc,%esp
f010452f:	50                   	push   %eax
f0104530:	e8 e2 f2 ff ff       	call   f0103817 <to_physical_address>
f0104535:	83 c4 10             	add    $0x10,%esp
f0104538:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010453b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010453e:	c1 e8 0c             	shr    $0xc,%eax
f0104541:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104544:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0104549:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010454c:	72 17                	jb     f0104565 <get_disk_page_directory+0x8d>
f010454e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104551:	68 b0 19 13 f0       	push   $0xf01319b0
f0104556:	68 ff 01 00 00       	push   $0x1ff
f010455b:	68 4d 19 13 f0       	push   $0xf013194d
f0104560:	e8 4b bc ff ff       	call   f01001b0 <_panic>
f0104565:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104568:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010456d:	89 c2                	mov    %eax,%edx
f010456f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104572:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104574:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104577:	83 ec 0c             	sub    $0xc,%esp
f010457a:	50                   	push   %eax
f010457b:	e8 97 f2 ff ff       	call   f0103817 <to_physical_address>
f0104580:	83 c4 10             	add    $0x10,%esp
f0104583:	89 c2                	mov    %eax,%edx
f0104585:	8b 45 08             	mov    0x8(%ebp),%eax
f0104588:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010458e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104591:	8b 00                	mov    (%eax),%eax
f0104593:	83 ec 04             	sub    $0x4,%esp
f0104596:	68 00 10 00 00       	push   $0x1000
f010459b:	6a 00                	push   $0x0
f010459d:	50                   	push   %eax
f010459e:	e8 59 aa 02 00       	call   f012effc <memset>
f01045a3:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01045a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045ab:	c9                   	leave  
f01045ac:	c3                   	ret    

f01045ad <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01045ad:	55                   	push   %ebp
f01045ae:	89 e5                	mov    %esp,%ebp
f01045b0:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01045b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01045ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045c1:	e9 ac 00 00 00       	jmp    f0104672 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01045c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d2:	c1 e2 02             	shl    $0x2,%edx
f01045d5:	01 d0                	add    %edx,%eax
f01045d7:	8b 00                	mov    (%eax),%eax
f01045d9:	83 e0 01             	and    $0x1,%eax
f01045dc:	85 c0                	test   %eax,%eax
f01045de:	0f 84 8a 00 00 00    	je     f010466e <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01045e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f0:	c1 e2 02             	shl    $0x2,%edx
f01045f3:	01 d0                	add    %edx,%eax
f01045f5:	8b 00                	mov    (%eax),%eax
f01045f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01045fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104602:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104608:	c1 e8 0c             	shr    $0xc,%eax
f010460b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010460e:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0104613:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0104616:	72 17                	jb     f010462f <pf_calculate_allocated_pages+0x82>
f0104618:	ff 75 e4             	pushl  -0x1c(%ebp)
f010461b:	68 b0 19 13 f0       	push   $0xf01319b0
f0104620:	68 1f 02 00 00       	push   $0x21f
f0104625:	68 4d 19 13 f0       	push   $0xf013194d
f010462a:	e8 81 bb ff ff       	call   f01001b0 <_panic>
f010462f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104632:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104637:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010463a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104641:	eb 20                	jmp    f0104663 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104643:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010464d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104650:	01 d0                	add    %edx,%eax
f0104652:	8b 00                	mov    (%eax),%eax
f0104654:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104657:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010465b:	74 03                	je     f0104660 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f010465d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104660:	ff 45 ec             	incl   -0x14(%ebp)
f0104663:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010466a:	76 d7                	jbe    f0104643 <pf_calculate_allocated_pages+0x96>
f010466c:	eb 01                	jmp    f010466f <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010466e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010466f:	ff 45 f4             	incl   -0xc(%ebp)
f0104672:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104679:	0f 86 47 ff ff ff    	jbe    f01045c6 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010467f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104682:	c9                   	leave  
f0104683:	c3                   	ret    

f0104684 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104684:	55                   	push   %ebp
f0104685:	89 e5                	mov    %esp,%ebp
f0104687:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010468a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104691:	a1 64 a3 2d f0       	mov    0xf02da364,%eax
f0104696:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104699:	eb 0b                	jmp    f01046a6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010469b:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010469e:	a1 6c a3 2d f0       	mov    0xf02da36c,%eax
f01046a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046aa:	74 07                	je     f01046b3 <pf_calculate_free_frames+0x2f>
f01046ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046af:	8b 00                	mov    (%eax),%eax
f01046b1:	eb 05                	jmp    f01046b8 <pf_calculate_free_frames+0x34>
f01046b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b8:	a3 6c a3 2d f0       	mov    %eax,0xf02da36c
f01046bd:	a1 6c a3 2d f0       	mov    0xf02da36c,%eax
f01046c2:	85 c0                	test   %eax,%eax
f01046c4:	75 d5                	jne    f010469b <pf_calculate_free_frames+0x17>
f01046c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ca:	75 cf                	jne    f010469b <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01046cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01046cf:	c9                   	leave  
f01046d0:	c3                   	ret    

f01046d1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01046d1:	55                   	push   %ebp
f01046d2:	89 e5                	mov    %esp,%ebp
f01046d4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01046d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046da:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01046e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e3:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01046e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e8:	8b 00                	mov    (%eax),%eax
f01046ea:	85 c0                	test   %eax,%eax
f01046ec:	0f 85 ad 00 00 00    	jne    f010479f <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046f2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046f9:	83 ec 0c             	sub    $0xc,%esp
f01046fc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046ff:	50                   	push   %eax
f0104700:	e8 20 2c 00 00       	call   f0107325 <allocate_frame>
f0104705:	83 c4 10             	add    $0x10,%esp
f0104708:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010470b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010470f:	79 08                	jns    f0104719 <get_disk_table_directory+0x48>
				return r;
f0104711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104714:	e9 8b 00 00 00       	jmp    f01047a4 <get_disk_table_directory+0xd3>
			p->references = 1;
f0104719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010471c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104722:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104725:	83 ec 0c             	sub    $0xc,%esp
f0104728:	50                   	push   %eax
f0104729:	e8 e9 f0 ff ff       	call   f0103817 <to_physical_address>
f010472e:	83 c4 10             	add    $0x10,%esp
f0104731:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104737:	c1 e8 0c             	shr    $0xc,%eax
f010473a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010473d:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0104742:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104745:	72 17                	jb     f010475e <get_disk_table_directory+0x8d>
f0104747:	ff 75 f0             	pushl  -0x10(%ebp)
f010474a:	68 b0 19 13 f0       	push   $0xf01319b0
f010474f:	68 5d 02 00 00       	push   $0x25d
f0104754:	68 4d 19 13 f0       	push   $0xf013194d
f0104759:	e8 52 ba ff ff       	call   f01001b0 <_panic>
f010475e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104761:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104766:	89 c2                	mov    %eax,%edx
f0104768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010476b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010476d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	50                   	push   %eax
f0104774:	e8 9e f0 ff ff       	call   f0103817 <to_physical_address>
f0104779:	83 c4 10             	add    $0x10,%esp
f010477c:	89 c2                	mov    %eax,%edx
f010477e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104781:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104787:	8b 45 0c             	mov    0xc(%ebp),%eax
f010478a:	8b 00                	mov    (%eax),%eax
f010478c:	83 ec 04             	sub    $0x4,%esp
f010478f:	68 00 10 00 00       	push   $0x1000
f0104794:	6a 00                	push   $0x0
f0104796:	50                   	push   %eax
f0104797:	e8 60 a8 02 00       	call   f012effc <memset>
f010479c:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010479f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01047a4:	c9                   	leave  
f01047a5:	c3                   	ret    

f01047a6 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01047a6:	55                   	push   %ebp
f01047a7:	89 e5                	mov    %esp,%ebp
f01047a9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01047ac:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01047b3:	76 19                	jbe    f01047ce <__pf_write_env_table+0x28>
f01047b5:	68 e0 19 13 f0       	push   $0xf01319e0
f01047ba:	68 06 1a 13 f0       	push   $0xf0131a06
f01047bf:	68 6b 02 00 00       	push   $0x26b
f01047c4:	68 4d 19 13 f0       	push   $0xf013194d
f01047c9:	e8 e2 b9 ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01047ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01047d1:	05 b0 00 00 00       	add    $0xb0,%eax
f01047d6:	83 ec 08             	sub    $0x8,%esp
f01047d9:	50                   	push   %eax
f01047da:	ff 75 08             	pushl  0x8(%ebp)
f01047dd:	e8 ef fe ff ff       	call   f01046d1 <get_disk_table_directory>
f01047e2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01047e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01047e8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047f1:	c1 ea 16             	shr    $0x16,%edx
f01047f4:	c1 e2 02             	shl    $0x2,%edx
f01047f7:	01 d0                	add    %edx,%eax
f01047f9:	8b 00                	mov    (%eax),%eax
f01047fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104801:	85 c0                	test   %eax,%eax
f0104803:	75 34                	jne    f0104839 <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104805:	83 ec 0c             	sub    $0xc,%esp
f0104808:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010480b:	50                   	push   %eax
f010480c:	e8 83 f2 ff ff       	call   f0103a94 <allocate_disk_frame>
f0104811:	83 c4 10             	add    $0x10,%esp
f0104814:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104817:	75 07                	jne    f0104820 <__pf_write_env_table+0x7a>
f0104819:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010481e:	eb 31                	jmp    f0104851 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104820:	8b 45 08             	mov    0x8(%ebp),%eax
f0104823:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104829:	8b 55 0c             	mov    0xc(%ebp),%edx
f010482c:	c1 ea 16             	shr    $0x16,%edx
f010482f:	c1 e2 02             	shl    $0x2,%edx
f0104832:	01 c2                	add    %eax,%edx
f0104834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104837:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0104839:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010483c:	83 ec 08             	sub    $0x8,%esp
f010483f:	ff 75 10             	pushl  0x10(%ebp)
f0104842:	50                   	push   %eax
f0104843:	e8 63 f0 ff ff       	call   f01038ab <write_disk_page>
f0104848:	83 c4 10             	add    $0x10,%esp
f010484b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010484e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104851:	c9                   	leave  
f0104852:	c3                   	ret    

f0104853 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104853:	55                   	push   %ebp
f0104854:	89 e5                	mov    %esp,%ebp
f0104856:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104859:	8b 45 08             	mov    0x8(%ebp),%eax
f010485c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104862:	85 c0                	test   %eax,%eax
f0104864:	75 07                	jne    f010486d <__pf_read_env_table+0x1a>
f0104866:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010486b:	eb 3d                	jmp    f01048aa <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010486d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104870:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104876:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104879:	c1 ea 16             	shr    $0x16,%edx
f010487c:	c1 e2 02             	shl    $0x2,%edx
f010487f:	01 d0                	add    %edx,%eax
f0104881:	8b 00                	mov    (%eax),%eax
f0104883:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010488a:	75 07                	jne    f0104893 <__pf_read_env_table+0x40>
f010488c:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104891:	eb 17                	jmp    f01048aa <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104893:	83 ec 08             	sub    $0x8,%esp
f0104896:	ff 75 10             	pushl  0x10(%ebp)
f0104899:	ff 75 f4             	pushl  -0xc(%ebp)
f010489c:	e8 db ef ff ff       	call   f010387c <read_disk_page>
f01048a1:	83 c4 10             	add    $0x10,%esp
f01048a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01048a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01048aa:	c9                   	leave  
f01048ab:	c3                   	ret    

f01048ac <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048b5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048bb:	85 c0                	test   %eax,%eax
f01048bd:	74 52                	je     f0104911 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048c6:	eb 3e                	jmp    f0104906 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01048c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048cb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048d4:	c1 e2 02             	shl    $0x2,%edx
f01048d7:	01 d0                	add    %edx,%eax
f01048d9:	8b 00                	mov    (%eax),%eax
f01048db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01048de:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e1:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048ea:	c1 e2 02             	shl    $0x2,%edx
f01048ed:	01 d0                	add    %edx,%eax
f01048ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01048f5:	83 ec 0c             	sub    $0xc,%esp
f01048f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01048fb:	e8 5b f2 ff ff       	call   f0103b5b <free_disk_frame>
f0104900:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104903:	ff 45 f4             	incl   -0xc(%ebp)
f0104906:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010490d:	76 b9                	jbe    f01048c8 <__pf_remove_env_all_tables+0x1c>
f010490f:	eb 01                	jmp    f0104912 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104911:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104912:	c9                   	leave  
f0104913:	c3                   	ret    

f0104914 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104914:	55                   	push   %ebp
f0104915:	89 e5                	mov    %esp,%ebp
f0104917:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010491a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010491e:	75 10                	jne    f0104930 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104920:	83 ec 0c             	sub    $0xc,%esp
f0104923:	68 10 1b 13 f0       	push   $0xf0131b10
f0104928:	e8 04 c5 ff ff       	call   f0100e31 <cprintf>
f010492d:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104930:	8b 45 08             	mov    0x8(%ebp),%eax
f0104933:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104939:	85 c0                	test   %eax,%eax
f010493b:	74 43                	je     f0104980 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010493d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104940:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104946:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104949:	c1 ea 16             	shr    $0x16,%edx
f010494c:	c1 e2 02             	shl    $0x2,%edx
f010494f:	01 d0                	add    %edx,%eax
f0104951:	8b 00                	mov    (%eax),%eax
f0104953:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104956:	8b 45 08             	mov    0x8(%ebp),%eax
f0104959:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010495f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104962:	c1 ea 16             	shr    $0x16,%edx
f0104965:	c1 e2 02             	shl    $0x2,%edx
f0104968:	01 d0                	add    %edx,%eax
f010496a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104970:	83 ec 0c             	sub    $0xc,%esp
f0104973:	ff 75 f4             	pushl  -0xc(%ebp)
f0104976:	e8 e0 f1 ff ff       	call   f0103b5b <free_disk_frame>
f010497b:	83 c4 10             	add    $0x10,%esp
f010497e:	eb 01                	jmp    f0104981 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104980:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104981:	c9                   	leave  
f0104982:	c3                   	ret    

f0104983 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104983:	55                   	push   %ebp
f0104984:	89 e5                	mov    %esp,%ebp
f0104986:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104989:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104990:	eb 1f                	jmp    f01049b1 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104995:	83 ec 04             	sub    $0x4,%esp
f0104998:	6a 08                	push   $0x8
f010499a:	ff 75 08             	pushl  0x8(%ebp)
f010499d:	50                   	push   %eax
f010499e:	e8 66 ad 02 00       	call   f012f709 <ide_write>
f01049a3:	83 c4 10             	add    $0x10,%esp
f01049a6:	85 c0                	test   %eax,%eax
f01049a8:	75 12                	jne    f01049bc <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01049aa:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01049b1:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01049b8:	7e d8                	jle    f0104992 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049ba:	eb 01                	jmp    f01049bd <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01049bc:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049bd:	90                   	nop
f01049be:	c9                   	leave  
f01049bf:	c3                   	ret    

f01049c0 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01049c0:	55                   	push   %ebp
f01049c1:	89 e5                	mov    %esp,%ebp
f01049c3:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	0f b6 c0             	movzbl %al,%eax
f01049cc:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049d3:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049d6:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049dc:	ee                   	out    %al,(%dx)
f01049dd:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01049e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01049e7:	89 c2                	mov    %eax,%edx
f01049e9:	ec                   	in     (%dx),%al
f01049ea:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01049ed:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01049f0:	0f b6 c0             	movzbl %al,%eax
}
f01049f3:	c9                   	leave  
f01049f4:	c3                   	ret    

f01049f5 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01049f5:	55                   	push   %ebp
f01049f6:	89 e5                	mov    %esp,%ebp
f01049f8:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fe:	0f b6 c0             	movzbl %al,%eax
f0104a01:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a08:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a0b:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a11:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104a12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a15:	0f b6 c0             	movzbl %al,%eax
f0104a18:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a1f:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a22:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a25:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a28:	ee                   	out    %al,(%dx)
}
f0104a29:	90                   	nop
f0104a2a:	c9                   	leave  
f0104a2b:	c3                   	ret    

f0104a2c <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a2c:	55                   	push   %ebp
f0104a2d:	89 e5                	mov    %esp,%ebp
f0104a2f:	53                   	push   %ebx
f0104a30:	83 ec 24             	sub    $0x24,%esp
f0104a33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a36:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104a39:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104a40:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104a44:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104a47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104a4a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104a4b:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104a4f:	77 48                	ja     f0104a99 <kclock_start+0x6d>
f0104a51:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a58:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104a5c:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a62:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a63:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a67:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a6c:	99                   	cltd   
f0104a6d:	f7 fb                	idiv   %ebx
f0104a6f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a75:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a79:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a7e:	99                   	cltd   
f0104a7f:	f7 fb                	idiv   %ebx
f0104a81:	89 c3                	mov    %eax,%ebx
f0104a83:	89 c8                	mov    %ecx,%eax
f0104a85:	99                   	cltd   
f0104a86:	f7 fb                	idiv   %ebx
f0104a88:	0f b7 c0             	movzwl %ax,%eax
f0104a8b:	83 ec 0c             	sub    $0xc,%esp
f0104a8e:	50                   	push   %eax
f0104a8f:	e8 dd 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104a94:	83 c4 10             	add    $0x10,%esp
f0104a97:	eb 13                	jmp    f0104aac <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a99:	6a 35                	push   $0x35
f0104a9b:	68 34 1b 13 f0       	push   $0xf0131b34
f0104aa0:	6a 33                	push   $0x33
f0104aa2:	68 90 1b 13 f0       	push   $0xf0131b90
f0104aa7:	e8 04 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104aac:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f0104ab2:	0f b7 c0             	movzwl %ax,%eax
f0104ab5:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104aba:	83 ec 0c             	sub    $0xc,%esp
f0104abd:	50                   	push   %eax
f0104abe:	e8 3a 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104ac3:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104ac6:	90                   	nop
f0104ac7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104aca:	c9                   	leave  
f0104acb:	c3                   	ret    

f0104acc <kclock_stop>:

void
kclock_stop(void)
{
f0104acc:	55                   	push   %ebp
f0104acd:	89 e5                	mov    %esp,%ebp
f0104acf:	83 ec 18             	sub    $0x18,%esp
f0104ad2:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ad9:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104add:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae3:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104ae4:	83 ec 0c             	sub    $0xc,%esp
f0104ae7:	68 ff ff 00 00       	push   $0xffff
f0104aec:	e8 0c 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104af1:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104af4:	90                   	nop
f0104af5:	c9                   	leave  
f0104af6:	c3                   	ret    

f0104af7 <kclock_resume>:

void
kclock_resume(void)
{
f0104af7:	55                   	push   %ebp
f0104af8:	89 e5                	mov    %esp,%ebp
f0104afa:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104afd:	e8 b1 01 00 00       	call   f0104cb3 <kclock_read_cnt0>
f0104b02:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104b06:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104b0b:	77 06                	ja     f0104b13 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104b0d:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104b13:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b17:	83 e0 01             	and    $0x1,%eax
f0104b1a:	66 85 c0             	test   %ax,%ax
f0104b1d:	74 09                	je     f0104b28 <kclock_resume+0x31>
		cnt0++;
f0104b1f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b23:	40                   	inc    %eax
f0104b24:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b28:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b2f:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104b33:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104b36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104b39:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104b3e:	83 ec 0c             	sub    $0xc,%esp
f0104b41:	50                   	push   %eax
f0104b42:	e8 2a 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b47:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b4a:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f0104b50:	0f b7 c0             	movzwl %ax,%eax
f0104b53:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b58:	83 ec 0c             	sub    $0xc,%esp
f0104b5b:	50                   	push   %eax
f0104b5c:	e8 9c 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104b61:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b64:	90                   	nop
f0104b65:	c9                   	leave  
f0104b66:	c3                   	ret    

f0104b67 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b67:	55                   	push   %ebp
f0104b68:	89 e5                	mov    %esp,%ebp
f0104b6a:	83 ec 28             	sub    $0x28,%esp
f0104b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b70:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b73:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b7a:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b7e:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b84:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b85:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b89:	83 ec 0c             	sub    $0xc,%esp
f0104b8c:	50                   	push   %eax
f0104b8d:	e8 df 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b92:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b95:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f0104b9b:	0f b7 c0             	movzwl %ax,%eax
f0104b9e:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104ba3:	83 ec 0c             	sub    $0xc,%esp
f0104ba6:	50                   	push   %eax
f0104ba7:	e8 51 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104bac:	83 c4 10             	add    $0x10,%esp

}
f0104baf:	90                   	nop
f0104bb0:	c9                   	leave  
f0104bb1:	c3                   	ret    

f0104bb2 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104bb2:	55                   	push   %ebp
f0104bb3:	89 e5                	mov    %esp,%ebp
f0104bb5:	56                   	push   %esi
f0104bb6:	53                   	push   %ebx
f0104bb7:	83 ec 20             	sub    $0x20,%esp
f0104bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bbd:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104bc0:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104bc4:	0f 87 8a 00 00 00    	ja     f0104c54 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104bca:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104bce:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bd3:	99                   	cltd   
f0104bd4:	f7 fe                	idiv   %esi
f0104bd6:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104bdc:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104be0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104be5:	99                   	cltd   
f0104be6:	f7 fb                	idiv   %ebx
f0104be8:	89 c6                	mov    %eax,%esi
f0104bea:	89 c8                	mov    %ecx,%eax
f0104bec:	99                   	cltd   
f0104bed:	f7 fe                	idiv   %esi
f0104bef:	89 c3                	mov    %eax,%ebx
f0104bf1:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104bf5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bfa:	99                   	cltd   
f0104bfb:	f7 f9                	idiv   %ecx
f0104bfd:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c03:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c07:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c0c:	99                   	cltd   
f0104c0d:	f7 fe                	idiv   %esi
f0104c0f:	89 c6                	mov    %eax,%esi
f0104c11:	89 c8                	mov    %ecx,%eax
f0104c13:	99                   	cltd   
f0104c14:	f7 fe                	idiv   %esi
f0104c16:	25 01 00 00 80       	and    $0x80000001,%eax
f0104c1b:	85 c0                	test   %eax,%eax
f0104c1d:	79 05                	jns    f0104c24 <kclock_set_quantum+0x72>
f0104c1f:	48                   	dec    %eax
f0104c20:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c23:	40                   	inc    %eax
f0104c24:	01 d8                	add    %ebx,%eax
f0104c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c29:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c30:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c34:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c37:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c3a:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c3e:	0f b7 c0             	movzwl %ax,%eax
f0104c41:	83 ec 0c             	sub    $0xc,%esp
f0104c44:	50                   	push   %eax
f0104c45:	e8 27 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104c4a:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104c4d:	e8 7a fe ff ff       	call   f0104acc <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104c52:	eb 16                	jmp    f0104c6a <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c54:	6a 35                	push   $0x35
f0104c56:	68 34 1b 13 f0       	push   $0xf0131b34
f0104c5b:	68 cc 00 00 00       	push   $0xcc
f0104c60:	68 90 1b 13 f0       	push   $0xf0131b90
f0104c65:	e8 46 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c6d:	5b                   	pop    %ebx
f0104c6e:	5e                   	pop    %esi
f0104c6f:	5d                   	pop    %ebp
f0104c70:	c3                   	ret    

f0104c71 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c71:	55                   	push   %ebp
f0104c72:	89 e5                	mov    %esp,%ebp
f0104c74:	83 ec 14             	sub    $0x14,%esp
f0104c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c81:	0f b6 c0             	movzbl %al,%eax
f0104c84:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c8b:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c8e:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c91:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c94:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c98:	66 c1 e8 08          	shr    $0x8,%ax
f0104c9c:	0f b6 c0             	movzbl %al,%eax
f0104c9f:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104ca6:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104ca9:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104cac:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104caf:	ee                   	out    %al,(%dx)
}
f0104cb0:	90                   	nop
f0104cb1:	c9                   	leave  
f0104cb2:	c3                   	ret    

f0104cb3 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104cb3:	55                   	push   %ebp
f0104cb4:	89 e5                	mov    %esp,%ebp
f0104cb6:	83 ec 20             	sub    $0x20,%esp
f0104cb9:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cc3:	89 c2                	mov    %eax,%edx
f0104cc5:	ec                   	in     (%dx),%al
f0104cc6:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104cc9:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ccc:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ccf:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cd9:	89 c2                	mov    %eax,%edx
f0104cdb:	ec                   	in     (%dx),%al
f0104cdc:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104cdf:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104ce2:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104ce5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ce9:	c1 e0 08             	shl    $0x8,%eax
f0104cec:	89 c2                	mov    %eax,%edx
f0104cee:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104cf2:	09 d0                	or     %edx,%eax
f0104cf4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104cfb:	c9                   	leave  
f0104cfc:	c3                   	ret    

f0104cfd <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104cfd:	55                   	push   %ebp
f0104cfe:	89 e5                	mov    %esp,%ebp
f0104d00:	83 ec 30             	sub    $0x30,%esp
f0104d03:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d0d:	89 c2                	mov    %eax,%edx
f0104d0f:	ec                   	in     (%dx),%al
f0104d10:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104d13:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104d16:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d19:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d20:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d24:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d2a:	ee                   	out    %al,(%dx)
f0104d2b:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d35:	89 c2                	mov    %eax,%edx
f0104d37:	ec                   	in     (%dx),%al
f0104d38:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104d3b:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d3e:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104d41:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104d4b:	89 c2                	mov    %eax,%edx
f0104d4d:	ec                   	in     (%dx),%al
f0104d4e:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104d51:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d54:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d57:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104d5b:	c1 e0 08             	shl    $0x8,%eax
f0104d5e:	89 c2                	mov    %eax,%edx
f0104d60:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d64:	09 d0                	or     %edx,%eax
f0104d66:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d6a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d6e:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d75:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d78:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d7b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d7e:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d82:	c9                   	leave  
f0104d83:	c3                   	ret    

f0104d84 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d84:	55                   	push   %ebp
f0104d85:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d8b:	74 1d                	je     f0104daa <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104da3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104daa:	90                   	nop
f0104dab:	5d                   	pop    %ebp
f0104dac:	c3                   	ret    

f0104dad <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104dad:	55                   	push   %ebp
f0104dae:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db4:	74 08                	je     f0104dbe <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104db9:	8b 40 0c             	mov    0xc(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104dc3:	5d                   	pop    %ebp
f0104dc4:	c3                   	ret    

f0104dc5 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104dc5:	55                   	push   %ebp
f0104dc6:	89 e5                	mov    %esp,%ebp
f0104dc8:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104dcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dcf:	75 16                	jne    f0104de7 <enqueue+0x22>
f0104dd1:	68 a4 1b 13 f0       	push   $0xf0131ba4
f0104dd6:	68 b2 1b 13 f0       	push   $0xf0131bb2
f0104ddb:	6a 33                	push   $0x33
f0104ddd:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0104de2:	e8 c9 b3 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104de7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104deb:	74 66                	je     f0104e53 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104ded:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104df1:	75 14                	jne    f0104e07 <enqueue+0x42>
f0104df3:	83 ec 04             	sub    $0x4,%esp
f0104df6:	68 e0 1b 13 f0       	push   $0xf0131be0
f0104dfb:	6a 36                	push   $0x36
f0104dfd:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 10                	mov    (%eax),%edx
f0104e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e0f:	89 50 44             	mov    %edx,0x44(%eax)
f0104e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e15:	8b 40 44             	mov    0x44(%eax),%eax
f0104e18:	85 c0                	test   %eax,%eax
f0104e1a:	74 0d                	je     f0104e29 <enqueue+0x64>
f0104e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e1f:	8b 00                	mov    (%eax),%eax
f0104e21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e24:	89 50 48             	mov    %edx,0x48(%eax)
f0104e27:	eb 09                	jmp    f0104e32 <enqueue+0x6d>
f0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e2f:	89 50 04             	mov    %edx,0x4(%eax)
f0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e38:	89 10                	mov    %edx,(%eax)
f0104e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e3d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e47:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e4a:	8d 50 01             	lea    0x1(%eax),%edx
f0104e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e50:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104e53:	90                   	nop
f0104e54:	c9                   	leave  
f0104e55:	c3                   	ret    

f0104e56 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104e56:	55                   	push   %ebp
f0104e57:	89 e5                	mov    %esp,%ebp
f0104e59:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104e5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e60:	75 0a                	jne    f0104e6c <dequeue+0x16>
f0104e62:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e67:	e9 a0 00 00 00       	jmp    f0104f0c <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e6f:	8b 40 04             	mov    0x4(%eax),%eax
f0104e72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e79:	0f 84 8a 00 00 00    	je     f0104f09 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e83:	75 14                	jne    f0104e99 <dequeue+0x43>
f0104e85:	83 ec 04             	sub    $0x4,%esp
f0104e88:	68 03 1c 13 f0       	push   $0xf0131c03
f0104e8d:	6a 43                	push   $0x43
f0104e8f:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0104e94:	e8 17 b3 ff ff       	call   f01001b0 <_panic>
f0104e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9c:	8b 40 44             	mov    0x44(%eax),%eax
f0104e9f:	85 c0                	test   %eax,%eax
f0104ea1:	74 11                	je     f0104eb4 <dequeue+0x5e>
f0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104eac:	8b 52 48             	mov    0x48(%edx),%edx
f0104eaf:	89 50 48             	mov    %edx,0x48(%eax)
f0104eb2:	eb 0c                	jmp    f0104ec0 <dequeue+0x6a>
f0104eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb7:	8b 50 48             	mov    0x48(%eax),%edx
f0104eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ebd:	89 50 04             	mov    %edx,0x4(%eax)
f0104ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec3:	8b 40 48             	mov    0x48(%eax),%eax
f0104ec6:	85 c0                	test   %eax,%eax
f0104ec8:	74 11                	je     f0104edb <dequeue+0x85>
f0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecd:	8b 40 48             	mov    0x48(%eax),%eax
f0104ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ed3:	8b 52 44             	mov    0x44(%edx),%edx
f0104ed6:	89 50 44             	mov    %edx,0x44(%eax)
f0104ed9:	eb 0b                	jmp    f0104ee6 <dequeue+0x90>
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	8b 50 44             	mov    0x44(%eax),%edx
f0104ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee4:	89 10                	mov    %edx,(%eax)
f0104ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f00:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f06:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104f0c:	c9                   	leave  
f0104f0d:	c3                   	ret    

f0104f0e <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104f0e:	55                   	push   %ebp
f0104f0f:	89 e5                	mov    %esp,%ebp
f0104f11:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f18:	75 16                	jne    f0104f30 <remove_from_queue+0x22>
f0104f1a:	68 a4 1b 13 f0       	push   $0xf0131ba4
f0104f1f:	68 b2 1b 13 f0       	push   $0xf0131bb2
f0104f24:	6a 4d                	push   $0x4d
f0104f26:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0104f2b:	e8 80 b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104f30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f34:	0f 84 8a 00 00 00    	je     f0104fc4 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104f3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f3e:	75 14                	jne    f0104f54 <remove_from_queue+0x46>
f0104f40:	83 ec 04             	sub    $0x4,%esp
f0104f43:	68 03 1c 13 f0       	push   $0xf0131c03
f0104f48:	6a 51                	push   $0x51
f0104f4a:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0104f4f:	e8 5c b2 ff ff       	call   f01001b0 <_panic>
f0104f54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f57:	8b 40 44             	mov    0x44(%eax),%eax
f0104f5a:	85 c0                	test   %eax,%eax
f0104f5c:	74 11                	je     f0104f6f <remove_from_queue+0x61>
f0104f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f61:	8b 40 44             	mov    0x44(%eax),%eax
f0104f64:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f67:	8b 52 48             	mov    0x48(%edx),%edx
f0104f6a:	89 50 48             	mov    %edx,0x48(%eax)
f0104f6d:	eb 0c                	jmp    f0104f7b <remove_from_queue+0x6d>
f0104f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f72:	8b 50 48             	mov    0x48(%eax),%edx
f0104f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f78:	89 50 04             	mov    %edx,0x4(%eax)
f0104f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f7e:	8b 40 48             	mov    0x48(%eax),%eax
f0104f81:	85 c0                	test   %eax,%eax
f0104f83:	74 11                	je     f0104f96 <remove_from_queue+0x88>
f0104f85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f88:	8b 40 48             	mov    0x48(%eax),%eax
f0104f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f8e:	8b 52 44             	mov    0x44(%edx),%edx
f0104f91:	89 50 44             	mov    %edx,0x44(%eax)
f0104f94:	eb 0b                	jmp    f0104fa1 <remove_from_queue+0x93>
f0104f96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f99:	8b 50 44             	mov    0x44(%eax),%edx
f0104f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9f:	89 10                	mov    %edx,(%eax)
f0104fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fa4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fb8:	8b 40 0c             	mov    0xc(%eax),%eax
f0104fbb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc1:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104fc4:	90                   	nop
f0104fc5:	c9                   	leave  
f0104fc6:	c3                   	ret    

f0104fc7 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104fc7:	55                   	push   %ebp
f0104fc8:	89 e5                	mov    %esp,%ebp
f0104fca:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104fcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fd1:	75 07                	jne    f0104fda <find_env_in_queue+0x13>
f0104fd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fd8:	eb 58                	jmp    f0105032 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104fda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe4:	8b 00                	mov    (%eax),%eax
f0104fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fe9:	eb 19                	jmp    f0105004 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104feb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ff1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104ff4:	75 05                	jne    f0104ffb <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ff9:	eb 37                	jmp    f0105032 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104ffb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffe:	8b 40 08             	mov    0x8(%eax),%eax
f0105001:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105004:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0105008:	74 08                	je     f0105012 <find_env_in_queue+0x4b>
f010500a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010500d:	8b 40 44             	mov    0x44(%eax),%eax
f0105010:	eb 05                	jmp    f0105017 <find_env_in_queue+0x50>
f0105012:	b8 00 00 00 00       	mov    $0x0,%eax
f0105017:	8b 55 08             	mov    0x8(%ebp),%edx
f010501a:	89 42 08             	mov    %eax,0x8(%edx)
f010501d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105020:	8b 40 08             	mov    0x8(%eax),%eax
f0105023:	85 c0                	test   %eax,%eax
f0105025:	75 c4                	jne    f0104feb <find_env_in_queue+0x24>
f0105027:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010502b:	75 be                	jne    f0104feb <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010502d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105032:	c9                   	leave  
f0105033:	c3                   	ret    

f0105034 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0105034:	55                   	push   %ebp
f0105035:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0105037:	90                   	nop
f0105038:	5d                   	pop    %ebp
f0105039:	c3                   	ret    

f010503a <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f010503a:	55                   	push   %ebp
f010503b:	89 e5                	mov    %esp,%ebp
f010503d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105040:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105044:	74 1d                	je     f0105063 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0105046:	8b 45 08             	mov    0x8(%ebp),%eax
f0105049:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0105050:	83 ec 08             	sub    $0x8,%esp
f0105053:	ff 75 08             	pushl  0x8(%ebp)
f0105056:	68 40 3b 25 f0       	push   $0xf0253b40
f010505b:	e8 65 fd ff ff       	call   f0104dc5 <enqueue>
f0105060:	83 c4 10             	add    $0x10,%esp
	}
}
f0105063:	90                   	nop
f0105064:	c9                   	leave  
f0105065:	c3                   	ret    

f0105066 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105066:	55                   	push   %ebp
f0105067:	89 e5                	mov    %esp,%ebp
f0105069:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010506c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105070:	0f 84 02 01 00 00    	je     f0105178 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010507d:	e9 e5 00 00 00       	jmp    f0105167 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105082:	8b 45 08             	mov    0x8(%ebp),%eax
f0105085:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105088:	89 c2                	mov    %eax,%edx
f010508a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010508d:	c1 e0 04             	shl    $0x4,%eax
f0105090:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105095:	52                   	push   %edx
f0105096:	50                   	push   %eax
f0105097:	e8 2b ff ff ff       	call   f0104fc7 <find_env_in_queue>
f010509c:	83 c4 08             	add    $0x8,%esp
f010509f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01050a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01050a6:	0f 84 b8 00 00 00    	je     f0105164 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01050ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050b0:	75 17                	jne    f01050c9 <sched_remove_ready+0x63>
f01050b2:	83 ec 04             	sub    $0x4,%esp
f01050b5:	68 03 1c 13 f0       	push   $0xf0131c03
f01050ba:	68 90 00 00 00       	push   $0x90
f01050bf:	68 c7 1b 13 f0       	push   $0xf0131bc7
f01050c4:	e8 e7 b0 ff ff       	call   f01001b0 <_panic>
f01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cc:	8b 40 44             	mov    0x44(%eax),%eax
f01050cf:	85 c0                	test   %eax,%eax
f01050d1:	74 11                	je     f01050e4 <sched_remove_ready+0x7e>
f01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050d6:	8b 40 44             	mov    0x44(%eax),%eax
f01050d9:	8b 55 08             	mov    0x8(%ebp),%edx
f01050dc:	8b 52 48             	mov    0x48(%edx),%edx
f01050df:	89 50 48             	mov    %edx,0x48(%eax)
f01050e2:	eb 14                	jmp    f01050f8 <sched_remove_ready+0x92>
f01050e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e7:	8b 40 48             	mov    0x48(%eax),%eax
f01050ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050ed:	c1 e2 04             	shl    $0x4,%edx
f01050f0:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f01050f6:	89 02                	mov    %eax,(%edx)
f01050f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01050fb:	8b 40 48             	mov    0x48(%eax),%eax
f01050fe:	85 c0                	test   %eax,%eax
f0105100:	74 11                	je     f0105113 <sched_remove_ready+0xad>
f0105102:	8b 45 08             	mov    0x8(%ebp),%eax
f0105105:	8b 40 48             	mov    0x48(%eax),%eax
f0105108:	8b 55 08             	mov    0x8(%ebp),%edx
f010510b:	8b 52 44             	mov    0x44(%edx),%edx
f010510e:	89 50 44             	mov    %edx,0x44(%eax)
f0105111:	eb 14                	jmp    f0105127 <sched_remove_ready+0xc1>
f0105113:	8b 45 08             	mov    0x8(%ebp),%eax
f0105116:	8b 40 44             	mov    0x44(%eax),%eax
f0105119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010511c:	c1 e2 04             	shl    $0x4,%edx
f010511f:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0105125:	89 02                	mov    %eax,(%edx)
f0105127:	8b 45 08             	mov    0x8(%ebp),%eax
f010512a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105131:	8b 45 08             	mov    0x8(%ebp),%eax
f0105134:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010513b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513e:	c1 e0 04             	shl    $0x4,%eax
f0105141:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105146:	8b 00                	mov    (%eax),%eax
f0105148:	8d 50 ff             	lea    -0x1(%eax),%edx
f010514b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514e:	c1 e0 04             	shl    $0x4,%eax
f0105151:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105156:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0105158:	8b 45 08             	mov    0x8(%ebp),%eax
f010515b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105162:	eb 14                	jmp    f0105178 <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105164:	ff 45 f4             	incl   -0xc(%ebp)
f0105167:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f010516c:	0f b6 c0             	movzbl %al,%eax
f010516f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105172:	0f 8f 0a ff ff ff    	jg     f0105082 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	74 1d                	je     f01051a3 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105186:	8b 45 08             	mov    0x8(%ebp),%eax
f0105189:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105190:	83 ec 08             	sub    $0x8,%esp
f0105193:	ff 75 08             	pushl  0x8(%ebp)
f0105196:	68 d8 be 2b f0       	push   $0xf02bbed8
f010519b:	e8 25 fc ff ff       	call   f0104dc5 <enqueue>
f01051a0:	83 c4 10             	add    $0x10,%esp
	}
}
f01051a3:	90                   	nop
f01051a4:	c9                   	leave  
f01051a5:	c3                   	ret    

f01051a6 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f01051a6:	55                   	push   %ebp
f01051a7:	89 e5                	mov    %esp,%ebp
f01051a9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01051ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051b0:	0f 84 92 00 00 00    	je     f0105248 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01051b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051ba:	75 17                	jne    f01051d3 <sched_remove_new+0x2d>
f01051bc:	83 ec 04             	sub    $0x4,%esp
f01051bf:	68 03 1c 13 f0       	push   $0xf0131c03
f01051c4:	68 ab 00 00 00       	push   $0xab
f01051c9:	68 c7 1b 13 f0       	push   $0xf0131bc7
f01051ce:	e8 dd af ff ff       	call   f01001b0 <_panic>
f01051d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d6:	8b 40 44             	mov    0x44(%eax),%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	74 11                	je     f01051ee <sched_remove_new+0x48>
f01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e0:	8b 40 44             	mov    0x44(%eax),%eax
f01051e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01051e6:	8b 52 48             	mov    0x48(%edx),%edx
f01051e9:	89 50 48             	mov    %edx,0x48(%eax)
f01051ec:	eb 0b                	jmp    f01051f9 <sched_remove_new+0x53>
f01051ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f1:	8b 40 48             	mov    0x48(%eax),%eax
f01051f4:	a3 dc be 2b f0       	mov    %eax,0xf02bbedc
f01051f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01051fc:	8b 40 48             	mov    0x48(%eax),%eax
f01051ff:	85 c0                	test   %eax,%eax
f0105201:	74 11                	je     f0105214 <sched_remove_new+0x6e>
f0105203:	8b 45 08             	mov    0x8(%ebp),%eax
f0105206:	8b 40 48             	mov    0x48(%eax),%eax
f0105209:	8b 55 08             	mov    0x8(%ebp),%edx
f010520c:	8b 52 44             	mov    0x44(%edx),%edx
f010520f:	89 50 44             	mov    %edx,0x44(%eax)
f0105212:	eb 0b                	jmp    f010521f <sched_remove_new+0x79>
f0105214:	8b 45 08             	mov    0x8(%ebp),%eax
f0105217:	8b 40 44             	mov    0x44(%eax),%eax
f010521a:	a3 d8 be 2b f0       	mov    %eax,0xf02bbed8
f010521f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105222:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105229:	8b 45 08             	mov    0x8(%ebp),%eax
f010522c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105233:	a1 e4 be 2b f0       	mov    0xf02bbee4,%eax
f0105238:	48                   	dec    %eax
f0105239:	a3 e4 be 2b f0       	mov    %eax,0xf02bbee4
		env->env_status = ENV_UNKNOWN;
f010523e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105241:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105248:	90                   	nop
f0105249:	c9                   	leave  
f010524a:	c3                   	ret    

f010524b <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010524b:	55                   	push   %ebp
f010524c:	89 e5                	mov    %esp,%ebp
f010524e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105251:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105255:	74 34                	je     f010528b <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0105257:	e8 b7 85 00 00       	call   f010d813 <isBufferingEnabled>
f010525c:	84 c0                	test   %al,%al
f010525e:	74 0e                	je     f010526e <sched_insert_exit+0x23>
f0105260:	83 ec 0c             	sub    $0xc,%esp
f0105263:	ff 75 08             	pushl  0x8(%ebp)
f0105266:	e8 49 5b 00 00       	call   f010adb4 <cleanup_buffers>
f010526b:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010526e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105271:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0105278:	83 ec 08             	sub    $0x8,%esp
f010527b:	ff 75 08             	pushl  0x8(%ebp)
f010527e:	68 a4 9a 2b f0       	push   $0xf02b9aa4
f0105283:	e8 3d fb ff ff       	call   f0104dc5 <enqueue>
f0105288:	83 c4 10             	add    $0x10,%esp
	}
}
f010528b:	90                   	nop
f010528c:	c9                   	leave  
f010528d:	c3                   	ret    

f010528e <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f010528e:	55                   	push   %ebp
f010528f:	89 e5                	mov    %esp,%ebp
f0105291:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105294:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105298:	0f 84 92 00 00 00    	je     f0105330 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010529e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052a2:	75 17                	jne    f01052bb <sched_remove_exit+0x2d>
f01052a4:	83 ec 04             	sub    $0x4,%esp
f01052a7:	68 03 1c 13 f0       	push   $0xf0131c03
f01052ac:	68 c3 00 00 00       	push   $0xc3
f01052b1:	68 c7 1b 13 f0       	push   $0xf0131bc7
f01052b6:	e8 f5 ae ff ff       	call   f01001b0 <_panic>
f01052bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052be:	8b 40 44             	mov    0x44(%eax),%eax
f01052c1:	85 c0                	test   %eax,%eax
f01052c3:	74 11                	je     f01052d6 <sched_remove_exit+0x48>
f01052c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c8:	8b 40 44             	mov    0x44(%eax),%eax
f01052cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01052ce:	8b 52 48             	mov    0x48(%edx),%edx
f01052d1:	89 50 48             	mov    %edx,0x48(%eax)
f01052d4:	eb 0b                	jmp    f01052e1 <sched_remove_exit+0x53>
f01052d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d9:	8b 40 48             	mov    0x48(%eax),%eax
f01052dc:	a3 a8 9a 2b f0       	mov    %eax,0xf02b9aa8
f01052e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e4:	8b 40 48             	mov    0x48(%eax),%eax
f01052e7:	85 c0                	test   %eax,%eax
f01052e9:	74 11                	je     f01052fc <sched_remove_exit+0x6e>
f01052eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ee:	8b 40 48             	mov    0x48(%eax),%eax
f01052f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01052f4:	8b 52 44             	mov    0x44(%edx),%edx
f01052f7:	89 50 44             	mov    %edx,0x44(%eax)
f01052fa:	eb 0b                	jmp    f0105307 <sched_remove_exit+0x79>
f01052fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ff:	8b 40 44             	mov    0x44(%eax),%eax
f0105302:	a3 a4 9a 2b f0       	mov    %eax,0xf02b9aa4
f0105307:	8b 45 08             	mov    0x8(%ebp),%eax
f010530a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010531b:	a1 b0 9a 2b f0       	mov    0xf02b9ab0,%eax
f0105320:	48                   	dec    %eax
f0105321:	a3 b0 9a 2b f0       	mov    %eax,0xf02b9ab0
		env->env_status = ENV_UNKNOWN;
f0105326:	8b 45 08             	mov    0x8(%ebp),%eax
f0105329:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105330:	90                   	nop
f0105331:	c9                   	leave  
f0105332:	c3                   	ret    

f0105333 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0105333:	55                   	push   %ebp
f0105334:	89 e5                	mov    %esp,%ebp
f0105336:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105339:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010533d:	74 0e                	je     f010534d <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010533f:	83 ec 0c             	sub    $0xc,%esp
f0105342:	ff 75 08             	pushl  0x8(%ebp)
f0105345:	e8 30 fe ff ff       	call   f010517a <sched_insert_new>
f010534a:	83 c4 10             	add    $0x10,%esp
	}
}
f010534d:	90                   	nop
f010534e:	c9                   	leave  
f010534f:	c3                   	ret    

f0105350 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0105350:	55                   	push   %ebp
f0105351:	89 e5                	mov    %esp,%ebp
f0105353:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010535d:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105362:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105365:	eb 3d                	jmp    f01053a4 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105367:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010536a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010536d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105370:	75 2a                	jne    f010539c <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105372:	83 ec 0c             	sub    $0xc,%esp
f0105375:	ff 75 f4             	pushl  -0xc(%ebp)
f0105378:	e8 29 fe ff ff       	call   f01051a6 <sched_remove_new>
f010537d:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105380:	83 ec 0c             	sub    $0xc,%esp
f0105383:	ff 75 f4             	pushl  -0xc(%ebp)
f0105386:	e8 af fc ff ff       	call   f010503a <sched_insert_ready0>
f010538b:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010538e:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f0105393:	85 c0                	test   %eax,%eax
f0105395:	75 36                	jne    f01053cd <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105397:	e8 7d 0e 00 00       	call   f0106219 <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010539c:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f01053a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a8:	74 08                	je     f01053b2 <sched_run_env+0x62>
f01053aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ad:	8b 40 44             	mov    0x44(%eax),%eax
f01053b0:	eb 05                	jmp    f01053b7 <sched_run_env+0x67>
f01053b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01053b7:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f01053bc:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f01053c1:	85 c0                	test   %eax,%eax
f01053c3:	75 a2                	jne    f0105367 <sched_run_env+0x17>
f01053c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c9:	75 9c                	jne    f0105367 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053cb:	eb 01                	jmp    f01053ce <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01053cd:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053ce:	90                   	nop
f01053cf:	c9                   	leave  
f01053d0:	c3                   	ret    

f01053d1 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01053d1:	55                   	push   %ebp
f01053d2:	89 e5                	mov    %esp,%ebp
f01053d4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01053de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01053e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053e9:	75 59                	jne    f0105444 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053eb:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01053f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053f3:	eb 28                	jmp    f010541d <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053fe:	75 15                	jne    f0105415 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105400:	83 ec 0c             	sub    $0xc,%esp
f0105403:	ff 75 f4             	pushl  -0xc(%ebp)
f0105406:	e8 9b fd ff ff       	call   f01051a6 <sched_remove_new>
f010540b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010540e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105415:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f010541a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010541d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105421:	74 08                	je     f010542b <sched_exit_env+0x5a>
f0105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105426:	8b 40 44             	mov    0x44(%eax),%eax
f0105429:	eb 05                	jmp    f0105430 <sched_exit_env+0x5f>
f010542b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105430:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105435:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f010543a:	85 c0                	test   %eax,%eax
f010543c:	75 b7                	jne    f01053f5 <sched_exit_env+0x24>
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	75 b1                	jne    f01053f5 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105444:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105448:	0f 85 6e 01 00 00    	jne    f01055bc <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010544e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105455:	e9 4e 01 00 00       	jmp    f01055a8 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010545a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010545d:	c1 e0 04             	shl    $0x4,%eax
f0105460:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105465:	8b 00                	mov    (%eax),%eax
f0105467:	85 c0                	test   %eax,%eax
f0105469:	0f 84 30 01 00 00    	je     f010559f <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f010546f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105476:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105479:	c1 e0 04             	shl    $0x4,%eax
f010547c:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105481:	8b 00                	mov    (%eax),%eax
f0105483:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105486:	e9 d4 00 00 00       	jmp    f010555f <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010548b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010548e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105491:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105494:	0f 85 b5 00 00 00    	jne    f010554f <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010549a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010549e:	75 17                	jne    f01054b7 <sched_exit_env+0xe6>
f01054a0:	83 ec 04             	sub    $0x4,%esp
f01054a3:	68 03 1c 13 f0       	push   $0xf0131c03
f01054a8:	68 10 01 00 00       	push   $0x110
f01054ad:	68 c7 1b 13 f0       	push   $0xf0131bc7
f01054b2:	e8 f9 ac ff ff       	call   f01001b0 <_panic>
f01054b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ba:	8b 40 44             	mov    0x44(%eax),%eax
f01054bd:	85 c0                	test   %eax,%eax
f01054bf:	74 11                	je     f01054d2 <sched_exit_env+0x101>
f01054c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c4:	8b 40 44             	mov    0x44(%eax),%eax
f01054c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054ca:	8b 52 48             	mov    0x48(%edx),%edx
f01054cd:	89 50 48             	mov    %edx,0x48(%eax)
f01054d0:	eb 14                	jmp    f01054e6 <sched_exit_env+0x115>
f01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d5:	8b 40 48             	mov    0x48(%eax),%eax
f01054d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054db:	c1 e2 04             	shl    $0x4,%edx
f01054de:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f01054e4:	89 02                	mov    %eax,(%edx)
f01054e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e9:	8b 40 48             	mov    0x48(%eax),%eax
f01054ec:	85 c0                	test   %eax,%eax
f01054ee:	74 11                	je     f0105501 <sched_exit_env+0x130>
f01054f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f3:	8b 40 48             	mov    0x48(%eax),%eax
f01054f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054f9:	8b 52 44             	mov    0x44(%edx),%edx
f01054fc:	89 50 44             	mov    %edx,0x44(%eax)
f01054ff:	eb 14                	jmp    f0105515 <sched_exit_env+0x144>
f0105501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105504:	8b 40 44             	mov    0x44(%eax),%eax
f0105507:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010550a:	c1 e2 04             	shl    $0x4,%edx
f010550d:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0105513:	89 02                	mov    %eax,(%edx)
f0105515:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105518:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105522:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105529:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010552c:	c1 e0 04             	shl    $0x4,%eax
f010552f:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105534:	8b 00                	mov    (%eax),%eax
f0105536:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105539:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010553c:	c1 e0 04             	shl    $0x4,%eax
f010553f:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105544:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105546:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010554d:	eb 50                	jmp    f010559f <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010554f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105552:	c1 e0 04             	shl    $0x4,%eax
f0105555:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010555a:	8b 00                	mov    (%eax),%eax
f010555c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010555f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105563:	74 08                	je     f010556d <sched_exit_env+0x19c>
f0105565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105568:	8b 40 44             	mov    0x44(%eax),%eax
f010556b:	eb 05                	jmp    f0105572 <sched_exit_env+0x1a1>
f010556d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105572:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105575:	c1 e2 04             	shl    $0x4,%edx
f0105578:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f010557e:	89 02                	mov    %eax,(%edx)
f0105580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105583:	c1 e0 04             	shl    $0x4,%eax
f0105586:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010558b:	8b 00                	mov    (%eax),%eax
f010558d:	85 c0                	test   %eax,%eax
f010558f:	0f 85 f6 fe ff ff    	jne    f010548b <sched_exit_env+0xba>
f0105595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105599:	0f 85 ec fe ff ff    	jne    f010548b <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010559f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055a3:	75 16                	jne    f01055bb <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01055a5:	ff 45 ec             	incl   -0x14(%ebp)
f01055a8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01055ad:	0f b6 c0             	movzbl %al,%eax
f01055b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01055b3:	0f 8f a1 fe ff ff    	jg     f010545a <sched_exit_env+0x89>
f01055b9:	eb 01                	jmp    f01055bc <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01055bb:	90                   	nop
		}
	}
	if (!found)
f01055bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055c0:	75 1c                	jne    f01055de <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01055c2:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01055c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055ca:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055cd:	75 0f                	jne    f01055de <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f01055cf:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01055d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01055d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01055de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055e2:	74 2a                	je     f010560e <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f01055e4:	83 ec 0c             	sub    $0xc,%esp
f01055e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01055ea:	e8 5c fc ff ff       	call   f010524b <sched_insert_exit>
f01055ef:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01055f2:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01055f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055fd:	75 0f                	jne    f010560e <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055ff:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f0105606:	00 00 00 
			fos_scheduler();
f0105609:	e8 0b 0c 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f010560e:	90                   	nop
f010560f:	c9                   	leave  
f0105610:	c3                   	ret    

f0105611 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105611:	55                   	push   %ebp
f0105612:	89 e5                	mov    %esp,%ebp
f0105614:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010561e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105625:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105629:	0f 85 9d 00 00 00    	jne    f01056cc <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562f:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105634:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105637:	eb 64                	jmp    f010569d <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f0105639:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010563f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105642:	75 51                	jne    f0105695 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105647:	8d 50 5c             	lea    0x5c(%eax),%edx
f010564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105650:	83 ec 04             	sub    $0x4,%esp
f0105653:	52                   	push   %edx
f0105654:	50                   	push   %eax
f0105655:	68 24 1c 13 f0       	push   $0xf0131c24
f010565a:	e8 d2 b7 ff ff       	call   f0100e31 <cprintf>
f010565f:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105662:	83 ec 0c             	sub    $0xc,%esp
f0105665:	ff 75 f4             	pushl  -0xc(%ebp)
f0105668:	e8 39 fb ff ff       	call   f01051a6 <sched_remove_new>
f010566d:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105670:	83 ec 0c             	sub    $0xc,%esp
f0105673:	ff 75 f4             	pushl  -0xc(%ebp)
f0105676:	e8 2e 43 00 00       	call   f01099a9 <env_free>
f010567b:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010567e:	83 ec 0c             	sub    $0xc,%esp
f0105681:	68 49 1c 13 f0       	push   $0xf0131c49
f0105686:	e8 a6 b7 ff ff       	call   f0100e31 <cprintf>
f010568b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010568e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105695:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f010569a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010569d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a1:	74 08                	je     f01056ab <sched_kill_env+0x9a>
f01056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056a6:	8b 40 44             	mov    0x44(%eax),%eax
f01056a9:	eb 05                	jmp    f01056b0 <sched_kill_env+0x9f>
f01056ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01056b0:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f01056b5:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f01056ba:	85 c0                	test   %eax,%eax
f01056bc:	0f 85 77 ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
f01056c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056c6:	0f 85 6d ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f01056cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056d0:	0f 85 aa 01 00 00    	jne    f0105880 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056dd:	e9 8a 01 00 00       	jmp    f010586c <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056e5:	c1 e0 04             	shl    $0x4,%eax
f01056e8:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f01056ed:	8b 00                	mov    (%eax),%eax
f01056ef:	85 c0                	test   %eax,%eax
f01056f1:	0f 84 6c 01 00 00    	je     f0105863 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f01056f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105701:	c1 e0 04             	shl    $0x4,%eax
f0105704:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105709:	8b 00                	mov    (%eax),%eax
f010570b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010570e:	e9 10 01 00 00       	jmp    f0105823 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105716:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105719:	3b 45 08             	cmp    0x8(%ebp),%eax
f010571c:	0f 85 f1 00 00 00    	jne    f0105813 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105728:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010572e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105731:	52                   	push   %edx
f0105732:	50                   	push   %eax
f0105733:	68 50 1c 13 f0       	push   $0xf0131c50
f0105738:	e8 f4 b6 ff ff       	call   f0100e31 <cprintf>
f010573d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105744:	75 17                	jne    f010575d <sched_kill_env+0x14c>
f0105746:	83 ec 04             	sub    $0x4,%esp
f0105749:	68 03 1c 13 f0       	push   $0xf0131c03
f010574e:	68 54 01 00 00       	push   $0x154
f0105753:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0105758:	e8 53 aa ff ff       	call   f01001b0 <_panic>
f010575d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105760:	8b 40 44             	mov    0x44(%eax),%eax
f0105763:	85 c0                	test   %eax,%eax
f0105765:	74 11                	je     f0105778 <sched_kill_env+0x167>
f0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576a:	8b 40 44             	mov    0x44(%eax),%eax
f010576d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105770:	8b 52 48             	mov    0x48(%edx),%edx
f0105773:	89 50 48             	mov    %edx,0x48(%eax)
f0105776:	eb 14                	jmp    f010578c <sched_kill_env+0x17b>
f0105778:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577b:	8b 40 48             	mov    0x48(%eax),%eax
f010577e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105781:	c1 e2 04             	shl    $0x4,%edx
f0105784:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f010578a:	89 02                	mov    %eax,(%edx)
f010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578f:	8b 40 48             	mov    0x48(%eax),%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	74 11                	je     f01057a7 <sched_kill_env+0x196>
f0105796:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105799:	8b 40 48             	mov    0x48(%eax),%eax
f010579c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010579f:	8b 52 44             	mov    0x44(%edx),%edx
f01057a2:	89 50 44             	mov    %edx,0x44(%eax)
f01057a5:	eb 14                	jmp    f01057bb <sched_kill_env+0x1aa>
f01057a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057aa:	8b 40 44             	mov    0x44(%eax),%eax
f01057ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b0:	c1 e2 04             	shl    $0x4,%edx
f01057b3:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f01057b9:	89 02                	mov    %eax,(%edx)
f01057bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057be:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057d2:	c1 e0 04             	shl    $0x4,%eax
f01057d5:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f01057da:	8b 00                	mov    (%eax),%eax
f01057dc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01057df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057e2:	c1 e0 04             	shl    $0x4,%eax
f01057e5:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f01057ea:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01057ec:	83 ec 0c             	sub    $0xc,%esp
f01057ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01057f2:	e8 b2 41 00 00       	call   f01099a9 <env_free>
f01057f7:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01057fa:	83 ec 0c             	sub    $0xc,%esp
f01057fd:	68 49 1c 13 f0       	push   $0xf0131c49
f0105802:	e8 2a b6 ff ff       	call   f0100e31 <cprintf>
f0105807:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010580a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105811:	eb 50                	jmp    f0105863 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105816:	c1 e0 04             	shl    $0x4,%eax
f0105819:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010581e:	8b 00                	mov    (%eax),%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105827:	74 08                	je     f0105831 <sched_kill_env+0x220>
f0105829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582c:	8b 40 44             	mov    0x44(%eax),%eax
f010582f:	eb 05                	jmp    f0105836 <sched_kill_env+0x225>
f0105831:	b8 00 00 00 00       	mov    $0x0,%eax
f0105836:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105839:	c1 e2 04             	shl    $0x4,%edx
f010583c:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105842:	89 02                	mov    %eax,(%edx)
f0105844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105847:	c1 e0 04             	shl    $0x4,%eax
f010584a:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010584f:	8b 00                	mov    (%eax),%eax
f0105851:	85 c0                	test   %eax,%eax
f0105853:	0f 85 ba fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
f0105859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585d:	0f 85 b0 fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105863:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105867:	75 16                	jne    f010587f <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105869:	ff 45 ec             	incl   -0x14(%ebp)
f010586c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0105871:	0f b6 c0             	movzbl %al,%eax
f0105874:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105877:	0f 8f 65 fe ff ff    	jg     f01056e2 <sched_kill_env+0xd1>
f010587d:	eb 01                	jmp    f0105880 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f010587f:	90                   	nop
		}
	}
	if (!found)
f0105880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105884:	0f 85 a4 00 00 00    	jne    f010592e <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010588a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105891:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105896:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105899:	eb 64                	jmp    f01058ff <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	75 51                	jne    f01058f7 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058a9:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058af:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b2:	83 ec 04             	sub    $0x4,%esp
f01058b5:	52                   	push   %edx
f01058b6:	50                   	push   %eax
f01058b7:	68 7c 1c 13 f0       	push   $0xf0131c7c
f01058bc:	e8 70 b5 ff ff       	call   f0100e31 <cprintf>
f01058c1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058c4:	83 ec 0c             	sub    $0xc,%esp
f01058c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ca:	e8 bf f9 ff ff       	call   f010528e <sched_remove_exit>
f01058cf:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058d2:	83 ec 0c             	sub    $0xc,%esp
f01058d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d8:	e8 cc 40 00 00       	call   f01099a9 <env_free>
f01058dd:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058e0:	83 ec 0c             	sub    $0xc,%esp
f01058e3:	68 49 1c 13 f0       	push   $0xf0131c49
f01058e8:	e8 44 b5 ff ff       	call   f0100e31 <cprintf>
f01058ed:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058f0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058f7:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f01058fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105903:	74 08                	je     f010590d <sched_kill_env+0x2fc>
f0105905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105908:	8b 40 44             	mov    0x44(%eax),%eax
f010590b:	eb 05                	jmp    f0105912 <sched_kill_env+0x301>
f010590d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105912:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0105917:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f010591c:	85 c0                	test   %eax,%eax
f010591e:	0f 85 77 ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
f0105924:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105928:	0f 85 6d ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f010592e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105932:	0f 85 9d 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f0105938:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010593d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105940:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105943:	0f 85 8c 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f0105949:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010594e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105954:	8b 40 54             	mov    0x54(%eax),%eax
f0105957:	83 f8 02             	cmp    $0x2,%eax
f010595a:	74 19                	je     f0105975 <sched_kill_env+0x364>
f010595c:	68 a4 1c 13 f0       	push   $0xf0131ca4
f0105961:	68 b2 1b 13 f0       	push   $0xf0131bb2
f0105966:	68 77 01 00 00       	push   $0x177
f010596b:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0105970:	e8 3b a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105978:	8d 50 5c             	lea    0x5c(%eax),%edx
f010597b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010597e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105981:	83 ec 04             	sub    $0x4,%esp
f0105984:	52                   	push   %edx
f0105985:	50                   	push   %eax
f0105986:	68 c8 1c 13 f0       	push   $0xf0131cc8
f010598b:	e8 a1 b4 ff ff       	call   f0100e31 <cprintf>
f0105990:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105993:	83 ec 0c             	sub    $0xc,%esp
f0105996:	ff 75 f4             	pushl  -0xc(%ebp)
f0105999:	e8 0b 40 00 00       	call   f01099a9 <env_free>
f010599e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059a1:	83 ec 0c             	sub    $0xc,%esp
f01059a4:	68 49 1c 13 f0       	push   $0xf0131c49
f01059a9:	e8 83 b4 ff ff       	call   f0100e31 <cprintf>
f01059ae:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059b8:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01059bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01059c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059c3:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059c6:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01059cd:	00 00 00 
			fos_scheduler();
f01059d0:	e8 44 08 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f01059d5:	90                   	nop
f01059d6:	c9                   	leave  
f01059d7:	c3                   	ret    

f01059d8 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f01059d8:	55                   	push   %ebp
f01059d9:	89 e5                	mov    %esp,%ebp
f01059db:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01059de:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01059e3:	85 c0                	test   %eax,%eax
f01059e5:	74 69                	je     f0105a50 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01059e7:	83 ec 0c             	sub    $0xc,%esp
f01059ea:	68 f4 1c 13 f0       	push   $0xf0131cf4
f01059ef:	e8 3d b4 ff ff       	call   f0100e31 <cprintf>
f01059f4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059f7:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f01059fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059ff:	eb 26                	jmp    f0105a27 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a04:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a0a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a0d:	83 ec 04             	sub    $0x4,%esp
f0105a10:	52                   	push   %edx
f0105a11:	50                   	push   %eax
f0105a12:	68 16 1d 13 f0       	push   $0xf0131d16
f0105a17:	e8 15 b4 ff ff       	call   f0100e31 <cprintf>
f0105a1c:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a1f:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a2b:	74 08                	je     f0105a35 <sched_print_all+0x5d>
f0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a30:	8b 40 44             	mov    0x44(%eax),%eax
f0105a33:	eb 05                	jmp    f0105a3a <sched_print_all+0x62>
f0105a35:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a3a:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105a3f:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105a44:	85 c0                	test   %eax,%eax
f0105a46:	75 b9                	jne    f0105a01 <sched_print_all+0x29>
f0105a48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a4c:	75 b3                	jne    f0105a01 <sched_print_all+0x29>
f0105a4e:	eb 10                	jmp    f0105a60 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 20 1d 13 f0       	push   $0xf0131d20
f0105a58:	e8 d4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a60:	83 ec 0c             	sub    $0xc,%esp
f0105a63:	68 3c 1d 13 f0       	push   $0xf0131d3c
f0105a68:	e8 c4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a6d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a77:	e9 c8 00 00 00       	jmp    f0105b44 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7f:	c1 e0 04             	shl    $0x4,%eax
f0105a82:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105a87:	8b 00                	mov    (%eax),%eax
f0105a89:	85 c0                	test   %eax,%eax
f0105a8b:	0f 84 8d 00 00 00    	je     f0105b1e <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a91:	83 ec 08             	sub    $0x8,%esp
f0105a94:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a97:	68 70 1d 13 f0       	push   $0xf0131d70
f0105a9c:	e8 90 b3 ff ff       	call   f0100e31 <cprintf>
f0105aa1:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aa7:	c1 e0 04             	shl    $0x4,%eax
f0105aaa:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105aaf:	8b 00                	mov    (%eax),%eax
f0105ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ab4:	eb 2e                	jmp    f0105ae4 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ab9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105abf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ac2:	83 ec 04             	sub    $0x4,%esp
f0105ac5:	52                   	push   %edx
f0105ac6:	50                   	push   %eax
f0105ac7:	68 16 1d 13 f0       	push   $0xf0131d16
f0105acc:	e8 60 b3 ff ff       	call   f0100e31 <cprintf>
f0105ad1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ad7:	c1 e0 04             	shl    $0x4,%eax
f0105ada:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105adf:	8b 00                	mov    (%eax),%eax
f0105ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae8:	74 08                	je     f0105af2 <sched_print_all+0x11a>
f0105aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aed:	8b 40 44             	mov    0x44(%eax),%eax
f0105af0:	eb 05                	jmp    f0105af7 <sched_print_all+0x11f>
f0105af2:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105afa:	c1 e2 04             	shl    $0x4,%edx
f0105afd:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105b03:	89 02                	mov    %eax,(%edx)
f0105b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105b08:	c1 e0 04             	shl    $0x4,%eax
f0105b0b:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105b10:	8b 00                	mov    (%eax),%eax
f0105b12:	85 c0                	test   %eax,%eax
f0105b14:	75 a0                	jne    f0105ab6 <sched_print_all+0xde>
f0105b16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b1a:	75 9a                	jne    f0105ab6 <sched_print_all+0xde>
f0105b1c:	eb 13                	jmp    f0105b31 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105b1e:	83 ec 08             	sub    $0x8,%esp
f0105b21:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b24:	68 98 1d 13 f0       	push   $0xf0131d98
f0105b29:	e8 03 b3 ff ff       	call   f0100e31 <cprintf>
f0105b2e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105b31:	83 ec 0c             	sub    $0xc,%esp
f0105b34:	68 3c 1d 13 f0       	push   $0xf0131d3c
f0105b39:	e8 f3 b2 ff ff       	call   f0100e31 <cprintf>
f0105b3e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b41:	ff 45 f0             	incl   -0x10(%ebp)
f0105b44:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0105b49:	0f b6 c0             	movzbl %al,%eax
f0105b4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105b4f:	0f 8f 27 ff ff ff    	jg     f0105a7c <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105b55:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105b5a:	85 c0                	test   %eax,%eax
f0105b5c:	74 69                	je     f0105bc7 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b5e:	83 ec 0c             	sub    $0xc,%esp
f0105b61:	68 bc 1d 13 f0       	push   $0xf0131dbc
f0105b66:	e8 c6 b2 ff ff       	call   f0100e31 <cprintf>
f0105b6b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b6e:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b76:	eb 26                	jmp    f0105b9e <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b7b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b81:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b84:	83 ec 04             	sub    $0x4,%esp
f0105b87:	52                   	push   %edx
f0105b88:	50                   	push   %eax
f0105b89:	68 16 1d 13 f0       	push   $0xf0131d16
f0105b8e:	e8 9e b2 ff ff       	call   f0100e31 <cprintf>
f0105b93:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b96:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba2:	74 08                	je     f0105bac <sched_print_all+0x1d4>
f0105ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba7:	8b 40 44             	mov    0x44(%eax),%eax
f0105baa:	eb 05                	jmp    f0105bb1 <sched_print_all+0x1d9>
f0105bac:	b8 00 00 00 00       	mov    $0x0,%eax
f0105bb1:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0105bb6:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105bbb:	85 c0                	test   %eax,%eax
f0105bbd:	75 b9                	jne    f0105b78 <sched_print_all+0x1a0>
f0105bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bc3:	75 b3                	jne    f0105b78 <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105bc5:	eb 10                	jmp    f0105bd7 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105bc7:	83 ec 0c             	sub    $0xc,%esp
f0105bca:	68 de 1d 13 f0       	push   $0xf0131dde
f0105bcf:	e8 5d b2 ff ff       	call   f0100e31 <cprintf>
f0105bd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0105bd7:	90                   	nop
f0105bd8:	c9                   	leave  
f0105bd9:	c3                   	ret    

f0105bda <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105bda:	55                   	push   %ebp
f0105bdb:	89 e5                	mov    %esp,%ebp
f0105bdd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105be7:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bef:	eb 24                	jmp    f0105c15 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105bf1:	83 ec 0c             	sub    $0xc,%esp
f0105bf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105bf7:	e8 aa f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105bfc:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105bff:	83 ec 0c             	sub    $0xc,%esp
f0105c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c05:	e8 30 f4 ff ff       	call   f010503a <sched_insert_ready0>
f0105c0a:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105c0d:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c19:	74 08                	je     f0105c23 <sched_run_all+0x49>
f0105c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c1e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c21:	eb 05                	jmp    f0105c28 <sched_run_all+0x4e>
f0105c23:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c28:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105c2d:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105c32:	85 c0                	test   %eax,%eax
f0105c34:	75 bb                	jne    f0105bf1 <sched_run_all+0x17>
f0105c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c3a:	75 b5                	jne    f0105bf1 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105c3c:	a1 f4 be 2b f0       	mov    0xf02bbef4,%eax
f0105c41:	85 c0                	test   %eax,%eax
f0105c43:	75 05                	jne    f0105c4a <sched_run_all+0x70>
		fos_scheduler();
f0105c45:	e8 cf 05 00 00       	call   f0106219 <fos_scheduler>
}
f0105c4a:	90                   	nop
f0105c4b:	c9                   	leave  
f0105c4c:	c3                   	ret    

f0105c4d <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105c4d:	55                   	push   %ebp
f0105c4e:	89 e5                	mov    %esp,%ebp
f0105c50:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105c53:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105c58:	85 c0                	test   %eax,%eax
f0105c5a:	0f 84 95 00 00 00    	je     f0105cf5 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c60:	83 ec 0c             	sub    $0xc,%esp
f0105c63:	68 fc 1d 13 f0       	push   $0xf0131dfc
f0105c68:	e8 c4 b1 ff ff       	call   f0100e31 <cprintf>
f0105c6d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c70:	a1 d8 be 2b f0       	mov    0xf02bbed8,%eax
f0105c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c78:	eb 52                	jmp    f0105ccc <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c7d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c83:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c86:	83 ec 04             	sub    $0x4,%esp
f0105c89:	52                   	push   %edx
f0105c8a:	50                   	push   %eax
f0105c8b:	68 28 1e 13 f0       	push   $0xf0131e28
f0105c90:	e8 9c b1 ff ff       	call   f0100e31 <cprintf>
f0105c95:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c98:	83 ec 0c             	sub    $0xc,%esp
f0105c9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c9e:	e8 03 f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105ca3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105ca6:	83 ec 0c             	sub    $0xc,%esp
f0105ca9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cac:	e8 f8 3c 00 00       	call   f01099a9 <env_free>
f0105cb1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105cb4:	83 ec 0c             	sub    $0xc,%esp
f0105cb7:	68 49 1c 13 f0       	push   $0xf0131c49
f0105cbc:	e8 70 b1 ff ff       	call   f0100e31 <cprintf>
f0105cc1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105cc4:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ccc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cd0:	74 08                	je     f0105cda <sched_kill_all+0x8d>
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 44             	mov    0x44(%eax),%eax
f0105cd8:	eb 05                	jmp    f0105cdf <sched_kill_all+0x92>
f0105cda:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cdf:	a3 e0 be 2b f0       	mov    %eax,0xf02bbee0
f0105ce4:	a1 e0 be 2b f0       	mov    0xf02bbee0,%eax
f0105ce9:	85 c0                	test   %eax,%eax
f0105ceb:	75 8d                	jne    f0105c7a <sched_kill_all+0x2d>
f0105ced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cf1:	75 87                	jne    f0105c7a <sched_kill_all+0x2d>
f0105cf3:	eb 10                	jmp    f0105d05 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105cf5:	83 ec 0c             	sub    $0xc,%esp
f0105cf8:	68 3b 1e 13 f0       	push   $0xf0131e3b
f0105cfd:	e8 2f b1 ff ff       	call   f0100e31 <cprintf>
f0105d02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105d05:	83 ec 0c             	sub    $0xc,%esp
f0105d08:	68 3c 1d 13 f0       	push   $0xf0131d3c
f0105d0d:	e8 1f b1 ff ff       	call   f0100e31 <cprintf>
f0105d12:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105d1c:	e9 9d 01 00 00       	jmp    f0105ebe <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d24:	c1 e0 04             	shl    $0x4,%eax
f0105d27:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105d2c:	8b 00                	mov    (%eax),%eax
f0105d2e:	85 c0                	test   %eax,%eax
f0105d30:	0f 84 62 01 00 00    	je     f0105e98 <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105d36:	83 ec 08             	sub    $0x8,%esp
f0105d39:	ff 75 f0             	pushl  -0x10(%ebp)
f0105d3c:	68 58 1e 13 f0       	push   $0xf0131e58
f0105d41:	e8 eb b0 ff ff       	call   f0100e31 <cprintf>
f0105d46:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d4c:	c1 e0 04             	shl    $0x4,%eax
f0105d4f:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105d54:	8b 00                	mov    (%eax),%eax
f0105d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d59:	e9 f8 00 00 00       	jmp    f0105e56 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d61:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d67:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d6a:	83 ec 04             	sub    $0x4,%esp
f0105d6d:	52                   	push   %edx
f0105d6e:	50                   	push   %eax
f0105d6f:	68 28 1e 13 f0       	push   $0xf0131e28
f0105d74:	e8 b8 b0 ff ff       	call   f0100e31 <cprintf>
f0105d79:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d80:	75 17                	jne    f0105d99 <sched_kill_all+0x14c>
f0105d82:	83 ec 04             	sub    $0x4,%esp
f0105d85:	68 03 1c 13 f0       	push   $0xf0131c03
f0105d8a:	68 e5 01 00 00       	push   $0x1e5
f0105d8f:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0105d94:	e8 17 a4 ff ff       	call   f01001b0 <_panic>
f0105d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d9c:	8b 40 44             	mov    0x44(%eax),%eax
f0105d9f:	85 c0                	test   %eax,%eax
f0105da1:	74 11                	je     f0105db4 <sched_kill_all+0x167>
f0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105da6:	8b 40 44             	mov    0x44(%eax),%eax
f0105da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105dac:	8b 52 48             	mov    0x48(%edx),%edx
f0105daf:	89 50 48             	mov    %edx,0x48(%eax)
f0105db2:	eb 14                	jmp    f0105dc8 <sched_kill_all+0x17b>
f0105db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db7:	8b 40 48             	mov    0x48(%eax),%eax
f0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dbd:	c1 e2 04             	shl    $0x4,%edx
f0105dc0:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f0105dc6:	89 02                	mov    %eax,(%edx)
f0105dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dcb:	8b 40 48             	mov    0x48(%eax),%eax
f0105dce:	85 c0                	test   %eax,%eax
f0105dd0:	74 11                	je     f0105de3 <sched_kill_all+0x196>
f0105dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd5:	8b 40 48             	mov    0x48(%eax),%eax
f0105dd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ddb:	8b 52 44             	mov    0x44(%edx),%edx
f0105dde:	89 50 44             	mov    %edx,0x44(%eax)
f0105de1:	eb 14                	jmp    f0105df7 <sched_kill_all+0x1aa>
f0105de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105de6:	8b 40 44             	mov    0x44(%eax),%eax
f0105de9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dec:	c1 e2 04             	shl    $0x4,%edx
f0105def:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0105df5:	89 02                	mov    %eax,(%edx)
f0105df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dfa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e04:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e0e:	c1 e0 04             	shl    $0x4,%eax
f0105e11:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105e16:	8b 00                	mov    (%eax),%eax
f0105e18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e1e:	c1 e0 04             	shl    $0x4,%eax
f0105e21:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0105e26:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105e28:	83 ec 0c             	sub    $0xc,%esp
f0105e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105e2e:	e8 76 3b 00 00       	call   f01099a9 <env_free>
f0105e33:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105e36:	83 ec 0c             	sub    $0xc,%esp
f0105e39:	68 49 1c 13 f0       	push   $0xf0131c49
f0105e3e:	e8 ee af ff ff       	call   f0100e31 <cprintf>
f0105e43:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e49:	c1 e0 04             	shl    $0x4,%eax
f0105e4c:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105e51:	8b 00                	mov    (%eax),%eax
f0105e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e5a:	74 08                	je     f0105e64 <sched_kill_all+0x217>
f0105e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5f:	8b 40 44             	mov    0x44(%eax),%eax
f0105e62:	eb 05                	jmp    f0105e69 <sched_kill_all+0x21c>
f0105e64:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6c:	c1 e2 04             	shl    $0x4,%edx
f0105e6f:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f0105e75:	89 02                	mov    %eax,(%edx)
f0105e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e7a:	c1 e0 04             	shl    $0x4,%eax
f0105e7d:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f0105e82:	8b 00                	mov    (%eax),%eax
f0105e84:	85 c0                	test   %eax,%eax
f0105e86:	0f 85 d2 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e90:	0f 85 c8 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e96:	eb 13                	jmp    f0105eab <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e98:	83 ec 08             	sub    $0x8,%esp
f0105e9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e9e:	68 98 1d 13 f0       	push   $0xf0131d98
f0105ea3:	e8 89 af ff ff       	call   f0100e31 <cprintf>
f0105ea8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105eab:	83 ec 0c             	sub    $0xc,%esp
f0105eae:	68 3c 1d 13 f0       	push   $0xf0131d3c
f0105eb3:	e8 79 af ff ff       	call   f0100e31 <cprintf>
f0105eb8:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ebb:	ff 45 f0             	incl   -0x10(%ebp)
f0105ebe:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0105ec3:	0f b6 c0             	movzbl %al,%eax
f0105ec6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105ec9:	0f 8f 52 fe ff ff    	jg     f0105d21 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105ecf:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105ed4:	85 c0                	test   %eax,%eax
f0105ed6:	0f 84 95 00 00 00    	je     f0105f71 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105edc:	83 ec 0c             	sub    $0xc,%esp
f0105edf:	68 8c 1e 13 f0       	push   $0xf0131e8c
f0105ee4:	e8 48 af ff ff       	call   f0100e31 <cprintf>
f0105ee9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105eec:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0105ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ef4:	eb 52                	jmp    f0105f48 <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ef9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105f02:	83 ec 04             	sub    $0x4,%esp
f0105f05:	52                   	push   %edx
f0105f06:	50                   	push   %eax
f0105f07:	68 28 1e 13 f0       	push   $0xf0131e28
f0105f0c:	e8 20 af ff ff       	call   f0100e31 <cprintf>
f0105f11:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105f14:	83 ec 0c             	sub    $0xc,%esp
f0105f17:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f1a:	e8 6f f3 ff ff       	call   f010528e <sched_remove_exit>
f0105f1f:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105f22:	83 ec 0c             	sub    $0xc,%esp
f0105f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f28:	e8 7c 3a 00 00       	call   f01099a9 <env_free>
f0105f2d:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105f30:	83 ec 0c             	sub    $0xc,%esp
f0105f33:	68 49 1c 13 f0       	push   $0xf0131c49
f0105f38:	e8 f4 ae ff ff       	call   f0100e31 <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f40:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4c:	74 08                	je     f0105f56 <sched_kill_all+0x309>
f0105f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f51:	8b 40 44             	mov    0x44(%eax),%eax
f0105f54:	eb 05                	jmp    f0105f5b <sched_kill_all+0x30e>
f0105f56:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f5b:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0105f60:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0105f65:	85 c0                	test   %eax,%eax
f0105f67:	75 8d                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f6d:	75 87                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f6f:	eb 10                	jmp    f0105f81 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f71:	83 ec 0c             	sub    $0xc,%esp
f0105f74:	68 de 1d 13 f0       	push   $0xf0131dde
f0105f79:	e8 b3 ae ff ff       	call   f0100e31 <cprintf>
f0105f7e:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f81:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f0105f88:	00 00 00 
	fos_scheduler();
f0105f8b:	e8 89 02 00 00       	call   f0106219 <fos_scheduler>

f0105f90 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f90:	55                   	push   %ebp
f0105f91:	89 e5                	mov    %esp,%ebp
f0105f93:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105fa4:	e9 3e 01 00 00       	jmp    f01060e7 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fac:	c1 e0 04             	shl    $0x4,%eax
f0105faf:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105fb4:	8b 00                	mov    (%eax),%eax
f0105fb6:	85 c0                	test   %eax,%eax
f0105fb8:	0f 84 26 01 00 00    	je     f01060e4 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105fbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fc8:	c1 e0 04             	shl    $0x4,%eax
f0105fcb:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f0105fd0:	8b 00                	mov    (%eax),%eax
f0105fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fd5:	e9 ca 00 00 00       	jmp    f01060a4 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105fda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fde:	75 17                	jne    f0105ff7 <sched_exit_all_ready_envs+0x67>
f0105fe0:	83 ec 04             	sub    $0x4,%esp
f0105fe3:	68 03 1c 13 f0       	push   $0xf0131c03
f0105fe8:	68 14 02 00 00       	push   $0x214
f0105fed:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0105ff2:	e8 b9 a1 ff ff       	call   f01001b0 <_panic>
f0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ffa:	8b 40 44             	mov    0x44(%eax),%eax
f0105ffd:	85 c0                	test   %eax,%eax
f0105fff:	74 11                	je     f0106012 <sched_exit_all_ready_envs+0x82>
f0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106004:	8b 40 44             	mov    0x44(%eax),%eax
f0106007:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010600a:	8b 52 48             	mov    0x48(%edx),%edx
f010600d:	89 50 48             	mov    %edx,0x48(%eax)
f0106010:	eb 14                	jmp    f0106026 <sched_exit_all_ready_envs+0x96>
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	8b 40 48             	mov    0x48(%eax),%eax
f0106018:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010601b:	c1 e2 04             	shl    $0x4,%edx
f010601e:	81 c2 44 3b 25 f0    	add    $0xf0253b44,%edx
f0106024:	89 02                	mov    %eax,(%edx)
f0106026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106029:	8b 40 48             	mov    0x48(%eax),%eax
f010602c:	85 c0                	test   %eax,%eax
f010602e:	74 11                	je     f0106041 <sched_exit_all_ready_envs+0xb1>
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8b 40 48             	mov    0x48(%eax),%eax
f0106036:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106039:	8b 52 44             	mov    0x44(%edx),%edx
f010603c:	89 50 44             	mov    %edx,0x44(%eax)
f010603f:	eb 14                	jmp    f0106055 <sched_exit_all_ready_envs+0xc5>
f0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106044:	8b 40 44             	mov    0x44(%eax),%eax
f0106047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010604a:	c1 e2 04             	shl    $0x4,%edx
f010604d:	81 c2 40 3b 25 f0    	add    $0xf0253b40,%edx
f0106053:	89 02                	mov    %eax,(%edx)
f0106055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106058:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106062:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106069:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010606c:	c1 e0 04             	shl    $0x4,%eax
f010606f:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0106074:	8b 00                	mov    (%eax),%eax
f0106076:	8d 50 ff             	lea    -0x1(%eax),%edx
f0106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010607c:	c1 e0 04             	shl    $0x4,%eax
f010607f:	05 4c 3b 25 f0       	add    $0xf0253b4c,%eax
f0106084:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106086:	83 ec 0c             	sub    $0xc,%esp
f0106089:	ff 75 f4             	pushl  -0xc(%ebp)
f010608c:	e8 ba f1 ff ff       	call   f010524b <sched_insert_exit>
f0106091:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106094:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106097:	c1 e0 04             	shl    $0x4,%eax
f010609a:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f010609f:	8b 00                	mov    (%eax),%eax
f01060a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060a8:	74 08                	je     f01060b2 <sched_exit_all_ready_envs+0x122>
f01060aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ad:	8b 40 44             	mov    0x44(%eax),%eax
f01060b0:	eb 05                	jmp    f01060b7 <sched_exit_all_ready_envs+0x127>
f01060b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01060b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060ba:	c1 e2 04             	shl    $0x4,%edx
f01060bd:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f01060c3:	89 02                	mov    %eax,(%edx)
f01060c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c8:	c1 e0 04             	shl    $0x4,%eax
f01060cb:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f01060d0:	8b 00                	mov    (%eax),%eax
f01060d2:	85 c0                	test   %eax,%eax
f01060d4:	0f 85 00 ff ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
f01060da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060de:	0f 85 f6 fe ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01060e4:	ff 45 f0             	incl   -0x10(%ebp)
f01060e7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01060ec:	0f b6 c0             	movzbl %al,%eax
f01060ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01060f2:	0f 8f b1 fe ff ff    	jg     f0105fa9 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01060f8:	90                   	nop
f01060f9:	c9                   	leave  
f01060fa:	c3                   	ret    

f01060fb <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f01060fb:	55                   	push   %ebp
f01060fc:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060fe:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f0106103:	8b 15 04 bf 2b f0    	mov    0xf02bbf04,%edx
}
f0106109:	5d                   	pop    %ebp
f010610a:	c3                   	ret    

f010610b <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010610b:	55                   	push   %ebp
f010610c:	89 e5                	mov    %esp,%ebp
f010610e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106111:	83 ec 04             	sub    $0x4,%esp
f0106114:	68 b8 1e 13 f0       	push   $0xf0131eb8
f0106119:	68 26 02 00 00       	push   $0x226
f010611e:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0106123:	e8 88 a0 ff ff       	call   f01001b0 <_panic>

f0106128 <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0106128:	55                   	push   %ebp
f0106129:	89 e5                	mov    %esp,%ebp
f010612b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010612e:	83 ec 04             	sub    $0x4,%esp
f0106131:	68 b8 1e 13 f0       	push   $0xf0131eb8
f0106136:	68 2e 02 00 00       	push   $0x22e
f010613b:	68 c7 1b 13 f0       	push   $0xf0131bc7
f0106140:	e8 6b a0 ff ff       	call   f01001b0 <_panic>

f0106145 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0106145:	55                   	push   %ebp
f0106146:	89 e5                	mov    %esp,%ebp
f0106148:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010614b:	83 ec 04             	sub    $0x4,%esp
f010614e:	68 b8 1e 13 f0       	push   $0xf0131eb8
f0106153:	68 35 02 00 00       	push   $0x235
f0106158:	68 c7 1b 13 f0       	push   $0xf0131bc7
f010615d:	e8 4e a0 ff ff       	call   f01001b0 <_panic>

f0106162 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106162:	55                   	push   %ebp
f0106163:	89 e5                	mov    %esp,%ebp
f0106165:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106168:	83 ec 04             	sub    $0x4,%esp
f010616b:	68 b8 1e 13 f0       	push   $0xf0131eb8
f0106170:	68 3d 02 00 00       	push   $0x23d
f0106175:	68 c7 1b 13 f0       	push   $0xf0131bc7
f010617a:	e8 31 a0 ff ff       	call   f01001b0 <_panic>

f010617f <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010617f:	55                   	push   %ebp
f0106180:	89 e5                	mov    %esp,%ebp
f0106182:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f0106187:	85 c0                	test   %eax,%eax
f0106189:	75 07                	jne    f0106192 <isSchedMethodRR+0x13>
f010618b:	b8 01 00 00 00       	mov    $0x1,%eax
f0106190:	eb 05                	jmp    f0106197 <isSchedMethodRR+0x18>
f0106192:	b8 00 00 00 00       	mov    $0x0,%eax
f0106197:	5d                   	pop    %ebp
f0106198:	c3                   	ret    

f0106199 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106199:	55                   	push   %ebp
f010619a:	89 e5                	mov    %esp,%ebp
f010619c:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f01061a1:	83 f8 01             	cmp    $0x1,%eax
f01061a4:	75 07                	jne    f01061ad <isSchedMethodMLFQ+0x14>
f01061a6:	b8 01 00 00 00       	mov    $0x1,%eax
f01061ab:	eb 05                	jmp    f01061b2 <isSchedMethodMLFQ+0x19>
f01061ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01061b2:	5d                   	pop    %ebp
f01061b3:	c3                   	ret    

f01061b4 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f01061b4:	55                   	push   %ebp
f01061b5:	89 e5                	mov    %esp,%ebp
f01061b7:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f01061bc:	83 f8 02             	cmp    $0x2,%eax
f01061bf:	75 07                	jne    f01061c8 <isSchedMethodBSD+0x14>
f01061c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01061c6:	eb 05                	jmp    f01061cd <isSchedMethodBSD+0x19>
f01061c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01061cd:	5d                   	pop    %ebp
f01061ce:	c3                   	ret    

f01061cf <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f01061cf:	55                   	push   %ebp
f01061d0:	89 e5                	mov    %esp,%ebp
f01061d2:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01061d5:	c7 05 b4 9a 2b f0 00 	movl   $0x0,0xf02b9ab4
f01061dc:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f01061df:	83 ec 0c             	sub    $0xc,%esp
f01061e2:	6a 0a                	push   $0xa
f01061e4:	e8 2b 01 00 00       	call   f0106314 <sched_init_RR>
f01061e9:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01061ec:	83 ec 0c             	sub    $0xc,%esp
f01061ef:	68 d8 be 2b f0       	push   $0xf02bbed8
f01061f4:	e8 8b eb ff ff       	call   f0104d84 <init_queue>
f01061f9:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01061fc:	83 ec 0c             	sub    $0xc,%esp
f01061ff:	68 a4 9a 2b f0       	push   $0xf02b9aa4
f0106204:	e8 7b eb ff ff       	call   f0104d84 <init_queue>
f0106209:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010620c:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f0106213:	00 00 00 
}
f0106216:	90                   	nop
f0106217:	c9                   	leave  
f0106218:	c3                   	ret    

f0106219 <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0106219:	55                   	push   %ebp
f010621a:	89 e5                	mov    %esp,%ebp
f010621c:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f010621f:	e8 c0 7e 02 00       	call   f012e0e4 <chk1>
	scheduler_status = SCH_STARTED;
f0106224:	c7 05 f4 be 2b f0 01 	movl   $0x1,0xf02bbef4
f010622b:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010622e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0106235:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f010623a:	85 c0                	test   %eax,%eax
f010623c:	75 48                	jne    f0106286 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010623e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0106243:	85 c0                	test   %eax,%eax
f0106245:	74 16                	je     f010625d <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0106247:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010624c:	83 ec 08             	sub    $0x8,%esp
f010624f:	50                   	push   %eax
f0106250:	68 40 3b 25 f0       	push   $0xf0253b40
f0106255:	e8 6b eb ff ff       	call   f0104dc5 <enqueue>
f010625a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010625d:	83 ec 0c             	sub    $0xc,%esp
f0106260:	68 40 3b 25 f0       	push   $0xf0253b40
f0106265:	e8 ec eb ff ff       	call   f0104e56 <dequeue>
f010626a:	83 c4 10             	add    $0x10,%esp
f010626d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106270:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f0106275:	0f b6 c0             	movzbl %al,%eax
f0106278:	83 ec 0c             	sub    $0xc,%esp
f010627b:	50                   	push   %eax
f010627c:	e8 31 e9 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106281:	83 c4 10             	add    $0x10,%esp
f0106284:	eb 26                	jmp    f01062ac <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106286:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f010628b:	83 f8 01             	cmp    $0x1,%eax
f010628e:	75 0a                	jne    f010629a <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106290:	e8 f9 00 00 00       	call   f010638e <fos_scheduler_MLFQ>
f0106295:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106298:	eb 12                	jmp    f01062ac <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010629a:	a1 e8 be 2b f0       	mov    0xf02bbee8,%eax
f010629f:	83 f8 02             	cmp    $0x2,%eax
f01062a2:	75 08                	jne    f01062ac <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f01062a4:	e8 02 01 00 00       	call   f01063ab <fos_scheduler_BSD>
f01062a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01062ac:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01062b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01062b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b7:	a3 54 32 25 f0       	mov    %eax,0xf0253254
	chk2(next_env) ;
f01062bc:	83 ec 0c             	sub    $0xc,%esp
f01062bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c2:	e8 5a 7e 02 00       	call   f012e121 <chk2>
f01062c7:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01062ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cd:	a3 54 32 25 f0       	mov    %eax,0xf0253254

	//sched_print_all();

	if(next_env != NULL)
f01062d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01062d6:	74 0b                	je     f01062e3 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01062d8:	83 ec 0c             	sub    $0xc,%esp
f01062db:	ff 75 f4             	pushl  -0xc(%ebp)
f01062de:	e8 69 36 00 00       	call   f010994c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01062e3:	c7 05 54 32 25 f0 00 	movl   $0x0,0xf0253254
f01062ea:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01062ed:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01062f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062f8:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01062fb:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f0106302:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0106305:	83 ec 0c             	sub    $0xc,%esp
f0106308:	6a 00                	push   $0x0
f010630a:	e8 41 b8 ff ff       	call   f0101b50 <run_command_prompt>
f010630f:	83 c4 10             	add    $0x10,%esp
f0106312:	eb f1                	jmp    f0106305 <fos_scheduler+0xec>

f0106314 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0106314:	55                   	push   %ebp
f0106315:	89 e5                	mov    %esp,%ebp
f0106317:	83 ec 18             	sub    $0x18,%esp
f010631a:	8b 45 08             	mov    0x8(%ebp),%eax
f010631d:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0106320:	c6 05 14 bf 2b f0 01 	movb   $0x1,0xf02bbf14
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0106327:	8a 45 f4             	mov    -0xc(%ebp),%al
f010632a:	a2 c8 be 2b f0       	mov    %al,0xf02bbec8
	kclock_set_quantum(quantums[0]);
f010632f:	a0 c8 be 2b f0       	mov    0xf02bbec8,%al
f0106334:	0f b6 c0             	movzbl %al,%eax
f0106337:	83 ec 0c             	sub    $0xc,%esp
f010633a:	50                   	push   %eax
f010633b:	e8 72 e8 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106340:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106343:	83 ec 0c             	sub    $0xc,%esp
f0106346:	68 40 3b 25 f0       	push   $0xf0253b40
f010634b:	e8 34 ea ff ff       	call   f0104d84 <init_queue>
f0106350:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106353:	c7 05 f4 be 2b f0 00 	movl   $0x0,0xf02bbef4
f010635a:	00 00 00 
	scheduler_method = SCH_RR;
f010635d:	c7 05 e8 be 2b f0 00 	movl   $0x0,0xf02bbee8
f0106364:	00 00 00 
	//=========================================
	//=========================================
}
f0106367:	90                   	nop
f0106368:	c9                   	leave  
f0106369:	c3                   	ret    

f010636a <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010636a:	55                   	push   %ebp
f010636b:	89 e5                	mov    %esp,%ebp
f010636d:	83 ec 04             	sub    $0x4,%esp
f0106370:	8b 45 08             	mov    0x8(%ebp),%eax
f0106373:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106376:	90                   	nop
f0106377:	c9                   	leave  
f0106378:	c3                   	ret    

f0106379 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106379:	55                   	push   %ebp
f010637a:	89 e5                	mov    %esp,%ebp
f010637c:	83 ec 08             	sub    $0x8,%esp
f010637f:	8b 55 08             	mov    0x8(%ebp),%edx
f0106382:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106385:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0106388:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010638b:	90                   	nop
f010638c:	c9                   	leave  
f010638d:	c3                   	ret    

f010638e <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f010638e:	55                   	push   %ebp
f010638f:	89 e5                	mov    %esp,%ebp
f0106391:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106394:	83 ec 04             	sub    $0x4,%esp
f0106397:	68 cc 1e 13 f0       	push   $0xf0131ecc
f010639c:	68 b9 00 00 00       	push   $0xb9
f01063a1:	68 dc 1e 13 f0       	push   $0xf0131edc
f01063a6:	e8 05 9e ff ff       	call   f01001b0 <_panic>

f01063ab <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f01063ab:	55                   	push   %ebp
f01063ac:	89 e5                	mov    %esp,%ebp
f01063ae:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01063b1:	83 ec 04             	sub    $0x4,%esp
f01063b4:	68 ed 1e 13 f0       	push   $0xf0131eed
f01063b9:	68 c5 00 00 00       	push   $0xc5
f01063be:	68 dc 1e 13 f0       	push   $0xf0131edc
f01063c3:	e8 e8 9d ff ff       	call   f01001b0 <_panic>

f01063c8 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01063c8:	55                   	push   %ebp
f01063c9:	89 e5                	mov    %esp,%ebp
f01063cb:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01063ce:	a1 00 bf 2b f0       	mov    0xf02bbf00,%eax
f01063d3:	8b 15 04 bf 2b f0    	mov    0xf02bbf04,%edx
f01063d9:	83 c0 01             	add    $0x1,%eax
f01063dc:	83 d2 00             	adc    $0x0,%edx
f01063df:	a3 00 bf 2b f0       	mov    %eax,0xf02bbf00
f01063e4:	89 15 04 bf 2b f0    	mov    %edx,0xf02bbf04
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01063ea:	83 ec 0c             	sub    $0xc,%esp
f01063ed:	6a 01                	push   $0x1
f01063ef:	e8 5c 73 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f01063f4:	83 c4 10             	add    $0x10,%esp
f01063f7:	85 c0                	test   %eax,%eax
f01063f9:	74 05                	je     f0106400 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01063fb:	e8 05 00 00 00       	call   f0106405 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106400:	e8 14 fe ff ff       	call   f0106219 <fos_scheduler>

f0106405 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106405:	55                   	push   %ebp
f0106406:	89 e5                	mov    %esp,%ebp
f0106408:	53                   	push   %ebx
f0106409:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010640c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0106411:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106414:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106418:	0f 84 a9 01 00 00    	je     f01065c7 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010641e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106425:	e9 9f 00 00 00       	jmp    f01064c9 <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010642a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010642d:	89 d0                	mov    %edx,%eax
f010642f:	01 c0                	add    %eax,%eax
f0106431:	01 d0                	add    %edx,%eax
f0106433:	c1 e0 03             	shl    $0x3,%eax
f0106436:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643f:	01 d0                	add    %edx,%eax
f0106441:	83 c0 08             	add    $0x8,%eax
f0106444:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f0106447:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010644a:	8a 40 04             	mov    0x4(%eax),%al
f010644d:	3c 01                	cmp    $0x1,%al
f010644f:	74 74                	je     f01064c5 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106454:	8b 00                	mov    (%eax),%eax
f0106456:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106459:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010645c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106462:	83 ec 08             	sub    $0x8,%esp
f0106465:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106468:	50                   	push   %eax
f0106469:	e8 75 1c 00 00       	call   f01080e3 <pt_get_page_permissions>
f010646e:	83 c4 10             	add    $0x10,%esp
f0106471:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106477:	8b 40 08             	mov    0x8(%eax),%eax
f010647a:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010647d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106480:	83 e0 20             	and    $0x20,%eax
f0106483:	85 c0                	test   %eax,%eax
f0106485:	74 2e                	je     f01064b5 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010648a:	c1 e8 02             	shr    $0x2,%eax
f010648d:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106492:	89 c2                	mov    %eax,%edx
f0106494:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106497:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010649a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01064a3:	6a 20                	push   $0x20
f01064a5:	6a 00                	push   $0x0
f01064a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01064aa:	50                   	push   %eax
f01064ab:	e8 6f 1b 00 00       	call   f010801f <pt_set_page_permissions>
f01064b0:	83 c4 10             	add    $0x10,%esp
f01064b3:	eb 11                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01064b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01064b8:	c1 e8 02             	shr    $0x2,%eax
f01064bb:	89 c2                	mov    %eax,%edx
f01064bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064c0:	89 50 08             	mov    %edx,0x8(%eax)
f01064c3:	eb 01                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01064c5:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01064c6:	ff 45 f4             	incl   -0xc(%ebp)
f01064c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064cc:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01064d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064d5:	39 c2                	cmp    %eax,%edx
f01064d7:	0f 87 4d ff ff ff    	ja     f010642a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01064dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064e4:	e9 d4 00 00 00       	jmp    f01065bd <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01064e9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064ef:	89 d0                	mov    %edx,%eax
f01064f1:	01 c0                	add    %eax,%eax
f01064f3:	01 d0                	add    %edx,%eax
f01064f5:	c1 e0 03             	shl    $0x3,%eax
f01064f8:	01 c8                	add    %ecx,%eax
f01064fa:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064ff:	8a 00                	mov    (%eax),%al
f0106501:	3c 01                	cmp    $0x1,%al
f0106503:	0f 84 b1 00 00 00    	je     f01065ba <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106509:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010650c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010650f:	89 d0                	mov    %edx,%eax
f0106511:	01 c0                	add    %eax,%eax
f0106513:	01 d0                	add    %edx,%eax
f0106515:	c1 e0 03             	shl    $0x3,%eax
f0106518:	01 c8                	add    %ecx,%eax
f010651a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010651f:	8b 00                	mov    (%eax),%eax
f0106521:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106524:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106527:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010652a:	89 d0                	mov    %edx,%eax
f010652c:	01 c0                	add    %eax,%eax
f010652e:	01 d0                	add    %edx,%eax
f0106530:	c1 e0 03             	shl    $0x3,%eax
f0106533:	01 c8                	add    %ecx,%eax
f0106535:	05 88 d5 01 00       	add    $0x1d588,%eax
f010653a:	8b 00                	mov    (%eax),%eax
f010653c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f010653f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106542:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106548:	83 ec 08             	sub    $0x8,%esp
f010654b:	ff 75 d8             	pushl  -0x28(%ebp)
f010654e:	50                   	push   %eax
f010654f:	e8 6b 1c 00 00       	call   f01081bf <pd_is_table_used>
f0106554:	83 c4 10             	add    $0x10,%esp
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 3f                	je     f010659a <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010655b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010655e:	c1 e8 02             	shr    $0x2,%eax
f0106561:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106566:	89 c1                	mov    %eax,%ecx
f0106568:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010656b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010656e:	89 d0                	mov    %edx,%eax
f0106570:	01 c0                	add    %eax,%eax
f0106572:	01 d0                	add    %edx,%eax
f0106574:	c1 e0 03             	shl    $0x3,%eax
f0106577:	01 d8                	add    %ebx,%eax
f0106579:	05 88 d5 01 00       	add    $0x1d588,%eax
f010657e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106583:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106589:	83 ec 08             	sub    $0x8,%esp
f010658c:	ff 75 d8             	pushl  -0x28(%ebp)
f010658f:	50                   	push   %eax
f0106590:	e8 4e 1c 00 00       	call   f01081e3 <pd_set_table_unused>
f0106595:	83 c4 10             	add    $0x10,%esp
f0106598:	eb 20                	jmp    f01065ba <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010659a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010659d:	c1 e8 02             	shr    $0x2,%eax
f01065a0:	89 c1                	mov    %eax,%ecx
f01065a2:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01065a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a8:	89 d0                	mov    %edx,%eax
f01065aa:	01 c0                	add    %eax,%eax
f01065ac:	01 d0                	add    %edx,%eax
f01065ae:	c1 e0 03             	shl    $0x3,%eax
f01065b1:	01 d8                	add    %ebx,%eax
f01065b3:	05 88 d5 01 00       	add    $0x1d588,%eax
f01065b8:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01065ba:	ff 45 f0             	incl   -0x10(%ebp)
f01065bd:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01065c1:	0f 8e 22 ff ff ff    	jle    f01064e9 <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01065c7:	90                   	nop
f01065c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01065cb:	c9                   	leave  
f01065cc:	c3                   	ret    

f01065cd <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01065cd:	55                   	push   %ebp
f01065ce:	89 e5                	mov    %esp,%ebp
f01065d0:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01065d3:	c7 05 4c 32 25 f0 01 	movl   $0x1,0xf025324c
f01065da:	00 00 00 
f01065dd:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01065e4:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01065e8:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01065eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065ee:	ee                   	out    %al,(%dx)
f01065ef:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01065f6:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01065fa:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01065fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106600:	ee                   	out    %al,(%dx)
f0106601:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106608:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f010660c:	8a 45 b4             	mov    -0x4c(%ebp),%al
f010660f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106612:	ee                   	out    %al,(%dx)
f0106613:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010661a:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010661e:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106621:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106624:	ee                   	out    %al,(%dx)
f0106625:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010662c:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106630:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106633:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106636:	ee                   	out    %al,(%dx)
f0106637:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010663e:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106642:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106645:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106648:	ee                   	out    %al,(%dx)
f0106649:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106650:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106654:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106657:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010665a:	ee                   	out    %al,(%dx)
f010665b:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106662:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106666:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106669:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010666c:	ee                   	out    %al,(%dx)
f010666d:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106674:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106678:	8a 45 ba             	mov    -0x46(%ebp),%al
f010667b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010667e:	ee                   	out    %al,(%dx)
f010667f:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106686:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010668a:	8a 45 bb             	mov    -0x45(%ebp),%al
f010668d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106690:	ee                   	out    %al,(%dx)
f0106691:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106698:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010669c:	8a 45 bc             	mov    -0x44(%ebp),%al
f010669f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01066a2:	ee                   	out    %al,(%dx)
f01066a3:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01066aa:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01066ae:	8a 45 bd             	mov    -0x43(%ebp),%al
f01066b1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01066b4:	ee                   	out    %al,(%dx)
f01066b5:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01066bc:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01066c0:	8a 45 be             	mov    -0x42(%ebp),%al
f01066c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01066c6:	ee                   	out    %al,(%dx)
f01066c7:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01066ce:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01066d2:	8a 45 bf             	mov    -0x41(%ebp),%al
f01066d5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01066d8:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01066d9:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f01066df:	66 83 f8 ff          	cmp    $0xffff,%ax
f01066e3:	74 15                	je     f01066fa <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01066e5:	66 a1 64 c9 18 f0    	mov    0xf018c964,%ax
f01066eb:	0f b7 c0             	movzwl %ax,%eax
f01066ee:	83 ec 0c             	sub    $0xc,%esp
f01066f1:	50                   	push   %eax
f01066f2:	e8 06 00 00 00       	call   f01066fd <irq_setmask_8259A>
f01066f7:	83 c4 10             	add    $0x10,%esp
}
f01066fa:	90                   	nop
f01066fb:	c9                   	leave  
f01066fc:	c3                   	ret    

f01066fd <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01066fd:	55                   	push   %ebp
f01066fe:	89 e5                	mov    %esp,%ebp
f0106700:	83 ec 14             	sub    $0x14,%esp
f0106703:	8b 45 08             	mov    0x8(%ebp),%eax
f0106706:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010670a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010670d:	66 a3 64 c9 18 f0    	mov    %ax,0xf018c964
	if (!didinit)
f0106713:	a1 4c 32 25 f0       	mov    0xf025324c,%eax
f0106718:	85 c0                	test   %eax,%eax
f010671a:	74 34                	je     f0106750 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f010671c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010671f:	0f b6 c0             	movzbl %al,%eax
f0106722:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106729:	88 45 f6             	mov    %al,-0xa(%ebp)
f010672c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010672f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106732:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106736:	66 c1 e8 08          	shr    $0x8,%ax
f010673a:	0f b6 c0             	movzbl %al,%eax
f010673d:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106744:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106747:	8a 45 f7             	mov    -0x9(%ebp),%al
f010674a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010674d:	ee                   	out    %al,(%dx)
f010674e:	eb 01                	jmp    f0106751 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106750:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106751:	c9                   	leave  
f0106752:	c3                   	ret    

f0106753 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106753:	55                   	push   %ebp
f0106754:	89 e5                	mov    %esp,%ebp
f0106756:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0106759:	83 ec 08             	sub    $0x8,%esp
f010675c:	68 00 10 00 00       	push   $0x1000
f0106761:	68 00 10 00 00       	push   $0x1000
f0106766:	e8 0a 02 00 00       	call   f0106975 <boot_allocate_space>
f010676b:	83 c4 10             	add    $0x10,%esp
f010676e:	a3 10 bf 2b f0       	mov    %eax,0xf02bbf10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106773:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106778:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010677b:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106782:	77 14                	ja     f0106798 <initialize_kernel_VM+0x45>
f0106784:	ff 75 e8             	pushl  -0x18(%ebp)
f0106787:	68 04 1f 13 f0       	push   $0xf0131f04
f010678c:	6a 45                	push   $0x45
f010678e:	68 38 1f 13 f0       	push   $0xf0131f38
f0106793:	e8 18 9a ff ff       	call   f01001b0 <_panic>
f0106798:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010679b:	05 00 00 00 10       	add    $0x10000000,%eax
f01067a0:	a3 40 bf 2b f0       	mov    %eax,0xf02bbf40
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01067a5:	c7 45 e4 00 40 18 f0 	movl   $0xf0184000,-0x1c(%ebp)
f01067ac:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01067b3:	77 14                	ja     f01067c9 <initialize_kernel_VM+0x76>
f01067b5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01067b8:	68 04 1f 13 f0       	push   $0xf0131f04
f01067bd:	6a 4d                	push   $0x4d
f01067bf:	68 38 1f 13 f0       	push   $0xf0131f38
f01067c4:	e8 e7 99 ff ff       	call   f01001b0 <_panic>
f01067c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067cc:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01067d2:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01067d7:	83 ec 0c             	sub    $0xc,%esp
f01067da:	6a 02                	push   $0x2
f01067dc:	52                   	push   %edx
f01067dd:	68 00 80 00 00       	push   $0x8000
f01067e2:	68 00 80 bf ef       	push   $0xefbf8000
f01067e7:	50                   	push   %eax
f01067e8:	e8 fc 01 00 00       	call   f01069e9 <boot_map_range>
f01067ed:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01067f0:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01067f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106805:	eb 25                	jmp    f010682c <initialize_kernel_VM+0xd9>
	{
		++nTables;
f0106807:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010680a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010680d:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106812:	83 ec 04             	sub    $0x4,%esp
f0106815:	6a 01                	push   $0x1
f0106817:	52                   	push   %edx
f0106818:	50                   	push   %eax
f0106819:	e8 3f 02 00 00       	call   f0106a5d <boot_get_page_table>
f010681e:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106821:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0106828:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010682c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106830:	72 d5                	jb     f0106807 <initialize_kernel_VM+0xb4>
f0106832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106836:	77 06                	ja     f010683e <initialize_kernel_VM+0xeb>
f0106838:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010683c:	76 c9                	jbe    f0106807 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f010683e:	8b 15 b0 be 2b f0    	mov    0xf02bbeb0,%edx
f0106844:	89 d0                	mov    %edx,%eax
f0106846:	01 c0                	add    %eax,%eax
f0106848:	01 d0                	add    %edx,%eax
f010684a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106851:	01 c8                	add    %ecx,%eax
f0106853:	01 d0                	add    %edx,%eax
f0106855:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0106858:	83 ec 08             	sub    $0x8,%esp
f010685b:	68 00 10 00 00       	push   $0x1000
f0106860:	ff 75 e0             	pushl  -0x20(%ebp)
f0106863:	e8 0d 01 00 00       	call   f0106975 <boot_allocate_space>
f0106868:	83 c4 10             	add    $0x10,%esp
f010686b:	a3 f0 be 2b f0       	mov    %eax,0xf02bbef0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106870:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106877:	83 ec 08             	sub    $0x8,%esp
f010687a:	68 00 10 00 00       	push   $0x1000
f010687f:	ff 75 dc             	pushl  -0x24(%ebp)
f0106882:	e8 ee 00 00 00       	call   f0106975 <boot_allocate_space>
f0106887:	83 c4 10             	add    $0x10,%esp
f010688a:	a3 30 3b 25 f0       	mov    %eax,0xf0253b30
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f010688f:	e8 fe 04 00 00       	call   f0106d92 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106894:	83 ec 0c             	sub    $0xc,%esp
f0106897:	6a 08                	push   $0x8
f0106899:	e8 fb 72 02 00       	call   f012db99 <nearest_pow2_ceil>
f010689e:	83 c4 10             	add    $0x10,%esp
f01068a1:	83 ec 04             	sub    $0x4,%esp
f01068a4:	50                   	push   %eax
f01068a5:	6a 08                	push   $0x8
f01068a7:	68 58 1f 13 f0       	push   $0xf0131f58
f01068ac:	e8 80 a5 ff ff       	call   f0100e31 <cprintf>
f01068b1:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01068b4:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01068bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01068be:	83 ec 08             	sub    $0x8,%esp
f01068c1:	68 00 10 00 00       	push   $0x1000
f01068c6:	50                   	push   %eax
f01068c7:	e8 a9 00 00 00       	call   f0106975 <boot_allocate_space>
f01068cc:	83 c4 10             	add    $0x10,%esp
f01068cf:	a3 50 32 25 f0       	mov    %eax,0xf0253250
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01068d4:	a1 50 32 25 f0       	mov    0xf0253250,%eax
f01068d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01068dc:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01068e3:	77 17                	ja     f01068fc <initialize_kernel_VM+0x1a9>
f01068e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01068e8:	68 04 1f 13 f0       	push   $0xf0131f04
f01068ed:	68 96 00 00 00       	push   $0x96
f01068f2:	68 38 1f 13 f0       	push   $0xf0131f38
f01068f7:	e8 b4 98 ff ff       	call   f01001b0 <_panic>
f01068fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068ff:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106905:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106908:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f010690d:	83 ec 0c             	sub    $0xc,%esp
f0106910:	6a 04                	push   $0x4
f0106912:	51                   	push   %ecx
f0106913:	52                   	push   %edx
f0106914:	68 00 00 c0 ee       	push   $0xeec00000
f0106919:	50                   	push   %eax
f010691a:	e8 ca 00 00 00       	call   f01069e9 <boot_map_range>
f010691f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106922:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106927:	05 ec 0e 00 00       	add    $0xeec,%eax
f010692c:	8b 15 10 bf 2b f0    	mov    0xf02bbf10,%edx
f0106932:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106938:	8b 12                	mov    (%edx),%edx
f010693a:	83 ca 05             	or     $0x5,%edx
f010693d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010693f:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106944:	83 ec 0c             	sub    $0xc,%esp
f0106947:	6a 02                	push   $0x2
f0106949:	6a 00                	push   $0x0
f010694b:	68 ff ff ff 0f       	push   $0xfffffff
f0106950:	68 00 00 00 f0       	push   $0xf0000000
f0106955:	50                   	push   %eax
f0106956:	e8 8e 00 00 00       	call   f01069e9 <boot_map_range>
f010695b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f010695e:	e8 0d 7a 02 00       	call   f012e370 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106963:	c7 05 a0 9a 2b f0 19 	movl   $0x19,0xf02b9aa0
f010696a:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010696d:	e8 20 03 00 00       	call   f0106c92 <turn_on_paging>
}
f0106972:	90                   	nop
f0106973:	c9                   	leave  
f0106974:	c3                   	ret    

f0106975 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106975:	55                   	push   %ebp
f0106976:	89 e5                	mov    %esp,%ebp
f0106978:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010697b:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106980:	85 c0                	test   %eax,%eax
f0106982:	75 0a                	jne    f010698e <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106984:	c7 05 0c bf 2b f0 5c 	movl   $0xf02de65c,0xf02bbf0c
f010698b:	e6 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010698e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106991:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106994:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106999:	89 c2                	mov    %eax,%edx
f010699b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010699e:	01 d0                	add    %edx,%eax
f01069a0:	48                   	dec    %eax
f01069a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01069a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01069ac:	f7 75 f4             	divl   -0xc(%ebp)
f01069af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b2:	29 d0                	sub    %edx,%eax
f01069b4:	a3 0c bf 2b f0       	mov    %eax,0xf02bbf0c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01069b9:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f01069be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01069c1:	8b 15 0c bf 2b f0    	mov    0xf02bbf0c,%edx
f01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ca:	01 d0                	add    %edx,%eax
f01069cc:	a3 0c bf 2b f0       	mov    %eax,0xf02bbf0c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01069d1:	83 ec 04             	sub    $0x4,%esp
f01069d4:	ff 75 08             	pushl  0x8(%ebp)
f01069d7:	6a 00                	push   $0x0
f01069d9:	ff 75 ec             	pushl  -0x14(%ebp)
f01069dc:	e8 1b 86 02 00       	call   f012effc <memset>
f01069e1:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01069e4:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01069e7:	c9                   	leave  
f01069e8:	c3                   	ret    

f01069e9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01069e9:	55                   	push   %ebp
f01069ea:	89 e5                	mov    %esp,%ebp
f01069ec:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01069ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01069fd:	eb 53                	jmp    f0106a52 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069ff:	83 ec 04             	sub    $0x4,%esp
f0106a02:	6a 01                	push   $0x1
f0106a04:	ff 75 0c             	pushl  0xc(%ebp)
f0106a07:	ff 75 08             	pushl  0x8(%ebp)
f0106a0a:	e8 4e 00 00 00       	call   f0106a5d <boot_get_page_table>
f0106a0f:	83 c4 10             	add    $0x10,%esp
f0106a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a18:	c1 e8 0c             	shr    $0xc,%eax
f0106a1b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a30:	01 c2                	add    %eax,%edx
f0106a32:	8b 45 18             	mov    0x18(%ebp),%eax
f0106a35:	0b 45 14             	or     0x14(%ebp),%eax
f0106a38:	83 c8 01             	or     $0x1,%eax
f0106a3b:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106a3d:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106a44:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106a4b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a55:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106a58:	72 a5                	jb     f01069ff <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106a5a:	90                   	nop
f0106a5b:	c9                   	leave  
f0106a5c:	c3                   	ret    

f0106a5d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106a5d:	55                   	push   %ebp
f0106a5e:	89 e5                	mov    %esp,%ebp
f0106a60:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a66:	c1 e8 16             	shr    $0x16,%eax
f0106a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a79:	01 d0                	add    %edx,%eax
f0106a7b:	8b 00                	mov    (%eax),%eax
f0106a7d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a88:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a94:	c1 e8 0c             	shr    $0xc,%eax
f0106a97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a9a:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0106a9f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106aa2:	72 17                	jb     f0106abb <boot_get_page_table+0x5e>
f0106aa4:	ff 75 e8             	pushl  -0x18(%ebp)
f0106aa7:	68 80 1f 13 f0       	push   $0xf0131f80
f0106aac:	68 18 01 00 00       	push   $0x118
f0106ab1:	68 38 1f 13 f0       	push   $0xf0131f38
f0106ab6:	e8 f5 96 ff ff       	call   f01001b0 <_panic>
f0106abb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106abe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106ac3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106ac6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106aca:	75 72                	jne    f0106b3e <boot_get_page_table+0xe1>
	{
		if (create)
f0106acc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106ad0:	74 65                	je     f0106b37 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106ad2:	83 ec 08             	sub    $0x8,%esp
f0106ad5:	68 00 10 00 00       	push   $0x1000
f0106ada:	68 00 10 00 00       	push   $0x1000
f0106adf:	e8 91 fe ff ff       	call   f0106975 <boot_allocate_space>
f0106ae4:	83 c4 10             	add    $0x10,%esp
f0106ae7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106aea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106af0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106af7:	77 17                	ja     f0106b10 <boot_get_page_table+0xb3>
f0106af9:	ff 75 dc             	pushl  -0x24(%ebp)
f0106afc:	68 04 1f 13 f0       	push   $0xf0131f04
f0106b01:	68 1e 01 00 00       	push   $0x11e
f0106b06:	68 38 1f 13 f0       	push   $0xf0131f38
f0106b0b:	e8 a0 96 ff ff       	call   f01001b0 <_panic>
f0106b10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106b13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106b18:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b28:	01 d0                	add    %edx,%eax
f0106b2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106b2d:	83 ca 03             	or     $0x3,%edx
f0106b30:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106b32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b35:	eb 0a                	jmp    f0106b41 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b3c:	eb 03                	jmp    f0106b41 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106b3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106b41:	c9                   	leave  
f0106b42:	c3                   	ret    

f0106b43 <nvram_read>:


int nvram_read(int r)
{
f0106b43:	55                   	push   %ebp
f0106b44:	89 e5                	mov    %esp,%ebp
f0106b46:	53                   	push   %ebx
f0106b47:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b4d:	83 ec 0c             	sub    $0xc,%esp
f0106b50:	50                   	push   %eax
f0106b51:	e8 6a de ff ff       	call   f01049c0 <mc146818_read>
f0106b56:	83 c4 10             	add    $0x10,%esp
f0106b59:	89 c3                	mov    %eax,%ebx
f0106b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5e:	40                   	inc    %eax
f0106b5f:	83 ec 0c             	sub    $0xc,%esp
f0106b62:	50                   	push   %eax
f0106b63:	e8 58 de ff ff       	call   f01049c0 <mc146818_read>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	c1 e0 08             	shl    $0x8,%eax
f0106b6e:	09 d8                	or     %ebx,%eax
}
f0106b70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b73:	c9                   	leave  
f0106b74:	c3                   	ret    

f0106b75 <detect_memory>:

void detect_memory()
{
f0106b75:	55                   	push   %ebp
f0106b76:	89 e5                	mov    %esp,%ebp
f0106b78:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b7b:	83 ec 0c             	sub    $0xc,%esp
f0106b7e:	6a 15                	push   $0x15
f0106b80:	e8 be ff ff ff       	call   f0106b43 <nvram_read>
f0106b85:	83 c4 10             	add    $0x10,%esp
f0106b88:	c1 e0 0a             	shl    $0xa,%eax
f0106b8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b99:	83 ec 0c             	sub    $0xc,%esp
f0106b9c:	6a 17                	push   $0x17
f0106b9e:	e8 a0 ff ff ff       	call   f0106b43 <nvram_read>
f0106ba3:	83 c4 10             	add    $0x10,%esp
f0106ba6:	c1 e0 0a             	shl    $0xa,%eax
f0106ba9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106bb7:	83 ec 0c             	sub    $0xc,%esp
f0106bba:	6a 34                	push   $0x34
f0106bbc:	e8 82 ff ff ff       	call   f0106b43 <nvram_read>
f0106bc1:	83 c4 10             	add    $0x10,%esp
f0106bc4:	c1 e0 10             	shl    $0x10,%eax
f0106bc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bcd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106bd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106bd9:	74 18                	je     f0106bf3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106bdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bde:	05 00 00 00 01       	add    $0x1000000,%eax
f0106be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106be9:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106bee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106bf1:	eb 19                	jmp    f0106c0c <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106bf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106bf7:	74 0d                	je     f0106c06 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bfc:	05 00 00 10 00       	add    $0x100000,%eax
f0106c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106c04:	eb 06                	jmp    f0106c0c <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106c0c:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106c19:	76 32                	jbe    f0106c4d <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106c1e:	c1 e8 0a             	shr    $0xa,%eax
f0106c21:	89 c2                	mov    %eax,%edx
f0106c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c26:	c1 e8 0a             	shr    $0xa,%eax
f0106c29:	83 ec 04             	sub    $0x4,%esp
f0106c2c:	52                   	push   %edx
f0106c2d:	50                   	push   %eax
f0106c2e:	68 b0 1f 13 f0       	push   $0xf0131fb0
f0106c33:	e8 f9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c38:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106c3b:	83 ec 0c             	sub    $0xc,%esp
f0106c3e:	68 f8 1f 13 f0       	push   $0xf0131ff8
f0106c43:	e8 e9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c48:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106c4b:	eb fe                	jmp    f0106c4b <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c50:	c1 e8 0c             	shr    $0xc,%eax
f0106c53:	a3 b0 be 2b f0       	mov    %eax,0xf02bbeb0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c5b:	c1 e8 0a             	shr    $0xa,%eax
f0106c5e:	83 ec 08             	sub    $0x8,%esp
f0106c61:	50                   	push   %eax
f0106c62:	68 8c 20 13 f0       	push   $0xf013208c
f0106c67:	e8 c5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c6c:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c72:	c1 e8 0a             	shr    $0xa,%eax
f0106c75:	89 c2                	mov    %eax,%edx
f0106c77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7a:	c1 e8 0a             	shr    $0xa,%eax
f0106c7d:	83 ec 04             	sub    $0x4,%esp
f0106c80:	52                   	push   %edx
f0106c81:	50                   	push   %eax
f0106c82:	68 ad 20 13 f0       	push   $0xf01320ad
f0106c87:	e8 a5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c8c:	83 c4 10             	add    $0x10,%esp
}
f0106c8f:	90                   	nop
f0106c90:	c9                   	leave  
f0106c91:	c3                   	ret    

f0106c92 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c92:	55                   	push   %ebp
f0106c93:	89 e5                	mov    %esp,%ebp
f0106c95:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c98:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c9f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106ca6:	eb 24                	jmp    f0106ccc <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106ca8:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106cad:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106cb0:	c1 e2 02             	shl    $0x2,%edx
f0106cb3:	01 c2                	add    %eax,%edx
f0106cb5:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106cba:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106cbd:	c1 e1 02             	shl    $0x2,%ecx
f0106cc0:	01 c8                	add    %ecx,%eax
f0106cc2:	8b 00                	mov    (%eax),%eax
f0106cc4:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106cc6:	ff 45 fc             	incl   -0x4(%ebp)
f0106cc9:	ff 45 f8             	incl   -0x8(%ebp)
f0106ccc:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106cd1:	c1 e8 16             	shr    $0x16,%eax
f0106cd4:	89 c2                	mov    %eax,%edx
f0106cd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106cd9:	39 c2                	cmp    %eax,%edx
f0106cdb:	77 cb                	ja     f0106ca8 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106cdd:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0106ce2:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106ce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ce8:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106ceb:	0f 20 c0             	mov    %cr0,%eax
f0106cee:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106cf7:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106cfe:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d05:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106d08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d0b:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106d0e:	0f 01 15 b0 c9 18 f0 	lgdtl  0xf018c9b0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106d15:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d1a:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106d1c:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d21:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106d23:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d28:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106d2a:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d2f:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106d31:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d36:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106d38:	ea 3f 6d 10 f0 08 00 	ljmp   $0x8,$0xf0106d3f
	asm volatile("lldt %%ax" :: "a" (0));
f0106d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d44:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106d47:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106d4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d55:	eb 19                	jmp    f0106d70 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106d57:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d5f:	c1 e2 02             	shl    $0x2,%edx
f0106d62:	01 d0                	add    %edx,%eax
f0106d64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d6a:	ff 45 f4             	incl   -0xc(%ebp)
f0106d6d:	ff 45 f0             	incl   -0x10(%ebp)
f0106d70:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f0106d75:	c1 e8 16             	shr    $0x16,%eax
f0106d78:	89 c2                	mov    %eax,%edx
f0106d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d7d:	39 c2                	cmp    %eax,%edx
f0106d7f:	77 d6                	ja     f0106d57 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d81:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0106d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8c:	0f 22 d8             	mov    %eax,%cr3
}
f0106d8f:	90                   	nop
f0106d90:	c9                   	leave  
f0106d91:	c3                   	ret    

f0106d92 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d92:	55                   	push   %ebp
f0106d93:	89 e5                	mov    %esp,%ebp
f0106d95:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d98:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106da0:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106da7:	77 17                	ja     f0106dc0 <setup_listing_to_all_page_tables_entries+0x2e>
f0106da9:	ff 75 f4             	pushl  -0xc(%ebp)
f0106dac:	68 04 1f 13 f0       	push   $0xf0131f04
f0106db1:	68 ae 01 00 00       	push   $0x1ae
f0106db6:	68 38 1f 13 f0       	push   $0xf0131f38
f0106dbb:	e8 f0 93 ff ff       	call   f01001b0 <_panic>
f0106dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc3:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106dcb:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106dd0:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106dd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dd8:	83 ca 03             	or     $0x3,%edx
f0106ddb:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106ddd:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106de2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106de8:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0106ded:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106df0:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106df7:	77 17                	ja     f0106e10 <setup_listing_to_all_page_tables_entries+0x7e>
f0106df9:	ff 75 ec             	pushl  -0x14(%ebp)
f0106dfc:	68 04 1f 13 f0       	push   $0xf0131f04
f0106e01:	68 b3 01 00 00       	push   $0x1b3
f0106e06:	68 38 1f 13 f0       	push   $0xf0131f38
f0106e0b:	e8 a0 93 ff ff       	call   f01001b0 <_panic>
f0106e10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106e18:	83 c8 05             	or     $0x5,%eax
f0106e1b:	89 02                	mov    %eax,(%edx)

}
f0106e1d:	90                   	nop
f0106e1e:	c9                   	leave  
f0106e1f:	c3                   	ret    

f0106e20 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e20:	55                   	push   %ebp
f0106e21:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e26:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0106e2c:	29 d0                	sub    %edx,%eax
f0106e2e:	c1 f8 02             	sar    $0x2,%eax
f0106e31:	89 c2                	mov    %eax,%edx
f0106e33:	89 d0                	mov    %edx,%eax
f0106e35:	c1 e0 03             	shl    $0x3,%eax
f0106e38:	01 d0                	add    %edx,%eax
f0106e3a:	c1 e0 03             	shl    $0x3,%eax
f0106e3d:	01 d0                	add    %edx,%eax
f0106e3f:	c1 e0 03             	shl    $0x3,%eax
f0106e42:	01 d0                	add    %edx,%eax
f0106e44:	c1 e0 03             	shl    $0x3,%eax
f0106e47:	01 d0                	add    %edx,%eax
f0106e49:	89 c1                	mov    %eax,%ecx
f0106e4b:	c1 e1 0f             	shl    $0xf,%ecx
f0106e4e:	01 c8                	add    %ecx,%eax
f0106e50:	c1 e0 03             	shl    $0x3,%eax
f0106e53:	01 d0                	add    %edx,%eax
f0106e55:	f7 d8                	neg    %eax
}
f0106e57:	5d                   	pop    %ebp
f0106e58:	c3                   	ret    

f0106e59 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106e59:	55                   	push   %ebp
f0106e5a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106e5c:	ff 75 08             	pushl  0x8(%ebp)
f0106e5f:	e8 bc ff ff ff       	call   f0106e20 <to_frame_number>
f0106e64:	83 c4 04             	add    $0x4,%esp
f0106e67:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e6a:	c9                   	leave  
f0106e6b:	c3                   	ret    

f0106e6c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e6c:	55                   	push   %ebp
f0106e6d:	89 e5                	mov    %esp,%ebp
f0106e6f:	53                   	push   %ebx
f0106e70:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e76:	c1 e8 0c             	shr    $0xc,%eax
f0106e79:	89 c2                	mov    %eax,%edx
f0106e7b:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0106e80:	39 c2                	cmp    %eax,%edx
f0106e82:	72 14                	jb     f0106e98 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e84:	83 ec 04             	sub    $0x4,%esp
f0106e87:	68 cc 20 13 f0       	push   $0xf01320cc
f0106e8c:	6a 55                	push   $0x55
f0106e8e:	68 f1 20 13 f0       	push   $0xf01320f1
f0106e93:	e8 18 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e98:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ea1:	c1 e8 0c             	shr    $0xc,%eax
f0106ea4:	89 c2                	mov    %eax,%edx
f0106ea6:	89 d0                	mov    %edx,%eax
f0106ea8:	01 c0                	add    %eax,%eax
f0106eaa:	01 d0                	add    %edx,%eax
f0106eac:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106eb3:	01 d8                	add    %ebx,%eax
f0106eb5:	01 d0                	add    %edx,%eax
f0106eb7:	01 c8                	add    %ecx,%eax
}
f0106eb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106ebc:	c9                   	leave  
f0106ebd:	c3                   	ret    

f0106ebe <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106ebe:	55                   	push   %ebp
f0106ebf:	89 e5                	mov    %esp,%ebp
f0106ec1:	83 ec 10             	sub    $0x10,%esp
f0106ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ec7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106ecd:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106ed0:	90                   	nop
f0106ed1:	c9                   	leave  
f0106ed2:	c3                   	ret    

f0106ed3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106ed3:	55                   	push   %ebp
f0106ed4:	89 e5                	mov    %esp,%ebp
f0106ed6:	56                   	push   %esi
f0106ed7:	53                   	push   %ebx
f0106ed8:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106edb:	c7 05 b8 be 2b f0 00 	movl   $0x0,0xf02bbeb8
f0106ee2:	00 00 00 
f0106ee5:	c7 05 bc be 2b f0 00 	movl   $0x0,0xf02bbebc
f0106eec:	00 00 00 
f0106eef:	c7 05 c4 be 2b f0 00 	movl   $0x0,0xf02bbec4
f0106ef6:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106ef9:	c7 05 20 3b 25 f0 00 	movl   $0x0,0xf0253b20
f0106f00:	00 00 00 
f0106f03:	c7 05 24 3b 25 f0 00 	movl   $0x0,0xf0253b24
f0106f0a:	00 00 00 
f0106f0d:	c7 05 2c 3b 25 f0 00 	movl   $0x0,0xf0253b2c
f0106f14:	00 00 00 

	frames_info[0].references = 1;
f0106f17:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106f1c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106f22:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106f27:	83 c0 1c             	add    $0x1c,%eax
f0106f2a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106f30:	a1 f0 be 2b f0       	mov    0xf02bbef0,%eax
f0106f35:	83 c0 38             	add    $0x38,%eax
f0106f38:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106f3e:	c7 05 fc be 2b f0 00 	movl   $0xf0001000,0xf02bbefc
f0106f45:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106f48:	c7 05 18 bf 2b f0 00 	movl   $0xf0002000,0xf02bbf18
f0106f4f:	20 00 f0 
	i =0;
f0106f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106f59:	eb 1f                	jmp    f0106f7a <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106f5b:	8b 15 fc be 2b f0    	mov    0xf02bbefc,%edx
f0106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f64:	01 d0                	add    %edx,%eax
f0106f66:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f69:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f72:	01 d0                	add    %edx,%eax
f0106f74:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f77:	ff 45 f4             	incl   -0xc(%ebp)
f0106f7a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f81:	7e d8                	jle    f0106f5b <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f83:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8d:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f9d:	f7 75 f0             	divl   -0x10(%ebp)
f0106fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fa3:	29 d0                	sub    %edx,%eax
f0106fa5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106fa8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106faf:	e9 20 01 00 00       	jmp    f01070d4 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106fb4:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106fba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fbd:	89 d0                	mov    %edx,%eax
f0106fbf:	01 c0                	add    %eax,%eax
f0106fc1:	01 d0                	add    %edx,%eax
f0106fc3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fca:	01 d8                	add    %ebx,%eax
f0106fcc:	01 d0                	add    %edx,%eax
f0106fce:	01 c8                	add    %ecx,%eax
f0106fd0:	83 ec 0c             	sub    $0xc,%esp
f0106fd3:	50                   	push   %eax
f0106fd4:	e8 31 03 00 00       	call   f010730a <initialize_frame_info>
f0106fd9:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106fdc:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0106fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fe5:	89 d0                	mov    %edx,%eax
f0106fe7:	01 c0                	add    %eax,%eax
f0106fe9:	01 d0                	add    %edx,%eax
f0106feb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ff2:	01 d8                	add    %ebx,%eax
f0106ff4:	01 d0                	add    %edx,%eax
f0106ff6:	01 c8                	add    %ecx,%eax
f0106ff8:	85 c0                	test   %eax,%eax
f0106ffa:	75 14                	jne    f0107010 <initialize_paging+0x13d>
f0106ffc:	83 ec 04             	sub    $0x4,%esp
f0106fff:	68 0c 21 13 f0       	push   $0xf013210c
f0107004:	6a 5c                	push   $0x5c
f0107006:	68 2f 21 13 f0       	push   $0xf013212f
f010700b:	e8 a0 91 ff ff       	call   f01001b0 <_panic>
f0107010:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107019:	89 d0                	mov    %edx,%eax
f010701b:	01 c0                	add    %eax,%eax
f010701d:	01 d0                	add    %edx,%eax
f010701f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107026:	01 d8                	add    %ebx,%eax
f0107028:	01 d0                	add    %edx,%eax
f010702a:	01 c8                	add    %ecx,%eax
f010702c:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f0107032:	89 10                	mov    %edx,(%eax)
f0107034:	8b 00                	mov    (%eax),%eax
f0107036:	85 c0                	test   %eax,%eax
f0107038:	74 27                	je     f0107061 <initialize_paging+0x18e>
f010703a:	8b 0d b8 be 2b f0    	mov    0xf02bbeb8,%ecx
f0107040:	8b 1d f0 be 2b f0    	mov    0xf02bbef0,%ebx
f0107046:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107049:	89 d0                	mov    %edx,%eax
f010704b:	01 c0                	add    %eax,%eax
f010704d:	01 d0                	add    %edx,%eax
f010704f:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107056:	01 f0                	add    %esi,%eax
f0107058:	01 d0                	add    %edx,%eax
f010705a:	01 d8                	add    %ebx,%eax
f010705c:	89 41 04             	mov    %eax,0x4(%ecx)
f010705f:	eb 21                	jmp    f0107082 <initialize_paging+0x1af>
f0107061:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107067:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010706a:	89 d0                	mov    %edx,%eax
f010706c:	01 c0                	add    %eax,%eax
f010706e:	01 d0                	add    %edx,%eax
f0107070:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107077:	01 d8                	add    %ebx,%eax
f0107079:	01 d0                	add    %edx,%eax
f010707b:	01 c8                	add    %ecx,%eax
f010707d:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f0107082:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708b:	89 d0                	mov    %edx,%eax
f010708d:	01 c0                	add    %eax,%eax
f010708f:	01 d0                	add    %edx,%eax
f0107091:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107098:	01 d8                	add    %ebx,%eax
f010709a:	01 d0                	add    %edx,%eax
f010709c:	01 c8                	add    %ecx,%eax
f010709e:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f01070a3:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01070a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070ac:	89 d0                	mov    %edx,%eax
f01070ae:	01 c0                	add    %eax,%eax
f01070b0:	01 d0                	add    %edx,%eax
f01070b2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070b9:	01 d8                	add    %ebx,%eax
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	01 c8                	add    %ecx,%eax
f01070bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070c6:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01070cb:	40                   	inc    %eax
f01070cc:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01070d1:	ff 45 f4             	incl   -0xc(%ebp)
f01070d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070d7:	85 c0                	test   %eax,%eax
f01070d9:	79 05                	jns    f01070e0 <initialize_paging+0x20d>
f01070db:	05 ff 0f 00 00       	add    $0xfff,%eax
f01070e0:	c1 f8 0c             	sar    $0xc,%eax
f01070e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01070e6:	0f 8f c8 fe ff ff    	jg     f0106fb4 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070ec:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01070f3:	eb 25                	jmp    f010711a <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01070f5:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01070fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070fe:	89 d0                	mov    %edx,%eax
f0107100:	01 c0                	add    %eax,%eax
f0107102:	01 d0                	add    %edx,%eax
f0107104:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010710b:	01 d8                	add    %ebx,%eax
f010710d:	01 d0                	add    %edx,%eax
f010710f:	01 c8                	add    %ecx,%eax
f0107111:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107117:	ff 45 f4             	incl   -0xc(%ebp)
f010711a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0107121:	7e d2                	jle    f01070f5 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0107123:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010712a:	a1 0c bf 2b f0       	mov    0xf02bbf0c,%eax
f010712f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107132:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107139:	77 14                	ja     f010714f <initialize_paging+0x27c>
f010713b:	ff 75 e0             	pushl  -0x20(%ebp)
f010713e:	68 4c 21 13 f0       	push   $0xf013214c
f0107143:	6a 64                	push   $0x64
f0107145:	68 2f 21 13 f0       	push   $0xf013212f
f010714a:	e8 61 90 ff ff       	call   f01001b0 <_panic>
f010714f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107152:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107158:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010715b:	01 d0                	add    %edx,%eax
f010715d:	48                   	dec    %eax
f010715e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107161:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107164:	ba 00 00 00 00       	mov    $0x0,%edx
f0107169:	f7 75 e4             	divl   -0x1c(%ebp)
f010716c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010716f:	29 d0                	sub    %edx,%eax
f0107171:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107174:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010717b:	eb 25                	jmp    f01071a2 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010717d:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107183:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107186:	89 d0                	mov    %edx,%eax
f0107188:	01 c0                	add    %eax,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107193:	01 d8                	add    %ebx,%eax
f0107195:	01 d0                	add    %edx,%eax
f0107197:	01 c8                	add    %ecx,%eax
f0107199:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010719f:	ff 45 f4             	incl   -0xc(%ebp)
f01071a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071a5:	85 c0                	test   %eax,%eax
f01071a7:	79 05                	jns    f01071ae <initialize_paging+0x2db>
f01071a9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071ae:	c1 f8 0c             	sar    $0xc,%eax
f01071b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01071b4:	7f c7                	jg     f010717d <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01071b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b9:	85 c0                	test   %eax,%eax
f01071bb:	79 05                	jns    f01071c2 <initialize_paging+0x2ef>
f01071bd:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071c2:	c1 f8 0c             	sar    $0xc,%eax
f01071c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01071c8:	e9 20 01 00 00       	jmp    f01072ed <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f01071cd:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01071d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d6:	89 d0                	mov    %edx,%eax
f01071d8:	01 c0                	add    %eax,%eax
f01071da:	01 d0                	add    %edx,%eax
f01071dc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071e3:	01 d8                	add    %ebx,%eax
f01071e5:	01 d0                	add    %edx,%eax
f01071e7:	01 c8                	add    %ecx,%eax
f01071e9:	83 ec 0c             	sub    $0xc,%esp
f01071ec:	50                   	push   %eax
f01071ed:	e8 18 01 00 00       	call   f010730a <initialize_frame_info>
f01071f2:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01071f5:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01071fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071fe:	89 d0                	mov    %edx,%eax
f0107200:	01 c0                	add    %eax,%eax
f0107202:	01 d0                	add    %edx,%eax
f0107204:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010720b:	01 d8                	add    %ebx,%eax
f010720d:	01 d0                	add    %edx,%eax
f010720f:	01 c8                	add    %ecx,%eax
f0107211:	85 c0                	test   %eax,%eax
f0107213:	75 14                	jne    f0107229 <initialize_paging+0x356>
f0107215:	83 ec 04             	sub    $0x4,%esp
f0107218:	68 0c 21 13 f0       	push   $0xf013210c
f010721d:	6a 70                	push   $0x70
f010721f:	68 2f 21 13 f0       	push   $0xf013212f
f0107224:	e8 87 8f ff ff       	call   f01001b0 <_panic>
f0107229:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f010722f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107232:	89 d0                	mov    %edx,%eax
f0107234:	01 c0                	add    %eax,%eax
f0107236:	01 d0                	add    %edx,%eax
f0107238:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010723f:	01 d8                	add    %ebx,%eax
f0107241:	01 d0                	add    %edx,%eax
f0107243:	01 c8                	add    %ecx,%eax
f0107245:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f010724b:	89 10                	mov    %edx,(%eax)
f010724d:	8b 00                	mov    (%eax),%eax
f010724f:	85 c0                	test   %eax,%eax
f0107251:	74 27                	je     f010727a <initialize_paging+0x3a7>
f0107253:	8b 0d b8 be 2b f0    	mov    0xf02bbeb8,%ecx
f0107259:	8b 1d f0 be 2b f0    	mov    0xf02bbef0,%ebx
f010725f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107262:	89 d0                	mov    %edx,%eax
f0107264:	01 c0                	add    %eax,%eax
f0107266:	01 d0                	add    %edx,%eax
f0107268:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010726f:	01 f0                	add    %esi,%eax
f0107271:	01 d0                	add    %edx,%eax
f0107273:	01 d8                	add    %ebx,%eax
f0107275:	89 41 04             	mov    %eax,0x4(%ecx)
f0107278:	eb 21                	jmp    f010729b <initialize_paging+0x3c8>
f010727a:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107283:	89 d0                	mov    %edx,%eax
f0107285:	01 c0                	add    %eax,%eax
f0107287:	01 d0                	add    %edx,%eax
f0107289:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107290:	01 d8                	add    %ebx,%eax
f0107292:	01 d0                	add    %edx,%eax
f0107294:	01 c8                	add    %ecx,%eax
f0107296:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f010729b:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01072a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a4:	89 d0                	mov    %edx,%eax
f01072a6:	01 c0                	add    %eax,%eax
f01072a8:	01 d0                	add    %edx,%eax
f01072aa:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072b1:	01 d8                	add    %ebx,%eax
f01072b3:	01 d0                	add    %edx,%eax
f01072b5:	01 c8                	add    %ecx,%eax
f01072b7:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f01072bc:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f01072c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c5:	89 d0                	mov    %edx,%eax
f01072c7:	01 c0                	add    %eax,%eax
f01072c9:	01 d0                	add    %edx,%eax
f01072cb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072d2:	01 d8                	add    %ebx,%eax
f01072d4:	01 d0                	add    %edx,%eax
f01072d6:	01 c8                	add    %ecx,%eax
f01072d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01072df:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01072e4:	40                   	inc    %eax
f01072e5:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01072ea:	ff 45 f4             	incl   -0xc(%ebp)
f01072ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072f0:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01072f5:	39 c2                	cmp    %eax,%edx
f01072f7:	0f 82 d0 fe ff ff    	jb     f01071cd <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01072fd:	e8 f2 c5 ff ff       	call   f01038f4 <initialize_disk_page_file>
}
f0107302:	90                   	nop
f0107303:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0107306:	5b                   	pop    %ebx
f0107307:	5e                   	pop    %esi
f0107308:	5d                   	pop    %ebp
f0107309:	c3                   	ret    

f010730a <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010730a:	55                   	push   %ebp
f010730b:	89 e5                	mov    %esp,%ebp
f010730d:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0107310:	83 ec 04             	sub    $0x4,%esp
f0107313:	6a 1c                	push   $0x1c
f0107315:	6a 00                	push   $0x0
f0107317:	ff 75 08             	pushl  0x8(%ebp)
f010731a:	e8 dd 7c 02 00       	call   f012effc <memset>
f010731f:	83 c4 10             	add    $0x10,%esp
}
f0107322:	90                   	nop
f0107323:	c9                   	leave  
f0107324:	c3                   	ret    

f0107325 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0107325:	55                   	push   %ebp
f0107326:	89 e5                	mov    %esp,%ebp
f0107328:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010732b:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f0107331:	8b 45 08             	mov    0x8(%ebp),%eax
f0107334:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0107336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010733d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107340:	8b 00                	mov    (%eax),%eax
f0107342:	85 c0                	test   %eax,%eax
f0107344:	75 17                	jne    f010735d <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0107346:	83 ec 04             	sub    $0x4,%esp
f0107349:	68 80 21 13 f0       	push   $0xf0132180
f010734e:	68 98 00 00 00       	push   $0x98
f0107353:	68 2f 21 13 f0       	push   $0xf013212f
f0107358:	e8 53 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010735d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107360:	8b 00                	mov    (%eax),%eax
f0107362:	85 c0                	test   %eax,%eax
f0107364:	75 17                	jne    f010737d <allocate_frame+0x58>
f0107366:	83 ec 04             	sub    $0x4,%esp
f0107369:	68 cd 21 13 f0       	push   $0xf01321cd
f010736e:	68 9e 00 00 00       	push   $0x9e
f0107373:	68 2f 21 13 f0       	push   $0xf013212f
f0107378:	e8 33 8e ff ff       	call   f01001b0 <_panic>
f010737d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107380:	8b 00                	mov    (%eax),%eax
f0107382:	8b 00                	mov    (%eax),%eax
f0107384:	85 c0                	test   %eax,%eax
f0107386:	74 14                	je     f010739c <allocate_frame+0x77>
f0107388:	8b 45 08             	mov    0x8(%ebp),%eax
f010738b:	8b 00                	mov    (%eax),%eax
f010738d:	8b 00                	mov    (%eax),%eax
f010738f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107392:	8b 12                	mov    (%edx),%edx
f0107394:	8b 52 04             	mov    0x4(%edx),%edx
f0107397:	89 50 04             	mov    %edx,0x4(%eax)
f010739a:	eb 0d                	jmp    f01073a9 <allocate_frame+0x84>
f010739c:	8b 45 08             	mov    0x8(%ebp),%eax
f010739f:	8b 00                	mov    (%eax),%eax
f01073a1:	8b 40 04             	mov    0x4(%eax),%eax
f01073a4:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f01073a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ac:	8b 00                	mov    (%eax),%eax
f01073ae:	8b 40 04             	mov    0x4(%eax),%eax
f01073b1:	85 c0                	test   %eax,%eax
f01073b3:	74 13                	je     f01073c8 <allocate_frame+0xa3>
f01073b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01073b8:	8b 00                	mov    (%eax),%eax
f01073ba:	8b 40 04             	mov    0x4(%eax),%eax
f01073bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01073c0:	8b 12                	mov    (%edx),%edx
f01073c2:	8b 12                	mov    (%edx),%edx
f01073c4:	89 10                	mov    %edx,(%eax)
f01073c6:	eb 0c                	jmp    f01073d4 <allocate_frame+0xaf>
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	8b 00                	mov    (%eax),%eax
f01073cd:	8b 00                	mov    (%eax),%eax
f01073cf:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f01073d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073d7:	8b 00                	mov    (%eax),%eax
f01073d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01073df:	8b 45 08             	mov    0x8(%ebp),%eax
f01073e2:	8b 00                	mov    (%eax),%eax
f01073e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073eb:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01073f0:	48                   	dec    %eax
f01073f1:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01073f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f9:	8b 00                	mov    (%eax),%eax
f01073fb:	8a 40 14             	mov    0x14(%eax),%al
f01073fe:	84 c0                	test   %al,%al
f0107400:	74 23                	je     f0107425 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107402:	8b 45 08             	mov    0x8(%ebp),%eax
f0107405:	8b 00                	mov    (%eax),%eax
f0107407:	8b 50 0c             	mov    0xc(%eax),%edx
f010740a:	8b 45 08             	mov    0x8(%ebp),%eax
f010740d:	8b 00                	mov    (%eax),%eax
f010740f:	8b 40 10             	mov    0x10(%eax),%eax
f0107412:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0107418:	83 ec 08             	sub    $0x8,%esp
f010741b:	52                   	push   %edx
f010741c:	50                   	push   %eax
f010741d:	e8 0a 0d 00 00       	call   f010812c <pt_clear_page_table_entry>
f0107422:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107425:	8b 45 08             	mov    0x8(%ebp),%eax
f0107428:	8b 00                	mov    (%eax),%eax
f010742a:	83 ec 0c             	sub    $0xc,%esp
f010742d:	50                   	push   %eax
f010742e:	e8 d7 fe ff ff       	call   f010730a <initialize_frame_info>
f0107433:	83 c4 10             	add    $0x10,%esp
	return 0;
f0107436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 08             	pushl  0x8(%ebp)
f0107449:	e8 bc fe ff ff       	call   f010730a <initialize_frame_info>
f010744e:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107455:	75 17                	jne    f010746e <free_frame+0x31>
f0107457:	83 ec 04             	sub    $0x4,%esp
f010745a:	68 0c 21 13 f0       	push   $0xf013210c
f010745f:	68 bb 00 00 00       	push   $0xbb
f0107464:	68 2f 21 13 f0       	push   $0xf013212f
f0107469:	e8 42 8d ff ff       	call   f01001b0 <_panic>
f010746e:	8b 15 b8 be 2b f0    	mov    0xf02bbeb8,%edx
f0107474:	8b 45 08             	mov    0x8(%ebp),%eax
f0107477:	89 10                	mov    %edx,(%eax)
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	8b 00                	mov    (%eax),%eax
f010747e:	85 c0                	test   %eax,%eax
f0107480:	74 0d                	je     f010748f <free_frame+0x52>
f0107482:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0107487:	8b 55 08             	mov    0x8(%ebp),%edx
f010748a:	89 50 04             	mov    %edx,0x4(%eax)
f010748d:	eb 08                	jmp    f0107497 <free_frame+0x5a>
f010748f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107492:	a3 bc be 2b f0       	mov    %eax,0xf02bbebc
f0107497:	8b 45 08             	mov    0x8(%ebp),%eax
f010749a:	a3 b8 be 2b f0       	mov    %eax,0xf02bbeb8
f010749f:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01074a9:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f01074ae:	40                   	inc    %eax
f01074af:	a3 c4 be 2b f0       	mov    %eax,0xf02bbec4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01074b4:	90                   	nop
f01074b5:	c9                   	leave  
f01074b6:	c3                   	ret    

f01074b7 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01074b7:	55                   	push   %ebp
f01074b8:	89 e5                	mov    %esp,%ebp
f01074ba:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	8b 40 08             	mov    0x8(%eax),%eax
f01074c3:	48                   	dec    %eax
f01074c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01074c7:	66 89 42 08          	mov    %ax,0x8(%edx)
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	8b 40 08             	mov    0x8(%eax),%eax
f01074d1:	66 85 c0             	test   %ax,%ax
f01074d4:	75 0e                	jne    f01074e4 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01074d6:	83 ec 0c             	sub    $0xc,%esp
f01074d9:	ff 75 08             	pushl  0x8(%ebp)
f01074dc:	e8 5c ff ff ff       	call   f010743d <free_frame>
f01074e1:	83 c4 10             	add    $0x10,%esp
}
f01074e4:	90                   	nop
f01074e5:	c9                   	leave  
f01074e6:	c3                   	ret    

f01074e7 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01074e7:	55                   	push   %ebp
f01074e8:	89 e5                	mov    %esp,%ebp
f01074ea:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074f0:	c1 e8 16             	shr    $0x16,%eax
f01074f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fd:	01 d0                	add    %edx,%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	83 e0 01             	and    $0x1,%eax
f010750a:	85 c0                	test   %eax,%eax
f010750c:	74 4e                	je     f010755c <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107516:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107519:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010751c:	c1 e8 0c             	shr    $0xc,%eax
f010751f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107522:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0107527:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010752a:	72 17                	jb     f0107543 <get_page_table+0x5c>
f010752c:	ff 75 f0             	pushl  -0x10(%ebp)
f010752f:	68 ec 21 13 f0       	push   $0xf01321ec
f0107534:	68 e2 00 00 00       	push   $0xe2
f0107539:	68 2f 21 13 f0       	push   $0xf013212f
f010753e:	e8 6d 8c ff ff       	call   f01001b0 <_panic>
f0107543:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107546:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010754b:	89 c2                	mov    %eax,%edx
f010754d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107550:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107552:	b8 00 00 00 00       	mov    $0x0,%eax
f0107557:	e9 8f 00 00 00       	jmp    f01075eb <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f010755c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107560:	74 7b                	je     f01075dd <get_page_table+0xf6>
f0107562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107565:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0107568:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010756b:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f010756e:	83 ec 0c             	sub    $0xc,%esp
f0107571:	6a 00                	push   $0x0
f0107573:	e8 87 4f 00 00       	call   f010c4ff <fault_handler>
f0107578:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010757b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010757e:	c1 e8 16             	shr    $0x16,%eax
f0107581:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107588:	8b 45 08             	mov    0x8(%ebp),%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	8b 00                	mov    (%eax),%eax
f010758f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010759a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010759d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a0:	c1 e8 0c             	shr    $0xc,%eax
f01075a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01075a6:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01075ab:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01075ae:	72 17                	jb     f01075c7 <get_page_table+0xe0>
f01075b0:	ff 75 e8             	pushl  -0x18(%ebp)
f01075b3:	68 ec 21 13 f0       	push   $0xf01321ec
f01075b8:	68 fa 00 00 00       	push   $0xfa
f01075bd:	68 2f 21 13 f0       	push   $0xf013212f
f01075c2:	e8 e9 8b ff ff       	call   f01001b0 <_panic>
f01075c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075ca:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01075cf:	89 c2                	mov    %eax,%edx
f01075d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01075d4:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01075d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01075db:	eb 0e                	jmp    f01075eb <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01075dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01075e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01075e6:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01075eb:	c9                   	leave  
f01075ec:	c3                   	ret    

f01075ed <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f01075ed:	55                   	push   %ebp
f01075ee:	89 e5                	mov    %esp,%ebp
f01075f0:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f01075f3:	83 ec 04             	sub    $0x4,%esp
f01075f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01075f9:	50                   	push   %eax
f01075fa:	ff 75 0c             	pushl  0xc(%ebp)
f01075fd:	ff 75 08             	pushl  0x8(%ebp)
f0107600:	e8 08 00 00 00       	call   f010760d <__static_cpt>
f0107605:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0107608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010760b:	c9                   	leave  
f010760c:	c3                   	ret    

f010760d <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010760d:	55                   	push   %ebp
f010760e:	89 e5                	mov    %esp,%ebp
f0107610:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107613:	83 ec 0c             	sub    $0xc,%esp
f0107616:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107619:	50                   	push   %eax
f010761a:	e8 06 fd ff ff       	call   f0107325 <allocate_frame>
f010761f:	83 c4 10             	add    $0x10,%esp
f0107622:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107625:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107628:	83 ec 0c             	sub    $0xc,%esp
f010762b:	50                   	push   %eax
f010762c:	e8 28 f8 ff ff       	call   f0106e59 <to_physical_address>
f0107631:	83 c4 10             	add    $0x10,%esp
f0107634:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0107637:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010763a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010763d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107640:	c1 e8 0c             	shr    $0xc,%eax
f0107643:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107646:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010764b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010764e:	72 17                	jb     f0107667 <__static_cpt+0x5a>
f0107650:	ff 75 ec             	pushl  -0x14(%ebp)
f0107653:	68 ec 21 13 f0       	push   $0xf01321ec
f0107658:	68 2f 01 00 00       	push   $0x12f
f010765d:	68 2f 21 13 f0       	push   $0xf013212f
f0107662:	e8 49 8b ff ff       	call   f01001b0 <_panic>
f0107667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010766a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010766f:	89 c2                	mov    %eax,%edx
f0107671:	8b 45 10             	mov    0x10(%ebp),%eax
f0107674:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107676:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107679:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010767f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107682:	c1 e8 16             	shr    $0x16,%eax
f0107685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010768c:	8b 45 08             	mov    0x8(%ebp),%eax
f010768f:	01 d0                	add    %edx,%eax
f0107691:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107694:	83 ca 07             	or     $0x7,%edx
f0107697:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0107699:	8b 45 10             	mov    0x10(%ebp),%eax
f010769c:	8b 00                	mov    (%eax),%eax
f010769e:	83 ec 04             	sub    $0x4,%esp
f01076a1:	68 00 10 00 00       	push   $0x1000
f01076a6:	6a 00                	push   $0x0
f01076a8:	50                   	push   %eax
f01076a9:	e8 4e 79 02 00       	call   f012effc <memset>
f01076ae:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01076b1:	0f 20 d8             	mov    %cr3,%eax
f01076b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01076b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076ba:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01076bd:	90                   	nop
f01076be:	c9                   	leave  
f01076bf:	c3                   	ret    

f01076c0 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01076c0:	55                   	push   %ebp
f01076c1:	89 e5                	mov    %esp,%ebp
f01076c3:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01076c6:	ff 75 0c             	pushl  0xc(%ebp)
f01076c9:	e8 8b f7 ff ff       	call   f0106e59 <to_physical_address>
f01076ce:	83 c4 04             	add    $0x4,%esp
f01076d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01076d4:	83 ec 04             	sub    $0x4,%esp
f01076d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076da:	50                   	push   %eax
f01076db:	ff 75 10             	pushl  0x10(%ebp)
f01076de:	ff 75 08             	pushl  0x8(%ebp)
f01076e1:	e8 01 fe ff ff       	call   f01074e7 <get_page_table>
f01076e6:	83 c4 10             	add    $0x10,%esp
f01076e9:	83 f8 01             	cmp    $0x1,%eax
f01076ec:	75 15                	jne    f0107703 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f01076ee:	83 ec 04             	sub    $0x4,%esp
f01076f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076f4:	50                   	push   %eax
f01076f5:	ff 75 10             	pushl  0x10(%ebp)
f01076f8:	ff 75 08             	pushl  0x8(%ebp)
f01076fb:	e8 0d ff ff ff       	call   f010760d <__static_cpt>
f0107700:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107703:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107706:	8b 55 10             	mov    0x10(%ebp),%edx
f0107709:	c1 ea 0c             	shr    $0xc,%edx
f010770c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107712:	c1 e2 02             	shl    $0x2,%edx
f0107715:	01 d0                	add    %edx,%eax
f0107717:	8b 00                	mov    (%eax),%eax
f0107719:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010771c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010771f:	83 e0 01             	and    $0x1,%eax
f0107722:	85 c0                	test   %eax,%eax
f0107724:	74 25                	je     f010774b <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0107726:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107729:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010772e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107731:	75 07                	jne    f010773a <map_frame+0x7a>
			return 0;
f0107733:	b8 00 00 00 00       	mov    $0x0,%eax
f0107738:	eb 43                	jmp    f010777d <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010773a:	83 ec 08             	sub    $0x8,%esp
f010773d:	ff 75 10             	pushl  0x10(%ebp)
f0107740:	ff 75 08             	pushl  0x8(%ebp)
f0107743:	e8 a7 00 00 00       	call   f01077ef <unmap_frame>
f0107748:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010774b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774e:	8b 40 08             	mov    0x8(%eax),%eax
f0107751:	40                   	inc    %eax
f0107752:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107755:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0107759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010775c:	8b 55 10             	mov    0x10(%ebp),%edx
f010775f:	c1 ea 0c             	shr    $0xc,%edx
f0107762:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107768:	c1 e2 02             	shl    $0x2,%edx
f010776b:	01 c2                	add    %eax,%edx
f010776d:	8b 45 14             	mov    0x14(%ebp),%eax
f0107770:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107773:	83 c8 01             	or     $0x1,%eax
f0107776:	89 02                	mov    %eax,(%edx)

	return 0;
f0107778:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010777d:	c9                   	leave  
f010777e:	c3                   	ret    

f010777f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f010777f:	55                   	push   %ebp
f0107780:	89 e5                	mov    %esp,%ebp
f0107782:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107785:	83 ec 04             	sub    $0x4,%esp
f0107788:	ff 75 10             	pushl  0x10(%ebp)
f010778b:	ff 75 0c             	pushl  0xc(%ebp)
f010778e:	ff 75 08             	pushl  0x8(%ebp)
f0107791:	e8 51 fd ff ff       	call   f01074e7 <get_page_table>
f0107796:	83 c4 10             	add    $0x10,%esp
f0107799:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010779c:	8b 45 10             	mov    0x10(%ebp),%eax
f010779f:	8b 00                	mov    (%eax),%eax
f01077a1:	85 c0                	test   %eax,%eax
f01077a3:	74 43                	je     f01077e8 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01077a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077a8:	c1 e8 0c             	shr    $0xc,%eax
f01077ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01077b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01077b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01077b6:	8b 00                	mov    (%eax),%eax
f01077b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01077bb:	c1 e2 02             	shl    $0x2,%edx
f01077be:	01 d0                	add    %edx,%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01077c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01077c9:	74 16                	je     f01077e1 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01077cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077d3:	83 ec 0c             	sub    $0xc,%esp
f01077d6:	50                   	push   %eax
f01077d7:	e8 90 f6 ff ff       	call   f0106e6c <to_frame_info>
f01077dc:	83 c4 10             	add    $0x10,%esp
f01077df:	eb 0c                	jmp    f01077ed <get_frame_info+0x6e>
		}
		return 0;
f01077e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01077e6:	eb 05                	jmp    f01077ed <get_frame_info+0x6e>
	}
	return 0;
f01077e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01077ed:	c9                   	leave  
f01077ee:	c3                   	ret    

f01077ef <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f01077ef:	55                   	push   %ebp
f01077f0:	89 e5                	mov    %esp,%ebp
f01077f2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01077f5:	83 ec 04             	sub    $0x4,%esp
f01077f8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01077fb:	50                   	push   %eax
f01077fc:	ff 75 0c             	pushl  0xc(%ebp)
f01077ff:	ff 75 08             	pushl  0x8(%ebp)
f0107802:	e8 78 ff ff ff       	call   f010777f <get_frame_info>
f0107807:	83 c4 10             	add    $0x10,%esp
f010780a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010780d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107811:	74 60                	je     f0107873 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107813:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107816:	8a 40 14             	mov    0x14(%eax),%al
f0107819:	84 c0                	test   %al,%al
f010781b:	74 1c                	je     f0107839 <unmap_frame+0x4a>
f010781d:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107824:	77 13                	ja     f0107839 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0107826:	83 ec 08             	sub    $0x8,%esp
f0107829:	ff 75 0c             	pushl  0xc(%ebp)
f010782c:	68 1c 22 13 f0       	push   $0xf013221c
f0107831:	e8 fb 95 ff ff       	call   f0100e31 <cprintf>
f0107836:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0107839:	83 ec 0c             	sub    $0xc,%esp
f010783c:	ff 75 f4             	pushl  -0xc(%ebp)
f010783f:	e8 73 fc ff ff       	call   f01074b7 <decrement_references>
f0107844:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010784a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010784d:	c1 ea 0c             	shr    $0xc,%edx
f0107850:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107856:	c1 e2 02             	shl    $0x2,%edx
f0107859:	01 d0                	add    %edx,%eax
f010785b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107861:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	50                   	push   %eax
f0107868:	ff 75 08             	pushl  0x8(%ebp)
f010786b:	e8 4e f6 ff ff       	call   f0106ebe <tlb_invalidate>
f0107870:	83 c4 10             	add    $0x10,%esp
	}
}
f0107873:	90                   	nop
f0107874:	c9                   	leave  
f0107875:	c3                   	ret    

f0107876 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107876:	55                   	push   %ebp
f0107877:	89 e5                	mov    %esp,%ebp
f0107879:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010787c:	ff 75 0c             	pushl  0xc(%ebp)
f010787f:	e8 d5 f5 ff ff       	call   f0106e59 <to_physical_address>
f0107884:	83 c4 04             	add    $0x4,%esp
f0107887:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010788a:	8b 45 10             	mov    0x10(%ebp),%eax
f010788d:	c1 e8 16             	shr    $0x16,%eax
f0107890:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107897:	8b 45 08             	mov    0x8(%ebp),%eax
f010789a:	01 d0                	add    %edx,%eax
f010789c:	8b 00                	mov    (%eax),%eax
f010789e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01078ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078af:	c1 e8 0c             	shr    $0xc,%eax
f01078b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01078b5:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01078ba:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01078bd:	72 17                	jb     f01078d6 <loadtime_map_frame+0x60>
f01078bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01078c2:	68 ec 21 13 f0       	push   $0xf01321ec
f01078c7:	68 e5 01 00 00       	push   $0x1e5
f01078cc:	68 2f 21 13 f0       	push   $0xf013212f
f01078d1:	e8 da 88 ff ff       	call   f01001b0 <_panic>
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01078de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f01078e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e5:	75 15                	jne    f01078fc <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f01078e7:	83 ec 04             	sub    $0x4,%esp
f01078ea:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01078ed:	50                   	push   %eax
f01078ee:	ff 75 10             	pushl  0x10(%ebp)
f01078f1:	ff 75 08             	pushl  0x8(%ebp)
f01078f4:	e8 14 fd ff ff       	call   f010760d <__static_cpt>
f01078f9:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f01078fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078ff:	8b 40 08             	mov    0x8(%eax),%eax
f0107902:	40                   	inc    %eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010790a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010790d:	8b 55 10             	mov    0x10(%ebp),%edx
f0107910:	c1 ea 0c             	shr    $0xc,%edx
f0107913:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107919:	c1 e2 02             	shl    $0x2,%edx
f010791c:	01 c2                	add    %eax,%edx
f010791e:	8b 45 14             	mov    0x14(%ebp),%eax
f0107921:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107924:	83 c8 01             	or     $0x1,%eax
f0107927:	89 02                	mov    %eax,(%edx)

	return 0;
f0107929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	57                   	push   %edi
f0107934:	56                   	push   %esi
f0107935:	53                   	push   %ebx
f0107936:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107940:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107947:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f010794e:	a1 b8 be 2b f0       	mov    0xf02bbeb8,%eax
f0107953:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107956:	eb 1a                	jmp    f0107972 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107958:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795b:	8a 40 14             	mov    0x14(%eax),%al
f010795e:	84 c0                	test   %al,%al
f0107960:	74 05                	je     f0107967 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107962:	ff 45 e8             	incl   -0x18(%ebp)
f0107965:	eb 03                	jmp    f010796a <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107967:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010796a:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107976:	74 07                	je     f010797f <calculate_available_frames+0x4f>
f0107978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010797b:	8b 00                	mov    (%eax),%eax
f010797d:	eb 05                	jmp    f0107984 <calculate_available_frames+0x54>
f010797f:	b8 00 00 00 00       	mov    $0x0,%eax
f0107984:	a3 c0 be 2b f0       	mov    %eax,0xf02bbec0
f0107989:	a1 c0 be 2b f0       	mov    0xf02bbec0,%eax
f010798e:	85 c0                	test   %eax,%eax
f0107990:	75 c6                	jne    f0107958 <calculate_available_frames+0x28>
f0107992:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107996:	75 c0                	jne    f0107958 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107998:	a1 20 3b 25 f0       	mov    0xf0253b20,%eax
f010799d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079a0:	eb 0b                	jmp    f01079ad <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01079a2:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01079a5:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f01079aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079b1:	74 07                	je     f01079ba <calculate_available_frames+0x8a>
f01079b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b6:	8b 00                	mov    (%eax),%eax
f01079b8:	eb 05                	jmp    f01079bf <calculate_available_frames+0x8f>
f01079ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01079bf:	a3 28 3b 25 f0       	mov    %eax,0xf0253b28
f01079c4:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f01079c9:	85 c0                	test   %eax,%eax
f01079cb:	75 d5                	jne    f01079a2 <calculate_available_frames+0x72>
f01079cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079d1:	75 cf                	jne    f01079a2 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01079d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01079d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01079df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01079e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01079e8:	89 c3                	mov    %eax,%ebx
f01079ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01079ed:	ba 03 00 00 00       	mov    $0x3,%edx
f01079f2:	89 df                	mov    %ebx,%edi
f01079f4:	89 c6                	mov    %eax,%esi
f01079f6:	89 d1                	mov    %edx,%ecx
f01079f8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01079fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01079fd:	83 c4 20             	add    $0x20,%esp
f0107a00:	5b                   	pop    %ebx
f0107a01:	5e                   	pop    %esi
f0107a02:	5f                   	pop    %edi
f0107a03:	5d                   	pop    %ebp
f0107a04:	c2 04 00             	ret    $0x4

f0107a07 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107a07:	55                   	push   %ebp
f0107a08:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a0d:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0107a13:	29 d0                	sub    %edx,%eax
f0107a15:	c1 f8 02             	sar    $0x2,%eax
f0107a18:	89 c2                	mov    %eax,%edx
f0107a1a:	89 d0                	mov    %edx,%eax
f0107a1c:	c1 e0 03             	shl    $0x3,%eax
f0107a1f:	01 d0                	add    %edx,%eax
f0107a21:	c1 e0 03             	shl    $0x3,%eax
f0107a24:	01 d0                	add    %edx,%eax
f0107a26:	c1 e0 03             	shl    $0x3,%eax
f0107a29:	01 d0                	add    %edx,%eax
f0107a2b:	c1 e0 03             	shl    $0x3,%eax
f0107a2e:	01 d0                	add    %edx,%eax
f0107a30:	89 c1                	mov    %eax,%ecx
f0107a32:	c1 e1 0f             	shl    $0xf,%ecx
f0107a35:	01 c8                	add    %ecx,%eax
f0107a37:	c1 e0 03             	shl    $0x3,%eax
f0107a3a:	01 d0                	add    %edx,%eax
f0107a3c:	f7 d8                	neg    %eax
}
f0107a3e:	5d                   	pop    %ebp
f0107a3f:	c3                   	ret    

f0107a40 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107a40:	55                   	push   %ebp
f0107a41:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107a43:	ff 75 08             	pushl  0x8(%ebp)
f0107a46:	e8 bc ff ff ff       	call   f0107a07 <to_frame_number>
f0107a4b:	83 c4 04             	add    $0x4,%esp
f0107a4e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107a51:	c9                   	leave  
f0107a52:	c3                   	ret    

f0107a53 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107a53:	55                   	push   %ebp
f0107a54:	89 e5                	mov    %esp,%ebp
f0107a56:	53                   	push   %ebx
f0107a57:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a5d:	c1 e8 0c             	shr    $0xc,%eax
f0107a60:	89 c2                	mov    %eax,%edx
f0107a62:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0107a67:	39 c2                	cmp    %eax,%edx
f0107a69:	72 14                	jb     f0107a7f <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a6b:	83 ec 04             	sub    $0x4,%esp
f0107a6e:	68 40 22 13 f0       	push   $0xf0132240
f0107a73:	6a 55                	push   $0x55
f0107a75:	68 65 22 13 f0       	push   $0xf0132265
f0107a7a:	e8 31 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a7f:	8b 0d f0 be 2b f0    	mov    0xf02bbef0,%ecx
f0107a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a88:	c1 e8 0c             	shr    $0xc,%eax
f0107a8b:	89 c2                	mov    %eax,%edx
f0107a8d:	89 d0                	mov    %edx,%eax
f0107a8f:	01 c0                	add    %eax,%eax
f0107a91:	01 d0                	add    %edx,%eax
f0107a93:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a9a:	01 d8                	add    %ebx,%eax
f0107a9c:	01 d0                	add    %edx,%eax
f0107a9e:	01 c8                	add    %ecx,%eax
}
f0107aa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107aa3:	c9                   	leave  
f0107aa4:	c3                   	ret    

f0107aa5 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107aa5:	55                   	push   %ebp
f0107aa6:	89 e5                	mov    %esp,%ebp
f0107aa8:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107ab2:	eb 5f                	jmp    f0107b13 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107ab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ab7:	89 d0                	mov    %edx,%eax
f0107ab9:	01 c0                	add    %eax,%eax
f0107abb:	01 d0                	add    %edx,%eax
f0107abd:	01 c0                	add    %eax,%eax
f0107abf:	01 d0                	add    %edx,%eax
f0107ac1:	c1 e0 02             	shl    $0x2,%eax
f0107ac4:	01 d0                	add    %edx,%eax
f0107ac6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107acd:	01 d0                	add    %edx,%eax
f0107acf:	c1 e0 04             	shl    $0x4,%eax
f0107ad2:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107ad7:	83 ec 04             	sub    $0x4,%esp
f0107ada:	68 50 10 00 00       	push   $0x1050
f0107adf:	6a 00                	push   $0x0
f0107ae1:	50                   	push   %eax
f0107ae2:	e8 15 75 02 00       	call   f012effc <memset>
f0107ae7:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107aed:	89 d0                	mov    %edx,%eax
f0107aef:	01 c0                	add    %eax,%eax
f0107af1:	01 d0                	add    %edx,%eax
f0107af3:	01 c0                	add    %eax,%eax
f0107af5:	01 d0                	add    %edx,%eax
f0107af7:	c1 e0 02             	shl    $0x2,%eax
f0107afa:	01 d0                	add    %edx,%eax
f0107afc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b03:	01 d0                	add    %edx,%eax
f0107b05:	c1 e0 04             	shl    $0x4,%eax
f0107b08:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107b0d:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b10:	ff 45 f4             	incl   -0xc(%ebp)
f0107b13:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107b17:	7e 9b                	jle    f0107ab4 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107b19:	90                   	nop
f0107b1a:	c9                   	leave  
f0107b1b:	c3                   	ret    

f0107b1c <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107b1c:	55                   	push   %ebp
f0107b1d:	89 e5                	mov    %esp,%ebp
f0107b1f:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107b22:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107b30:	eb 34                	jmp    f0107b66 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107b32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b35:	89 d0                	mov    %edx,%eax
f0107b37:	01 c0                	add    %eax,%eax
f0107b39:	01 d0                	add    %edx,%eax
f0107b3b:	01 c0                	add    %eax,%eax
f0107b3d:	01 d0                	add    %edx,%eax
f0107b3f:	c1 e0 02             	shl    $0x2,%eax
f0107b42:	01 d0                	add    %edx,%eax
f0107b44:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b4b:	01 d0                	add    %edx,%eax
f0107b4d:	c1 e0 04             	shl    $0x4,%eax
f0107b50:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107b55:	8a 00                	mov    (%eax),%al
f0107b57:	84 c0                	test   %al,%al
f0107b59:	74 08                	je     f0107b63 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b61:	eb 09                	jmp    f0107b6c <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b63:	ff 45 f0             	incl   -0x10(%ebp)
f0107b66:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b6a:	7e c6                	jle    f0107b32 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b6c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b70:	75 0a                	jne    f0107b7c <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b72:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b77:	e9 8b 00 00 00       	jmp    f0107c07 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b7f:	89 d0                	mov    %edx,%eax
f0107b81:	01 c0                	add    %eax,%eax
f0107b83:	01 d0                	add    %edx,%eax
f0107b85:	01 c0                	add    %eax,%eax
f0107b87:	01 d0                	add    %edx,%eax
f0107b89:	c1 e0 02             	shl    $0x2,%eax
f0107b8c:	01 d0                	add    %edx,%eax
f0107b8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b95:	01 d0                	add    %edx,%eax
f0107b97:	c1 e0 04             	shl    $0x4,%eax
f0107b9a:	8d 90 60 3b 25 f0    	lea    -0xfdac4a0(%eax),%edx
f0107ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ba3:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107ba5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ba8:	89 d0                	mov    %edx,%eax
f0107baa:	01 c0                	add    %eax,%eax
f0107bac:	01 d0                	add    %edx,%eax
f0107bae:	01 c0                	add    %eax,%eax
f0107bb0:	01 d0                	add    %edx,%eax
f0107bb2:	c1 e0 02             	shl    $0x2,%eax
f0107bb5:	01 d0                	add    %edx,%eax
f0107bb7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bbe:	01 d0                	add    %edx,%eax
f0107bc0:	c1 e0 04             	shl    $0x4,%eax
f0107bc3:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107bc8:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bce:	89 d0                	mov    %edx,%eax
f0107bd0:	01 c0                	add    %eax,%eax
f0107bd2:	01 d0                	add    %edx,%eax
f0107bd4:	01 c0                	add    %eax,%eax
f0107bd6:	01 d0                	add    %edx,%eax
f0107bd8:	c1 e0 02             	shl    $0x2,%eax
f0107bdb:	01 d0                	add    %edx,%eax
f0107bdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107be4:	01 d0                	add    %edx,%eax
f0107be6:	c1 e0 04             	shl    $0x4,%eax
f0107be9:	83 c0 50             	add    $0x50,%eax
f0107bec:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107bf1:	83 ec 04             	sub    $0x4,%esp
f0107bf4:	68 00 10 00 00       	push   $0x1000
f0107bf9:	6a 00                	push   $0x0
f0107bfb:	50                   	push   %eax
f0107bfc:	e8 fb 73 02 00       	call   f012effc <memset>
f0107c01:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107c07:	c9                   	leave  
f0107c08:	c3                   	ret    

f0107c09 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107c09:	55                   	push   %ebp
f0107c0a:	89 e5                	mov    %esp,%ebp
f0107c0c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107c0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107c16:	e9 95 00 00 00       	jmp    f0107cb0 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107c1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c1e:	89 d0                	mov    %edx,%eax
f0107c20:	01 c0                	add    %eax,%eax
f0107c22:	01 d0                	add    %edx,%eax
f0107c24:	01 c0                	add    %eax,%eax
f0107c26:	01 d0                	add    %edx,%eax
f0107c28:	c1 e0 02             	shl    $0x2,%eax
f0107c2b:	01 d0                	add    %edx,%eax
f0107c2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c34:	01 d0                	add    %edx,%eax
f0107c36:	c1 e0 04             	shl    $0x4,%eax
f0107c39:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107c3e:	8a 00                	mov    (%eax),%al
f0107c40:	84 c0                	test   %al,%al
f0107c42:	75 68                	jne    f0107cac <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107c44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c47:	89 d0                	mov    %edx,%eax
f0107c49:	01 c0                	add    %eax,%eax
f0107c4b:	01 d0                	add    %edx,%eax
f0107c4d:	01 c0                	add    %eax,%eax
f0107c4f:	01 d0                	add    %edx,%eax
f0107c51:	c1 e0 02             	shl    $0x2,%eax
f0107c54:	01 d0                	add    %edx,%eax
f0107c56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c5d:	01 d0                	add    %edx,%eax
f0107c5f:	c1 e0 04             	shl    $0x4,%eax
f0107c62:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107c67:	8b 00                	mov    (%eax),%eax
f0107c69:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c6c:	75 3f                	jne    f0107cad <get_share_object_ID+0xa4>
f0107c6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c71:	89 d0                	mov    %edx,%eax
f0107c73:	01 c0                	add    %eax,%eax
f0107c75:	01 d0                	add    %edx,%eax
f0107c77:	01 c0                	add    %eax,%eax
f0107c79:	01 d0                	add    %edx,%eax
f0107c7b:	c1 e0 02             	shl    $0x2,%eax
f0107c7e:	01 d0                	add    %edx,%eax
f0107c80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c87:	01 d0                	add    %edx,%eax
f0107c89:	c1 e0 04             	shl    $0x4,%eax
f0107c8c:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107c91:	83 c0 04             	add    $0x4,%eax
f0107c94:	83 ec 08             	sub    $0x8,%esp
f0107c97:	50                   	push   %eax
f0107c98:	ff 75 0c             	pushl  0xc(%ebp)
f0107c9b:	e8 7a 72 02 00       	call   f012ef1a <strcmp>
f0107ca0:	83 c4 10             	add    $0x10,%esp
f0107ca3:	85 c0                	test   %eax,%eax
f0107ca5:	75 06                	jne    f0107cad <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107caa:	eb 13                	jmp    f0107cbf <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107cac:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107cad:	ff 45 f4             	incl   -0xc(%ebp)
f0107cb0:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107cb4:	0f 8e 61 ff ff ff    	jle    f0107c1b <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107cba:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107cbf:	c9                   	leave  
f0107cc0:	c3                   	ret    

f0107cc1 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107cc1:	55                   	push   %ebp
f0107cc2:	89 e5                	mov    %esp,%ebp
f0107cc4:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107cc7:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107ccb:	76 0a                	jbe    f0107cd7 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107ccd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107cd2:	e9 93 00 00 00       	jmp    f0107d6a <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107cd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cda:	89 d0                	mov    %edx,%eax
f0107cdc:	01 c0                	add    %eax,%eax
f0107cde:	01 d0                	add    %edx,%eax
f0107ce0:	01 c0                	add    %eax,%eax
f0107ce2:	01 d0                	add    %edx,%eax
f0107ce4:	c1 e0 02             	shl    $0x2,%eax
f0107ce7:	01 d0                	add    %edx,%eax
f0107ce9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cf0:	01 d0                	add    %edx,%eax
f0107cf2:	c1 e0 04             	shl    $0x4,%eax
f0107cf5:	83 c0 50             	add    $0x50,%eax
f0107cf8:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107cfd:	83 ec 0c             	sub    $0xc,%esp
f0107d00:	50                   	push   %eax
f0107d01:	e8 3e 01 00 00       	call   f0107e44 <clear_frames_storage>
f0107d06:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107d09:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	01 c0                	add    %eax,%eax
f0107d14:	01 d0                	add    %edx,%eax
f0107d16:	c1 e0 02             	shl    $0x2,%eax
f0107d19:	01 d0                	add    %edx,%eax
f0107d1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d22:	01 d0                	add    %edx,%eax
f0107d24:	c1 e0 04             	shl    $0x4,%eax
f0107d27:	05 60 3b 25 f0       	add    $0xf0253b60,%eax
f0107d2c:	83 ec 04             	sub    $0x4,%esp
f0107d2f:	68 50 10 00 00       	push   $0x1050
f0107d34:	6a 00                	push   $0x0
f0107d36:	50                   	push   %eax
f0107d37:	e8 c0 72 02 00       	call   f012effc <memset>
f0107d3c:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107d3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d42:	89 d0                	mov    %edx,%eax
f0107d44:	01 c0                	add    %eax,%eax
f0107d46:	01 d0                	add    %edx,%eax
f0107d48:	01 c0                	add    %eax,%eax
f0107d4a:	01 d0                	add    %edx,%eax
f0107d4c:	c1 e0 02             	shl    $0x2,%eax
f0107d4f:	01 d0                	add    %edx,%eax
f0107d51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d58:	01 d0                	add    %edx,%eax
f0107d5a:	c1 e0 04             	shl    $0x4,%eax
f0107d5d:	05 ad 3b 25 f0       	add    $0xf0253bad,%eax
f0107d62:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d6a:	c9                   	leave  
f0107d6b:	c3                   	ret    

f0107d6c <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d6c:	55                   	push   %ebp
f0107d6d:	89 e5                	mov    %esp,%ebp
f0107d6f:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d72:	83 ec 0c             	sub    $0xc,%esp
f0107d75:	68 00 10 00 00       	push   $0x1000
f0107d7a:	e8 e0 01 00 00       	call   f0107f5f <kmalloc>
f0107d7f:	83 c4 10             	add    $0x10,%esp
f0107d82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d89:	75 17                	jne    f0107da2 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d8b:	83 ec 04             	sub    $0x4,%esp
f0107d8e:	68 7f 22 13 f0       	push   $0xf013227f
f0107d93:	68 a6 00 00 00       	push   $0xa6
f0107d98:	68 9c 22 13 f0       	push   $0xf013229c
f0107d9d:	e8 0e 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107da5:	c9                   	leave  
f0107da6:	c3                   	ret    

f0107da7 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107da7:	55                   	push   %ebp
f0107da8:	89 e5                	mov    %esp,%ebp
f0107daa:	53                   	push   %ebx
f0107dab:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107dae:	8b 45 10             	mov    0x10(%ebp),%eax
f0107db1:	c1 e0 0c             	shl    $0xc,%eax
f0107db4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107db7:	83 ec 04             	sub    $0x4,%esp
f0107dba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dbd:	50                   	push   %eax
f0107dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dc1:	ff 75 08             	pushl  0x8(%ebp)
f0107dc4:	e8 1e f7 ff ff       	call   f01074e7 <get_page_table>
f0107dc9:	83 c4 10             	add    $0x10,%esp
f0107dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107dcf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107dd3:	75 15                	jne    f0107dea <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107dd5:	83 ec 04             	sub    $0x4,%esp
f0107dd8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107ddb:	50                   	push   %eax
f0107ddc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ddf:	ff 75 08             	pushl  0x8(%ebp)
f0107de2:	e8 26 f8 ff ff       	call   f010760d <__static_cpt>
f0107de7:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ded:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107df0:	c1 ea 0c             	shr    $0xc,%edx
f0107df3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107df9:	c1 e2 02             	shl    $0x2,%edx
f0107dfc:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107dff:	83 ec 0c             	sub    $0xc,%esp
f0107e02:	ff 75 0c             	pushl  0xc(%ebp)
f0107e05:	e8 36 fc ff ff       	call   f0107a40 <to_physical_address>
f0107e0a:	83 c4 10             	add    $0x10,%esp
f0107e0d:	83 c8 01             	or     $0x1,%eax
f0107e10:	89 03                	mov    %eax,(%ebx)
}
f0107e12:	90                   	nop
f0107e13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e16:	c9                   	leave  
f0107e17:	c3                   	ret    

f0107e18 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107e18:	55                   	push   %ebp
f0107e19:	89 e5                	mov    %esp,%ebp
f0107e1b:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e21:	c1 e0 0c             	shl    $0xc,%eax
f0107e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107e27:	83 ec 04             	sub    $0x4,%esp
f0107e2a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e2d:	50                   	push   %eax
f0107e2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e31:	ff 75 08             	pushl  0x8(%ebp)
f0107e34:	e8 46 f9 ff ff       	call   f010777f <get_frame_info>
f0107e39:	83 c4 10             	add    $0x10,%esp
f0107e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107e42:	c9                   	leave  
f0107e43:	c3                   	ret    

f0107e44 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107e44:	55                   	push   %ebp
f0107e45:	89 e5                	mov    %esp,%ebp
f0107e47:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107e4a:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107e58:	eb 5b                	jmp    f0107eb5 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e67:	01 d0                	add    %edx,%eax
f0107e69:	8b 00                	mov    (%eax),%eax
f0107e6b:	85 c0                	test   %eax,%eax
f0107e6d:	74 43                	je     f0107eb2 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e7c:	01 d0                	add    %edx,%eax
f0107e7e:	8b 00                	mov    (%eax),%eax
f0107e80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e85:	83 ec 0c             	sub    $0xc,%esp
f0107e88:	50                   	push   %eax
f0107e89:	e8 c5 fb ff ff       	call   f0107a53 <to_frame_info>
f0107e8e:	83 c4 10             	add    $0x10,%esp
f0107e91:	83 ec 0c             	sub    $0xc,%esp
f0107e94:	50                   	push   %eax
f0107e95:	e8 a3 f5 ff ff       	call   f010743d <free_frame>
f0107e9a:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107eaa:	01 d0                	add    %edx,%eax
f0107eac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107eb2:	ff 45 f4             	incl   -0xc(%ebp)
f0107eb5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107ebc:	7e 9c                	jle    f0107e5a <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107ebe:	90                   	nop
f0107ebf:	c9                   	leave  
f0107ec0:	c3                   	ret    

f0107ec1 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107ec1:	55                   	push   %ebp
f0107ec2:	89 e5                	mov    %esp,%ebp
f0107ec4:	83 ec 18             	sub    $0x18,%esp
f0107ec7:	8b 45 14             	mov    0x14(%ebp),%eax
f0107eca:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107ecd:	83 ec 04             	sub    $0x4,%esp
f0107ed0:	68 c0 22 13 f0       	push   $0xf01322c0
f0107ed5:	68 f6 00 00 00       	push   $0xf6
f0107eda:	68 9c 22 13 f0       	push   $0xf013229c
f0107edf:	e8 cc 82 ff ff       	call   f01001b0 <_panic>

f0107ee4 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107ee4:	55                   	push   %ebp
f0107ee5:	89 e5                	mov    %esp,%ebp
f0107ee7:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107eea:	83 ec 04             	sub    $0x4,%esp
f0107eed:	68 f4 22 13 f0       	push   $0xf01322f4
f0107ef2:	68 02 01 00 00       	push   $0x102
f0107ef7:	68 9c 22 13 f0       	push   $0xf013229c
f0107efc:	e8 af 82 ff ff       	call   f01001b0 <_panic>

f0107f01 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107f01:	55                   	push   %ebp
f0107f02:	89 e5                	mov    %esp,%ebp
f0107f04:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 28 23 13 f0       	push   $0xf0132328
f0107f0f:	68 0c 01 00 00       	push   $0x10c
f0107f14:	68 9c 22 13 f0       	push   $0xf013229c
f0107f19:	e8 92 82 ff ff       	call   f01001b0 <_panic>

f0107f1e <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107f1e:	55                   	push   %ebp
f0107f1f:	89 e5                	mov    %esp,%ebp
f0107f21:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107f24:	83 ec 04             	sub    $0x4,%esp
f0107f27:	68 58 23 13 f0       	push   $0xf0132358
f0107f2c:	68 1b 01 00 00       	push   $0x11b
f0107f31:	68 9c 22 13 f0       	push   $0xf013229c
f0107f36:	e8 75 82 ff ff       	call   f01001b0 <_panic>

f0107f3b <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107f3b:	55                   	push   %ebp
f0107f3c:	89 e5                	mov    %esp,%ebp
f0107f3e:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107f41:	83 ec 04             	sub    $0x4,%esp
f0107f44:	68 88 23 13 f0       	push   $0xf0132388
f0107f49:	6a 13                	push   $0x13
f0107f4b:	68 9c 23 13 f0       	push   $0xf013239c
f0107f50:	e8 5b 82 ff ff       	call   f01001b0 <_panic>

f0107f55 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107f55:	55                   	push   %ebp
f0107f56:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107f58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107f5d:	5d                   	pop    %ebp
f0107f5e:	c3                   	ret    

f0107f5f <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107f5f:	55                   	push   %ebp
f0107f60:	89 e5                	mov    %esp,%ebp
f0107f62:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107f65:	83 ec 04             	sub    $0x4,%esp
f0107f68:	68 b0 23 13 f0       	push   $0xf01323b0
f0107f6d:	6a 36                	push   $0x36
f0107f6f:	68 9c 23 13 f0       	push   $0xf013239c
f0107f74:	e8 94 83 ff ff       	call   f010030d <_panic_into_prompt>

f0107f79 <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107f79:	55                   	push   %ebp
f0107f7a:	89 e5                	mov    %esp,%ebp
f0107f7c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107f7f:	83 ec 04             	sub    $0x4,%esp
f0107f82:	68 d8 23 13 f0       	push   $0xf01323d8
f0107f87:	6a 3f                	push   $0x3f
f0107f89:	68 9c 23 13 f0       	push   $0xf013239c
f0107f8e:	e8 1d 82 ff ff       	call   f01001b0 <_panic>

f0107f93 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107f93:	55                   	push   %ebp
f0107f94:	89 e5                	mov    %esp,%ebp
f0107f96:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107f99:	83 ec 04             	sub    $0x4,%esp
f0107f9c:	68 fc 23 13 f0       	push   $0xf01323fc
f0107fa1:	6a 47                	push   $0x47
f0107fa3:	68 9c 23 13 f0       	push   $0xf013239c
f0107fa8:	e8 03 82 ff ff       	call   f01001b0 <_panic>

f0107fad <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107fad:	55                   	push   %ebp
f0107fae:	89 e5                	mov    %esp,%ebp
f0107fb0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107fb3:	83 ec 04             	sub    $0x4,%esp
f0107fb6:	68 30 24 13 f0       	push   $0xf0132430
f0107fbb:	6a 54                	push   $0x54
f0107fbd:	68 9c 23 13 f0       	push   $0xf013239c
f0107fc2:	e8 e9 81 ff ff       	call   f01001b0 <_panic>

f0107fc7 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107fc7:	55                   	push   %ebp
f0107fc8:	89 e5                	mov    %esp,%ebp
f0107fca:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fcd:	83 ec 04             	sub    $0x4,%esp
f0107fd0:	68 65 24 13 f0       	push   $0xf0132465
f0107fd5:	6a 5d                	push   $0x5d
f0107fd7:	68 9c 23 13 f0       	push   $0xf013239c
f0107fdc:	e8 cf 81 ff ff       	call   f01001b0 <_panic>

f0107fe1 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107fe1:	55                   	push   %ebp
f0107fe2:	89 e5                	mov    %esp,%ebp
f0107fe4:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fe7:	83 ec 04             	sub    $0x4,%esp
f0107fea:	68 65 24 13 f0       	push   $0xf0132465
f0107fef:	6a 63                	push   $0x63
f0107ff1:	68 9c 23 13 f0       	push   $0xf013239c
f0107ff6:	e8 b5 81 ff ff       	call   f01001b0 <_panic>

f0107ffb <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107ffb:	55                   	push   %ebp
f0107ffc:	89 e5                	mov    %esp,%ebp
f0107ffe:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108001:	83 ec 04             	sub    $0x4,%esp
f0108004:	68 65 24 13 f0       	push   $0xf0132465
f0108009:	6a 68                	push   $0x68
f010800b:	68 9c 23 13 f0       	push   $0xf013239c
f0108010:	e8 9b 81 ff ff       	call   f01001b0 <_panic>

f0108015 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108015:	55                   	push   %ebp
f0108016:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0108018:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f010801d:	5d                   	pop    %ebp
f010801e:	c3                   	ret    

f010801f <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f010801f:	55                   	push   %ebp
f0108020:	89 e5                	mov    %esp,%ebp
f0108022:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108025:	83 ec 04             	sub    $0x4,%esp
f0108028:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010802b:	50                   	push   %eax
f010802c:	ff 75 0c             	pushl  0xc(%ebp)
f010802f:	ff 75 08             	pushl  0x8(%ebp)
f0108032:	e8 b0 f4 ff ff       	call   f01074e7 <get_page_table>
f0108037:	83 c4 10             	add    $0x10,%esp
f010803a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010803d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108040:	85 c0                	test   %eax,%eax
f0108042:	74 64                	je     f01080a8 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108044:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108047:	8b 55 0c             	mov    0xc(%ebp),%edx
f010804a:	c1 ea 0c             	shr    $0xc,%edx
f010804d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108053:	c1 e2 02             	shl    $0x2,%edx
f0108056:	01 c2                	add    %eax,%edx
f0108058:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010805b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010805e:	c1 e9 0c             	shr    $0xc,%ecx
f0108061:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108067:	c1 e1 02             	shl    $0x2,%ecx
f010806a:	01 c8                	add    %ecx,%eax
f010806c:	8b 00                	mov    (%eax),%eax
f010806e:	0b 45 10             	or     0x10(%ebp),%eax
f0108071:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108073:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108076:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108079:	c1 ea 0c             	shr    $0xc,%edx
f010807c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108082:	c1 e2 02             	shl    $0x2,%edx
f0108085:	01 d0                	add    %edx,%eax
f0108087:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010808a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010808d:	c1 e9 0c             	shr    $0xc,%ecx
f0108090:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108096:	c1 e1 02             	shl    $0x2,%ecx
f0108099:	01 ca                	add    %ecx,%edx
f010809b:	8b 12                	mov    (%edx),%edx
f010809d:	8b 4d 14             	mov    0x14(%ebp),%ecx
f01080a0:	f7 d1                	not    %ecx
f01080a2:	21 ca                	and    %ecx,%edx
f01080a4:	89 10                	mov    %edx,(%eax)
f01080a6:	eb 27                	jmp    f01080cf <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f01080a8:	83 ec 08             	sub    $0x8,%esp
f01080ab:	ff 75 0c             	pushl  0xc(%ebp)
f01080ae:	68 78 24 13 f0       	push   $0xf0132478
f01080b3:	e8 79 8d ff ff       	call   f0100e31 <cprintf>
f01080b8:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f01080bb:	83 ec 04             	sub    $0x4,%esp
f01080be:	68 a0 24 13 f0       	push   $0xf01324a0
f01080c3:	6a 1c                	push   $0x1c
f01080c5:	68 14 25 13 f0       	push   $0xf0132514
f01080ca:	e8 e1 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080d2:	83 ec 08             	sub    $0x8,%esp
f01080d5:	50                   	push   %eax
f01080d6:	6a 00                	push   $0x0
f01080d8:	e8 e1 ed ff ff       	call   f0106ebe <tlb_invalidate>
f01080dd:	83 c4 10             	add    $0x10,%esp
}
f01080e0:	90                   	nop
f01080e1:	c9                   	leave  
f01080e2:	c3                   	ret    

f01080e3 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01080e3:	55                   	push   %ebp
f01080e4:	89 e5                	mov    %esp,%ebp
f01080e6:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01080e9:	83 ec 04             	sub    $0x4,%esp
f01080ec:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01080ef:	50                   	push   %eax
f01080f0:	ff 75 0c             	pushl  0xc(%ebp)
f01080f3:	ff 75 08             	pushl  0x8(%ebp)
f01080f6:	e8 ec f3 ff ff       	call   f01074e7 <get_page_table>
f01080fb:	83 c4 10             	add    $0x10,%esp
f01080fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108101:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108104:	85 c0                	test   %eax,%eax
f0108106:	74 1d                	je     f0108125 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108108:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010810b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010810e:	c1 ea 0c             	shr    $0xc,%edx
f0108111:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108117:	c1 e2 02             	shl    $0x2,%edx
f010811a:	01 d0                	add    %edx,%eax
f010811c:	8b 00                	mov    (%eax),%eax
f010811e:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108123:	eb 05                	jmp    f010812a <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108125:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010812a:	c9                   	leave  
f010812b:	c3                   	ret    

f010812c <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f010812c:	55                   	push   %ebp
f010812d:	89 e5                	mov    %esp,%ebp
f010812f:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108132:	83 ec 04             	sub    $0x4,%esp
f0108135:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108138:	50                   	push   %eax
f0108139:	ff 75 0c             	pushl  0xc(%ebp)
f010813c:	ff 75 08             	pushl  0x8(%ebp)
f010813f:	e8 a3 f3 ff ff       	call   f01074e7 <get_page_table>
f0108144:	83 c4 10             	add    $0x10,%esp
f0108147:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010814a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010814d:	85 c0                	test   %eax,%eax
f010814f:	74 46                	je     f0108197 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108151:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108154:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108157:	c1 ea 0c             	shr    $0xc,%edx
f010815a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108160:	c1 e2 02             	shl    $0x2,%edx
f0108163:	01 d0                	add    %edx,%eax
f0108165:	8b 00                	mov    (%eax),%eax
f0108167:	83 ec 04             	sub    $0x4,%esp
f010816a:	50                   	push   %eax
f010816b:	ff 75 0c             	pushl  0xc(%ebp)
f010816e:	68 30 25 13 f0       	push   $0xf0132530
f0108173:	e8 b9 8c ff ff       	call   f0100e31 <cprintf>
f0108178:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010817b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108181:	c1 ea 0c             	shr    $0xc,%edx
f0108184:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010818a:	c1 e2 02             	shl    $0x2,%edx
f010818d:	01 d0                	add    %edx,%eax
f010818f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108195:	eb 14                	jmp    f01081ab <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108197:	83 ec 04             	sub    $0x4,%esp
f010819a:	68 58 25 13 f0       	push   $0xf0132558
f010819f:	6a 47                	push   $0x47
f01081a1:	68 14 25 13 f0       	push   $0xf0132514
f01081a6:	e8 05 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01081ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ae:	83 ec 08             	sub    $0x8,%esp
f01081b1:	50                   	push   %eax
f01081b2:	6a 00                	push   $0x0
f01081b4:	e8 05 ed ff ff       	call   f0106ebe <tlb_invalidate>
f01081b9:	83 c4 10             	add    $0x10,%esp
}
f01081bc:	90                   	nop
f01081bd:	c9                   	leave  
f01081be:	c3                   	ret    

f01081bf <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01081bf:	55                   	push   %ebp
f01081c0:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01081c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081c5:	c1 e8 16             	shr    $0x16,%eax
f01081c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01081d2:	01 d0                	add    %edx,%eax
f01081d4:	8b 00                	mov    (%eax),%eax
f01081d6:	83 e0 20             	and    $0x20,%eax
f01081d9:	85 c0                	test   %eax,%eax
f01081db:	0f 95 c0             	setne  %al
f01081de:	0f b6 c0             	movzbl %al,%eax
}
f01081e1:	5d                   	pop    %ebp
f01081e2:	c3                   	ret    

f01081e3 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01081e3:	55                   	push   %ebp
f01081e4:	89 e5                	mov    %esp,%ebp
f01081e6:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01081e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ec:	c1 e8 16             	shr    $0x16,%eax
f01081ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081f9:	01 d0                	add    %edx,%eax
f01081fb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081fe:	c1 ea 16             	shr    $0x16,%edx
f0108201:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108208:	8b 55 08             	mov    0x8(%ebp),%edx
f010820b:	01 ca                	add    %ecx,%edx
f010820d:	8b 12                	mov    (%edx),%edx
f010820f:	83 e2 df             	and    $0xffffffdf,%edx
f0108212:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108214:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108217:	83 ec 08             	sub    $0x8,%esp
f010821a:	50                   	push   %eax
f010821b:	6a 00                	push   $0x0
f010821d:	e8 9c ec ff ff       	call   f0106ebe <tlb_invalidate>
f0108222:	83 c4 10             	add    $0x10,%esp
}
f0108225:	90                   	nop
f0108226:	c9                   	leave  
f0108227:	c3                   	ret    

f0108228 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108228:	55                   	push   %ebp
f0108229:	89 e5                	mov    %esp,%ebp
f010822b:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f010822e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108231:	c1 e8 16             	shr    $0x16,%eax
f0108234:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010823b:	8b 45 08             	mov    0x8(%ebp),%eax
f010823e:	01 d0                	add    %edx,%eax
f0108240:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108246:	0f 20 d8             	mov    %cr3,%eax
f0108249:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010824c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010824f:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108252:	90                   	nop
f0108253:	c9                   	leave  
f0108254:	c3                   	ret    

f0108255 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108255:	55                   	push   %ebp
f0108256:	89 e5                	mov    %esp,%ebp
f0108258:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010825b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108262:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108269:	eb 22                	jmp    f010828d <env_page_ws_get_size+0x38>
f010826b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010826e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108271:	89 d0                	mov    %edx,%eax
f0108273:	01 c0                	add    %eax,%eax
f0108275:	01 d0                	add    %edx,%eax
f0108277:	c1 e0 03             	shl    $0x3,%eax
f010827a:	01 c8                	add    %ecx,%eax
f010827c:	05 bc 00 00 00       	add    $0xbc,%eax
f0108281:	8a 00                	mov    (%eax),%al
f0108283:	84 c0                	test   %al,%al
f0108285:	75 03                	jne    f010828a <env_page_ws_get_size+0x35>
f0108287:	ff 45 f8             	incl   -0x8(%ebp)
f010828a:	ff 45 fc             	incl   -0x4(%ebp)
f010828d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108290:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108296:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108299:	39 c2                	cmp    %eax,%edx
f010829b:	77 ce                	ja     f010826b <env_page_ws_get_size+0x16>
	return counter;
f010829d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01082a0:	c9                   	leave  
f01082a1:	c3                   	ret    

f01082a2 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01082a2:	55                   	push   %ebp
f01082a3:	89 e5                	mov    %esp,%ebp
f01082a5:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01082a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01082af:	eb 4e                	jmp    f01082ff <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f01082b1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01082b7:	89 d0                	mov    %edx,%eax
f01082b9:	01 c0                	add    %eax,%eax
f01082bb:	01 d0                	add    %edx,%eax
f01082bd:	c1 e0 03             	shl    $0x3,%eax
f01082c0:	01 c8                	add    %ecx,%eax
f01082c2:	05 b8 00 00 00       	add    $0xb8,%eax
f01082c7:	8b 00                	mov    (%eax),%eax
f01082c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082cf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082d4:	89 c2                	mov    %eax,%edx
f01082d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01082dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01082df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082e4:	39 c2                	cmp    %eax,%edx
f01082e6:	75 14                	jne    f01082fc <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f01082e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082eb:	83 ec 08             	sub    $0x8,%esp
f01082ee:	50                   	push   %eax
f01082ef:	ff 75 08             	pushl  0x8(%ebp)
f01082f2:	e8 c8 00 00 00       	call   f01083bf <env_page_ws_clear_entry>
f01082f7:	83 c4 10             	add    $0x10,%esp
			break;
f01082fa:	eb 13                	jmp    f010830f <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01082fc:	ff 45 f4             	incl   -0xc(%ebp)
f01082ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108302:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108308:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010830b:	39 c2                	cmp    %eax,%edx
f010830d:	77 a2                	ja     f01082b1 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f010830f:	90                   	nop
f0108310:	c9                   	leave  
f0108311:	c3                   	ret    

f0108312 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108312:	55                   	push   %ebp
f0108313:	89 e5                	mov    %esp,%ebp
f0108315:	53                   	push   %ebx
f0108316:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108319:	8b 45 08             	mov    0x8(%ebp),%eax
f010831c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108322:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108325:	77 16                	ja     f010833d <env_page_ws_set_entry+0x2b>
f0108327:	68 d0 25 13 f0       	push   $0xf01325d0
f010832c:	68 06 26 13 f0       	push   $0xf0132606
f0108331:	6a 77                	push   $0x77
f0108333:	68 1c 26 13 f0       	push   $0xf013261c
f0108338:	e8 73 7e ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010833d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108344:	76 16                	jbe    f010835c <env_page_ws_set_entry+0x4a>
f0108346:	68 3c 26 13 f0       	push   $0xf013263c
f010834b:	68 06 26 13 f0       	push   $0xf0132606
f0108350:	6a 78                	push   $0x78
f0108352:	68 1c 26 13 f0       	push   $0xf013261c
f0108357:	e8 54 7e ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010835c:	8b 45 10             	mov    0x10(%ebp),%eax
f010835f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108365:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010836a:	89 c1                	mov    %eax,%ecx
f010836c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010836f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108372:	89 d0                	mov    %edx,%eax
f0108374:	01 c0                	add    %eax,%eax
f0108376:	01 d0                	add    %edx,%eax
f0108378:	c1 e0 03             	shl    $0x3,%eax
f010837b:	01 d8                	add    %ebx,%eax
f010837d:	05 b8 00 00 00       	add    $0xb8,%eax
f0108382:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108384:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108387:	8b 55 0c             	mov    0xc(%ebp),%edx
f010838a:	89 d0                	mov    %edx,%eax
f010838c:	01 c0                	add    %eax,%eax
f010838e:	01 d0                	add    %edx,%eax
f0108390:	c1 e0 03             	shl    $0x3,%eax
f0108393:	01 c8                	add    %ecx,%eax
f0108395:	05 bc 00 00 00       	add    $0xbc,%eax
f010839a:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010839d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083a3:	89 d0                	mov    %edx,%eax
f01083a5:	01 c0                	add    %eax,%eax
f01083a7:	01 d0                	add    %edx,%eax
f01083a9:	c1 e0 03             	shl    $0x3,%eax
f01083ac:	01 c8                	add    %ecx,%eax
f01083ae:	05 c0 00 00 00       	add    $0xc0,%eax
f01083b3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f01083b9:	90                   	nop
}
f01083ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01083bd:	c9                   	leave  
f01083be:	c3                   	ret    

f01083bf <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01083bf:	55                   	push   %ebp
f01083c0:	89 e5                	mov    %esp,%ebp
f01083c2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01083c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083d1:	77 19                	ja     f01083ec <env_page_ws_clear_entry+0x2d>
f01083d3:	68 70 26 13 f0       	push   $0xf0132670
f01083d8:	68 06 26 13 f0       	push   $0xf0132606
f01083dd:	68 83 00 00 00       	push   $0x83
f01083e2:	68 1c 26 13 f0       	push   $0xf013261c
f01083e7:	e8 c4 7d ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01083ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ef:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083f2:	89 d0                	mov    %edx,%eax
f01083f4:	01 c0                	add    %eax,%eax
f01083f6:	01 d0                	add    %edx,%eax
f01083f8:	c1 e0 03             	shl    $0x3,%eax
f01083fb:	01 c8                	add    %ecx,%eax
f01083fd:	05 b8 00 00 00       	add    $0xb8,%eax
f0108402:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108408:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010840b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010840e:	89 d0                	mov    %edx,%eax
f0108410:	01 c0                	add    %eax,%eax
f0108412:	01 d0                	add    %edx,%eax
f0108414:	c1 e0 03             	shl    $0x3,%eax
f0108417:	01 c8                	add    %ecx,%eax
f0108419:	05 bc 00 00 00       	add    $0xbc,%eax
f010841e:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108421:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108424:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108427:	89 d0                	mov    %edx,%eax
f0108429:	01 c0                	add    %eax,%eax
f010842b:	01 d0                	add    %edx,%eax
f010842d:	c1 e0 03             	shl    $0x3,%eax
f0108430:	01 c8                	add    %ecx,%eax
f0108432:	05 c0 00 00 00       	add    $0xc0,%eax
f0108437:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010843d:	90                   	nop
f010843e:	c9                   	leave  
f010843f:	c3                   	ret    

f0108440 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108440:	55                   	push   %ebp
f0108441:	89 e5                	mov    %esp,%ebp
f0108443:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108446:	8b 45 08             	mov    0x8(%ebp),%eax
f0108449:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010844f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108452:	77 19                	ja     f010846d <env_page_ws_get_virtual_address+0x2d>
f0108454:	68 70 26 13 f0       	push   $0xf0132670
f0108459:	68 06 26 13 f0       	push   $0xf0132606
f010845e:	68 8b 00 00 00       	push   $0x8b
f0108463:	68 1c 26 13 f0       	push   $0xf013261c
f0108468:	e8 43 7d ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010846d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108470:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108473:	89 d0                	mov    %edx,%eax
f0108475:	01 c0                	add    %eax,%eax
f0108477:	01 d0                	add    %edx,%eax
f0108479:	c1 e0 03             	shl    $0x3,%eax
f010847c:	01 c8                	add    %ecx,%eax
f010847e:	05 b8 00 00 00       	add    $0xb8,%eax
f0108483:	8b 00                	mov    (%eax),%eax
f0108485:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010848b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108490:	c9                   	leave  
f0108491:	c3                   	ret    

f0108492 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108492:	55                   	push   %ebp
f0108493:	89 e5                	mov    %esp,%ebp
f0108495:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108498:	8b 45 08             	mov    0x8(%ebp),%eax
f010849b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01084a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01084a4:	77 19                	ja     f01084bf <env_page_ws_get_time_stamp+0x2d>
f01084a6:	68 70 26 13 f0       	push   $0xf0132670
f01084ab:	68 06 26 13 f0       	push   $0xf0132606
f01084b0:	68 91 00 00 00       	push   $0x91
f01084b5:	68 1c 26 13 f0       	push   $0xf013261c
f01084ba:	e8 f1 7c ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01084bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084c5:	89 d0                	mov    %edx,%eax
f01084c7:	01 c0                	add    %eax,%eax
f01084c9:	01 d0                	add    %edx,%eax
f01084cb:	c1 e0 03             	shl    $0x3,%eax
f01084ce:	01 c8                	add    %ecx,%eax
f01084d0:	05 c0 00 00 00       	add    $0xc0,%eax
f01084d5:	8b 00                	mov    (%eax),%eax
}
f01084d7:	c9                   	leave  
f01084d8:	c3                   	ret    

f01084d9 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01084d9:	55                   	push   %ebp
f01084da:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f01084dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084e2:	89 d0                	mov    %edx,%eax
f01084e4:	01 c0                	add    %eax,%eax
f01084e6:	01 d0                	add    %edx,%eax
f01084e8:	c1 e0 03             	shl    $0x3,%eax
f01084eb:	01 c8                	add    %ecx,%eax
f01084ed:	05 bc 00 00 00       	add    $0xbc,%eax
f01084f2:	8a 00                	mov    (%eax),%al
f01084f4:	0f b6 c0             	movzbl %al,%eax
}
f01084f7:	5d                   	pop    %ebp
f01084f8:	c3                   	ret    

f01084f9 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f01084f9:	55                   	push   %ebp
f01084fa:	89 e5                	mov    %esp,%ebp
f01084fc:	53                   	push   %ebx
f01084fd:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108500:	83 ec 0c             	sub    $0xc,%esp
f0108503:	6a 02                	push   $0x2
f0108505:	e8 46 52 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f010850a:	83 c4 10             	add    $0x10,%esp
f010850d:	85 c0                	test   %eax,%eax
f010850f:	0f 84 fe 00 00 00    	je     f0108613 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010851c:	83 ec 0c             	sub    $0xc,%esp
f010851f:	68 a8 26 13 f0       	push   $0xf01326a8
f0108524:	e8 08 89 ff ff       	call   f0100e31 <cprintf>
f0108529:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010852c:	8b 45 08             	mov    0x8(%ebp),%eax
f010852f:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0108535:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108538:	eb 2c                	jmp    f0108566 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010853a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010853d:	8b 10                	mov    (%eax),%edx
f010853f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108542:	8d 48 01             	lea    0x1(%eax),%ecx
f0108545:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108548:	83 ec 04             	sub    $0x4,%esp
f010854b:	52                   	push   %edx
f010854c:	50                   	push   %eax
f010854d:	68 c2 26 13 f0       	push   $0xf01326c2
f0108552:	e8 da 88 ff ff       	call   f0100e31 <cprintf>
f0108557:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010855a:	8b 45 08             	mov    0x8(%ebp),%eax
f010855d:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108563:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108566:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010856a:	74 08                	je     f0108574 <env_page_ws_print+0x7b>
f010856c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010856f:	8b 40 10             	mov    0x10(%eax),%eax
f0108572:	eb 05                	jmp    f0108579 <env_page_ws_print+0x80>
f0108574:	b8 00 00 00 00       	mov    $0x0,%eax
f0108579:	8b 55 08             	mov    0x8(%ebp),%edx
f010857c:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0108582:	8b 45 08             	mov    0x8(%ebp),%eax
f0108585:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f010858b:	85 c0                	test   %eax,%eax
f010858d:	75 ab                	jne    f010853a <env_page_ws_print+0x41>
f010858f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108593:	75 a5                	jne    f010853a <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108595:	83 ec 0c             	sub    $0xc,%esp
f0108598:	68 ca 26 13 f0       	push   $0xf01326ca
f010859d:	e8 8f 88 ff ff       	call   f0100e31 <cprintf>
f01085a2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a8:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01085ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085b1:	eb 2c                	jmp    f01085df <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01085b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085b6:	8b 10                	mov    (%eax),%edx
f01085b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085bb:	8d 48 01             	lea    0x1(%eax),%ecx
f01085be:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01085c1:	83 ec 04             	sub    $0x4,%esp
f01085c4:	52                   	push   %edx
f01085c5:	50                   	push   %eax
f01085c6:	68 c2 26 13 f0       	push   $0xf01326c2
f01085cb:	e8 61 88 ff ff       	call   f0100e31 <cprintf>
f01085d0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01085d6:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01085dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01085e3:	74 08                	je     f01085ed <env_page_ws_print+0xf4>
f01085e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085e8:	8b 40 10             	mov    0x10(%eax),%eax
f01085eb:	eb 05                	jmp    f01085f2 <env_page_ws_print+0xf9>
f01085ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01085f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01085f5:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01085fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01085fe:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108604:	85 c0                	test   %eax,%eax
f0108606:	75 ab                	jne    f01085b3 <env_page_ws_print+0xba>
f0108608:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010860c:	75 a5                	jne    f01085b3 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010860e:	e9 a2 01 00 00       	jmp    f01087b5 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108613:	83 ec 0c             	sub    $0xc,%esp
f0108616:	68 e5 26 13 f0       	push   $0xf01326e5
f010861b:	e8 11 88 ff ff       	call   f0100e31 <cprintf>
f0108620:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108623:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010862a:	e9 74 01 00 00       	jmp    f01087a3 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010862f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108632:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108635:	89 d0                	mov    %edx,%eax
f0108637:	01 c0                	add    %eax,%eax
f0108639:	01 d0                	add    %edx,%eax
f010863b:	c1 e0 03             	shl    $0x3,%eax
f010863e:	01 c8                	add    %ecx,%eax
f0108640:	05 bc 00 00 00       	add    $0xbc,%eax
f0108645:	8a 00                	mov    (%eax),%al
f0108647:	84 c0                	test   %al,%al
f0108649:	74 43                	je     f010868e <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010864b:	83 ec 0c             	sub    $0xc,%esp
f010864e:	68 ef 26 13 f0       	push   $0xf01326ef
f0108653:	e8 d9 87 ff ff       	call   f0100e31 <cprintf>
f0108658:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010865b:	8b 45 08             	mov    0x8(%ebp),%eax
f010865e:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108664:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108667:	75 10                	jne    f0108679 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0108669:	83 ec 0c             	sub    $0xc,%esp
f010866c:	68 fe 26 13 f0       	push   $0xf01326fe
f0108671:	e8 bb 87 ff ff       	call   f0100e31 <cprintf>
f0108676:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108679:	83 ec 0c             	sub    $0xc,%esp
f010867c:	68 04 27 13 f0       	push   $0xf0132704
f0108681:	e8 ab 87 ff ff       	call   f0100e31 <cprintf>
f0108686:	83 c4 10             	add    $0x10,%esp
				continue;
f0108689:	e9 12 01 00 00       	jmp    f01087a0 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010868e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108691:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108694:	89 d0                	mov    %edx,%eax
f0108696:	01 c0                	add    %eax,%eax
f0108698:	01 d0                	add    %edx,%eax
f010869a:	c1 e0 03             	shl    $0x3,%eax
f010869d:	01 c8                	add    %ecx,%eax
f010869f:	05 b8 00 00 00       	add    $0xb8,%eax
f01086a4:	8b 00                	mov    (%eax),%eax
f01086a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01086a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086af:	89 d0                	mov    %edx,%eax
f01086b1:	01 c0                	add    %eax,%eax
f01086b3:	01 d0                	add    %edx,%eax
f01086b5:	c1 e0 03             	shl    $0x3,%eax
f01086b8:	01 c8                	add    %ecx,%eax
f01086ba:	05 c0 00 00 00       	add    $0xc0,%eax
f01086bf:	8b 00                	mov    (%eax),%eax
f01086c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01086c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01086c7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01086cd:	83 ec 08             	sub    $0x8,%esp
f01086d0:	ff 75 e8             	pushl  -0x18(%ebp)
f01086d3:	50                   	push   %eax
f01086d4:	e8 0a fa ff ff       	call   f01080e3 <pt_get_page_permissions>
f01086d9:	83 c4 10             	add    $0x10,%esp
f01086dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01086df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086e2:	83 e0 40             	and    $0x40,%eax
f01086e5:	85 c0                	test   %eax,%eax
f01086e7:	0f 95 c0             	setne  %al
f01086ea:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01086ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086f0:	83 e0 20             	and    $0x20,%eax
f01086f3:	85 c0                	test   %eax,%eax
f01086f5:	0f 95 c0             	setne  %al
f01086f8:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01086fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086fe:	25 00 02 00 00       	and    $0x200,%eax
f0108703:	85 c0                	test   %eax,%eax
f0108705:	0f 95 c0             	setne  %al
f0108708:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010870b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010870e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108711:	89 d0                	mov    %edx,%eax
f0108713:	01 c0                	add    %eax,%eax
f0108715:	01 d0                	add    %edx,%eax
f0108717:	c1 e0 03             	shl    $0x3,%eax
f010871a:	01 c8                	add    %ecx,%eax
f010871c:	05 b8 00 00 00       	add    $0xb8,%eax
f0108721:	8b 00                	mov    (%eax),%eax
f0108723:	83 ec 04             	sub    $0x4,%esp
f0108726:	50                   	push   %eax
f0108727:	ff 75 ec             	pushl  -0x14(%ebp)
f010872a:	68 06 27 13 f0       	push   $0xf0132706
f010872f:	e8 fd 86 ff ff       	call   f0100e31 <cprintf>
f0108734:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108737:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010873a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010873d:	89 d0                	mov    %edx,%eax
f010873f:	01 c0                	add    %eax,%eax
f0108741:	01 d0                	add    %edx,%eax
f0108743:	c1 e0 03             	shl    $0x3,%eax
f0108746:	01 c8                	add    %ecx,%eax
f0108748:	05 c4 00 00 00       	add    $0xc4,%eax
f010874d:	8b 18                	mov    (%eax),%ebx
f010874f:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108753:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0108757:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010875b:	83 ec 08             	sub    $0x8,%esp
f010875e:	53                   	push   %ebx
f010875f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108762:	51                   	push   %ecx
f0108763:	52                   	push   %edx
f0108764:	50                   	push   %eax
f0108765:	68 18 27 13 f0       	push   $0xf0132718
f010876a:	e8 c2 86 ff ff       	call   f0100e31 <cprintf>
f010876f:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108772:	8b 45 08             	mov    0x8(%ebp),%eax
f0108775:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010877b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010877e:	75 10                	jne    f0108790 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f0108780:	83 ec 0c             	sub    $0xc,%esp
f0108783:	68 5f 27 13 f0       	push   $0xf013275f
f0108788:	e8 a4 86 ff ff       	call   f0100e31 <cprintf>
f010878d:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108790:	83 ec 0c             	sub    $0xc,%esp
f0108793:	68 04 27 13 f0       	push   $0xf0132704
f0108798:	e8 94 86 ff ff       	call   f0100e31 <cprintf>
f010879d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01087a0:	ff 45 ec             	incl   -0x14(%ebp)
f01087a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01087a6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01087ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01087af:	0f 87 7a fe ff ff    	ja     f010862f <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01087b5:	90                   	nop
f01087b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01087b9:	c9                   	leave  
f01087ba:	c3                   	ret    

f01087bb <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01087bb:	55                   	push   %ebp
f01087bc:	89 e5                	mov    %esp,%ebp
f01087be:	53                   	push   %ebx
f01087bf:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01087c2:	83 ec 0c             	sub    $0xc,%esp
f01087c5:	68 64 27 13 f0       	push   $0xf0132764
f01087ca:	e8 62 86 ff ff       	call   f0100e31 <cprintf>
f01087cf:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01087d2:	83 ec 0c             	sub    $0xc,%esp
f01087d5:	68 99 27 13 f0       	push   $0xf0132799
f01087da:	e8 52 86 ff ff       	call   f0100e31 <cprintf>
f01087df:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01087e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01087e9:	e9 19 01 00 00       	jmp    f0108907 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f01087ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f4:	89 d0                	mov    %edx,%eax
f01087f6:	01 c0                	add    %eax,%eax
f01087f8:	01 d0                	add    %edx,%eax
f01087fa:	c1 e0 03             	shl    $0x3,%eax
f01087fd:	01 c8                	add    %ecx,%eax
f01087ff:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108804:	8a 00                	mov    (%eax),%al
f0108806:	84 c0                	test   %al,%al
f0108808:	74 43                	je     f010884d <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f010880a:	83 ec 0c             	sub    $0xc,%esp
f010880d:	68 ef 26 13 f0       	push   $0xf01326ef
f0108812:	e8 1a 86 ff ff       	call   f0100e31 <cprintf>
f0108817:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010881a:	8b 45 08             	mov    0x8(%ebp),%eax
f010881d:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108823:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108826:	75 10                	jne    f0108838 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0108828:	83 ec 0c             	sub    $0xc,%esp
f010882b:	68 fe 26 13 f0       	push   $0xf01326fe
f0108830:	e8 fc 85 ff ff       	call   f0100e31 <cprintf>
f0108835:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108838:	83 ec 0c             	sub    $0xc,%esp
f010883b:	68 04 27 13 f0       	push   $0xf0132704
f0108840:	e8 ec 85 ff ff       	call   f0100e31 <cprintf>
f0108845:	83 c4 10             	add    $0x10,%esp
			continue;
f0108848:	e9 b7 00 00 00       	jmp    f0108904 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010884d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108850:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108853:	89 d0                	mov    %edx,%eax
f0108855:	01 c0                	add    %eax,%eax
f0108857:	01 d0                	add    %edx,%eax
f0108859:	c1 e0 03             	shl    $0x3,%eax
f010885c:	01 c8                	add    %ecx,%eax
f010885e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108863:	8b 00                	mov    (%eax),%eax
f0108865:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108868:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010886b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010886e:	89 d0                	mov    %edx,%eax
f0108870:	01 c0                	add    %eax,%eax
f0108872:	01 d0                	add    %edx,%eax
f0108874:	c1 e0 03             	shl    $0x3,%eax
f0108877:	01 c8                	add    %ecx,%eax
f0108879:	05 80 d5 01 00       	add    $0x1d580,%eax
f010887e:	8b 00                	mov    (%eax),%eax
f0108880:	83 ec 04             	sub    $0x4,%esp
f0108883:	50                   	push   %eax
f0108884:	ff 75 f4             	pushl  -0xc(%ebp)
f0108887:	68 a4 27 13 f0       	push   $0xf01327a4
f010888c:	e8 a0 85 ff ff       	call   f0100e31 <cprintf>
f0108891:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108894:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108897:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010889a:	89 d0                	mov    %edx,%eax
f010889c:	01 c0                	add    %eax,%eax
f010889e:	01 d0                	add    %edx,%eax
f01088a0:	c1 e0 03             	shl    $0x3,%eax
f01088a3:	01 c8                	add    %ecx,%eax
f01088a5:	05 88 d5 01 00       	add    $0x1d588,%eax
f01088aa:	8b 18                	mov    (%eax),%ebx
f01088ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01088af:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01088b5:	83 ec 08             	sub    $0x8,%esp
f01088b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01088bb:	50                   	push   %eax
f01088bc:	e8 fe f8 ff ff       	call   f01081bf <pd_is_table_used>
f01088c1:	83 c4 10             	add    $0x10,%esp
f01088c4:	83 ec 04             	sub    $0x4,%esp
f01088c7:	53                   	push   %ebx
f01088c8:	50                   	push   %eax
f01088c9:	68 bc 27 13 f0       	push   $0xf01327bc
f01088ce:	e8 5e 85 ff ff       	call   f0100e31 <cprintf>
f01088d3:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01088d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01088d9:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f01088df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01088e2:	75 10                	jne    f01088f4 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f01088e4:	83 ec 0c             	sub    $0xc,%esp
f01088e7:	68 5f 27 13 f0       	push   $0xf013275f
f01088ec:	e8 40 85 ff ff       	call   f0100e31 <cprintf>
f01088f1:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01088f4:	83 ec 0c             	sub    $0xc,%esp
f01088f7:	68 04 27 13 f0       	push   $0xf0132704
f01088fc:	e8 30 85 ff ff       	call   f0100e31 <cprintf>
f0108901:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108904:	ff 45 f4             	incl   -0xc(%ebp)
f0108907:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010890b:	0f 86 dd fe ff ff    	jbe    f01087ee <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108911:	90                   	nop
f0108912:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108915:	c9                   	leave  
f0108916:	c3                   	ret    

f0108917 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108917:	55                   	push   %ebp
f0108918:	89 e5                	mov    %esp,%ebp
f010891a:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010891d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108924:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010892b:	eb 22                	jmp    f010894f <env_table_ws_get_size+0x38>
f010892d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108930:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108933:	89 d0                	mov    %edx,%eax
f0108935:	01 c0                	add    %eax,%eax
f0108937:	01 d0                	add    %edx,%eax
f0108939:	c1 e0 03             	shl    $0x3,%eax
f010893c:	01 c8                	add    %ecx,%eax
f010893e:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108943:	8a 00                	mov    (%eax),%al
f0108945:	84 c0                	test   %al,%al
f0108947:	75 03                	jne    f010894c <env_table_ws_get_size+0x35>
f0108949:	ff 45 f8             	incl   -0x8(%ebp)
f010894c:	ff 45 fc             	incl   -0x4(%ebp)
f010894f:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108953:	7e d8                	jle    f010892d <env_table_ws_get_size+0x16>
	return counter;
f0108955:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108958:	c9                   	leave  
f0108959:	c3                   	ret    

f010895a <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010895a:	55                   	push   %ebp
f010895b:	89 e5                	mov    %esp,%ebp
f010895d:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108960:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108967:	eb 4e                	jmp    f01089b7 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108969:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010896c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010896f:	89 d0                	mov    %edx,%eax
f0108971:	01 c0                	add    %eax,%eax
f0108973:	01 d0                	add    %edx,%eax
f0108975:	c1 e0 03             	shl    $0x3,%eax
f0108978:	01 c8                	add    %ecx,%eax
f010897a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010897f:	8b 00                	mov    (%eax),%eax
f0108981:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108984:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108987:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010898c:	89 c2                	mov    %eax,%edx
f010898e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108991:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108994:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108997:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010899c:	39 c2                	cmp    %eax,%edx
f010899e:	75 14                	jne    f01089b4 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01089a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089a3:	83 ec 08             	sub    $0x8,%esp
f01089a6:	50                   	push   %eax
f01089a7:	ff 75 08             	pushl  0x8(%ebp)
f01089aa:	e8 bc 00 00 00       	call   f0108a6b <env_table_ws_clear_entry>
f01089af:	83 c4 10             	add    $0x10,%esp
			break;
f01089b2:	eb 09                	jmp    f01089bd <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01089b4:	ff 45 f4             	incl   -0xc(%ebp)
f01089b7:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01089bb:	7e ac                	jle    f0108969 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01089bd:	90                   	nop
f01089be:	c9                   	leave  
f01089bf:	c3                   	ret    

f01089c0 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01089c0:	55                   	push   %ebp
f01089c1:	89 e5                	mov    %esp,%ebp
f01089c3:	53                   	push   %ebx
f01089c4:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089c7:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089cb:	76 19                	jbe    f01089e6 <env_table_ws_set_entry+0x26>
f01089cd:	68 e0 27 13 f0       	push   $0xf01327e0
f01089d2:	68 06 26 13 f0       	push   $0xf0132606
f01089d7:	68 07 01 00 00       	push   $0x107
f01089dc:	68 1c 26 13 f0       	push   $0xf013261c
f01089e1:	e8 ca 77 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01089e6:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01089ed:	76 19                	jbe    f0108a08 <env_table_ws_set_entry+0x48>
f01089ef:	68 3c 26 13 f0       	push   $0xf013263c
f01089f4:	68 06 26 13 f0       	push   $0xf0132606
f01089f9:	68 08 01 00 00       	push   $0x108
f01089fe:	68 1c 26 13 f0       	push   $0xf013261c
f0108a03:	e8 a8 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108a08:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a11:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a16:	89 c1                	mov    %eax,%ecx
f0108a18:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108a1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a1e:	89 d0                	mov    %edx,%eax
f0108a20:	01 c0                	add    %eax,%eax
f0108a22:	01 d0                	add    %edx,%eax
f0108a24:	c1 e0 03             	shl    $0x3,%eax
f0108a27:	01 d8                	add    %ebx,%eax
f0108a29:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a2e:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108a30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a36:	89 d0                	mov    %edx,%eax
f0108a38:	01 c0                	add    %eax,%eax
f0108a3a:	01 d0                	add    %edx,%eax
f0108a3c:	c1 e0 03             	shl    $0x3,%eax
f0108a3f:	01 c8                	add    %ecx,%eax
f0108a41:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108a46:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108a49:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a4f:	89 d0                	mov    %edx,%eax
f0108a51:	01 c0                	add    %eax,%eax
f0108a53:	01 d0                	add    %edx,%eax
f0108a55:	c1 e0 03             	shl    $0x3,%eax
f0108a58:	01 c8                	add    %ecx,%eax
f0108a5a:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108a5f:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108a65:	90                   	nop
}
f0108a66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108a69:	c9                   	leave  
f0108a6a:	c3                   	ret    

f0108a6b <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108a6b:	55                   	push   %ebp
f0108a6c:	89 e5                	mov    %esp,%ebp
f0108a6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a71:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a75:	76 19                	jbe    f0108a90 <env_table_ws_clear_entry+0x25>
f0108a77:	68 e0 27 13 f0       	push   $0xf01327e0
f0108a7c:	68 06 26 13 f0       	push   $0xf0132606
f0108a81:	68 13 01 00 00       	push   $0x113
f0108a86:	68 1c 26 13 f0       	push   $0xf013261c
f0108a8b:	e8 20 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108a90:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a93:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a96:	89 d0                	mov    %edx,%eax
f0108a98:	01 c0                	add    %eax,%eax
f0108a9a:	01 d0                	add    %edx,%eax
f0108a9c:	c1 e0 03             	shl    $0x3,%eax
f0108a9f:	01 c8                	add    %ecx,%eax
f0108aa1:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108aa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108aac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ab2:	89 d0                	mov    %edx,%eax
f0108ab4:	01 c0                	add    %eax,%eax
f0108ab6:	01 d0                	add    %edx,%eax
f0108ab8:	c1 e0 03             	shl    $0x3,%eax
f0108abb:	01 c8                	add    %ecx,%eax
f0108abd:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108ac2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108ac5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108acb:	89 d0                	mov    %edx,%eax
f0108acd:	01 c0                	add    %eax,%eax
f0108acf:	01 d0                	add    %edx,%eax
f0108ad1:	c1 e0 03             	shl    $0x3,%eax
f0108ad4:	01 c8                	add    %ecx,%eax
f0108ad6:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108adb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108ae1:	90                   	nop
f0108ae2:	c9                   	leave  
f0108ae3:	c3                   	ret    

f0108ae4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108ae4:	55                   	push   %ebp
f0108ae5:	89 e5                	mov    %esp,%ebp
f0108ae7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108aea:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108aee:	76 19                	jbe    f0108b09 <env_table_ws_get_virtual_address+0x25>
f0108af0:	68 e0 27 13 f0       	push   $0xf01327e0
f0108af5:	68 06 26 13 f0       	push   $0xf0132606
f0108afa:	68 1b 01 00 00       	push   $0x11b
f0108aff:	68 1c 26 13 f0       	push   $0xf013261c
f0108b04:	e8 a7 76 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108b09:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b0f:	89 d0                	mov    %edx,%eax
f0108b11:	01 c0                	add    %eax,%eax
f0108b13:	01 d0                	add    %edx,%eax
f0108b15:	c1 e0 03             	shl    $0x3,%eax
f0108b18:	01 c8                	add    %ecx,%eax
f0108b1a:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108b1f:	8b 00                	mov    (%eax),%eax
f0108b21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b27:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108b2c:	c9                   	leave  
f0108b2d:	c3                   	ret    

f0108b2e <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108b2e:	55                   	push   %ebp
f0108b2f:	89 e5                	mov    %esp,%ebp
f0108b31:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b34:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b38:	76 19                	jbe    f0108b53 <env_table_ws_get_time_stamp+0x25>
f0108b3a:	68 e0 27 13 f0       	push   $0xf01327e0
f0108b3f:	68 06 26 13 f0       	push   $0xf0132606
f0108b44:	68 22 01 00 00       	push   $0x122
f0108b49:	68 1c 26 13 f0       	push   $0xf013261c
f0108b4e:	e8 5d 76 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108b53:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b56:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b59:	89 d0                	mov    %edx,%eax
f0108b5b:	01 c0                	add    %eax,%eax
f0108b5d:	01 d0                	add    %edx,%eax
f0108b5f:	c1 e0 03             	shl    $0x3,%eax
f0108b62:	01 c8                	add    %ecx,%eax
f0108b64:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108b69:	8b 00                	mov    (%eax),%eax
}
f0108b6b:	c9                   	leave  
f0108b6c:	c3                   	ret    

f0108b6d <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108b6d:	55                   	push   %ebp
f0108b6e:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108b70:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b76:	89 d0                	mov    %edx,%eax
f0108b78:	01 c0                	add    %eax,%eax
f0108b7a:	01 d0                	add    %edx,%eax
f0108b7c:	c1 e0 03             	shl    $0x3,%eax
f0108b7f:	01 c8                	add    %ecx,%eax
f0108b81:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108b86:	8a 00                	mov    (%eax),%al
f0108b88:	0f b6 c0             	movzbl %al,%eax
}
f0108b8b:	5d                   	pop    %ebp
f0108b8c:	c3                   	ret    

f0108b8d <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108b8d:	55                   	push   %ebp
f0108b8e:	89 e5                	mov    %esp,%ebp
f0108b90:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0108b93:	83 ec 04             	sub    $0x4,%esp
f0108b96:	68 14 28 13 f0       	push   $0xf0132814
f0108b9b:	6a 1f                	push   $0x1f
f0108b9d:	68 42 28 13 f0       	push   $0xf0132842
f0108ba2:	e8 09 76 ff ff       	call   f01001b0 <_panic>

f0108ba7 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108ba7:	55                   	push   %ebp
f0108ba8:	89 e5                	mov    %esp,%ebp
f0108baa:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108bad:	83 ec 04             	sub    $0x4,%esp
f0108bb0:	68 60 28 13 f0       	push   $0xf0132860
f0108bb5:	6a 32                	push   $0x32
f0108bb7:	68 42 28 13 f0       	push   $0xf0132842
f0108bbc:	e8 ef 75 ff ff       	call   f01001b0 <_panic>

f0108bc1 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108bc1:	55                   	push   %ebp
f0108bc2:	89 e5                	mov    %esp,%ebp
f0108bc4:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0108bc7:	83 ec 04             	sub    $0x4,%esp
f0108bca:	68 90 28 13 f0       	push   $0xf0132890
f0108bcf:	6a 41                	push   $0x41
f0108bd1:	68 42 28 13 f0       	push   $0xf0132842
f0108bd6:	e8 d5 75 ff ff       	call   f01001b0 <_panic>

f0108bdb <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108bdb:	55                   	push   %ebp
f0108bdc:	89 e5                	mov    %esp,%ebp
f0108bde:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108be1:	83 ec 04             	sub    $0x4,%esp
f0108be4:	68 bc 28 13 f0       	push   $0xf01328bc
f0108be9:	6a 4e                	push   $0x4e
f0108beb:	68 42 28 13 f0       	push   $0xf0132842
f0108bf0:	e8 bb 75 ff ff       	call   f01001b0 <_panic>

f0108bf5 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bf5:	55                   	push   %ebp
f0108bf6:	89 e5                	mov    %esp,%ebp
f0108bf8:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bfb:	83 ec 04             	sub    $0x4,%esp
f0108bfe:	68 ec 28 13 f0       	push   $0xf01328ec
f0108c03:	6a 57                	push   $0x57
f0108c05:	68 42 28 13 f0       	push   $0xf0132842
f0108c0a:	e8 a1 75 ff ff       	call   f01001b0 <_panic>

f0108c0f <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108c0f:	55                   	push   %ebp
f0108c10:	89 e5                	mov    %esp,%ebp
f0108c12:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108c15:	83 ec 04             	sub    $0x4,%esp
f0108c18:	68 24 29 13 f0       	push   $0xf0132924
f0108c1d:	6a 63                	push   $0x63
f0108c1f:	68 42 28 13 f0       	push   $0xf0132842
f0108c24:	e8 87 75 ff ff       	call   f01001b0 <_panic>

f0108c29 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c29:	55                   	push   %ebp
f0108c2a:	89 e5                	mov    %esp,%ebp
f0108c2c:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c2f:	e8 2e 4e 02 00       	call   f012da62 <inctst>
	return;
f0108c34:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108c35:	c9                   	leave  
f0108c36:	c3                   	ret    

f0108c37 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c37:	55                   	push   %ebp
f0108c38:	89 e5                	mov    %esp,%ebp
f0108c3a:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c3d:	e8 20 4e 02 00       	call   f012da62 <inctst>
	return;
f0108c42:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108c43:	c9                   	leave  
f0108c44:	c3                   	ret    

f0108c45 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c45:	55                   	push   %ebp
f0108c46:	89 e5                	mov    %esp,%ebp
f0108c48:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108c4b:	83 ec 04             	sub    $0x4,%esp
f0108c4e:	68 5c 29 13 f0       	push   $0xf013295c
f0108c53:	68 99 00 00 00       	push   $0x99
f0108c58:	68 42 28 13 f0       	push   $0xf0132842
f0108c5d:	e8 4e 75 ff ff       	call   f01001b0 <_panic>

f0108c62 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c62:	55                   	push   %ebp
f0108c63:	89 e5                	mov    %esp,%ebp
f0108c65:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c68:	83 ec 04             	sub    $0x4,%esp
f0108c6b:	68 9c 29 13 f0       	push   $0xf013299c
f0108c70:	68 a3 00 00 00       	push   $0xa3
f0108c75:	68 42 28 13 f0       	push   $0xf0132842
f0108c7a:	e8 31 75 ff ff       	call   f01001b0 <_panic>

f0108c7f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108c7f:	55                   	push   %ebp
f0108c80:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c85:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f0108c8b:	29 d0                	sub    %edx,%eax
f0108c8d:	c1 f8 02             	sar    $0x2,%eax
f0108c90:	89 c2                	mov    %eax,%edx
f0108c92:	89 d0                	mov    %edx,%eax
f0108c94:	c1 e0 03             	shl    $0x3,%eax
f0108c97:	01 d0                	add    %edx,%eax
f0108c99:	c1 e0 03             	shl    $0x3,%eax
f0108c9c:	01 d0                	add    %edx,%eax
f0108c9e:	c1 e0 03             	shl    $0x3,%eax
f0108ca1:	01 d0                	add    %edx,%eax
f0108ca3:	c1 e0 03             	shl    $0x3,%eax
f0108ca6:	01 d0                	add    %edx,%eax
f0108ca8:	89 c1                	mov    %eax,%ecx
f0108caa:	c1 e1 0f             	shl    $0xf,%ecx
f0108cad:	01 c8                	add    %ecx,%eax
f0108caf:	c1 e0 03             	shl    $0x3,%eax
f0108cb2:	01 d0                	add    %edx,%eax
f0108cb4:	f7 d8                	neg    %eax
}
f0108cb6:	5d                   	pop    %ebp
f0108cb7:	c3                   	ret    

f0108cb8 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108cb8:	55                   	push   %ebp
f0108cb9:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108cbb:	ff 75 08             	pushl  0x8(%ebp)
f0108cbe:	e8 bc ff ff ff       	call   f0108c7f <to_frame_number>
f0108cc3:	83 c4 04             	add    $0x4,%esp
f0108cc6:	c1 e0 0c             	shl    $0xc,%eax
}
f0108cc9:	c9                   	leave  
f0108cca:	c3                   	ret    

f0108ccb <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108ccb:	55                   	push   %ebp
f0108ccc:	89 e5                	mov    %esp,%ebp
f0108cce:	57                   	push   %edi
f0108ccf:	56                   	push   %esi
f0108cd0:	53                   	push   %ebx
f0108cd1:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108cd7:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108cde:	83 ec 0c             	sub    $0xc,%esp
f0108ce1:	ff 75 08             	pushl  0x8(%ebp)
f0108ce4:	e8 f6 21 00 00       	call   f010aedf <get_user_program_info>
f0108ce9:	83 c4 10             	add    $0x10,%esp
f0108cec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108cef:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108cf3:	75 0a                	jne    f0108cff <env_create+0x34>
f0108cf5:	b8 00 00 00 00       	mov    $0x0,%eax
f0108cfa:	e9 45 0c 00 00       	jmp    f0109944 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108cff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d02:	8b 40 08             	mov    0x8(%eax),%eax
f0108d05:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108d08:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108d0f:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108d12:	83 ec 0c             	sub    $0xc,%esp
f0108d15:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0108d1b:	50                   	push   %eax
f0108d1c:	e8 aa 0f 00 00       	call   f0109ccb <allocate_environment>
f0108d21:	83 c4 10             	add    $0x10,%esp
f0108d24:	85 c0                	test   %eax,%eax
f0108d26:	79 0a                	jns    f0108d32 <env_create+0x67>
	{
		return 0;
f0108d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d2d:	e9 12 0c 00 00       	jmp    f0109944 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108d32:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d35:	8b 00                	mov    (%eax),%eax
f0108d37:	83 ec 0c             	sub    $0xc,%esp
f0108d3a:	50                   	push   %eax
f0108d3b:	e8 ce 60 02 00       	call   f012ee0e <strlen>
f0108d40:	83 c4 10             	add    $0x10,%esp
f0108d43:	83 f8 3f             	cmp    $0x3f,%eax
f0108d46:	7f 1d                	jg     f0108d65 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108d48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d4b:	8b 00                	mov    (%eax),%eax
f0108d4d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d53:	83 c2 5c             	add    $0x5c,%edx
f0108d56:	83 ec 08             	sub    $0x8,%esp
f0108d59:	50                   	push   %eax
f0108d5a:	52                   	push   %edx
f0108d5b:	e8 fd 60 02 00       	call   f012ee5d <strcpy>
f0108d60:	83 c4 10             	add    $0x10,%esp
f0108d63:	eb 1d                	jmp    f0108d82 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d68:	8b 00                	mov    (%eax),%eax
f0108d6a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d70:	83 c2 5c             	add    $0x5c,%edx
f0108d73:	83 ec 04             	sub    $0x4,%esp
f0108d76:	6a 3f                	push   $0x3f
f0108d78:	50                   	push   %eax
f0108d79:	52                   	push   %edx
f0108d7a:	e8 0c 61 02 00       	call   f012ee8b <strncpy>
f0108d7f:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108d82:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108d89:	00 00 00 

		allocate_frame(&p) ;
f0108d8c:	83 ec 0c             	sub    $0xc,%esp
f0108d8f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0108d95:	50                   	push   %eax
f0108d96:	e8 8a e5 ff ff       	call   f0107325 <allocate_frame>
f0108d9b:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108d9e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108da4:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108daa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108db0:	83 ec 0c             	sub    $0xc,%esp
f0108db3:	50                   	push   %eax
f0108db4:	e8 ff fe ff ff       	call   f0108cb8 <to_physical_address>
f0108db9:	83 c4 10             	add    $0x10,%esp
f0108dbc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108dbf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dc2:	c1 e8 0c             	shr    $0xc,%eax
f0108dc5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108dc8:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0108dcd:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108dd0:	72 17                	jb     f0108de9 <env_create+0x11e>
f0108dd2:	ff 75 b0             	pushl  -0x50(%ebp)
f0108dd5:	68 c8 29 13 f0       	push   $0xf01329c8
f0108dda:	68 8a 00 00 00       	push   $0x8a
f0108ddf:	68 f7 29 13 f0       	push   $0xf01329f7
f0108de4:	e8 c7 73 ff ff       	call   f01001b0 <_panic>
f0108de9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108df1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108df4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108dfa:	83 ec 0c             	sub    $0xc,%esp
f0108dfd:	50                   	push   %eax
f0108dfe:	e8 b5 fe ff ff       	call   f0108cb8 <to_physical_address>
f0108e03:	83 c4 10             	add    $0x10,%esp
f0108e06:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108e09:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e12:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108e18:	83 ec 0c             	sub    $0xc,%esp
f0108e1b:	6a 02                	push   $0x2
f0108e1d:	e8 2e 49 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f0108e22:	83 c4 10             	add    $0x10,%esp
f0108e25:	85 c0                	test   %eax,%eax
f0108e27:	74 21                	je     f0108e4a <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108e29:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e2f:	8b 55 10             	mov    0x10(%ebp),%edx
f0108e32:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108e38:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e3e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e41:	2b 55 10             	sub    0x10(%ebp),%edx
f0108e44:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108e4a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108e4e:	75 12                	jne    f0108e62 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108e50:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e56:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108e5d:	00 00 00 
f0108e60:	eb 0f                	jmp    f0108e71 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108e62:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e68:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e6b:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108e71:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e77:	83 ec 04             	sub    $0x4,%esp
f0108e7a:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108e7d:	ff 75 a8             	pushl  -0x58(%ebp)
f0108e80:	50                   	push   %eax
f0108e81:	e8 ac 16 00 00       	call   f010a532 <initialize_environment>
f0108e86:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108e89:	0f 20 d8             	mov    %cr3,%eax
f0108e8c:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108e8f:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108e92:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108e95:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e9b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108ea1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108ea7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ead:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108eb0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108eb7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108ebe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ec4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108eca:	48                   	dec    %eax
f0108ecb:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ece:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108ed5:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108ed8:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108ede:	83 ec 08             	sub    $0x8,%esp
f0108ee1:	ff 75 b8             	pushl  -0x48(%ebp)
f0108ee4:	50                   	push   %eax
f0108ee5:	e8 b1 1d 00 00       	call   f010ac9b <PROGRAM_SEGMENT_FIRST>
f0108eea:	83 c4 0c             	add    $0xc,%esp
f0108eed:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108ef3:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108ef9:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108efe:	89 c7                	mov    %eax,%edi
f0108f00:	89 d6                	mov    %edx,%esi
f0108f02:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108f04:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108f0a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108f0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f10:	8b 40 10             	mov    0x10(%eax),%eax
f0108f13:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108f16:	75 07                	jne    f0108f1f <env_create+0x254>
f0108f18:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108f1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f25:	e9 24 03 00 00       	jmp    f010924e <env_create+0x583>
	{
		segment_counter++;
f0108f2a:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108f2d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108f34:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108f37:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f3d:	83 ec 0c             	sub    $0xc,%esp
f0108f40:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108f46:	52                   	push   %edx
f0108f47:	ff 75 dc             	pushl  -0x24(%ebp)
f0108f4a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108f50:	52                   	push   %edx
f0108f51:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108f54:	50                   	push   %eax
f0108f55:	e8 2f 0e 00 00       	call   f0109d89 <program_segment_alloc_map_copy_workingset>
f0108f5a:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108f5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108f63:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108f66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f69:	8b 00                	mov    (%eax),%eax
f0108f6b:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108f6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f71:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f74:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108f77:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f7a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108f7d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108f80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f85:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108f88:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108f8f:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108f92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108f95:	01 d0                	add    %edx,%eax
f0108f97:	48                   	dec    %eax
f0108f98:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108f9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108fa3:	f7 75 84             	divl   -0x7c(%ebp)
f0108fa6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108fa9:	29 d0                	sub    %edx,%eax
f0108fab:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108fb1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fb4:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108fb7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108fbd:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f0108fc2:	83 ec 04             	sub    $0x4,%esp
f0108fc5:	68 00 10 00 00       	push   $0x1000
f0108fca:	6a 00                	push   $0x0
f0108fcc:	50                   	push   %eax
f0108fcd:	e8 2a 60 02 00       	call   f012effc <memset>
f0108fd2:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108fd5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108fd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108fdb:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0108fe1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108fe7:	01 d0                	add    %edx,%eax
f0108fe9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fec:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fef:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108ff2:	eb 13                	jmp    f0109007 <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108ff7:	8a 10                	mov    (%eax),%dl
f0108ff9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ffc:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108ffe:	ff 45 cc             	incl   -0x34(%ebp)
f0109001:	ff 45 d4             	incl   -0x2c(%ebp)
f0109004:	ff 45 d0             	incl   -0x30(%ebp)
f0109007:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010900a:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109010:	72 e2                	jb     f0108ff4 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109012:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0109018:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010901e:	83 ec 04             	sub    $0x4,%esp
f0109021:	52                   	push   %edx
f0109022:	ff 75 88             	pushl  -0x78(%ebp)
f0109025:	50                   	push   %eax
f0109026:	e8 a0 ae ff ff       	call   f0103ecb <pf_add_env_page>
f010902b:	83 c4 10             	add    $0x10,%esp
f010902e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109031:	75 17                	jne    f010904a <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109033:	83 ec 04             	sub    $0x4,%esp
f0109036:	68 14 2a 13 f0       	push   $0xf0132a14
f010903b:	68 de 00 00 00       	push   $0xde
f0109040:	68 f7 29 13 f0       	push   $0xf01329f7
f0109045:	e8 66 71 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010904a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010904d:	8b 50 04             	mov    0x4(%eax),%edx
f0109050:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109053:	01 d0                	add    %edx,%eax
f0109055:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010905b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109061:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109066:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010906c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010906f:	8b 50 04             	mov    0x4(%eax),%edx
f0109072:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109075:	01 d0                	add    %edx,%eax
f0109077:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010907d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109083:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109086:	eb 43                	jmp    f01090cb <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109088:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010908b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109091:	83 ec 04             	sub    $0x4,%esp
f0109094:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109097:	52                   	push   %edx
f0109098:	50                   	push   %eax
f0109099:	e8 2d ae ff ff       	call   f0103ecb <pf_add_env_page>
f010909e:	83 c4 10             	add    $0x10,%esp
f01090a1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090a4:	75 17                	jne    f01090bd <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090a6:	83 ec 04             	sub    $0x4,%esp
f01090a9:	68 14 2a 13 f0       	push   $0xf0132a14
f01090ae:	68 eb 00 00 00       	push   $0xeb
f01090b3:	68 f7 29 13 f0       	push   $0xf01329f7
f01090b8:	e8 f3 70 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01090bd:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01090c4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01090cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090ce:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f01090d4:	72 b2                	jb     f0109088 <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01090d6:	a1 18 bf 2b f0       	mov    0xf02bbf18,%eax
f01090db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01090de:	83 ec 04             	sub    $0x4,%esp
f01090e1:	68 00 10 00 00       	push   $0x1000
f01090e6:	6a 00                	push   $0x0
f01090e8:	ff 75 d0             	pushl  -0x30(%ebp)
f01090eb:	e8 0c 5f 02 00       	call   f012effc <memset>
f01090f0:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01090f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01090fc:	eb 13                	jmp    f0109111 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f01090fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109101:	8a 10                	mov    (%eax),%dl
f0109103:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109106:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109108:	ff 45 cc             	incl   -0x34(%ebp)
f010910b:	ff 45 d4             	incl   -0x2c(%ebp)
f010910e:	ff 45 d0             	incl   -0x30(%ebp)
f0109111:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109114:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f010911a:	72 e2                	jb     f01090fe <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010911c:	8b 15 18 bf 2b f0    	mov    0xf02bbf18,%edx
f0109122:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109128:	83 ec 04             	sub    $0x4,%esp
f010912b:	52                   	push   %edx
f010912c:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109132:	50                   	push   %eax
f0109133:	e8 93 ad ff ff       	call   f0103ecb <pf_add_env_page>
f0109138:	83 c4 10             	add    $0x10,%esp
f010913b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010913e:	75 17                	jne    f0109157 <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109140:	83 ec 04             	sub    $0x4,%esp
f0109143:	68 14 2a 13 f0       	push   $0xf0132a14
f0109148:	68 fa 00 00 00       	push   $0xfa
f010914d:	68 f7 29 13 f0       	push   $0xf01329f7
f0109152:	e8 59 70 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109157:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010915e:	10 00 00 
f0109161:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109164:	8b 50 04             	mov    0x4(%eax),%edx
f0109167:	8b 45 90             	mov    -0x70(%ebp),%eax
f010916a:	01 c2                	add    %eax,%edx
f010916c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109172:	01 d0                	add    %edx,%eax
f0109174:	48                   	dec    %eax
f0109175:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010917b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109181:	ba 00 00 00 00       	mov    $0x0,%edx
f0109186:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010918c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109192:	29 d0                	sub    %edx,%eax
f0109194:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010919a:	8b 50 08             	mov    0x8(%eax),%edx
f010919d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01091a0:	01 d0                	add    %edx,%eax
f01091a2:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01091a5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091ab:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01091b2:	eb 41                	jmp    f01091f5 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01091b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01091ba:	83 ec 04             	sub    $0x4,%esp
f01091bd:	6a 01                	push   $0x1
f01091bf:	ff 75 c8             	pushl  -0x38(%ebp)
f01091c2:	50                   	push   %eax
f01091c3:	e8 cd ab ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01091c8:	83 c4 10             	add    $0x10,%esp
f01091cb:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091ce:	75 17                	jne    f01091e7 <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091d0:	83 ec 04             	sub    $0x4,%esp
f01091d3:	68 14 2a 13 f0       	push   $0xf0132a14
f01091d8:	68 07 01 00 00       	push   $0x107
f01091dd:	68 f7 29 13 f0       	push   $0xf01329f7
f01091e2:	e8 c9 6f ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091e7:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091ee:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01091f5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01091fc:	10 00 00 
f01091ff:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109205:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010920b:	01 d0                	add    %edx,%eax
f010920d:	48                   	dec    %eax
f010920e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109214:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010921a:	ba 00 00 00 00       	mov    $0x0,%edx
f010921f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109225:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010922b:	29 d0                	sub    %edx,%eax
f010922d:	89 c2                	mov    %eax,%edx
f010922f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109232:	39 c2                	cmp    %eax,%edx
f0109234:	0f 87 7a ff ff ff    	ja     f01091b4 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010923a:	83 ec 08             	sub    $0x8,%esp
f010923d:	ff 75 b8             	pushl  -0x48(%ebp)
f0109240:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109243:	e8 48 19 00 00       	call   f010ab90 <PROGRAM_SEGMENT_NEXT>
f0109248:	83 c4 10             	add    $0x10,%esp
f010924b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010924e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109252:	0f 85 d2 fc ff ff    	jne    f0108f2a <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f0109258:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010925f:	e9 a7 00 00 00       	jmp    f010930b <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109264:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010926a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010926d:	89 d0                	mov    %edx,%eax
f010926f:	01 c0                	add    %eax,%eax
f0109271:	01 d0                	add    %edx,%eax
f0109273:	c1 e0 03             	shl    $0x3,%eax
f0109276:	01 c8                	add    %ecx,%eax
f0109278:	05 bc 00 00 00       	add    $0xbc,%eax
f010927d:	8a 00                	mov    (%eax),%al
f010927f:	84 c0                	test   %al,%al
f0109281:	0f 85 81 00 00 00    	jne    f0109308 <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109287:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010928d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109290:	89 d0                	mov    %edx,%eax
f0109292:	01 c0                	add    %eax,%eax
f0109294:	01 d0                	add    %edx,%eax
f0109296:	c1 e0 03             	shl    $0x3,%eax
f0109299:	01 c8                	add    %ecx,%eax
f010929b:	05 b8 00 00 00       	add    $0xb8,%eax
f01092a0:	8b 00                	mov    (%eax),%eax
f01092a2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01092a8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092ae:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01092b4:	83 ec 04             	sub    $0x4,%esp
f01092b7:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f01092bd:	52                   	push   %edx
f01092be:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f01092c4:	50                   	push   %eax
f01092c5:	e8 1d e2 ff ff       	call   f01074e7 <get_page_table>
f01092ca:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01092cd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01092d3:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f01092d9:	c1 ea 0c             	shr    $0xc,%edx
f01092dc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01092e2:	c1 e2 02             	shl    $0x2,%edx
f01092e5:	01 d0                	add    %edx,%eax
f01092e7:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f01092ed:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f01092f3:	c1 e9 0c             	shr    $0xc,%ecx
f01092f6:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01092fc:	c1 e1 02             	shl    $0x2,%ecx
f01092ff:	01 ca                	add    %ecx,%edx
f0109301:	8b 12                	mov    (%edx),%edx
f0109303:	83 e2 bf             	and    $0xffffffbf,%edx
f0109306:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109308:	ff 45 c4             	incl   -0x3c(%ebp)
f010930b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109311:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0109317:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010931a:	39 c2                	cmp    %eax,%edx
f010931c:	0f 87 42 ff ff ff    	ja     f0109264 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109322:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109325:	8b 50 08             	mov    0x8(%eax),%edx
f0109328:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010932e:	83 ec 08             	sub    $0x8,%esp
f0109331:	52                   	push   %edx
f0109332:	50                   	push   %eax
f0109333:	e8 18 18 00 00       	call   f010ab50 <set_environment_entry_point>
f0109338:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010933b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109341:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f0109348:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010934b:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0109352:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109355:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010935c:	e9 3c 05 00 00       	jmp    f010989d <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0109361:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0109368:	00 00 00 
		allocate_frame(&pp);
f010936b:	83 ec 0c             	sub    $0xc,%esp
f010936e:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109374:	50                   	push   %eax
f0109375:	e8 ab df ff ff       	call   f0107325 <allocate_frame>
f010937a:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010937d:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0109383:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109389:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010938f:	6a 06                	push   $0x6
f0109391:	ff 75 c0             	pushl  -0x40(%ebp)
f0109394:	52                   	push   %edx
f0109395:	50                   	push   %eax
f0109396:	e8 db e4 ff ff       	call   f0107876 <loadtime_map_frame>
f010939b:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010939e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01093a1:	83 ec 04             	sub    $0x4,%esp
f01093a4:	68 00 10 00 00       	push   $0x1000
f01093a9:	6a 00                	push   $0x0
f01093ab:	50                   	push   %eax
f01093ac:	e8 4b 5c 02 00       	call   f012effc <memset>
f01093b1:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01093b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093ba:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f01093c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093c6:	83 ec 04             	sub    $0x4,%esp
f01093c9:	ff 75 c0             	pushl  -0x40(%ebp)
f01093cc:	52                   	push   %edx
f01093cd:	50                   	push   %eax
f01093ce:	e8 3f ef ff ff       	call   f0108312 <env_page_ws_set_entry>
f01093d3:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f01093d6:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093dc:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f01093e2:	8d 48 01             	lea    0x1(%eax),%ecx
f01093e5:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f01093eb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f01093f1:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01093f7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093fd:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109403:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109409:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f010940f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109414:	f7 f3                	div    %ebx
f0109416:	89 d0                	mov    %edx,%eax
f0109418:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010941e:	83 ec 0c             	sub    $0xc,%esp
f0109421:	6a 02                	push   $0x2
f0109423:	e8 28 43 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f0109428:	83 c4 10             	add    $0x10,%esp
f010942b:	85 c0                	test   %eax,%eax
f010942d:	0f 84 46 04 00 00    	je     f0109879 <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109433:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109439:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010943f:	89 d0                	mov    %edx,%eax
f0109441:	01 c0                	add    %eax,%eax
f0109443:	01 d0                	add    %edx,%eax
f0109445:	c1 e0 03             	shl    $0x3,%eax
f0109448:	05 b0 00 00 00       	add    $0xb0,%eax
f010944d:	01 c8                	add    %ecx,%eax
f010944f:	83 c0 08             	add    $0x8,%eax
f0109452:	85 c0                	test   %eax,%eax
f0109454:	75 17                	jne    f010946d <env_create+0x7a2>
f0109456:	83 ec 04             	sub    $0x4,%esp
f0109459:	68 59 2a 13 f0       	push   $0xf0132a59
f010945e:	68 67 01 00 00       	push   $0x167
f0109463:	68 f7 29 13 f0       	push   $0xf01329f7
f0109468:	e8 43 6d ff ff       	call   f01001b0 <_panic>
f010946d:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109473:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109479:	89 d0                	mov    %edx,%eax
f010947b:	01 c0                	add    %eax,%eax
f010947d:	01 d0                	add    %edx,%eax
f010947f:	c1 e0 03             	shl    $0x3,%eax
f0109482:	01 c8                	add    %ecx,%eax
f0109484:	05 c8 00 00 00       	add    $0xc8,%eax
f0109489:	8b 00                	mov    (%eax),%eax
f010948b:	85 c0                	test   %eax,%eax
f010948d:	74 41                	je     f01094d0 <env_create+0x805>
f010948f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109495:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010949b:	89 d0                	mov    %edx,%eax
f010949d:	01 c0                	add    %eax,%eax
f010949f:	01 d0                	add    %edx,%eax
f01094a1:	c1 e0 03             	shl    $0x3,%eax
f01094a4:	01 c8                	add    %ecx,%eax
f01094a6:	05 c8 00 00 00       	add    $0xc8,%eax
f01094ab:	8b 10                	mov    (%eax),%edx
f01094ad:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094b3:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094b9:	89 c8                	mov    %ecx,%eax
f01094bb:	01 c0                	add    %eax,%eax
f01094bd:	01 c8                	add    %ecx,%eax
f01094bf:	c1 e0 03             	shl    $0x3,%eax
f01094c2:	01 d8                	add    %ebx,%eax
f01094c4:	05 cc 00 00 00       	add    $0xcc,%eax
f01094c9:	8b 00                	mov    (%eax),%eax
f01094cb:	89 42 14             	mov    %eax,0x14(%edx)
f01094ce:	eb 2a                	jmp    f01094fa <env_create+0x82f>
f01094d0:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01094d6:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094dc:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094e2:	89 c8                	mov    %ecx,%eax
f01094e4:	01 c0                	add    %eax,%eax
f01094e6:	01 c8                	add    %ecx,%eax
f01094e8:	c1 e0 03             	shl    $0x3,%eax
f01094eb:	01 d8                	add    %ebx,%eax
f01094ed:	05 cc 00 00 00       	add    $0xcc,%eax
f01094f2:	8b 00                	mov    (%eax),%eax
f01094f4:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f01094fa:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109500:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109506:	89 d0                	mov    %edx,%eax
f0109508:	01 c0                	add    %eax,%eax
f010950a:	01 d0                	add    %edx,%eax
f010950c:	c1 e0 03             	shl    $0x3,%eax
f010950f:	01 c8                	add    %ecx,%eax
f0109511:	05 cc 00 00 00       	add    $0xcc,%eax
f0109516:	8b 00                	mov    (%eax),%eax
f0109518:	85 c0                	test   %eax,%eax
f010951a:	74 41                	je     f010955d <env_create+0x892>
f010951c:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109522:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109528:	89 d0                	mov    %edx,%eax
f010952a:	01 c0                	add    %eax,%eax
f010952c:	01 d0                	add    %edx,%eax
f010952e:	c1 e0 03             	shl    $0x3,%eax
f0109531:	01 c8                	add    %ecx,%eax
f0109533:	05 cc 00 00 00       	add    $0xcc,%eax
f0109538:	8b 10                	mov    (%eax),%edx
f010953a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109540:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109546:	89 c8                	mov    %ecx,%eax
f0109548:	01 c0                	add    %eax,%eax
f010954a:	01 c8                	add    %ecx,%eax
f010954c:	c1 e0 03             	shl    $0x3,%eax
f010954f:	01 d8                	add    %ebx,%eax
f0109551:	05 c8 00 00 00       	add    $0xc8,%eax
f0109556:	8b 00                	mov    (%eax),%eax
f0109558:	89 42 10             	mov    %eax,0x10(%edx)
f010955b:	eb 2a                	jmp    f0109587 <env_create+0x8bc>
f010955d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109563:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109569:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010956f:	89 c8                	mov    %ecx,%eax
f0109571:	01 c0                	add    %eax,%eax
f0109573:	01 c8                	add    %ecx,%eax
f0109575:	c1 e0 03             	shl    $0x3,%eax
f0109578:	01 d8                	add    %ebx,%eax
f010957a:	05 c8 00 00 00       	add    $0xc8,%eax
f010957f:	8b 00                	mov    (%eax),%eax
f0109581:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f0109587:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010958d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109593:	89 d0                	mov    %edx,%eax
f0109595:	01 c0                	add    %eax,%eax
f0109597:	01 d0                	add    %edx,%eax
f0109599:	c1 e0 03             	shl    $0x3,%eax
f010959c:	01 c8                	add    %ecx,%eax
f010959e:	05 c8 00 00 00       	add    $0xc8,%eax
f01095a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095a9:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01095af:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095b5:	89 d0                	mov    %edx,%eax
f01095b7:	01 c0                	add    %eax,%eax
f01095b9:	01 d0                	add    %edx,%eax
f01095bb:	c1 e0 03             	shl    $0x3,%eax
f01095be:	01 c8                	add    %ecx,%eax
f01095c0:	05 cc 00 00 00       	add    $0xcc,%eax
f01095c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095cb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095d1:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f01095d7:	4a                   	dec    %edx
f01095d8:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01095de:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095e4:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01095ea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095f0:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f01095f6:	39 c2                	cmp    %eax,%edx
f01095f8:	0f 83 40 01 00 00    	jae    f010973e <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01095fe:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109604:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010960a:	89 d0                	mov    %edx,%eax
f010960c:	01 c0                	add    %eax,%eax
f010960e:	01 d0                	add    %edx,%eax
f0109610:	c1 e0 03             	shl    $0x3,%eax
f0109613:	05 b0 00 00 00       	add    $0xb0,%eax
f0109618:	01 c8                	add    %ecx,%eax
f010961a:	83 c0 08             	add    $0x8,%eax
f010961d:	85 c0                	test   %eax,%eax
f010961f:	75 17                	jne    f0109638 <env_create+0x96d>
f0109621:	83 ec 04             	sub    $0x4,%esp
f0109624:	68 78 2a 13 f0       	push   $0xf0132a78
f0109629:	68 6c 01 00 00       	push   $0x16c
f010962e:	68 f7 29 13 f0       	push   $0xf01329f7
f0109633:	e8 78 6b ff ff       	call   f01001b0 <_panic>
f0109638:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010963e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109644:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010964a:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109650:	89 d8                	mov    %ebx,%eax
f0109652:	01 c0                	add    %eax,%eax
f0109654:	01 d8                	add    %ebx,%eax
f0109656:	c1 e0 03             	shl    $0x3,%eax
f0109659:	01 d0                	add    %edx,%eax
f010965b:	05 c8 00 00 00       	add    $0xc8,%eax
f0109660:	89 08                	mov    %ecx,(%eax)
f0109662:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109668:	89 c8                	mov    %ecx,%eax
f010966a:	01 c0                	add    %eax,%eax
f010966c:	01 c8                	add    %ecx,%eax
f010966e:	c1 e0 03             	shl    $0x3,%eax
f0109671:	01 d0                	add    %edx,%eax
f0109673:	05 c8 00 00 00       	add    $0xc8,%eax
f0109678:	8b 00                	mov    (%eax),%eax
f010967a:	85 c0                	test   %eax,%eax
f010967c:	74 30                	je     f01096ae <env_create+0x9e3>
f010967e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109684:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010968a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109690:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109696:	89 c8                	mov    %ecx,%eax
f0109698:	01 c0                	add    %eax,%eax
f010969a:	01 c8                	add    %ecx,%eax
f010969c:	c1 e0 03             	shl    $0x3,%eax
f010969f:	05 b0 00 00 00       	add    $0xb0,%eax
f01096a4:	01 d8                	add    %ebx,%eax
f01096a6:	83 c0 08             	add    $0x8,%eax
f01096a9:	89 42 14             	mov    %eax,0x14(%edx)
f01096ac:	eb 2b                	jmp    f01096d9 <env_create+0xa0e>
f01096ae:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096b4:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096ba:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096c0:	89 c8                	mov    %ecx,%eax
f01096c2:	01 c0                	add    %eax,%eax
f01096c4:	01 c8                	add    %ecx,%eax
f01096c6:	c1 e0 03             	shl    $0x3,%eax
f01096c9:	05 b0 00 00 00       	add    $0xb0,%eax
f01096ce:	01 d8                	add    %ebx,%eax
f01096d0:	83 c0 08             	add    $0x8,%eax
f01096d3:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f01096d9:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096df:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096e5:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096eb:	89 c8                	mov    %ecx,%eax
f01096ed:	01 c0                	add    %eax,%eax
f01096ef:	01 c8                	add    %ecx,%eax
f01096f1:	c1 e0 03             	shl    $0x3,%eax
f01096f4:	05 b0 00 00 00       	add    $0xb0,%eax
f01096f9:	01 d8                	add    %ebx,%eax
f01096fb:	83 c0 08             	add    $0x8,%eax
f01096fe:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f0109704:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010970a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109710:	89 d0                	mov    %edx,%eax
f0109712:	01 c0                	add    %eax,%eax
f0109714:	01 d0                	add    %edx,%eax
f0109716:	c1 e0 03             	shl    $0x3,%eax
f0109719:	01 c8                	add    %ecx,%eax
f010971b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109720:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109726:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010972c:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109732:	42                   	inc    %edx
f0109733:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f0109739:	e9 3b 01 00 00       	jmp    f0109879 <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010973e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109744:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010974a:	89 d0                	mov    %edx,%eax
f010974c:	01 c0                	add    %eax,%eax
f010974e:	01 d0                	add    %edx,%eax
f0109750:	c1 e0 03             	shl    $0x3,%eax
f0109753:	05 b0 00 00 00       	add    $0xb0,%eax
f0109758:	01 c8                	add    %ecx,%eax
f010975a:	83 c0 08             	add    $0x8,%eax
f010975d:	85 c0                	test   %eax,%eax
f010975f:	75 17                	jne    f0109778 <env_create+0xaad>
f0109761:	83 ec 04             	sub    $0x4,%esp
f0109764:	68 78 2a 13 f0       	push   $0xf0132a78
f0109769:	68 70 01 00 00       	push   $0x170
f010976e:	68 f7 29 13 f0       	push   $0xf01329f7
f0109773:	e8 38 6a ff ff       	call   f01001b0 <_panic>
f0109778:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010977e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109784:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010978a:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109790:	89 d8                	mov    %ebx,%eax
f0109792:	01 c0                	add    %eax,%eax
f0109794:	01 d8                	add    %ebx,%eax
f0109796:	c1 e0 03             	shl    $0x3,%eax
f0109799:	01 d0                	add    %edx,%eax
f010979b:	05 c8 00 00 00       	add    $0xc8,%eax
f01097a0:	89 08                	mov    %ecx,(%eax)
f01097a2:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097a8:	89 c8                	mov    %ecx,%eax
f01097aa:	01 c0                	add    %eax,%eax
f01097ac:	01 c8                	add    %ecx,%eax
f01097ae:	c1 e0 03             	shl    $0x3,%eax
f01097b1:	01 d0                	add    %edx,%eax
f01097b3:	05 c8 00 00 00       	add    $0xc8,%eax
f01097b8:	8b 00                	mov    (%eax),%eax
f01097ba:	85 c0                	test   %eax,%eax
f01097bc:	74 30                	je     f01097ee <env_create+0xb23>
f01097be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097c4:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f01097ca:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097d0:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097d6:	89 c8                	mov    %ecx,%eax
f01097d8:	01 c0                	add    %eax,%eax
f01097da:	01 c8                	add    %ecx,%eax
f01097dc:	c1 e0 03             	shl    $0x3,%eax
f01097df:	05 b0 00 00 00       	add    $0xb0,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	83 c0 08             	add    $0x8,%eax
f01097e9:	89 42 14             	mov    %eax,0x14(%edx)
f01097ec:	eb 2b                	jmp    f0109819 <env_create+0xb4e>
f01097ee:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01097f4:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097fa:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109800:	89 c8                	mov    %ecx,%eax
f0109802:	01 c0                	add    %eax,%eax
f0109804:	01 c8                	add    %ecx,%eax
f0109806:	c1 e0 03             	shl    $0x3,%eax
f0109809:	05 b0 00 00 00       	add    $0xb0,%eax
f010980e:	01 d8                	add    %ebx,%eax
f0109810:	83 c0 08             	add    $0x8,%eax
f0109813:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f0109819:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010981f:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109825:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010982b:	89 c8                	mov    %ecx,%eax
f010982d:	01 c0                	add    %eax,%eax
f010982f:	01 c8                	add    %ecx,%eax
f0109831:	c1 e0 03             	shl    $0x3,%eax
f0109834:	05 b0 00 00 00       	add    $0xb0,%eax
f0109839:	01 d8                	add    %ebx,%eax
f010983b:	83 c0 08             	add    $0x8,%eax
f010983e:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109844:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010984a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109850:	89 d0                	mov    %edx,%eax
f0109852:	01 c0                	add    %eax,%eax
f0109854:	01 d0                	add    %edx,%eax
f0109856:	c1 e0 03             	shl    $0x3,%eax
f0109859:	01 c8                	add    %ecx,%eax
f010985b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109860:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109866:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010986c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0109872:	42                   	inc    %edx
f0109873:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109879:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010987f:	83 ec 04             	sub    $0x4,%esp
f0109882:	6a 01                	push   $0x1
f0109884:	ff 75 c0             	pushl  -0x40(%ebp)
f0109887:	50                   	push   %eax
f0109888:	e8 08 a5 ff ff       	call   f0103d95 <pf_add_empty_env_page>
f010988d:	83 c4 10             	add    $0x10,%esp
f0109890:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109896:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010989d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01098a0:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f01098a6:	0f 83 b5 fa ff ff    	jae    f0109361 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01098ac:	83 ec 0c             	sub    $0xc,%esp
f01098af:	6a 02                	push   $0x2
f01098b1:	e8 9a 3e 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f01098b6:	83 c4 10             	add    $0x10,%esp
f01098b9:	85 c0                	test   %eax,%eax
f01098bb:	74 75                	je     f0109932 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f01098bd:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01098c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098ca:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01098d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098d3:	eb 2e                	jmp    f0109903 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01098d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01098d8:	8b 10                	mov    (%eax),%edx
f01098da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098e0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01098e6:	6a 01                	push   $0x1
f01098e8:	6a 00                	push   $0x0
f01098ea:	52                   	push   %edx
f01098eb:	50                   	push   %eax
f01098ec:	e8 2e e7 ff ff       	call   f010801f <pt_set_page_permissions>
f01098f1:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01098f4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098fa:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109900:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109903:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109909:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010990d:	74 08                	je     f0109917 <env_create+0xc4c>
f010990f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109912:	8b 52 10             	mov    0x10(%edx),%edx
f0109915:	eb 05                	jmp    f010991c <env_create+0xc51>
f0109917:	ba 00 00 00 00       	mov    $0x0,%edx
f010991c:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109922:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109928:	85 c0                	test   %eax,%eax
f010992a:	75 a9                	jne    f01098d5 <env_create+0xc0a>
f010992c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109930:	75 a3                	jne    f01098d5 <env_create+0xc0a>
f0109932:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109935:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0109938:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010993b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010993e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109944:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109947:	5b                   	pop    %ebx
f0109948:	5e                   	pop    %esi
f0109949:	5f                   	pop    %edi
f010994a:	5d                   	pop    %ebp
f010994b:	c3                   	ret    

f010994c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010994c:	55                   	push   %ebp
f010994d:	89 e5                	mov    %esp,%ebp
f010994f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109952:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109957:	3b 45 08             	cmp    0x8(%ebp),%eax
f010995a:	74 2e                	je     f010998a <env_run+0x3e>
	{
		curenv = e ;
f010995c:	8b 45 08             	mov    0x8(%ebp),%eax
f010995f:	a3 54 32 25 f0       	mov    %eax,0xf0253254
		curenv->env_runs++ ;
f0109964:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109969:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f010996f:	42                   	inc    %edx
f0109970:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109976:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010997b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109981:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109987:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010998a:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010998f:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109996:	e8 5c b1 ff ff       	call   f0104af7 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010999b:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01099a0:	83 ec 0c             	sub    $0xc,%esp
f01099a3:	50                   	push   %eax
f01099a4:	e8 f5 00 00 00       	call   f0109a9e <env_pop_tf>

f01099a9 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01099a9:	55                   	push   %ebp
f01099aa:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f01099ac:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f01099ad:	5d                   	pop    %ebp
f01099ae:	c3                   	ret    

f01099af <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01099af:	55                   	push   %ebp
f01099b0:	89 e5                	mov    %esp,%ebp
f01099b2:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01099b5:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f01099ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01099bd:	83 ec 0c             	sub    $0xc,%esp
f01099c0:	50                   	push   %eax
f01099c1:	e8 0b ba ff ff       	call   f01053d1 <sched_exit_env>
f01099c6:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01099c9:	e8 4b c8 ff ff       	call   f0106219 <fos_scheduler>

f01099ce <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01099ce:	55                   	push   %ebp
f01099cf:	89 e5                	mov    %esp,%ebp
f01099d1:	53                   	push   %ebx
f01099d2:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01099d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01099d9:	75 15                	jne    f01099f0 <envid2env+0x22>
		*env_store = curenv;
f01099db:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f01099e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099e4:	89 10                	mov    %edx,(%eax)
		return 0;
f01099e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01099eb:	e9 a9 00 00 00       	jmp    f0109a99 <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01099f0:	8b 1d 50 32 25 f0    	mov    0xf0253250,%ebx
f01099f6:	83 ec 0c             	sub    $0xc,%esp
f01099f9:	6a 08                	push   $0x8
f01099fb:	e8 99 41 02 00       	call   f012db99 <nearest_pow2_ceil>
f0109a00:	83 c4 10             	add    $0x10,%esp
f0109a03:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a09:	21 c2                	and    %eax,%edx
f0109a0b:	89 d0                	mov    %edx,%eax
f0109a0d:	01 c0                	add    %eax,%eax
f0109a0f:	01 d0                	add    %edx,%eax
f0109a11:	01 c0                	add    %eax,%eax
f0109a13:	01 d0                	add    %edx,%eax
f0109a15:	c1 e0 02             	shl    $0x2,%eax
f0109a18:	01 d0                	add    %edx,%eax
f0109a1a:	01 c0                	add    %eax,%eax
f0109a1c:	01 d0                	add    %edx,%eax
f0109a1e:	c1 e0 02             	shl    $0x2,%eax
f0109a21:	01 d0                	add    %edx,%eax
f0109a23:	c1 e0 02             	shl    $0x2,%eax
f0109a26:	01 d0                	add    %edx,%eax
f0109a28:	c1 e0 02             	shl    $0x2,%eax
f0109a2b:	01 d0                	add    %edx,%eax
f0109a2d:	c1 e0 05             	shl    $0x5,%eax
f0109a30:	01 d8                	add    %ebx,%eax
f0109a32:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a38:	8b 40 54             	mov    0x54(%eax),%eax
f0109a3b:	85 c0                	test   %eax,%eax
f0109a3d:	74 0b                	je     f0109a4a <envid2env+0x7c>
f0109a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a42:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a45:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a48:	74 10                	je     f0109a5a <envid2env+0x8c>
		*env_store = 0;
f0109a4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a53:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a58:	eb 3f                	jmp    f0109a99 <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109a5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109a5e:	74 2c                	je     f0109a8c <envid2env+0xbe>
f0109a60:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109a65:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109a68:	74 22                	je     f0109a8c <envid2env+0xbe>
f0109a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a6d:	8b 50 50             	mov    0x50(%eax),%edx
f0109a70:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0109a75:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a78:	39 c2                	cmp    %eax,%edx
f0109a7a:	74 10                	je     f0109a8c <envid2env+0xbe>
		*env_store = 0;
f0109a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a85:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a8a:	eb 0d                	jmp    f0109a99 <envid2env+0xcb>
	}

	*env_store = e;
f0109a8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a92:	89 10                	mov    %edx,(%eax)
	return 0;
f0109a94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109a99:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109a9c:	c9                   	leave  
f0109a9d:	c3                   	ret    

f0109a9e <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109a9e:	55                   	push   %ebp
f0109a9f:	89 e5                	mov    %esp,%ebp
f0109aa1:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109aa4:	8b 65 08             	mov    0x8(%ebp),%esp
f0109aa7:	61                   	popa   
f0109aa8:	07                   	pop    %es
f0109aa9:	1f                   	pop    %ds
f0109aaa:	83 c4 08             	add    $0x8,%esp
f0109aad:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109aae:	83 ec 04             	sub    $0x4,%esp
f0109ab1:	68 9b 2a 13 f0       	push   $0xf0132a9b
f0109ab6:	68 23 02 00 00       	push   $0x223
f0109abb:	68 f7 29 13 f0       	push   $0xf01329f7
f0109ac0:	e8 eb 66 ff ff       	call   f01001b0 <_panic>

f0109ac5 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109ac5:	55                   	push   %ebp
f0109ac6:	89 e5                	mov    %esp,%ebp
f0109ac8:	53                   	push   %ebx
f0109ac9:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109acc:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109ad3:	e9 e3 01 00 00       	jmp    f0109cbb <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109ad8:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109ade:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ae1:	89 d0                	mov    %edx,%eax
f0109ae3:	01 c0                	add    %eax,%eax
f0109ae5:	01 d0                	add    %edx,%eax
f0109ae7:	01 c0                	add    %eax,%eax
f0109ae9:	01 d0                	add    %edx,%eax
f0109aeb:	c1 e0 02             	shl    $0x2,%eax
f0109aee:	01 d0                	add    %edx,%eax
f0109af0:	01 c0                	add    %eax,%eax
f0109af2:	01 d0                	add    %edx,%eax
f0109af4:	c1 e0 02             	shl    $0x2,%eax
f0109af7:	01 d0                	add    %edx,%eax
f0109af9:	c1 e0 02             	shl    $0x2,%eax
f0109afc:	01 d0                	add    %edx,%eax
f0109afe:	c1 e0 02             	shl    $0x2,%eax
f0109b01:	01 d0                	add    %edx,%eax
f0109b03:	c1 e0 05             	shl    $0x5,%eax
f0109b06:	01 c8                	add    %ecx,%eax
f0109b08:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109b0f:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109b15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b18:	89 d0                	mov    %edx,%eax
f0109b1a:	01 c0                	add    %eax,%eax
f0109b1c:	01 d0                	add    %edx,%eax
f0109b1e:	01 c0                	add    %eax,%eax
f0109b20:	01 d0                	add    %edx,%eax
f0109b22:	c1 e0 02             	shl    $0x2,%eax
f0109b25:	01 d0                	add    %edx,%eax
f0109b27:	01 c0                	add    %eax,%eax
f0109b29:	01 d0                	add    %edx,%eax
f0109b2b:	c1 e0 02             	shl    $0x2,%eax
f0109b2e:	01 d0                	add    %edx,%eax
f0109b30:	c1 e0 02             	shl    $0x2,%eax
f0109b33:	01 d0                	add    %edx,%eax
f0109b35:	c1 e0 02             	shl    $0x2,%eax
f0109b38:	01 d0                	add    %edx,%eax
f0109b3a:	c1 e0 05             	shl    $0x5,%eax
f0109b3d:	01 c8                	add    %ecx,%eax
f0109b3f:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109b46:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109b4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b4f:	89 d0                	mov    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	01 c0                	add    %eax,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 02             	shl    $0x2,%eax
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	01 c0                	add    %eax,%eax
f0109b60:	01 d0                	add    %edx,%eax
f0109b62:	c1 e0 02             	shl    $0x2,%eax
f0109b65:	01 d0                	add    %edx,%eax
f0109b67:	c1 e0 02             	shl    $0x2,%eax
f0109b6a:	01 d0                	add    %edx,%eax
f0109b6c:	c1 e0 02             	shl    $0x2,%eax
f0109b6f:	01 d0                	add    %edx,%eax
f0109b71:	c1 e0 05             	shl    $0x5,%eax
f0109b74:	01 c8                	add    %ecx,%eax
f0109b76:	85 c0                	test   %eax,%eax
f0109b78:	75 17                	jne    f0109b91 <env_init+0xcc>
f0109b7a:	83 ec 04             	sub    $0x4,%esp
f0109b7d:	68 78 2a 13 f0       	push   $0xf0132a78
f0109b82:	68 3f 02 00 00       	push   $0x23f
f0109b87:	68 f7 29 13 f0       	push   $0xf01329f7
f0109b8c:	e8 1f 66 ff ff       	call   f01001b0 <_panic>
f0109b91:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109b97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b9a:	89 d0                	mov    %edx,%eax
f0109b9c:	01 c0                	add    %eax,%eax
f0109b9e:	01 d0                	add    %edx,%eax
f0109ba0:	01 c0                	add    %eax,%eax
f0109ba2:	01 d0                	add    %edx,%eax
f0109ba4:	c1 e0 02             	shl    $0x2,%eax
f0109ba7:	01 d0                	add    %edx,%eax
f0109ba9:	01 c0                	add    %eax,%eax
f0109bab:	01 d0                	add    %edx,%eax
f0109bad:	c1 e0 02             	shl    $0x2,%eax
f0109bb0:	01 d0                	add    %edx,%eax
f0109bb2:	c1 e0 02             	shl    $0x2,%eax
f0109bb5:	01 d0                	add    %edx,%eax
f0109bb7:	c1 e0 02             	shl    $0x2,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 05             	shl    $0x5,%eax
f0109bbf:	01 c8                	add    %ecx,%eax
f0109bc1:	8b 15 58 32 25 f0    	mov    0xf0253258,%edx
f0109bc7:	89 50 44             	mov    %edx,0x44(%eax)
f0109bca:	8b 40 44             	mov    0x44(%eax),%eax
f0109bcd:	85 c0                	test   %eax,%eax
f0109bcf:	74 3b                	je     f0109c0c <env_init+0x147>
f0109bd1:	8b 0d 58 32 25 f0    	mov    0xf0253258,%ecx
f0109bd7:	8b 1d 50 32 25 f0    	mov    0xf0253250,%ebx
f0109bdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109be0:	89 d0                	mov    %edx,%eax
f0109be2:	01 c0                	add    %eax,%eax
f0109be4:	01 d0                	add    %edx,%eax
f0109be6:	01 c0                	add    %eax,%eax
f0109be8:	01 d0                	add    %edx,%eax
f0109bea:	c1 e0 02             	shl    $0x2,%eax
f0109bed:	01 d0                	add    %edx,%eax
f0109bef:	01 c0                	add    %eax,%eax
f0109bf1:	01 d0                	add    %edx,%eax
f0109bf3:	c1 e0 02             	shl    $0x2,%eax
f0109bf6:	01 d0                	add    %edx,%eax
f0109bf8:	c1 e0 02             	shl    $0x2,%eax
f0109bfb:	01 d0                	add    %edx,%eax
f0109bfd:	c1 e0 02             	shl    $0x2,%eax
f0109c00:	01 d0                	add    %edx,%eax
f0109c02:	c1 e0 05             	shl    $0x5,%eax
f0109c05:	01 d8                	add    %ebx,%eax
f0109c07:	89 41 48             	mov    %eax,0x48(%ecx)
f0109c0a:	eb 35                	jmp    f0109c41 <env_init+0x17c>
f0109c0c:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109c12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c15:	89 d0                	mov    %edx,%eax
f0109c17:	01 c0                	add    %eax,%eax
f0109c19:	01 d0                	add    %edx,%eax
f0109c1b:	01 c0                	add    %eax,%eax
f0109c1d:	01 d0                	add    %edx,%eax
f0109c1f:	c1 e0 02             	shl    $0x2,%eax
f0109c22:	01 d0                	add    %edx,%eax
f0109c24:	01 c0                	add    %eax,%eax
f0109c26:	01 d0                	add    %edx,%eax
f0109c28:	c1 e0 02             	shl    $0x2,%eax
f0109c2b:	01 d0                	add    %edx,%eax
f0109c2d:	c1 e0 02             	shl    $0x2,%eax
f0109c30:	01 d0                	add    %edx,%eax
f0109c32:	c1 e0 02             	shl    $0x2,%eax
f0109c35:	01 d0                	add    %edx,%eax
f0109c37:	c1 e0 05             	shl    $0x5,%eax
f0109c3a:	01 c8                	add    %ecx,%eax
f0109c3c:	a3 5c 32 25 f0       	mov    %eax,0xf025325c
f0109c41:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109c47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c4a:	89 d0                	mov    %edx,%eax
f0109c4c:	01 c0                	add    %eax,%eax
f0109c4e:	01 d0                	add    %edx,%eax
f0109c50:	01 c0                	add    %eax,%eax
f0109c52:	01 d0                	add    %edx,%eax
f0109c54:	c1 e0 02             	shl    $0x2,%eax
f0109c57:	01 d0                	add    %edx,%eax
f0109c59:	01 c0                	add    %eax,%eax
f0109c5b:	01 d0                	add    %edx,%eax
f0109c5d:	c1 e0 02             	shl    $0x2,%eax
f0109c60:	01 d0                	add    %edx,%eax
f0109c62:	c1 e0 02             	shl    $0x2,%eax
f0109c65:	01 d0                	add    %edx,%eax
f0109c67:	c1 e0 02             	shl    $0x2,%eax
f0109c6a:	01 d0                	add    %edx,%eax
f0109c6c:	c1 e0 05             	shl    $0x5,%eax
f0109c6f:	01 c8                	add    %ecx,%eax
f0109c71:	a3 58 32 25 f0       	mov    %eax,0xf0253258
f0109c76:	8b 0d 50 32 25 f0    	mov    0xf0253250,%ecx
f0109c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c7f:	89 d0                	mov    %edx,%eax
f0109c81:	01 c0                	add    %eax,%eax
f0109c83:	01 d0                	add    %edx,%eax
f0109c85:	01 c0                	add    %eax,%eax
f0109c87:	01 d0                	add    %edx,%eax
f0109c89:	c1 e0 02             	shl    $0x2,%eax
f0109c8c:	01 d0                	add    %edx,%eax
f0109c8e:	01 c0                	add    %eax,%eax
f0109c90:	01 d0                	add    %edx,%eax
f0109c92:	c1 e0 02             	shl    $0x2,%eax
f0109c95:	01 d0                	add    %edx,%eax
f0109c97:	c1 e0 02             	shl    $0x2,%eax
f0109c9a:	01 d0                	add    %edx,%eax
f0109c9c:	c1 e0 02             	shl    $0x2,%eax
f0109c9f:	01 d0                	add    %edx,%eax
f0109ca1:	c1 e0 05             	shl    $0x5,%eax
f0109ca4:	01 c8                	add    %ecx,%eax
f0109ca6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109cad:	a1 64 32 25 f0       	mov    0xf0253264,%eax
f0109cb2:	40                   	inc    %eax
f0109cb3:	a3 64 32 25 f0       	mov    %eax,0xf0253264
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109cb8:	ff 4d f4             	decl   -0xc(%ebp)
f0109cbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cbf:	0f 89 13 fe ff ff    	jns    f0109ad8 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109cc5:	90                   	nop
f0109cc6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109cc9:	c9                   	leave  
f0109cca:	c3                   	ret    

f0109ccb <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109ccb:	55                   	push   %ebp
f0109ccc:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109cce:	8b 15 58 32 25 f0    	mov    0xf0253258,%edx
f0109cd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd7:	89 10                	mov    %edx,(%eax)
f0109cd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cdc:	8b 00                	mov    (%eax),%eax
f0109cde:	85 c0                	test   %eax,%eax
f0109ce0:	75 07                	jne    f0109ce9 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109ce2:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109ce7:	eb 11                	jmp    f0109cfa <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109ce9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cec:	8b 00                	mov    (%eax),%eax
f0109cee:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109cfa:	5d                   	pop    %ebp
f0109cfb:	c3                   	ret    

f0109cfc <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109cfc:	55                   	push   %ebp
f0109cfd:	89 e5                	mov    %esp,%ebp
f0109cff:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109d02:	83 ec 04             	sub    $0x4,%esp
f0109d05:	68 a0 da 01 00       	push   $0x1daa0
f0109d0a:	6a 00                	push   $0x0
f0109d0c:	ff 75 08             	pushl  0x8(%ebp)
f0109d0f:	e8 e8 52 02 00       	call   f012effc <memset>
f0109d14:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109d17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d1a:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109d21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d25:	75 17                	jne    f0109d3e <free_environment+0x42>
f0109d27:	83 ec 04             	sub    $0x4,%esp
f0109d2a:	68 78 2a 13 f0       	push   $0xf0132a78
f0109d2f:	68 5c 02 00 00       	push   $0x25c
f0109d34:	68 f7 29 13 f0       	push   $0xf01329f7
f0109d39:	e8 72 64 ff ff       	call   f01001b0 <_panic>
f0109d3e:	8b 15 58 32 25 f0    	mov    0xf0253258,%edx
f0109d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d47:	89 50 44             	mov    %edx,0x44(%eax)
f0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4d:	8b 40 44             	mov    0x44(%eax),%eax
f0109d50:	85 c0                	test   %eax,%eax
f0109d52:	74 0d                	je     f0109d61 <free_environment+0x65>
f0109d54:	a1 58 32 25 f0       	mov    0xf0253258,%eax
f0109d59:	8b 55 08             	mov    0x8(%ebp),%edx
f0109d5c:	89 50 48             	mov    %edx,0x48(%eax)
f0109d5f:	eb 08                	jmp    f0109d69 <free_environment+0x6d>
f0109d61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d64:	a3 5c 32 25 f0       	mov    %eax,0xf025325c
f0109d69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6c:	a3 58 32 25 f0       	mov    %eax,0xf0253258
f0109d71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d74:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d7b:	a1 64 32 25 f0       	mov    0xf0253264,%eax
f0109d80:	40                   	inc    %eax
f0109d81:	a3 64 32 25 f0       	mov    %eax,0xf0253264
}
f0109d86:	90                   	nop
f0109d87:	c9                   	leave  
f0109d88:	c3                   	ret    

f0109d89 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109d89:	55                   	push   %ebp
f0109d8a:	89 e5                	mov    %esp,%ebp
f0109d8c:	53                   	push   %ebx
f0109d8d:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109d90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d93:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109d99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d9c:	8b 40 08             	mov    0x8(%eax),%eax
f0109d9f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109da2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109da9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109dac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109daf:	01 c2                	add    %eax,%edx
f0109db1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109db4:	01 d0                	add    %edx,%eax
f0109db6:	48                   	dec    %eax
f0109db7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109dba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0109dc2:	f7 75 dc             	divl   -0x24(%ebp)
f0109dc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109dc8:	29 d0                	sub    %edx,%eax
f0109dca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109dd0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109dd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109dd6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109dde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109de5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109dec:	8b 45 10             	mov    0x10(%ebp),%eax
f0109def:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109df5:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109dfc:	0f 85 38 06 00 00    	jne    f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
f0109e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e05:	83 c0 5c             	add    $0x5c,%eax
f0109e08:	83 ec 08             	sub    $0x8,%esp
f0109e0b:	68 a7 2a 13 f0       	push   $0xf0132aa7
f0109e10:	50                   	push   %eax
f0109e11:	e8 04 51 02 00       	call   f012ef1a <strcmp>
f0109e16:	83 c4 10             	add    $0x10,%esp
f0109e19:	85 c0                	test   %eax,%eax
f0109e1b:	0f 84 19 06 00 00    	je     f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109e21:	8b 45 14             	mov    0x14(%ebp),%eax
f0109e24:	83 f8 06             	cmp    $0x6,%eax
f0109e27:	76 05                	jbe    f0109e2e <program_segment_alloc_map_copy_workingset+0xa5>
f0109e29:	b8 06 00 00 00       	mov    $0x6,%eax
f0109e2e:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109e31:	e9 04 06 00 00       	jmp    f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109e36:	83 ec 0c             	sub    $0xc,%esp
f0109e39:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109e3c:	50                   	push   %eax
f0109e3d:	e8 e3 d4 ff ff       	call   f0107325 <allocate_frame>
f0109e42:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109e45:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109e51:	6a 06                	push   $0x6
f0109e53:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e56:	52                   	push   %edx
f0109e57:	50                   	push   %eax
f0109e58:	e8 19 da ff ff       	call   f0107876 <loadtime_map_frame>
f0109e5d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109e60:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e63:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e69:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e6c:	89 d0                	mov    %edx,%eax
f0109e6e:	01 c0                	add    %eax,%eax
f0109e70:	01 d0                	add    %edx,%eax
f0109e72:	c1 e0 03             	shl    $0x3,%eax
f0109e75:	01 c8                	add    %ecx,%eax
f0109e77:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e80:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109e82:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e85:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e8b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e8e:	89 d0                	mov    %edx,%eax
f0109e90:	01 c0                	add    %eax,%eax
f0109e92:	01 d0                	add    %edx,%eax
f0109e94:	c1 e0 03             	shl    $0x3,%eax
f0109e97:	01 c8                	add    %ecx,%eax
f0109e99:	05 bc 00 00 00       	add    $0xbc,%eax
f0109e9e:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109eaa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ead:	89 d0                	mov    %edx,%eax
f0109eaf:	01 c0                	add    %eax,%eax
f0109eb1:	01 d0                	add    %edx,%eax
f0109eb3:	c1 e0 03             	shl    $0x3,%eax
f0109eb6:	01 c8                	add    %ecx,%eax
f0109eb8:	05 c0 00 00 00       	add    $0xc0,%eax
f0109ebd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109ec3:	83 ec 0c             	sub    $0xc,%esp
f0109ec6:	6a 02                	push   $0x2
f0109ec8:	e8 83 38 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f0109ecd:	83 c4 10             	add    $0x10,%esp
f0109ed0:	85 c0                	test   %eax,%eax
f0109ed2:	0f 84 2c 04 00 00    	je     f010a304 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109edb:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ee1:	89 d0                	mov    %edx,%eax
f0109ee3:	01 c0                	add    %eax,%eax
f0109ee5:	01 d0                	add    %edx,%eax
f0109ee7:	c1 e0 03             	shl    $0x3,%eax
f0109eea:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef3:	01 d0                	add    %edx,%eax
f0109ef5:	83 c0 08             	add    $0x8,%eax
f0109ef8:	85 c0                	test   %eax,%eax
f0109efa:	75 17                	jne    f0109f13 <program_segment_alloc_map_copy_workingset+0x18a>
f0109efc:	83 ec 04             	sub    $0x4,%esp
f0109eff:	68 59 2a 13 f0       	push   $0xf0132a59
f0109f04:	68 9f 02 00 00       	push   $0x29f
f0109f09:	68 f7 29 13 f0       	push   $0xf01329f7
f0109f0e:	e8 9d 62 ff ff       	call   f01001b0 <_panic>
f0109f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f16:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f1c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f1f:	89 d0                	mov    %edx,%eax
f0109f21:	01 c0                	add    %eax,%eax
f0109f23:	01 d0                	add    %edx,%eax
f0109f25:	c1 e0 03             	shl    $0x3,%eax
f0109f28:	01 c8                	add    %ecx,%eax
f0109f2a:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f2f:	8b 00                	mov    (%eax),%eax
f0109f31:	85 c0                	test   %eax,%eax
f0109f33:	74 41                	je     f0109f76 <program_segment_alloc_map_copy_workingset+0x1ed>
f0109f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f38:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f3e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f41:	89 d0                	mov    %edx,%eax
f0109f43:	01 c0                	add    %eax,%eax
f0109f45:	01 d0                	add    %edx,%eax
f0109f47:	c1 e0 03             	shl    $0x3,%eax
f0109f4a:	01 c8                	add    %ecx,%eax
f0109f4c:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f51:	8b 10                	mov    (%eax),%edx
f0109f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f56:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109f5c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109f5f:	89 c8                	mov    %ecx,%eax
f0109f61:	01 c0                	add    %eax,%eax
f0109f63:	01 c8                	add    %ecx,%eax
f0109f65:	c1 e0 03             	shl    $0x3,%eax
f0109f68:	01 d8                	add    %ebx,%eax
f0109f6a:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f6f:	8b 00                	mov    (%eax),%eax
f0109f71:	89 42 14             	mov    %eax,0x14(%edx)
f0109f74:	eb 27                	jmp    f0109f9d <program_segment_alloc_map_copy_workingset+0x214>
f0109f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f79:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f7f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f82:	89 d0                	mov    %edx,%eax
f0109f84:	01 c0                	add    %eax,%eax
f0109f86:	01 d0                	add    %edx,%eax
f0109f88:	c1 e0 03             	shl    $0x3,%eax
f0109f8b:	01 c8                	add    %ecx,%eax
f0109f8d:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f92:	8b 10                	mov    (%eax),%edx
f0109f94:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f97:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109f9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fa6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fa9:	89 d0                	mov    %edx,%eax
f0109fab:	01 c0                	add    %eax,%eax
f0109fad:	01 d0                	add    %edx,%eax
f0109faf:	c1 e0 03             	shl    $0x3,%eax
f0109fb2:	01 c8                	add    %ecx,%eax
f0109fb4:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fb9:	8b 00                	mov    (%eax),%eax
f0109fbb:	85 c0                	test   %eax,%eax
f0109fbd:	74 41                	je     f010a000 <program_segment_alloc_map_copy_workingset+0x277>
f0109fbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fc8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fcb:	89 d0                	mov    %edx,%eax
f0109fcd:	01 c0                	add    %eax,%eax
f0109fcf:	01 d0                	add    %edx,%eax
f0109fd1:	c1 e0 03             	shl    $0x3,%eax
f0109fd4:	01 c8                	add    %ecx,%eax
f0109fd6:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fdb:	8b 10                	mov    (%eax),%edx
f0109fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe0:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109fe6:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109fe9:	89 c8                	mov    %ecx,%eax
f0109feb:	01 c0                	add    %eax,%eax
f0109fed:	01 c8                	add    %ecx,%eax
f0109fef:	c1 e0 03             	shl    $0x3,%eax
f0109ff2:	01 d8                	add    %ebx,%eax
f0109ff4:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ff9:	8b 00                	mov    (%eax),%eax
f0109ffb:	89 42 10             	mov    %eax,0x10(%edx)
f0109ffe:	eb 27                	jmp    f010a027 <program_segment_alloc_map_copy_workingset+0x29e>
f010a000:	8b 45 08             	mov    0x8(%ebp),%eax
f010a003:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a009:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a00c:	89 d0                	mov    %edx,%eax
f010a00e:	01 c0                	add    %eax,%eax
f010a010:	01 d0                	add    %edx,%eax
f010a012:	c1 e0 03             	shl    $0x3,%eax
f010a015:	01 c8                	add    %ecx,%eax
f010a017:	05 c8 00 00 00       	add    $0xc8,%eax
f010a01c:	8b 10                	mov    (%eax),%edx
f010a01e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a021:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a027:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a030:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 c8 00 00 00       	add    $0xc8,%eax
f010a043:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a049:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a052:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a055:	89 d0                	mov    %edx,%eax
f010a057:	01 c0                	add    %eax,%eax
f010a059:	01 d0                	add    %edx,%eax
f010a05b:	c1 e0 03             	shl    $0x3,%eax
f010a05e:	01 c8                	add    %ecx,%eax
f010a060:	05 cc 00 00 00       	add    $0xcc,%eax
f010a065:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a06b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a06e:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a074:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a077:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07a:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a080:	8b 45 08             	mov    0x8(%ebp),%eax
f010a083:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a089:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a092:	48                   	dec    %eax
f010a093:	39 c2                	cmp    %eax,%edx
f010a095:	0f 83 37 01 00 00    	jae    f010a1d2 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a09b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a09e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0a4:	89 d0                	mov    %edx,%eax
f010a0a6:	01 c0                	add    %eax,%eax
f010a0a8:	01 d0                	add    %edx,%eax
f010a0aa:	c1 e0 03             	shl    $0x3,%eax
f010a0ad:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a0b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b6:	01 d0                	add    %edx,%eax
f010a0b8:	83 c0 08             	add    $0x8,%eax
f010a0bb:	85 c0                	test   %eax,%eax
f010a0bd:	75 17                	jne    f010a0d6 <program_segment_alloc_map_copy_workingset+0x34d>
f010a0bf:	83 ec 04             	sub    $0x4,%esp
f010a0c2:	68 78 2a 13 f0       	push   $0xf0132a78
f010a0c7:	68 a3 02 00 00       	push   $0x2a3
f010a0cc:	68 f7 29 13 f0       	push   $0xf01329f7
f010a0d1:	e8 da 60 ff ff       	call   f01001b0 <_panic>
f010a0d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d9:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e2:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a0e8:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a0eb:	89 d0                	mov    %edx,%eax
f010a0ed:	01 c0                	add    %eax,%eax
f010a0ef:	01 d0                	add    %edx,%eax
f010a0f1:	c1 e0 03             	shl    $0x3,%eax
f010a0f4:	01 d8                	add    %ebx,%eax
f010a0f6:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0fb:	89 08                	mov    %ecx,(%eax)
f010a0fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a100:	89 d0                	mov    %edx,%eax
f010a102:	01 c0                	add    %eax,%eax
f010a104:	01 d0                	add    %edx,%eax
f010a106:	c1 e0 03             	shl    $0x3,%eax
f010a109:	01 c8                	add    %ecx,%eax
f010a10b:	05 c8 00 00 00       	add    $0xc8,%eax
f010a110:	8b 00                	mov    (%eax),%eax
f010a112:	85 c0                	test   %eax,%eax
f010a114:	74 2e                	je     f010a144 <program_segment_alloc_map_copy_workingset+0x3bb>
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a11f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a122:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a128:	89 c8                	mov    %ecx,%eax
f010a12a:	01 c0                	add    %eax,%eax
f010a12c:	01 c8                	add    %ecx,%eax
f010a12e:	c1 e0 03             	shl    $0x3,%eax
f010a131:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a137:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13a:	01 c8                	add    %ecx,%eax
f010a13c:	83 c0 08             	add    $0x8,%eax
f010a13f:	89 42 14             	mov    %eax,0x14(%edx)
f010a142:	eb 29                	jmp    f010a16d <program_segment_alloc_map_copy_workingset+0x3e4>
f010a144:	8b 45 08             	mov    0x8(%ebp),%eax
f010a147:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a14d:	89 d0                	mov    %edx,%eax
f010a14f:	01 c0                	add    %eax,%eax
f010a151:	01 d0                	add    %edx,%eax
f010a153:	c1 e0 03             	shl    $0x3,%eax
f010a156:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a15c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15f:	01 d0                	add    %edx,%eax
f010a161:	8d 50 08             	lea    0x8(%eax),%edx
f010a164:	8b 45 08             	mov    0x8(%ebp),%eax
f010a167:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a16d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a170:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a176:	89 d0                	mov    %edx,%eax
f010a178:	01 c0                	add    %eax,%eax
f010a17a:	01 d0                	add    %edx,%eax
f010a17c:	c1 e0 03             	shl    $0x3,%eax
f010a17f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a185:	8b 45 08             	mov    0x8(%ebp),%eax
f010a188:	01 d0                	add    %edx,%eax
f010a18a:	8d 50 08             	lea    0x8(%eax),%edx
f010a18d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a190:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a196:	8b 45 08             	mov    0x8(%ebp),%eax
f010a199:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a19f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1a2:	89 d0                	mov    %edx,%eax
f010a1a4:	01 c0                	add    %eax,%eax
f010a1a6:	01 d0                	add    %edx,%eax
f010a1a8:	c1 e0 03             	shl    $0x3,%eax
f010a1ab:	01 c8                	add    %ecx,%eax
f010a1ad:	05 cc 00 00 00       	add    $0xcc,%eax
f010a1b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a1c1:	8d 50 01             	lea    0x1(%eax),%edx
f010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c7:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a1cd:	e9 32 01 00 00       	jmp    f010a304 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d5:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1db:	89 d0                	mov    %edx,%eax
f010a1dd:	01 c0                	add    %eax,%eax
f010a1df:	01 d0                	add    %edx,%eax
f010a1e1:	c1 e0 03             	shl    $0x3,%eax
f010a1e4:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a1ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ed:	01 d0                	add    %edx,%eax
f010a1ef:	83 c0 08             	add    $0x8,%eax
f010a1f2:	85 c0                	test   %eax,%eax
f010a1f4:	75 17                	jne    f010a20d <program_segment_alloc_map_copy_workingset+0x484>
f010a1f6:	83 ec 04             	sub    $0x4,%esp
f010a1f9:	68 78 2a 13 f0       	push   $0xf0132a78
f010a1fe:	68 a8 02 00 00       	push   $0x2a8
f010a203:	68 f7 29 13 f0       	push   $0xf01329f7
f010a208:	e8 a3 5f ff ff       	call   f01001b0 <_panic>
f010a20d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a210:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a216:	8b 45 08             	mov    0x8(%ebp),%eax
f010a219:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a21f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a222:	89 d0                	mov    %edx,%eax
f010a224:	01 c0                	add    %eax,%eax
f010a226:	01 d0                	add    %edx,%eax
f010a228:	c1 e0 03             	shl    $0x3,%eax
f010a22b:	01 d8                	add    %ebx,%eax
f010a22d:	05 c8 00 00 00       	add    $0xc8,%eax
f010a232:	89 08                	mov    %ecx,(%eax)
f010a234:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a237:	89 d0                	mov    %edx,%eax
f010a239:	01 c0                	add    %eax,%eax
f010a23b:	01 d0                	add    %edx,%eax
f010a23d:	c1 e0 03             	shl    $0x3,%eax
f010a240:	01 c8                	add    %ecx,%eax
f010a242:	05 c8 00 00 00       	add    $0xc8,%eax
f010a247:	8b 00                	mov    (%eax),%eax
f010a249:	85 c0                	test   %eax,%eax
f010a24b:	74 2e                	je     f010a27b <program_segment_alloc_map_copy_workingset+0x4f2>
f010a24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a250:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a256:	8b 45 08             	mov    0x8(%ebp),%eax
f010a259:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a25f:	89 c8                	mov    %ecx,%eax
f010a261:	01 c0                	add    %eax,%eax
f010a263:	01 c8                	add    %ecx,%eax
f010a265:	c1 e0 03             	shl    $0x3,%eax
f010a268:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a26e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a271:	01 c8                	add    %ecx,%eax
f010a273:	83 c0 08             	add    $0x8,%eax
f010a276:	89 42 14             	mov    %eax,0x14(%edx)
f010a279:	eb 29                	jmp    f010a2a4 <program_segment_alloc_map_copy_workingset+0x51b>
f010a27b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a284:	89 d0                	mov    %edx,%eax
f010a286:	01 c0                	add    %eax,%eax
f010a288:	01 d0                	add    %edx,%eax
f010a28a:	c1 e0 03             	shl    $0x3,%eax
f010a28d:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	01 d0                	add    %edx,%eax
f010a298:	8d 50 08             	lea    0x8(%eax),%edx
f010a29b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29e:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a2a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a7:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2ad:	89 d0                	mov    %edx,%eax
f010a2af:	01 c0                	add    %eax,%eax
f010a2b1:	01 d0                	add    %edx,%eax
f010a2b3:	c1 e0 03             	shl    $0x3,%eax
f010a2b6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2bf:	01 d0                	add    %edx,%eax
f010a2c1:	8d 50 08             	lea    0x8(%eax),%edx
f010a2c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c7:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2d6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2d9:	89 d0                	mov    %edx,%eax
f010a2db:	01 c0                	add    %eax,%eax
f010a2dd:	01 d0                	add    %edx,%eax
f010a2df:	c1 e0 03             	shl    $0x3,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	05 cc 00 00 00       	add    $0xcc,%eax
f010a2e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f2:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a2f8:	8d 50 01             	lea    0x1(%eax),%edx
f010a2fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fe:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a304:	8b 45 08             	mov    0x8(%ebp),%eax
f010a307:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a30d:	8d 50 01             	lea    0x1(%eax),%edx
f010a310:	8b 45 08             	mov    0x8(%ebp),%eax
f010a313:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a319:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31c:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a322:	8b 55 08             	mov    0x8(%ebp),%edx
f010a325:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a32b:	ba 00 00 00 00       	mov    $0x0,%edx
f010a330:	f7 f1                	div    %ecx
f010a332:	8b 45 08             	mov    0x8(%ebp),%eax
f010a335:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a33e:	c1 e8 16             	shr    $0x16,%eax
f010a341:	89 c2                	mov    %eax,%edx
f010a343:	8b 45 18             	mov    0x18(%ebp),%eax
f010a346:	8b 00                	mov    (%eax),%eax
f010a348:	39 c2                	cmp    %eax,%edx
f010a34a:	0f 84 d3 00 00 00    	je     f010a423 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a350:	8b 45 08             	mov    0x8(%ebp),%eax
f010a353:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a359:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a35c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a35f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a362:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a367:	89 c1                	mov    %eax,%ecx
f010a369:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a36c:	89 d0                	mov    %edx,%eax
f010a36e:	01 c0                	add    %eax,%eax
f010a370:	01 d0                	add    %edx,%eax
f010a372:	c1 e0 03             	shl    $0x3,%eax
f010a375:	01 d8                	add    %ebx,%eax
f010a377:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a37c:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a381:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a387:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a38a:	89 d0                	mov    %edx,%eax
f010a38c:	01 c0                	add    %eax,%eax
f010a38e:	01 d0                	add    %edx,%eax
f010a390:	c1 e0 03             	shl    $0x3,%eax
f010a393:	01 c8                	add    %ecx,%eax
f010a395:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a39a:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a39d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a0:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a3a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3a9:	89 d0                	mov    %edx,%eax
f010a3ab:	01 c0                	add    %eax,%eax
f010a3ad:	01 d0                	add    %edx,%eax
f010a3af:	c1 e0 03             	shl    $0x3,%eax
f010a3b2:	01 c8                	add    %ecx,%eax
f010a3b4:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a3b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a3bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c2:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3c8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ce:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a3d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3dd:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3e7:	f7 f1                	div    %ecx
f010a3e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ec:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a3f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f5:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3fb:	85 c0                	test   %eax,%eax
f010a3fd:	75 17                	jne    f010a416 <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a3ff:	83 ec 04             	sub    $0x4,%esp
f010a402:	68 ac 2a 13 f0       	push   $0xf0132aac
f010a407:	68 c3 02 00 00       	push   $0x2c3
f010a40c:	68 f7 29 13 f0       	push   $0xf01329f7
f010a411:	e8 9a 5d ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a419:	c1 e8 16             	shr    $0x16,%eax
f010a41c:	89 c2                	mov    %eax,%edx
f010a41e:	8b 45 18             	mov    0x18(%ebp),%eax
f010a421:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a423:	8b 45 10             	mov    0x10(%ebp),%eax
f010a426:	8b 00                	mov    (%eax),%eax
f010a428:	8d 50 01             	lea    0x1(%eax),%edx
f010a42b:	8b 45 10             	mov    0x10(%ebp),%eax
f010a42e:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a430:	ff 45 f0             	incl   -0x10(%ebp)
f010a433:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a43a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a43d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a440:	73 0c                	jae    f010a44e <program_segment_alloc_map_copy_workingset+0x6c5>
f010a442:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a445:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a448:	0f 82 e8 f9 ff ff    	jb     f0109e36 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a44e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a451:	8b 00                	mov    (%eax),%eax
f010a453:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a456:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a459:	8b 40 0c             	mov    0xc(%eax),%eax
f010a45c:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a45f:	eb 10                	jmp    f010a471 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a461:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a464:	8a 10                	mov    (%eax),%dl
f010a466:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a469:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a46b:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a46e:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a471:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a474:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a477:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a47a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a47f:	89 c2                	mov    %eax,%edx
f010a481:	8b 45 10             	mov    0x10(%ebp),%eax
f010a484:	8b 00                	mov    (%eax),%eax
f010a486:	c1 e0 0c             	shl    $0xc,%eax
f010a489:	01 c2                	add    %eax,%edx
f010a48b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a48e:	39 c2                	cmp    %eax,%edx
f010a490:	76 1d                	jbe    f010a4af <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a492:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a495:	8b 50 04             	mov    0x4(%eax),%edx
f010a498:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a49b:	01 c2                	add    %eax,%edx
f010a49d:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a4a0:	39 c2                	cmp    %eax,%edx
f010a4a2:	77 bd                	ja     f010a461 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4a4:	eb 09                	jmp    f010a4af <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a4a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4a9:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a4ac:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a4b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a4b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a4b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a4bd:	89 c2                	mov    %eax,%edx
f010a4bf:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4c2:	8b 00                	mov    (%eax),%eax
f010a4c4:	c1 e0 0c             	shl    $0xc,%eax
f010a4c7:	01 c2                	add    %eax,%edx
f010a4c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4cc:	39 c2                	cmp    %eax,%edx
f010a4ce:	77 d6                	ja     f010a4a6 <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a4d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a4d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a4d8:	c9                   	leave  
f010a4d9:	c3                   	ret    

f010a4da <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a4da:	55                   	push   %ebp
f010a4db:	89 e5                	mov    %esp,%ebp
f010a4dd:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a4e0:	83 ec 0c             	sub    $0xc,%esp
f010a4e3:	68 00 10 00 00       	push   $0x1000
f010a4e8:	e8 72 da ff ff       	call   f0107f5f <kmalloc>
f010a4ed:	83 c4 10             	add    $0x10,%esp
f010a4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a4f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4f7:	75 17                	jne    f010a510 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a4f9:	83 ec 04             	sub    $0x4,%esp
f010a4fc:	68 4f 2b 13 f0       	push   $0xf0132b4f
f010a501:	68 ff 02 00 00       	push   $0x2ff
f010a506:	68 f7 29 13 f0       	push   $0xf01329f7
f010a50b:	e8 a0 5c ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a510:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a513:	c9                   	leave  
f010a514:	c3                   	ret    

f010a515 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a515:	55                   	push   %ebp
f010a516:	89 e5                	mov    %esp,%ebp
f010a518:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	panic("not implemented yet");
f010a51b:	83 ec 04             	sub    $0x4,%esp
f010a51e:	68 6c 2b 13 f0       	push   $0xf0132b6c
f010a523:	68 0e 03 00 00       	push   $0x30e
f010a528:	68 f7 29 13 f0       	push   $0xf01329f7
f010a52d:	e8 7e 5c ff ff       	call   f01001b0 <_panic>

f010a532 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a532:	55                   	push   %ebp
f010a533:	89 e5                	mov    %esp,%ebp
f010a535:	53                   	push   %ebx
f010a536:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a539:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a53f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a545:	8b 45 08             	mov    0x8(%ebp),%eax
f010a548:	8b 55 10             	mov    0x10(%ebp),%edx
f010a54b:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a551:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a558:	eb 1a                	jmp    f010a574 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a55a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a563:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a566:	c1 e2 02             	shl    $0x2,%edx
f010a569:	01 d0                	add    %edx,%eax
f010a56b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a571:	ff 45 f4             	incl   -0xc(%ebp)
f010a574:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a577:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a57c:	76 dc                	jbe    f010a55a <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a57e:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a585:	eb 25                	jmp    f010a5ac <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a587:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a593:	c1 e2 02             	shl    $0x2,%edx
f010a596:	01 c2                	add    %eax,%edx
f010a598:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f010a59d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a5a0:	c1 e1 02             	shl    $0x2,%ecx
f010a5a3:	01 c8                	add    %ecx,%eax
f010a5a5:	8b 00                	mov    (%eax),%eax
f010a5a7:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a5a9:	ff 45 f4             	incl   -0xc(%ebp)
f010a5ac:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a5b3:	7e d2                	jle    f010a587 <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b8:	8b 15 50 32 25 f0    	mov    0xf0253250,%edx
f010a5be:	29 d0                	sub    %edx,%eax
f010a5c0:	c1 f8 05             	sar    $0x5,%eax
f010a5c3:	89 c2                	mov    %eax,%edx
f010a5c5:	89 d0                	mov    %edx,%eax
f010a5c7:	c1 e0 03             	shl    $0x3,%eax
f010a5ca:	01 d0                	add    %edx,%eax
f010a5cc:	01 c0                	add    %eax,%eax
f010a5ce:	01 d0                	add    %edx,%eax
f010a5d0:	c1 e0 06             	shl    $0x6,%eax
f010a5d3:	01 d0                	add    %edx,%eax
f010a5d5:	89 c1                	mov    %eax,%ecx
f010a5d7:	c1 e1 04             	shl    $0x4,%ecx
f010a5da:	01 c8                	add    %ecx,%eax
f010a5dc:	c1 e0 03             	shl    $0x3,%eax
f010a5df:	01 d0                	add    %edx,%eax
f010a5e1:	01 c0                	add    %eax,%eax
f010a5e3:	01 d0                	add    %edx,%eax
f010a5e5:	89 c1                	mov    %eax,%ecx
f010a5e7:	c1 e1 04             	shl    $0x4,%ecx
f010a5ea:	01 c8                	add    %ecx,%eax
f010a5ec:	c1 e0 03             	shl    $0x3,%eax
f010a5ef:	01 d0                	add    %edx,%eax
f010a5f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a5f8:	01 d0                	add    %edx,%eax
f010a5fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a5fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a600:	89 d0                	mov    %edx,%eax
f010a602:	01 c0                	add    %eax,%eax
f010a604:	01 d0                	add    %edx,%eax
f010a606:	01 c0                	add    %eax,%eax
f010a608:	01 d0                	add    %edx,%eax
f010a60a:	c1 e0 02             	shl    $0x2,%eax
f010a60d:	01 d0                	add    %edx,%eax
f010a60f:	01 c0                	add    %eax,%eax
f010a611:	01 d0                	add    %edx,%eax
f010a613:	c1 e0 02             	shl    $0x2,%eax
f010a616:	01 d0                	add    %edx,%eax
f010a618:	c1 e0 02             	shl    $0x2,%eax
f010a61b:	01 d0                	add    %edx,%eax
f010a61d:	c1 e0 02             	shl    $0x2,%eax
f010a620:	01 d0                	add    %edx,%eax
f010a622:	c1 e0 05             	shl    $0x5,%eax
f010a625:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a62a:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a630:	8b 45 08             	mov    0x8(%ebp),%eax
f010a633:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a639:	83 ec 0c             	sub    $0xc,%esp
f010a63c:	6a 02                	push   $0x2
f010a63e:	e8 0d 31 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f010a643:	83 c4 10             	add    $0x10,%esp
f010a646:	85 c0                	test   %eax,%eax
f010a648:	0f 84 34 01 00 00    	je     f010a782 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a64e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a655:	e9 14 01 00 00       	jmp    f010a76e <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a65a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a65d:	89 d0                	mov    %edx,%eax
f010a65f:	01 c0                	add    %eax,%eax
f010a661:	01 d0                	add    %edx,%eax
f010a663:	c1 e0 03             	shl    $0x3,%eax
f010a666:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a66c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66f:	01 d0                	add    %edx,%eax
f010a671:	83 c0 08             	add    $0x8,%eax
f010a674:	85 c0                	test   %eax,%eax
f010a676:	75 17                	jne    f010a68f <initialize_environment+0x15d>
f010a678:	83 ec 04             	sub    $0x4,%esp
f010a67b:	68 78 2a 13 f0       	push   $0xf0132a78
f010a680:	68 45 03 00 00       	push   $0x345
f010a685:	68 f7 29 13 f0       	push   $0xf01329f7
f010a68a:	e8 21 5b ff ff       	call   f01001b0 <_panic>
f010a68f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a692:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a698:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a69b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a69e:	89 c8                	mov    %ecx,%eax
f010a6a0:	01 c0                	add    %eax,%eax
f010a6a2:	01 c8                	add    %ecx,%eax
f010a6a4:	c1 e0 03             	shl    $0x3,%eax
f010a6a7:	01 d8                	add    %ebx,%eax
f010a6a9:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6ae:	89 10                	mov    %edx,(%eax)
f010a6b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a6b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6b6:	89 d0                	mov    %edx,%eax
f010a6b8:	01 c0                	add    %eax,%eax
f010a6ba:	01 d0                	add    %edx,%eax
f010a6bc:	c1 e0 03             	shl    $0x3,%eax
f010a6bf:	01 c8                	add    %ecx,%eax
f010a6c1:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6c6:	8b 00                	mov    (%eax),%eax
f010a6c8:	85 c0                	test   %eax,%eax
f010a6ca:	74 28                	je     f010a6f4 <initialize_environment+0x1c2>
f010a6cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6cf:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a6d5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6d8:	89 c8                	mov    %ecx,%eax
f010a6da:	01 c0                	add    %eax,%eax
f010a6dc:	01 c8                	add    %ecx,%eax
f010a6de:	c1 e0 03             	shl    $0x3,%eax
f010a6e1:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a6e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ea:	01 c8                	add    %ecx,%eax
f010a6ec:	83 c0 08             	add    $0x8,%eax
f010a6ef:	89 42 14             	mov    %eax,0x14(%edx)
f010a6f2:	eb 23                	jmp    f010a717 <initialize_environment+0x1e5>
f010a6f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6f7:	89 d0                	mov    %edx,%eax
f010a6f9:	01 c0                	add    %eax,%eax
f010a6fb:	01 d0                	add    %edx,%eax
f010a6fd:	c1 e0 03             	shl    $0x3,%eax
f010a700:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a706:	8b 45 08             	mov    0x8(%ebp),%eax
f010a709:	01 d0                	add    %edx,%eax
f010a70b:	8d 50 08             	lea    0x8(%eax),%edx
f010a70e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a711:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a717:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a71a:	89 d0                	mov    %edx,%eax
f010a71c:	01 c0                	add    %eax,%eax
f010a71e:	01 d0                	add    %edx,%eax
f010a720:	c1 e0 03             	shl    $0x3,%eax
f010a723:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a729:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72c:	01 d0                	add    %edx,%eax
f010a72e:	8d 50 08             	lea    0x8(%eax),%edx
f010a731:	8b 45 08             	mov    0x8(%ebp),%eax
f010a734:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a73a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a73d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a740:	89 d0                	mov    %edx,%eax
f010a742:	01 c0                	add    %eax,%eax
f010a744:	01 d0                	add    %edx,%eax
f010a746:	c1 e0 03             	shl    $0x3,%eax
f010a749:	01 c8                	add    %ecx,%eax
f010a74b:	05 cc 00 00 00       	add    $0xcc,%eax
f010a750:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a756:	8b 45 08             	mov    0x8(%ebp),%eax
f010a759:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a75f:	8d 50 01             	lea    0x1(%eax),%edx
f010a762:	8b 45 08             	mov    0x8(%ebp),%eax
f010a765:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a76b:	ff 45 f0             	incl   -0x10(%ebp)
f010a76e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a771:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a777:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a77a:	39 c2                	cmp    %eax,%edx
f010a77c:	0f 87 d8 fe ff ff    	ja     f010a65a <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a782:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a789:	eb 54                	jmp    f010a7df <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a78b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a78e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a791:	89 d0                	mov    %edx,%eax
f010a793:	01 c0                	add    %eax,%eax
f010a795:	01 d0                	add    %edx,%eax
f010a797:	c1 e0 03             	shl    $0x3,%eax
f010a79a:	01 c8                	add    %ecx,%eax
f010a79c:	05 b8 00 00 00       	add    $0xb8,%eax
f010a7a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a7a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ad:	89 d0                	mov    %edx,%eax
f010a7af:	01 c0                	add    %eax,%eax
f010a7b1:	01 d0                	add    %edx,%eax
f010a7b3:	c1 e0 03             	shl    $0x3,%eax
f010a7b6:	01 c8                	add    %ecx,%eax
f010a7b8:	05 bc 00 00 00       	add    $0xbc,%eax
f010a7bd:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7c0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7c6:	89 d0                	mov    %edx,%eax
f010a7c8:	01 c0                	add    %eax,%eax
f010a7ca:	01 d0                	add    %edx,%eax
f010a7cc:	c1 e0 03             	shl    $0x3,%eax
f010a7cf:	01 c8                	add    %ecx,%eax
f010a7d1:	05 c0 00 00 00       	add    $0xc0,%eax
f010a7d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7dc:	ff 45 f4             	incl   -0xc(%ebp)
f010a7df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7e2:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a7e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7eb:	39 c2                	cmp    %eax,%edx
f010a7ed:	77 9c                	ja     f010a78b <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f2:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a7f9:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a803:	eb 54                	jmp    f010a859 <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a805:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a808:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a80b:	89 d0                	mov    %edx,%eax
f010a80d:	01 c0                	add    %eax,%eax
f010a80f:	01 d0                	add    %edx,%eax
f010a811:	c1 e0 03             	shl    $0x3,%eax
f010a814:	01 c8                	add    %ecx,%eax
f010a816:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a81b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a821:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a824:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a827:	89 d0                	mov    %edx,%eax
f010a829:	01 c0                	add    %eax,%eax
f010a82b:	01 d0                	add    %edx,%eax
f010a82d:	c1 e0 03             	shl    $0x3,%eax
f010a830:	01 c8                	add    %ecx,%eax
f010a832:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a837:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a83a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a83d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a840:	89 d0                	mov    %edx,%eax
f010a842:	01 c0                	add    %eax,%eax
f010a844:	01 d0                	add    %edx,%eax
f010a846:	c1 e0 03             	shl    $0x3,%eax
f010a849:	01 c8                	add    %ecx,%eax
f010a84b:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a850:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a856:	ff 45 f4             	incl   -0xc(%ebp)
f010a859:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a85d:	7e a6                	jle    f010a805 <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a85f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a862:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a869:	00 00 00 

	e->pageFaultsCounter=0;
f010a86c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86f:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a876:	00 00 00 
	e->tableFaultsCounter=0;
f010a879:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87c:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a883:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a886:	8b 45 08             	mov    0x8(%ebp),%eax
f010a889:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a890:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a893:	8b 45 08             	mov    0x8(%ebp),%eax
f010a896:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a89d:	00 00 00 

	e->nModifiedPages=0;
f010a8a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a3:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a8aa:	00 00 00 
	e->nNotModifiedPages=0;
f010a8ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b0:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a8b7:	00 00 00 
	e->nClocks = 0;
f010a8ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8bd:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a8c4:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ca:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a8d1:	00 00 00 
	e->nPageOut = 0;
f010a8d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d7:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a8de:	00 00 00 
	e->nNewPageAdded = 0;
f010a8e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e4:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a8eb:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a8ee:	83 ec 04             	sub    $0x4,%esp
f010a8f1:	68 00 00 00 82       	push   $0x82000000
f010a8f6:	68 00 00 00 80       	push   $0x80000000
f010a8fb:	ff 75 08             	pushl  0x8(%ebp)
f010a8fe:	e8 12 fc ff ff       	call   f010a515 <initialize_uheap_dynamic_allocator>
f010a903:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a906:	83 ec 0c             	sub    $0xc,%esp
f010a909:	ff 75 08             	pushl  0x8(%ebp)
f010a90c:	e8 09 00 00 00       	call   f010a91a <complete_environment_initialization>
f010a911:	83 c4 10             	add    $0x10,%esp
}
f010a914:	90                   	nop
f010a915:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a918:	c9                   	leave  
f010a919:	c3                   	ret    

f010a91a <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a91a:	55                   	push   %ebp
f010a91b:	89 e5                	mov    %esp,%ebp
f010a91d:	53                   	push   %ebx
f010a91e:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a921:	8b 45 08             	mov    0x8(%ebp),%eax
f010a924:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a92a:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a930:	8b 45 08             	mov    0x8(%ebp),%eax
f010a933:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a939:	83 c8 03             	or     $0x3,%eax
f010a93c:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a93e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a941:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a947:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a94d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a950:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a956:	83 c8 05             	or     $0x5,%eax
f010a959:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a95b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95e:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a965:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a968:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96b:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a972:	00 00 00 
	e->disk_env_tabledir = 0;
f010a975:	8b 45 08             	mov    0x8(%ebp),%eax
f010a978:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a97f:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a982:	8b 45 08             	mov    0x8(%ebp),%eax
f010a985:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a98c:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a98f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a992:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a995:	83 ec 0c             	sub    $0xc,%esp
f010a998:	6a 08                	push   $0x8
f010a99a:	e8 2f 32 02 00       	call   f012dbce <log2_ceil>
f010a99f:	83 c4 10             	add    $0x10,%esp
f010a9a2:	ba 01 00 00 00       	mov    $0x1,%edx
f010a9a7:	88 c1                	mov    %al,%cl
f010a9a9:	d3 e2                	shl    %cl,%edx
f010a9ab:	89 d0                	mov    %edx,%eax
f010a9ad:	01 d8                	add    %ebx,%eax
f010a9af:	89 c3                	mov    %eax,%ebx
f010a9b1:	83 ec 0c             	sub    $0xc,%esp
f010a9b4:	6a 08                	push   $0x8
f010a9b6:	e8 de 31 02 00       	call   f012db99 <nearest_pow2_ceil>
f010a9bb:	83 c4 10             	add    $0x10,%esp
f010a9be:	f7 d8                	neg    %eax
f010a9c0:	21 d8                	and    %ebx,%eax
f010a9c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a9c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9c9:	7f 1b                	jg     f010a9e6 <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a9cb:	83 ec 0c             	sub    $0xc,%esp
f010a9ce:	6a 08                	push   $0x8
f010a9d0:	e8 f9 31 02 00       	call   f012dbce <log2_ceil>
f010a9d5:	83 c4 10             	add    $0x10,%esp
f010a9d8:	ba 01 00 00 00       	mov    $0x1,%edx
f010a9dd:	88 c1                	mov    %al,%cl
f010a9df:	d3 e2                	shl    %cl,%edx
f010a9e1:	89 d0                	mov    %edx,%eax
f010a9e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a9e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e9:	8b 15 50 32 25 f0    	mov    0xf0253250,%edx
f010a9ef:	29 d0                	sub    %edx,%eax
f010a9f1:	c1 f8 05             	sar    $0x5,%eax
f010a9f4:	89 c2                	mov    %eax,%edx
f010a9f6:	89 d0                	mov    %edx,%eax
f010a9f8:	c1 e0 03             	shl    $0x3,%eax
f010a9fb:	01 d0                	add    %edx,%eax
f010a9fd:	01 c0                	add    %eax,%eax
f010a9ff:	01 d0                	add    %edx,%eax
f010aa01:	c1 e0 06             	shl    $0x6,%eax
f010aa04:	01 d0                	add    %edx,%eax
f010aa06:	89 c1                	mov    %eax,%ecx
f010aa08:	c1 e1 04             	shl    $0x4,%ecx
f010aa0b:	01 c8                	add    %ecx,%eax
f010aa0d:	c1 e0 03             	shl    $0x3,%eax
f010aa10:	01 d0                	add    %edx,%eax
f010aa12:	01 c0                	add    %eax,%eax
f010aa14:	01 d0                	add    %edx,%eax
f010aa16:	89 c1                	mov    %eax,%ecx
f010aa18:	c1 e1 04             	shl    $0x4,%ecx
f010aa1b:	01 c8                	add    %ecx,%eax
f010aa1d:	c1 e0 03             	shl    $0x3,%eax
f010aa20:	01 d0                	add    %edx,%eax
f010aa22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010aa29:	01 d0                	add    %edx,%eax
f010aa2b:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aa2e:	89 c2                	mov    %eax,%edx
f010aa30:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa33:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aa36:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010aa3b:	85 c0                	test   %eax,%eax
f010aa3d:	75 0c                	jne    f010aa4b <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010aa3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa42:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aa49:	eb 0e                	jmp    f010aa59 <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aa4b:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010aa50:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa53:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa56:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa59:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5c:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa63:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa66:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aa6d:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa70:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa73:	83 ec 04             	sub    $0x4,%esp
f010aa76:	6a 44                	push   $0x44
f010aa78:	6a 00                	push   $0x0
f010aa7a:	50                   	push   %eax
f010aa7b:	e8 7c 45 02 00       	call   f012effc <memset>
f010aa80:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa83:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa86:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8f:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa95:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa98:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa1:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aaa8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaab:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aab1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab4:	8b 40 38             	mov    0x38(%eax),%eax
f010aab7:	80 cc 02             	or     $0x2,%ah
f010aaba:	89 c2                	mov    %eax,%edx
f010aabc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aabf:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aac2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aac6:	75 17                	jne    f010aadf <complete_environment_initialization+0x1c5>
f010aac8:	83 ec 04             	sub    $0x4,%esp
f010aacb:	68 59 2a 13 f0       	push   $0xf0132a59
f010aad0:	68 b1 03 00 00       	push   $0x3b1
f010aad5:	68 f7 29 13 f0       	push   $0xf01329f7
f010aada:	e8 d1 56 ff ff       	call   f01001b0 <_panic>
f010aadf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae2:	8b 40 44             	mov    0x44(%eax),%eax
f010aae5:	85 c0                	test   %eax,%eax
f010aae7:	74 11                	je     f010aafa <complete_environment_initialization+0x1e0>
f010aae9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaec:	8b 40 44             	mov    0x44(%eax),%eax
f010aaef:	8b 55 08             	mov    0x8(%ebp),%edx
f010aaf2:	8b 52 48             	mov    0x48(%edx),%edx
f010aaf5:	89 50 48             	mov    %edx,0x48(%eax)
f010aaf8:	eb 0b                	jmp    f010ab05 <complete_environment_initialization+0x1eb>
f010aafa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aafd:	8b 40 48             	mov    0x48(%eax),%eax
f010ab00:	a3 5c 32 25 f0       	mov    %eax,0xf025325c
f010ab05:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab08:	8b 40 48             	mov    0x48(%eax),%eax
f010ab0b:	85 c0                	test   %eax,%eax
f010ab0d:	74 11                	je     f010ab20 <complete_environment_initialization+0x206>
f010ab0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab12:	8b 40 48             	mov    0x48(%eax),%eax
f010ab15:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab18:	8b 52 44             	mov    0x44(%edx),%edx
f010ab1b:	89 50 44             	mov    %edx,0x44(%eax)
f010ab1e:	eb 0b                	jmp    f010ab2b <complete_environment_initialization+0x211>
f010ab20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab23:	8b 40 44             	mov    0x44(%eax),%eax
f010ab26:	a3 58 32 25 f0       	mov    %eax,0xf0253258
f010ab2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab2e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ab35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab38:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ab3f:	a1 64 32 25 f0       	mov    0xf0253264,%eax
f010ab44:	48                   	dec    %eax
f010ab45:	a3 64 32 25 f0       	mov    %eax,0xf0253264
	return ;
f010ab4a:	90                   	nop
}
f010ab4b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ab4e:	c9                   	leave  
f010ab4f:	c3                   	ret    

f010ab50 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab50:	55                   	push   %ebp
f010ab51:	89 e5                	mov    %esp,%ebp
f010ab53:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab56:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab59:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5f:	8b 00                	mov    (%eax),%eax
f010ab61:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab66:	74 17                	je     f010ab7f <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab68:	83 ec 04             	sub    $0x4,%esp
f010ab6b:	68 80 2b 13 f0       	push   $0xf0132b80
f010ab70:	68 bd 03 00 00       	push   $0x3bd
f010ab75:	68 f7 29 13 f0       	push   $0xf01329f7
f010ab7a:	e8 31 56 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab82:	8b 40 18             	mov    0x18(%eax),%eax
f010ab85:	89 c2                	mov    %eax,%edx
f010ab87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8a:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab8d:	90                   	nop
f010ab8e:	c9                   	leave  
f010ab8f:	c3                   	ret    

f010ab90 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ab90:	55                   	push   %ebp
f010ab91:	89 e5                	mov    %esp,%ebp
f010ab93:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ab96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab99:	8b 40 10             	mov    0x10(%eax),%eax
f010ab9c:	8d 48 01             	lea    0x1(%eax),%ecx
f010ab9f:	8b 55 08             	mov    0x8(%ebp),%edx
f010aba2:	89 4a 10             	mov    %ecx,0x10(%edx)
f010aba5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010aba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010abae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abb1:	8b 00                	mov    (%eax),%eax
f010abb3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010abb8:	74 17                	je     f010abd1 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010abba:	83 ec 04             	sub    $0x4,%esp
f010abbd:	68 80 2b 13 f0       	push   $0xf0132b80
f010abc2:	68 cc 03 00 00       	push   $0x3cc
f010abc7:	68 f7 29 13 f0       	push   $0xf01329f7
f010abcc:	e8 df 55 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010abd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abd4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010abd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abda:	01 d0                	add    %edx,%eax
f010abdc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010abdf:	eb 0f                	jmp    f010abf0 <PROGRAM_SEGMENT_NEXT+0x60>
f010abe1:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe4:	8b 40 10             	mov    0x10(%eax),%eax
f010abe7:	8d 50 01             	lea    0x1(%eax),%edx
f010abea:	8b 45 08             	mov    0x8(%ebp),%eax
f010abed:	89 50 10             	mov    %edx,0x10(%eax)
f010abf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf3:	8b 40 10             	mov    0x10(%eax),%eax
f010abf6:	c1 e0 05             	shl    $0x5,%eax
f010abf9:	89 c2                	mov    %eax,%edx
f010abfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abfe:	01 d0                	add    %edx,%eax
f010ac00:	8b 00                	mov    (%eax),%eax
f010ac02:	83 f8 01             	cmp    $0x1,%eax
f010ac05:	74 13                	je     f010ac1a <PROGRAM_SEGMENT_NEXT+0x8a>
f010ac07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0a:	8b 50 10             	mov    0x10(%eax),%edx
f010ac0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac10:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac13:	0f b7 c0             	movzwl %ax,%eax
f010ac16:	39 c2                	cmp    %eax,%edx
f010ac18:	72 c7                	jb     f010abe1 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ac1a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac1d:	8b 40 10             	mov    0x10(%eax),%eax
f010ac20:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ac23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac26:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac29:	0f b7 c0             	movzwl %ax,%eax
f010ac2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac2f:	7e 63                	jle    f010ac94 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac34:	c1 e0 05             	shl    $0x5,%eax
f010ac37:	89 c2                	mov    %eax,%edx
f010ac39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac3c:	01 d0                	add    %edx,%eax
f010ac3e:	8b 50 04             	mov    0x4(%eax),%edx
f010ac41:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac44:	01 c2                	add    %eax,%edx
f010ac46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac49:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ac4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac4e:	c1 e0 05             	shl    $0x5,%eax
f010ac51:	89 c2                	mov    %eax,%edx
f010ac53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac56:	01 d0                	add    %edx,%eax
f010ac58:	8b 50 14             	mov    0x14(%eax),%edx
f010ac5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac5e:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ac61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac64:	c1 e0 05             	shl    $0x5,%eax
f010ac67:	89 c2                	mov    %eax,%edx
f010ac69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac6c:	01 d0                	add    %edx,%eax
f010ac6e:	8b 50 10             	mov    0x10(%eax),%edx
f010ac71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac74:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ac77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac7a:	c1 e0 05             	shl    $0x5,%eax
f010ac7d:	89 c2                	mov    %eax,%edx
f010ac7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac82:	01 d0                	add    %edx,%eax
f010ac84:	8b 40 08             	mov    0x8(%eax),%eax
f010ac87:	89 c2                	mov    %eax,%edx
f010ac89:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8c:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ac8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac92:	eb 05                	jmp    f010ac99 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ac94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac99:	c9                   	leave  
f010ac9a:	c3                   	ret    

f010ac9b <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ac9b:	55                   	push   %ebp
f010ac9c:	89 e5                	mov    %esp,%ebp
f010ac9e:	57                   	push   %edi
f010ac9f:	56                   	push   %esi
f010aca0:	53                   	push   %ebx
f010aca1:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010aca4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010acab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010acb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acb4:	8b 00                	mov    (%eax),%eax
f010acb6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010acbb:	74 17                	je     f010acd4 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010acbd:	83 ec 04             	sub    $0x4,%esp
f010acc0:	68 80 2b 13 f0       	push   $0xf0132b80
f010acc5:	68 e8 03 00 00       	push   $0x3e8
f010acca:	68 f7 29 13 f0       	push   $0xf01329f7
f010accf:	e8 dc 54 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acd7:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acda:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acdd:	01 d0                	add    %edx,%eax
f010acdf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010ace2:	eb 07                	jmp    f010aceb <PROGRAM_SEGMENT_FIRST+0x50>
f010ace4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ace7:	40                   	inc    %eax
f010ace8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010aceb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acee:	c1 e0 05             	shl    $0x5,%eax
f010acf1:	89 c2                	mov    %eax,%edx
f010acf3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acf6:	01 d0                	add    %edx,%eax
f010acf8:	8b 00                	mov    (%eax),%eax
f010acfa:	83 f8 01             	cmp    $0x1,%eax
f010acfd:	74 10                	je     f010ad0f <PROGRAM_SEGMENT_FIRST+0x74>
f010acff:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010ad02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad05:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad08:	0f b7 c0             	movzwl %ax,%eax
f010ad0b:	39 c2                	cmp    %eax,%edx
f010ad0d:	72 d5                	jb     f010ace4 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010ad0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ad12:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010ad15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad18:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad1b:	0f b7 c0             	movzwl %ax,%eax
f010ad1e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ad21:	7e 68                	jle    f010ad8b <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad23:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad26:	c1 e0 05             	shl    $0x5,%eax
f010ad29:	89 c2                	mov    %eax,%edx
f010ad2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad2e:	01 d0                	add    %edx,%eax
f010ad30:	8b 50 04             	mov    0x4(%eax),%edx
f010ad33:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad36:	01 d0                	add    %edx,%eax
f010ad38:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ad3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad3e:	c1 e0 05             	shl    $0x5,%eax
f010ad41:	89 c2                	mov    %eax,%edx
f010ad43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad46:	01 d0                	add    %edx,%eax
f010ad48:	8b 40 14             	mov    0x14(%eax),%eax
f010ad4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ad4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad51:	c1 e0 05             	shl    $0x5,%eax
f010ad54:	89 c2                	mov    %eax,%edx
f010ad56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad59:	01 d0                	add    %edx,%eax
f010ad5b:	8b 40 10             	mov    0x10(%eax),%eax
f010ad5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ad61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad64:	c1 e0 05             	shl    $0x5,%eax
f010ad67:	89 c2                	mov    %eax,%edx
f010ad69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad6c:	01 d0                	add    %edx,%eax
f010ad6e:	8b 40 08             	mov    0x8(%eax),%eax
f010ad71:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ad74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad77:	89 c3                	mov    %eax,%ebx
f010ad79:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad7c:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad81:	89 df                	mov    %ebx,%edi
f010ad83:	89 c6                	mov    %eax,%esi
f010ad85:	89 d1                	mov    %edx,%ecx
f010ad87:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ad89:	eb 1c                	jmp    f010ada7 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ad8b:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ad92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad95:	89 c3                	mov    %eax,%ebx
f010ad97:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad9a:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad9f:	89 df                	mov    %ebx,%edi
f010ada1:	89 c6                	mov    %eax,%esi
f010ada3:	89 d1                	mov    %edx,%ecx
f010ada5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ada7:	8b 45 08             	mov    0x8(%ebp),%eax
f010adaa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010adad:	5b                   	pop    %ebx
f010adae:	5e                   	pop    %esi
f010adaf:	5f                   	pop    %edi
f010adb0:	5d                   	pop    %ebp
f010adb1:	c2 04 00             	ret    $0x4

f010adb4 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010adb4:	55                   	push   %ebp
f010adb5:	89 e5                	mov    %esp,%ebp
f010adb7:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010adba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010adc1:	a1 20 3b 25 f0       	mov    0xf0253b20,%eax
f010adc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010adc9:	e9 c6 00 00 00       	jmp    f010ae94 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010adce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010add1:	8b 40 10             	mov    0x10(%eax),%eax
f010add4:	3b 45 08             	cmp    0x8(%ebp),%eax
f010add7:	0f 85 af 00 00 00    	jne    f010ae8c <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010addd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ade0:	8b 50 0c             	mov    0xc(%eax),%edx
f010ade3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ade6:	8b 40 10             	mov    0x10(%eax),%eax
f010ade9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010adef:	83 ec 08             	sub    $0x8,%esp
f010adf2:	52                   	push   %edx
f010adf3:	50                   	push   %eax
f010adf4:	e8 33 d3 ff ff       	call   f010812c <pt_clear_page_table_entry>
f010adf9:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010adfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae00:	75 17                	jne    f010ae19 <cleanup_buffers+0x65>
f010ae02:	83 ec 04             	sub    $0x4,%esp
f010ae05:	68 59 2a 13 f0       	push   $0xf0132a59
f010ae0a:	68 0f 04 00 00       	push   $0x40f
f010ae0f:	68 f7 29 13 f0       	push   $0xf01329f7
f010ae14:	e8 97 53 ff ff       	call   f01001b0 <_panic>
f010ae19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae1c:	8b 00                	mov    (%eax),%eax
f010ae1e:	85 c0                	test   %eax,%eax
f010ae20:	74 10                	je     f010ae32 <cleanup_buffers+0x7e>
f010ae22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae25:	8b 00                	mov    (%eax),%eax
f010ae27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae2a:	8b 52 04             	mov    0x4(%edx),%edx
f010ae2d:	89 50 04             	mov    %edx,0x4(%eax)
f010ae30:	eb 0b                	jmp    f010ae3d <cleanup_buffers+0x89>
f010ae32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae35:	8b 40 04             	mov    0x4(%eax),%eax
f010ae38:	a3 24 3b 25 f0       	mov    %eax,0xf0253b24
f010ae3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae40:	8b 40 04             	mov    0x4(%eax),%eax
f010ae43:	85 c0                	test   %eax,%eax
f010ae45:	74 0f                	je     f010ae56 <cleanup_buffers+0xa2>
f010ae47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae4a:	8b 40 04             	mov    0x4(%eax),%eax
f010ae4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae50:	8b 12                	mov    (%edx),%edx
f010ae52:	89 10                	mov    %edx,(%eax)
f010ae54:	eb 0a                	jmp    f010ae60 <cleanup_buffers+0xac>
f010ae56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae59:	8b 00                	mov    (%eax),%eax
f010ae5b:	a3 20 3b 25 f0       	mov    %eax,0xf0253b20
f010ae60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae63:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ae69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ae73:	a1 2c 3b 25 f0       	mov    0xf0253b2c,%eax
f010ae78:	48                   	dec    %eax
f010ae79:	a3 2c 3b 25 f0       	mov    %eax,0xf0253b2c

			free_frame(ptr_fi);
f010ae7e:	83 ec 0c             	sub    $0xc,%esp
f010ae81:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae84:	e8 b4 c5 ff ff       	call   f010743d <free_frame>
f010ae89:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae8c:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f010ae91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae98:	74 07                	je     f010aea1 <cleanup_buffers+0xed>
f010ae9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae9d:	8b 00                	mov    (%eax),%eax
f010ae9f:	eb 05                	jmp    f010aea6 <cleanup_buffers+0xf2>
f010aea1:	b8 00 00 00 00       	mov    $0x0,%eax
f010aea6:	a3 28 3b 25 f0       	mov    %eax,0xf0253b28
f010aeab:	a1 28 3b 25 f0       	mov    0xf0253b28,%eax
f010aeb0:	85 c0                	test   %eax,%eax
f010aeb2:	0f 85 16 ff ff ff    	jne    f010adce <cleanup_buffers+0x1a>
f010aeb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aebc:	0f 85 0c ff ff ff    	jne    f010adce <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010aec2:	90                   	nop
f010aec3:	c9                   	leave  
f010aec4:	c3                   	ret    

f010aec5 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010aec5:	55                   	push   %ebp
f010aec6:	89 e5                	mov    %esp,%ebp
f010aec8:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010aecb:	83 ec 04             	sub    $0x4,%esp
f010aece:	68 96 2b 13 f0       	push   $0xf0132b96
f010aed3:	6a 0b                	push   $0xb
f010aed5:	68 a6 2b 13 f0       	push   $0xf0132ba6
f010aeda:	e8 d1 52 ff ff       	call   f01001b0 <_panic>

f010aedf <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010aedf:	55                   	push   %ebp
f010aee0:	89 e5                	mov    %esp,%ebp
f010aee2:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aee5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aeec:	eb 29                	jmp    f010af17 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010aeee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aef1:	89 d0                	mov    %edx,%eax
f010aef3:	01 c0                	add    %eax,%eax
f010aef5:	01 d0                	add    %edx,%eax
f010aef7:	c1 e0 02             	shl    $0x2,%eax
f010aefa:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
f010aeff:	8b 00                	mov    (%eax),%eax
f010af01:	83 ec 08             	sub    $0x8,%esp
f010af04:	50                   	push   %eax
f010af05:	ff 75 08             	pushl  0x8(%ebp)
f010af08:	e8 0d 40 02 00       	call   f012ef1a <strcmp>
f010af0d:	83 c4 10             	add    $0x10,%esp
f010af10:	85 c0                	test   %eax,%eax
f010af12:	74 0f                	je     f010af23 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af14:	ff 45 f4             	incl   -0xc(%ebp)
f010af17:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010af1c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af1f:	7c cd                	jl     f010aeee <get_user_program_info+0xf>
f010af21:	eb 01                	jmp    f010af24 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010af23:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af24:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010af29:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af2c:	75 1a                	jne    f010af48 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010af2e:	83 ec 08             	sub    $0x8,%esp
f010af31:	ff 75 08             	pushl  0x8(%ebp)
f010af34:	68 32 2d 13 f0       	push   $0xf0132d32
f010af39:	e8 f3 5e ff ff       	call   f0100e31 <cprintf>
f010af3e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af41:	b8 00 00 00 00       	mov    $0x0,%eax
f010af46:	eb 11                	jmp    f010af59 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010af48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af4b:	89 d0                	mov    %edx,%eax
f010af4d:	01 c0                	add    %eax,%eax
f010af4f:	01 d0                	add    %edx,%eax
f010af51:	c1 e0 02             	shl    $0x2,%eax
f010af54:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
}
f010af59:	c9                   	leave  
f010af5a:	c3                   	ret    

f010af5b <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010af5b:	55                   	push   %ebp
f010af5c:	89 e5                	mov    %esp,%ebp
f010af5e:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af68:	eb 2d                	jmp    f010af97 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010af6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af6d:	89 d0                	mov    %edx,%eax
f010af6f:	01 c0                	add    %eax,%eax
f010af71:	01 d0                	add    %edx,%eax
f010af73:	c1 e0 02             	shl    $0x2,%eax
f010af76:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
f010af7b:	8b 00                	mov    (%eax),%eax
f010af7d:	8b 55 08             	mov    0x8(%ebp),%edx
f010af80:	83 c2 5c             	add    $0x5c,%edx
f010af83:	83 ec 08             	sub    $0x8,%esp
f010af86:	50                   	push   %eax
f010af87:	52                   	push   %edx
f010af88:	e8 8d 3f 02 00       	call   f012ef1a <strcmp>
f010af8d:	83 c4 10             	add    $0x10,%esp
f010af90:	85 c0                	test   %eax,%eax
f010af92:	74 0f                	je     f010afa3 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af94:	ff 45 f4             	incl   -0xc(%ebp)
f010af97:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010af9c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af9f:	7c c9                	jl     f010af6a <get_user_program_info_by_env+0xf>
f010afa1:	eb 01                	jmp    f010afa4 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010afa3:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010afa4:	a1 6c ca 18 f0       	mov    0xf018ca6c,%eax
f010afa9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010afac:	75 17                	jne    f010afc5 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010afae:	83 ec 0c             	sub    $0xc,%esp
f010afb1:	68 4d 2d 13 f0       	push   $0xf0132d4d
f010afb6:	e8 76 5e ff ff       	call   f0100e31 <cprintf>
f010afbb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc3:	eb 11                	jmp    f010afd6 <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010afc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afc8:	89 d0                	mov    %edx,%eax
f010afca:	01 c0                	add    %eax,%eax
f010afcc:	01 d0                	add    %edx,%eax
f010afce:	c1 e0 02             	shl    $0x2,%eax
f010afd1:	05 c0 c9 18 f0       	add    $0xf018c9c0,%eax
}
f010afd6:	c9                   	leave  
f010afd7:	c3                   	ret    

f010afd8 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010afd8:	55                   	push   %ebp
f010afd9:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010afdb:	8b 45 08             	mov    0x8(%ebp),%eax
f010afde:	83 f8 13             	cmp    $0x13,%eax
f010afe1:	77 0c                	ja     f010afef <trapname+0x17>
		return excnames[trapno];
f010afe3:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe6:	8b 04 85 a0 31 13 f0 	mov    -0xfecce60(,%eax,4),%eax
f010afed:	eb 12                	jmp    f010b001 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010afef:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010aff3:	75 07                	jne    f010affc <trapname+0x24>
		return "System call";
f010aff5:	b8 80 2d 13 f0       	mov    $0xf0132d80,%eax
f010affa:	eb 05                	jmp    f010b001 <trapname+0x29>
	return "(unknown trap)";
f010affc:	b8 8c 2d 13 f0       	mov    $0xf0132d8c,%eax
}
f010b001:	5d                   	pop    %ebp
f010b002:	c3                   	ret    

f010b003 <idt_init>:


void
idt_init(void)
{
f010b003:	55                   	push   %ebp
f010b004:	89 e5                	mov    %esp,%ebp
f010b006:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b009:	b8 9e c6 10 f0       	mov    $0xf010c69e,%eax
f010b00e:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010b014:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010b01b:	08 00 
f010b01d:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b022:	83 e0 e0             	and    $0xffffffe0,%eax
f010b025:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b02a:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010b02f:	83 e0 1f             	and    $0x1f,%eax
f010b032:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010b037:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b03c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b03f:	83 c8 0e             	or     $0xe,%eax
f010b042:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b047:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b04c:	83 e0 ef             	and    $0xffffffef,%eax
f010b04f:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b054:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b059:	83 e0 9f             	and    $0xffffff9f,%eax
f010b05c:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b061:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010b066:	83 c8 80             	or     $0xffffff80,%eax
f010b069:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010b06e:	b8 9e c6 10 f0       	mov    $0xf010c69e,%eax
f010b073:	c1 e8 10             	shr    $0x10,%eax
f010b076:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b07c:	b8 a6 c6 10 f0       	mov    $0xf010c6a6,%eax
f010b081:	66 a3 00 34 25 f0    	mov    %ax,0xf0253400
f010b087:	66 c7 05 02 34 25 f0 	movw   $0x8,0xf0253402
f010b08e:	08 00 
f010b090:	a0 04 34 25 f0       	mov    0xf0253404,%al
f010b095:	83 e0 e0             	and    $0xffffffe0,%eax
f010b098:	a2 04 34 25 f0       	mov    %al,0xf0253404
f010b09d:	a0 04 34 25 f0       	mov    0xf0253404,%al
f010b0a2:	83 e0 1f             	and    $0x1f,%eax
f010b0a5:	a2 04 34 25 f0       	mov    %al,0xf0253404
f010b0aa:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0af:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0b2:	83 c8 0e             	or     $0xe,%eax
f010b0b5:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0ba:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0bf:	83 e0 ef             	and    $0xffffffef,%eax
f010b0c2:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0c7:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0cc:	83 c8 60             	or     $0x60,%eax
f010b0cf:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0d4:	a0 05 34 25 f0       	mov    0xf0253405,%al
f010b0d9:	83 c8 80             	or     $0xffffff80,%eax
f010b0dc:	a2 05 34 25 f0       	mov    %al,0xf0253405
f010b0e1:	b8 a6 c6 10 f0       	mov    $0xf010c6a6,%eax
f010b0e6:	c1 e8 10             	shr    $0x10,%eax
f010b0e9:	66 a3 06 34 25 f0    	mov    %ax,0xf0253406
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b0ef:	b8 b0 c6 10 f0       	mov    $0xf010c6b0,%eax
f010b0f4:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010b0fa:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010b101:	08 00 
f010b103:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b108:	83 e0 e0             	and    $0xffffffe0,%eax
f010b10b:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b110:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010b115:	83 e0 1f             	and    $0x1f,%eax
f010b118:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010b11d:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b122:	83 e0 f0             	and    $0xfffffff0,%eax
f010b125:	83 c8 0e             	or     $0xe,%eax
f010b128:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b12d:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b132:	83 e0 ef             	and    $0xffffffef,%eax
f010b135:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b13a:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b13f:	83 e0 9f             	and    $0xffffff9f,%eax
f010b142:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b147:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010b14c:	83 c8 80             	or     $0xffffff80,%eax
f010b14f:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010b154:	b8 b0 c6 10 f0       	mov    $0xf010c6b0,%eax
f010b159:	c1 e8 10             	shr    $0x10,%eax
f010b15c:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b162:	b8 b8 c6 10 f0       	mov    $0xf010c6b8,%eax
f010b167:	66 a3 80 32 25 f0    	mov    %ax,0xf0253280
f010b16d:	66 c7 05 82 32 25 f0 	movw   $0x8,0xf0253282
f010b174:	08 00 
f010b176:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010b17b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b17e:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010b183:	a0 84 32 25 f0       	mov    0xf0253284,%al
f010b188:	83 e0 1f             	and    $0x1f,%eax
f010b18b:	a2 84 32 25 f0       	mov    %al,0xf0253284
f010b190:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b195:	83 e0 f0             	and    $0xfffffff0,%eax
f010b198:	83 c8 0e             	or     $0xe,%eax
f010b19b:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b1a0:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b1a5:	83 e0 ef             	and    $0xffffffef,%eax
f010b1a8:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b1ad:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b1b2:	83 c8 60             	or     $0x60,%eax
f010b1b5:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b1ba:	a0 85 32 25 f0       	mov    0xf0253285,%al
f010b1bf:	83 c8 80             	or     $0xffffff80,%eax
f010b1c2:	a2 85 32 25 f0       	mov    %al,0xf0253285
f010b1c7:	b8 b8 c6 10 f0       	mov    $0xf010c6b8,%eax
f010b1cc:	c1 e8 10             	shr    $0x10,%eax
f010b1cf:	66 a3 86 32 25 f0    	mov    %ax,0xf0253286
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b1d5:	b8 c2 c6 10 f0       	mov    $0xf010c6c2,%eax
f010b1da:	66 a3 88 32 25 f0    	mov    %ax,0xf0253288
f010b1e0:	66 c7 05 8a 32 25 f0 	movw   $0x8,0xf025328a
f010b1e7:	08 00 
f010b1e9:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010b1ee:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1f1:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010b1f6:	a0 8c 32 25 f0       	mov    0xf025328c,%al
f010b1fb:	83 e0 1f             	and    $0x1f,%eax
f010b1fe:	a2 8c 32 25 f0       	mov    %al,0xf025328c
f010b203:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b208:	83 c8 0f             	or     $0xf,%eax
f010b20b:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b210:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b215:	83 e0 ef             	and    $0xffffffef,%eax
f010b218:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b21d:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b222:	83 c8 60             	or     $0x60,%eax
f010b225:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b22a:	a0 8d 32 25 f0       	mov    0xf025328d,%al
f010b22f:	83 c8 80             	or     $0xffffff80,%eax
f010b232:	a2 8d 32 25 f0       	mov    %al,0xf025328d
f010b237:	b8 c2 c6 10 f0       	mov    $0xf010c6c2,%eax
f010b23c:	c1 e8 10             	shr    $0x10,%eax
f010b23f:	66 a3 8e 32 25 f0    	mov    %ax,0xf025328e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b245:	b8 cc c6 10 f0       	mov    $0xf010c6cc,%eax
f010b24a:	66 a3 90 32 25 f0    	mov    %ax,0xf0253290
f010b250:	66 c7 05 92 32 25 f0 	movw   $0x8,0xf0253292
f010b257:	08 00 
f010b259:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b25e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b261:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b266:	a0 94 32 25 f0       	mov    0xf0253294,%al
f010b26b:	83 e0 1f             	and    $0x1f,%eax
f010b26e:	a2 94 32 25 f0       	mov    %al,0xf0253294
f010b273:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b278:	83 e0 f0             	and    $0xfffffff0,%eax
f010b27b:	83 c8 0e             	or     $0xe,%eax
f010b27e:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b283:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b288:	83 e0 ef             	and    $0xffffffef,%eax
f010b28b:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b290:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b295:	83 c8 60             	or     $0x60,%eax
f010b298:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b29d:	a0 95 32 25 f0       	mov    0xf0253295,%al
f010b2a2:	83 c8 80             	or     $0xffffff80,%eax
f010b2a5:	a2 95 32 25 f0       	mov    %al,0xf0253295
f010b2aa:	b8 cc c6 10 f0       	mov    $0xf010c6cc,%eax
f010b2af:	c1 e8 10             	shr    $0x10,%eax
f010b2b2:	66 a3 96 32 25 f0    	mov    %ax,0xf0253296
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b2b8:	b8 d6 c6 10 f0       	mov    $0xf010c6d6,%eax
f010b2bd:	66 a3 98 32 25 f0    	mov    %ax,0xf0253298
f010b2c3:	66 c7 05 9a 32 25 f0 	movw   $0x8,0xf025329a
f010b2ca:	08 00 
f010b2cc:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b2d1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2d4:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b2d9:	a0 9c 32 25 f0       	mov    0xf025329c,%al
f010b2de:	83 e0 1f             	and    $0x1f,%eax
f010b2e1:	a2 9c 32 25 f0       	mov    %al,0xf025329c
f010b2e6:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b2eb:	83 c8 0f             	or     $0xf,%eax
f010b2ee:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b2f3:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b2f8:	83 e0 ef             	and    $0xffffffef,%eax
f010b2fb:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b300:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b305:	83 c8 60             	or     $0x60,%eax
f010b308:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b30d:	a0 9d 32 25 f0       	mov    0xf025329d,%al
f010b312:	83 c8 80             	or     $0xffffff80,%eax
f010b315:	a2 9d 32 25 f0       	mov    %al,0xf025329d
f010b31a:	b8 d6 c6 10 f0       	mov    $0xf010c6d6,%eax
f010b31f:	c1 e8 10             	shr    $0x10,%eax
f010b322:	66 a3 9e 32 25 f0    	mov    %ax,0xf025329e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b328:	b8 e0 c6 10 f0       	mov    $0xf010c6e0,%eax
f010b32d:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010b333:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010b33a:	08 00 
f010b33c:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b341:	83 e0 e0             	and    $0xffffffe0,%eax
f010b344:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b349:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b34e:	83 e0 1f             	and    $0x1f,%eax
f010b351:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b356:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b35b:	83 c8 0f             	or     $0xf,%eax
f010b35e:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b363:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b368:	83 e0 ef             	and    $0xffffffef,%eax
f010b36b:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b370:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b375:	83 c8 60             	or     $0x60,%eax
f010b378:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b37d:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b382:	83 c8 80             	or     $0xffffff80,%eax
f010b385:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b38a:	b8 e0 c6 10 f0       	mov    $0xf010c6e0,%eax
f010b38f:	c1 e8 10             	shr    $0x10,%eax
f010b392:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b398:	b8 ea c6 10 f0       	mov    $0xf010c6ea,%eax
f010b39d:	66 a3 a8 32 25 f0    	mov    %ax,0xf02532a8
f010b3a3:	66 c7 05 aa 32 25 f0 	movw   $0x8,0xf02532aa
f010b3aa:	08 00 
f010b3ac:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b3b1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3b4:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b3b9:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b3be:	83 e0 1f             	and    $0x1f,%eax
f010b3c1:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b3c6:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3cb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3ce:	83 c8 0e             	or     $0xe,%eax
f010b3d1:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3d6:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3db:	83 e0 ef             	and    $0xffffffef,%eax
f010b3de:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3e3:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3e8:	83 c8 60             	or     $0x60,%eax
f010b3eb:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3f0:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b3f5:	83 c8 80             	or     $0xffffff80,%eax
f010b3f8:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b3fd:	b8 ea c6 10 f0       	mov    $0xf010c6ea,%eax
f010b402:	c1 e8 10             	shr    $0x10,%eax
f010b405:	66 a3 ae 32 25 f0    	mov    %ax,0xf02532ae
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b40b:	b8 f4 c6 10 f0       	mov    $0xf010c6f4,%eax
f010b410:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b416:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010b41d:	08 00 
f010b41f:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b424:	83 e0 e0             	and    $0xffffffe0,%eax
f010b427:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b42c:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b431:	83 e0 1f             	and    $0x1f,%eax
f010b434:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b439:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b43e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b441:	83 c8 0e             	or     $0xe,%eax
f010b444:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b449:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b44e:	83 e0 ef             	and    $0xffffffef,%eax
f010b451:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b456:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b45b:	83 c8 60             	or     $0x60,%eax
f010b45e:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b463:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b468:	83 c8 80             	or     $0xffffff80,%eax
f010b46b:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b470:	b8 f4 c6 10 f0       	mov    $0xf010c6f4,%eax
f010b475:	c1 e8 10             	shr    $0x10,%eax
f010b478:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b47e:	b8 fe c6 10 f0       	mov    $0xf010c6fe,%eax
f010b483:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010b489:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010b490:	08 00 
f010b492:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b497:	83 e0 e0             	and    $0xffffffe0,%eax
f010b49a:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b49f:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b4a4:	83 e0 1f             	and    $0x1f,%eax
f010b4a7:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b4ac:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4b1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4b4:	83 c8 0e             	or     $0xe,%eax
f010b4b7:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4bc:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4c1:	83 e0 ef             	and    $0xffffffef,%eax
f010b4c4:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4c9:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4ce:	83 c8 60             	or     $0x60,%eax
f010b4d1:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4d6:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b4db:	83 c8 80             	or     $0xffffff80,%eax
f010b4de:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010b4e3:	b8 fe c6 10 f0       	mov    $0xf010c6fe,%eax
f010b4e8:	c1 e8 10             	shr    $0x10,%eax
f010b4eb:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b4f1:	b8 08 c7 10 f0       	mov    $0xf010c708,%eax
f010b4f6:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010b4fc:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010b503:	08 00 
f010b505:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010b50a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b50d:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010b512:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010b517:	83 e0 1f             	and    $0x1f,%eax
f010b51a:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010b51f:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b524:	83 e0 f0             	and    $0xfffffff0,%eax
f010b527:	83 c8 0e             	or     $0xe,%eax
f010b52a:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b52f:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b534:	83 e0 ef             	and    $0xffffffef,%eax
f010b537:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b53c:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b541:	83 c8 60             	or     $0x60,%eax
f010b544:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b549:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010b54e:	83 c8 80             	or     $0xffffff80,%eax
f010b551:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010b556:	b8 08 c7 10 f0       	mov    $0xf010c708,%eax
f010b55b:	c1 e8 10             	shr    $0x10,%eax
f010b55e:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b564:	b8 10 c7 10 f0       	mov    $0xf010c710,%eax
f010b569:	66 a3 d8 32 25 f0    	mov    %ax,0xf02532d8
f010b56f:	66 c7 05 da 32 25 f0 	movw   $0x8,0xf02532da
f010b576:	08 00 
f010b578:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010b57d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b580:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010b585:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010b58a:	83 e0 1f             	and    $0x1f,%eax
f010b58d:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010b592:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b597:	83 e0 f0             	and    $0xfffffff0,%eax
f010b59a:	83 c8 0e             	or     $0xe,%eax
f010b59d:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b5a2:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b5a7:	83 e0 ef             	and    $0xffffffef,%eax
f010b5aa:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b5af:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b5b4:	83 c8 60             	or     $0x60,%eax
f010b5b7:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b5bc:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010b5c1:	83 c8 80             	or     $0xffffff80,%eax
f010b5c4:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010b5c9:	b8 10 c7 10 f0       	mov    $0xf010c710,%eax
f010b5ce:	c1 e8 10             	shr    $0x10,%eax
f010b5d1:	66 a3 de 32 25 f0    	mov    %ax,0xf02532de
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b5d7:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b5dc:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010b5e2:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010b5e9:	08 00 
f010b5eb:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b5f0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5f3:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b5f8:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010b5fd:	83 e0 1f             	and    $0x1f,%eax
f010b600:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010b605:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b60a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b60d:	83 c8 0e             	or     $0xe,%eax
f010b610:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b615:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b61a:	83 e0 ef             	and    $0xffffffef,%eax
f010b61d:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b622:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b627:	83 c8 60             	or     $0x60,%eax
f010b62a:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b62f:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010b634:	83 c8 80             	or     $0xffffff80,%eax
f010b637:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010b63c:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b641:	c1 e8 10             	shr    $0x10,%eax
f010b644:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b64a:	b8 18 c7 10 f0       	mov    $0xf010c718,%eax
f010b64f:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010b655:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010b65c:	08 00 
f010b65e:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b663:	83 e0 e0             	and    $0xffffffe0,%eax
f010b666:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b66b:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010b670:	83 e0 1f             	and    $0x1f,%eax
f010b673:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010b678:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b67d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b680:	83 c8 0e             	or     $0xe,%eax
f010b683:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b688:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b68d:	83 e0 ef             	and    $0xffffffef,%eax
f010b690:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b695:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b69a:	83 c8 60             	or     $0x60,%eax
f010b69d:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b6a2:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010b6a7:	83 c8 80             	or     $0xffffff80,%eax
f010b6aa:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010b6af:	b8 18 c7 10 f0       	mov    $0xf010c718,%eax
f010b6b4:	c1 e8 10             	shr    $0x10,%eax
f010b6b7:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b6bd:	b8 1c c7 10 f0       	mov    $0xf010c71c,%eax
f010b6c2:	66 a3 00 33 25 f0    	mov    %ax,0xf0253300
f010b6c8:	66 c7 05 02 33 25 f0 	movw   $0x8,0xf0253302
f010b6cf:	08 00 
f010b6d1:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010b6d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6d9:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010b6de:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010b6e3:	83 e0 1f             	and    $0x1f,%eax
f010b6e6:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010b6eb:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b6f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6f3:	83 c8 0e             	or     $0xe,%eax
f010b6f6:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b6fb:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b700:	83 e0 ef             	and    $0xffffffef,%eax
f010b703:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b708:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b70d:	83 c8 60             	or     $0x60,%eax
f010b710:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b715:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010b71a:	83 c8 80             	or     $0xffffff80,%eax
f010b71d:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010b722:	b8 1c c7 10 f0       	mov    $0xf010c71c,%eax
f010b727:	c1 e8 10             	shr    $0x10,%eax
f010b72a:	66 a3 06 33 25 f0    	mov    %ax,0xf0253306
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b730:	b8 22 c7 10 f0       	mov    $0xf010c722,%eax
f010b735:	66 a3 08 33 25 f0    	mov    %ax,0xf0253308
f010b73b:	66 c7 05 0a 33 25 f0 	movw   $0x8,0xf025330a
f010b742:	08 00 
f010b744:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010b749:	83 e0 e0             	and    $0xffffffe0,%eax
f010b74c:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010b751:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010b756:	83 e0 1f             	and    $0x1f,%eax
f010b759:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010b75e:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b763:	83 e0 f0             	and    $0xfffffff0,%eax
f010b766:	83 c8 0e             	or     $0xe,%eax
f010b769:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b76e:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b773:	83 e0 ef             	and    $0xffffffef,%eax
f010b776:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b77b:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b780:	83 c8 60             	or     $0x60,%eax
f010b783:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b788:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010b78d:	83 c8 80             	or     $0xffffff80,%eax
f010b790:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010b795:	b8 22 c7 10 f0       	mov    $0xf010c722,%eax
f010b79a:	c1 e8 10             	shr    $0x10,%eax
f010b79d:	66 a3 0e 33 25 f0    	mov    %ax,0xf025330e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b7a3:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b7a8:	66 a3 10 33 25 f0    	mov    %ax,0xf0253310
f010b7ae:	66 c7 05 12 33 25 f0 	movw   $0x8,0xf0253312
f010b7b5:	08 00 
f010b7b7:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010b7bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7bf:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010b7c4:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010b7c9:	83 e0 1f             	and    $0x1f,%eax
f010b7cc:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010b7d1:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7d9:	83 c8 0e             	or     $0xe,%eax
f010b7dc:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7e1:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7e6:	83 e0 ef             	and    $0xffffffef,%eax
f010b7e9:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7ee:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b7f3:	83 c8 60             	or     $0x60,%eax
f010b7f6:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b7fb:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010b800:	83 c8 80             	or     $0xffffff80,%eax
f010b803:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010b808:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b80d:	c1 e8 10             	shr    $0x10,%eax
f010b810:	66 a3 16 33 25 f0    	mov    %ax,0xf0253316
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b816:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010b81b:	66 a3 18 33 25 f0    	mov    %ax,0xf0253318
f010b821:	66 c7 05 1a 33 25 f0 	movw   $0x8,0xf025331a
f010b828:	08 00 
f010b82a:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010b82f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b832:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010b837:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010b83c:	83 e0 1f             	and    $0x1f,%eax
f010b83f:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010b844:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b849:	83 e0 f0             	and    $0xfffffff0,%eax
f010b84c:	83 c8 0e             	or     $0xe,%eax
f010b84f:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b854:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b859:	83 e0 ef             	and    $0xffffffef,%eax
f010b85c:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b861:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b866:	83 c8 60             	or     $0x60,%eax
f010b869:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b86e:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010b873:	83 c8 80             	or     $0xffffff80,%eax
f010b876:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010b87b:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010b880:	c1 e8 10             	shr    $0x10,%eax
f010b883:	66 a3 1e 33 25 f0    	mov    %ax,0xf025331e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b889:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010b88e:	66 a3 80 33 25 f0    	mov    %ax,0xf0253380
f010b894:	66 c7 05 82 33 25 f0 	movw   $0x8,0xf0253382
f010b89b:	08 00 
f010b89d:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b8a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8a5:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b8aa:	a0 84 33 25 f0       	mov    0xf0253384,%al
f010b8af:	83 e0 1f             	and    $0x1f,%eax
f010b8b2:	a2 84 33 25 f0       	mov    %al,0xf0253384
f010b8b7:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8bf:	83 c8 0e             	or     $0xe,%eax
f010b8c2:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8c7:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8cc:	83 e0 ef             	and    $0xffffffef,%eax
f010b8cf:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8d4:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8d9:	83 c8 60             	or     $0x60,%eax
f010b8dc:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8e1:	a0 85 33 25 f0       	mov    0xf0253385,%al
f010b8e6:	83 c8 80             	or     $0xffffff80,%eax
f010b8e9:	a2 85 33 25 f0       	mov    %al,0xf0253385
f010b8ee:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010b8f3:	c1 e8 10             	shr    $0x10,%eax
f010b8f6:	66 a3 86 33 25 f0    	mov    %ax,0xf0253386
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b8fc:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010b901:	66 a3 88 33 25 f0    	mov    %ax,0xf0253388
f010b907:	66 c7 05 8a 33 25 f0 	movw   $0x8,0xf025338a
f010b90e:	08 00 
f010b910:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b915:	83 e0 e0             	and    $0xffffffe0,%eax
f010b918:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b91d:	a0 8c 33 25 f0       	mov    0xf025338c,%al
f010b922:	83 e0 1f             	and    $0x1f,%eax
f010b925:	a2 8c 33 25 f0       	mov    %al,0xf025338c
f010b92a:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b92f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b932:	83 c8 0e             	or     $0xe,%eax
f010b935:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b93a:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b93f:	83 e0 ef             	and    $0xffffffef,%eax
f010b942:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b947:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b94c:	83 c8 60             	or     $0x60,%eax
f010b94f:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b954:	a0 8d 33 25 f0       	mov    0xf025338d,%al
f010b959:	83 c8 80             	or     $0xffffff80,%eax
f010b95c:	a2 8d 33 25 f0       	mov    %al,0xf025338d
f010b961:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010b966:	c1 e8 10             	shr    $0x10,%eax
f010b969:	66 a3 8e 33 25 f0    	mov    %ax,0xf025338e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b96f:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010b974:	66 a3 90 33 25 f0    	mov    %ax,0xf0253390
f010b97a:	66 c7 05 92 33 25 f0 	movw   $0x8,0xf0253392
f010b981:	08 00 
f010b983:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b988:	83 e0 e0             	and    $0xffffffe0,%eax
f010b98b:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b990:	a0 94 33 25 f0       	mov    0xf0253394,%al
f010b995:	83 e0 1f             	and    $0x1f,%eax
f010b998:	a2 94 33 25 f0       	mov    %al,0xf0253394
f010b99d:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b9a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9a5:	83 c8 0e             	or     $0xe,%eax
f010b9a8:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b9ad:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b9b2:	83 e0 ef             	and    $0xffffffef,%eax
f010b9b5:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b9ba:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b9bf:	83 c8 60             	or     $0x60,%eax
f010b9c2:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b9c7:	a0 95 33 25 f0       	mov    0xf0253395,%al
f010b9cc:	83 c8 80             	or     $0xffffff80,%eax
f010b9cf:	a2 95 33 25 f0       	mov    %al,0xf0253395
f010b9d4:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010b9d9:	c1 e8 10             	shr    $0x10,%eax
f010b9dc:	66 a3 96 33 25 f0    	mov    %ax,0xf0253396
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b9e2:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010b9e7:	66 a3 98 33 25 f0    	mov    %ax,0xf0253398
f010b9ed:	66 c7 05 9a 33 25 f0 	movw   $0x8,0xf025339a
f010b9f4:	08 00 
f010b9f6:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010b9fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9fe:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010ba03:	a0 9c 33 25 f0       	mov    0xf025339c,%al
f010ba08:	83 e0 1f             	and    $0x1f,%eax
f010ba0b:	a2 9c 33 25 f0       	mov    %al,0xf025339c
f010ba10:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba15:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba18:	83 c8 0e             	or     $0xe,%eax
f010ba1b:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba20:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba25:	83 e0 ef             	and    $0xffffffef,%eax
f010ba28:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba2d:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba32:	83 c8 60             	or     $0x60,%eax
f010ba35:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba3a:	a0 9d 33 25 f0       	mov    0xf025339d,%al
f010ba3f:	83 c8 80             	or     $0xffffff80,%eax
f010ba42:	a2 9d 33 25 f0       	mov    %al,0xf025339d
f010ba47:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010ba4c:	c1 e8 10             	shr    $0x10,%eax
f010ba4f:	66 a3 9e 33 25 f0    	mov    %ax,0xf025339e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010ba55:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010ba5a:	66 a3 a0 33 25 f0    	mov    %ax,0xf02533a0
f010ba60:	66 c7 05 a2 33 25 f0 	movw   $0x8,0xf02533a2
f010ba67:	08 00 
f010ba69:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010ba6e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba71:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010ba76:	a0 a4 33 25 f0       	mov    0xf02533a4,%al
f010ba7b:	83 e0 1f             	and    $0x1f,%eax
f010ba7e:	a2 a4 33 25 f0       	mov    %al,0xf02533a4
f010ba83:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010ba88:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba8b:	83 c8 0e             	or     $0xe,%eax
f010ba8e:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010ba93:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010ba98:	83 e0 ef             	and    $0xffffffef,%eax
f010ba9b:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010baa0:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010baa5:	83 c8 60             	or     $0x60,%eax
f010baa8:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010baad:	a0 a5 33 25 f0       	mov    0xf02533a5,%al
f010bab2:	83 c8 80             	or     $0xffffff80,%eax
f010bab5:	a2 a5 33 25 f0       	mov    %al,0xf02533a5
f010baba:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010babf:	c1 e8 10             	shr    $0x10,%eax
f010bac2:	66 a3 a6 33 25 f0    	mov    %ax,0xf02533a6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bac8:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bacd:	66 a3 a8 33 25 f0    	mov    %ax,0xf02533a8
f010bad3:	66 c7 05 aa 33 25 f0 	movw   $0x8,0xf02533aa
f010bada:	08 00 
f010badc:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010bae1:	83 e0 e0             	and    $0xffffffe0,%eax
f010bae4:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010bae9:	a0 ac 33 25 f0       	mov    0xf02533ac,%al
f010baee:	83 e0 1f             	and    $0x1f,%eax
f010baf1:	a2 ac 33 25 f0       	mov    %al,0xf02533ac
f010baf6:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010bafb:	83 e0 f0             	and    $0xfffffff0,%eax
f010bafe:	83 c8 0e             	or     $0xe,%eax
f010bb01:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bb06:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010bb0b:	83 e0 ef             	and    $0xffffffef,%eax
f010bb0e:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bb13:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010bb18:	83 c8 60             	or     $0x60,%eax
f010bb1b:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bb20:	a0 ad 33 25 f0       	mov    0xf02533ad,%al
f010bb25:	83 c8 80             	or     $0xffffff80,%eax
f010bb28:	a2 ad 33 25 f0       	mov    %al,0xf02533ad
f010bb2d:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bb32:	c1 e8 10             	shr    $0x10,%eax
f010bb35:	66 a3 ae 33 25 f0    	mov    %ax,0xf02533ae
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bb3b:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bb40:	66 a3 b0 33 25 f0    	mov    %ax,0xf02533b0
f010bb46:	66 c7 05 b2 33 25 f0 	movw   $0x8,0xf02533b2
f010bb4d:	08 00 
f010bb4f:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010bb54:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb57:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010bb5c:	a0 b4 33 25 f0       	mov    0xf02533b4,%al
f010bb61:	83 e0 1f             	and    $0x1f,%eax
f010bb64:	a2 b4 33 25 f0       	mov    %al,0xf02533b4
f010bb69:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb6e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb71:	83 c8 0e             	or     $0xe,%eax
f010bb74:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb79:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb7e:	83 e0 ef             	and    $0xffffffef,%eax
f010bb81:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb86:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb8b:	83 c8 60             	or     $0x60,%eax
f010bb8e:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bb93:	a0 b5 33 25 f0       	mov    0xf02533b5,%al
f010bb98:	83 c8 80             	or     $0xffffff80,%eax
f010bb9b:	a2 b5 33 25 f0       	mov    %al,0xf02533b5
f010bba0:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bba5:	c1 e8 10             	shr    $0x10,%eax
f010bba8:	66 a3 b6 33 25 f0    	mov    %ax,0xf02533b6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bbae:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bbb3:	66 a3 b8 33 25 f0    	mov    %ax,0xf02533b8
f010bbb9:	66 c7 05 ba 33 25 f0 	movw   $0x8,0xf02533ba
f010bbc0:	08 00 
f010bbc2:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010bbc7:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbca:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010bbcf:	a0 bc 33 25 f0       	mov    0xf02533bc,%al
f010bbd4:	83 e0 1f             	and    $0x1f,%eax
f010bbd7:	a2 bc 33 25 f0       	mov    %al,0xf02533bc
f010bbdc:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbe1:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbe4:	83 c8 0e             	or     $0xe,%eax
f010bbe7:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bbec:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbf1:	83 e0 ef             	and    $0xffffffef,%eax
f010bbf4:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bbf9:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bbfe:	83 c8 60             	or     $0x60,%eax
f010bc01:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bc06:	a0 bd 33 25 f0       	mov    0xf02533bd,%al
f010bc0b:	83 c8 80             	or     $0xffffff80,%eax
f010bc0e:	a2 bd 33 25 f0       	mov    %al,0xf02533bd
f010bc13:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bc18:	c1 e8 10             	shr    $0x10,%eax
f010bc1b:	66 a3 be 33 25 f0    	mov    %ax,0xf02533be
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bc21:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010bc26:	66 a3 c0 33 25 f0    	mov    %ax,0xf02533c0
f010bc2c:	66 c7 05 c2 33 25 f0 	movw   $0x8,0xf02533c2
f010bc33:	08 00 
f010bc35:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010bc3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc3d:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010bc42:	a0 c4 33 25 f0       	mov    0xf02533c4,%al
f010bc47:	83 e0 1f             	and    $0x1f,%eax
f010bc4a:	a2 c4 33 25 f0       	mov    %al,0xf02533c4
f010bc4f:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc54:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc57:	83 c8 0e             	or     $0xe,%eax
f010bc5a:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc5f:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc64:	83 e0 ef             	and    $0xffffffef,%eax
f010bc67:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc6c:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc71:	83 c8 60             	or     $0x60,%eax
f010bc74:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc79:	a0 c5 33 25 f0       	mov    0xf02533c5,%al
f010bc7e:	83 c8 80             	or     $0xffffff80,%eax
f010bc81:	a2 c5 33 25 f0       	mov    %al,0xf02533c5
f010bc86:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010bc8b:	c1 e8 10             	shr    $0x10,%eax
f010bc8e:	66 a3 c6 33 25 f0    	mov    %ax,0xf02533c6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc94:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010bc99:	66 a3 c8 33 25 f0    	mov    %ax,0xf02533c8
f010bc9f:	66 c7 05 ca 33 25 f0 	movw   $0x8,0xf02533ca
f010bca6:	08 00 
f010bca8:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010bcad:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcb0:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bcb5:	a0 cc 33 25 f0       	mov    0xf02533cc,%al
f010bcba:	83 e0 1f             	and    $0x1f,%eax
f010bcbd:	a2 cc 33 25 f0       	mov    %al,0xf02533cc
f010bcc2:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bcc7:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcca:	83 c8 0e             	or     $0xe,%eax
f010bccd:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcd2:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bcd7:	83 e0 ef             	and    $0xffffffef,%eax
f010bcda:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcdf:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bce4:	83 c8 60             	or     $0x60,%eax
f010bce7:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcec:	a0 cd 33 25 f0       	mov    0xf02533cd,%al
f010bcf1:	83 c8 80             	or     $0xffffff80,%eax
f010bcf4:	a2 cd 33 25 f0       	mov    %al,0xf02533cd
f010bcf9:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010bcfe:	c1 e8 10             	shr    $0x10,%eax
f010bd01:	66 a3 ce 33 25 f0    	mov    %ax,0xf02533ce
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bd07:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bd0c:	66 a3 d0 33 25 f0    	mov    %ax,0xf02533d0
f010bd12:	66 c7 05 d2 33 25 f0 	movw   $0x8,0xf02533d2
f010bd19:	08 00 
f010bd1b:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bd20:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd23:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bd28:	a0 d4 33 25 f0       	mov    0xf02533d4,%al
f010bd2d:	83 e0 1f             	and    $0x1f,%eax
f010bd30:	a2 d4 33 25 f0       	mov    %al,0xf02533d4
f010bd35:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd3d:	83 c8 0e             	or     $0xe,%eax
f010bd40:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd45:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd4a:	83 e0 ef             	and    $0xffffffef,%eax
f010bd4d:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd52:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd57:	83 c8 60             	or     $0x60,%eax
f010bd5a:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd5f:	a0 d5 33 25 f0       	mov    0xf02533d5,%al
f010bd64:	83 c8 80             	or     $0xffffff80,%eax
f010bd67:	a2 d5 33 25 f0       	mov    %al,0xf02533d5
f010bd6c:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bd71:	c1 e8 10             	shr    $0x10,%eax
f010bd74:	66 a3 d6 33 25 f0    	mov    %ax,0xf02533d6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bd7a:	b8 74 c7 10 f0       	mov    $0xf010c774,%eax
f010bd7f:	66 a3 d8 33 25 f0    	mov    %ax,0xf02533d8
f010bd85:	66 c7 05 da 33 25 f0 	movw   $0x8,0xf02533da
f010bd8c:	08 00 
f010bd8e:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bd93:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd96:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bd9b:	a0 dc 33 25 f0       	mov    0xf02533dc,%al
f010bda0:	83 e0 1f             	and    $0x1f,%eax
f010bda3:	a2 dc 33 25 f0       	mov    %al,0xf02533dc
f010bda8:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bdad:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdb0:	83 c8 0e             	or     $0xe,%eax
f010bdb3:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bdb8:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bdbd:	83 e0 ef             	and    $0xffffffef,%eax
f010bdc0:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bdc5:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bdca:	83 c8 60             	or     $0x60,%eax
f010bdcd:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bdd2:	a0 dd 33 25 f0       	mov    0xf02533dd,%al
f010bdd7:	83 c8 80             	or     $0xffffff80,%eax
f010bdda:	a2 dd 33 25 f0       	mov    %al,0xf02533dd
f010bddf:	b8 74 c7 10 f0       	mov    $0xf010c774,%eax
f010bde4:	c1 e8 10             	shr    $0x10,%eax
f010bde7:	66 a3 de 33 25 f0    	mov    %ax,0xf02533de
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bded:	b8 7a c7 10 f0       	mov    $0xf010c77a,%eax
f010bdf2:	66 a3 e0 33 25 f0    	mov    %ax,0xf02533e0
f010bdf8:	66 c7 05 e2 33 25 f0 	movw   $0x8,0xf02533e2
f010bdff:	08 00 
f010be01:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010be06:	83 e0 e0             	and    $0xffffffe0,%eax
f010be09:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010be0e:	a0 e4 33 25 f0       	mov    0xf02533e4,%al
f010be13:	83 e0 1f             	and    $0x1f,%eax
f010be16:	a2 e4 33 25 f0       	mov    %al,0xf02533e4
f010be1b:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be20:	83 e0 f0             	and    $0xfffffff0,%eax
f010be23:	83 c8 0e             	or     $0xe,%eax
f010be26:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be2b:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be30:	83 e0 ef             	and    $0xffffffef,%eax
f010be33:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be38:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be3d:	83 c8 60             	or     $0x60,%eax
f010be40:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be45:	a0 e5 33 25 f0       	mov    0xf02533e5,%al
f010be4a:	83 c8 80             	or     $0xffffff80,%eax
f010be4d:	a2 e5 33 25 f0       	mov    %al,0xf02533e5
f010be52:	b8 7a c7 10 f0       	mov    $0xf010c77a,%eax
f010be57:	c1 e8 10             	shr    $0x10,%eax
f010be5a:	66 a3 e6 33 25 f0    	mov    %ax,0xf02533e6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010be60:	b8 80 c7 10 f0       	mov    $0xf010c780,%eax
f010be65:	66 a3 e8 33 25 f0    	mov    %ax,0xf02533e8
f010be6b:	66 c7 05 ea 33 25 f0 	movw   $0x8,0xf02533ea
f010be72:	08 00 
f010be74:	a0 ec 33 25 f0       	mov    0xf02533ec,%al
f010be79:	83 e0 e0             	and    $0xffffffe0,%eax
f010be7c:	a2 ec 33 25 f0       	mov    %al,0xf02533ec
f010be81:	a0 ec 33 25 f0       	mov    0xf02533ec,%al
f010be86:	83 e0 1f             	and    $0x1f,%eax
f010be89:	a2 ec 33 25 f0       	mov    %al,0xf02533ec
f010be8e:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010be93:	83 e0 f0             	and    $0xfffffff0,%eax
f010be96:	83 c8 0e             	or     $0xe,%eax
f010be99:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010be9e:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010bea3:	83 e0 ef             	and    $0xffffffef,%eax
f010bea6:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010beab:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010beb0:	83 c8 60             	or     $0x60,%eax
f010beb3:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010beb8:	a0 ed 33 25 f0       	mov    0xf02533ed,%al
f010bebd:	83 c8 80             	or     $0xffffff80,%eax
f010bec0:	a2 ed 33 25 f0       	mov    %al,0xf02533ed
f010bec5:	b8 80 c7 10 f0       	mov    $0xf010c780,%eax
f010beca:	c1 e8 10             	shr    $0x10,%eax
f010becd:	66 a3 ee 33 25 f0    	mov    %ax,0xf02533ee
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bed3:	b8 86 c7 10 f0       	mov    $0xf010c786,%eax
f010bed8:	66 a3 f0 33 25 f0    	mov    %ax,0xf02533f0
f010bede:	66 c7 05 f2 33 25 f0 	movw   $0x8,0xf02533f2
f010bee5:	08 00 
f010bee7:	a0 f4 33 25 f0       	mov    0xf02533f4,%al
f010beec:	83 e0 e0             	and    $0xffffffe0,%eax
f010beef:	a2 f4 33 25 f0       	mov    %al,0xf02533f4
f010bef4:	a0 f4 33 25 f0       	mov    0xf02533f4,%al
f010bef9:	83 e0 1f             	and    $0x1f,%eax
f010befc:	a2 f4 33 25 f0       	mov    %al,0xf02533f4
f010bf01:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bf06:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf09:	83 c8 0e             	or     $0xe,%eax
f010bf0c:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf11:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bf16:	83 e0 ef             	and    $0xffffffef,%eax
f010bf19:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf1e:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bf23:	83 c8 60             	or     $0x60,%eax
f010bf26:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf2b:	a0 f5 33 25 f0       	mov    0xf02533f5,%al
f010bf30:	83 c8 80             	or     $0xffffff80,%eax
f010bf33:	a2 f5 33 25 f0       	mov    %al,0xf02533f5
f010bf38:	b8 86 c7 10 f0       	mov    $0xf010c786,%eax
f010bf3d:	c1 e8 10             	shr    $0x10,%eax
f010bf40:	66 a3 f6 33 25 f0    	mov    %ax,0xf02533f6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bf46:	b8 8c c7 10 f0       	mov    $0xf010c78c,%eax
f010bf4b:	66 a3 f8 33 25 f0    	mov    %ax,0xf02533f8
f010bf51:	66 c7 05 fa 33 25 f0 	movw   $0x8,0xf02533fa
f010bf58:	08 00 
f010bf5a:	a0 fc 33 25 f0       	mov    0xf02533fc,%al
f010bf5f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf62:	a2 fc 33 25 f0       	mov    %al,0xf02533fc
f010bf67:	a0 fc 33 25 f0       	mov    0xf02533fc,%al
f010bf6c:	83 e0 1f             	and    $0x1f,%eax
f010bf6f:	a2 fc 33 25 f0       	mov    %al,0xf02533fc
f010bf74:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf79:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf7c:	83 c8 0e             	or     $0xe,%eax
f010bf7f:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf84:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf89:	83 e0 ef             	and    $0xffffffef,%eax
f010bf8c:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf91:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bf96:	83 c8 60             	or     $0x60,%eax
f010bf99:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bf9e:	a0 fd 33 25 f0       	mov    0xf02533fd,%al
f010bfa3:	83 c8 80             	or     $0xffffff80,%eax
f010bfa6:	a2 fd 33 25 f0       	mov    %al,0xf02533fd
f010bfab:	b8 8c c7 10 f0       	mov    $0xf010c78c,%eax
f010bfb0:	c1 e8 10             	shr    $0x10,%eax
f010bfb3:	66 a3 fe 33 25 f0    	mov    %ax,0xf02533fe



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bfb9:	c7 05 a4 3a 25 f0 00 	movl   $0xefc00000,0xf0253aa4
f010bfc0:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bfc3:	66 c7 05 a8 3a 25 f0 	movw   $0x10,0xf0253aa8
f010bfca:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bfcc:	66 c7 05 a8 c9 18 f0 	movw   $0x68,0xf018c9a8
f010bfd3:	68 00 
f010bfd5:	b8 a0 3a 25 f0       	mov    $0xf0253aa0,%eax
f010bfda:	66 a3 aa c9 18 f0    	mov    %ax,0xf018c9aa
f010bfe0:	b8 a0 3a 25 f0       	mov    $0xf0253aa0,%eax
f010bfe5:	c1 e8 10             	shr    $0x10,%eax
f010bfe8:	a2 ac c9 18 f0       	mov    %al,0xf018c9ac
f010bfed:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010bff2:	83 e0 f0             	and    $0xfffffff0,%eax
f010bff5:	83 c8 09             	or     $0x9,%eax
f010bff8:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010bffd:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010c002:	83 c8 10             	or     $0x10,%eax
f010c005:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010c00a:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010c00f:	83 e0 9f             	and    $0xffffff9f,%eax
f010c012:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010c017:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010c01c:	83 c8 80             	or     $0xffffff80,%eax
f010c01f:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010c024:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c029:	83 e0 f0             	and    $0xfffffff0,%eax
f010c02c:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c031:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c036:	83 e0 ef             	and    $0xffffffef,%eax
f010c039:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c03e:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c043:	83 e0 df             	and    $0xffffffdf,%eax
f010c046:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c04b:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c050:	83 c8 40             	or     $0x40,%eax
f010c053:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c058:	a0 ae c9 18 f0       	mov    0xf018c9ae,%al
f010c05d:	83 e0 7f             	and    $0x7f,%eax
f010c060:	a2 ae c9 18 f0       	mov    %al,0xf018c9ae
f010c065:	b8 a0 3a 25 f0       	mov    $0xf0253aa0,%eax
f010c06a:	c1 e8 18             	shr    $0x18,%eax
f010c06d:	a2 af c9 18 f0       	mov    %al,0xf018c9af
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c072:	a0 ad c9 18 f0       	mov    0xf018c9ad,%al
f010c077:	83 e0 ef             	and    $0xffffffef,%eax
f010c07a:	a2 ad c9 18 f0       	mov    %al,0xf018c9ad
f010c07f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c085:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c089:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c08c:	0f 01 1d 70 ca 18 f0 	lidtl  0xf018ca70
}
f010c093:	90                   	nop
f010c094:	c9                   	leave  
f010c095:	c3                   	ret    

f010c096 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c096:	55                   	push   %ebp
f010c097:	89 e5                	mov    %esp,%ebp
f010c099:	53                   	push   %ebx
f010c09a:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c09d:	83 ec 08             	sub    $0x8,%esp
f010c0a0:	ff 75 08             	pushl  0x8(%ebp)
f010c0a3:	68 9b 2d 13 f0       	push   $0xf0132d9b
f010c0a8:	e8 84 4d ff ff       	call   f0100e31 <cprintf>
f010c0ad:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c0b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b3:	83 ec 0c             	sub    $0xc,%esp
f010c0b6:	50                   	push   %eax
f010c0b7:	e8 fd 00 00 00       	call   f010c1b9 <print_regs>
f010c0bc:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c0bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c2:	8b 40 20             	mov    0x20(%eax),%eax
f010c0c5:	0f b7 c0             	movzwl %ax,%eax
f010c0c8:	83 ec 08             	sub    $0x8,%esp
f010c0cb:	50                   	push   %eax
f010c0cc:	68 ad 2d 13 f0       	push   $0xf0132dad
f010c0d1:	e8 5b 4d ff ff       	call   f0100e31 <cprintf>
f010c0d6:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c0d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0dc:	8b 40 24             	mov    0x24(%eax),%eax
f010c0df:	0f b7 c0             	movzwl %ax,%eax
f010c0e2:	83 ec 08             	sub    $0x8,%esp
f010c0e5:	50                   	push   %eax
f010c0e6:	68 c0 2d 13 f0       	push   $0xf0132dc0
f010c0eb:	e8 41 4d ff ff       	call   f0100e31 <cprintf>
f010c0f0:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c0f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f6:	8b 58 28             	mov    0x28(%eax),%ebx
f010c0f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0fc:	8b 40 28             	mov    0x28(%eax),%eax
f010c0ff:	83 ec 0c             	sub    $0xc,%esp
f010c102:	50                   	push   %eax
f010c103:	e8 d0 ee ff ff       	call   f010afd8 <trapname>
f010c108:	83 c4 10             	add    $0x10,%esp
f010c10b:	89 c2                	mov    %eax,%edx
f010c10d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c110:	8b 40 28             	mov    0x28(%eax),%eax
f010c113:	53                   	push   %ebx
f010c114:	52                   	push   %edx
f010c115:	50                   	push   %eax
f010c116:	68 d3 2d 13 f0       	push   $0xf0132dd3
f010c11b:	e8 11 4d ff ff       	call   f0100e31 <cprintf>
f010c120:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c123:	8b 45 08             	mov    0x8(%ebp),%eax
f010c126:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c129:	83 ec 08             	sub    $0x8,%esp
f010c12c:	50                   	push   %eax
f010c12d:	68 ea 2d 13 f0       	push   $0xf0132dea
f010c132:	e8 fa 4c ff ff       	call   f0100e31 <cprintf>
f010c137:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c13a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c13d:	8b 40 30             	mov    0x30(%eax),%eax
f010c140:	83 ec 08             	sub    $0x8,%esp
f010c143:	50                   	push   %eax
f010c144:	68 f9 2d 13 f0       	push   $0xf0132df9
f010c149:	e8 e3 4c ff ff       	call   f0100e31 <cprintf>
f010c14e:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c151:	8b 45 08             	mov    0x8(%ebp),%eax
f010c154:	8b 40 34             	mov    0x34(%eax),%eax
f010c157:	0f b7 c0             	movzwl %ax,%eax
f010c15a:	83 ec 08             	sub    $0x8,%esp
f010c15d:	50                   	push   %eax
f010c15e:	68 08 2e 13 f0       	push   $0xf0132e08
f010c163:	e8 c9 4c ff ff       	call   f0100e31 <cprintf>
f010c168:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c16b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c16e:	8b 40 38             	mov    0x38(%eax),%eax
f010c171:	83 ec 08             	sub    $0x8,%esp
f010c174:	50                   	push   %eax
f010c175:	68 1b 2e 13 f0       	push   $0xf0132e1b
f010c17a:	e8 b2 4c ff ff       	call   f0100e31 <cprintf>
f010c17f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c182:	8b 45 08             	mov    0x8(%ebp),%eax
f010c185:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c188:	83 ec 08             	sub    $0x8,%esp
f010c18b:	50                   	push   %eax
f010c18c:	68 2a 2e 13 f0       	push   $0xf0132e2a
f010c191:	e8 9b 4c ff ff       	call   f0100e31 <cprintf>
f010c196:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c199:	8b 45 08             	mov    0x8(%ebp),%eax
f010c19c:	8b 40 40             	mov    0x40(%eax),%eax
f010c19f:	0f b7 c0             	movzwl %ax,%eax
f010c1a2:	83 ec 08             	sub    $0x8,%esp
f010c1a5:	50                   	push   %eax
f010c1a6:	68 39 2e 13 f0       	push   $0xf0132e39
f010c1ab:	e8 81 4c ff ff       	call   f0100e31 <cprintf>
f010c1b0:	83 c4 10             	add    $0x10,%esp
}
f010c1b3:	90                   	nop
f010c1b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c1b7:	c9                   	leave  
f010c1b8:	c3                   	ret    

f010c1b9 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c1b9:	55                   	push   %ebp
f010c1ba:	89 e5                	mov    %esp,%ebp
f010c1bc:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1c2:	8b 00                	mov    (%eax),%eax
f010c1c4:	83 ec 08             	sub    $0x8,%esp
f010c1c7:	50                   	push   %eax
f010c1c8:	68 4c 2e 13 f0       	push   $0xf0132e4c
f010c1cd:	e8 5f 4c ff ff       	call   f0100e31 <cprintf>
f010c1d2:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c1d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d8:	8b 40 04             	mov    0x4(%eax),%eax
f010c1db:	83 ec 08             	sub    $0x8,%esp
f010c1de:	50                   	push   %eax
f010c1df:	68 5b 2e 13 f0       	push   $0xf0132e5b
f010c1e4:	e8 48 4c ff ff       	call   f0100e31 <cprintf>
f010c1e9:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c1ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ef:	8b 40 08             	mov    0x8(%eax),%eax
f010c1f2:	83 ec 08             	sub    $0x8,%esp
f010c1f5:	50                   	push   %eax
f010c1f6:	68 6a 2e 13 f0       	push   $0xf0132e6a
f010c1fb:	e8 31 4c ff ff       	call   f0100e31 <cprintf>
f010c200:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c203:	8b 45 08             	mov    0x8(%ebp),%eax
f010c206:	8b 40 0c             	mov    0xc(%eax),%eax
f010c209:	83 ec 08             	sub    $0x8,%esp
f010c20c:	50                   	push   %eax
f010c20d:	68 79 2e 13 f0       	push   $0xf0132e79
f010c212:	e8 1a 4c ff ff       	call   f0100e31 <cprintf>
f010c217:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c21a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21d:	8b 40 10             	mov    0x10(%eax),%eax
f010c220:	83 ec 08             	sub    $0x8,%esp
f010c223:	50                   	push   %eax
f010c224:	68 88 2e 13 f0       	push   $0xf0132e88
f010c229:	e8 03 4c ff ff       	call   f0100e31 <cprintf>
f010c22e:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c231:	8b 45 08             	mov    0x8(%ebp),%eax
f010c234:	8b 40 14             	mov    0x14(%eax),%eax
f010c237:	83 ec 08             	sub    $0x8,%esp
f010c23a:	50                   	push   %eax
f010c23b:	68 97 2e 13 f0       	push   $0xf0132e97
f010c240:	e8 ec 4b ff ff       	call   f0100e31 <cprintf>
f010c245:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c248:	8b 45 08             	mov    0x8(%ebp),%eax
f010c24b:	8b 40 18             	mov    0x18(%eax),%eax
f010c24e:	83 ec 08             	sub    $0x8,%esp
f010c251:	50                   	push   %eax
f010c252:	68 a6 2e 13 f0       	push   $0xf0132ea6
f010c257:	e8 d5 4b ff ff       	call   f0100e31 <cprintf>
f010c25c:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c25f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c262:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c265:	83 ec 08             	sub    $0x8,%esp
f010c268:	50                   	push   %eax
f010c269:	68 b5 2e 13 f0       	push   $0xf0132eb5
f010c26e:	e8 be 4b ff ff       	call   f0100e31 <cprintf>
f010c273:	83 c4 10             	add    $0x10,%esp
}
f010c276:	90                   	nop
f010c277:	c9                   	leave  
f010c278:	c3                   	ret    

f010c279 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c279:	55                   	push   %ebp
f010c27a:	89 e5                	mov    %esp,%ebp
f010c27c:	57                   	push   %edi
f010c27d:	56                   	push   %esi
f010c27e:	53                   	push   %ebx
f010c27f:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c282:	8b 45 08             	mov    0x8(%ebp),%eax
f010c285:	8b 40 28             	mov    0x28(%eax),%eax
f010c288:	83 f8 0e             	cmp    $0xe,%eax
f010c28b:	75 29                	jne    f010c2b6 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c28d:	83 ec 0c             	sub    $0xc,%esp
f010c290:	6a 01                	push   $0x1
f010c292:	e8 b9 14 00 00       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f010c297:	83 c4 10             	add    $0x10,%esp
f010c29a:	85 c0                	test   %eax,%eax
f010c29c:	74 05                	je     f010c2a3 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c29e:	e8 62 a1 ff ff       	call   f0106405 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c2a3:	83 ec 0c             	sub    $0xc,%esp
f010c2a6:	ff 75 08             	pushl  0x8(%ebp)
f010c2a9:	e8 51 02 00 00       	call   f010c4ff <fault_handler>
f010c2ae:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c2b1:	e9 bb 00 00 00       	jmp    f010c371 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c2b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b9:	8b 40 28             	mov    0x28(%eax),%eax
f010c2bc:	83 f8 30             	cmp    $0x30,%eax
f010c2bf:	75 42                	jne    f010c303 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c2c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c4:	8b 78 04             	mov    0x4(%eax),%edi
f010c2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ca:	8b 30                	mov    (%eax),%esi
f010c2cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2cf:	8b 58 10             	mov    0x10(%eax),%ebx
f010c2d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d5:	8b 48 18             	mov    0x18(%eax),%ecx
f010c2d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2db:	8b 50 14             	mov    0x14(%eax),%edx
f010c2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e1:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c2e4:	83 ec 08             	sub    $0x8,%esp
f010c2e7:	57                   	push   %edi
f010c2e8:	56                   	push   %esi
f010c2e9:	53                   	push   %ebx
f010c2ea:	51                   	push   %ecx
f010c2eb:	52                   	push   %edx
f010c2ec:	50                   	push   %eax
f010c2ed:	e8 a8 0b 00 00       	call   f010ce9a <syscall>
f010c2f2:	83 c4 20             	add    $0x20,%esp
f010c2f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c2f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2fe:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c301:	eb 6e                	jmp    f010c371 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c303:	8b 45 08             	mov    0x8(%ebp),%eax
f010c306:	8b 40 28             	mov    0x28(%eax),%eax
f010c309:	83 f8 08             	cmp    $0x8,%eax
f010c30c:	75 17                	jne    f010c325 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c30e:	83 ec 04             	sub    $0x4,%esp
f010c311:	68 c4 2e 13 f0       	push   $0xf0132ec4
f010c316:	68 e7 00 00 00       	push   $0xe7
f010c31b:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c320:	e8 8b 3e ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c325:	8b 45 08             	mov    0x8(%ebp),%eax
f010c328:	8b 40 28             	mov    0x28(%eax),%eax
f010c32b:	83 f8 20             	cmp    $0x20,%eax
f010c32e:	75 07                	jne    f010c337 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c330:	e8 93 a0 ff ff       	call   f01063c8 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c335:	eb 3a                	jmp    f010c371 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c337:	8b 45 08             	mov    0x8(%ebp),%eax
f010c33a:	8b 40 34             	mov    0x34(%eax),%eax
f010c33d:	66 83 f8 08          	cmp    $0x8,%ax
f010c341:	75 17                	jne    f010c35a <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c343:	83 ec 04             	sub    $0x4,%esp
f010c346:	68 e4 2e 13 f0       	push   $0xf0132ee4
f010c34b:	68 f4 00 00 00       	push   $0xf4
f010c350:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c355:	e8 56 3e ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c35a:	83 ec 04             	sub    $0x4,%esp
f010c35d:	68 00 2f 13 f0       	push   $0xf0132f00
f010c362:	68 f8 00 00 00       	push   $0xf8
f010c367:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c36c:	e8 3f 3e ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c371:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c374:	5b                   	pop    %ebx
f010c375:	5e                   	pop    %esi
f010c376:	5f                   	pop    %edi
f010c377:	5d                   	pop    %ebp
f010c378:	c3                   	ret    

f010c379 <trap>:

void trap(struct Trapframe *tf)
{
f010c379:	55                   	push   %ebp
f010c37a:	89 e5                	mov    %esp,%ebp
f010c37c:	57                   	push   %edi
f010c37d:	56                   	push   %esi
f010c37e:	53                   	push   %ebx
f010c37f:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c382:	e8 45 87 ff ff       	call   f0104acc <kclock_stop>

	int userTrap = 0;
f010c387:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c38e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c391:	8b 40 34             	mov    0x34(%eax),%eax
f010c394:	0f b7 c0             	movzwl %ax,%eax
f010c397:	83 e0 03             	and    $0x3,%eax
f010c39a:	83 f8 03             	cmp    $0x3,%eax
f010c39d:	75 49                	jne    f010c3e8 <trap+0x6f>
		assert(curenv);
f010c39f:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c3a4:	85 c0                	test   %eax,%eax
f010c3a6:	75 19                	jne    f010c3c1 <trap+0x48>
f010c3a8:	68 1f 2f 13 f0       	push   $0xf0132f1f
f010c3ad:	68 26 2f 13 f0       	push   $0xf0132f26
f010c3b2:	68 06 01 00 00       	push   $0x106
f010c3b7:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c3bc:	e8 ef 3d ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c3c1:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010c3c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ca:	89 c3                	mov    %eax,%ebx
f010c3cc:	b8 11 00 00 00       	mov    $0x11,%eax
f010c3d1:	89 d7                	mov    %edx,%edi
f010c3d3:	89 de                	mov    %ebx,%esi
f010c3d5:	89 c1                	mov    %eax,%ecx
f010c3d7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c3d9:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c3de:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c3e1:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c3e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3eb:	8b 40 28             	mov    0x28(%eax),%eax
f010c3ee:	83 f8 20             	cmp    $0x20,%eax
f010c3f1:	75 40                	jne    f010c433 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c3f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3f7:	0f 84 a6 00 00 00    	je     f010c4a3 <trap+0x12a>
		{
			assert(curenv);
f010c3fd:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c402:	85 c0                	test   %eax,%eax
f010c404:	75 19                	jne    f010c41f <trap+0xa6>
f010c406:	68 1f 2f 13 f0       	push   $0xf0132f1f
f010c40b:	68 26 2f 13 f0       	push   $0xf0132f26
f010c410:	68 12 01 00 00       	push   $0x112
f010c415:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c41a:	e8 91 3d ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c41f:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c424:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c42a:	42                   	inc    %edx
f010c42b:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c431:	eb 70                	jmp    f010c4a3 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c433:	8b 45 08             	mov    0x8(%ebp),%eax
f010c436:	8b 40 28             	mov    0x28(%eax),%eax
f010c439:	83 f8 0e             	cmp    $0xe,%eax
f010c43c:	75 65                	jne    f010c4a3 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c43e:	a0 08 3b 25 f0       	mov    0xf0253b08,%al
f010c443:	84 c0                	test   %al,%al
f010c445:	74 5c                	je     f010c4a3 <trap+0x12a>
			if (userTrap){
f010c447:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c44b:	74 2c                	je     f010c479 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c44d:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c452:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010c458:	8b 52 30             	mov    0x30(%edx),%edx
f010c45b:	89 d1                	mov    %edx,%ecx
f010c45d:	8a 15 08 3b 25 f0    	mov    0xf0253b08,%dl
f010c463:	0f b6 d2             	movzbl %dl,%edx
f010c466:	01 ca                	add    %ecx,%edx
f010c468:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c46b:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c470:	83 ec 0c             	sub    $0xc,%esp
f010c473:	50                   	push   %eax
f010c474:	e8 d3 d4 ff ff       	call   f010994c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c479:	8b 45 08             	mov    0x8(%ebp),%eax
f010c47c:	8b 40 30             	mov    0x30(%eax),%eax
f010c47f:	89 c2                	mov    %eax,%edx
f010c481:	a0 08 3b 25 f0       	mov    0xf0253b08,%al
f010c486:	0f b6 c0             	movzbl %al,%eax
f010c489:	01 d0                	add    %edx,%eax
f010c48b:	89 c2                	mov    %eax,%edx
f010c48d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c490:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c493:	e8 5f 86 ff ff       	call   f0104af7 <kclock_resume>
				env_pop_tf(tf);
f010c498:	83 ec 0c             	sub    $0xc,%esp
f010c49b:	ff 75 08             	pushl  0x8(%ebp)
f010c49e:	e8 fb d5 ff ff       	call   f0109a9e <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c4a3:	83 ec 0c             	sub    $0xc,%esp
f010c4a6:	ff 75 08             	pushl  0x8(%ebp)
f010c4a9:	e8 cb fd ff ff       	call   f010c279 <trap_dispatch>
f010c4ae:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c4b1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c4b5:	74 3d                	je     f010c4f4 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c4b7:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c4bc:	85 c0                	test   %eax,%eax
f010c4be:	74 0d                	je     f010c4cd <trap+0x154>
f010c4c0:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c4c5:	8b 40 54             	mov    0x54(%eax),%eax
f010c4c8:	83 f8 02             	cmp    $0x2,%eax
f010c4cb:	74 19                	je     f010c4e6 <trap+0x16d>
f010c4cd:	68 3c 2f 13 f0       	push   $0xf0132f3c
f010c4d2:	68 26 2f 13 f0       	push   $0xf0132f26
f010c4d7:	68 27 01 00 00       	push   $0x127
f010c4dc:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c4e1:	e8 ca 3c ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c4e6:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c4eb:	83 ec 0c             	sub    $0xc,%esp
f010c4ee:	50                   	push   %eax
f010c4ef:	e8 58 d4 ff ff       	call   f010994c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c4f4:	83 ec 0c             	sub    $0xc,%esp
f010c4f7:	ff 75 08             	pushl  0x8(%ebp)
f010c4fa:	e8 9f d5 ff ff       	call   f0109a9e <env_pop_tf>

f010c4ff <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c4ff:	55                   	push   %ebp
f010c500:	89 e5                	mov    %esp,%ebp
f010c502:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c505:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c50c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c50f:	8b 40 34             	mov    0x34(%eax),%eax
f010c512:	0f b7 c0             	movzwl %ax,%eax
f010c515:	83 e0 03             	and    $0x3,%eax
f010c518:	83 f8 03             	cmp    $0x3,%eax
f010c51b:	75 07                	jne    f010c524 <fault_handler+0x25>
		userTrap = 1;
f010c51d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c524:	0f 20 d0             	mov    %cr2,%eax
f010c527:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c52a:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c52d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c530:	a1 80 3a 25 f0       	mov    0xf0253a80,%eax
f010c535:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c538:	75 2b                	jne    f010c565 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c53a:	a0 84 3a 25 f0       	mov    0xf0253a84,%al
f010c53f:	40                   	inc    %eax
f010c540:	a2 84 3a 25 f0       	mov    %al,0xf0253a84
		if (num_repeated_fault == 3)
f010c545:	a0 84 3a 25 f0       	mov    0xf0253a84,%al
f010c54a:	3c 03                	cmp    $0x3,%al
f010c54c:	75 1e                	jne    f010c56c <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c54e:	ff 75 ec             	pushl  -0x14(%ebp)
f010c551:	68 6c 2f 13 f0       	push   $0xf0132f6c
f010c556:	68 4a 01 00 00       	push   $0x14a
f010c55b:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c560:	e8 4b 3c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c565:	c6 05 84 3a 25 f0 00 	movb   $0x0,0xf0253a84
	}
	last_fault_va = fault_va ;
f010c56c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c56f:	a3 80 3a 25 f0       	mov    %eax,0xf0253a80
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c578:	75 29                	jne    f010c5a3 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c57a:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c581:	77 40                	ja     f010c5c3 <fault_handler+0xc4>
f010c583:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c58a:	76 37                	jbe    f010c5c3 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c58c:	83 ec 04             	sub    $0x4,%esp
f010c58f:	68 b8 2f 13 f0       	push   $0xf0132fb8
f010c594:	68 56 01 00 00       	push   $0x156
f010c599:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c59e:	e8 0d 3c ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c5a3:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c5aa:	76 17                	jbe    f010c5c3 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c5ac:	83 ec 04             	sub    $0x4,%esp
f010c5af:	68 dc 2f 13 f0       	push   $0xf0132fdc
f010c5b4:	68 5c 01 00 00       	push   $0x15c
f010c5b9:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c5be:	e8 ed 3b ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c5c3:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c5c8:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c5cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5ce:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c5d7:	c1 ea 16             	shr    $0x16,%edx
f010c5da:	c1 e2 02             	shl    $0x2,%edx
f010c5dd:	01 d0                	add    %edx,%eax
f010c5df:	8b 00                	mov    (%eax),%eax
f010c5e1:	83 e0 01             	and    $0x1,%eax
f010c5e4:	85 c0                	test   %eax,%eax
f010c5e6:	75 28                	jne    f010c610 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c5e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5eb:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c5f1:	8d 50 01             	lea    0x1(%eax),%edx
f010c5f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5f7:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c5fd:	83 ec 08             	sub    $0x8,%esp
f010c600:	ff 75 ec             	pushl  -0x14(%ebp)
f010c603:	ff 75 e8             	pushl  -0x18(%ebp)
f010c606:	e8 2a 12 00 00       	call   f010d835 <table_fault_handler>
f010c60b:	83 c4 10             	add    $0x10,%esp
f010c60e:	eb 7e                	jmp    f010c68e <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c610:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c613:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c619:	83 ec 08             	sub    $0x8,%esp
f010c61c:	ff 75 ec             	pushl  -0x14(%ebp)
f010c61f:	50                   	push   %eax
f010c620:	e8 be ba ff ff       	call   f01080e3 <pt_get_page_permissions>
f010c625:	83 c4 10             	add    $0x10,%esp
f010c628:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c62b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c62e:	83 e0 01             	and    $0x1,%eax
f010c631:	85 c0                	test   %eax,%eax
f010c633:	74 17                	je     f010c64c <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c635:	ff 75 ec             	pushl  -0x14(%ebp)
f010c638:	68 00 30 13 f0       	push   $0xf0133000
f010c63d:	68 7b 01 00 00       	push   $0x17b
f010c642:	68 d3 2e 13 f0       	push   $0xf0132ed3
f010c647:	e8 64 3b ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c64c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c64f:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c655:	8d 50 01             	lea    0x1(%eax),%edx
f010c658:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c65b:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c661:	e8 ad 11 00 00       	call   f010d813 <isBufferingEnabled>
f010c666:	84 c0                	test   %al,%al
f010c668:	74 13                	je     f010c67d <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c66a:	83 ec 08             	sub    $0x8,%esp
f010c66d:	ff 75 ec             	pushl  -0x14(%ebp)
f010c670:	ff 75 e8             	pushl  -0x18(%ebp)
f010c673:	e8 60 12 00 00       	call   f010d8d8 <__page_fault_handler_with_buffering>
f010c678:	83 c4 10             	add    $0x10,%esp
f010c67b:	eb 11                	jmp    f010c68e <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c67d:	83 ec 08             	sub    $0x8,%esp
f010c680:	ff 75 ec             	pushl  -0x14(%ebp)
f010c683:	ff 75 e8             	pushl  -0x18(%ebp)
f010c686:	e8 cf 11 00 00       	call   f010d85a <page_fault_handler>
f010c68b:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c68e:	0f 20 d8             	mov    %cr3,%eax
f010c691:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c694:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c697:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c69a:	90                   	nop
f010c69b:	c9                   	leave  
f010c69c:	c3                   	ret    
f010c69d:	90                   	nop

f010c69e <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c69e:	6a 0e                	push   $0xe
f010c6a0:	e9 ed 00 00 00       	jmp    f010c792 <_alltraps>
f010c6a5:	90                   	nop

f010c6a6 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c6a6:	6a 00                	push   $0x0
f010c6a8:	6a 30                	push   $0x30
f010c6aa:	e9 e3 00 00 00       	jmp    f010c792 <_alltraps>
f010c6af:	90                   	nop

f010c6b0 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c6b0:	6a 08                	push   $0x8
f010c6b2:	e9 db 00 00 00       	jmp    f010c792 <_alltraps>
f010c6b7:	90                   	nop

f010c6b8 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c6b8:	6a 00                	push   $0x0
f010c6ba:	6a 00                	push   $0x0
f010c6bc:	e9 d1 00 00 00       	jmp    f010c792 <_alltraps>
f010c6c1:	90                   	nop

f010c6c2 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c6c2:	6a 00                	push   $0x0
f010c6c4:	6a 01                	push   $0x1
f010c6c6:	e9 c7 00 00 00       	jmp    f010c792 <_alltraps>
f010c6cb:	90                   	nop

f010c6cc <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c6cc:	6a 00                	push   $0x0
f010c6ce:	6a 02                	push   $0x2
f010c6d0:	e9 bd 00 00 00       	jmp    f010c792 <_alltraps>
f010c6d5:	90                   	nop

f010c6d6 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c6d6:	6a 00                	push   $0x0
f010c6d8:	6a 03                	push   $0x3
f010c6da:	e9 b3 00 00 00       	jmp    f010c792 <_alltraps>
f010c6df:	90                   	nop

f010c6e0 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c6e0:	6a 00                	push   $0x0
f010c6e2:	6a 04                	push   $0x4
f010c6e4:	e9 a9 00 00 00       	jmp    f010c792 <_alltraps>
f010c6e9:	90                   	nop

f010c6ea <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c6ea:	6a 00                	push   $0x0
f010c6ec:	6a 05                	push   $0x5
f010c6ee:	e9 9f 00 00 00       	jmp    f010c792 <_alltraps>
f010c6f3:	90                   	nop

f010c6f4 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c6f4:	6a 00                	push   $0x0
f010c6f6:	6a 06                	push   $0x6
f010c6f8:	e9 95 00 00 00       	jmp    f010c792 <_alltraps>
f010c6fd:	90                   	nop

f010c6fe <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c6fe:	6a 00                	push   $0x0
f010c700:	6a 07                	push   $0x7
f010c702:	e9 8b 00 00 00       	jmp    f010c792 <_alltraps>
f010c707:	90                   	nop

f010c708 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c708:	6a 0a                	push   $0xa
f010c70a:	e9 83 00 00 00       	jmp    f010c792 <_alltraps>
f010c70f:	90                   	nop

f010c710 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c710:	6a 0b                	push   $0xb
f010c712:	eb 7e                	jmp    f010c792 <_alltraps>

f010c714 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c714:	6a 0c                	push   $0xc
f010c716:	eb 7a                	jmp    f010c792 <_alltraps>

f010c718 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c718:	6a 0d                	push   $0xd
f010c71a:	eb 76                	jmp    f010c792 <_alltraps>

f010c71c <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c71c:	6a 00                	push   $0x0
f010c71e:	6a 10                	push   $0x10
f010c720:	eb 70                	jmp    f010c792 <_alltraps>

f010c722 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c722:	6a 11                	push   $0x11
f010c724:	eb 6c                	jmp    f010c792 <_alltraps>

f010c726 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c726:	6a 00                	push   $0x0
f010c728:	6a 12                	push   $0x12
f010c72a:	eb 66                	jmp    f010c792 <_alltraps>

f010c72c <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c72c:	6a 00                	push   $0x0
f010c72e:	6a 13                	push   $0x13
f010c730:	eb 60                	jmp    f010c792 <_alltraps>

f010c732 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c732:	6a 00                	push   $0x0
f010c734:	6a 20                	push   $0x20
f010c736:	eb 5a                	jmp    f010c792 <_alltraps>

f010c738 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c738:	6a 00                	push   $0x0
f010c73a:	6a 21                	push   $0x21
f010c73c:	eb 54                	jmp    f010c792 <_alltraps>

f010c73e <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c73e:	6a 00                	push   $0x0
f010c740:	6a 22                	push   $0x22
f010c742:	eb 4e                	jmp    f010c792 <_alltraps>

f010c744 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c744:	6a 00                	push   $0x0
f010c746:	6a 23                	push   $0x23
f010c748:	eb 48                	jmp    f010c792 <_alltraps>

f010c74a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c74a:	6a 00                	push   $0x0
f010c74c:	6a 24                	push   $0x24
f010c74e:	eb 42                	jmp    f010c792 <_alltraps>

f010c750 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c750:	6a 00                	push   $0x0
f010c752:	6a 25                	push   $0x25
f010c754:	eb 3c                	jmp    f010c792 <_alltraps>

f010c756 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c756:	6a 00                	push   $0x0
f010c758:	6a 26                	push   $0x26
f010c75a:	eb 36                	jmp    f010c792 <_alltraps>

f010c75c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c75c:	6a 00                	push   $0x0
f010c75e:	6a 27                	push   $0x27
f010c760:	eb 30                	jmp    f010c792 <_alltraps>

f010c762 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c762:	6a 00                	push   $0x0
f010c764:	6a 28                	push   $0x28
f010c766:	eb 2a                	jmp    f010c792 <_alltraps>

f010c768 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c768:	6a 00                	push   $0x0
f010c76a:	6a 29                	push   $0x29
f010c76c:	eb 24                	jmp    f010c792 <_alltraps>

f010c76e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c76e:	6a 00                	push   $0x0
f010c770:	6a 2a                	push   $0x2a
f010c772:	eb 1e                	jmp    f010c792 <_alltraps>

f010c774 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c774:	6a 00                	push   $0x0
f010c776:	6a 2b                	push   $0x2b
f010c778:	eb 18                	jmp    f010c792 <_alltraps>

f010c77a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c77a:	6a 00                	push   $0x0
f010c77c:	6a 2c                	push   $0x2c
f010c77e:	eb 12                	jmp    f010c792 <_alltraps>

f010c780 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c780:	6a 00                	push   $0x0
f010c782:	6a 2d                	push   $0x2d
f010c784:	eb 0c                	jmp    f010c792 <_alltraps>

f010c786 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c786:	6a 00                	push   $0x0
f010c788:	6a 2e                	push   $0x2e
f010c78a:	eb 06                	jmp    f010c792 <_alltraps>

f010c78c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c78c:	6a 00                	push   $0x0
f010c78e:	6a 2f                	push   $0x2f
f010c790:	eb 00                	jmp    f010c792 <_alltraps>

f010c792 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c792:	1e                   	push   %ds
push %es
f010c793:	06                   	push   %es
pushal
f010c794:	60                   	pusha  

mov $(GD_KD), %ax
f010c795:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c799:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c79b:	8e c0                	mov    %eax,%es

push %esp
f010c79d:	54                   	push   %esp

call trap
f010c79e:	e8 d6 fb ff ff       	call   f010c379 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c7a3:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c7a4:	61                   	popa   
pop %es
f010c7a5:	07                   	pop    %es
pop %ds
f010c7a6:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c7a7:	83 c4 08             	add    $0x8,%esp

iret
f010c7aa:	cf                   	iret   

f010c7ab <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c7ab:	55                   	push   %ebp
f010c7ac:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c7ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7b1:	8b 15 f0 be 2b f0    	mov    0xf02bbef0,%edx
f010c7b7:	29 d0                	sub    %edx,%eax
f010c7b9:	c1 f8 02             	sar    $0x2,%eax
f010c7bc:	89 c2                	mov    %eax,%edx
f010c7be:	89 d0                	mov    %edx,%eax
f010c7c0:	c1 e0 03             	shl    $0x3,%eax
f010c7c3:	01 d0                	add    %edx,%eax
f010c7c5:	c1 e0 03             	shl    $0x3,%eax
f010c7c8:	01 d0                	add    %edx,%eax
f010c7ca:	c1 e0 03             	shl    $0x3,%eax
f010c7cd:	01 d0                	add    %edx,%eax
f010c7cf:	c1 e0 03             	shl    $0x3,%eax
f010c7d2:	01 d0                	add    %edx,%eax
f010c7d4:	89 c1                	mov    %eax,%ecx
f010c7d6:	c1 e1 0f             	shl    $0xf,%ecx
f010c7d9:	01 c8                	add    %ecx,%eax
f010c7db:	c1 e0 03             	shl    $0x3,%eax
f010c7de:	01 d0                	add    %edx,%eax
f010c7e0:	f7 d8                	neg    %eax
}
f010c7e2:	5d                   	pop    %ebp
f010c7e3:	c3                   	ret    

f010c7e4 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c7e4:	55                   	push   %ebp
f010c7e5:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c7e7:	ff 75 08             	pushl  0x8(%ebp)
f010c7ea:	e8 bc ff ff ff       	call   f010c7ab <to_frame_number>
f010c7ef:	83 c4 04             	add    $0x4,%esp
f010c7f2:	c1 e0 0c             	shl    $0xc,%eax
}
f010c7f5:	c9                   	leave  
f010c7f6:	c3                   	ret    

f010c7f7 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c7f7:	55                   	push   %ebp
f010c7f8:	89 e5                	mov    %esp,%ebp
f010c7fa:	83 ec 18             	sub    $0x18,%esp
f010c7fd:	8b 45 10             	mov    0x10(%ebp),%eax
f010c800:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c803:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c807:	74 23                	je     f010c82c <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c809:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c80e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c811:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010c817:	83 c2 5c             	add    $0x5c,%edx
f010c81a:	83 ec 04             	sub    $0x4,%esp
f010c81d:	50                   	push   %eax
f010c81e:	52                   	push   %edx
f010c81f:	68 f0 31 13 f0       	push   $0xf01331f0
f010c824:	e8 08 46 ff ff       	call   f0100e31 <cprintf>
f010c829:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c82c:	83 ec 04             	sub    $0x4,%esp
f010c82f:	ff 75 08             	pushl  0x8(%ebp)
f010c832:	ff 75 0c             	pushl  0xc(%ebp)
f010c835:	68 f9 31 13 f0       	push   $0xf01331f9
f010c83a:	e8 f2 45 ff ff       	call   f0100e31 <cprintf>
f010c83f:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c842:	90                   	nop
f010c843:	c9                   	leave  
f010c844:	c3                   	ret    

f010c845 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c845:	55                   	push   %ebp
f010c846:	89 e5                	mov    %esp,%ebp
f010c848:	83 ec 18             	sub    $0x18,%esp
f010c84b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c84e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c851:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c855:	83 ec 08             	sub    $0x8,%esp
f010c858:	50                   	push   %eax
f010c859:	68 fe 31 13 f0       	push   $0xf01331fe
f010c85e:	e8 ce 45 ff ff       	call   f0100e31 <cprintf>
f010c863:	83 c4 10             	add    $0x10,%esp
}
f010c866:	90                   	nop
f010c867:	c9                   	leave  
f010c868:	c3                   	ret    

f010c869 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c869:	55                   	push   %ebp
f010c86a:	89 e5                	mov    %esp,%ebp
f010c86c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c86f:	e8 f3 43 ff ff       	call   f0100c67 <cons_getc2>
f010c874:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c877:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c87a:	c9                   	leave  
f010c87b:	c3                   	ret    

f010c87c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c87c:	55                   	push   %ebp
f010c87d:	89 e5                	mov    %esp,%ebp
f010c87f:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c882:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c887:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c88a:	83 ec 0c             	sub    $0xc,%esp
f010c88d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c890:	50                   	push   %eax
f010c891:	e8 8f aa ff ff       	call   f0107325 <allocate_frame>
f010c896:	83 c4 10             	add    $0x10,%esp
f010c899:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c89c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c8a0:	75 08                	jne    f010c8aa <__sys_allocate_page+0x2e>
		return r ;
f010c8a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c8a5:	e9 d3 00 00 00       	jmp    f010c97d <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c8aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ad:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c8b2:	77 0c                	ja     f010c8c0 <__sys_allocate_page+0x44>
f010c8b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8b7:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c8bc:	85 c0                	test   %eax,%eax
f010c8be:	74 0a                	je     f010c8ca <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c8c0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8c5:	e9 b3 00 00 00       	jmp    f010c97d <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c8ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8cd:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c8d2:	83 f8 04             	cmp    $0x4,%eax
f010c8d5:	74 0a                	je     f010c8e1 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c8d7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8dc:	e9 9c 00 00 00       	jmp    f010c97d <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c8e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c8e4:	83 ec 0c             	sub    $0xc,%esp
f010c8e7:	50                   	push   %eax
f010c8e8:	e8 f7 fe ff ff       	call   f010c7e4 <to_physical_address>
f010c8ed:	83 c4 10             	add    $0x10,%esp
f010c8f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c8f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c8f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8fc:	c1 e8 0c             	shr    $0xc,%eax
f010c8ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c902:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f010c907:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c90a:	72 17                	jb     f010c923 <__sys_allocate_page+0xa7>
f010c90c:	ff 75 e8             	pushl  -0x18(%ebp)
f010c90f:	68 04 32 13 f0       	push   $0xf0133204
f010c914:	68 8d 00 00 00       	push   $0x8d
f010c919:	68 33 32 13 f0       	push   $0xf0133233
f010c91e:	e8 8d 38 ff ff       	call   f01001b0 <_panic>
f010c923:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c926:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c92b:	83 ec 04             	sub    $0x4,%esp
f010c92e:	68 00 10 00 00       	push   $0x1000
f010c933:	6a 00                	push   $0x0
f010c935:	50                   	push   %eax
f010c936:	e8 c1 26 02 00       	call   f012effc <memset>
f010c93b:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c93e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c941:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c944:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c947:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c94d:	ff 75 0c             	pushl  0xc(%ebp)
f010c950:	51                   	push   %ecx
f010c951:	52                   	push   %edx
f010c952:	50                   	push   %eax
f010c953:	e8 68 ad ff ff       	call   f01076c0 <map_frame>
f010c958:	83 c4 10             	add    $0x10,%esp
f010c95b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c95e:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c962:	75 14                	jne    f010c978 <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c964:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c967:	83 ec 0c             	sub    $0xc,%esp
f010c96a:	50                   	push   %eax
f010c96b:	e8 47 ab ff ff       	call   f01074b7 <decrement_references>
f010c970:	83 c4 10             	add    $0x10,%esp
		return r;
f010c973:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c976:	eb 05                	jmp    f010c97d <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c978:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c97d:	c9                   	leave  
f010c97e:	c3                   	ret    

f010c97f <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c97f:	55                   	push   %ebp
f010c980:	89 e5                	mov    %esp,%ebp
f010c982:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c985:	83 ec 04             	sub    $0x4,%esp
f010c988:	68 47 32 13 f0       	push   $0xf0133247
f010c98d:	68 b4 00 00 00       	push   $0xb4
f010c992:	68 33 32 13 f0       	push   $0xf0133233
f010c997:	e8 14 38 ff ff       	call   f01001b0 <_panic>

f010c99c <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c99c:	55                   	push   %ebp
f010c99d:	89 e5                	mov    %esp,%ebp
f010c99f:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c9a2:	83 ec 04             	sub    $0x4,%esp
f010c9a5:	68 68 32 13 f0       	push   $0xf0133268
f010c9aa:	68 c5 00 00 00       	push   $0xc5
f010c9af:	68 33 32 13 f0       	push   $0xf0133233
f010c9b4:	e8 f7 37 ff ff       	call   f01001b0 <_panic>

f010c9b9 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c9b9:	55                   	push   %ebp
f010c9ba:	89 e5                	mov    %esp,%ebp
f010c9bc:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c9bf:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010c9c4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c9ca:	83 ec 04             	sub    $0x4,%esp
f010c9cd:	ff 75 0c             	pushl  0xc(%ebp)
f010c9d0:	ff 75 08             	pushl  0x8(%ebp)
f010c9d3:	50                   	push   %eax
f010c9d4:	e8 36 c2 ff ff       	call   f0108c0f <calculate_required_frames>
f010c9d9:	83 c4 10             	add    $0x10,%esp
}
f010c9dc:	c9                   	leave  
f010c9dd:	c3                   	ret    

f010c9de <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c9de:	55                   	push   %ebp
f010c9df:	89 e5                	mov    %esp,%ebp
f010c9e1:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9e4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9e7:	83 ec 0c             	sub    $0xc,%esp
f010c9ea:	50                   	push   %eax
f010c9eb:	e8 40 af ff ff       	call   f0107930 <calculate_available_frames>
f010c9f0:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c9f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9f9:	01 d0                	add    %edx,%eax
}
f010c9fb:	c9                   	leave  
f010c9fc:	c3                   	ret    

f010c9fd <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c9fd:	55                   	push   %ebp
f010c9fe:	89 e5                	mov    %esp,%ebp
f010ca00:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca03:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca06:	83 ec 0c             	sub    $0xc,%esp
f010ca09:	50                   	push   %eax
f010ca0a:	e8 21 af ff ff       	call   f0107930 <calculate_available_frames>
f010ca0f:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010ca12:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca15:	c9                   	leave  
f010ca16:	c3                   	ret    

f010ca17 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010ca17:	55                   	push   %ebp
f010ca18:	89 e5                	mov    %esp,%ebp
f010ca1a:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca1d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca20:	83 ec 0c             	sub    $0xc,%esp
f010ca23:	50                   	push   %eax
f010ca24:	e8 07 af ff ff       	call   f0107930 <calculate_available_frames>
f010ca29:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ca2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010ca2f:	c9                   	leave  
f010ca30:	c3                   	ret    

f010ca31 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010ca31:	55                   	push   %ebp
f010ca32:	89 e5                	mov    %esp,%ebp
f010ca34:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010ca37:	83 ec 0c             	sub    $0xc,%esp
f010ca3a:	ff 75 08             	pushl  0x8(%ebp)
f010ca3d:	e8 f0 12 02 00       	call   f012dd32 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010ca42:	83 c4 10             	add    $0x10,%esp
}
f010ca45:	c9                   	leave  
f010ca46:	c3                   	ret    

f010ca47 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010ca47:	55                   	push   %ebp
f010ca48:	89 e5                	mov    %esp,%ebp
f010ca4a:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010ca4d:	e8 38 12 02 00       	call   f012dc8a <scarce_memory>
}
f010ca52:	90                   	nop
f010ca53:	c9                   	leave  
f010ca54:	c3                   	ret    

f010ca55 <sys_clearFFL>:

void sys_clearFFL()
{
f010ca55:	55                   	push   %ebp
f010ca56:	89 e5                	mov    %esp,%ebp
f010ca58:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ca5b:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f010ca60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ca63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca6a:	eb 12                	jmp    f010ca7e <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ca6c:	83 ec 0c             	sub    $0xc,%esp
f010ca6f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca72:	50                   	push   %eax
f010ca73:	e8 ad a8 ff ff       	call   f0107325 <allocate_frame>
f010ca78:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca7b:	ff 45 f4             	incl   -0xc(%ebp)
f010ca7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca81:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ca84:	7c e6                	jl     f010ca6c <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ca86:	90                   	nop
f010ca87:	c9                   	leave  
f010ca88:	c3                   	ret    

f010ca89 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ca89:	55                   	push   %ebp
f010ca8a:	89 e5                	mov    %esp,%ebp
f010ca8c:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ca8f:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010ca94:	83 ec 0c             	sub    $0xc,%esp
f010ca97:	50                   	push   %eax
f010ca98:	e8 10 7b ff ff       	call   f01045ad <pf_calculate_allocated_pages>
f010ca9d:	83 c4 10             	add    $0x10,%esp
}
f010caa0:	c9                   	leave  
f010caa1:	c3                   	ret    

f010caa2 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010caa2:	55                   	push   %ebp
f010caa3:	89 e5                	mov    %esp,%ebp
f010caa5:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010caa8:	e8 66 0d 00 00       	call   f010d813 <isBufferingEnabled>
f010caad:	84 c0                	test   %al,%al
f010caaf:	74 19                	je     f010caca <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cab1:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cab6:	83 ec 04             	sub    $0x4,%esp
f010cab9:	ff 75 0c             	pushl  0xc(%ebp)
f010cabc:	ff 75 08             	pushl  0x8(%ebp)
f010cabf:	50                   	push   %eax
f010cac0:	e8 80 c1 ff ff       	call   f0108c45 <__free_user_mem_with_buffering>
f010cac5:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cac8:	eb 18                	jmp    f010cae2 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010caca:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cacf:	83 ec 04             	sub    $0x4,%esp
f010cad2:	ff 75 0c             	pushl  0xc(%ebp)
f010cad5:	ff 75 08             	pushl  0x8(%ebp)
f010cad8:	50                   	push   %eax
f010cad9:	e8 59 c1 ff ff       	call   f0108c37 <free_user_mem>
f010cade:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cae1:	90                   	nop
}
f010cae2:	c9                   	leave  
f010cae3:	c3                   	ret    

f010cae4 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cae4:	55                   	push   %ebp
f010cae5:	89 e5                	mov    %esp,%ebp
f010cae7:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010caea:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010caef:	83 ec 04             	sub    $0x4,%esp
f010caf2:	ff 75 0c             	pushl  0xc(%ebp)
f010caf5:	ff 75 08             	pushl  0x8(%ebp)
f010caf8:	50                   	push   %eax
f010caf9:	e8 2b c1 ff ff       	call   f0108c29 <allocate_user_mem>
f010cafe:	83 c4 10             	add    $0x10,%esp
	return;
f010cb01:	90                   	nop
}
f010cb02:	c9                   	leave  
f010cb03:	c3                   	ret    

f010cb04 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cb04:	55                   	push   %ebp
f010cb05:	89 e5                	mov    %esp,%ebp
f010cb07:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cb0a:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb0f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cb15:	ff 75 10             	pushl  0x10(%ebp)
f010cb18:	ff 75 0c             	pushl  0xc(%ebp)
f010cb1b:	ff 75 08             	pushl  0x8(%ebp)
f010cb1e:	50                   	push   %eax
f010cb1f:	e8 b7 c0 ff ff       	call   f0108bdb <allocate_chunk>
f010cb24:	83 c4 10             	add    $0x10,%esp
	return;
f010cb27:	90                   	nop
}
f010cb28:	c9                   	leave  
f010cb29:	c3                   	ret    

f010cb2a <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cb2a:	55                   	push   %ebp
f010cb2b:	89 e5                	mov    %esp,%ebp
f010cb2d:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cb30:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb35:	ff 75 10             	pushl  0x10(%ebp)
f010cb38:	ff 75 0c             	pushl  0xc(%ebp)
f010cb3b:	ff 75 08             	pushl  0x8(%ebp)
f010cb3e:	50                   	push   %eax
f010cb3f:	e8 1e c1 ff ff       	call   f0108c62 <move_user_mem>
f010cb44:	83 c4 10             	add    $0x10,%esp
	return;
f010cb47:	90                   	nop
}
f010cb48:	c9                   	leave  
f010cb49:	c3                   	ret    

f010cb4a <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cb4a:	55                   	push   %ebp
f010cb4b:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cb4d:	a1 cc be 2b f0       	mov    0xf02bbecc,%eax
}
f010cb52:	5d                   	pop    %ebp
f010cb53:	c3                   	ret    

f010cb54 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cb54:	55                   	push   %ebp
f010cb55:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cb57:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb5a:	a3 cc be 2b f0       	mov    %eax,0xf02bbecc
}
f010cb5f:	90                   	nop
f010cb60:	5d                   	pop    %ebp
f010cb61:	c3                   	ret    

f010cb62 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cb62:	55                   	push   %ebp
f010cb63:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cb65:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb6a:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010cb70:	8b 52 38             	mov    0x38(%edx),%edx
f010cb73:	80 e6 fd             	and    $0xfd,%dh
f010cb76:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb79:	90                   	nop
f010cb7a:	5d                   	pop    %ebp
f010cb7b:	c3                   	ret    

f010cb7c <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cb7c:	55                   	push   %ebp
f010cb7d:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cb7f:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cb84:	8b 15 54 32 25 f0    	mov    0xf0253254,%edx
f010cb8a:	8b 52 38             	mov    0x38(%edx),%edx
f010cb8d:	80 ce 02             	or     $0x2,%dh
f010cb90:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb93:	90                   	nop
f010cb94:	5d                   	pop    %ebp
f010cb95:	c3                   	ret    

f010cb96 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cb96:	55                   	push   %ebp
f010cb97:	89 e5                	mov    %esp,%ebp
f010cb99:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cb9c:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cba1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cba4:	83 ec 04             	sub    $0x4,%esp
f010cba7:	ff 75 0c             	pushl  0xc(%ebp)
f010cbaa:	ff 75 08             	pushl  0x8(%ebp)
f010cbad:	50                   	push   %eax
f010cbae:	e8 f8 0f 00 00       	call   f010dbab <createSemaphore>
f010cbb3:	83 c4 10             	add    $0x10,%esp
}
f010cbb6:	c9                   	leave  
f010cbb7:	c3                   	ret    

f010cbb8 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cbb8:	55                   	push   %ebp
f010cbb9:	89 e5                	mov    %esp,%ebp
f010cbbb:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cbbe:	83 ec 08             	sub    $0x8,%esp
f010cbc1:	ff 75 0c             	pushl  0xc(%ebp)
f010cbc4:	ff 75 08             	pushl  0x8(%ebp)
f010cbc7:	e8 fc 0f 00 00       	call   f010dbc8 <waitSemaphore>
f010cbcc:	83 c4 10             	add    $0x10,%esp
}
f010cbcf:	90                   	nop
f010cbd0:	c9                   	leave  
f010cbd1:	c3                   	ret    

f010cbd2 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cbd2:	55                   	push   %ebp
f010cbd3:	89 e5                	mov    %esp,%ebp
f010cbd5:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cbd8:	83 ec 08             	sub    $0x8,%esp
f010cbdb:	ff 75 0c             	pushl  0xc(%ebp)
f010cbde:	ff 75 08             	pushl  0x8(%ebp)
f010cbe1:	e8 ff 0f 00 00       	call   f010dbe5 <signalSemaphore>
f010cbe6:	83 c4 10             	add    $0x10,%esp
}
f010cbe9:	90                   	nop
f010cbea:	c9                   	leave  
f010cbeb:	c3                   	ret    

f010cbec <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cbec:	55                   	push   %ebp
f010cbed:	89 e5                	mov    %esp,%ebp
f010cbef:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cbf2:	83 ec 08             	sub    $0x8,%esp
f010cbf5:	ff 75 0c             	pushl  0xc(%ebp)
f010cbf8:	ff 75 08             	pushl  0x8(%ebp)
f010cbfb:	e8 51 0e 00 00       	call   f010da51 <get_semaphore_object_ID>
f010cc00:	83 c4 10             	add    $0x10,%esp
f010cc03:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cc06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc0a:	78 06                	js     f010cc12 <sys_getSemaphoreValue+0x26>
f010cc0c:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cc10:	7e 19                	jle    f010cc2b <sys_getSemaphoreValue+0x3f>
f010cc12:	68 88 32 13 f0       	push   $0xf0133288
f010cc17:	68 ad 32 13 f0       	push   $0xf01332ad
f010cc1c:	68 4d 01 00 00       	push   $0x14d
f010cc21:	68 33 32 13 f0       	push   $0xf0133233
f010cc26:	e8 85 35 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010cc2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cc2e:	89 d0                	mov    %edx,%eax
f010cc30:	c1 e0 02             	shl    $0x2,%eax
f010cc33:	01 d0                	add    %edx,%eax
f010cc35:	01 c0                	add    %eax,%eax
f010cc37:	01 d0                	add    %edx,%eax
f010cc39:	01 c0                	add    %eax,%eax
f010cc3b:	01 d0                	add    %edx,%eax
f010cc3d:	c1 e0 02             	shl    $0x2,%eax
f010cc40:	05 14 9b 2b f0       	add    $0xf02b9b14,%eax
f010cc45:	8b 00                	mov    (%eax),%eax
}
f010cc47:	c9                   	leave  
f010cc48:	c3                   	ret    

f010cc49 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cc49:	55                   	push   %ebp
f010cc4a:	89 e5                	mov    %esp,%ebp
f010cc4c:	83 ec 18             	sub    $0x18,%esp
f010cc4f:	8b 45 10             	mov    0x10(%ebp),%eax
f010cc52:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cc55:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cc59:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cc5e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc61:	83 ec 0c             	sub    $0xc,%esp
f010cc64:	ff 75 14             	pushl  0x14(%ebp)
f010cc67:	52                   	push   %edx
f010cc68:	ff 75 0c             	pushl  0xc(%ebp)
f010cc6b:	ff 75 08             	pushl  0x8(%ebp)
f010cc6e:	50                   	push   %eax
f010cc6f:	e8 4d b2 ff ff       	call   f0107ec1 <createSharedObject>
f010cc74:	83 c4 20             	add    $0x20,%esp
}
f010cc77:	c9                   	leave  
f010cc78:	c3                   	ret    

f010cc79 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cc79:	55                   	push   %ebp
f010cc7a:	89 e5                	mov    %esp,%ebp
f010cc7c:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cc7f:	83 ec 08             	sub    $0x8,%esp
f010cc82:	ff 75 0c             	pushl  0xc(%ebp)
f010cc85:	ff 75 08             	pushl  0x8(%ebp)
f010cc88:	e8 57 b2 ff ff       	call   f0107ee4 <getSizeOfSharedObject>
f010cc8d:	83 c4 10             	add    $0x10,%esp
}
f010cc90:	c9                   	leave  
f010cc91:	c3                   	ret    

f010cc92 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc92:	55                   	push   %ebp
f010cc93:	89 e5                	mov    %esp,%ebp
f010cc95:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cc98:	83 ec 04             	sub    $0x4,%esp
f010cc9b:	ff 75 10             	pushl  0x10(%ebp)
f010cc9e:	ff 75 0c             	pushl  0xc(%ebp)
f010cca1:	ff 75 08             	pushl  0x8(%ebp)
f010cca4:	e8 58 b2 ff ff       	call   f0107f01 <getSharedObject>
f010cca9:	83 c4 10             	add    $0x10,%esp
}
f010ccac:	c9                   	leave  
f010ccad:	c3                   	ret    

f010ccae <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ccae:	55                   	push   %ebp
f010ccaf:	89 e5                	mov    %esp,%ebp
f010ccb1:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010ccb4:	83 ec 08             	sub    $0x8,%esp
f010ccb7:	ff 75 0c             	pushl  0xc(%ebp)
f010ccba:	ff 75 08             	pushl  0x8(%ebp)
f010ccbd:	e8 5c b2 ff ff       	call   f0107f1e <freeSharedObject>
f010ccc2:	83 c4 10             	add    $0x10,%esp
}
f010ccc5:	c9                   	leave  
f010ccc6:	c3                   	ret    

f010ccc7 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ccc7:	55                   	push   %ebp
f010ccc8:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ccca:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010cccf:	5d                   	pop    %ebp
f010ccd0:	c3                   	ret    

f010ccd1 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ccd1:	55                   	push   %ebp
f010ccd2:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ccd4:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010ccd9:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ccdc:	5d                   	pop    %ebp
f010ccdd:	c3                   	ret    

f010ccde <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010ccde:	55                   	push   %ebp
f010ccdf:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cce1:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cce6:	89 c2                	mov    %eax,%edx
f010cce8:	a1 50 32 25 f0       	mov    0xf0253250,%eax
f010cced:	29 c2                	sub    %eax,%edx
f010ccef:	89 d0                	mov    %edx,%eax
f010ccf1:	c1 f8 05             	sar    $0x5,%eax
f010ccf4:	89 c2                	mov    %eax,%edx
f010ccf6:	89 d0                	mov    %edx,%eax
f010ccf8:	c1 e0 03             	shl    $0x3,%eax
f010ccfb:	01 d0                	add    %edx,%eax
f010ccfd:	01 c0                	add    %eax,%eax
f010ccff:	01 d0                	add    %edx,%eax
f010cd01:	c1 e0 06             	shl    $0x6,%eax
f010cd04:	01 d0                	add    %edx,%eax
f010cd06:	89 c1                	mov    %eax,%ecx
f010cd08:	c1 e1 04             	shl    $0x4,%ecx
f010cd0b:	01 c8                	add    %ecx,%eax
f010cd0d:	c1 e0 03             	shl    $0x3,%eax
f010cd10:	01 d0                	add    %edx,%eax
f010cd12:	01 c0                	add    %eax,%eax
f010cd14:	01 d0                	add    %edx,%eax
f010cd16:	89 c1                	mov    %eax,%ecx
f010cd18:	c1 e1 04             	shl    $0x4,%ecx
f010cd1b:	01 c8                	add    %ecx,%eax
f010cd1d:	c1 e0 03             	shl    $0x3,%eax
f010cd20:	01 d0                	add    %edx,%eax
f010cd22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cd29:	01 d0                	add    %edx,%eax
}
f010cd2b:	5d                   	pop    %ebp
f010cd2c:	c3                   	ret    

f010cd2d <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cd2d:	55                   	push   %ebp
f010cd2e:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cd30:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd35:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cd38:	5d                   	pop    %ebp
f010cd39:	c3                   	ret    

f010cd3a <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cd3a:	55                   	push   %ebp
f010cd3b:	89 e5                	mov    %esp,%ebp
f010cd3d:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cd40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cd44:	75 0a                	jne    f010cd50 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cd46:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cd4e:	eb 22                	jmp    f010cd72 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cd50:	83 ec 04             	sub    $0x4,%esp
f010cd53:	6a 00                	push   $0x0
f010cd55:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cd58:	50                   	push   %eax
f010cd59:	ff 75 08             	pushl  0x8(%ebp)
f010cd5c:	e8 6d cc ff ff       	call   f01099ce <envid2env>
f010cd61:	83 c4 10             	add    $0x10,%esp
f010cd64:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cd67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd6b:	79 05                	jns    f010cd72 <sys_destroy_env+0x38>
	{
		return r;
f010cd6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd70:	eb 5e                	jmp    f010cdd0 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cd72:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cd75:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd7a:	39 c2                	cmp    %eax,%edx
f010cd7c:	75 1b                	jne    f010cd99 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cd7e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cd83:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd86:	83 ec 08             	sub    $0x8,%esp
f010cd89:	50                   	push   %eax
f010cd8a:	68 c2 32 13 f0       	push   $0xf01332c2
f010cd8f:	e8 9d 40 ff ff       	call   f0100e31 <cprintf>
f010cd94:	83 c4 10             	add    $0x10,%esp
f010cd97:	eb 20                	jmp    f010cdb9 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cd99:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd9c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cd9f:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f010cda4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cda7:	83 ec 04             	sub    $0x4,%esp
f010cdaa:	52                   	push   %edx
f010cdab:	50                   	push   %eax
f010cdac:	68 dd 32 13 f0       	push   $0xf01332dd
f010cdb1:	e8 7b 40 ff ff       	call   f0100e31 <cprintf>
f010cdb6:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cdb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdbc:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cdbf:	83 ec 0c             	sub    $0xc,%esp
f010cdc2:	50                   	push   %eax
f010cdc3:	e8 49 88 ff ff       	call   f0105611 <sched_kill_env>
f010cdc8:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cdcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cdd0:	c9                   	leave  
f010cdd1:	c3                   	ret    

f010cdd2 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cdd2:	55                   	push   %ebp
f010cdd3:	89 e5                	mov    %esp,%ebp
f010cdd5:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cdd8:	e8 d2 cb ff ff       	call   f01099af <env_exit>
	//env_run_cmd_prmpt();
}
f010cddd:	90                   	nop
f010cdde:	c9                   	leave  
f010cddf:	c3                   	ret    

f010cde0 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cde0:	55                   	push   %ebp
f010cde1:	89 e5                	mov    %esp,%ebp
f010cde3:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cde6:	ff 75 14             	pushl  0x14(%ebp)
f010cde9:	ff 75 10             	pushl  0x10(%ebp)
f010cdec:	ff 75 0c             	pushl  0xc(%ebp)
f010cdef:	ff 75 08             	pushl  0x8(%ebp)
f010cdf2:	e8 d4 be ff ff       	call   f0108ccb <env_create>
f010cdf7:	83 c4 10             	add    $0x10,%esp
f010cdfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cdfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ce01:	75 07                	jne    f010ce0a <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ce03:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ce08:	eb 14                	jmp    f010ce1e <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ce0a:	83 ec 0c             	sub    $0xc,%esp
f010ce0d:	ff 75 f4             	pushl  -0xc(%ebp)
f010ce10:	e8 1e 85 ff ff       	call   f0105333 <sched_new_env>
f010ce15:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ce18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce1b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ce1e:	c9                   	leave  
f010ce1f:	c3                   	ret    

f010ce20 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ce20:	55                   	push   %ebp
f010ce21:	89 e5                	mov    %esp,%ebp
f010ce23:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ce26:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce29:	83 ec 0c             	sub    $0xc,%esp
f010ce2c:	50                   	push   %eax
f010ce2d:	e8 1e 85 ff ff       	call   f0105350 <sched_run_env>
f010ce32:	83 c4 10             	add    $0x10,%esp
}
f010ce35:	90                   	nop
f010ce36:	c9                   	leave  
f010ce37:	c3                   	ret    

f010ce38 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ce38:	55                   	push   %ebp
f010ce39:	89 e5                	mov    %esp,%ebp
f010ce3b:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ce3e:	0f 31                	rdtsc  
f010ce40:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ce43:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ce46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce4c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ce4f:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ce52:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ce55:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce58:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ce5b:	89 01                	mov    %eax,(%ecx)
f010ce5d:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ce60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce63:	c9                   	leave  
f010ce64:	c2 04 00             	ret    $0x4

f010ce67 <sys_rcr2>:

uint32 sys_rcr2()
{
f010ce67:	55                   	push   %ebp
f010ce68:	89 e5                	mov    %esp,%ebp
f010ce6a:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ce6d:	0f 20 d0             	mov    %cr2,%eax
f010ce70:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ce73:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ce76:	90                   	nop
}
f010ce77:	c9                   	leave  
f010ce78:	c3                   	ret    

f010ce79 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ce79:	55                   	push   %ebp
f010ce7a:	89 e5                	mov    %esp,%ebp
f010ce7c:	83 ec 04             	sub    $0x4,%esp
f010ce7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce82:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ce85:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ce88:	a2 08 3b 25 f0       	mov    %al,0xf0253b08
}
f010ce8d:	90                   	nop
f010ce8e:	c9                   	leave  
f010ce8f:	c3                   	ret    

f010ce90 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010ce90:	55                   	push   %ebp
f010ce91:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010ce93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010ce98:	5d                   	pop    %ebp
f010ce99:	c3                   	ret    

f010ce9a <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ce9a:	55                   	push   %ebp
f010ce9b:	89 e5                	mov    %esp,%ebp
f010ce9d:	56                   	push   %esi
f010ce9e:	53                   	push   %ebx
f010ce9f:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010cea2:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
f010cea6:	0f 87 0f 04 00 00    	ja     f010d2bb <syscall+0x421>
f010ceac:	8b 45 08             	mov    0x8(%ebp),%eax
f010ceaf:	c1 e0 02             	shl    $0x2,%eax
f010ceb2:	05 f8 32 13 f0       	add    $0xf01332f8,%eax
f010ceb7:	8b 00                	mov    (%eax),%eax
f010ceb9:	ff e0                	jmp    *%eax
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here

	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010cebb:	8b 45 14             	mov    0x14(%ebp),%eax
f010cebe:	0f b6 d0             	movzbl %al,%edx
f010cec1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cec4:	83 ec 04             	sub    $0x4,%esp
f010cec7:	52                   	push   %edx
f010cec8:	ff 75 10             	pushl  0x10(%ebp)
f010cecb:	50                   	push   %eax
f010cecc:	e8 26 f9 ff ff       	call   f010c7f7 <sys_cputs>
f010ced1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ced4:	b8 00 00 00 00       	mov    $0x0,%eax
f010ced9:	e9 e2 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cede:	e8 86 f9 ff ff       	call   f010c869 <sys_cgetc>
f010cee3:	e9 d8 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cee8:	83 ec 08             	sub    $0x8,%esp
f010ceeb:	ff 75 10             	pushl  0x10(%ebp)
f010ceee:	ff 75 0c             	pushl  0xc(%ebp)
f010cef1:	e8 c3 fa ff ff       	call   f010c9b9 <sys_calculate_required_frames>
f010cef6:	83 c4 10             	add    $0x10,%esp
f010cef9:	e9 c2 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cefe:	e8 db fa ff ff       	call   f010c9de <sys_calculate_free_frames>
f010cf03:	e9 b8 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cf08:	e8 f0 fa ff ff       	call   f010c9fd <sys_calculate_modified_frames>
f010cf0d:	e9 ae 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cf12:	e8 00 fb ff ff       	call   f010ca17 <sys_calculate_notmod_frames>
f010cf17:	e9 a4 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cf1c:	e8 68 fb ff ff       	call   f010ca89 <sys_pf_calculate_allocated_pages>
f010cf21:	e9 9a 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cf26:	83 ec 0c             	sub    $0xc,%esp
f010cf29:	ff 75 0c             	pushl  0xc(%ebp)
f010cf2c:	e8 00 fb ff ff       	call   f010ca31 <sys_calculate_pages_tobe_removed_ready_exit>
f010cf31:	83 c4 10             	add    $0x10,%esp
f010cf34:	e9 87 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cf39:	e8 09 fb ff ff       	call   f010ca47 <sys_scarce_memory>
		return 0;
f010cf3e:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf43:	e9 78 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cf48:	83 ec 04             	sub    $0x4,%esp
f010cf4b:	ff 75 14             	pushl  0x14(%ebp)
f010cf4e:	ff 75 10             	pushl  0x10(%ebp)
f010cf51:	ff 75 0c             	pushl  0xc(%ebp)
f010cf54:	e8 ab fb ff ff       	call   f010cb04 <sys_allocate_chunk>
f010cf59:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf5c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf61:	e9 5a 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cf66:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf69:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf6c:	83 ec 08             	sub    $0x8,%esp
f010cf6f:	52                   	push   %edx
f010cf70:	50                   	push   %eax
f010cf71:	e8 06 f9 ff ff       	call   f010c87c <__sys_allocate_page>
f010cf76:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf79:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf7e:	e9 3d 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cf83:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cf86:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cf89:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cf8c:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf92:	83 ec 0c             	sub    $0xc,%esp
f010cf95:	56                   	push   %esi
f010cf96:	53                   	push   %ebx
f010cf97:	51                   	push   %ecx
f010cf98:	52                   	push   %edx
f010cf99:	50                   	push   %eax
f010cf9a:	e8 e0 f9 ff ff       	call   f010c97f <__sys_map_frame>
f010cf9f:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cfa2:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfa7:	e9 14 03 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cfac:	8b 55 10             	mov    0x10(%ebp),%edx
f010cfaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfb2:	83 ec 08             	sub    $0x8,%esp
f010cfb5:	52                   	push   %edx
f010cfb6:	50                   	push   %eax
f010cfb7:	e8 e0 f9 ff ff       	call   f010c99c <__sys_unmap_frame>
f010cfbc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfbf:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfc4:	e9 f7 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010cfc9:	e8 94 fb ff ff       	call   f010cb62 <sys_disable_interrupt>
		return 0;
f010cfce:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfd3:	e9 e8 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cfd8:	e8 9f fb ff ff       	call   f010cb7c <sys_enable_interrupt>
		return 0;
f010cfdd:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfe2:	e9 d9 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cfe7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfea:	0f be c0             	movsbl %al,%eax
f010cfed:	83 ec 0c             	sub    $0xc,%esp
f010cff0:	50                   	push   %eax
f010cff1:	e8 4f f8 ff ff       	call   f010c845 <sys_cputc>
f010cff6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cff9:	b8 00 00 00 00       	mov    $0x0,%eax
f010cffe:	e9 bd 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d003:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d006:	0f be c0             	movsbl %al,%eax
f010d009:	83 ec 0c             	sub    $0xc,%esp
f010d00c:	50                   	push   %eax
f010d00d:	e8 43 fa ff ff       	call   f010ca55 <sys_clearFFL>
f010d012:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d015:	b8 00 00 00 00       	mov    $0x0,%eax
f010d01a:	e9 a1 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d01f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d022:	83 ec 08             	sub    $0x8,%esp
f010d025:	ff 75 10             	pushl  0x10(%ebp)
f010d028:	50                   	push   %eax
f010d029:	e8 68 fb ff ff       	call   f010cb96 <sys_createSemaphore>
f010d02e:	83 c4 10             	add    $0x10,%esp
f010d031:	e9 8a 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d036:	8b 55 10             	mov    0x10(%ebp),%edx
f010d039:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d03c:	83 ec 08             	sub    $0x8,%esp
f010d03f:	52                   	push   %edx
f010d040:	50                   	push   %eax
f010d041:	e8 72 fb ff ff       	call   f010cbb8 <sys_waitSemaphore>
f010d046:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d049:	b8 00 00 00 00       	mov    $0x0,%eax
f010d04e:	e9 6d 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d053:	8b 55 10             	mov    0x10(%ebp),%edx
f010d056:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d059:	83 ec 08             	sub    $0x8,%esp
f010d05c:	52                   	push   %edx
f010d05d:	50                   	push   %eax
f010d05e:	e8 6f fb ff ff       	call   f010cbd2 <sys_signalSemaphore>
f010d063:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d066:	b8 00 00 00 00       	mov    $0x0,%eax
f010d06b:	e9 50 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d070:	8b 55 10             	mov    0x10(%ebp),%edx
f010d073:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d076:	83 ec 08             	sub    $0x8,%esp
f010d079:	52                   	push   %edx
f010d07a:	50                   	push   %eax
f010d07b:	e8 6c fb ff ff       	call   f010cbec <sys_getSemaphoreValue>
f010d080:	83 c4 10             	add    $0x10,%esp
f010d083:	e9 38 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d088:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d08b:	8b 45 14             	mov    0x14(%ebp),%eax
f010d08e:	0f b6 d0             	movzbl %al,%edx
f010d091:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d094:	51                   	push   %ecx
f010d095:	52                   	push   %edx
f010d096:	ff 75 10             	pushl  0x10(%ebp)
f010d099:	50                   	push   %eax
f010d09a:	e8 aa fb ff ff       	call   f010cc49 <sys_createSharedObject>
f010d09f:	83 c4 10             	add    $0x10,%esp
f010d0a2:	e9 19 02 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d0a7:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d0aa:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0b0:	83 ec 04             	sub    $0x4,%esp
f010d0b3:	51                   	push   %ecx
f010d0b4:	52                   	push   %edx
f010d0b5:	50                   	push   %eax
f010d0b6:	e8 d7 fb ff ff       	call   f010cc92 <sys_getSharedObject>
f010d0bb:	83 c4 10             	add    $0x10,%esp
f010d0be:	e9 fd 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d0c3:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0c9:	83 ec 08             	sub    $0x8,%esp
f010d0cc:	52                   	push   %edx
f010d0cd:	50                   	push   %eax
f010d0ce:	e8 db fb ff ff       	call   f010ccae <sys_freeSharedObject>
f010d0d3:	83 c4 10             	add    $0x10,%esp
f010d0d6:	e9 e5 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d0db:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0e1:	83 ec 08             	sub    $0x8,%esp
f010d0e4:	52                   	push   %edx
f010d0e5:	50                   	push   %eax
f010d0e6:	e8 8e fb ff ff       	call   f010cc79 <sys_getSizeOfSharedObject>
f010d0eb:	83 c4 10             	add    $0x10,%esp
f010d0ee:	e9 cd 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d0f3:	e8 cf fb ff ff       	call   f010ccc7 <sys_getMaxShares>
f010d0f8:	e9 c3 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d0fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d100:	ff 75 18             	pushl  0x18(%ebp)
f010d103:	ff 75 14             	pushl  0x14(%ebp)
f010d106:	ff 75 10             	pushl  0x10(%ebp)
f010d109:	50                   	push   %eax
f010d10a:	e8 d1 fc ff ff       	call   f010cde0 <sys_create_env>
f010d10f:	83 c4 10             	add    $0x10,%esp
f010d112:	e9 a9 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d117:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d11a:	83 ec 0c             	sub    $0xc,%esp
f010d11d:	50                   	push   %eax
f010d11e:	e8 fd fc ff ff       	call   f010ce20 <sys_run_env>
f010d123:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d126:	b8 00 00 00 00       	mov    $0x0,%eax
f010d12b:	e9 90 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d130:	e8 a9 fb ff ff       	call   f010ccde <sys_getenvindex>
f010d135:	e9 86 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d13a:	e8 92 fb ff ff       	call   f010ccd1 <sys_getenvid>
f010d13f:	e9 7c 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d144:	e8 e4 fb ff ff       	call   f010cd2d <sys_getparentenvid>
f010d149:	e9 72 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d14e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d151:	83 ec 0c             	sub    $0xc,%esp
f010d154:	50                   	push   %eax
f010d155:	e8 e0 fb ff ff       	call   f010cd3a <sys_destroy_env>
f010d15a:	83 c4 10             	add    $0x10,%esp
f010d15d:	e9 5e 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d162:	e8 6b fc ff ff       	call   f010cdd2 <sys_exit_env>
		return 0;
f010d167:	b8 00 00 00 00       	mov    $0x0,%eax
f010d16c:	e9 4f 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d171:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d174:	83 ec 0c             	sub    $0xc,%esp
f010d177:	50                   	push   %eax
f010d178:	e8 bb fc ff ff       	call   f010ce38 <sys_get_virtual_time>
f010d17d:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d180:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d183:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d186:	8b 45 10             	mov    0x10(%ebp),%eax
f010d189:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d18c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d18f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d192:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d194:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d197:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d19a:	89 10                	mov    %edx,(%eax)
		return 0;
f010d19c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1a1:	e9 1a 01 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d1a6:	83 ec 04             	sub    $0x4,%esp
f010d1a9:	ff 75 14             	pushl  0x14(%ebp)
f010d1ac:	ff 75 10             	pushl  0x10(%ebp)
f010d1af:	ff 75 0c             	pushl  0xc(%ebp)
f010d1b2:	e8 73 f9 ff ff       	call   f010cb2a <sys_move_user_mem>
f010d1b7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1bf:	e9 fc 00 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d1c4:	e8 9e fc ff ff       	call   f010ce67 <sys_rcr2>
f010d1c9:	e9 f2 00 00 00       	jmp    f010d2c0 <syscall+0x426>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d1ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1d1:	0f b6 c0             	movzbl %al,%eax
f010d1d4:	83 ec 0c             	sub    $0xc,%esp
f010d1d7:	50                   	push   %eax
f010d1d8:	e8 9c fc ff ff       	call   f010ce79 <sys_bypassPageFault>
f010d1dd:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1e0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1e5:	e9 d6 00 00 00       	jmp    f010d2c0 <syscall+0x426>

	case SYS_rsttst:
		rsttst();
f010d1ea:	e8 63 08 02 00       	call   f012da52 <rsttst>
		return 0;
f010d1ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1f4:	e9 c7 00 00 00       	jmp    f010d2c0 <syscall+0x426>
	case SYS_inctst:
		inctst();
f010d1f9:	e8 64 08 02 00       	call   f012da62 <inctst>
		return 0;
f010d1fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010d203:	e9 b8 00 00 00       	jmp    f010d2c0 <syscall+0x426>
	case SYS_chktst:
		chktst(a1);
f010d208:	83 ec 0c             	sub    $0xc,%esp
f010d20b:	ff 75 0c             	pushl  0xc(%ebp)
f010d20e:	e8 4e 09 02 00       	call   f012db61 <chktst>
f010d213:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d216:	b8 00 00 00 00       	mov    $0x0,%eax
f010d21b:	e9 a0 00 00 00       	jmp    f010d2c0 <syscall+0x426>
	case SYS_gettst:
		return gettst();
f010d220:	e8 4e 08 02 00       	call   f012da73 <gettst>
f010d225:	e9 96 00 00 00       	jmp    f010d2c0 <syscall+0x426>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d22a:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d22d:	8b 45 18             	mov    0x18(%ebp),%eax
f010d230:	0f be c0             	movsbl %al,%eax
f010d233:	83 ec 0c             	sub    $0xc,%esp
f010d236:	52                   	push   %edx
f010d237:	50                   	push   %eax
f010d238:	ff 75 14             	pushl  0x14(%ebp)
f010d23b:	ff 75 10             	pushl  0x10(%ebp)
f010d23e:	ff 75 0c             	pushl  0xc(%ebp)
f010d241:	e8 37 08 02 00       	call   f012da7d <tst>
f010d246:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d249:	b8 00 00 00 00       	mov    $0x0,%eax
f010d24e:	eb 70                	jmp    f010d2c0 <syscall+0x426>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d250:	e8 f5 f8 ff ff       	call   f010cb4a <sys_get_heap_strategy>
f010d255:	eb 69                	jmp    f010d2c0 <syscall+0x426>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d257:	83 ec 0c             	sub    $0xc,%esp
f010d25a:	ff 75 0c             	pushl  0xc(%ebp)
f010d25d:	e8 f2 f8 ff ff       	call   f010cb54 <sys_set_uheap_strategy>
f010d262:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d265:	b8 00 00 00 00       	mov    $0x0,%eax
f010d26a:	eb 54                	jmp    f010d2c0 <syscall+0x426>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d26c:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d26f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d272:	8b 55 10             	mov    0x10(%ebp),%edx
f010d275:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d278:	53                   	push   %ebx
f010d279:	51                   	push   %ecx
f010d27a:	52                   	push   %edx
f010d27b:	50                   	push   %eax
f010d27c:	e8 a3 46 00 00       	call   f0111924 <sys_check_LRU_lists>
f010d281:	83 c4 10             	add    $0x10,%esp
f010d284:	eb 3a                	jmp    f010d2c0 <syscall+0x426>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d286:	8b 55 10             	mov    0x10(%ebp),%edx
f010d289:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d28c:	83 ec 08             	sub    $0x8,%esp
f010d28f:	52                   	push   %edx
f010d290:	50                   	push   %eax
f010d291:	e8 10 48 00 00       	call   f0111aa6 <sys_check_LRU_lists_free>
f010d296:	83 c4 10             	add    $0x10,%esp
f010d299:	eb 25                	jmp    f010d2c0 <syscall+0x426>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d29b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d29e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2a4:	51                   	push   %ecx
f010d2a5:	ff 75 14             	pushl  0x14(%ebp)
f010d2a8:	52                   	push   %edx
f010d2a9:	50                   	push   %eax
f010d2aa:	e8 62 49 00 00       	call   f0111c11 <sys_check_WS_list>
f010d2af:	83 c4 10             	add    $0x10,%esp
f010d2b2:	eb 0c                	jmp    f010d2c0 <syscall+0x426>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d2b4:	b8 03 00 00 00       	mov    $0x3,%eax
f010d2b9:	eb 05                	jmp    f010d2c0 <syscall+0x426>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d2bb:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d2c0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d2c3:	5b                   	pop    %ebx
f010d2c4:	5e                   	pop    %esi
f010d2c5:	5d                   	pop    %ebp
f010d2c6:	c3                   	ret    

f010d2c7 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d2c7:	55                   	push   %ebp
f010d2c8:	89 e5                	mov    %esp,%ebp
f010d2ca:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d2cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2d0:	8b 00                	mov    (%eax),%eax
f010d2d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d2d5:	8b 45 10             	mov    0x10(%ebp),%eax
f010d2d8:	8b 00                	mov    (%eax),%eax
f010d2da:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d2dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d2e4:	e9 ca 00 00 00       	jmp    f010d3b3 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d2e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d2ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d2ef:	01 d0                	add    %edx,%eax
f010d2f1:	89 c2                	mov    %eax,%edx
f010d2f3:	c1 ea 1f             	shr    $0x1f,%edx
f010d2f6:	01 d0                	add    %edx,%eax
f010d2f8:	d1 f8                	sar    %eax
f010d2fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d2fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d300:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d303:	eb 03                	jmp    f010d308 <stab_binsearch+0x41>
			m--;
f010d305:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d308:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d30b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d30e:	7c 1e                	jl     f010d32e <stab_binsearch+0x67>
f010d310:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d313:	89 d0                	mov    %edx,%eax
f010d315:	01 c0                	add    %eax,%eax
f010d317:	01 d0                	add    %edx,%eax
f010d319:	c1 e0 02             	shl    $0x2,%eax
f010d31c:	89 c2                	mov    %eax,%edx
f010d31e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d321:	01 d0                	add    %edx,%eax
f010d323:	8a 40 04             	mov    0x4(%eax),%al
f010d326:	0f b6 c0             	movzbl %al,%eax
f010d329:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d32c:	75 d7                	jne    f010d305 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d32e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d331:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d334:	7d 09                	jge    f010d33f <stab_binsearch+0x78>
			l = true_m + 1;
f010d336:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d339:	40                   	inc    %eax
f010d33a:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d33d:	eb 74                	jmp    f010d3b3 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d33f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d346:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d349:	89 d0                	mov    %edx,%eax
f010d34b:	01 c0                	add    %eax,%eax
f010d34d:	01 d0                	add    %edx,%eax
f010d34f:	c1 e0 02             	shl    $0x2,%eax
f010d352:	89 c2                	mov    %eax,%edx
f010d354:	8b 45 08             	mov    0x8(%ebp),%eax
f010d357:	01 d0                	add    %edx,%eax
f010d359:	8b 40 08             	mov    0x8(%eax),%eax
f010d35c:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d35f:	73 11                	jae    f010d372 <stab_binsearch+0xab>
			*region_left = m;
f010d361:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d364:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d367:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d369:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d36c:	40                   	inc    %eax
f010d36d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d370:	eb 41                	jmp    f010d3b3 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d372:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d375:	89 d0                	mov    %edx,%eax
f010d377:	01 c0                	add    %eax,%eax
f010d379:	01 d0                	add    %edx,%eax
f010d37b:	c1 e0 02             	shl    $0x2,%eax
f010d37e:	89 c2                	mov    %eax,%edx
f010d380:	8b 45 08             	mov    0x8(%ebp),%eax
f010d383:	01 d0                	add    %edx,%eax
f010d385:	8b 40 08             	mov    0x8(%eax),%eax
f010d388:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d38b:	76 14                	jbe    f010d3a1 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d38d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d390:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d393:	8b 45 10             	mov    0x10(%ebp),%eax
f010d396:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d398:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d39b:	48                   	dec    %eax
f010d39c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d39f:	eb 12                	jmp    f010d3b3 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d3a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d3a7:	89 10                	mov    %edx,(%eax)
			l = m;
f010d3a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d3af:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d3b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d3b6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d3b9:	0f 8e 2a ff ff ff    	jle    f010d2e9 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d3bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3c3:	75 0f                	jne    f010d3d4 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d3c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3c8:	8b 00                	mov    (%eax),%eax
f010d3ca:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d3cd:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3d0:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d3d2:	eb 3d                	jmp    f010d411 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d3d4:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3d7:	8b 00                	mov    (%eax),%eax
f010d3d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d3dc:	eb 03                	jmp    f010d3e1 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d3de:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d3e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3e4:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d3e6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d3e9:	7d 1e                	jge    f010d409 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d3eb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d3ee:	89 d0                	mov    %edx,%eax
f010d3f0:	01 c0                	add    %eax,%eax
f010d3f2:	01 d0                	add    %edx,%eax
f010d3f4:	c1 e0 02             	shl    $0x2,%eax
f010d3f7:	89 c2                	mov    %eax,%edx
f010d3f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3fc:	01 d0                	add    %edx,%eax
f010d3fe:	8a 40 04             	mov    0x4(%eax),%al
f010d401:	0f b6 c0             	movzbl %al,%eax
f010d404:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d407:	75 d5                	jne    f010d3de <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d409:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d40c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d40f:	89 10                	mov    %edx,(%eax)
	}
}
f010d411:	90                   	nop
f010d412:	c9                   	leave  
f010d413:	c3                   	ret    

f010d414 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d414:	55                   	push   %ebp
f010d415:	89 e5                	mov    %esp,%ebp
f010d417:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d41a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d41d:	c7 00 b8 33 13 f0    	movl   $0xf01333b8,(%eax)
	info->eip_line = 0;
f010d423:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d426:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d42d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d430:	c7 40 08 b8 33 13 f0 	movl   $0xf01333b8,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d437:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d43a:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d441:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d444:	8b 55 08             	mov    0x8(%ebp),%edx
f010d447:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d44a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d44d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d454:	8b 45 08             	mov    0x8(%ebp),%eax
f010d457:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d45c:	76 1e                	jbe    f010d47c <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d45e:	c7 45 f4 fc b3 13 f0 	movl   $0xf013b3fc,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d465:	c7 45 f0 cc 70 17 f0 	movl   $0xf01770cc,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d46c:	c7 45 ec cd 70 17 f0 	movl   $0xf01770cd,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d473:	c7 45 e8 56 3e 18 f0 	movl   $0xf0183e56,-0x18(%ebp)
f010d47a:	eb 2a                	jmp    f010d4a6 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d47c:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d483:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d486:	8b 00                	mov    (%eax),%eax
f010d488:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d48b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d48e:	8b 40 04             	mov    0x4(%eax),%eax
f010d491:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d494:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d497:	8b 40 08             	mov    0x8(%eax),%eax
f010d49a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d49d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d4a0:	8b 40 0c             	mov    0xc(%eax),%eax
f010d4a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d4a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4a9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d4ac:	76 0a                	jbe    f010d4b8 <debuginfo_eip+0xa4>
f010d4ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4b1:	48                   	dec    %eax
f010d4b2:	8a 00                	mov    (%eax),%al
f010d4b4:	84 c0                	test   %al,%al
f010d4b6:	74 0a                	je     f010d4c2 <debuginfo_eip+0xae>
		return -1;
f010d4b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d4bd:	e9 01 02 00 00       	jmp    f010d6c3 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d4c2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d4c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d4cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4cf:	29 c2                	sub    %eax,%edx
f010d4d1:	89 d0                	mov    %edx,%eax
f010d4d3:	c1 f8 02             	sar    $0x2,%eax
f010d4d6:	89 c2                	mov    %eax,%edx
f010d4d8:	89 d0                	mov    %edx,%eax
f010d4da:	c1 e0 02             	shl    $0x2,%eax
f010d4dd:	01 d0                	add    %edx,%eax
f010d4df:	c1 e0 02             	shl    $0x2,%eax
f010d4e2:	01 d0                	add    %edx,%eax
f010d4e4:	c1 e0 02             	shl    $0x2,%eax
f010d4e7:	01 d0                	add    %edx,%eax
f010d4e9:	89 c1                	mov    %eax,%ecx
f010d4eb:	c1 e1 08             	shl    $0x8,%ecx
f010d4ee:	01 c8                	add    %ecx,%eax
f010d4f0:	89 c1                	mov    %eax,%ecx
f010d4f2:	c1 e1 10             	shl    $0x10,%ecx
f010d4f5:	01 c8                	add    %ecx,%eax
f010d4f7:	01 c0                	add    %eax,%eax
f010d4f9:	01 d0                	add    %edx,%eax
f010d4fb:	48                   	dec    %eax
f010d4fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d4ff:	ff 75 08             	pushl  0x8(%ebp)
f010d502:	6a 64                	push   $0x64
f010d504:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d507:	50                   	push   %eax
f010d508:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d50b:	50                   	push   %eax
f010d50c:	ff 75 f4             	pushl  -0xc(%ebp)
f010d50f:	e8 b3 fd ff ff       	call   f010d2c7 <stab_binsearch>
f010d514:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d517:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d51a:	85 c0                	test   %eax,%eax
f010d51c:	75 0a                	jne    f010d528 <debuginfo_eip+0x114>
		return -1;
f010d51e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d523:	e9 9b 01 00 00       	jmp    f010d6c3 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d528:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d52b:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d52e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d531:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d534:	ff 75 08             	pushl  0x8(%ebp)
f010d537:	6a 24                	push   $0x24
f010d539:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d53c:	50                   	push   %eax
f010d53d:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d540:	50                   	push   %eax
f010d541:	ff 75 f4             	pushl  -0xc(%ebp)
f010d544:	e8 7e fd ff ff       	call   f010d2c7 <stab_binsearch>
f010d549:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d54c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d54f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d552:	39 c2                	cmp    %eax,%edx
f010d554:	0f 8f 86 00 00 00    	jg     f010d5e0 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d55a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d55d:	89 c2                	mov    %eax,%edx
f010d55f:	89 d0                	mov    %edx,%eax
f010d561:	01 c0                	add    %eax,%eax
f010d563:	01 d0                	add    %edx,%eax
f010d565:	c1 e0 02             	shl    $0x2,%eax
f010d568:	89 c2                	mov    %eax,%edx
f010d56a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d56d:	01 d0                	add    %edx,%eax
f010d56f:	8b 00                	mov    (%eax),%eax
f010d571:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d574:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d577:	29 d1                	sub    %edx,%ecx
f010d579:	89 ca                	mov    %ecx,%edx
f010d57b:	39 d0                	cmp    %edx,%eax
f010d57d:	73 22                	jae    f010d5a1 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d57f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d582:	89 c2                	mov    %eax,%edx
f010d584:	89 d0                	mov    %edx,%eax
f010d586:	01 c0                	add    %eax,%eax
f010d588:	01 d0                	add    %edx,%eax
f010d58a:	c1 e0 02             	shl    $0x2,%eax
f010d58d:	89 c2                	mov    %eax,%edx
f010d58f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d592:	01 d0                	add    %edx,%eax
f010d594:	8b 10                	mov    (%eax),%edx
f010d596:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d599:	01 c2                	add    %eax,%edx
f010d59b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d59e:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d5a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d5a4:	89 c2                	mov    %eax,%edx
f010d5a6:	89 d0                	mov    %edx,%eax
f010d5a8:	01 c0                	add    %eax,%eax
f010d5aa:	01 d0                	add    %edx,%eax
f010d5ac:	c1 e0 02             	shl    $0x2,%eax
f010d5af:	89 c2                	mov    %eax,%edx
f010d5b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5b4:	01 d0                	add    %edx,%eax
f010d5b6:	8b 50 08             	mov    0x8(%eax),%edx
f010d5b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5bc:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d5bf:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5c5:	8b 40 10             	mov    0x10(%eax),%eax
f010d5c8:	29 c2                	sub    %eax,%edx
f010d5ca:	89 d0                	mov    %edx,%eax
f010d5cc:	c1 f8 02             	sar    $0x2,%eax
f010d5cf:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d5d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d5d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d5d8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d5db:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d5de:	eb 15                	jmp    f010d5f5 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d5e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5e3:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5e6:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d5e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d5ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d5ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d5f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d5f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f8:	8b 40 08             	mov    0x8(%eax),%eax
f010d5fb:	83 ec 08             	sub    $0x8,%esp
f010d5fe:	6a 3a                	push   $0x3a
f010d600:	50                   	push   %eax
f010d601:	e8 ca 19 02 00       	call   f012efd0 <strfind>
f010d606:	83 c4 10             	add    $0x10,%esp
f010d609:	89 c2                	mov    %eax,%edx
f010d60b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d60e:	8b 40 08             	mov    0x8(%eax),%eax
f010d611:	29 c2                	sub    %eax,%edx
f010d613:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d616:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d619:	eb 03                	jmp    f010d61e <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d61b:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d61e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d621:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d624:	7c 4e                	jl     f010d674 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d626:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d629:	89 d0                	mov    %edx,%eax
f010d62b:	01 c0                	add    %eax,%eax
f010d62d:	01 d0                	add    %edx,%eax
f010d62f:	c1 e0 02             	shl    $0x2,%eax
f010d632:	89 c2                	mov    %eax,%edx
f010d634:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d637:	01 d0                	add    %edx,%eax
f010d639:	8a 40 04             	mov    0x4(%eax),%al
f010d63c:	3c 84                	cmp    $0x84,%al
f010d63e:	74 34                	je     f010d674 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d640:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d643:	89 d0                	mov    %edx,%eax
f010d645:	01 c0                	add    %eax,%eax
f010d647:	01 d0                	add    %edx,%eax
f010d649:	c1 e0 02             	shl    $0x2,%eax
f010d64c:	89 c2                	mov    %eax,%edx
f010d64e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d651:	01 d0                	add    %edx,%eax
f010d653:	8a 40 04             	mov    0x4(%eax),%al
f010d656:	3c 64                	cmp    $0x64,%al
f010d658:	75 c1                	jne    f010d61b <debuginfo_eip+0x207>
f010d65a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d65d:	89 d0                	mov    %edx,%eax
f010d65f:	01 c0                	add    %eax,%eax
f010d661:	01 d0                	add    %edx,%eax
f010d663:	c1 e0 02             	shl    $0x2,%eax
f010d666:	89 c2                	mov    %eax,%edx
f010d668:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d66b:	01 d0                	add    %edx,%eax
f010d66d:	8b 40 08             	mov    0x8(%eax),%eax
f010d670:	85 c0                	test   %eax,%eax
f010d672:	74 a7                	je     f010d61b <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d674:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d677:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d67a:	7c 42                	jl     f010d6be <debuginfo_eip+0x2aa>
f010d67c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d67f:	89 d0                	mov    %edx,%eax
f010d681:	01 c0                	add    %eax,%eax
f010d683:	01 d0                	add    %edx,%eax
f010d685:	c1 e0 02             	shl    $0x2,%eax
f010d688:	89 c2                	mov    %eax,%edx
f010d68a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d68d:	01 d0                	add    %edx,%eax
f010d68f:	8b 00                	mov    (%eax),%eax
f010d691:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d694:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d697:	29 d1                	sub    %edx,%ecx
f010d699:	89 ca                	mov    %ecx,%edx
f010d69b:	39 d0                	cmp    %edx,%eax
f010d69d:	73 1f                	jae    f010d6be <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d69f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d6a2:	89 d0                	mov    %edx,%eax
f010d6a4:	01 c0                	add    %eax,%eax
f010d6a6:	01 d0                	add    %edx,%eax
f010d6a8:	c1 e0 02             	shl    $0x2,%eax
f010d6ab:	89 c2                	mov    %eax,%edx
f010d6ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6b0:	01 d0                	add    %edx,%eax
f010d6b2:	8b 10                	mov    (%eax),%edx
f010d6b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6b7:	01 c2                	add    %eax,%edx
f010d6b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6bc:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d6be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d6c3:	c9                   	leave  
f010d6c4:	c3                   	ret    

f010d6c5 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d6c5:	55                   	push   %ebp
f010d6c6:	89 e5                	mov    %esp,%ebp
f010d6c8:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d6cb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d6cf:	74 1c                	je     f010d6ed <setPageReplacmentAlgorithmLRU+0x28>
f010d6d1:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d6d5:	74 16                	je     f010d6ed <setPageReplacmentAlgorithmLRU+0x28>
f010d6d7:	68 c4 33 13 f0       	push   $0xf01333c4
f010d6dc:	68 0e 34 13 f0       	push   $0xf013340e
f010d6e1:	6a 18                	push   $0x18
f010d6e3:	68 23 34 13 f0       	push   $0xf0133423
f010d6e8:	e8 c3 2a ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d6ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6f0:	a3 1c bf 2b f0       	mov    %eax,0xf02bbf1c
}
f010d6f5:	90                   	nop
f010d6f6:	c9                   	leave  
f010d6f7:	c3                   	ret    

f010d6f8 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d6f8:	55                   	push   %ebp
f010d6f9:	89 e5                	mov    %esp,%ebp
f010d6fb:	c7 05 1c bf 2b f0 03 	movl   $0x3,0xf02bbf1c
f010d702:	00 00 00 
f010d705:	90                   	nop
f010d706:	5d                   	pop    %ebp
f010d707:	c3                   	ret    

f010d708 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d708:	55                   	push   %ebp
f010d709:	89 e5                	mov    %esp,%ebp
f010d70b:	c7 05 1c bf 2b f0 04 	movl   $0x4,0xf02bbf1c
f010d712:	00 00 00 
f010d715:	90                   	nop
f010d716:	5d                   	pop    %ebp
f010d717:	c3                   	ret    

f010d718 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d718:	55                   	push   %ebp
f010d719:	89 e5                	mov    %esp,%ebp
f010d71b:	c7 05 1c bf 2b f0 05 	movl   $0x5,0xf02bbf1c
f010d722:	00 00 00 
f010d725:	90                   	nop
f010d726:	5d                   	pop    %ebp
f010d727:	c3                   	ret    

f010d728 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d728:	55                   	push   %ebp
f010d729:	89 e5                	mov    %esp,%ebp
f010d72b:	c7 05 1c bf 2b f0 07 	movl   $0x7,0xf02bbf1c
f010d732:	00 00 00 
f010d735:	90                   	nop
f010d736:	5d                   	pop    %ebp
f010d737:	c3                   	ret    

f010d738 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d738:	55                   	push   %ebp
f010d739:	89 e5                	mov    %esp,%ebp
f010d73b:	c7 05 1c bf 2b f0 06 	movl   $0x6,0xf02bbf1c
f010d742:	00 00 00 
f010d745:	8b 45 08             	mov    0x8(%ebp),%eax
f010d748:	a3 3c 3b 25 f0       	mov    %eax,0xf0253b3c
f010d74d:	90                   	nop
f010d74e:	5d                   	pop    %ebp
f010d74f:	c3                   	ret    

f010d750 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d750:	55                   	push   %ebp
f010d751:	89 e5                	mov    %esp,%ebp
f010d753:	8b 15 1c bf 2b f0    	mov    0xf02bbf1c,%edx
f010d759:	8b 45 08             	mov    0x8(%ebp),%eax
f010d75c:	39 c2                	cmp    %eax,%edx
f010d75e:	0f 94 c0             	sete   %al
f010d761:	0f b6 c0             	movzbl %al,%eax
f010d764:	5d                   	pop    %ebp
f010d765:	c3                   	ret    

f010d766 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d766:	55                   	push   %ebp
f010d767:	89 e5                	mov    %esp,%ebp
f010d769:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d76e:	83 f8 03             	cmp    $0x3,%eax
f010d771:	75 07                	jne    f010d77a <isPageReplacmentAlgorithmCLOCK+0x14>
f010d773:	b8 01 00 00 00       	mov    $0x1,%eax
f010d778:	eb 05                	jmp    f010d77f <isPageReplacmentAlgorithmCLOCK+0x19>
f010d77a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77f:	5d                   	pop    %ebp
f010d780:	c3                   	ret    

f010d781 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d781:	55                   	push   %ebp
f010d782:	89 e5                	mov    %esp,%ebp
f010d784:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d789:	83 f8 04             	cmp    $0x4,%eax
f010d78c:	75 07                	jne    f010d795 <isPageReplacmentAlgorithmFIFO+0x14>
f010d78e:	b8 01 00 00 00       	mov    $0x1,%eax
f010d793:	eb 05                	jmp    f010d79a <isPageReplacmentAlgorithmFIFO+0x19>
f010d795:	b8 00 00 00 00       	mov    $0x0,%eax
f010d79a:	5d                   	pop    %ebp
f010d79b:	c3                   	ret    

f010d79c <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d79c:	55                   	push   %ebp
f010d79d:	89 e5                	mov    %esp,%ebp
f010d79f:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d7a4:	83 f8 05             	cmp    $0x5,%eax
f010d7a7:	75 07                	jne    f010d7b0 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d7a9:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7ae:	eb 05                	jmp    f010d7b5 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d7b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b5:	5d                   	pop    %ebp
f010d7b6:	c3                   	ret    

f010d7b7 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d7b7:	55                   	push   %ebp
f010d7b8:	89 e5                	mov    %esp,%ebp
f010d7ba:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d7bf:	83 f8 07             	cmp    $0x7,%eax
f010d7c2:	75 07                	jne    f010d7cb <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d7c4:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7c9:	eb 05                	jmp    f010d7d0 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d7cb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7d0:	5d                   	pop    %ebp
f010d7d1:	c3                   	ret    

f010d7d2 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d7d2:	55                   	push   %ebp
f010d7d3:	89 e5                	mov    %esp,%ebp
f010d7d5:	a1 1c bf 2b f0       	mov    0xf02bbf1c,%eax
f010d7da:	83 f8 06             	cmp    $0x6,%eax
f010d7dd:	75 07                	jne    f010d7e6 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d7df:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7e4:	eb 05                	jmp    f010d7eb <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d7e6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7eb:	5d                   	pop    %ebp
f010d7ec:	c3                   	ret    

f010d7ed <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d7ed:	55                   	push   %ebp
f010d7ee:	89 e5                	mov    %esp,%ebp
f010d7f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7f3:	a3 ec be 2b f0       	mov    %eax,0xf02bbeec
f010d7f8:	90                   	nop
f010d7f9:	5d                   	pop    %ebp
f010d7fa:	c3                   	ret    

f010d7fb <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d7fb:	55                   	push   %ebp
f010d7fc:	89 e5                	mov    %esp,%ebp
f010d7fe:	a1 ec be 2b f0       	mov    0xf02bbeec,%eax
f010d803:	5d                   	pop    %ebp
f010d804:	c3                   	ret    

f010d805 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d805:	55                   	push   %ebp
f010d806:	89 e5                	mov    %esp,%ebp
f010d808:	8b 45 08             	mov    0x8(%ebp),%eax
f010d80b:	a3 34 bf 2b f0       	mov    %eax,0xf02bbf34
f010d810:	90                   	nop
f010d811:	5d                   	pop    %ebp
f010d812:	c3                   	ret    

f010d813 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d813:	55                   	push   %ebp
f010d814:	89 e5                	mov    %esp,%ebp
f010d816:	a1 34 bf 2b f0       	mov    0xf02bbf34,%eax
f010d81b:	5d                   	pop    %ebp
f010d81c:	c3                   	ret    

f010d81d <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d81d:	55                   	push   %ebp
f010d81e:	89 e5                	mov    %esp,%ebp
f010d820:	8b 45 08             	mov    0x8(%ebp),%eax
f010d823:	a3 44 bf 2b f0       	mov    %eax,0xf02bbf44
f010d828:	90                   	nop
f010d829:	5d                   	pop    %ebp
f010d82a:	c3                   	ret    

f010d82b <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d82b:	55                   	push   %ebp
f010d82c:	89 e5                	mov    %esp,%ebp
f010d82e:	a1 44 bf 2b f0       	mov    0xf02bbf44,%eax
f010d833:	5d                   	pop    %ebp
f010d834:	c3                   	ret    

f010d835 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d835:	55                   	push   %ebp
f010d836:	89 e5                	mov    %esp,%ebp
f010d838:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d83e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d844:	83 ec 04             	sub    $0x4,%esp
f010d847:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d84a:	52                   	push   %edx
f010d84b:	ff 75 0c             	pushl  0xc(%ebp)
f010d84e:	50                   	push   %eax
f010d84f:	e8 b9 9d ff ff       	call   f010760d <__static_cpt>
f010d854:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d857:	90                   	nop
f010d858:	c9                   	leave  
f010d859:	c3                   	ret    

f010d85a <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d85a:	55                   	push   %ebp
f010d85b:	89 e5                	mov    %esp,%ebp
f010d85d:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d860:	83 ec 0c             	sub    $0xc,%esp
f010d863:	ff 75 08             	pushl  0x8(%ebp)
f010d866:	e8 ea a9 ff ff       	call   f0108255 <env_page_ws_get_size>
f010d86b:	83 c4 10             	add    $0x10,%esp
f010d86e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d871:	8b 45 08             	mov    0x8(%ebp),%eax
f010d874:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d87a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d87d:	76 14                	jbe    f010d893 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d87f:	83 ec 04             	sub    $0x4,%esp
f010d882:	68 40 34 13 f0       	push   $0xf0133440
f010d887:	6a 55                	push   $0x55
f010d889:	68 23 34 13 f0       	push   $0xf0133423
f010d88e:	e8 1d 29 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d893:	e8 e9 fe ff ff       	call   f010d781 <isPageReplacmentAlgorithmFIFO>
f010d898:	85 c0                	test   %eax,%eax
f010d89a:	74 14                	je     f010d8b0 <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d89c:	83 ec 04             	sub    $0x4,%esp
f010d89f:	68 7c 34 13 f0       	push   $0xf013347c
f010d8a4:	6a 61                	push   $0x61
f010d8a6:	68 23 34 13 f0       	push   $0xf0133423
f010d8ab:	e8 00 29 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d8b0:	83 ec 0c             	sub    $0xc,%esp
f010d8b3:	6a 02                	push   $0x2
f010d8b5:	e8 96 fe ff ff       	call   f010d750 <isPageReplacmentAlgorithmLRU>
f010d8ba:	83 c4 10             	add    $0x10,%esp
f010d8bd:	85 c0                	test   %eax,%eax
f010d8bf:	74 14                	je     f010d8d5 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d8c1:	83 ec 04             	sub    $0x4,%esp
f010d8c4:	68 c0 34 13 f0       	push   $0xf01334c0
f010d8c9:	6a 67                	push   $0x67
f010d8cb:	68 23 34 13 f0       	push   $0xf0133423
f010d8d0:	e8 db 28 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d8d5:	90                   	nop
f010d8d6:	c9                   	leave  
f010d8d7:	c3                   	ret    

f010d8d8 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d8d8:	55                   	push   %ebp
f010d8d9:	89 e5                	mov    %esp,%ebp
f010d8db:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d8de:	83 ec 04             	sub    $0x4,%esp
f010d8e1:	68 04 35 13 f0       	push   $0xf0133504
f010d8e6:	6a 70                	push   $0x70
f010d8e8:	68 23 34 13 f0       	push   $0xf0133423
f010d8ed:	e8 be 28 ff ff       	call   f01001b0 <_panic>

f010d8f2 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d8f2:	55                   	push   %ebp
f010d8f3:	89 e5                	mov    %esp,%ebp
f010d8f5:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d8f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d8ff:	e9 aa 00 00 00       	jmp    f010d9ae <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d904:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d907:	89 d0                	mov    %edx,%eax
f010d909:	c1 e0 02             	shl    $0x2,%eax
f010d90c:	01 d0                	add    %edx,%eax
f010d90e:	01 c0                	add    %eax,%eax
f010d910:	01 d0                	add    %edx,%eax
f010d912:	01 c0                	add    %eax,%eax
f010d914:	01 d0                	add    %edx,%eax
f010d916:	c1 e0 02             	shl    $0x2,%eax
f010d919:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010d91e:	83 ec 04             	sub    $0x4,%esp
f010d921:	6a 5c                	push   $0x5c
f010d923:	6a 00                	push   $0x0
f010d925:	50                   	push   %eax
f010d926:	e8 d1 16 02 00       	call   f012effc <memset>
f010d92b:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d92e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d931:	89 d0                	mov    %edx,%eax
f010d933:	c1 e0 02             	shl    $0x2,%eax
f010d936:	01 d0                	add    %edx,%eax
f010d938:	01 c0                	add    %eax,%eax
f010d93a:	01 d0                	add    %edx,%eax
f010d93c:	01 c0                	add    %eax,%eax
f010d93e:	01 d0                	add    %edx,%eax
f010d940:	c1 e0 02             	shl    $0x2,%eax
f010d943:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010d948:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d94b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d94e:	89 d0                	mov    %edx,%eax
f010d950:	c1 e0 02             	shl    $0x2,%eax
f010d953:	01 d0                	add    %edx,%eax
f010d955:	01 c0                	add    %eax,%eax
f010d957:	01 d0                	add    %edx,%eax
f010d959:	01 c0                	add    %eax,%eax
f010d95b:	01 d0                	add    %edx,%eax
f010d95d:	c1 e0 02             	shl    $0x2,%eax
f010d960:	05 04 9b 2b f0       	add    $0xf02b9b04,%eax
f010d965:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d96b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d96e:	89 d0                	mov    %edx,%eax
f010d970:	c1 e0 02             	shl    $0x2,%eax
f010d973:	01 d0                	add    %edx,%eax
f010d975:	01 c0                	add    %eax,%eax
f010d977:	01 d0                	add    %edx,%eax
f010d979:	01 c0                	add    %eax,%eax
f010d97b:	01 d0                	add    %edx,%eax
f010d97d:	c1 e0 02             	shl    $0x2,%eax
f010d980:	05 08 9b 2b f0       	add    $0xf02b9b08,%eax
f010d985:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d98b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d98e:	89 d0                	mov    %edx,%eax
f010d990:	c1 e0 02             	shl    $0x2,%eax
f010d993:	01 d0                	add    %edx,%eax
f010d995:	01 c0                	add    %eax,%eax
f010d997:	01 d0                	add    %edx,%eax
f010d999:	01 c0                	add    %eax,%eax
f010d99b:	01 d0                	add    %edx,%eax
f010d99d:	c1 e0 02             	shl    $0x2,%eax
f010d9a0:	05 10 9b 2b f0       	add    $0xf02b9b10,%eax
f010d9a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9ab:	ff 45 f4             	incl   -0xc(%ebp)
f010d9ae:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d9b2:	0f 8e 4c ff ff ff    	jle    f010d904 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d9b8:	90                   	nop
f010d9b9:	c9                   	leave  
f010d9ba:	c3                   	ret    

f010d9bb <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d9bb:	55                   	push   %ebp
f010d9bc:	89 e5                	mov    %esp,%ebp
f010d9be:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010d9c1:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9c8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010d9cf:	eb 2b                	jmp    f010d9fc <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d9d1:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010d9d4:	89 d0                	mov    %edx,%eax
f010d9d6:	c1 e0 02             	shl    $0x2,%eax
f010d9d9:	01 d0                	add    %edx,%eax
f010d9db:	01 c0                	add    %eax,%eax
f010d9dd:	01 d0                	add    %edx,%eax
f010d9df:	01 c0                	add    %eax,%eax
f010d9e1:	01 d0                	add    %edx,%eax
f010d9e3:	c1 e0 02             	shl    $0x2,%eax
f010d9e6:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010d9eb:	8a 00                	mov    (%eax),%al
f010d9ed:	84 c0                	test   %al,%al
f010d9ef:	74 08                	je     f010d9f9 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d9f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d9f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010d9f7:	eb 09                	jmp    f010da02 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9f9:	ff 45 f8             	incl   -0x8(%ebp)
f010d9fc:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010da00:	7e cf                	jle    f010d9d1 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010da02:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010da06:	75 07                	jne    f010da0f <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010da08:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010da0d:	eb 40                	jmp    f010da4f <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010da0f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da12:	89 d0                	mov    %edx,%eax
f010da14:	c1 e0 02             	shl    $0x2,%eax
f010da17:	01 d0                	add    %edx,%eax
f010da19:	01 c0                	add    %eax,%eax
f010da1b:	01 d0                	add    %edx,%eax
f010da1d:	01 c0                	add    %eax,%eax
f010da1f:	01 d0                	add    %edx,%eax
f010da21:	c1 e0 02             	shl    $0x2,%eax
f010da24:	8d 90 c0 9a 2b f0    	lea    -0xfd46540(%eax),%edx
f010da2a:	8b 45 08             	mov    0x8(%ebp),%eax
f010da2d:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010da2f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da32:	89 d0                	mov    %edx,%eax
f010da34:	c1 e0 02             	shl    $0x2,%eax
f010da37:	01 d0                	add    %edx,%eax
f010da39:	01 c0                	add    %eax,%eax
f010da3b:	01 d0                	add    %edx,%eax
f010da3d:	01 c0                	add    %eax,%eax
f010da3f:	01 d0                	add    %edx,%eax
f010da41:	c1 e0 02             	shl    $0x2,%eax
f010da44:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010da49:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010da4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010da4f:	c9                   	leave  
f010da50:	c3                   	ret    

f010da51 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010da51:	55                   	push   %ebp
f010da52:	89 e5                	mov    %esp,%ebp
f010da54:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010da57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010da5e:	eb 7a                	jmp    f010dada <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010da60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da63:	89 d0                	mov    %edx,%eax
f010da65:	c1 e0 02             	shl    $0x2,%eax
f010da68:	01 d0                	add    %edx,%eax
f010da6a:	01 c0                	add    %eax,%eax
f010da6c:	01 d0                	add    %edx,%eax
f010da6e:	01 c0                	add    %eax,%eax
f010da70:	01 d0                	add    %edx,%eax
f010da72:	c1 e0 02             	shl    $0x2,%eax
f010da75:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010da7a:	8a 00                	mov    (%eax),%al
f010da7c:	84 c0                	test   %al,%al
f010da7e:	75 56                	jne    f010dad6 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010da80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da83:	89 d0                	mov    %edx,%eax
f010da85:	c1 e0 02             	shl    $0x2,%eax
f010da88:	01 d0                	add    %edx,%eax
f010da8a:	01 c0                	add    %eax,%eax
f010da8c:	01 d0                	add    %edx,%eax
f010da8e:	01 c0                	add    %eax,%eax
f010da90:	01 d0                	add    %edx,%eax
f010da92:	c1 e0 02             	shl    $0x2,%eax
f010da95:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010da9a:	8b 00                	mov    (%eax),%eax
f010da9c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010da9f:	75 36                	jne    f010dad7 <get_semaphore_object_ID+0x86>
f010daa1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010daa4:	89 d0                	mov    %edx,%eax
f010daa6:	c1 e0 02             	shl    $0x2,%eax
f010daa9:	01 d0                	add    %edx,%eax
f010daab:	01 c0                	add    %eax,%eax
f010daad:	01 d0                	add    %edx,%eax
f010daaf:	01 c0                	add    %eax,%eax
f010dab1:	01 d0                	add    %edx,%eax
f010dab3:	c1 e0 02             	shl    $0x2,%eax
f010dab6:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010dabb:	83 c0 04             	add    $0x4,%eax
f010dabe:	83 ec 08             	sub    $0x8,%esp
f010dac1:	50                   	push   %eax
f010dac2:	ff 75 0c             	pushl  0xc(%ebp)
f010dac5:	e8 50 14 02 00       	call   f012ef1a <strcmp>
f010daca:	83 c4 10             	add    $0x10,%esp
f010dacd:	85 c0                	test   %eax,%eax
f010dacf:	75 06                	jne    f010dad7 <get_semaphore_object_ID+0x86>
		{
			return i;
f010dad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dad4:	eb 0f                	jmp    f010dae5 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010dad6:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010dad7:	ff 45 f4             	incl   -0xc(%ebp)
f010dada:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010dade:	7e 80                	jle    f010da60 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010dae0:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010dae5:	c9                   	leave  
f010dae6:	c3                   	ret    

f010dae7 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010dae7:	55                   	push   %ebp
f010dae8:	89 e5                	mov    %esp,%ebp
f010daea:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010daed:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010daf1:	76 0a                	jbe    f010dafd <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010daf3:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010daf8:	e9 ac 00 00 00       	jmp    f010dba9 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010dafd:	8b 55 08             	mov    0x8(%ebp),%edx
f010db00:	89 d0                	mov    %edx,%eax
f010db02:	c1 e0 02             	shl    $0x2,%eax
f010db05:	01 d0                	add    %edx,%eax
f010db07:	01 c0                	add    %eax,%eax
f010db09:	01 d0                	add    %edx,%eax
f010db0b:	01 c0                	add    %eax,%eax
f010db0d:	01 d0                	add    %edx,%eax
f010db0f:	c1 e0 02             	shl    $0x2,%eax
f010db12:	05 c0 9a 2b f0       	add    $0xf02b9ac0,%eax
f010db17:	83 ec 04             	sub    $0x4,%esp
f010db1a:	6a 5c                	push   $0x5c
f010db1c:	6a 00                	push   $0x0
f010db1e:	50                   	push   %eax
f010db1f:	e8 d8 14 02 00       	call   f012effc <memset>
f010db24:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010db27:	8b 55 08             	mov    0x8(%ebp),%edx
f010db2a:	89 d0                	mov    %edx,%eax
f010db2c:	c1 e0 02             	shl    $0x2,%eax
f010db2f:	01 d0                	add    %edx,%eax
f010db31:	01 c0                	add    %eax,%eax
f010db33:	01 d0                	add    %edx,%eax
f010db35:	01 c0                	add    %eax,%eax
f010db37:	01 d0                	add    %edx,%eax
f010db39:	c1 e0 02             	shl    $0x2,%eax
f010db3c:	05 18 9b 2b f0       	add    $0xf02b9b18,%eax
f010db41:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010db44:	8b 55 08             	mov    0x8(%ebp),%edx
f010db47:	89 d0                	mov    %edx,%eax
f010db49:	c1 e0 02             	shl    $0x2,%eax
f010db4c:	01 d0                	add    %edx,%eax
f010db4e:	01 c0                	add    %eax,%eax
f010db50:	01 d0                	add    %edx,%eax
f010db52:	01 c0                	add    %eax,%eax
f010db54:	01 d0                	add    %edx,%eax
f010db56:	c1 e0 02             	shl    $0x2,%eax
f010db59:	05 04 9b 2b f0       	add    $0xf02b9b04,%eax
f010db5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db64:	8b 55 08             	mov    0x8(%ebp),%edx
f010db67:	89 d0                	mov    %edx,%eax
f010db69:	c1 e0 02             	shl    $0x2,%eax
f010db6c:	01 d0                	add    %edx,%eax
f010db6e:	01 c0                	add    %eax,%eax
f010db70:	01 d0                	add    %edx,%eax
f010db72:	01 c0                	add    %eax,%eax
f010db74:	01 d0                	add    %edx,%eax
f010db76:	c1 e0 02             	shl    $0x2,%eax
f010db79:	05 08 9b 2b f0       	add    $0xf02b9b08,%eax
f010db7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db84:	8b 55 08             	mov    0x8(%ebp),%edx
f010db87:	89 d0                	mov    %edx,%eax
f010db89:	c1 e0 02             	shl    $0x2,%eax
f010db8c:	01 d0                	add    %edx,%eax
f010db8e:	01 c0                	add    %eax,%eax
f010db90:	01 d0                	add    %edx,%eax
f010db92:	01 c0                	add    %eax,%eax
f010db94:	01 d0                	add    %edx,%eax
f010db96:	c1 e0 02             	shl    $0x2,%eax
f010db99:	05 10 9b 2b f0       	add    $0xf02b9b10,%eax
f010db9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010dba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dba9:	c9                   	leave  
f010dbaa:	c3                   	ret    

f010dbab <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010dbab:	55                   	push   %ebp
f010dbac:	89 e5                	mov    %esp,%ebp
f010dbae:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010dbb1:	83 ec 04             	sub    $0x4,%esp
f010dbb4:	68 28 35 13 f0       	push   $0xf0133528
f010dbb9:	68 95 00 00 00       	push   $0x95
f010dbbe:	68 56 35 13 f0       	push   $0xf0133556
f010dbc3:	e8 e8 25 ff ff       	call   f01001b0 <_panic>

f010dbc8 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dbc8:	55                   	push   %ebp
f010dbc9:	89 e5                	mov    %esp,%ebp
f010dbcb:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010dbce:	83 ec 04             	sub    $0x4,%esp
f010dbd1:	68 74 35 13 f0       	push   $0xf0133574
f010dbd6:	68 9e 00 00 00       	push   $0x9e
f010dbdb:	68 56 35 13 f0       	push   $0xf0133556
f010dbe0:	e8 cb 25 ff ff       	call   f01001b0 <_panic>

f010dbe5 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010dbe5:	55                   	push   %ebp
f010dbe6:	89 e5                	mov    %esp,%ebp
f010dbe8:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010dbeb:	83 ec 04             	sub    $0x4,%esp
f010dbee:	68 a0 35 13 f0       	push   $0xf01335a0
f010dbf3:	68 a6 00 00 00       	push   $0xa6
f010dbf8:	68 56 35 13 f0       	push   $0xf0133556
f010dbfd:	e8 ae 25 ff ff       	call   f01001b0 <_panic>

f010dc02 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010dc02:	55                   	push   %ebp
f010dc03:	89 e5                	mov    %esp,%ebp
f010dc05:	c7 05 f8 be 2b f0 01 	movl   $0x1,0xf02bbef8
f010dc0c:	00 00 00 
f010dc0f:	90                   	nop
f010dc10:	5d                   	pop    %ebp
f010dc11:	c3                   	ret    

f010dc12 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010dc12:	55                   	push   %ebp
f010dc13:	89 e5                	mov    %esp,%ebp
f010dc15:	c7 05 f8 be 2b f0 02 	movl   $0x2,0xf02bbef8
f010dc1c:	00 00 00 
f010dc1f:	90                   	nop
f010dc20:	5d                   	pop    %ebp
f010dc21:	c3                   	ret    

f010dc22 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010dc22:	55                   	push   %ebp
f010dc23:	89 e5                	mov    %esp,%ebp
f010dc25:	c7 05 f8 be 2b f0 03 	movl   $0x3,0xf02bbef8
f010dc2c:	00 00 00 
f010dc2f:	90                   	nop
f010dc30:	5d                   	pop    %ebp
f010dc31:	c3                   	ret    

f010dc32 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010dc32:	55                   	push   %ebp
f010dc33:	89 e5                	mov    %esp,%ebp
f010dc35:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010dc3a:	83 f8 01             	cmp    $0x1,%eax
f010dc3d:	75 04                	jne    f010dc43 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010dc3f:	b0 01                	mov    $0x1,%al
f010dc41:	eb 02                	jmp    f010dc45 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010dc43:	b0 00                	mov    $0x0,%al
f010dc45:	5d                   	pop    %ebp
f010dc46:	c3                   	ret    

f010dc47 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010dc47:	55                   	push   %ebp
f010dc48:	89 e5                	mov    %esp,%ebp
f010dc4a:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010dc4f:	83 f8 02             	cmp    $0x2,%eax
f010dc52:	75 04                	jne    f010dc58 <isKHeapPlacementStrategyBESTFIT+0x11>
f010dc54:	b0 01                	mov    $0x1,%al
f010dc56:	eb 02                	jmp    f010dc5a <isKHeapPlacementStrategyBESTFIT+0x13>
f010dc58:	b0 00                	mov    $0x0,%al
f010dc5a:	5d                   	pop    %ebp
f010dc5b:	c3                   	ret    

f010dc5c <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010dc5c:	55                   	push   %ebp
f010dc5d:	89 e5                	mov    %esp,%ebp
f010dc5f:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f010dc64:	83 f8 03             	cmp    $0x3,%eax
f010dc67:	75 04                	jne    f010dc6d <isKHeapPlacementStrategyNEXTFIT+0x11>
f010dc69:	b0 01                	mov    $0x1,%al
f010dc6b:	eb 02                	jmp    f010dc6f <isKHeapPlacementStrategyNEXTFIT+0x13>
f010dc6d:	b0 00                	mov    $0x0,%al
f010dc6f:	5d                   	pop    %ebp
f010dc70:	c3                   	ret    

f010dc71 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010dc71:	55                   	push   %ebp
f010dc72:	89 e5                	mov    %esp,%ebp
f010dc74:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dc77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dc7e:	eb 26                	jmp    f010dca6 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010dc80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dc8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc8d:	01 c2                	add    %eax,%edx
f010dc8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc92:	40                   	inc    %eax
f010dc93:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010dc9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc9d:	01 c8                	add    %ecx,%eax
f010dc9f:	8b 00                	mov    (%eax),%eax
f010dca1:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dca3:	ff 45 f4             	incl   -0xc(%ebp)
f010dca6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dca9:	48                   	dec    %eax
f010dcaa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dcad:	7f d1                	jg     f010dc80 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010dcaf:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010dcb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dcb9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010dcc0:	eb 35                	jmp    f010dcf7 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010dcc2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcc5:	89 d0                	mov    %edx,%eax
f010dcc7:	01 c0                	add    %eax,%eax
f010dcc9:	01 d0                	add    %edx,%eax
f010dccb:	c1 e0 02             	shl    $0x2,%eax
f010dcce:	05 80 ca 18 f0       	add    $0xf018ca80,%eax
f010dcd3:	8b 10                	mov    (%eax),%edx
f010dcd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcd8:	8b 00                	mov    (%eax),%eax
f010dcda:	83 ec 08             	sub    $0x8,%esp
f010dcdd:	52                   	push   %edx
f010dcde:	50                   	push   %eax
f010dcdf:	e8 36 12 02 00       	call   f012ef1a <strcmp>
f010dce4:	83 c4 10             	add    $0x10,%esp
f010dce7:	85 c0                	test   %eax,%eax
f010dce9:	75 09                	jne    f010dcf4 <tst_handler+0x83>
		{
			test_found = 1;
f010dceb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010dcf2:	eb 0f                	jmp    f010dd03 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dcf4:	ff 45 ec             	incl   -0x14(%ebp)
f010dcf7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcfa:	a1 1c cb 18 f0       	mov    0xf018cb1c,%eax
f010dcff:	39 c2                	cmp    %eax,%edx
f010dd01:	72 bf                	jb     f010dcc2 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010dd03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dd07:	74 29                	je     f010dd32 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010dd09:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dd0c:	89 d0                	mov    %edx,%eax
f010dd0e:	01 c0                	add    %eax,%eax
f010dd10:	01 d0                	add    %edx,%eax
f010dd12:	c1 e0 02             	shl    $0x2,%eax
f010dd15:	05 88 ca 18 f0       	add    $0xf018ca88,%eax
f010dd1a:	8b 00                	mov    (%eax),%eax
f010dd1c:	83 ec 08             	sub    $0x8,%esp
f010dd1f:	ff 75 0c             	pushl  0xc(%ebp)
f010dd22:	ff 75 08             	pushl  0x8(%ebp)
f010dd25:	ff d0                	call   *%eax
f010dd27:	83 c4 10             	add    $0x10,%esp
f010dd2a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010dd2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dd30:	eb 1b                	jmp    f010dd4d <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010dd32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd35:	8b 00                	mov    (%eax),%eax
f010dd37:	83 ec 08             	sub    $0x8,%esp
f010dd3a:	50                   	push   %eax
f010dd3b:	68 54 38 13 f0       	push   $0xf0133854
f010dd40:	e8 ec 30 ff ff       	call   f0100e31 <cprintf>
f010dd45:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd48:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010dd4d:	c9                   	leave  
f010dd4e:	c3                   	ret    

f010dd4f <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010dd4f:	55                   	push   %ebp
f010dd50:	89 e5                	mov    %esp,%ebp
f010dd52:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010dd55:	e8 3d 70 01 00       	call   f0124d97 <test_three_creation_functions>
	return 0;
f010dd5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd5f:	c9                   	leave  
f010dd60:	c3                   	ret    

f010dd61 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010dd61:	55                   	push   %ebp
f010dd62:	89 e5                	mov    %esp,%ebp
f010dd64:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010dd67:	e8 ff 91 00 00       	call   f0116f6b <test_priority_normal_and_higher>
	return 0;
f010dd6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd71:	c9                   	leave  
f010dd72:	c3                   	ret    

f010dd73 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010dd73:	55                   	push   %ebp
f010dd74:	89 e5                	mov    %esp,%ebp
f010dd76:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010dd79:	e8 57 9c 00 00       	call   f01179d5 <test_priority_normal_and_lower>
	return 0;
f010dd7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd83:	c9                   	leave  
f010dd84:	c3                   	ret    

f010dd85 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010dd85:	55                   	push   %ebp
f010dd86:	89 e5                	mov    %esp,%ebp
f010dd88:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010dd8b:	e8 1b 72 01 00       	call   f0124fab <test_kfreeall>
	return 0;
f010dd90:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd95:	c9                   	leave  
f010dd96:	c3                   	ret    

f010dd97 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010dd97:	55                   	push   %ebp
f010dd98:	89 e5                	mov    %esp,%ebp
f010dd9a:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010dd9d:	e8 a3 86 01 00       	call   f0126445 <test_kexpand>
	return 0;
f010dda2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dda7:	c9                   	leave  
f010dda8:	c3                   	ret    

f010dda9 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010dda9:	55                   	push   %ebp
f010ddaa:	89 e5                	mov    %esp,%ebp
f010ddac:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010ddaf:	e8 62 92 01 00       	call   f0127016 <test_kshrink>
	return 0;
f010ddb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddb9:	c9                   	leave  
f010ddba:	c3                   	ret    

f010ddbb <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010ddbb:	55                   	push   %ebp
f010ddbc:	89 e5                	mov    %esp,%ebp
f010ddbe:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010ddc1:	e8 57 9f 01 00       	call   f0127d1d <test_kfreelast>
	return 0;
f010ddc6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddcb:	c9                   	leave  
f010ddcc:	c3                   	ret    

f010ddcd <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010ddcd:	55                   	push   %ebp
f010ddce:	89 e5                	mov    %esp,%ebp
f010ddd0:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010ddd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddd6:	83 c0 04             	add    $0x4,%eax
f010ddd9:	8b 00                	mov    (%eax),%eax
f010dddb:	83 ec 04             	sub    $0x4,%esp
f010ddde:	6a 0a                	push   $0xa
f010dde0:	6a 00                	push   $0x0
f010dde2:	50                   	push   %eax
f010dde3:	e8 86 13 02 00       	call   f012f16e <strtol>
f010dde8:	83 c4 10             	add    $0x10,%esp
f010ddeb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010ddee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010ddf5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010ddfc:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f010de01:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010de04:	eb 3b                	jmp    f010de41 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010de06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de09:	83 c0 5c             	add    $0x5c,%eax
f010de0c:	83 ec 08             	sub    $0x8,%esp
f010de0f:	68 67 38 13 f0       	push   $0xf0133867
f010de14:	50                   	push   %eax
f010de15:	e8 00 11 02 00       	call   f012ef1a <strcmp>
f010de1a:	83 c4 10             	add    $0x10,%esp
f010de1d:	85 c0                	test   %eax,%eax
f010de1f:	75 12                	jne    f010de33 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010de21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de25:	74 07                	je     f010de2e <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010de27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010de2e:	ff 45 f4             	incl   -0xc(%ebp)
f010de31:	eb 06                	jmp    f010de39 <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010de33:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de37:	74 31                	je     f010de6a <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010de39:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f010de3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010de41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de45:	74 08                	je     f010de4f <tst_sc_MLFQ+0x82>
f010de47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de4a:	8b 40 44             	mov    0x44(%eax),%eax
f010de4d:	eb 05                	jmp    f010de54 <tst_sc_MLFQ+0x87>
f010de4f:	b8 00 00 00 00       	mov    $0x0,%eax
f010de54:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f010de59:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f010de5e:	85 c0                	test   %eax,%eax
f010de60:	75 a4                	jne    f010de06 <tst_sc_MLFQ+0x39>
f010de62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de66:	75 9e                	jne    f010de06 <tst_sc_MLFQ+0x39>
f010de68:	eb 01                	jmp    f010de6b <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010de6a:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010de6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de6e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010de71:	75 12                	jne    f010de85 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010de73:	83 ec 0c             	sub    $0xc,%esp
f010de76:	68 70 38 13 f0       	push   $0xf0133870
f010de7b:	e8 b1 2f ff ff       	call   f0100e31 <cprintf>
f010de80:	83 c4 10             	add    $0x10,%esp
f010de83:	eb 17                	jmp    f010de9c <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010de85:	83 ec 04             	sub    $0x4,%esp
f010de88:	68 a9 38 13 f0       	push   $0xf01338a9
f010de8d:	68 94 00 00 00       	push   $0x94
f010de92:	68 bf 38 13 f0       	push   $0xf01338bf
f010de97:	e8 14 23 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010de9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dea1:	c9                   	leave  
f010dea2:	c3                   	ret    

f010dea3 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010dea3:	55                   	push   %ebp
f010dea4:	89 e5                	mov    %esp,%ebp
f010dea6:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010dea9:	e8 80 3d 00 00       	call   f0111c2e <TestAutoCompleteCommand>
f010deae:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010deb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010deb6:	c9                   	leave  
f010deb7:	c3                   	ret    

f010deb8 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010deb8:	55                   	push   %ebp
f010deb9:	89 e5                	mov    %esp,%ebp
f010debb:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010debe:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dec2:	74 1a                	je     f010dede <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010dec4:	83 ec 0c             	sub    $0xc,%esp
f010dec7:	68 d8 38 13 f0       	push   $0xf01338d8
f010decc:	e8 60 2f ff ff       	call   f0100e31 <cprintf>
f010ded1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ded4:	b8 00 00 00 00       	mov    $0x0,%eax
f010ded9:	e9 2f 01 00 00       	jmp    f010e00d <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010dede:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dee1:	83 c0 04             	add    $0x4,%eax
f010dee4:	8b 00                	mov    (%eax),%eax
f010dee6:	83 ec 08             	sub    $0x8,%esp
f010dee9:	68 15 39 13 f0       	push   $0xf0133915
f010deee:	50                   	push   %eax
f010deef:	e8 26 10 02 00       	call   f012ef1a <strcmp>
f010def4:	83 c4 10             	add    $0x10,%esp
f010def7:	85 c0                	test   %eax,%eax
f010def9:	75 0a                	jne    f010df05 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010defb:	e8 80 06 00 00       	call   f010e580 <test_initialize_dynamic_allocator>
f010df00:	e9 03 01 00 00       	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010df05:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df08:	83 c0 04             	add    $0x4,%eax
f010df0b:	8b 00                	mov    (%eax),%eax
f010df0d:	83 ec 08             	sub    $0x8,%esp
f010df10:	68 1a 39 13 f0       	push   $0xf013391a
f010df15:	50                   	push   %eax
f010df16:	e8 ff 0f 02 00       	call   f012ef1a <strcmp>
f010df1b:	83 c4 10             	add    $0x10,%esp
f010df1e:	85 c0                	test   %eax,%eax
f010df20:	75 0a                	jne    f010df2c <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010df22:	e8 a1 0a 00 00       	call   f010e9c8 <test_alloc_block_FF>
f010df27:	e9 dc 00 00 00       	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010df2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df2f:	83 c0 04             	add    $0x4,%eax
f010df32:	8b 00                	mov    (%eax),%eax
f010df34:	83 ec 08             	sub    $0x8,%esp
f010df37:	68 22 39 13 f0       	push   $0xf0133922
f010df3c:	50                   	push   %eax
f010df3d:	e8 d8 0f 02 00       	call   f012ef1a <strcmp>
f010df42:	83 c4 10             	add    $0x10,%esp
f010df45:	85 c0                	test   %eax,%eax
f010df47:	75 0a                	jne    f010df53 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010df49:	e8 84 0e 00 00       	call   f010edd2 <test_alloc_block_BF>
f010df4e:	e9 b5 00 00 00       	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010df53:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df56:	83 c0 04             	add    $0x4,%eax
f010df59:	8b 00                	mov    (%eax),%eax
f010df5b:	83 ec 08             	sub    $0x8,%esp
f010df5e:	68 2a 39 13 f0       	push   $0xf013392a
f010df63:	50                   	push   %eax
f010df64:	e8 b1 0f 02 00       	call   f012ef1a <strcmp>
f010df69:	83 c4 10             	add    $0x10,%esp
f010df6c:	85 c0                	test   %eax,%eax
f010df6e:	75 0a                	jne    f010df7a <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010df70:	e8 b3 12 00 00       	call   f010f228 <test_alloc_block_NF>
f010df75:	e9 8e 00 00 00       	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010df7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df7d:	83 c0 04             	add    $0x4,%eax
f010df80:	8b 00                	mov    (%eax),%eax
f010df82:	83 ec 08             	sub    $0x8,%esp
f010df85:	68 32 39 13 f0       	push   $0xf0133932
f010df8a:	50                   	push   %eax
f010df8b:	e8 8a 0f 02 00       	call   f012ef1a <strcmp>
f010df90:	83 c4 10             	add    $0x10,%esp
f010df93:	85 c0                	test   %eax,%eax
f010df95:	75 07                	jne    f010df9e <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010df97:	e8 92 12 00 00       	call   f010f22e <test_free_block_FF>
f010df9c:	eb 6a                	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010df9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa1:	83 c0 04             	add    $0x4,%eax
f010dfa4:	8b 00                	mov    (%eax),%eax
f010dfa6:	83 ec 08             	sub    $0x8,%esp
f010dfa9:	68 39 39 13 f0       	push   $0xf0133939
f010dfae:	50                   	push   %eax
f010dfaf:	e8 66 0f 02 00       	call   f012ef1a <strcmp>
f010dfb4:	83 c4 10             	add    $0x10,%esp
f010dfb7:	85 c0                	test   %eax,%eax
f010dfb9:	75 07                	jne    f010dfc2 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010dfbb:	e8 d3 20 00 00       	call   f0110093 <test_free_block_BF>
f010dfc0:	eb 46                	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010dfc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfc5:	83 c0 04             	add    $0x4,%eax
f010dfc8:	8b 00                	mov    (%eax),%eax
f010dfca:	83 ec 08             	sub    $0x8,%esp
f010dfcd:	68 40 39 13 f0       	push   $0xf0133940
f010dfd2:	50                   	push   %eax
f010dfd3:	e8 42 0f 02 00       	call   f012ef1a <strcmp>
f010dfd8:	83 c4 10             	add    $0x10,%esp
f010dfdb:	85 c0                	test   %eax,%eax
f010dfdd:	75 07                	jne    f010dfe6 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010dfdf:	e8 c1 2e 00 00       	call   f0110ea5 <test_free_block_NF>
f010dfe4:	eb 22                	jmp    f010e008 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010dfe6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfe9:	83 c0 04             	add    $0x4,%eax
f010dfec:	8b 00                	mov    (%eax),%eax
f010dfee:	83 ec 08             	sub    $0x8,%esp
f010dff1:	68 47 39 13 f0       	push   $0xf0133947
f010dff6:	50                   	push   %eax
f010dff7:	e8 1e 0f 02 00       	call   f012ef1a <strcmp>
f010dffc:	83 c4 10             	add    $0x10,%esp
f010dfff:	85 c0                	test   %eax,%eax
f010e001:	75 05                	jne    f010e008 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010e003:	e8 ba 2e 00 00       	call   f0110ec2 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010e008:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e00d:	c9                   	leave  
f010e00e:	c3                   	ret    

f010e00f <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010e00f:	55                   	push   %ebp
f010e010:	89 e5                	mov    %esp,%ebp
f010e012:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e015:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e019:	74 1a                	je     f010e035 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010e01b:	83 ec 0c             	sub    $0xc,%esp
f010e01e:	68 54 39 13 f0       	push   $0xf0133954
f010e023:	e8 09 2e ff ff       	call   f0100e31 <cprintf>
f010e028:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e02b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e030:	e9 e1 00 00 00       	jmp    f010e116 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010e035:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e038:	83 c0 04             	add    $0x4,%eax
f010e03b:	8b 00                	mov    (%eax),%eax
f010e03d:	83 ec 08             	sub    $0x8,%esp
f010e040:	68 8d 39 13 f0       	push   $0xf013398d
f010e045:	50                   	push   %eax
f010e046:	e8 cf 0e 02 00       	call   f012ef1a <strcmp>
f010e04b:	83 c4 10             	add    $0x10,%esp
f010e04e:	85 c0                	test   %eax,%eax
f010e050:	75 0a                	jne    f010e05c <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010e052:	e8 dd 42 00 00       	call   f0112334 <test_cut_paste_pages>
f010e057:	e9 b5 00 00 00       	jmp    f010e111 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010e05c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e05f:	83 c0 04             	add    $0x4,%eax
f010e062:	8b 00                	mov    (%eax),%eax
f010e064:	83 ec 08             	sub    $0x8,%esp
f010e067:	68 96 39 13 f0       	push   $0xf0133996
f010e06c:	50                   	push   %eax
f010e06d:	e8 a8 0e 02 00       	call   f012ef1a <strcmp>
f010e072:	83 c4 10             	add    $0x10,%esp
f010e075:	85 c0                	test   %eax,%eax
f010e077:	75 0a                	jne    f010e083 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e079:	e8 07 4d 00 00       	call   f0112d85 <test_copy_paste_chunk>
f010e07e:	e9 8e 00 00 00       	jmp    f010e111 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e083:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e086:	83 c0 04             	add    $0x4,%eax
f010e089:	8b 00                	mov    (%eax),%eax
f010e08b:	83 ec 08             	sub    $0x8,%esp
f010e08e:	68 a0 39 13 f0       	push   $0xf01339a0
f010e093:	50                   	push   %eax
f010e094:	e8 81 0e 02 00       	call   f012ef1a <strcmp>
f010e099:	83 c4 10             	add    $0x10,%esp
f010e09c:	85 c0                	test   %eax,%eax
f010e09e:	75 07                	jne    f010e0a7 <tst_chunks+0x98>
	{
		test_share_chunk();
f010e0a0:	e8 e4 5d 00 00       	call   f0113e89 <test_share_chunk>
f010e0a5:	eb 6a                	jmp    f010e111 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e0a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0aa:	83 c0 04             	add    $0x4,%eax
f010e0ad:	8b 00                	mov    (%eax),%eax
f010e0af:	83 ec 08             	sub    $0x8,%esp
f010e0b2:	68 a6 39 13 f0       	push   $0xf01339a6
f010e0b7:	50                   	push   %eax
f010e0b8:	e8 5d 0e 02 00       	call   f012ef1a <strcmp>
f010e0bd:	83 c4 10             	add    $0x10,%esp
f010e0c0:	85 c0                	test   %eax,%eax
f010e0c2:	75 07                	jne    f010e0cb <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e0c4:	e8 ee 67 00 00       	call   f01148b7 <test_allocate_chunk>
f010e0c9:	eb 46                	jmp    f010e111 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e0cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0ce:	83 c0 04             	add    $0x4,%eax
f010e0d1:	8b 00                	mov    (%eax),%eax
f010e0d3:	83 ec 08             	sub    $0x8,%esp
f010e0d6:	68 af 39 13 f0       	push   $0xf01339af
f010e0db:	50                   	push   %eax
f010e0dc:	e8 39 0e 02 00       	call   f012ef1a <strcmp>
f010e0e1:	83 c4 10             	add    $0x10,%esp
f010e0e4:	85 c0                	test   %eax,%eax
f010e0e6:	75 07                	jne    f010e0ef <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e0e8:	e8 d7 70 00 00       	call   f01151c4 <test_calculate_required_frames>
f010e0ed:	eb 22                	jmp    f010e111 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e0ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0f2:	83 c0 04             	add    $0x4,%eax
f010e0f5:	8b 00                	mov    (%eax),%eax
f010e0f7:	83 ec 08             	sub    $0x8,%esp
f010e0fa:	68 be 39 13 f0       	push   $0xf01339be
f010e0ff:	50                   	push   %eax
f010e100:	e8 15 0e 02 00       	call   f012ef1a <strcmp>
f010e105:	83 c4 10             	add    $0x10,%esp
f010e108:	85 c0                	test   %eax,%eax
f010e10a:	75 05                	jne    f010e111 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e10c:	e8 2d 79 00 00       	call   f0115a3e <test_calculate_allocated_space>
	}
	return 0;
f010e111:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e116:	c9                   	leave  
f010e117:	c3                   	ret    

f010e118 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e118:	55                   	push   %ebp
f010e119:	89 e5                	mov    %esp,%ebp
f010e11b:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e11e:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e122:	74 1a                	je     f010e13e <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e124:	83 ec 0c             	sub    $0xc,%esp
f010e127:	68 d0 39 13 f0       	push   $0xf01339d0
f010e12c:	e8 00 2d ff ff       	call   f0100e31 <cprintf>
f010e131:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e134:	b8 00 00 00 00       	mov    $0x0,%eax
f010e139:	e9 ba 00 00 00       	jmp    f010e1f8 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e13e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e141:	83 c0 04             	add    $0x4,%eax
f010e144:	8b 00                	mov    (%eax),%eax
f010e146:	83 ec 08             	sub    $0x8,%esp
f010e149:	68 06 3a 13 f0       	push   $0xf0133a06
f010e14e:	50                   	push   %eax
f010e14f:	e8 c6 0d 02 00       	call   f012ef1a <strcmp>
f010e154:	83 c4 10             	add    $0x10,%esp
f010e157:	85 c0                	test   %eax,%eax
f010e159:	75 0a                	jne    f010e165 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e15b:	e8 53 3c 00 00       	call   f0111db3 <test_pt_set_page_permissions>
f010e160:	e9 8e 00 00 00       	jmp    f010e1f3 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e165:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e168:	83 c0 04             	add    $0x4,%eax
f010e16b:	8b 00                	mov    (%eax),%eax
f010e16d:	83 ec 08             	sub    $0x8,%esp
f010e170:	68 0e 3a 13 f0       	push   $0xf0133a0e
f010e175:	50                   	push   %eax
f010e176:	e8 9f 0d 02 00       	call   f012ef1a <strcmp>
f010e17b:	83 c4 10             	add    $0x10,%esp
f010e17e:	85 c0                	test   %eax,%eax
f010e180:	75 07                	jne    f010e189 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e182:	e8 8f 3e 00 00       	call   f0112016 <test_pt_set_page_permissions_invalid_va>
f010e187:	eb 6a                	jmp    f010e1f3 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e189:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e18c:	83 c0 04             	add    $0x4,%eax
f010e18f:	8b 00                	mov    (%eax),%eax
f010e191:	83 ec 08             	sub    $0x8,%esp
f010e194:	68 16 3a 13 f0       	push   $0xf0133a16
f010e199:	50                   	push   %eax
f010e19a:	e8 7b 0d 02 00       	call   f012ef1a <strcmp>
f010e19f:	83 c4 10             	add    $0x10,%esp
f010e1a2:	85 c0                	test   %eax,%eax
f010e1a4:	75 07                	jne    f010e1ad <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e1a6:	e8 b4 3e 00 00       	call   f011205f <test_pt_get_page_permissions>
f010e1ab:	eb 46                	jmp    f010e1f3 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e1ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1b0:	83 c0 04             	add    $0x4,%eax
f010e1b3:	8b 00                	mov    (%eax),%eax
f010e1b5:	83 ec 08             	sub    $0x8,%esp
f010e1b8:	68 1e 3a 13 f0       	push   $0xf0133a1e
f010e1bd:	50                   	push   %eax
f010e1be:	e8 57 0d 02 00       	call   f012ef1a <strcmp>
f010e1c3:	83 c4 10             	add    $0x10,%esp
f010e1c6:	85 c0                	test   %eax,%eax
f010e1c8:	75 07                	jne    f010e1d1 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e1ca:	e8 d4 3f 00 00       	call   f01121a3 <test_pt_clear_page_table_entry>
f010e1cf:	eb 22                	jmp    f010e1f3 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1d4:	83 c0 04             	add    $0x4,%eax
f010e1d7:	8b 00                	mov    (%eax),%eax
f010e1d9:	83 ec 08             	sub    $0x8,%esp
f010e1dc:	68 25 3a 13 f0       	push   $0xf0133a25
f010e1e1:	50                   	push   %eax
f010e1e2:	e8 33 0d 02 00       	call   f012ef1a <strcmp>
f010e1e7:	83 c4 10             	add    $0x10,%esp
f010e1ea:	85 c0                	test   %eax,%eax
f010e1ec:	75 05                	jne    f010e1f3 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e1ee:	e8 09 41 00 00       	call   f01122fc <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e1f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e1f8:	c9                   	leave  
f010e1f9:	c3                   	ret    

f010e1fa <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e1fa:	55                   	push   %ebp
f010e1fb:	89 e5                	mov    %esp,%ebp
f010e1fd:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e200:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e203:	83 c0 08             	add    $0x8,%eax
f010e206:	8b 00                	mov    (%eax),%eax
f010e208:	83 ec 08             	sub    $0x8,%esp
f010e20b:	68 2c 3a 13 f0       	push   $0xf0133a2c
f010e210:	50                   	push   %eax
f010e211:	e8 04 0d 02 00       	call   f012ef1a <strcmp>
f010e216:	83 c4 10             	add    $0x10,%esp
f010e219:	85 c0                	test   %eax,%eax
f010e21b:	75 20                	jne    f010e23d <tst_kheap+0x43>
f010e21d:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e221:	74 1a                	je     f010e23d <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e223:	83 ec 0c             	sub    $0xc,%esp
f010e226:	68 34 3a 13 f0       	push   $0xf0133a34
f010e22b:	e8 01 2c ff ff       	call   f0100e31 <cprintf>
f010e230:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e233:	b8 00 00 00 00       	mov    $0x0,%eax
f010e238:	e9 41 03 00 00       	jmp    f010e57e <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e23d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e240:	83 c0 08             	add    $0x8,%eax
f010e243:	8b 00                	mov    (%eax),%eax
f010e245:	83 ec 08             	sub    $0x8,%esp
f010e248:	68 2c 3a 13 f0       	push   $0xf0133a2c
f010e24d:	50                   	push   %eax
f010e24e:	e8 c7 0c 02 00       	call   f012ef1a <strcmp>
f010e253:	83 c4 10             	add    $0x10,%esp
f010e256:	85 c0                	test   %eax,%eax
f010e258:	74 20                	je     f010e27a <tst_kheap+0x80>
f010e25a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e25e:	74 1a                	je     f010e27a <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e260:	83 ec 0c             	sub    $0xc,%esp
f010e263:	68 84 3a 13 f0       	push   $0xf0133a84
f010e268:	e8 c4 2b ff ff       	call   f0100e31 <cprintf>
f010e26d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e270:	b8 00 00 00 00       	mov    $0x0,%eax
f010e275:	e9 04 03 00 00       	jmp    f010e57e <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e27a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e27d:	83 c0 04             	add    $0x4,%eax
f010e280:	8b 00                	mov    (%eax),%eax
f010e282:	83 ec 08             	sub    $0x8,%esp
f010e285:	68 c9 3a 13 f0       	push   $0xf0133ac9
f010e28a:	50                   	push   %eax
f010e28b:	e8 8a 0c 02 00       	call   f012ef1a <strcmp>
f010e290:	83 c4 10             	add    $0x10,%esp
f010e293:	85 c0                	test   %eax,%eax
f010e295:	74 1d                	je     f010e2b4 <tst_kheap+0xba>
f010e297:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e29a:	83 c0 04             	add    $0x4,%eax
f010e29d:	8b 00                	mov    (%eax),%eax
f010e29f:	83 ec 08             	sub    $0x8,%esp
f010e2a2:	68 cc 3a 13 f0       	push   $0xf0133acc
f010e2a7:	50                   	push   %eax
f010e2a8:	e8 6d 0c 02 00       	call   f012ef1a <strcmp>
f010e2ad:	83 c4 10             	add    $0x10,%esp
f010e2b0:	85 c0                	test   %eax,%eax
f010e2b2:	75 1a                	jne    f010e2ce <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e2b4:	e8 49 f9 ff ff       	call   f010dc02 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e2b9:	83 ec 0c             	sub    $0xc,%esp
f010e2bc:	68 d0 3a 13 f0       	push   $0xf0133ad0
f010e2c1:	e8 6b 2b ff ff       	call   f0100e31 <cprintf>
f010e2c6:	83 c4 10             	add    $0x10,%esp
f010e2c9:	e9 a0 00 00 00       	jmp    f010e36e <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e2ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2d1:	83 c0 04             	add    $0x4,%eax
f010e2d4:	8b 00                	mov    (%eax),%eax
f010e2d6:	83 ec 08             	sub    $0x8,%esp
f010e2d9:	68 fd 3a 13 f0       	push   $0xf0133afd
f010e2de:	50                   	push   %eax
f010e2df:	e8 36 0c 02 00       	call   f012ef1a <strcmp>
f010e2e4:	83 c4 10             	add    $0x10,%esp
f010e2e7:	85 c0                	test   %eax,%eax
f010e2e9:	74 1d                	je     f010e308 <tst_kheap+0x10e>
f010e2eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2ee:	83 c0 04             	add    $0x4,%eax
f010e2f1:	8b 00                	mov    (%eax),%eax
f010e2f3:	83 ec 08             	sub    $0x8,%esp
f010e2f6:	68 00 3b 13 f0       	push   $0xf0133b00
f010e2fb:	50                   	push   %eax
f010e2fc:	e8 19 0c 02 00       	call   f012ef1a <strcmp>
f010e301:	83 c4 10             	add    $0x10,%esp
f010e304:	85 c0                	test   %eax,%eax
f010e306:	75 17                	jne    f010e31f <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e308:	e8 05 f9 ff ff       	call   f010dc12 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e30d:	83 ec 0c             	sub    $0xc,%esp
f010e310:	68 04 3b 13 f0       	push   $0xf0133b04
f010e315:	e8 17 2b ff ff       	call   f0100e31 <cprintf>
f010e31a:	83 c4 10             	add    $0x10,%esp
f010e31d:	eb 4f                	jmp    f010e36e <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e31f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e322:	83 c0 04             	add    $0x4,%eax
f010e325:	8b 00                	mov    (%eax),%eax
f010e327:	83 ec 08             	sub    $0x8,%esp
f010e32a:	68 30 3b 13 f0       	push   $0xf0133b30
f010e32f:	50                   	push   %eax
f010e330:	e8 e5 0b 02 00       	call   f012ef1a <strcmp>
f010e335:	83 c4 10             	add    $0x10,%esp
f010e338:	85 c0                	test   %eax,%eax
f010e33a:	74 1d                	je     f010e359 <tst_kheap+0x15f>
f010e33c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e33f:	83 c0 04             	add    $0x4,%eax
f010e342:	8b 00                	mov    (%eax),%eax
f010e344:	83 ec 08             	sub    $0x8,%esp
f010e347:	68 33 3b 13 f0       	push   $0xf0133b33
f010e34c:	50                   	push   %eax
f010e34d:	e8 c8 0b 02 00       	call   f012ef1a <strcmp>
f010e352:	83 c4 10             	add    $0x10,%esp
f010e355:	85 c0                	test   %eax,%eax
f010e357:	75 15                	jne    f010e36e <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e359:	e8 c4 f8 ff ff       	call   f010dc22 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e35e:	83 ec 0c             	sub    $0xc,%esp
f010e361:	68 38 3b 13 f0       	push   $0xf0133b38
f010e366:	e8 c6 2a ff ff       	call   f0100e31 <cprintf>
f010e36b:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e36e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e371:	83 c0 08             	add    $0x8,%eax
f010e374:	8b 00                	mov    (%eax),%eax
f010e376:	83 ec 08             	sub    $0x8,%esp
f010e379:	68 2c 3a 13 f0       	push   $0xf0133a2c
f010e37e:	50                   	push   %eax
f010e37f:	e8 96 0b 02 00       	call   f012ef1a <strcmp>
f010e384:	83 c4 10             	add    $0x10,%esp
f010e387:	85 c0                	test   %eax,%eax
f010e389:	0f 85 13 01 00 00    	jne    f010e4a2 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e38f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e392:	83 c0 0c             	add    $0xc,%eax
f010e395:	8b 00                	mov    (%eax),%eax
f010e397:	83 ec 04             	sub    $0x4,%esp
f010e39a:	6a 0a                	push   $0xa
f010e39c:	6a 00                	push   $0x0
f010e39e:	50                   	push   %eax
f010e39f:	e8 ca 0d 02 00       	call   f012f16e <strtol>
f010e3a4:	83 c4 10             	add    $0x10,%esp
f010e3a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e3aa:	e8 83 f8 ff ff       	call   f010dc32 <isKHeapPlacementStrategyFIRSTFIT>
f010e3af:	84 c0                	test   %al,%al
f010e3b1:	74 54                	je     f010e407 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e3b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e3b7:	75 1a                	jne    f010e3d3 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e3b9:	83 ec 0c             	sub    $0xc,%esp
f010e3bc:	68 64 3b 13 f0       	push   $0xf0133b64
f010e3c1:	e8 6b 2a ff ff       	call   f0100e31 <cprintf>
f010e3c6:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e3c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3ce:	e9 ab 01 00 00       	jmp    f010e57e <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e3d3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e3d7:	75 0a                	jne    f010e3e3 <tst_kheap+0x1e9>
				test_kmalloc();
f010e3d9:	e8 59 a0 00 00       	call   f0118437 <test_kmalloc>
f010e3de:	e9 b5 00 00 00       	jmp    f010e498 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e3e3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e3e7:	75 0a                	jne    f010e3f3 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e3e9:	e8 96 e2 00 00       	call   f011c684 <test_kmalloc_firstfit1>
f010e3ee:	e9 a5 00 00 00       	jmp    f010e498 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e3f3:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e3f7:	0f 85 9b 00 00 00    	jne    f010e498 <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e3fd:	e8 30 f3 00 00       	call   f011d732 <test_kmalloc_firstfit2>
f010e402:	e9 91 00 00 00       	jmp    f010e498 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e407:	e8 3b f8 ff ff       	call   f010dc47 <isKHeapPlacementStrategyBESTFIT>
f010e40c:	84 c0                	test   %al,%al
f010e40e:	74 47                	je     f010e457 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e410:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e414:	75 1a                	jne    f010e430 <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e416:	83 ec 0c             	sub    $0xc,%esp
f010e419:	68 b4 3b 13 f0       	push   $0xf0133bb4
f010e41e:	e8 0e 2a ff ff       	call   f0100e31 <cprintf>
f010e423:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e426:	b8 00 00 00 00       	mov    $0x0,%eax
f010e42b:	e9 4e 01 00 00       	jmp    f010e57e <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e430:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e434:	75 07                	jne    f010e43d <tst_kheap+0x243>
				test_kmalloc();
f010e436:	e8 fc 9f 00 00       	call   f0118437 <test_kmalloc>
f010e43b:	eb 5b                	jmp    f010e498 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e43d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e441:	75 07                	jne    f010e44a <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e443:	e8 b8 c2 00 00       	call   f011a700 <test_kmalloc_bestfit1>
f010e448:	eb 4e                	jmp    f010e498 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e44a:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e44e:	75 48                	jne    f010e498 <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e450:	e8 43 d2 00 00       	call   f011b698 <test_kmalloc_bestfit2>
f010e455:	eb 41                	jmp    f010e498 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e457:	e8 00 f8 ff ff       	call   f010dc5c <isKHeapPlacementStrategyNEXTFIT>
f010e45c:	84 c0                	test   %al,%al
f010e45e:	74 38                	je     f010e498 <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e460:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e464:	75 1a                	jne    f010e480 <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e466:	83 ec 0c             	sub    $0xc,%esp
f010e469:	68 04 3c 13 f0       	push   $0xf0133c04
f010e46e:	e8 be 29 ff ff       	call   f0100e31 <cprintf>
f010e473:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e476:	b8 00 00 00 00       	mov    $0x0,%eax
f010e47b:	e9 fe 00 00 00       	jmp    f010e57e <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e480:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e484:	75 07                	jne    f010e48d <tst_kheap+0x293>
				test_kmalloc();
f010e486:	e8 ac 9f 00 00       	call   f0118437 <test_kmalloc>
f010e48b:	eb 0b                	jmp    f010e498 <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e48d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e491:	75 05                	jne    f010e498 <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e493:	e8 ab af 00 00       	call   f0119443 <test_kmalloc_nextfit>
		}
		return 0;
f010e498:	b8 00 00 00 00       	mov    $0x0,%eax
f010e49d:	e9 dc 00 00 00       	jmp    f010e57e <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e4a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4a5:	83 c0 08             	add    $0x8,%eax
f010e4a8:	8b 00                	mov    (%eax),%eax
f010e4aa:	83 ec 08             	sub    $0x8,%esp
f010e4ad:	68 52 3c 13 f0       	push   $0xf0133c52
f010e4b2:	50                   	push   %eax
f010e4b3:	e8 62 0a 02 00       	call   f012ef1a <strcmp>
f010e4b8:	83 c4 10             	add    $0x10,%esp
f010e4bb:	85 c0                	test   %eax,%eax
f010e4bd:	75 28                	jne    f010e4e7 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e4bf:	e8 83 f7 ff ff       	call   f010dc47 <isKHeapPlacementStrategyBESTFIT>
f010e4c4:	84 c0                	test   %al,%al
f010e4c6:	75 09                	jne    f010e4d1 <tst_kheap+0x2d7>
f010e4c8:	e8 65 f7 ff ff       	call   f010dc32 <isKHeapPlacementStrategyFIRSTFIT>
f010e4cd:	84 c0                	test   %al,%al
f010e4cf:	74 07                	je     f010e4d8 <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e4d1:	e8 15 2f 01 00       	call   f01213eb <test_kfree_bestfirstfit>
f010e4d6:	eb 05                	jmp    f010e4dd <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e4d8:	e8 1c 11 01 00       	call   f011f5f9 <test_kfree>
		}
		return 0;
f010e4dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4e2:	e9 97 00 00 00       	jmp    f010e57e <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e4e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4ea:	83 c0 08             	add    $0x8,%eax
f010e4ed:	8b 00                	mov    (%eax),%eax
f010e4ef:	83 ec 08             	sub    $0x8,%esp
f010e4f2:	68 58 3c 13 f0       	push   $0xf0133c58
f010e4f7:	50                   	push   %eax
f010e4f8:	e8 1d 0a 02 00       	call   f012ef1a <strcmp>
f010e4fd:	83 c4 10             	add    $0x10,%esp
f010e500:	85 c0                	test   %eax,%eax
f010e502:	75 0c                	jne    f010e510 <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e504:	e8 8c 46 01 00       	call   f0122b95 <test_kheap_phys_addr>
		return 0;
f010e509:	b8 00 00 00 00       	mov    $0x0,%eax
f010e50e:	eb 6e                	jmp    f010e57e <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e510:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e513:	83 c0 08             	add    $0x8,%eax
f010e516:	8b 00                	mov    (%eax),%eax
f010e518:	83 ec 08             	sub    $0x8,%esp
f010e51b:	68 62 3c 13 f0       	push   $0xf0133c62
f010e520:	50                   	push   %eax
f010e521:	e8 f4 09 02 00       	call   f012ef1a <strcmp>
f010e526:	83 c4 10             	add    $0x10,%esp
f010e529:	85 c0                	test   %eax,%eax
f010e52b:	75 0c                	jne    f010e539 <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e52d:	e8 a1 57 01 00       	call   f0123cd3 <test_kheap_virt_addr>
		return 0;
f010e532:	b8 00 00 00 00       	mov    $0x0,%eax
f010e537:	eb 45                	jmp    f010e57e <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e539:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e53c:	83 c0 08             	add    $0x8,%eax
f010e53f:	8b 00                	mov    (%eax),%eax
f010e541:	83 ec 08             	sub    $0x8,%esp
f010e544:	68 6c 3c 13 f0       	push   $0xf0133c6c
f010e549:	50                   	push   %eax
f010e54a:	e8 cb 09 02 00       	call   f012ef1a <strcmp>
f010e54f:	83 c4 10             	add    $0x10,%esp
f010e552:	85 c0                	test   %eax,%eax
f010e554:	75 23                	jne    f010e579 <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e556:	e8 01 f7 ff ff       	call   f010dc5c <isKHeapPlacementStrategyNEXTFIT>
f010e55b:	84 c0                	test   %al,%al
f010e55d:	74 05                	je     f010e564 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e55f:	e8 12 b9 01 00       	call   f0129e76 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e564:	e8 de f6 ff ff       	call   f010dc47 <isKHeapPlacementStrategyBESTFIT>
f010e569:	84 c0                	test   %al,%al
f010e56b:	74 05                	je     f010e572 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e56d:	e8 98 d6 01 00       	call   f012bc0a <test_krealloc_BF>
		}
		return 0;
f010e572:	b8 00 00 00 00       	mov    $0x0,%eax
f010e577:	eb 05                	jmp    f010e57e <tst_kheap+0x384>
	}
	return 0;
f010e579:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e57e:	c9                   	leave  
f010e57f:	c3                   	ret    

f010e580 <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e580:	55                   	push   %ebp
f010e581:	89 e5                	mov    %esp,%ebp
f010e583:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e586:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e590:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e596:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e599:	83 c0 04             	add    $0x4,%eax
f010e59c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e5a2:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e5a9:	83 ec 08             	sub    $0x8,%esp
f010e5ac:	ff 75 f0             	pushl  -0x10(%ebp)
f010e5af:	68 00 00 00 f6       	push   $0xf6000000
f010e5b4:	e8 d6 13 02 00       	call   f012f98f <initialize_dynamic_allocator>
f010e5b9:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e5bc:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e5c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e5c6:	8a 40 04             	mov    0x4(%eax),%al
f010e5c9:	3c 01                	cmp    $0x1,%al
f010e5cb:	75 0a                	jne    f010e5d7 <test_initialize_dynamic_allocator+0x57>
f010e5cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e5d0:	8b 00                	mov    (%eax),%eax
f010e5d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e5d5:	74 14                	je     f010e5eb <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e5d7:	83 ec 04             	sub    $0x4,%esp
f010e5da:	68 78 3c 13 f0       	push   $0xf0133c78
f010e5df:	6a 29                	push   $0x29
f010e5e1:	68 a4 3c 13 f0       	push   $0xf0133ca4
f010e5e6:	e8 c5 1b ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e5eb:	83 ec 0c             	sub    $0xc,%esp
f010e5ee:	68 c8 3c 13 f0       	push   $0xf0133cc8
f010e5f3:	e8 39 28 ff ff       	call   f0100e31 <cprintf>
f010e5f8:	83 c4 10             	add    $0x10,%esp
}
f010e5fb:	90                   	nop
f010e5fc:	c9                   	leave  
f010e5fd:	c3                   	ret    

f010e5fe <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e5fe:	55                   	push   %ebp
f010e5ff:	89 e5                	mov    %esp,%ebp
f010e601:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e604:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e60b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e612:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e619:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e61c:	83 ec 08             	sub    $0x8,%esp
f010e61f:	50                   	push   %eax
f010e620:	68 00 00 00 f6       	push   $0xf6000000
f010e625:	e8 65 13 02 00       	call   f012f98f <initialize_dynamic_allocator>
f010e62a:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e62d:	83 ec 0c             	sub    $0xc,%esp
f010e630:	68 18 3d 13 f0       	push   $0xf0133d18
f010e635:	e8 f7 27 ff ff       	call   f0100e31 <cprintf>
f010e63a:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e63d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e644:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e647:	89 c2                	mov    %eax,%edx
f010e649:	01 d2                	add    %edx,%edx
f010e64b:	01 d0                	add    %edx,%eax
f010e64d:	83 ec 08             	sub    $0x8,%esp
f010e650:	ff 75 08             	pushl  0x8(%ebp)
f010e653:	50                   	push   %eax
f010e654:	e8 1d 12 02 00       	call   f012f876 <alloc_block>
f010e659:	83 c4 10             	add    $0x10,%esp
f010e65c:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e65f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e663:	74 17                	je     f010e67c <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e665:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e66c:	83 ec 0c             	sub    $0xc,%esp
f010e66f:	68 54 3d 13 f0       	push   $0xf0133d54
f010e674:	e8 b8 27 ff ff       	call   f0100e31 <cprintf>
f010e679:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e67c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e67f:	83 ec 08             	sub    $0x8,%esp
f010e682:	ff 75 08             	pushl  0x8(%ebp)
f010e685:	50                   	push   %eax
f010e686:	e8 eb 11 02 00       	call   f012f876 <alloc_block>
f010e68b:	83 c4 10             	add    $0x10,%esp
f010e68e:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e691:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e695:	74 17                	je     f010e6ae <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e697:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e69e:	83 ec 0c             	sub    $0xc,%esp
f010e6a1:	68 ac 3d 13 f0       	push   $0xf0133dac
f010e6a6:	e8 86 27 ff ff       	call   f0100e31 <cprintf>
f010e6ab:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e6ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e6b2:	74 04                	je     f010e6b8 <test_initial_alloc+0xba>
	{
		eval += 5;
f010e6b4:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e6b8:	83 ec 0c             	sub    $0xc,%esp
f010e6bb:	68 04 3e 13 f0       	push   $0xf0133e04
f010e6c0:	e8 6c 27 ff ff       	call   f0100e31 <cprintf>
f010e6c5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e6c8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e6cf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e6d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e6dd:	eb 2a                	jmp    f010e709 <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e6df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e6e2:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f010e6e9:	89 d0                	mov    %edx,%eax
f010e6eb:	c1 e0 02             	shl    $0x2,%eax
f010e6ee:	01 d0                	add    %edx,%eax
f010e6f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e6f7:	01 d0                	add    %edx,%eax
f010e6f9:	c1 e0 03             	shl    $0x3,%eax
f010e6fc:	89 c2                	mov    %eax,%edx
f010e6fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e701:	01 d0                	add    %edx,%eax
f010e703:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e706:	ff 45 e8             	incl   -0x18(%ebp)
f010e709:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e70d:	7e d0                	jle    f010e6df <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e70f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e712:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e715:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e718:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e71c:	7f 17                	jg     f010e735 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e71e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e725:	83 ec 0c             	sub    $0xc,%esp
f010e728:	68 50 3e 13 f0       	push   $0xf0133e50
f010e72d:	e8 ff 26 ff ff       	call   f0100e31 <cprintf>
f010e732:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e735:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e73c:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e743:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e74a:	e9 fc 00 00 00       	jmp    f010e84b <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e74f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e756:	e9 e0 00 00 00       	jmp    f010e83b <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e75b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e75e:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010e765:	83 e8 10             	sub    $0x10,%eax
f010e768:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e76b:	83 ec 08             	sub    $0x8,%esp
f010e76e:	ff 75 08             	pushl  0x8(%ebp)
f010e771:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e774:	e8 fd 10 02 00       	call   f012f876 <alloc_block>
f010e779:	83 c4 10             	add    $0x10,%esp
f010e77c:	89 c2                	mov    %eax,%edx
f010e77e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e781:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010e788:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e78b:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010e792:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e795:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e798:	d1 e8                	shr    %eax
f010e79a:	89 c2                	mov    %eax,%edx
f010e79c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e79f:	01 c2                	add    %eax,%edx
f010e7a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7a4:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e7ab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e7ae:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e7b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e7b4:	01 c2                	add    %eax,%edx
f010e7b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7b9:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e7c0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e7c4:	74 0b                	je     f010e7d1 <test_initial_alloc+0x1d3>
f010e7c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e7c9:	83 c0 10             	add    $0x10,%eax
f010e7cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e7cf:	74 27                	je     f010e7f8 <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e7d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e7d5:	74 21                	je     f010e7f8 <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e7d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e7de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e7e1:	83 c0 10             	add    $0x10,%eax
f010e7e4:	ff 75 cc             	pushl  -0x34(%ebp)
f010e7e7:	50                   	push   %eax
f010e7e8:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e7eb:	68 cc 3e 13 f0       	push   $0xf0133ecc
f010e7f0:	e8 3c 26 ff ff       	call   f0100e31 <cprintf>
f010e7f5:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e7f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7fb:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010e802:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e805:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e808:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010e80f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e812:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e815:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e818:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010e81f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e822:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e825:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e828:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010e82f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e832:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e835:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e838:	ff 45 d8             	incl   -0x28(%ebp)
f010e83b:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e842:	0f 8e 13 ff ff ff    	jle    f010e75b <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e848:	ff 45 dc             	incl   -0x24(%ebp)
f010e84b:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e84f:	0f 8e fa fe ff ff    	jle    f010e74f <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e855:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e859:	74 04                	je     f010e85f <test_initial_alloc+0x261>
	{
		eval += 20;
f010e85b:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e85f:	83 ec 0c             	sub    $0xc,%esp
f010e862:	68 30 3f 13 f0       	push   $0xf0133f30
f010e867:	e8 c5 25 ff ff       	call   f0100e31 <cprintf>
f010e86c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e86f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e876:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e879:	83 e8 10             	sub    $0x10,%eax
f010e87c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e87f:	83 ec 08             	sub    $0x8,%esp
f010e882:	ff 75 08             	pushl  0x8(%ebp)
f010e885:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e888:	e8 e9 0f 02 00       	call   f012f876 <alloc_block>
f010e88d:	83 c4 10             	add    $0x10,%esp
f010e890:	89 c2                	mov    %eax,%edx
f010e892:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e895:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010e89c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e89f:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010e8a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e8a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8ac:	d1 e8                	shr    %eax
f010e8ae:	89 c2                	mov    %eax,%edx
f010e8b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8b3:	01 c2                	add    %eax,%edx
f010e8b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8b8:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e8bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8c2:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e8c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8c8:	01 c2                	add    %eax,%edx
f010e8ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8cd:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e8d4:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e8d8:	74 0b                	je     f010e8e5 <test_initial_alloc+0x2e7>
f010e8da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e8dd:	83 c0 10             	add    $0x10,%eax
f010e8e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e8e3:	74 17                	je     f010e8fc <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e8e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e8ec:	83 ec 0c             	sub    $0xc,%esp
f010e8ef:	68 7c 3f 13 f0       	push   $0xf0133f7c
f010e8f4:	e8 38 25 ff ff       	call   f0100e31 <cprintf>
f010e8f9:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e8fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8ff:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010e906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e909:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e90c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e90f:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010e916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e919:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010e91c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e91f:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010e926:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e929:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010e92c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e930:	74 04                	je     f010e936 <test_initial_alloc+0x338>
	{
		eval += 5;
f010e932:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e936:	83 ec 0c             	sub    $0xc,%esp
f010e939:	68 c4 3f 13 f0       	push   $0xf0133fc4
f010e93e:	e8 ee 24 ff ff       	call   f0100e31 <cprintf>
f010e943:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e946:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010e94d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e954:	eb 5b                	jmp    f010e9b1 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010e956:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e959:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010e960:	66 8b 00             	mov    (%eax),%ax
f010e963:	98                   	cwtl   
f010e964:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e967:	75 26                	jne    f010e98f <test_initial_alloc+0x391>
f010e969:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e96c:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f010e973:	66 8b 00             	mov    (%eax),%ax
f010e976:	98                   	cwtl   
f010e977:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e97a:	75 13                	jne    f010e98f <test_initial_alloc+0x391>
f010e97c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e97f:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f010e986:	66 8b 00             	mov    (%eax),%ax
f010e989:	98                   	cwtl   
f010e98a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e98d:	74 1f                	je     f010e9ae <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010e98f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010e996:	83 ec 04             	sub    $0x4,%esp
f010e999:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e99c:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e99f:	68 f8 3f 13 f0       	push   $0xf0133ff8
f010e9a4:	e8 88 24 ff ff       	call   f0100e31 <cprintf>
f010e9a9:	83 c4 10             	add    $0x10,%esp
			break;
f010e9ac:	eb 0b                	jmp    f010e9b9 <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010e9ae:	ff 45 d4             	incl   -0x2c(%ebp)
f010e9b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e9b4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e9b7:	7c 9d                	jl     f010e956 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010e9b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e9bd:	74 04                	je     f010e9c3 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010e9bf:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010e9c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e9c6:	c9                   	leave  
f010e9c7:	c3                   	ret    

f010e9c8 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e9c8:	55                   	push   %ebp
f010e9c9:	89 e5                	mov    %esp,%ebp
f010e9cb:	57                   	push   %edi
f010e9cc:	56                   	push   %esi
f010e9cd:	53                   	push   %ebx
f010e9ce:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010e9d4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010e9db:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010e9e2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010e9e9:	83 ec 0c             	sub    $0xc,%esp
f010e9ec:	68 48 40 13 f0       	push   $0xf0134048
f010e9f1:	e8 3b 24 ff ff       	call   f0100e31 <cprintf>
f010e9f6:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010e9f9:	83 ec 0c             	sub    $0xc,%esp
f010e9fc:	68 84 40 13 f0       	push   $0xf0134084
f010ea01:	e8 2b 24 ff ff       	call   f0100e31 <cprintf>
f010ea06:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010ea09:	83 ec 0c             	sub    $0xc,%esp
f010ea0c:	68 48 40 13 f0       	push   $0xf0134048
f010ea11:	e8 1b 24 ff ff       	call   f0100e31 <cprintf>
f010ea16:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010ea19:	83 ec 0c             	sub    $0xc,%esp
f010ea1c:	6a 01                	push   $0x1
f010ea1e:	e8 db fb ff ff       	call   f010e5fe <test_initial_alloc>
f010ea23:	83 c4 10             	add    $0x10,%esp
f010ea26:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010ea29:	83 ec 0c             	sub    $0xc,%esp
f010ea2c:	68 c0 40 13 f0       	push   $0xf01340c0
f010ea31:	e8 fb 23 ff ff       	call   f0100e31 <cprintf>
f010ea36:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010ea39:	83 ec 0c             	sub    $0xc,%esp
f010ea3c:	68 f8 40 13 f0       	push   $0xf01340f8
f010ea41:	e8 eb 23 ff ff       	call   f0100e31 <cprintf>
f010ea46:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010ea49:	83 ec 0c             	sub    $0xc,%esp
f010ea4c:	68 c0 40 13 f0       	push   $0xf01340c0
f010ea51:	e8 db 23 ff ff       	call   f0100e31 <cprintf>
f010ea56:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea59:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ea60:	eb 2c                	jmp    f010ea8e <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ea62:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ea65:	89 d0                	mov    %edx,%eax
f010ea67:	c1 e0 02             	shl    $0x2,%eax
f010ea6a:	01 d0                	add    %edx,%eax
f010ea6c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ea73:	01 d0                	add    %edx,%eax
f010ea75:	c1 e0 03             	shl    $0x3,%eax
f010ea78:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010ea7f:	83 ec 0c             	sub    $0xc,%esp
f010ea82:	50                   	push   %eax
f010ea83:	e8 70 10 02 00       	call   f012faf8 <free_block>
f010ea88:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea8b:	ff 45 dc             	incl   -0x24(%ebp)
f010ea8e:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ea92:	7e ce                	jle    f010ea62 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ea94:	83 ec 0c             	sub    $0xc,%esp
f010ea97:	68 18 3d 13 f0       	push   $0xf0133d18
f010ea9c:	e8 90 23 ff ff       	call   f0100e31 <cprintf>
f010eaa1:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eaa4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eaab:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eab2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eab9:	eb 1f                	jmp    f010eada <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eabb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eabe:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eac5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eac8:	76 0d                	jbe    f010ead7 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010eaca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eacd:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010ead4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ead7:	ff 45 d4             	incl   -0x2c(%ebp)
f010eada:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eade:	7e db                	jle    f010eabb <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010eae0:	83 ec 08             	sub    $0x8,%esp
f010eae3:	6a 01                	push   $0x1
f010eae5:	ff 75 d8             	pushl  -0x28(%ebp)
f010eae8:	e8 89 0d 02 00       	call   f012f876 <alloc_block>
f010eaed:	83 c4 10             	add    $0x10,%esp
f010eaf0:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eaf3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eaf7:	74 17                	je     f010eb10 <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010eaf9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010eb00:	83 ec 0c             	sub    $0xc,%esp
f010eb03:	68 30 41 13 f0       	push   $0xf0134130
f010eb08:	e8 24 23 ff ff       	call   f0100e31 <cprintf>
f010eb0d:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010eb10:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eb14:	74 04                	je     f010eb1a <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010eb16:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eb1a:	83 ec 0c             	sub    $0xc,%esp
f010eb1d:	68 a8 41 13 f0       	push   $0xf01341a8
f010eb22:	e8 0a 23 ff ff       	call   f0100e31 <cprintf>
f010eb27:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eb2a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010eb31:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010eb34:	bb 68 43 13 f0       	mov    $0xf0134368,%ebx
f010eb39:	ba 03 00 00 00       	mov    $0x3,%edx
f010eb3e:	89 c7                	mov    %eax,%edi
f010eb40:	89 de                	mov    %ebx,%esi
f010eb42:	89 d1                	mov    %edx,%ecx
f010eb44:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010eb46:	a1 20 b7 2d f0       	mov    0xf02db720,%eax
f010eb4b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010eb4e:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010eb55:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb58:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010eb5b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010eb5e:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010eb63:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010eb66:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010eb6d:	e9 c6 00 00 00       	jmp    f010ec38 <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010eb72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb75:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010eb79:	83 e8 10             	sub    $0x10,%eax
f010eb7c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010eb7f:	83 ec 08             	sub    $0x8,%esp
f010eb82:	6a 01                	push   $0x1
f010eb84:	ff 75 c4             	pushl  -0x3c(%ebp)
f010eb87:	e8 ea 0c 02 00       	call   f012f876 <alloc_block>
f010eb8c:	83 c4 10             	add    $0x10,%esp
f010eb8f:	89 c2                	mov    %eax,%edx
f010eb91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb94:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010eb98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb9b:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eb9f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010eba2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010eba5:	d1 e8                	shr    %eax
f010eba7:	89 c2                	mov    %eax,%edx
f010eba9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ebac:	01 c2                	add    %eax,%edx
f010ebae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebb1:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010ebb5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ebb8:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ebbb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ebbe:	01 c2                	add    %eax,%edx
f010ebc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebc3:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ebca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebcd:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ebd1:	85 c0                	test   %eax,%eax
f010ebd3:	74 12                	je     f010ebe7 <test_alloc_block_FF+0x21f>
f010ebd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebd8:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ebdc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebdf:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ebe3:	39 c2                	cmp    %eax,%edx
f010ebe5:	74 27                	je     f010ec0e <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010ebe7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010ebee:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebf1:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ebf5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebf8:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ebfc:	52                   	push   %edx
f010ebfd:	50                   	push   %eax
f010ebfe:	ff 75 d0             	pushl  -0x30(%ebp)
f010ec01:	68 04 42 13 f0       	push   $0xf0134204
f010ec06:	e8 26 22 ff ff       	call   f0100e31 <cprintf>
f010ec0b:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ec0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec11:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ec15:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ec1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec1d:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ec21:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ec26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec29:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec30:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ec35:	ff 45 d0             	incl   -0x30(%ebp)
f010ec38:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010ec3c:	0f 8e 30 ff ff ff    	jle    f010eb72 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010ec42:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ec46:	74 04                	je     f010ec4c <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010ec48:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010ec4c:	83 ec 0c             	sub    $0xc,%esp
f010ec4f:	68 30 3f 13 f0       	push   $0xf0133f30
f010ec54:	e8 d8 21 ff ff       	call   f0100e31 <cprintf>
f010ec59:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ec5c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010ec63:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010ec6a:	83 ec 08             	sub    $0x8,%esp
f010ec6d:	6a 01                	push   $0x1
f010ec6f:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ec72:	e8 ff 0b 02 00       	call   f012f876 <alloc_block>
f010ec77:	83 c4 10             	add    $0x10,%esp
f010ec7a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010ec7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ec80:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010ec83:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec86:	d1 e8                	shr    %eax
f010ec88:	89 c2                	mov    %eax,%edx
f010ec8a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec8d:	01 d0                	add    %edx,%eax
f010ec8f:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010ec92:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec95:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ec98:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec9b:	01 d0                	add    %edx,%eax
f010ec9d:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010eca0:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010eca3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010eca6:	01 d0                	add    %edx,%eax
f010eca8:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ecad:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010ecb0:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ecb4:	74 08                	je     f010ecbe <test_alloc_block_FF+0x2f6>
f010ecb6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ecb9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010ecbc:	74 1d                	je     f010ecdb <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010ecbe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010ecc5:	83 ec 04             	sub    $0x4,%esp
f010ecc8:	ff 75 c8             	pushl  -0x38(%ebp)
f010eccb:	ff 75 bc             	pushl  -0x44(%ebp)
f010ecce:	68 68 42 13 f0       	push   $0xf0134268
f010ecd3:	e8 59 21 ff ff       	call   f0100e31 <cprintf>
f010ecd8:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010ecdb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ecde:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010ece3:	8b 45 90             	mov    -0x70(%ebp),%eax
f010ece6:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010eceb:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ecee:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ecf3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ecf7:	74 04                	je     f010ecfd <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010ecf9:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ecfd:	83 ec 0c             	sub    $0xc,%esp
f010ed00:	68 c4 3f 13 f0       	push   $0xf0133fc4
f010ed05:	e8 27 21 ff ff       	call   f0100e31 <cprintf>
f010ed0a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ed0d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010ed14:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ed1b:	e9 82 00 00 00       	jmp    f010eda2 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010ed20:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed23:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed27:	66 8b 00             	mov    (%eax),%ax
f010ed2a:	66 3d 61 01          	cmp    $0x161,%ax
f010ed2e:	75 23                	jne    f010ed53 <test_alloc_block_FF+0x38b>
f010ed30:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed33:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed37:	66 8b 00             	mov    (%eax),%ax
f010ed3a:	66 3d 61 01          	cmp    $0x161,%ax
f010ed3e:	75 13                	jne    f010ed53 <test_alloc_block_FF+0x38b>
f010ed40:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed43:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed4a:	66 8b 00             	mov    (%eax),%ax
f010ed4d:	66 3d 61 01          	cmp    $0x161,%ax
f010ed51:	74 4c                	je     f010ed9f <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010ed53:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010ed5a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed5d:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed64:	66 8b 00             	mov    (%eax),%ax
f010ed67:	0f bf c8             	movswl %ax,%ecx
f010ed6a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed6d:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed71:	66 8b 00             	mov    (%eax),%ax
f010ed74:	0f bf d0             	movswl %ax,%edx
f010ed77:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed7a:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed7e:	66 8b 00             	mov    (%eax),%ax
f010ed81:	98                   	cwtl   
f010ed82:	83 ec 08             	sub    $0x8,%esp
f010ed85:	51                   	push   %ecx
f010ed86:	52                   	push   %edx
f010ed87:	50                   	push   %eax
f010ed88:	68 61 01 00 00       	push   $0x161
f010ed8d:	ff 75 cc             	pushl  -0x34(%ebp)
f010ed90:	68 c8 42 13 f0       	push   $0xf01342c8
f010ed95:	e8 97 20 ff ff       	call   f0100e31 <cprintf>
f010ed9a:	83 c4 20             	add    $0x20,%esp
			break;
f010ed9d:	eb 0d                	jmp    f010edac <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010ed9f:	ff 45 cc             	incl   -0x34(%ebp)
f010eda2:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010eda6:	0f 8e 74 ff ff ff    	jle    f010ed20 <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010edac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010edb0:	74 04                	je     f010edb6 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010edb2:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010edb6:	83 ec 08             	sub    $0x8,%esp
f010edb9:	ff 75 e4             	pushl  -0x1c(%ebp)
f010edbc:	68 34 43 13 f0       	push   $0xf0134334
f010edc1:	e8 6b 20 ff ff       	call   f0100e31 <cprintf>
f010edc6:	83 c4 10             	add    $0x10,%esp
}
f010edc9:	90                   	nop
f010edca:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010edcd:	5b                   	pop    %ebx
f010edce:	5e                   	pop    %esi
f010edcf:	5f                   	pop    %edi
f010edd0:	5d                   	pop    %ebp
f010edd1:	c3                   	ret    

f010edd2 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010edd2:	55                   	push   %ebp
f010edd3:	89 e5                	mov    %esp,%ebp
f010edd5:	57                   	push   %edi
f010edd6:	56                   	push   %esi
f010edd7:	53                   	push   %ebx
f010edd8:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010edde:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ede5:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010edec:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010edf3:	83 ec 0c             	sub    $0xc,%esp
f010edf6:	68 74 43 13 f0       	push   $0xf0134374
f010edfb:	e8 31 20 ff ff       	call   f0100e31 <cprintf>
f010ee00:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010ee03:	83 ec 0c             	sub    $0xc,%esp
f010ee06:	68 a8 43 13 f0       	push   $0xf01343a8
f010ee0b:	e8 21 20 ff ff       	call   f0100e31 <cprintf>
f010ee10:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ee13:	83 ec 0c             	sub    $0xc,%esp
f010ee16:	68 74 43 13 f0       	push   $0xf0134374
f010ee1b:	e8 11 20 ff ff       	call   f0100e31 <cprintf>
f010ee20:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010ee23:	83 ec 0c             	sub    $0xc,%esp
f010ee26:	6a 03                	push   $0x3
f010ee28:	e8 d1 f7 ff ff       	call   f010e5fe <test_initial_alloc>
f010ee2d:	83 c4 10             	add    $0x10,%esp
f010ee30:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010ee33:	83 ec 0c             	sub    $0xc,%esp
f010ee36:	68 74 43 13 f0       	push   $0xf0134374
f010ee3b:	e8 f1 1f ff ff       	call   f0100e31 <cprintf>
f010ee40:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010ee43:	83 ec 0c             	sub    $0xc,%esp
f010ee46:	68 dc 43 13 f0       	push   $0xf01343dc
f010ee4b:	e8 e1 1f ff ff       	call   f0100e31 <cprintf>
f010ee50:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ee53:	83 ec 0c             	sub    $0xc,%esp
f010ee56:	68 74 43 13 f0       	push   $0xf0134374
f010ee5b:	e8 d1 1f ff ff       	call   f0100e31 <cprintf>
f010ee60:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee63:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ee6a:	eb 2c                	jmp    f010ee98 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ee6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ee6f:	89 d0                	mov    %edx,%eax
f010ee71:	c1 e0 02             	shl    $0x2,%eax
f010ee74:	01 d0                	add    %edx,%eax
f010ee76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ee7d:	01 d0                	add    %edx,%eax
f010ee7f:	c1 e0 03             	shl    $0x3,%eax
f010ee82:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010ee89:	83 ec 0c             	sub    $0xc,%esp
f010ee8c:	50                   	push   %eax
f010ee8d:	e8 66 0c 02 00       	call   f012faf8 <free_block>
f010ee92:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee95:	ff 45 dc             	incl   -0x24(%ebp)
f010ee98:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ee9c:	7e ce                	jle    f010ee6c <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ee9e:	83 ec 0c             	sub    $0xc,%esp
f010eea1:	68 18 3d 13 f0       	push   $0xf0133d18
f010eea6:	e8 86 1f ff ff       	call   f0100e31 <cprintf>
f010eeab:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eeae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eeb5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eebc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eec3:	eb 1f                	jmp    f010eee4 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eec5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eec8:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eecf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eed2:	76 0d                	jbe    f010eee1 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010eed4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eed7:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010eede:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010eee1:	ff 45 d4             	incl   -0x2c(%ebp)
f010eee4:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eee8:	7e db                	jle    f010eec5 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010eeea:	83 ec 08             	sub    $0x8,%esp
f010eeed:	6a 03                	push   $0x3
f010eeef:	ff 75 d8             	pushl  -0x28(%ebp)
f010eef2:	e8 7f 09 02 00       	call   f012f876 <alloc_block>
f010eef7:	83 c4 10             	add    $0x10,%esp
f010eefa:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eefd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ef01:	74 17                	je     f010ef1a <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010ef03:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010ef0a:	83 ec 0c             	sub    $0xc,%esp
f010ef0d:	68 10 44 13 f0       	push   $0xf0134410
f010ef12:	e8 1a 1f ff ff       	call   f0100e31 <cprintf>
f010ef17:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ef1a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ef1e:	74 04                	je     f010ef24 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010ef20:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010ef24:	83 ec 0c             	sub    $0xc,%esp
f010ef27:	68 a8 41 13 f0       	push   $0xf01341a8
f010ef2c:	e8 00 1f ff ff       	call   f0100e31 <cprintf>
f010ef31:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ef34:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010ef3b:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ef3e:	bb 34 46 13 f0       	mov    $0xf0134634,%ebx
f010ef43:	ba 05 00 00 00       	mov    $0x5,%edx
f010ef48:	89 c7                	mov    %eax,%edi
f010ef4a:	89 de                	mov    %ebx,%esi
f010ef4c:	89 d1                	mov    %edx,%ecx
f010ef4e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010ef50:	a1 c0 ad 2d f0       	mov    0xf02dadc0,%eax
f010ef55:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010ef58:	a1 e0 b0 2d f0       	mov    0xf02db0e0,%eax
f010ef5d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ef60:	a1 20 b7 2d f0       	mov    0xf02db720,%eax
f010ef65:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010ef68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ef6b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010ef6e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ef71:	89 45 90             	mov    %eax,-0x70(%ebp)
f010ef74:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ef77:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010ef7a:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010ef7d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ef80:	01 d0                	add    %edx,%eax
f010ef82:	89 45 98             	mov    %eax,-0x68(%ebp)
f010ef85:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010ef8c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010ef93:	e9 de 00 00 00       	jmp    f010f076 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010ef98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef9b:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010ef9f:	83 e8 10             	sub    $0x10,%eax
f010efa2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010efa5:	83 ec 08             	sub    $0x8,%esp
f010efa8:	6a 03                	push   $0x3
f010efaa:	ff 75 c4             	pushl  -0x3c(%ebp)
f010efad:	e8 c4 08 02 00       	call   f012f876 <alloc_block>
f010efb2:	83 c4 10             	add    $0x10,%esp
f010efb5:	89 c2                	mov    %eax,%edx
f010efb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efba:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010efc1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efc4:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010efcb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010efce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010efd1:	d1 e8                	shr    %eax
f010efd3:	89 c2                	mov    %eax,%edx
f010efd5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010efd8:	01 c2                	add    %eax,%edx
f010efda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efdd:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010efe4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010efe7:	8d 50 fe             	lea    -0x2(%eax),%edx
f010efea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010efed:	01 c2                	add    %eax,%edx
f010efef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eff2:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010eff9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010effc:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f003:	85 c0                	test   %eax,%eax
f010f005:	74 15                	je     f010f01c <test_alloc_block_BF+0x24a>
f010f007:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f00a:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f011:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f014:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f018:	39 c2                	cmp    %eax,%edx
f010f01a:	74 2a                	je     f010f046 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010f01c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f023:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f026:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f02d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f030:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f034:	52                   	push   %edx
f010f035:	50                   	push   %eax
f010f036:	ff 75 d0             	pushl  -0x30(%ebp)
f010f039:	68 88 44 13 f0       	push   $0xf0134488
f010f03e:	e8 ee 1d ff ff       	call   f0100e31 <cprintf>
f010f043:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f046:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f049:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f050:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f055:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f058:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f05f:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f064:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f067:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f06e:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f073:	ff 45 d0             	incl   -0x30(%ebp)
f010f076:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f07a:	0f 8e 18 ff ff ff    	jle    f010ef98 <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f080:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f084:	74 04                	je     f010f08a <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f086:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f08a:	83 ec 0c             	sub    $0xc,%esp
f010f08d:	68 ec 44 13 f0       	push   $0xf01344ec
f010f092:	e8 9a 1d ff ff       	call   f0100e31 <cprintf>
f010f097:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f09a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f0a1:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f0a8:	83 ec 08             	sub    $0x8,%esp
f010f0ab:	6a 03                	push   $0x3
f010f0ad:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f0b0:	e8 c1 07 02 00       	call   f012f876 <alloc_block>
f010f0b5:	83 c4 10             	add    $0x10,%esp
f010f0b8:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f0bb:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f0be:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f0c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0c4:	d1 e8                	shr    %eax
f010f0c6:	89 c2                	mov    %eax,%edx
f010f0c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0cb:	01 d0                	add    %edx,%eax
f010f0cd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f0d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0d6:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f0d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0dc:	01 d0                	add    %edx,%eax
f010f0de:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f0e4:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f0e7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f0ea:	01 c2                	add    %eax,%edx
f010f0ec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f0ef:	01 d0                	add    %edx,%eax
f010f0f1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f0f4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f0f8:	74 08                	je     f010f102 <test_alloc_block_BF+0x330>
f010f0fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0fd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f100:	74 1d                	je     f010f11f <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f102:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f109:	83 ec 04             	sub    $0x4,%esp
f010f10c:	ff 75 c8             	pushl  -0x38(%ebp)
f010f10f:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f112:	68 30 45 13 f0       	push   $0xf0134530
f010f117:	e8 15 1d ff ff       	call   f0100e31 <cprintf>
f010f11c:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f11f:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f122:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f127:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f12d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f132:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f138:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f13d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f141:	74 04                	je     f010f147 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f143:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f147:	83 ec 0c             	sub    $0xc,%esp
f010f14a:	68 c4 3f 13 f0       	push   $0xf0133fc4
f010f14f:	e8 dd 1c ff ff       	call   f0100e31 <cprintf>
f010f154:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f157:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f15e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f165:	e9 8e 00 00 00       	jmp    f010f1f8 <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f16a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f16d:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f174:	66 8b 00             	mov    (%eax),%ax
f010f177:	66 3d 61 01          	cmp    $0x161,%ax
f010f17b:	75 26                	jne    f010f1a3 <test_alloc_block_BF+0x3d1>
f010f17d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f180:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f187:	66 8b 00             	mov    (%eax),%ax
f010f18a:	66 3d 61 01          	cmp    $0x161,%ax
f010f18e:	75 13                	jne    f010f1a3 <test_alloc_block_BF+0x3d1>
f010f190:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f193:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f19a:	66 8b 00             	mov    (%eax),%ax
f010f19d:	66 3d 61 01          	cmp    $0x161,%ax
f010f1a1:	74 52                	je     f010f1f5 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f1a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f1aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1ad:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f1b4:	66 8b 00             	mov    (%eax),%ax
f010f1b7:	0f bf c8             	movswl %ax,%ecx
f010f1ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1bd:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f1c4:	66 8b 00             	mov    (%eax),%ax
f010f1c7:	0f bf d0             	movswl %ax,%edx
f010f1ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1cd:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f1d4:	66 8b 00             	mov    (%eax),%ax
f010f1d7:	98                   	cwtl   
f010f1d8:	83 ec 08             	sub    $0x8,%esp
f010f1db:	51                   	push   %ecx
f010f1dc:	52                   	push   %edx
f010f1dd:	50                   	push   %eax
f010f1de:	68 61 01 00 00       	push   $0x161
f010f1e3:	ff 75 cc             	pushl  -0x34(%ebp)
f010f1e6:	68 94 45 13 f0       	push   $0xf0134594
f010f1eb:	e8 41 1c ff ff       	call   f0100e31 <cprintf>
f010f1f0:	83 c4 20             	add    $0x20,%esp
			break;
f010f1f3:	eb 0d                	jmp    f010f202 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f1f5:	ff 45 cc             	incl   -0x34(%ebp)
f010f1f8:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f1fc:	0f 8e 68 ff ff ff    	jle    f010f16a <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f202:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f206:	74 04                	je     f010f20c <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f208:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f20c:	83 ec 08             	sub    $0x8,%esp
f010f20f:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f212:	68 00 46 13 f0       	push   $0xf0134600
f010f217:	e8 15 1c ff ff       	call   f0100e31 <cprintf>
f010f21c:	83 c4 10             	add    $0x10,%esp
}
f010f21f:	90                   	nop
f010f220:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f223:	5b                   	pop    %ebx
f010f224:	5e                   	pop    %esi
f010f225:	5f                   	pop    %edi
f010f226:	5d                   	pop    %ebp
f010f227:	c3                   	ret    

f010f228 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f228:	55                   	push   %ebp
f010f229:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f22b:	90                   	nop
f010f22c:	5d                   	pop    %ebp
f010f22d:	c3                   	ret    

f010f22e <test_free_block_FF>:

void test_free_block_FF()
{
f010f22e:	55                   	push   %ebp
f010f22f:	89 e5                	mov    %esp,%ebp
f010f231:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f234:	83 ec 0c             	sub    $0xc,%esp
f010f237:	68 48 46 13 f0       	push   $0xf0134648
f010f23c:	e8 f0 1b ff ff       	call   f0100e31 <cprintf>
f010f241:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f244:	83 ec 0c             	sub    $0xc,%esp
f010f247:	68 88 46 13 f0       	push   $0xf0134688
f010f24c:	e8 e0 1b ff ff       	call   f0100e31 <cprintf>
f010f251:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f254:	83 ec 0c             	sub    $0xc,%esp
f010f257:	68 48 46 13 f0       	push   $0xf0134648
f010f25c:	e8 d0 1b ff ff       	call   f0100e31 <cprintf>
f010f261:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f264:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f26b:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f272:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f275:	83 ec 08             	sub    $0x8,%esp
f010f278:	50                   	push   %eax
f010f279:	68 00 00 00 f6       	push   $0xf6000000
f010f27e:	e8 0c 07 02 00       	call   f012f98f <initialize_dynamic_allocator>
f010f283:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f286:	83 ec 0c             	sub    $0xc,%esp
f010f289:	68 c8 46 13 f0       	push   $0xf01346c8
f010f28e:	e8 9e 1b ff ff       	call   f0100e31 <cprintf>
f010f293:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f296:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f29d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f2a4:	eb 2a                	jmp    f010f2d0 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f2a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f2a9:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f010f2b0:	89 d0                	mov    %edx,%eax
f010f2b2:	c1 e0 02             	shl    $0x2,%eax
f010f2b5:	01 d0                	add    %edx,%eax
f010f2b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f2be:	01 d0                	add    %edx,%eax
f010f2c0:	c1 e0 03             	shl    $0x3,%eax
f010f2c3:	89 c2                	mov    %eax,%edx
f010f2c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2c8:	01 d0                	add    %edx,%eax
f010f2ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f2cd:	ff 45 e8             	incl   -0x18(%ebp)
f010f2d0:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f2d4:	7e d0                	jle    f010f2a6 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f2d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2d9:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f2dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f2df:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f2e3:	7f 17                	jg     f010f2fc <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f2e5:	83 ec 04             	sub    $0x4,%esp
f010f2e8:	68 20 47 13 f0       	push   $0xf0134720
f010f2ed:	68 fe 01 00 00       	push   $0x1fe
f010f2f2:	68 a4 3c 13 f0       	push   $0xf0133ca4
f010f2f7:	e8 b4 0e ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f2fc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f303:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f30a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f311:	e9 f8 00 00 00       	jmp    f010f40e <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f316:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f31d:	e9 dc 00 00 00       	jmp    f010f3fe <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f322:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f325:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f32c:	83 e8 10             	sub    $0x10,%eax
f010f32f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f332:	83 ec 08             	sub    $0x8,%esp
f010f335:	6a 01                	push   $0x1
f010f337:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f33a:	e8 37 05 02 00       	call   f012f876 <alloc_block>
f010f33f:	83 c4 10             	add    $0x10,%esp
f010f342:	89 c2                	mov    %eax,%edx
f010f344:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f347:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010f34e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f351:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f358:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f35b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f35e:	d1 e8                	shr    %eax
f010f360:	89 c2                	mov    %eax,%edx
f010f362:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f365:	01 c2                	add    %eax,%edx
f010f367:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f36a:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f371:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f374:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f377:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f37a:	01 c2                	add    %eax,%edx
f010f37c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f37f:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f386:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f38a:	74 0b                	je     f010f397 <test_free_block_FF+0x169>
f010f38c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f38f:	83 c0 10             	add    $0x10,%eax
f010f392:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f395:	74 24                	je     f010f3bb <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f397:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f39a:	83 c0 10             	add    $0x10,%eax
f010f39d:	83 ec 08             	sub    $0x8,%esp
f010f3a0:	ff 75 c0             	pushl  -0x40(%ebp)
f010f3a3:	50                   	push   %eax
f010f3a4:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f3a7:	68 98 47 13 f0       	push   $0xf0134798
f010f3ac:	68 0d 02 00 00       	push   $0x20d
f010f3b1:	68 a4 3c 13 f0       	push   $0xf0133ca4
f010f3b6:	e8 f5 0d ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f3bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3be:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f3c5:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f3c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3cb:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010f3d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3d5:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f3d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3db:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010f3e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3e5:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f3e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3eb:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010f3f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3f5:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f3f8:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f3fb:	ff 45 d8             	incl   -0x28(%ebp)
f010f3fe:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f405:	0f 8e 17 ff ff ff    	jle    f010f322 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f40b:	ff 45 dc             	incl   -0x24(%ebp)
f010f40e:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f412:	0f 8e fe fe ff ff    	jle    f010f316 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f418:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f41b:	83 e8 10             	sub    $0x10,%eax
f010f41e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f421:	83 ec 08             	sub    $0x8,%esp
f010f424:	6a 01                	push   $0x1
f010f426:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f429:	e8 48 04 02 00       	call   f012f876 <alloc_block>
f010f42e:	83 c4 10             	add    $0x10,%esp
f010f431:	89 c2                	mov    %eax,%edx
f010f433:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f436:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f010f43d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f440:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f447:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f44a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f44d:	d1 e8                	shr    %eax
f010f44f:	89 c2                	mov    %eax,%edx
f010f451:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f454:	01 c2                	add    %eax,%edx
f010f456:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f459:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f460:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f463:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f466:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f469:	01 c2                	add    %eax,%edx
f010f46b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f46e:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f475:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f479:	74 0b                	je     f010f486 <test_free_block_FF+0x258>
f010f47b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f47e:	83 c0 10             	add    $0x10,%eax
f010f481:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f484:	74 17                	je     f010f49d <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f486:	83 ec 04             	sub    $0x4,%esp
f010f489:	68 fc 47 13 f0       	push   $0xf01347fc
f010f48e:	68 1e 02 00 00       	push   $0x21e
f010f493:	68 a4 3c 13 f0       	push   $0xf0133ca4
f010f498:	e8 13 0d ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f49d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4a0:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f010f4a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4aa:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f4ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4b0:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f010f4b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ba:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f4bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4c0:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f010f4c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ca:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f4cd:	83 ec 0c             	sub    $0xc,%esp
f010f4d0:	68 44 48 13 f0       	push   $0xf0134844
f010f4d5:	e8 57 19 ff ff       	call   f0100e31 <cprintf>
f010f4da:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f4dd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f4e4:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f4eb:	eb 5b                	jmp    f010f548 <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f4ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4f0:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f4f7:	66 8b 00             	mov    (%eax),%ax
f010f4fa:	98                   	cwtl   
f010f4fb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f4fe:	75 26                	jne    f010f526 <test_free_block_FF+0x2f8>
f010f500:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f503:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f010f50a:	66 8b 00             	mov    (%eax),%ax
f010f50d:	98                   	cwtl   
f010f50e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f511:	75 13                	jne    f010f526 <test_free_block_FF+0x2f8>
f010f513:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f516:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f010f51d:	66 8b 00             	mov    (%eax),%ax
f010f520:	98                   	cwtl   
f010f521:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f524:	74 1f                	je     f010f545 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f526:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f52d:	83 ec 04             	sub    $0x4,%esp
f010f530:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f533:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f536:	68 78 48 13 f0       	push   $0xf0134878
f010f53b:	e8 f1 18 ff ff       	call   f0100e31 <cprintf>
f010f540:	83 c4 10             	add    $0x10,%esp
			break;
f010f543:	eb 0b                	jmp    f010f550 <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f545:	ff 45 d4             	incl   -0x2c(%ebp)
f010f548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f54b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f54e:	7c 9d                	jl     f010f4ed <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f550:	83 ec 0c             	sub    $0xc,%esp
f010f553:	68 c8 48 13 f0       	push   $0xf01348c8
f010f558:	e8 d4 18 ff ff       	call   f0100e31 <cprintf>
f010f55d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f560:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f567:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f56e:	e9 e4 00 00 00       	jmp    f010f657 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f573:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f576:	89 d0                	mov    %edx,%eax
f010f578:	c1 e0 02             	shl    $0x2,%eax
f010f57b:	01 d0                	add    %edx,%eax
f010f57d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f584:	01 d0                	add    %edx,%eax
f010f586:	c1 e0 03             	shl    $0x3,%eax
f010f589:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f590:	83 ec 0c             	sub    $0xc,%esp
f010f593:	50                   	push   %eax
f010f594:	e8 5f 05 02 00       	call   f012faf8 <free_block>
f010f599:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f59c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f59f:	89 d0                	mov    %edx,%eax
f010f5a1:	c1 e0 02             	shl    $0x2,%eax
f010f5a4:	01 d0                	add    %edx,%eax
f010f5a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f5ad:	01 d0                	add    %edx,%eax
f010f5af:	c1 e0 03             	shl    $0x3,%eax
f010f5b2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f5b9:	83 ec 0c             	sub    $0xc,%esp
f010f5bc:	50                   	push   %eax
f010f5bd:	e8 87 02 02 00       	call   f012f849 <get_block_size>
f010f5c2:	83 c4 10             	add    $0x10,%esp
f010f5c5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f5c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5cb:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f5d2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f5d5:	74 2b                	je     f010f602 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f5d7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f5db:	74 25                	je     f010f602 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f5dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f5e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5e7:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f010f5ee:	ff 75 bc             	pushl  -0x44(%ebp)
f010f5f1:	50                   	push   %eax
f010f5f2:	ff 75 d0             	pushl  -0x30(%ebp)
f010f5f5:	68 f8 48 13 f0       	push   $0xf01348f8
f010f5fa:	e8 32 18 ff ff       	call   f0100e31 <cprintf>
f010f5ff:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f602:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f605:	89 d0                	mov    %edx,%eax
f010f607:	c1 e0 02             	shl    $0x2,%eax
f010f60a:	01 d0                	add    %edx,%eax
f010f60c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f613:	01 d0                	add    %edx,%eax
f010f615:	c1 e0 03             	shl    $0x3,%eax
f010f618:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f61f:	83 ec 0c             	sub    $0xc,%esp
f010f622:	50                   	push   %eax
f010f623:	e8 37 02 02 00       	call   f012f85f <is_free_block>
f010f628:	83 c4 10             	add    $0x10,%esp
f010f62b:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f62e:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f632:	74 20                	je     f010f654 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f634:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f638:	74 1a                	je     f010f654 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f63a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f641:	83 ec 08             	sub    $0x8,%esp
f010f644:	ff 75 d0             	pushl  -0x30(%ebp)
f010f647:	68 5c 49 13 f0       	push   $0xf013495c
f010f64c:	e8 e0 17 ff ff       	call   f0100e31 <cprintf>
f010f651:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f654:	ff 45 d0             	incl   -0x30(%ebp)
f010f657:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f65b:	0f 8e 12 ff ff ff    	jle    f010f573 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f661:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f665:	74 04                	je     f010f66b <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f667:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f66b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f672:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f010f677:	83 ec 0c             	sub    $0xc,%esp
f010f67a:	50                   	push   %eax
f010f67b:	e8 78 04 02 00       	call   f012faf8 <free_block>
f010f680:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f683:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f010f688:	83 ec 0c             	sub    $0xc,%esp
f010f68b:	50                   	push   %eax
f010f68c:	e8 b8 01 02 00       	call   f012f849 <get_block_size>
f010f691:	83 c4 10             	add    $0x10,%esp
f010f694:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f697:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f69a:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f69d:	74 1d                	je     f010f6bc <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f69f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f6a6:	83 ec 04             	sub    $0x4,%esp
f010f6a9:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f6ac:	ff 75 c8             	pushl  -0x38(%ebp)
f010f6af:	68 b4 49 13 f0       	push   $0xf01349b4
f010f6b4:	e8 78 17 ff ff       	call   f0100e31 <cprintf>
f010f6b9:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f6bc:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f010f6c1:	83 ec 0c             	sub    $0xc,%esp
f010f6c4:	50                   	push   %eax
f010f6c5:	e8 95 01 02 00       	call   f012f85f <is_free_block>
f010f6ca:	83 c4 10             	add    $0x10,%esp
f010f6cd:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f6d0:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f6d4:	74 17                	je     f010f6ed <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f6d6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f6dd:	83 ec 0c             	sub    $0xc,%esp
f010f6e0:	68 14 4a 13 f0       	push   $0xf0134a14
f010f6e5:	e8 47 17 ff ff       	call   f0100e31 <cprintf>
f010f6ea:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f6ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f6f0:	83 e8 10             	sub    $0x10,%eax
f010f6f3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f6f6:	83 ec 08             	sub    $0x8,%esp
f010f6f9:	6a 01                	push   $0x1
f010f6fb:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f6fe:	e8 73 01 02 00       	call   f012f876 <alloc_block>
f010f703:	83 c4 10             	add    $0x10,%esp
f010f706:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f709:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f70d:	74 0b                	je     f010f71a <test_free_block_FF+0x4ec>
f010f70f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f712:	83 c0 10             	add    $0x10,%eax
f010f715:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f718:	74 17                	je     f010f731 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f71a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f721:	83 ec 0c             	sub    $0xc,%esp
f010f724:	68 6c 4a 13 f0       	push   $0xf0134a6c
f010f729:	e8 03 17 ff ff       	call   f0100e31 <cprintf>
f010f72e:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f731:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f010f736:	83 ec 0c             	sub    $0xc,%esp
f010f739:	50                   	push   %eax
f010f73a:	e8 b9 03 02 00       	call   f012faf8 <free_block>
f010f73f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f742:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f010f747:	83 ec 0c             	sub    $0xc,%esp
f010f74a:	50                   	push   %eax
f010f74b:	e8 f9 00 02 00       	call   f012f849 <get_block_size>
f010f750:	83 c4 10             	add    $0x10,%esp
f010f753:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f756:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f010f75b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f75e:	74 20                	je     f010f780 <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f760:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f767:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f010f76c:	83 ec 04             	sub    $0x4,%esp
f010f76f:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f772:	50                   	push   %eax
f010f773:	68 b8 4a 13 f0       	push   $0xf0134ab8
f010f778:	e8 b4 16 ff ff       	call   f0100e31 <cprintf>
f010f77d:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f780:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f010f785:	83 ec 0c             	sub    $0xc,%esp
f010f788:	50                   	push   %eax
f010f789:	e8 d1 00 02 00       	call   f012f85f <is_free_block>
f010f78e:	83 c4 10             	add    $0x10,%esp
f010f791:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f794:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f798:	74 17                	je     f010f7b1 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f79a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f7a1:	83 ec 0c             	sub    $0xc,%esp
f010f7a4:	68 18 4b 13 f0       	push   $0xf0134b18
f010f7a9:	e8 83 16 ff ff       	call   f0100e31 <cprintf>
f010f7ae:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f7b1:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010f7b6:	83 e8 10             	sub    $0x10,%eax
f010f7b9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f7bc:	83 ec 08             	sub    $0x8,%esp
f010f7bf:	6a 01                	push   $0x1
f010f7c1:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f7c4:	e8 ad 00 02 00       	call   f012f876 <alloc_block>
f010f7c9:	83 c4 10             	add    $0x10,%esp
f010f7cc:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f7cf:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f7d3:	74 09                	je     f010f7de <test_free_block_FF+0x5b0>
f010f7d5:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f7dc:	74 17                	je     f010f7f5 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f7de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f7e5:	83 ec 0c             	sub    $0xc,%esp
f010f7e8:	68 70 4b 13 f0       	push   $0xf0134b70
f010f7ed:	e8 3f 16 ff ff       	call   f0100e31 <cprintf>
f010f7f2:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f7f5:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f010f7fa:	83 ec 0c             	sub    $0xc,%esp
f010f7fd:	50                   	push   %eax
f010f7fe:	e8 f5 02 02 00       	call   f012faf8 <free_block>
f010f803:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f806:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f010f80b:	83 ec 0c             	sub    $0xc,%esp
f010f80e:	50                   	push   %eax
f010f80f:	e8 35 00 02 00       	call   f012f849 <get_block_size>
f010f814:	83 c4 10             	add    $0x10,%esp
f010f817:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f81a:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010f81f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f822:	74 20                	je     f010f844 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f824:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f82b:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010f830:	83 ec 04             	sub    $0x4,%esp
f010f833:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f836:	50                   	push   %eax
f010f837:	68 bc 4b 13 f0       	push   $0xf0134bbc
f010f83c:	e8 f0 15 ff ff       	call   f0100e31 <cprintf>
f010f841:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f844:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f010f849:	83 ec 0c             	sub    $0xc,%esp
f010f84c:	50                   	push   %eax
f010f84d:	e8 0d 00 02 00       	call   f012f85f <is_free_block>
f010f852:	83 c4 10             	add    $0x10,%esp
f010f855:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f858:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f85c:	74 17                	je     f010f875 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f85e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f865:	83 ec 0c             	sub    $0xc,%esp
f010f868:	68 1c 4c 13 f0       	push   $0xf0134c1c
f010f86d:	e8 bf 15 ff ff       	call   f0100e31 <cprintf>
f010f872:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f875:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f879:	74 04                	je     f010f87f <test_free_block_FF+0x651>
	{
		eval += 10;
f010f87b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f87f:	83 ec 0c             	sub    $0xc,%esp
f010f882:	68 74 4c 13 f0       	push   $0xf0134c74
f010f887:	e8 a5 15 ff ff       	call   f0100e31 <cprintf>
f010f88c:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f88f:	83 ec 0c             	sub    $0xc,%esp
f010f892:	68 b0 4c 13 f0       	push   $0xf0134cb0
f010f897:	e8 95 15 ff ff       	call   f0100e31 <cprintf>
f010f89c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f89f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f8a6:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f8ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8b0:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f8b7:	83 ec 0c             	sub    $0xc,%esp
f010f8ba:	50                   	push   %eax
f010f8bb:	e8 38 02 02 00       	call   f012faf8 <free_block>
f010f8c0:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f8c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8c6:	48                   	dec    %eax
f010f8c7:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f8ce:	83 ec 0c             	sub    $0xc,%esp
f010f8d1:	50                   	push   %eax
f010f8d2:	e8 72 ff 01 00       	call   f012f849 <get_block_size>
f010f8d7:	83 c4 10             	add    $0x10,%esp
f010f8da:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f8dd:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f010f8e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f8e6:	01 d0                	add    %edx,%eax
f010f8e8:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f8eb:	74 26                	je     f010f913 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f8ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f8f4:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f010f8fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f8fd:	01 d0                	add    %edx,%eax
f010f8ff:	83 ec 04             	sub    $0x4,%esp
f010f902:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f905:	50                   	push   %eax
f010f906:	68 c8 4c 13 f0       	push   $0xf0134cc8
f010f90b:	e8 21 15 ff ff       	call   f0100e31 <cprintf>
f010f910:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f913:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f916:	48                   	dec    %eax
f010f917:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f91e:	83 ec 0c             	sub    $0xc,%esp
f010f921:	50                   	push   %eax
f010f922:	e8 38 ff 01 00       	call   f012f85f <is_free_block>
f010f927:	83 c4 10             	add    $0x10,%esp
f010f92a:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f92d:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f931:	74 17                	je     f010f94a <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010f933:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f93a:	83 ec 0c             	sub    $0xc,%esp
f010f93d:	68 28 4d 13 f0       	push   $0xf0134d28
f010f942:	e8 ea 14 ff ff       	call   f0100e31 <cprintf>
f010f947:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f94a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f94d:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f954:	83 ec 0c             	sub    $0xc,%esp
f010f957:	50                   	push   %eax
f010f958:	e8 ec fe 01 00       	call   f012f849 <get_block_size>
f010f95d:	83 c4 10             	add    $0x10,%esp
f010f960:	85 c0                	test   %eax,%eax
f010f962:	75 1a                	jne    f010f97e <test_free_block_FF+0x750>
f010f964:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f967:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f96e:	83 ec 0c             	sub    $0xc,%esp
f010f971:	50                   	push   %eax
f010f972:	e8 e8 fe 01 00       	call   f012f85f <is_free_block>
f010f977:	83 c4 10             	add    $0x10,%esp
f010f97a:	84 c0                	test   %al,%al
f010f97c:	74 17                	je     f010f995 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010f97e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f985:	83 ec 0c             	sub    $0xc,%esp
f010f988:	68 80 4d 13 f0       	push   $0xf0134d80
f010f98d:	e8 9f 14 ff ff       	call   f0100e31 <cprintf>
f010f992:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010f995:	83 ec 0c             	sub    $0xc,%esp
f010f998:	68 ea 4d 13 f0       	push   $0xf0134dea
f010f99d:	e8 8f 14 ff ff       	call   f0100e31 <cprintf>
f010f9a2:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010f9a5:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f9ac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9af:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f9b6:	83 ec 0c             	sub    $0xc,%esp
f010f9b9:	50                   	push   %eax
f010f9ba:	e8 39 01 02 00       	call   f012faf8 <free_block>
f010f9bf:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f9c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9c5:	48                   	dec    %eax
f010f9c6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010f9cd:	83 ec 0c             	sub    $0xc,%esp
f010f9d0:	50                   	push   %eax
f010f9d1:	e8 73 fe 01 00       	call   f012f849 <get_block_size>
f010f9d6:	83 c4 10             	add    $0x10,%esp
f010f9d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010f9dc:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f010f9e2:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f010f9e7:	01 d0                	add    %edx,%eax
f010f9e9:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f9ec:	74 28                	je     f010fa16 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010f9ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010f9f5:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f010f9fb:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f010fa00:	01 d0                	add    %edx,%eax
f010fa02:	83 ec 04             	sub    $0x4,%esp
f010fa05:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fa08:	50                   	push   %eax
f010fa09:	68 04 4e 13 f0       	push   $0xf0134e04
f010fa0e:	e8 1e 14 ff ff       	call   f0100e31 <cprintf>
f010fa13:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fa16:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa19:	48                   	dec    %eax
f010fa1a:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fa21:	83 ec 0c             	sub    $0xc,%esp
f010fa24:	50                   	push   %eax
f010fa25:	e8 35 fe 01 00       	call   f012f85f <is_free_block>
f010fa2a:	83 c4 10             	add    $0x10,%esp
f010fa2d:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fa30:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fa34:	74 17                	je     f010fa4d <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010fa36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fa3d:	83 ec 0c             	sub    $0xc,%esp
f010fa40:	68 64 4e 13 f0       	push   $0xf0134e64
f010fa45:	e8 e7 13 ff ff       	call   f0100e31 <cprintf>
f010fa4a:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fa4d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa50:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fa57:	83 ec 0c             	sub    $0xc,%esp
f010fa5a:	50                   	push   %eax
f010fa5b:	e8 e9 fd 01 00       	call   f012f849 <get_block_size>
f010fa60:	83 c4 10             	add    $0x10,%esp
f010fa63:	85 c0                	test   %eax,%eax
f010fa65:	75 1a                	jne    f010fa81 <test_free_block_FF+0x853>
f010fa67:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa6a:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fa71:	83 ec 0c             	sub    $0xc,%esp
f010fa74:	50                   	push   %eax
f010fa75:	e8 e5 fd 01 00       	call   f012f85f <is_free_block>
f010fa7a:	83 c4 10             	add    $0x10,%esp
f010fa7d:	84 c0                	test   %al,%al
f010fa7f:	74 17                	je     f010fa98 <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010fa81:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fa88:	83 ec 0c             	sub    $0xc,%esp
f010fa8b:	68 bc 4e 13 f0       	push   $0xf0134ebc
f010fa90:	e8 9c 13 ff ff       	call   f0100e31 <cprintf>
f010fa95:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fa98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fa9c:	74 04                	je     f010faa2 <test_free_block_FF+0x874>
	{
		eval += 15;
f010fa9e:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010faa2:	83 ec 0c             	sub    $0xc,%esp
f010faa5:	68 28 4f 13 f0       	push   $0xf0134f28
f010faaa:	e8 82 13 ff ff       	call   f0100e31 <cprintf>
f010faaf:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010fab2:	83 ec 0c             	sub    $0xc,%esp
f010fab5:	68 60 4f 13 f0       	push   $0xf0134f60
f010faba:	e8 72 13 ff ff       	call   f0100e31 <cprintf>
f010fabf:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fac2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010fac9:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fad0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fad3:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fada:	83 ec 0c             	sub    $0xc,%esp
f010fadd:	50                   	push   %eax
f010fade:	e8 15 00 02 00       	call   f012faf8 <free_block>
f010fae3:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fae6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fae9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010faf0:	83 ec 0c             	sub    $0xc,%esp
f010faf3:	50                   	push   %eax
f010faf4:	e8 50 fd 01 00       	call   f012f849 <get_block_size>
f010faf9:	83 c4 10             	add    $0x10,%esp
f010fafc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010faff:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fb05:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010fb0a:	01 d0                	add    %edx,%eax
f010fb0c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fb0f:	74 28                	je     f010fb39 <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010fb11:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010fb18:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fb1e:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f010fb23:	01 d0                	add    %edx,%eax
f010fb25:	83 ec 04             	sub    $0x4,%esp
f010fb28:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fb2b:	50                   	push   %eax
f010fb2c:	68 04 4e 13 f0       	push   $0xf0134e04
f010fb31:	e8 fb 12 ff ff       	call   f0100e31 <cprintf>
f010fb36:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fb39:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb3c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fb43:	83 ec 0c             	sub    $0xc,%esp
f010fb46:	50                   	push   %eax
f010fb47:	e8 13 fd 01 00       	call   f012f85f <is_free_block>
f010fb4c:	83 c4 10             	add    $0x10,%esp
f010fb4f:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fb52:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fb56:	74 17                	je     f010fb6f <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010fb58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fb5f:	83 ec 0c             	sub    $0xc,%esp
f010fb62:	68 64 4e 13 f0       	push   $0xf0134e64
f010fb67:	e8 c5 12 ff ff       	call   f0100e31 <cprintf>
f010fb6c:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fb6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb72:	40                   	inc    %eax
f010fb73:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fb7a:	83 ec 0c             	sub    $0xc,%esp
f010fb7d:	50                   	push   %eax
f010fb7e:	e8 c6 fc 01 00       	call   f012f849 <get_block_size>
f010fb83:	83 c4 10             	add    $0x10,%esp
f010fb86:	85 c0                	test   %eax,%eax
f010fb88:	75 1b                	jne    f010fba5 <test_free_block_FF+0x977>
f010fb8a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb8d:	40                   	inc    %eax
f010fb8e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fb95:	83 ec 0c             	sub    $0xc,%esp
f010fb98:	50                   	push   %eax
f010fb99:	e8 c1 fc 01 00       	call   f012f85f <is_free_block>
f010fb9e:	83 c4 10             	add    $0x10,%esp
f010fba1:	84 c0                	test   %al,%al
f010fba3:	74 17                	je     f010fbbc <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010fba5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fbac:	83 ec 0c             	sub    $0xc,%esp
f010fbaf:	68 bc 4e 13 f0       	push   $0xf0134ebc
f010fbb4:	e8 78 12 ff ff       	call   f0100e31 <cprintf>
f010fbb9:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010fbbc:	83 ec 0c             	sub    $0xc,%esp
f010fbbf:	68 75 4f 13 f0       	push   $0xf0134f75
f010fbc4:	e8 68 12 ff ff       	call   f0100e31 <cprintf>
f010fbc9:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010fbcc:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fbd3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbd6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fbdd:	83 ec 0c             	sub    $0xc,%esp
f010fbe0:	50                   	push   %eax
f010fbe1:	e8 12 ff 01 00       	call   f012faf8 <free_block>
f010fbe6:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fbe9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbec:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fbf3:	83 ec 0c             	sub    $0xc,%esp
f010fbf6:	50                   	push   %eax
f010fbf7:	e8 4d fc 01 00       	call   f012f849 <get_block_size>
f010fbfc:	83 c4 10             	add    $0x10,%esp
f010fbff:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010fc02:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fc08:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f010fc0d:	01 d0                	add    %edx,%eax
f010fc0f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fc12:	74 28                	je     f010fc3c <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010fc14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010fc1b:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f010fc21:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f010fc26:	01 d0                	add    %edx,%eax
f010fc28:	83 ec 04             	sub    $0x4,%esp
f010fc2b:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fc2e:	50                   	push   %eax
f010fc2f:	68 90 4f 13 f0       	push   $0xf0134f90
f010fc34:	e8 f8 11 ff ff       	call   f0100e31 <cprintf>
f010fc39:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fc3c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc3f:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fc46:	83 ec 0c             	sub    $0xc,%esp
f010fc49:	50                   	push   %eax
f010fc4a:	e8 10 fc 01 00       	call   f012f85f <is_free_block>
f010fc4f:	83 c4 10             	add    $0x10,%esp
f010fc52:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fc55:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fc59:	74 17                	je     f010fc72 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010fc5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fc62:	83 ec 0c             	sub    $0xc,%esp
f010fc65:	68 f4 4f 13 f0       	push   $0xf0134ff4
f010fc6a:	e8 c2 11 ff ff       	call   f0100e31 <cprintf>
f010fc6f:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fc72:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc75:	40                   	inc    %eax
f010fc76:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fc7d:	83 ec 0c             	sub    $0xc,%esp
f010fc80:	50                   	push   %eax
f010fc81:	e8 c3 fb 01 00       	call   f012f849 <get_block_size>
f010fc86:	83 c4 10             	add    $0x10,%esp
f010fc89:	85 c0                	test   %eax,%eax
f010fc8b:	75 1b                	jne    f010fca8 <test_free_block_FF+0xa7a>
f010fc8d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc90:	40                   	inc    %eax
f010fc91:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fc98:	83 ec 0c             	sub    $0xc,%esp
f010fc9b:	50                   	push   %eax
f010fc9c:	e8 be fb 01 00       	call   f012f85f <is_free_block>
f010fca1:	83 c4 10             	add    $0x10,%esp
f010fca4:	84 c0                	test   %al,%al
f010fca6:	74 17                	je     f010fcbf <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010fca8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fcaf:	83 ec 0c             	sub    $0xc,%esp
f010fcb2:	68 4c 50 13 f0       	push   $0xf013504c
f010fcb7:	e8 75 11 ff ff       	call   f0100e31 <cprintf>
f010fcbc:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fcbf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fcc3:	74 04                	je     f010fcc9 <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010fcc5:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010fcc9:	83 ec 0c             	sub    $0xc,%esp
f010fccc:	68 b8 50 13 f0       	push   $0xf01350b8
f010fcd1:	e8 5b 11 ff ff       	call   f0100e31 <cprintf>
f010fcd6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fcd9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010fce0:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fce7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcea:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fcf1:	83 ec 0c             	sub    $0xc,%esp
f010fcf4:	50                   	push   %eax
f010fcf5:	e8 fe fd 01 00       	call   f012faf8 <free_block>
f010fcfa:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010fcfd:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fd04:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd07:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fd0e:	83 ec 0c             	sub    $0xc,%esp
f010fd11:	50                   	push   %eax
f010fd12:	e8 e1 fd 01 00       	call   f012faf8 <free_block>
f010fd17:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fd1a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd1d:	48                   	dec    %eax
f010fd1e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fd25:	83 ec 0c             	sub    $0xc,%esp
f010fd28:	50                   	push   %eax
f010fd29:	e8 1b fb 01 00       	call   f012f849 <get_block_size>
f010fd2e:	83 c4 10             	add    $0x10,%esp
f010fd31:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010fd34:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f010fd3a:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f010fd3f:	01 c2                	add    %eax,%edx
f010fd41:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f010fd46:	01 d0                	add    %edx,%eax
f010fd48:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fd4b:	74 2f                	je     f010fd7c <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010fd4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010fd54:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f010fd5a:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f010fd5f:	01 c2                	add    %eax,%edx
f010fd61:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f010fd66:	01 d0                	add    %edx,%eax
f010fd68:	83 ec 04             	sub    $0x4,%esp
f010fd6b:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fd6e:	50                   	push   %eax
f010fd6f:	68 f8 50 13 f0       	push   $0xf01350f8
f010fd74:	e8 b8 10 ff ff       	call   f0100e31 <cprintf>
f010fd79:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fd7c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd7f:	48                   	dec    %eax
f010fd80:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fd87:	83 ec 0c             	sub    $0xc,%esp
f010fd8a:	50                   	push   %eax
f010fd8b:	e8 cf fa 01 00       	call   f012f85f <is_free_block>
f010fd90:	83 c4 10             	add    $0x10,%esp
f010fd93:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fd96:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fd9a:	74 17                	je     f010fdb3 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010fd9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fda3:	83 ec 0c             	sub    $0xc,%esp
f010fda6:	68 5c 51 13 f0       	push   $0xf013515c
f010fdab:	e8 81 10 ff ff       	call   f0100e31 <cprintf>
f010fdb0:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fdb3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdb6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fdbd:	83 ec 0c             	sub    $0xc,%esp
f010fdc0:	50                   	push   %eax
f010fdc1:	e8 83 fa 01 00       	call   f012f849 <get_block_size>
f010fdc6:	83 c4 10             	add    $0x10,%esp
f010fdc9:	85 c0                	test   %eax,%eax
f010fdcb:	75 50                	jne    f010fe1d <test_free_block_FF+0xbef>
f010fdcd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdd0:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fdd7:	83 ec 0c             	sub    $0xc,%esp
f010fdda:	50                   	push   %eax
f010fddb:	e8 7f fa 01 00       	call   f012f85f <is_free_block>
f010fde0:	83 c4 10             	add    $0x10,%esp
f010fde3:	84 c0                	test   %al,%al
f010fde5:	75 36                	jne    f010fe1d <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fde7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdea:	40                   	inc    %eax
f010fdeb:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fdf2:	83 ec 0c             	sub    $0xc,%esp
f010fdf5:	50                   	push   %eax
f010fdf6:	e8 4e fa 01 00       	call   f012f849 <get_block_size>
f010fdfb:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fdfe:	85 c0                	test   %eax,%eax
f010fe00:	75 1b                	jne    f010fe1d <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fe02:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe05:	40                   	inc    %eax
f010fe06:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f010fe0d:	83 ec 0c             	sub    $0xc,%esp
f010fe10:	50                   	push   %eax
f010fe11:	e8 49 fa 01 00       	call   f012f85f <is_free_block>
f010fe16:	83 c4 10             	add    $0x10,%esp
f010fe19:	84 c0                	test   %al,%al
f010fe1b:	74 17                	je     f010fe34 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010fe1d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fe24:	83 ec 0c             	sub    $0xc,%esp
f010fe27:	68 b4 51 13 f0       	push   $0xf01351b4
f010fe2c:	e8 00 10 ff ff       	call   f0100e31 <cprintf>
f010fe31:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fe34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe38:	74 04                	je     f010fe3e <test_free_block_FF+0xc10>
	{
		eval += 20;
f010fe3a:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010fe3e:	83 ec 0c             	sub    $0xc,%esp
f010fe41:	68 20 52 13 f0       	push   $0xf0135220
f010fe46:	e8 e6 0f ff ff       	call   f0100e31 <cprintf>
f010fe4b:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010fe4e:	83 ec 0c             	sub    $0xc,%esp
f010fe51:	68 64 52 13 f0       	push   $0xf0135264
f010fe56:	e8 d6 0f ff ff       	call   f0100e31 <cprintf>
f010fe5b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe5e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fe65:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fe6c:	83 ec 08             	sub    $0x8,%esp
f010fe6f:	6a 01                	push   $0x1
f010fe71:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe74:	e8 fd f9 01 00       	call   f012f876 <alloc_block>
f010fe79:	83 c4 10             	add    $0x10,%esp
f010fe7c:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010fe7f:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fe86:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fe8a:	74 08                	je     f010fe94 <test_free_block_FF+0xc66>
f010fe8c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fe8f:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fe92:	74 1d                	je     f010feb1 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010fe94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fe9b:	83 ec 04             	sub    $0x4,%esp
f010fe9e:	ff 75 c0             	pushl  -0x40(%ebp)
f010fea1:	ff 75 a8             	pushl  -0x58(%ebp)
f010fea4:	68 8c 52 13 f0       	push   $0xf013528c
f010fea9:	e8 83 0f ff ff       	call   f0100e31 <cprintf>
f010feae:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010feb1:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010feb8:	83 ec 08             	sub    $0x8,%esp
f010febb:	6a 01                	push   $0x1
f010febd:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fec0:	e8 b1 f9 01 00       	call   f012f876 <alloc_block>
f010fec5:	83 c4 10             	add    $0x10,%esp
f010fec8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010fecb:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fed2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fed6:	74 08                	je     f010fee0 <test_free_block_FF+0xcb2>
f010fed8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fedb:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fede:	74 1d                	je     f010fefd <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010fee0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010fee7:	83 ec 04             	sub    $0x4,%esp
f010feea:	ff 75 c0             	pushl  -0x40(%ebp)
f010feed:	ff 75 a8             	pushl  -0x58(%ebp)
f010fef0:	68 f0 52 13 f0       	push   $0xf01352f0
f010fef5:	e8 37 0f ff ff       	call   f0100e31 <cprintf>
f010fefa:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010fefd:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff04:	83 ec 08             	sub    $0x8,%esp
f010ff07:	6a 01                	push   $0x1
f010ff09:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff0c:	e8 65 f9 01 00       	call   f012f876 <alloc_block>
f010ff11:	83 c4 10             	add    $0x10,%esp
f010ff14:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f010ff17:	a1 7c a7 2d f0       	mov    0xf02da77c,%eax
f010ff1c:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff1f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff23:	74 08                	je     f010ff2d <test_free_block_FF+0xcff>
f010ff25:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff28:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff2b:	74 1d                	je     f010ff4a <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f010ff2d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff34:	83 ec 04             	sub    $0x4,%esp
f010ff37:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff3a:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff3d:	68 54 53 13 f0       	push   $0xf0135354
f010ff42:	e8 ea 0e ff ff       	call   f0100e31 <cprintf>
f010ff47:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff4e:	74 04                	je     f010ff54 <test_free_block_FF+0xd26>
	{
		eval += 10;
f010ff50:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f010ff54:	83 ec 0c             	sub    $0xc,%esp
f010ff57:	68 b8 53 13 f0       	push   $0xf01353b8
f010ff5c:	e8 d0 0e ff ff       	call   f0100e31 <cprintf>
f010ff61:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff64:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f010ff6b:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff72:	83 ec 08             	sub    $0x8,%esp
f010ff75:	6a 01                	push   $0x1
f010ff77:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff7a:	e8 f7 f8 01 00       	call   f012f876 <alloc_block>
f010ff7f:	83 c4 10             	add    $0x10,%esp
f010ff82:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f010ff85:	a1 d8 b0 2d f0       	mov    0xf02db0d8,%eax
f010ff8a:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff8d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff91:	74 08                	je     f010ff9b <test_free_block_FF+0xd6d>
f010ff93:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff96:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff99:	74 1d                	je     f010ffb8 <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f010ff9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ffa2:	83 ec 04             	sub    $0x4,%esp
f010ffa5:	ff 75 c0             	pushl  -0x40(%ebp)
f010ffa8:	ff 75 a8             	pushl  -0x58(%ebp)
f010ffab:	68 e8 53 13 f0       	push   $0xf01353e8
f010ffb0:	e8 7c 0e ff ff       	call   f0100e31 <cprintf>
f010ffb5:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ffb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ffbc:	74 04                	je     f010ffc2 <test_free_block_FF+0xd94>
	{
		eval += 10;
f010ffbe:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f010ffc2:	83 ec 0c             	sub    $0xc,%esp
f010ffc5:	68 4c 54 13 f0       	push   $0xf013544c
f010ffca:	e8 62 0e ff ff       	call   f0100e31 <cprintf>
f010ffcf:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ffd2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f010ffd9:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ffe0:	83 ec 08             	sub    $0x8,%esp
f010ffe3:	6a 01                	push   $0x1
f010ffe5:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ffe8:	e8 89 f8 01 00       	call   f012f876 <alloc_block>
f010ffed:	83 c4 10             	add    $0x10,%esp
f010fff0:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f010fff3:	a1 a0 aa 2d f0       	mov    0xf02daaa0,%eax
f010fff8:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010fffb:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ffff:	74 08                	je     f0110009 <test_free_block_FF+0xddb>
f0110001:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110004:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110007:	74 1d                	je     f0110026 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f0110009:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110010:	83 ec 04             	sub    $0x4,%esp
f0110013:	ff 75 c0             	pushl  -0x40(%ebp)
f0110016:	ff 75 a8             	pushl  -0x58(%ebp)
f0110019:	68 e8 53 13 f0       	push   $0xf01353e8
f011001e:	e8 0e 0e ff ff       	call   f0100e31 <cprintf>
f0110023:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f0110026:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011002d:	83 ec 08             	sub    $0x8,%esp
f0110030:	6a 01                	push   $0x1
f0110032:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110035:	e8 3c f8 01 00       	call   f012f876 <alloc_block>
f011003a:	83 c4 10             	add    $0x10,%esp
f011003d:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110040:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110045:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110048:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011004c:	74 08                	je     f0110056 <test_free_block_FF+0xe28>
f011004e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110051:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110054:	74 1d                	je     f0110073 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f0110056:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011005d:	83 ec 04             	sub    $0x4,%esp
f0110060:	ff 75 c0             	pushl  -0x40(%ebp)
f0110063:	ff 75 a8             	pushl  -0x58(%ebp)
f0110066:	68 74 54 13 f0       	push   $0xf0135474
f011006b:	e8 c1 0d ff ff       	call   f0100e31 <cprintf>
f0110070:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110073:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110077:	74 04                	je     f011007d <test_free_block_FF+0xe4f>
	{
		eval += 10;
f0110079:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f011007d:	83 ec 08             	sub    $0x8,%esp
f0110080:	ff 75 f4             	pushl  -0xc(%ebp)
f0110083:	68 d8 54 13 f0       	push   $0xf01354d8
f0110088:	e8 a4 0d ff ff       	call   f0100e31 <cprintf>
f011008d:	83 c4 10             	add    $0x10,%esp

}
f0110090:	90                   	nop
f0110091:	c9                   	leave  
f0110092:	c3                   	ret    

f0110093 <test_free_block_BF>:

void test_free_block_BF()
{
f0110093:	55                   	push   %ebp
f0110094:	89 e5                	mov    %esp,%ebp
f0110096:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0110099:	83 ec 0c             	sub    $0xc,%esp
f011009c:	68 48 46 13 f0       	push   $0xf0134648
f01100a1:	e8 8b 0d ff ff       	call   f0100e31 <cprintf>
f01100a6:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f01100a9:	83 ec 0c             	sub    $0xc,%esp
f01100ac:	68 88 46 13 f0       	push   $0xf0134688
f01100b1:	e8 7b 0d ff ff       	call   f0100e31 <cprintf>
f01100b6:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f01100b9:	83 ec 0c             	sub    $0xc,%esp
f01100bc:	68 48 46 13 f0       	push   $0xf0134648
f01100c1:	e8 6b 0d ff ff       	call   f0100e31 <cprintf>
f01100c6:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f01100c9:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01100d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01100d3:	83 ec 08             	sub    $0x8,%esp
f01100d6:	50                   	push   %eax
f01100d7:	68 00 00 00 f6       	push   $0xf6000000
f01100dc:	e8 ae f8 01 00       	call   f012f98f <initialize_dynamic_allocator>
f01100e1:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f01100e4:	83 ec 0c             	sub    $0xc,%esp
f01100e7:	68 c8 46 13 f0       	push   $0xf01346c8
f01100ec:	e8 40 0d ff ff       	call   f0100e31 <cprintf>
f01100f1:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f01100f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01100fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0110102:	eb 2a                	jmp    f011012e <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110104:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110107:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f011010e:	89 d0                	mov    %edx,%eax
f0110110:	c1 e0 02             	shl    $0x2,%eax
f0110113:	01 d0                	add    %edx,%eax
f0110115:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011011c:	01 d0                	add    %edx,%eax
f011011e:	c1 e0 03             	shl    $0x3,%eax
f0110121:	89 c2                	mov    %eax,%edx
f0110123:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110126:	01 d0                	add    %edx,%eax
f0110128:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f011012b:	ff 45 f0             	incl   -0x10(%ebp)
f011012e:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f0110132:	7e d0                	jle    f0110104 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110134:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110137:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011013a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f011013d:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0110141:	7f 17                	jg     f011015a <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110143:	83 ec 04             	sub    $0x4,%esp
f0110146:	68 20 47 13 f0       	push   $0xf0134720
f011014b:	68 90 03 00 00       	push   $0x390
f0110150:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110155:	e8 56 00 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f011015a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110161:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110168:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011016f:	e9 f8 00 00 00       	jmp    f011026c <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110174:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011017b:	e9 dc 00 00 00       	jmp    f011025c <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110180:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110183:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f011018a:	83 e8 10             	sub    $0x10,%eax
f011018d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0110190:	83 ec 08             	sub    $0x8,%esp
f0110193:	6a 03                	push   $0x3
f0110195:	ff 75 cc             	pushl  -0x34(%ebp)
f0110198:	e8 d9 f6 01 00       	call   f012f876 <alloc_block>
f011019d:	83 c4 10             	add    $0x10,%esp
f01101a0:	89 c2                	mov    %eax,%edx
f01101a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101a5:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f01101ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101af:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01101b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f01101b9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01101bc:	d1 e8                	shr    %eax
f01101be:	89 c2                	mov    %eax,%edx
f01101c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101c3:	01 c2                	add    %eax,%edx
f01101c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101c8:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01101cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01101d2:	8d 50 fe             	lea    -0x2(%eax),%edx
f01101d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101d8:	01 c2                	add    %eax,%edx
f01101da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101dd:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01101e4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01101e8:	74 0b                	je     f01101f5 <test_free_block_BF+0x162>
f01101ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01101ed:	83 c0 10             	add    $0x10,%eax
f01101f0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01101f3:	74 24                	je     f0110219 <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f01101f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01101f8:	83 c0 10             	add    $0x10,%eax
f01101fb:	83 ec 08             	sub    $0x8,%esp
f01101fe:	ff 75 c8             	pushl  -0x38(%ebp)
f0110201:	50                   	push   %eax
f0110202:	ff 75 ec             	pushl  -0x14(%ebp)
f0110205:	68 14 55 13 f0       	push   $0xf0135514
f011020a:	68 9f 03 00 00       	push   $0x39f
f011020f:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110214:	e8 97 ff fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0110219:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011021c:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110223:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0110226:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110229:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f0110230:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110233:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110236:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110239:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f0110240:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110243:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110246:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110249:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f0110250:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110253:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110256:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110259:	ff 45 e0             	incl   -0x20(%ebp)
f011025c:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0110263:	0f 8e 17 ff ff ff    	jle    f0110180 <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110269:	ff 45 e4             	incl   -0x1c(%ebp)
f011026c:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f0110270:	0f 8e fe fe ff ff    	jle    f0110174 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f0110276:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110279:	83 e8 10             	sub    $0x10,%eax
f011027c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f011027f:	83 ec 08             	sub    $0x8,%esp
f0110282:	6a 03                	push   $0x3
f0110284:	ff 75 cc             	pushl  -0x34(%ebp)
f0110287:	e8 ea f5 01 00       	call   f012f876 <alloc_block>
f011028c:	83 c4 10             	add    $0x10,%esp
f011028f:	89 c2                	mov    %eax,%edx
f0110291:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110294:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f011029b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011029e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01102a5:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01102a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102ab:	d1 e8                	shr    %eax
f01102ad:	89 c2                	mov    %eax,%edx
f01102af:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102b2:	01 c2                	add    %eax,%edx
f01102b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102b7:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01102be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102c1:	8d 50 fe             	lea    -0x2(%eax),%edx
f01102c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102c7:	01 c2                	add    %eax,%edx
f01102c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102cc:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f01102d3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01102d7:	74 0b                	je     f01102e4 <test_free_block_BF+0x251>
f01102d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01102dc:	83 c0 10             	add    $0x10,%eax
f01102df:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01102e2:	74 17                	je     f01102fb <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f01102e4:	83 ec 04             	sub    $0x4,%esp
f01102e7:	68 78 55 13 f0       	push   $0xf0135578
f01102ec:	68 b0 03 00 00       	push   $0x3b0
f01102f1:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01102f6:	e8 b5 fe fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f01102fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102fe:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f0110305:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110308:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f011030b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011030e:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f0110315:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110318:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f011031b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011031e:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f0110325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110328:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f011032b:	83 ec 0c             	sub    $0xc,%esp
f011032e:	68 44 48 13 f0       	push   $0xf0134844
f0110333:	e8 f9 0a ff ff       	call   f0100e31 <cprintf>
f0110338:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f011033b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110342:	eb 59                	jmp    f011039d <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110344:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110347:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011034e:	66 8b 00             	mov    (%eax),%ax
f0110351:	98                   	cwtl   
f0110352:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0110355:	75 26                	jne    f011037d <test_free_block_BF+0x2ea>
f0110357:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011035a:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0110361:	66 8b 00             	mov    (%eax),%ax
f0110364:	98                   	cwtl   
f0110365:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0110368:	75 13                	jne    f011037d <test_free_block_BF+0x2ea>
f011036a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011036d:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f0110374:	66 8b 00             	mov    (%eax),%ax
f0110377:	98                   	cwtl   
f0110378:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011037b:	74 1d                	je     f011039a <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011037d:	83 ec 0c             	sub    $0xc,%esp
f0110380:	ff 75 dc             	pushl  -0x24(%ebp)
f0110383:	ff 75 dc             	pushl  -0x24(%ebp)
f0110386:	68 c0 55 13 f0       	push   $0xf01355c0
f011038b:	68 bc 03 00 00       	push   $0x3bc
f0110390:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110395:	e8 16 fe fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f011039a:	ff 45 dc             	incl   -0x24(%ebp)
f011039d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01103a0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01103a3:	7c 9f                	jl     f0110344 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f01103a5:	83 ec 0c             	sub    $0xc,%esp
f01103a8:	68 c8 48 13 f0       	push   $0xf01348c8
f01103ad:	e8 7f 0a ff ff       	call   f0100e31 <cprintf>
f01103b2:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01103b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01103bc:	e9 d8 00 00 00       	jmp    f0110499 <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f01103c1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01103c4:	89 d0                	mov    %edx,%eax
f01103c6:	c1 e0 02             	shl    $0x2,%eax
f01103c9:	01 d0                	add    %edx,%eax
f01103cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01103d2:	01 d0                	add    %edx,%eax
f01103d4:	c1 e0 03             	shl    $0x3,%eax
f01103d7:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01103de:	83 ec 0c             	sub    $0xc,%esp
f01103e1:	50                   	push   %eax
f01103e2:	e8 11 f7 01 00       	call   f012faf8 <free_block>
f01103e7:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01103ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01103ed:	89 d0                	mov    %edx,%eax
f01103ef:	c1 e0 02             	shl    $0x2,%eax
f01103f2:	01 d0                	add    %edx,%eax
f01103f4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01103fb:	01 d0                	add    %edx,%eax
f01103fd:	c1 e0 03             	shl    $0x3,%eax
f0110400:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110407:	83 ec 0c             	sub    $0xc,%esp
f011040a:	50                   	push   %eax
f011040b:	e8 39 f4 01 00       	call   f012f849 <get_block_size>
f0110410:	83 c4 10             	add    $0x10,%esp
f0110413:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f0110416:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110419:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110420:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0110423:	74 28                	je     f011044d <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110425:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110428:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f011042f:	83 ec 08             	sub    $0x8,%esp
f0110432:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110435:	50                   	push   %eax
f0110436:	ff 75 d8             	pushl  -0x28(%ebp)
f0110439:	68 10 56 13 f0       	push   $0xf0135610
f011043e:	68 c9 03 00 00       	push   $0x3c9
f0110443:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110448:	e8 63 fd fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f011044d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110450:	89 d0                	mov    %edx,%eax
f0110452:	c1 e0 02             	shl    $0x2,%eax
f0110455:	01 d0                	add    %edx,%eax
f0110457:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011045e:	01 d0                	add    %edx,%eax
f0110460:	c1 e0 03             	shl    $0x3,%eax
f0110463:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011046a:	83 ec 0c             	sub    $0xc,%esp
f011046d:	50                   	push   %eax
f011046e:	e8 ec f3 01 00       	call   f012f85f <is_free_block>
f0110473:	83 c4 10             	add    $0x10,%esp
f0110476:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f0110479:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f011047d:	74 17                	je     f0110496 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f011047f:	ff 75 d8             	pushl  -0x28(%ebp)
f0110482:	68 70 56 13 f0       	push   $0xf0135670
f0110487:	68 cc 03 00 00       	push   $0x3cc
f011048c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110491:	e8 1a fd fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110496:	ff 45 d8             	incl   -0x28(%ebp)
f0110499:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f011049d:	0f 8e 1e ff ff ff    	jle    f01103c1 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f01104a3:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f01104a8:	83 ec 0c             	sub    $0xc,%esp
f01104ab:	50                   	push   %eax
f01104ac:	e8 47 f6 01 00       	call   f012faf8 <free_block>
f01104b1:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f01104b4:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f01104b9:	83 ec 0c             	sub    $0xc,%esp
f01104bc:	50                   	push   %eax
f01104bd:	e8 87 f3 01 00       	call   f012f849 <get_block_size>
f01104c2:	83 c4 10             	add    $0x10,%esp
f01104c5:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f01104c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01104cb:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f01104ce:	74 1d                	je     f01104ed <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f01104d0:	83 ec 0c             	sub    $0xc,%esp
f01104d3:	ff 75 bc             	pushl  -0x44(%ebp)
f01104d6:	ff 75 d0             	pushl  -0x30(%ebp)
f01104d9:	68 c8 56 13 f0       	push   $0xf01356c8
f01104de:	68 d3 03 00 00       	push   $0x3d3
f01104e3:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01104e8:	e8 c3 fc fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f01104ed:	a1 40 ba 2d f0       	mov    0xf02dba40,%eax
f01104f2:	83 ec 0c             	sub    $0xc,%esp
f01104f5:	50                   	push   %eax
f01104f6:	e8 64 f3 01 00       	call   f012f85f <is_free_block>
f01104fb:	83 c4 10             	add    $0x10,%esp
f01104fe:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110501:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110505:	74 17                	je     f011051e <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110507:	83 ec 04             	sub    $0x4,%esp
f011050a:	68 28 57 13 f0       	push   $0xf0135728
f011050f:	68 d6 03 00 00       	push   $0x3d6
f0110514:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110519:	e8 92 fc fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f011051e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110521:	83 e8 10             	sub    $0x10,%eax
f0110524:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110527:	83 ec 08             	sub    $0x8,%esp
f011052a:	6a 03                	push   $0x3
f011052c:	ff 75 cc             	pushl  -0x34(%ebp)
f011052f:	e8 42 f3 01 00       	call   f012f876 <alloc_block>
f0110534:	83 c4 10             	add    $0x10,%esp
f0110537:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011053a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011053e:	74 0b                	je     f011054b <test_free_block_BF+0x4b8>
f0110540:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110543:	83 c0 10             	add    $0x10,%eax
f0110546:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110549:	74 17                	je     f0110562 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f011054b:	83 ec 04             	sub    $0x4,%esp
f011054e:	68 7c 57 13 f0       	push   $0xf013577c
f0110553:	68 dd 03 00 00       	push   $0x3dd
f0110558:	68 a4 3c 13 f0       	push   $0xf0133ca4
f011055d:	e8 4e fc fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110562:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110567:	83 ec 0c             	sub    $0xc,%esp
f011056a:	50                   	push   %eax
f011056b:	e8 88 f5 01 00       	call   f012faf8 <free_block>
f0110570:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f0110573:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110578:	83 ec 0c             	sub    $0xc,%esp
f011057b:	50                   	push   %eax
f011057c:	e8 c8 f2 01 00       	call   f012f849 <get_block_size>
f0110581:	83 c4 10             	add    $0x10,%esp
f0110584:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f0110587:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f011058c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011058f:	74 20                	je     f01105b1 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110591:	a1 38 cb 18 f0       	mov    0xf018cb38,%eax
f0110596:	83 ec 0c             	sub    $0xc,%esp
f0110599:	ff 75 bc             	pushl  -0x44(%ebp)
f011059c:	50                   	push   %eax
f011059d:	68 c8 57 13 f0       	push   $0xf01357c8
f01105a2:	68 e3 03 00 00       	push   $0x3e3
f01105a7:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01105ac:	e8 ff fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f01105b1:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f01105b6:	83 ec 0c             	sub    $0xc,%esp
f01105b9:	50                   	push   %eax
f01105ba:	e8 a0 f2 01 00       	call   f012f85f <is_free_block>
f01105bf:	83 c4 10             	add    $0x10,%esp
f01105c2:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01105c5:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01105c9:	74 17                	je     f01105e2 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01105cb:	83 ec 04             	sub    $0x4,%esp
f01105ce:	68 28 58 13 f0       	push   $0xf0135828
f01105d3:	68 e6 03 00 00       	push   $0x3e6
f01105d8:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01105dd:	e8 ce fb fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f01105e2:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f01105e7:	83 e8 10             	sub    $0x10,%eax
f01105ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01105ed:	83 ec 08             	sub    $0x8,%esp
f01105f0:	6a 03                	push   $0x3
f01105f2:	ff 75 cc             	pushl  -0x34(%ebp)
f01105f5:	e8 7c f2 01 00       	call   f012f876 <alloc_block>
f01105fa:	83 c4 10             	add    $0x10,%esp
f01105fd:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f0110600:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110604:	74 09                	je     f011060f <test_free_block_BF+0x57c>
f0110606:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f011060d:	74 17                	je     f0110626 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f011060f:	83 ec 04             	sub    $0x4,%esp
f0110612:	68 7c 58 13 f0       	push   $0xf013587c
f0110617:	68 ed 03 00 00       	push   $0x3ed
f011061c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110621:	e8 8a fb fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0110626:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f011062b:	83 ec 0c             	sub    $0xc,%esp
f011062e:	50                   	push   %eax
f011062f:	e8 c4 f4 01 00       	call   f012faf8 <free_block>
f0110634:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f0110637:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f011063c:	83 ec 0c             	sub    $0xc,%esp
f011063f:	50                   	push   %eax
f0110640:	e8 04 f2 01 00       	call   f012f849 <get_block_size>
f0110645:	83 c4 10             	add    $0x10,%esp
f0110648:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f011064b:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f0110650:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110653:	74 20                	je     f0110675 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f0110655:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f011065a:	83 ec 0c             	sub    $0xc,%esp
f011065d:	ff 75 bc             	pushl  -0x44(%ebp)
f0110660:	50                   	push   %eax
f0110661:	68 c8 58 13 f0       	push   $0xf01358c8
f0110666:	68 f3 03 00 00       	push   $0x3f3
f011066b:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110670:	e8 3b fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f0110675:	a1 64 a4 2d f0       	mov    0xf02da464,%eax
f011067a:	83 ec 0c             	sub    $0xc,%esp
f011067d:	50                   	push   %eax
f011067e:	e8 dc f1 01 00       	call   f012f85f <is_free_block>
f0110683:	83 c4 10             	add    $0x10,%esp
f0110686:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110689:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011068d:	74 17                	je     f01106a6 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f011068f:	83 ec 04             	sub    $0x4,%esp
f0110692:	68 28 59 13 f0       	push   $0xf0135928
f0110697:	68 f6 03 00 00       	push   $0x3f6
f011069c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01106a1:	e8 0a fb fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f01106a6:	83 ec 0c             	sub    $0xc,%esp
f01106a9:	68 74 4c 13 f0       	push   $0xf0134c74
f01106ae:	e8 7e 07 ff ff       	call   f0100e31 <cprintf>
f01106b3:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f01106b6:	83 ec 0c             	sub    $0xc,%esp
f01106b9:	68 b0 4c 13 f0       	push   $0xf0134cb0
f01106be:	e8 6e 07 ff ff       	call   f0100e31 <cprintf>
f01106c3:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f01106c6:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01106cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106d0:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01106d7:	83 ec 0c             	sub    $0xc,%esp
f01106da:	50                   	push   %eax
f01106db:	e8 18 f4 01 00       	call   f012faf8 <free_block>
f01106e0:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01106e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106e6:	48                   	dec    %eax
f01106e7:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01106ee:	83 ec 0c             	sub    $0xc,%esp
f01106f1:	50                   	push   %eax
f01106f2:	e8 52 f1 01 00       	call   f012f849 <get_block_size>
f01106f7:	83 c4 10             	add    $0x10,%esp
f01106fa:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f01106fd:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f0110703:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110706:	01 d0                	add    %edx,%eax
f0110708:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011070b:	74 26                	je     f0110733 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f011070d:	8b 15 38 cb 18 f0    	mov    0xf018cb38,%edx
f0110713:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110716:	01 d0                	add    %edx,%eax
f0110718:	83 ec 0c             	sub    $0xc,%esp
f011071b:	ff 75 bc             	pushl  -0x44(%ebp)
f011071e:	50                   	push   %eax
f011071f:	68 7c 59 13 f0       	push   $0xf013597c
f0110724:	68 01 04 00 00       	push   $0x401
f0110729:	68 a4 3c 13 f0       	push   $0xf0133ca4
f011072e:	e8 7d fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110733:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110736:	48                   	dec    %eax
f0110737:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011073e:	83 ec 0c             	sub    $0xc,%esp
f0110741:	50                   	push   %eax
f0110742:	e8 18 f1 01 00       	call   f012f85f <is_free_block>
f0110747:	83 c4 10             	add    $0x10,%esp
f011074a:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011074d:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110751:	74 17                	je     f011076a <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110753:	83 ec 04             	sub    $0x4,%esp
f0110756:	68 dc 59 13 f0       	push   $0xf01359dc
f011075b:	68 04 04 00 00       	push   $0x404
f0110760:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110765:	e8 46 fa fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011076a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011076d:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110774:	83 ec 0c             	sub    $0xc,%esp
f0110777:	50                   	push   %eax
f0110778:	e8 cc f0 01 00       	call   f012f849 <get_block_size>
f011077d:	83 c4 10             	add    $0x10,%esp
f0110780:	85 c0                	test   %eax,%eax
f0110782:	75 1a                	jne    f011079e <test_free_block_BF+0x70b>
f0110784:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110787:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011078e:	83 ec 0c             	sub    $0xc,%esp
f0110791:	50                   	push   %eax
f0110792:	e8 c8 f0 01 00       	call   f012f85f <is_free_block>
f0110797:	83 c4 10             	add    $0x10,%esp
f011079a:	84 c0                	test   %al,%al
f011079c:	74 17                	je     f01107b5 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f011079e:	83 ec 04             	sub    $0x4,%esp
f01107a1:	68 30 5a 13 f0       	push   $0xf0135a30
f01107a6:	68 07 04 00 00       	push   $0x407
f01107ab:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01107b0:	e8 fb f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f01107b5:	83 ec 0c             	sub    $0xc,%esp
f01107b8:	68 ea 4d 13 f0       	push   $0xf0134dea
f01107bd:	e8 6f 06 ff ff       	call   f0100e31 <cprintf>
f01107c2:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f01107c5:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01107cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107cf:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01107d6:	83 ec 0c             	sub    $0xc,%esp
f01107d9:	50                   	push   %eax
f01107da:	e8 19 f3 01 00       	call   f012faf8 <free_block>
f01107df:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01107e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107e5:	48                   	dec    %eax
f01107e6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01107ed:	83 ec 0c             	sub    $0xc,%esp
f01107f0:	50                   	push   %eax
f01107f1:	e8 53 f0 01 00       	call   f012f849 <get_block_size>
f01107f6:	83 c4 10             	add    $0x10,%esp
f01107f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f01107fc:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f0110802:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f0110807:	01 d0                	add    %edx,%eax
f0110809:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011080c:	74 28                	je     f0110836 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f011080e:	8b 15 28 cb 18 f0    	mov    0xf018cb28,%edx
f0110814:	a1 28 cb 18 f0       	mov    0xf018cb28,%eax
f0110819:	01 d0                	add    %edx,%eax
f011081b:	83 ec 0c             	sub    $0xc,%esp
f011081e:	ff 75 bc             	pushl  -0x44(%ebp)
f0110821:	50                   	push   %eax
f0110822:	68 9c 5a 13 f0       	push   $0xf0135a9c
f0110827:	68 10 04 00 00       	push   $0x410
f011082c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110831:	e8 7a f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110836:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110839:	48                   	dec    %eax
f011083a:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110841:	83 ec 0c             	sub    $0xc,%esp
f0110844:	50                   	push   %eax
f0110845:	e8 15 f0 01 00       	call   f012f85f <is_free_block>
f011084a:	83 c4 10             	add    $0x10,%esp
f011084d:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110850:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110854:	74 17                	je     f011086d <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110856:	83 ec 04             	sub    $0x4,%esp
f0110859:	68 fc 5a 13 f0       	push   $0xf0135afc
f011085e:	68 13 04 00 00       	push   $0x413
f0110863:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110868:	e8 43 f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011086d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110870:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110877:	83 ec 0c             	sub    $0xc,%esp
f011087a:	50                   	push   %eax
f011087b:	e8 c9 ef 01 00       	call   f012f849 <get_block_size>
f0110880:	83 c4 10             	add    $0x10,%esp
f0110883:	85 c0                	test   %eax,%eax
f0110885:	75 1a                	jne    f01108a1 <test_free_block_BF+0x80e>
f0110887:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011088a:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110891:	83 ec 0c             	sub    $0xc,%esp
f0110894:	50                   	push   %eax
f0110895:	e8 c5 ef 01 00       	call   f012f85f <is_free_block>
f011089a:	83 c4 10             	add    $0x10,%esp
f011089d:	84 c0                	test   %al,%al
f011089f:	74 17                	je     f01108b8 <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01108a1:	83 ec 04             	sub    $0x4,%esp
f01108a4:	68 50 5b 13 f0       	push   $0xf0135b50
f01108a9:	68 16 04 00 00       	push   $0x416
f01108ae:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01108b3:	e8 f8 f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f01108b8:	83 ec 0c             	sub    $0xc,%esp
f01108bb:	68 28 4f 13 f0       	push   $0xf0134f28
f01108c0:	e8 6c 05 ff ff       	call   f0100e31 <cprintf>
f01108c5:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01108c8:	83 ec 0c             	sub    $0xc,%esp
f01108cb:	68 60 4f 13 f0       	push   $0xf0134f60
f01108d0:	e8 5c 05 ff ff       	call   f0100e31 <cprintf>
f01108d5:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f01108d8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01108df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108e2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01108e9:	83 ec 0c             	sub    $0xc,%esp
f01108ec:	50                   	push   %eax
f01108ed:	e8 06 f2 01 00       	call   f012faf8 <free_block>
f01108f2:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f01108f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108f8:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01108ff:	83 ec 0c             	sub    $0xc,%esp
f0110902:	50                   	push   %eax
f0110903:	e8 41 ef 01 00       	call   f012f849 <get_block_size>
f0110908:	83 c4 10             	add    $0x10,%esp
f011090b:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f011090e:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f0110914:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f0110919:	01 d0                	add    %edx,%eax
f011091b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011091e:	74 28                	je     f0110948 <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f0110920:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f0110926:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f011092b:	01 d0                	add    %edx,%eax
f011092d:	83 ec 0c             	sub    $0xc,%esp
f0110930:	ff 75 bc             	pushl  -0x44(%ebp)
f0110933:	50                   	push   %eax
f0110934:	68 9c 5a 13 f0       	push   $0xf0135a9c
f0110939:	68 20 04 00 00       	push   $0x420
f011093e:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110943:	e8 68 f8 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110948:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011094b:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110952:	83 ec 0c             	sub    $0xc,%esp
f0110955:	50                   	push   %eax
f0110956:	e8 04 ef 01 00       	call   f012f85f <is_free_block>
f011095b:	83 c4 10             	add    $0x10,%esp
f011095e:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110961:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110965:	74 17                	je     f011097e <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110967:	83 ec 04             	sub    $0x4,%esp
f011096a:	68 fc 5a 13 f0       	push   $0xf0135afc
f011096f:	68 23 04 00 00       	push   $0x423
f0110974:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110979:	e8 32 f8 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011097e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110981:	40                   	inc    %eax
f0110982:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110989:	83 ec 0c             	sub    $0xc,%esp
f011098c:	50                   	push   %eax
f011098d:	e8 b7 ee 01 00       	call   f012f849 <get_block_size>
f0110992:	83 c4 10             	add    $0x10,%esp
f0110995:	85 c0                	test   %eax,%eax
f0110997:	75 1b                	jne    f01109b4 <test_free_block_BF+0x921>
f0110999:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011099c:	40                   	inc    %eax
f011099d:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01109a4:	83 ec 0c             	sub    $0xc,%esp
f01109a7:	50                   	push   %eax
f01109a8:	e8 b2 ee 01 00       	call   f012f85f <is_free_block>
f01109ad:	83 c4 10             	add    $0x10,%esp
f01109b0:	84 c0                	test   %al,%al
f01109b2:	74 17                	je     f01109cb <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01109b4:	83 ec 04             	sub    $0x4,%esp
f01109b7:	68 50 5b 13 f0       	push   $0xf0135b50
f01109bc:	68 26 04 00 00       	push   $0x426
f01109c1:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01109c6:	e8 e5 f7 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f01109cb:	83 ec 0c             	sub    $0xc,%esp
f01109ce:	68 75 4f 13 f0       	push   $0xf0134f75
f01109d3:	e8 59 04 ff ff       	call   f0100e31 <cprintf>
f01109d8:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f01109db:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01109e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109e5:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01109ec:	83 ec 0c             	sub    $0xc,%esp
f01109ef:	50                   	push   %eax
f01109f0:	e8 03 f1 01 00       	call   f012faf8 <free_block>
f01109f5:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f01109f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109fb:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110a02:	83 ec 0c             	sub    $0xc,%esp
f0110a05:	50                   	push   %eax
f0110a06:	e8 3e ee 01 00       	call   f012f849 <get_block_size>
f0110a0b:	83 c4 10             	add    $0x10,%esp
f0110a0e:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110a11:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f0110a17:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f0110a1c:	01 d0                	add    %edx,%eax
f0110a1e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110a21:	74 28                	je     f0110a4b <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110a23:	8b 15 20 cb 18 f0    	mov    0xf018cb20,%edx
f0110a29:	a1 24 cb 18 f0       	mov    0xf018cb24,%eax
f0110a2e:	01 d0                	add    %edx,%eax
f0110a30:	83 ec 0c             	sub    $0xc,%esp
f0110a33:	ff 75 bc             	pushl  -0x44(%ebp)
f0110a36:	50                   	push   %eax
f0110a37:	68 bc 5b 13 f0       	push   $0xf0135bbc
f0110a3c:	68 2f 04 00 00       	push   $0x42f
f0110a41:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110a46:	e8 65 f7 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110a4b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a4e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110a55:	83 ec 0c             	sub    $0xc,%esp
f0110a58:	50                   	push   %eax
f0110a59:	e8 01 ee 01 00       	call   f012f85f <is_free_block>
f0110a5e:	83 c4 10             	add    $0x10,%esp
f0110a61:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110a64:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110a68:	74 17                	je     f0110a81 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110a6a:	83 ec 04             	sub    $0x4,%esp
f0110a6d:	68 1c 5c 13 f0       	push   $0xf0135c1c
f0110a72:	68 32 04 00 00       	push   $0x432
f0110a77:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110a7c:	e8 2f f7 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110a81:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a84:	40                   	inc    %eax
f0110a85:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110a8c:	83 ec 0c             	sub    $0xc,%esp
f0110a8f:	50                   	push   %eax
f0110a90:	e8 b4 ed 01 00       	call   f012f849 <get_block_size>
f0110a95:	83 c4 10             	add    $0x10,%esp
f0110a98:	85 c0                	test   %eax,%eax
f0110a9a:	75 1b                	jne    f0110ab7 <test_free_block_BF+0xa24>
f0110a9c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a9f:	40                   	inc    %eax
f0110aa0:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110aa7:	83 ec 0c             	sub    $0xc,%esp
f0110aaa:	50                   	push   %eax
f0110aab:	e8 af ed 01 00       	call   f012f85f <is_free_block>
f0110ab0:	83 c4 10             	add    $0x10,%esp
f0110ab3:	84 c0                	test   %al,%al
f0110ab5:	74 17                	je     f0110ace <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110ab7:	83 ec 04             	sub    $0x4,%esp
f0110aba:	68 74 5c 13 f0       	push   $0xf0135c74
f0110abf:	68 35 04 00 00       	push   $0x435
f0110ac4:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110ac9:	e8 e2 f6 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110ace:	83 ec 0c             	sub    $0xc,%esp
f0110ad1:	68 b8 50 13 f0       	push   $0xf01350b8
f0110ad6:	e8 56 03 ff ff       	call   f0100e31 <cprintf>
f0110adb:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110ade:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110ae5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ae8:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110aef:	83 ec 0c             	sub    $0xc,%esp
f0110af2:	50                   	push   %eax
f0110af3:	e8 00 f0 01 00       	call   f012faf8 <free_block>
f0110af8:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110afb:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110b02:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b05:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110b0c:	83 ec 0c             	sub    $0xc,%esp
f0110b0f:	50                   	push   %eax
f0110b10:	e8 e3 ef 01 00       	call   f012faf8 <free_block>
f0110b15:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110b18:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b1b:	48                   	dec    %eax
f0110b1c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110b23:	83 ec 0c             	sub    $0xc,%esp
f0110b26:	50                   	push   %eax
f0110b27:	e8 1d ed 01 00       	call   f012f849 <get_block_size>
f0110b2c:	83 c4 10             	add    $0x10,%esp
f0110b2f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110b32:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f0110b38:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f0110b3d:	01 c2                	add    %eax,%edx
f0110b3f:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f0110b44:	01 d0                	add    %edx,%eax
f0110b46:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110b49:	74 2f                	je     f0110b7a <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110b4b:	8b 15 2c cb 18 f0    	mov    0xf018cb2c,%edx
f0110b51:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f0110b56:	01 c2                	add    %eax,%edx
f0110b58:	a1 30 cb 18 f0       	mov    0xf018cb30,%eax
f0110b5d:	01 d0                	add    %edx,%eax
f0110b5f:	83 ec 0c             	sub    $0xc,%esp
f0110b62:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b65:	50                   	push   %eax
f0110b66:	68 e0 5c 13 f0       	push   $0xf0135ce0
f0110b6b:	68 41 04 00 00       	push   $0x441
f0110b70:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110b75:	e8 36 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110b7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b7d:	48                   	dec    %eax
f0110b7e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110b85:	83 ec 0c             	sub    $0xc,%esp
f0110b88:	50                   	push   %eax
f0110b89:	e8 d1 ec 01 00       	call   f012f85f <is_free_block>
f0110b8e:	83 c4 10             	add    $0x10,%esp
f0110b91:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110b94:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110b98:	74 17                	je     f0110bb1 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110b9a:	83 ec 04             	sub    $0x4,%esp
f0110b9d:	68 40 5d 13 f0       	push   $0xf0135d40
f0110ba2:	68 44 04 00 00       	push   $0x444
f0110ba7:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110bac:	e8 ff f5 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110bb1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bb4:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110bbb:	83 ec 0c             	sub    $0xc,%esp
f0110bbe:	50                   	push   %eax
f0110bbf:	e8 85 ec 01 00       	call   f012f849 <get_block_size>
f0110bc4:	83 c4 10             	add    $0x10,%esp
f0110bc7:	85 c0                	test   %eax,%eax
f0110bc9:	75 50                	jne    f0110c1b <test_free_block_BF+0xb88>
f0110bcb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bce:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110bd5:	83 ec 0c             	sub    $0xc,%esp
f0110bd8:	50                   	push   %eax
f0110bd9:	e8 81 ec 01 00       	call   f012f85f <is_free_block>
f0110bde:	83 c4 10             	add    $0x10,%esp
f0110be1:	84 c0                	test   %al,%al
f0110be3:	75 36                	jne    f0110c1b <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110be5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110be8:	40                   	inc    %eax
f0110be9:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110bf0:	83 ec 0c             	sub    $0xc,%esp
f0110bf3:	50                   	push   %eax
f0110bf4:	e8 50 ec 01 00       	call   f012f849 <get_block_size>
f0110bf9:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110bfc:	85 c0                	test   %eax,%eax
f0110bfe:	75 1b                	jne    f0110c1b <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110c00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c03:	40                   	inc    %eax
f0110c04:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0110c0b:	83 ec 0c             	sub    $0xc,%esp
f0110c0e:	50                   	push   %eax
f0110c0f:	e8 4b ec 01 00       	call   f012f85f <is_free_block>
f0110c14:	83 c4 10             	add    $0x10,%esp
f0110c17:	84 c0                	test   %al,%al
f0110c19:	74 17                	je     f0110c32 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110c1b:	83 ec 04             	sub    $0x4,%esp
f0110c1e:	68 98 5d 13 f0       	push   $0xf0135d98
f0110c23:	68 48 04 00 00       	push   $0x448
f0110c28:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110c2d:	e8 7e f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110c32:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f0110c39:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110c40:	83 ec 08             	sub    $0x8,%esp
f0110c43:	6a 03                	push   $0x3
f0110c45:	ff 75 cc             	pushl  -0x34(%ebp)
f0110c48:	e8 29 ec 01 00       	call   f012f876 <alloc_block>
f0110c4d:	83 c4 10             	add    $0x10,%esp
f0110c50:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110c53:	a1 20 b7 2d f0       	mov    0xf02db720,%eax
f0110c58:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f0110c5b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110c5f:	74 08                	je     f0110c69 <test_free_block_BF+0xbd6>
f0110c61:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c64:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110c67:	74 1d                	je     f0110c86 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110c69:	83 ec 0c             	sub    $0xc,%esp
f0110c6c:	ff 75 c8             	pushl  -0x38(%ebp)
f0110c6f:	ff 75 b0             	pushl  -0x50(%ebp)
f0110c72:	68 04 5e 13 f0       	push   $0xf0135e04
f0110c77:	68 55 04 00 00       	push   $0x455
f0110c7c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110c81:	e8 2a f5 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110c86:	83 ec 0c             	sub    $0xc,%esp
f0110c89:	68 20 52 13 f0       	push   $0xf0135220
f0110c8e:	e8 9e 01 ff ff       	call   f0100e31 <cprintf>
f0110c93:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110c96:	83 ec 0c             	sub    $0xc,%esp
f0110c99:	68 68 5e 13 f0       	push   $0xf0135e68
f0110c9e:	e8 8e 01 ff ff       	call   f0100e31 <cprintf>
f0110ca3:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110ca6:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110cad:	83 ec 08             	sub    $0x8,%esp
f0110cb0:	6a 03                	push   $0x3
f0110cb2:	ff 75 cc             	pushl  -0x34(%ebp)
f0110cb5:	e8 bc eb 01 00       	call   f012f876 <alloc_block>
f0110cba:	83 c4 10             	add    $0x10,%esp
f0110cbd:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110cc0:	a1 a0 aa 2d f0       	mov    0xf02daaa0,%eax
f0110cc5:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110cc8:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110ccc:	74 08                	je     f0110cd6 <test_free_block_BF+0xc43>
f0110cce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110cd1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110cd4:	74 1d                	je     f0110cf3 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110cd6:	83 ec 0c             	sub    $0xc,%esp
f0110cd9:	ff 75 c8             	pushl  -0x38(%ebp)
f0110cdc:	ff 75 b0             	pushl  -0x50(%ebp)
f0110cdf:	68 90 5e 13 f0       	push   $0xf0135e90
f0110ce4:	68 60 04 00 00       	push   $0x460
f0110ce9:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110cee:	e8 bd f4 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110cf3:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110cfa:	83 ec 08             	sub    $0x8,%esp
f0110cfd:	6a 03                	push   $0x3
f0110cff:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d02:	e8 6f eb 01 00       	call   f012f876 <alloc_block>
f0110d07:	83 c4 10             	add    $0x10,%esp
f0110d0a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110d0d:	a1 3c ba 2d f0       	mov    0xf02dba3c,%eax
f0110d12:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110d15:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d19:	74 08                	je     f0110d23 <test_free_block_BF+0xc90>
f0110d1b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d1e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d21:	74 1d                	je     f0110d40 <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d23:	83 ec 0c             	sub    $0xc,%esp
f0110d26:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d29:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d2c:	68 f4 5e 13 f0       	push   $0xf0135ef4
f0110d31:	68 67 04 00 00       	push   $0x467
f0110d36:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110d3b:	e8 70 f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110d40:	83 ec 0c             	sub    $0xc,%esp
f0110d43:	68 b8 53 13 f0       	push   $0xf01353b8
f0110d48:	e8 e4 00 ff ff       	call   f0100e31 <cprintf>
f0110d4d:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110d50:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110d57:	83 ec 08             	sub    $0x8,%esp
f0110d5a:	6a 03                	push   $0x3
f0110d5c:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d5f:	e8 12 eb 01 00       	call   f012f876 <alloc_block>
f0110d64:	83 c4 10             	add    $0x10,%esp
f0110d67:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110d6a:	a1 d8 b0 2d f0       	mov    0xf02db0d8,%eax
f0110d6f:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110d72:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d76:	74 08                	je     f0110d80 <test_free_block_BF+0xced>
f0110d78:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d7b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d7e:	74 1d                	je     f0110d9d <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d80:	83 ec 0c             	sub    $0xc,%esp
f0110d83:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d86:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d89:	68 58 5f 13 f0       	push   $0xf0135f58
f0110d8e:	68 6f 04 00 00       	push   $0x46f
f0110d93:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110d98:	e8 13 f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110d9d:	83 ec 0c             	sub    $0xc,%esp
f0110da0:	68 bc 5f 13 f0       	push   $0xf0135fbc
f0110da5:	e8 87 00 ff ff       	call   f0100e31 <cprintf>
f0110daa:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110dad:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110db4:	83 ec 08             	sub    $0x8,%esp
f0110db7:	6a 03                	push   $0x3
f0110db9:	ff 75 cc             	pushl  -0x34(%ebp)
f0110dbc:	e8 b5 ea 01 00       	call   f012f876 <alloc_block>
f0110dc1:	83 c4 10             	add    $0x10,%esp
f0110dc4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110dc7:	a1 7c a7 2d f0       	mov    0xf02da77c,%eax
f0110dcc:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110dcf:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110dd3:	74 08                	je     f0110ddd <test_free_block_BF+0xd4a>
f0110dd5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110dd8:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110ddb:	74 1d                	je     f0110dfa <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110ddd:	83 ec 0c             	sub    $0xc,%esp
f0110de0:	ff 75 c8             	pushl  -0x38(%ebp)
f0110de3:	ff 75 b0             	pushl  -0x50(%ebp)
f0110de6:	68 e4 5f 13 f0       	push   $0xf0135fe4
f0110deb:	68 77 04 00 00       	push   $0x477
f0110df0:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110df5:	e8 b6 f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110dfa:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e01:	83 ec 08             	sub    $0x8,%esp
f0110e04:	6a 03                	push   $0x3
f0110e06:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e09:	e8 68 ea 01 00       	call   f012f876 <alloc_block>
f0110e0e:	83 c4 10             	add    $0x10,%esp
f0110e11:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110e14:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e1b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e1f:	74 08                	je     f0110e29 <test_free_block_BF+0xd96>
f0110e21:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e24:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e27:	74 1d                	je     f0110e46 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e29:	83 ec 0c             	sub    $0xc,%esp
f0110e2c:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e2f:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e32:	68 48 60 13 f0       	push   $0xf0136048
f0110e37:	68 7e 04 00 00       	push   $0x47e
f0110e3c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110e41:	e8 6a f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110e46:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e4d:	83 ec 08             	sub    $0x8,%esp
f0110e50:	6a 03                	push   $0x3
f0110e52:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e55:	e8 1c ea 01 00       	call   f012f876 <alloc_block>
f0110e5a:	83 c4 10             	add    $0x10,%esp
f0110e5d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110e60:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e67:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e6b:	74 08                	je     f0110e75 <test_free_block_BF+0xde2>
f0110e6d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e70:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e73:	74 1d                	je     f0110e92 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e75:	83 ec 0c             	sub    $0xc,%esp
f0110e78:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e7b:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e7e:	68 ac 60 13 f0       	push   $0xf01360ac
f0110e83:	68 85 04 00 00       	push   $0x485
f0110e88:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110e8d:	e8 1e f3 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110e92:	83 ec 0c             	sub    $0xc,%esp
f0110e95:	68 10 61 13 f0       	push   $0xf0136110
f0110e9a:	e8 92 ff fe ff       	call   f0100e31 <cprintf>
f0110e9f:	83 c4 10             	add    $0x10,%esp

}
f0110ea2:	90                   	nop
f0110ea3:	c9                   	leave  
f0110ea4:	c3                   	ret    

f0110ea5 <test_free_block_NF>:

void test_free_block_NF()
{
f0110ea5:	55                   	push   %ebp
f0110ea6:	89 e5                	mov    %esp,%ebp
f0110ea8:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110eab:	83 ec 04             	sub    $0x4,%esp
f0110eae:	68 59 61 13 f0       	push   $0xf0136159
f0110eb3:	68 8e 04 00 00       	push   $0x48e
f0110eb8:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110ebd:	e8 ee f2 fe ff       	call   f01001b0 <_panic>

f0110ec2 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0110ec2:	55                   	push   %ebp
f0110ec3:	89 e5                	mov    %esp,%ebp
f0110ec5:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0110ec8:	83 ec 0c             	sub    $0xc,%esp
f0110ecb:	68 6c 61 13 f0       	push   $0xf013616c
f0110ed0:	e8 5c ff fe ff       	call   f0100e31 <cprintf>
f0110ed5:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0110ed8:	83 ec 0c             	sub    $0xc,%esp
f0110edb:	68 a4 61 13 f0       	push   $0xf01361a4
f0110ee0:	e8 4c ff fe ff       	call   f0100e31 <cprintf>
f0110ee5:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0110ee8:	83 ec 0c             	sub    $0xc,%esp
f0110eeb:	68 dc 61 13 f0       	push   $0xf01361dc
f0110ef0:	e8 3c ff fe ff       	call   f0100e31 <cprintf>
f0110ef5:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0110ef8:	83 ec 0c             	sub    $0xc,%esp
f0110efb:	68 6c 61 13 f0       	push   $0xf013616c
f0110f00:	e8 2c ff fe ff       	call   f0100e31 <cprintf>
f0110f05:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0110f08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0110f0f:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110f16:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f19:	83 ec 08             	sub    $0x8,%esp
f0110f1c:	50                   	push   %eax
f0110f1d:	68 00 00 00 f6       	push   $0xf6000000
f0110f22:	e8 68 ea 01 00       	call   f012f98f <initialize_dynamic_allocator>
f0110f27:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0110f2a:	83 ec 0c             	sub    $0xc,%esp
f0110f2d:	68 14 62 13 f0       	push   $0xf0136214
f0110f32:	e8 fa fe fe ff       	call   f0100e31 <cprintf>
f0110f37:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110f3a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0110f41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110f48:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110f4f:	eb 2a                	jmp    f0110f7b <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110f51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110f54:	8b 14 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%edx
f0110f5b:	89 d0                	mov    %edx,%eax
f0110f5d:	c1 e0 02             	shl    $0x2,%eax
f0110f60:	01 d0                	add    %edx,%eax
f0110f62:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110f69:	01 d0                	add    %edx,%eax
f0110f6b:	c1 e0 03             	shl    $0x3,%eax
f0110f6e:	89 c2                	mov    %eax,%edx
f0110f70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f73:	01 d0                	add    %edx,%eax
f0110f75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110f78:	ff 45 e8             	incl   -0x18(%ebp)
f0110f7b:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110f7f:	7e d0                	jle    f0110f51 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110f81:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f84:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110f87:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0110f8a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0110f8e:	7f 17                	jg     f0110fa7 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110f90:	83 ec 04             	sub    $0x4,%esp
f0110f93:	68 44 62 13 f0       	push   $0xf0136244
f0110f98:	68 b5 04 00 00       	push   $0x4b5
f0110f9d:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0110fa2:	e8 09 f2 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110fa7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110fae:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110fb5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110fbc:	e9 f8 00 00 00       	jmp    f01110b9 <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110fc1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110fc8:	e9 dc 00 00 00       	jmp    f01110a9 <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110fcd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110fd0:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0110fd7:	83 e8 10             	sub    $0x10,%eax
f0110fda:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0110fdd:	83 ec 08             	sub    $0x8,%esp
f0110fe0:	ff 75 c0             	pushl  -0x40(%ebp)
f0110fe3:	6a 00                	push   $0x0
f0110fe5:	e8 42 ec 01 00       	call   f012fc2c <realloc_block_FF>
f0110fea:	83 c4 10             	add    $0x10,%esp
f0110fed:	89 c2                	mov    %eax,%edx
f0110fef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ff2:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f0110ff9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ffc:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111003:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0111006:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111009:	d1 e8                	shr    %eax
f011100b:	89 c2                	mov    %eax,%edx
f011100d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111010:	01 c2                	add    %eax,%edx
f0111012:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111015:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f011101c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011101f:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111022:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111025:	01 c2                	add    %eax,%edx
f0111027:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011102a:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111031:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111035:	74 0b                	je     f0111042 <test_realloc_block_FF+0x180>
f0111037:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011103a:	83 c0 10             	add    $0x10,%eax
f011103d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111040:	74 24                	je     f0111066 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0111042:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111045:	83 c0 10             	add    $0x10,%eax
f0111048:	83 ec 08             	sub    $0x8,%esp
f011104b:	ff 75 bc             	pushl  -0x44(%ebp)
f011104e:	50                   	push   %eax
f011104f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111052:	68 c4 62 13 f0       	push   $0xf01362c4
f0111057:	68 c4 04 00 00       	push   $0x4c4
f011105c:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0111061:	e8 4a f1 fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0111066:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111069:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0111070:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0111073:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111076:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f011107d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111080:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0111083:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111086:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f011108d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111090:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111093:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111096:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f011109d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110a0:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01110a3:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01110a6:	ff 45 d8             	incl   -0x28(%ebp)
f01110a9:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f01110b0:	0f 8e 17 ff ff ff    	jle    f0110fcd <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01110b6:	ff 45 dc             	incl   -0x24(%ebp)
f01110b9:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f01110bd:	0f 8e fe fe ff ff    	jle    f0110fc1 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f01110c3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01110c6:	83 e8 10             	sub    $0x10,%eax
f01110c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f01110cc:	83 ec 08             	sub    $0x8,%esp
f01110cf:	ff 75 c0             	pushl  -0x40(%ebp)
f01110d2:	6a 00                	push   $0x0
f01110d4:	e8 53 eb 01 00       	call   f012fc2c <realloc_block_FF>
f01110d9:	83 c4 10             	add    $0x10,%esp
f01110dc:	89 c2                	mov    %eax,%edx
f01110de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110e1:	89 14 85 60 a4 2d f0 	mov    %edx,-0xfd25ba0(,%eax,4)
f01110e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110eb:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01110f2:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01110f5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01110f8:	d1 e8                	shr    %eax
f01110fa:	89 c2                	mov    %eax,%edx
f01110fc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01110ff:	01 c2                	add    %eax,%edx
f0111101:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111104:	89 14 85 60 d0 2d f0 	mov    %edx,-0xfd22fa0(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f011110b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011110e:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111111:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111114:	01 c2                	add    %eax,%edx
f0111116:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111119:	89 14 85 60 ba 2d f0 	mov    %edx,-0xfd245a0(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111120:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111124:	74 0b                	je     f0111131 <test_realloc_block_FF+0x26f>
f0111126:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111129:	83 c0 10             	add    $0x10,%eax
f011112c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011112f:	74 17                	je     f0111148 <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0111131:	83 ec 04             	sub    $0x4,%esp
f0111134:	68 20 63 13 f0       	push   $0xf0136320
f0111139:	68 d5 04 00 00       	push   $0x4d5
f011113e:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0111143:	e8 68 f0 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f0111148:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011114b:	8b 14 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%edx
f0111152:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111155:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0111158:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011115b:	8b 14 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%edx
f0111162:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111165:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0111168:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011116b:	8b 14 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%edx
f0111172:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111175:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111178:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011117f:	eb 59                	jmp    f01111da <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0111181:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111184:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011118b:	66 8b 00             	mov    (%eax),%ax
f011118e:	98                   	cwtl   
f011118f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0111192:	75 26                	jne    f01111ba <test_realloc_block_FF+0x2f8>
f0111194:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111197:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f011119e:	66 8b 00             	mov    (%eax),%ax
f01111a1:	98                   	cwtl   
f01111a2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01111a5:	75 13                	jne    f01111ba <test_realloc_block_FF+0x2f8>
f01111a7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111aa:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f01111b1:	66 8b 00             	mov    (%eax),%ax
f01111b4:	98                   	cwtl   
f01111b5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01111b8:	74 1d                	je     f01111d7 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f01111ba:	83 ec 0c             	sub    $0xc,%esp
f01111bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111c0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111c3:	68 64 63 13 f0       	push   $0xf0136364
f01111c8:	68 df 04 00 00       	push   $0x4df
f01111cd:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01111d2:	e8 d9 ef fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01111d7:	ff 45 d4             	incl   -0x2c(%ebp)
f01111da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111dd:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01111e0:	7c 9f                	jl     f0111181 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01111e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01111e6:	74 04                	je     f01111ec <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f01111e8:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f01111ec:	83 ec 0c             	sub    $0xc,%esp
f01111ef:	68 bc 63 13 f0       	push   $0xf01363bc
f01111f4:	e8 38 fc fe ff       	call   f0100e31 <cprintf>
f01111f9:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111fc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111203:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011120a:	e9 fa 00 00 00       	jmp    f0111309 <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f011120f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111212:	89 d0                	mov    %edx,%eax
f0111214:	c1 e0 02             	shl    $0x2,%eax
f0111217:	01 d0                	add    %edx,%eax
f0111219:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111220:	01 d0                	add    %edx,%eax
f0111222:	c1 e0 03             	shl    $0x3,%eax
f0111225:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011122c:	83 ec 08             	sub    $0x8,%esp
f011122f:	6a 00                	push   $0x0
f0111231:	50                   	push   %eax
f0111232:	e8 f5 e9 01 00       	call   f012fc2c <realloc_block_FF>
f0111237:	83 c4 10             	add    $0x10,%esp
f011123a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011123d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111240:	89 d0                	mov    %edx,%eax
f0111242:	c1 e0 02             	shl    $0x2,%eax
f0111245:	01 d0                	add    %edx,%eax
f0111247:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011124e:	01 d0                	add    %edx,%eax
f0111250:	c1 e0 03             	shl    $0x3,%eax
f0111253:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011125a:	83 ec 0c             	sub    $0xc,%esp
f011125d:	50                   	push   %eax
f011125e:	e8 e6 e5 01 00       	call   f012f849 <get_block_size>
f0111263:	83 c4 10             	add    $0x10,%esp
f0111266:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f0111269:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011126c:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0111273:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0111276:	74 28                	je     f01112a0 <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0111278:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011127b:	8b 04 85 20 cb 18 f0 	mov    -0xfe734e0(,%eax,4),%eax
f0111282:	83 ec 08             	sub    $0x8,%esp
f0111285:	ff 75 b8             	pushl  -0x48(%ebp)
f0111288:	50                   	push   %eax
f0111289:	ff 75 d0             	pushl  -0x30(%ebp)
f011128c:	68 ec 63 13 f0       	push   $0xf01363ec
f0111291:	68 f3 04 00 00       	push   $0x4f3
f0111296:	68 a4 3c 13 f0       	push   $0xf0133ca4
f011129b:	e8 10 ef fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01112a0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01112a3:	89 d0                	mov    %edx,%eax
f01112a5:	c1 e0 02             	shl    $0x2,%eax
f01112a8:	01 d0                	add    %edx,%eax
f01112aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01112b1:	01 d0                	add    %edx,%eax
f01112b3:	c1 e0 03             	shl    $0x3,%eax
f01112b6:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01112bd:	83 ec 0c             	sub    $0xc,%esp
f01112c0:	50                   	push   %eax
f01112c1:	e8 99 e5 01 00       	call   f012f85f <is_free_block>
f01112c6:	83 c4 10             	add    $0x10,%esp
f01112c9:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f01112cc:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f01112d0:	74 17                	je     f01112e9 <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01112d2:	ff 75 d0             	pushl  -0x30(%ebp)
f01112d5:	68 54 64 13 f0       	push   $0xf0136454
f01112da:	68 f6 04 00 00       	push   $0x4f6
f01112df:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01112e4:	e8 c7 ee fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f01112e9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01112ed:	74 17                	je     f0111306 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f01112ef:	ff 75 d0             	pushl  -0x30(%ebp)
f01112f2:	68 b0 64 13 f0       	push   $0xf01364b0
f01112f7:	68 f8 04 00 00       	push   $0x4f8
f01112fc:	68 a4 3c 13 f0       	push   $0xf0133ca4
f0111301:	e8 aa ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111306:	ff 45 d0             	incl   -0x30(%ebp)
f0111309:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f011130d:	0f 8e fc fe ff ff    	jle    f011120f <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f0111313:	83 ec 08             	sub    $0x8,%esp
f0111316:	6a 00                	push   $0x0
f0111318:	6a 00                	push   $0x0
f011131a:	e8 0d e9 01 00       	call   f012fc2c <realloc_block_FF>
f011131f:	83 c4 10             	add    $0x10,%esp
f0111322:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f0111325:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111329:	74 17                	je     f0111342 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f011132b:	83 ec 04             	sub    $0x4,%esp
f011132e:	68 e4 64 13 f0       	push   $0xf01364e4
f0111333:	68 fe 04 00 00       	push   $0x4fe
f0111338:	68 a4 3c 13 f0       	push   $0xf0133ca4
f011133d:	e8 6e ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111342:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0111349:	eb 6b                	jmp    f01113b6 <test_realloc_block_FF+0x4f4>
	{
		if (i % allocCntPerSize == 0)
f011134b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011134e:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0111353:	99                   	cltd   
f0111354:	f7 f9                	idiv   %ecx
f0111356:	89 d0                	mov    %edx,%eax
f0111358:	85 c0                	test   %eax,%eax
f011135a:	74 56                	je     f01113b2 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011135c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011135f:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111366:	66 8b 00             	mov    (%eax),%ax
f0111369:	98                   	cwtl   
f011136a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011136d:	75 26                	jne    f0111395 <test_realloc_block_FF+0x4d3>
f011136f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111372:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0111379:	66 8b 00             	mov    (%eax),%ax
f011137c:	98                   	cwtl   
f011137d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111380:	75 13                	jne    f0111395 <test_realloc_block_FF+0x4d3>
f0111382:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111385:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f011138c:	66 8b 00             	mov    (%eax),%ax
f011138f:	98                   	cwtl   
f0111390:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0111393:	74 1e                	je     f01113b3 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111395:	83 ec 0c             	sub    $0xc,%esp
f0111398:	ff 75 cc             	pushl  -0x34(%ebp)
f011139b:	ff 75 cc             	pushl  -0x34(%ebp)
f011139e:	68 18 65 13 f0       	push   $0xf0136518
f01113a3:	68 06 05 00 00       	push   $0x506
f01113a8:	68 a4 3c 13 f0       	push   $0xf0133ca4
f01113ad:	e8 fe ed fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f01113b2:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01113b3:	ff 45 cc             	incl   -0x34(%ebp)
f01113b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01113b9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01113bc:	7c 8d                	jl     f011134b <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01113be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113c2:	74 04                	je     f01113c8 <test_realloc_block_FF+0x506>
	{
		eval += 10;
f01113c4:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f01113c8:	83 ec 0c             	sub    $0xc,%esp
f01113cb:	68 70 65 13 f0       	push   $0xf0136570
f01113d0:	e8 5c fa fe ff       	call   f0100e31 <cprintf>
f01113d5:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f01113d8:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f01113df:	83 ec 0c             	sub    $0xc,%esp
f01113e2:	68 a8 65 13 f0       	push   $0xf01365a8
f01113e7:	e8 45 fa fe ff       	call   f0100e31 <cprintf>
f01113ec:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01113ef:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01113f6:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f01113fd:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f0111402:	8b 15 30 cb 18 f0    	mov    0xf018cb30,%edx
f0111408:	d1 ea                	shr    %edx
f011140a:	01 d0                	add    %edx,%eax
f011140c:	83 e8 10             	sub    $0x10,%eax
f011140f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111412:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111415:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111418:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011141f:	83 ec 08             	sub    $0x8,%esp
f0111422:	52                   	push   %edx
f0111423:	50                   	push   %eax
f0111424:	e8 03 e8 01 00       	call   f012fc2c <realloc_block_FF>
f0111429:	83 c4 10             	add    $0x10,%esp
f011142c:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f011142f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111433:	74 0f                	je     f0111444 <test_realloc_block_FF+0x582>
f0111435:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111438:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011143f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111442:	74 25                	je     f0111469 <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f0111444:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011144b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011144e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111455:	83 ec 04             	sub    $0x4,%esp
f0111458:	ff 75 bc             	pushl  -0x44(%ebp)
f011145b:	50                   	push   %eax
f011145c:	68 e0 65 13 f0       	push   $0xf01365e0
f0111461:	e8 cb f9 fe ff       	call   f0100e31 <cprintf>
f0111466:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111469:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011146c:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111473:	83 ec 0c             	sub    $0xc,%esp
f0111476:	50                   	push   %eax
f0111477:	e8 cd e3 01 00       	call   f012f849 <get_block_size>
f011147c:	83 c4 10             	add    $0x10,%esp
f011147f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111482:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111485:	8d 50 10             	lea    0x10(%eax),%edx
f0111488:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011148b:	39 c2                	cmp    %eax,%edx
f011148d:	74 21                	je     f01114b0 <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f011148f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111496:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111499:	83 c0 10             	add    $0x10,%eax
f011149c:	83 ec 04             	sub    $0x4,%esp
f011149f:	ff 75 a4             	pushl  -0x5c(%ebp)
f01114a2:	50                   	push   %eax
f01114a3:	68 40 66 13 f0       	push   $0xf0136640
f01114a8:	e8 84 f9 fe ff       	call   f0100e31 <cprintf>
f01114ad:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01114b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114b3:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01114ba:	83 ec 0c             	sub    $0xc,%esp
f01114bd:	50                   	push   %eax
f01114be:	e8 9c e3 01 00       	call   f012f85f <is_free_block>
f01114c3:	83 c4 10             	add    $0x10,%esp
f01114c6:	0f be c0             	movsbl %al,%eax
f01114c9:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01114cc:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01114d0:	74 17                	je     f01114e9 <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f01114d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01114d9:	83 ec 0c             	sub    $0xc,%esp
f01114dc:	68 ac 66 13 f0       	push   $0xf01366ac
f01114e1:	e8 4b f9 fe ff       	call   f0100e31 <cprintf>
f01114e6:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01114e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114ec:	40                   	inc    %eax
f01114ed:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01114f4:	83 ec 0c             	sub    $0xc,%esp
f01114f7:	50                   	push   %eax
f01114f8:	e8 4c e3 01 00       	call   f012f849 <get_block_size>
f01114fd:	83 c4 10             	add    $0x10,%esp
f0111500:	85 c0                	test   %eax,%eax
f0111502:	75 1b                	jne    f011151f <test_realloc_block_FF+0x65d>
f0111504:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111507:	40                   	inc    %eax
f0111508:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011150f:	83 ec 0c             	sub    $0xc,%esp
f0111512:	50                   	push   %eax
f0111513:	e8 47 e3 01 00       	call   f012f85f <is_free_block>
f0111518:	83 c4 10             	add    $0x10,%esp
f011151b:	84 c0                	test   %al,%al
f011151d:	74 17                	je     f0111536 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f011151f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111526:	83 ec 0c             	sub    $0xc,%esp
f0111529:	68 0c 67 13 f0       	push   $0xf013670c
f011152e:	e8 fe f8 fe ff       	call   f0100e31 <cprintf>
f0111533:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111536:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111539:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111540:	66 8b 00             	mov    (%eax),%ax
f0111543:	98                   	cwtl   
f0111544:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111547:	75 26                	jne    f011156f <test_realloc_block_FF+0x6ad>
f0111549:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011154c:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0111553:	66 8b 00             	mov    (%eax),%ax
f0111556:	98                   	cwtl   
f0111557:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011155a:	75 13                	jne    f011156f <test_realloc_block_FF+0x6ad>
f011155c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011155f:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f0111566:	66 8b 00             	mov    (%eax),%ax
f0111569:	98                   	cwtl   
f011156a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011156d:	74 1a                	je     f0111589 <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f011156f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111576:	83 ec 08             	sub    $0x8,%esp
f0111579:	ff 75 ac             	pushl  -0x54(%ebp)
f011157c:	68 80 67 13 f0       	push   $0xf0136780
f0111581:	e8 ab f8 fe ff       	call   f0100e31 <cprintf>
f0111586:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111589:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011158d:	74 04                	je     f0111593 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f011158f:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0111593:	83 ec 0c             	sub    $0xc,%esp
f0111596:	68 e0 67 13 f0       	push   $0xf01367e0
f011159b:	e8 91 f8 fe ff       	call   f0100e31 <cprintf>
f01115a0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01115a3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01115aa:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f01115b1:	a1 2c cb 18 f0       	mov    0xf018cb2c,%eax
f01115b6:	8b 15 30 cb 18 f0    	mov    0xf018cb30,%edx
f01115bc:	d1 ea                	shr    %edx
f01115be:	01 d0                	add    %edx,%eax
f01115c0:	83 e8 10             	sub    $0x10,%eax
f01115c3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01115c6:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01115c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115cc:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01115d3:	83 ec 08             	sub    $0x8,%esp
f01115d6:	52                   	push   %edx
f01115d7:	50                   	push   %eax
f01115d8:	e8 4f e6 01 00       	call   f012fc2c <realloc_block_FF>
f01115dd:	83 c4 10             	add    $0x10,%esp
f01115e0:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01115e3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01115e7:	74 0f                	je     f01115f8 <test_realloc_block_FF+0x736>
f01115e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115ec:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01115f3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01115f6:	74 25                	je     f011161d <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f01115f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01115ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111602:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111609:	83 ec 04             	sub    $0x4,%esp
f011160c:	ff 75 bc             	pushl  -0x44(%ebp)
f011160f:	50                   	push   %eax
f0111610:	68 1c 68 13 f0       	push   $0xf013681c
f0111615:	e8 17 f8 fe ff       	call   f0100e31 <cprintf>
f011161a:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011161d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111620:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111627:	83 ec 0c             	sub    $0xc,%esp
f011162a:	50                   	push   %eax
f011162b:	e8 19 e2 01 00       	call   f012f849 <get_block_size>
f0111630:	83 c4 10             	add    $0x10,%esp
f0111633:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111636:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111639:	8d 50 10             	lea    0x10(%eax),%edx
f011163c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011163f:	39 c2                	cmp    %eax,%edx
f0111641:	74 21                	je     f0111664 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f0111643:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f011164a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011164d:	83 c0 10             	add    $0x10,%eax
f0111650:	83 ec 04             	sub    $0x4,%esp
f0111653:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111656:	50                   	push   %eax
f0111657:	68 7c 68 13 f0       	push   $0xf013687c
f011165c:	e8 d0 f7 fe ff       	call   f0100e31 <cprintf>
f0111661:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111664:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111667:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f011166e:	83 ec 0c             	sub    $0xc,%esp
f0111671:	50                   	push   %eax
f0111672:	e8 e8 e1 01 00       	call   f012f85f <is_free_block>
f0111677:	83 c4 10             	add    $0x10,%esp
f011167a:	0f be c0             	movsbl %al,%eax
f011167d:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111680:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111684:	74 17                	je     f011169d <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111686:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011168d:	83 ec 0c             	sub    $0xc,%esp
f0111690:	68 ec 68 13 f0       	push   $0xf01368ec
f0111695:	e8 97 f7 fe ff       	call   f0100e31 <cprintf>
f011169a:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011169d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116a0:	40                   	inc    %eax
f01116a1:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01116a8:	83 ec 0c             	sub    $0xc,%esp
f01116ab:	50                   	push   %eax
f01116ac:	e8 98 e1 01 00       	call   f012f849 <get_block_size>
f01116b1:	83 c4 10             	add    $0x10,%esp
f01116b4:	85 c0                	test   %eax,%eax
f01116b6:	75 1b                	jne    f01116d3 <test_realloc_block_FF+0x811>
f01116b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116bb:	40                   	inc    %eax
f01116bc:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01116c3:	83 ec 0c             	sub    $0xc,%esp
f01116c6:	50                   	push   %eax
f01116c7:	e8 93 e1 01 00       	call   f012f85f <is_free_block>
f01116cc:	83 c4 10             	add    $0x10,%esp
f01116cf:	84 c0                	test   %al,%al
f01116d1:	74 17                	je     f01116ea <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f01116d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f01116da:	83 ec 0c             	sub    $0xc,%esp
f01116dd:	68 4c 69 13 f0       	push   $0xf013694c
f01116e2:	e8 4a f7 fe ff       	call   f0100e31 <cprintf>
f01116e7:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f01116ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116ed:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01116f4:	66 8b 00             	mov    (%eax),%ax
f01116f7:	98                   	cwtl   
f01116f8:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01116fb:	75 26                	jne    f0111723 <test_realloc_block_FF+0x861>
f01116fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111700:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f0111707:	66 8b 00             	mov    (%eax),%ax
f011170a:	98                   	cwtl   
f011170b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011170e:	75 13                	jne    f0111723 <test_realloc_block_FF+0x861>
f0111710:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111713:	8b 04 85 60 ba 2d f0 	mov    -0xfd245a0(,%eax,4),%eax
f011171a:	66 8b 00             	mov    (%eax),%ax
f011171d:	98                   	cwtl   
f011171e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111721:	74 1a                	je     f011173d <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f0111723:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f011172a:	83 ec 08             	sub    $0x8,%esp
f011172d:	ff 75 ac             	pushl  -0x54(%ebp)
f0111730:	68 c0 69 13 f0       	push   $0xf01369c0
f0111735:	e8 f7 f6 fe ff       	call   f0100e31 <cprintf>
f011173a:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011173d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111741:	74 04                	je     f0111747 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f0111743:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0111747:	83 ec 0c             	sub    $0xc,%esp
f011174a:	68 20 6a 13 f0       	push   $0xf0136a20
f011174f:	e8 dd f6 fe ff       	call   f0100e31 <cprintf>
f0111754:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0111757:	83 ec 0c             	sub    $0xc,%esp
f011175a:	68 58 6a 13 f0       	push   $0xf0136a58
f011175f:	e8 cd f6 fe ff       	call   f0100e31 <cprintf>
f0111764:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111767:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f011176e:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f0111775:	a1 20 cb 18 f0       	mov    0xf018cb20,%eax
f011177a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f011177d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111780:	2d 10 04 00 00       	sub    $0x410,%eax
f0111785:	89 45 a8             	mov    %eax,-0x58(%ebp)
		//cprintf("REALLOCATE to size %d\n",new_size ) ;
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111788:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011178b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011178e:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111795:	83 ec 08             	sub    $0x8,%esp
f0111798:	52                   	push   %edx
f0111799:	50                   	push   %eax
f011179a:	e8 8d e4 01 00       	call   f012fc2c <realloc_block_FF>
f011179f:	83 c4 10             	add    $0x10,%esp
f01117a2:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01117a5:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01117a9:	74 0f                	je     f01117ba <test_realloc_block_FF+0x8f8>
f01117ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117ae:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01117b5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01117b8:	74 25                	je     f01117df <test_realloc_block_FF+0x91d>
		{
			is_correct = 0;
f01117ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01117c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117c4:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01117cb:	83 ec 04             	sub    $0x4,%esp
f01117ce:	ff 75 bc             	pushl  -0x44(%ebp)
f01117d1:	50                   	push   %eax
f01117d2:	68 84 6a 13 f0       	push   $0xf0136a84
f01117d7:	e8 55 f6 fe ff       	call   f0100e31 <cprintf>
f01117dc:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f01117df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117e2:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01117e9:	83 ec 0c             	sub    $0xc,%esp
f01117ec:	50                   	push   %eax
f01117ed:	e8 57 e0 01 00       	call   f012f849 <get_block_size>
f01117f2:	83 c4 10             	add    $0x10,%esp
f01117f5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01117f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117fb:	8d 50 10             	lea    0x10(%eax),%edx
f01117fe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111801:	39 c2                	cmp    %eax,%edx
f0111803:	74 21                	je     f0111826 <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0111805:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f011180c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011180f:	83 c0 10             	add    $0x10,%eax
f0111812:	83 ec 04             	sub    $0x4,%esp
f0111815:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111818:	50                   	push   %eax
f0111819:	68 e4 6a 13 f0       	push   $0xf0136ae4
f011181e:	e8 0e f6 fe ff       	call   f0100e31 <cprintf>
f0111823:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111826:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111829:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f0111830:	83 ec 0c             	sub    $0xc,%esp
f0111833:	50                   	push   %eax
f0111834:	e8 26 e0 01 00       	call   f012f85f <is_free_block>
f0111839:	83 c4 10             	add    $0x10,%esp
f011183c:	0f be c0             	movsbl %al,%eax
f011183f:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111842:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111846:	74 17                	je     f011185f <test_realloc_block_FF+0x99d>
		{
			is_correct = 0;
f0111848:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011184f:	83 ec 0c             	sub    $0xc,%esp
f0111852:	68 54 6b 13 f0       	push   $0xf0136b54
f0111857:	e8 d5 f5 fe ff       	call   f0100e31 <cprintf>
f011185c:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f011185f:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111862:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111865:	01 d0                	add    %edx,%eax
f0111867:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f011186a:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f0111871:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111874:	8b 10                	mov    (%eax),%edx
f0111876:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111879:	39 c2                	cmp    %eax,%edx
f011187b:	75 0a                	jne    f0111887 <test_realloc_block_FF+0x9c5>
f011187d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111880:	8a 40 04             	mov    0x4(%eax),%al
f0111883:	3c 01                	cmp    $0x1,%al
f0111885:	74 20                	je     f01118a7 <test_realloc_block_FF+0x9e5>
		{
			is_correct = 0;
f0111887:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f011188e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111891:	8b 00                	mov    (%eax),%eax
f0111893:	83 ec 04             	sub    $0x4,%esp
f0111896:	50                   	push   %eax
f0111897:	ff 75 94             	pushl  -0x6c(%ebp)
f011189a:	68 b4 6b 13 f0       	push   $0xf0136bb4
f011189f:	e8 8d f5 fe ff       	call   f0100e31 <cprintf>
f01118a4:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f01118a7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118aa:	8b 04 85 60 a4 2d f0 	mov    -0xfd25ba0(,%eax,4),%eax
f01118b1:	66 8b 00             	mov    (%eax),%ax
f01118b4:	98                   	cwtl   
f01118b5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118b8:	75 13                	jne    f01118cd <test_realloc_block_FF+0xa0b>
f01118ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118bd:	8b 04 85 60 d0 2d f0 	mov    -0xfd22fa0(,%eax,4),%eax
f01118c4:	66 8b 00             	mov    (%eax),%ax
f01118c7:	98                   	cwtl   
f01118c8:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118cb:	74 1a                	je     f01118e7 <test_realloc_block_FF+0xa25>
		{
			is_correct = 0;
f01118cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01118d4:	83 ec 08             	sub    $0x8,%esp
f01118d7:	ff 75 ac             	pushl  -0x54(%ebp)
f01118da:	68 2c 6c 13 f0       	push   $0xf0136c2c
f01118df:	e8 4d f5 fe ff       	call   f0100e31 <cprintf>
f01118e4:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01118e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01118eb:	74 04                	je     f01118f1 <test_realloc_block_FF+0xa2f>
	{
		eval += 30;
f01118ed:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
	}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f01118f1:	83 ec 08             	sub    $0x8,%esp
f01118f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01118f7:	68 8c 6c 13 f0       	push   $0xf0136c8c
f01118fc:	e8 30 f5 fe ff       	call   f0100e31 <cprintf>
f0111901:	83 c4 10             	add    $0x10,%esp

}
f0111904:	90                   	nop
f0111905:	c9                   	leave  
f0111906:	c3                   	ret    

f0111907 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0111907:	55                   	push   %ebp
f0111908:	89 e5                	mov    %esp,%ebp
f011190a:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f011190d:	83 ec 04             	sub    $0x4,%esp
f0111910:	68 cb 6c 13 f0       	push   $0xf0136ccb
f0111915:	68 ae 05 00 00       	push   $0x5ae
f011191a:	68 a4 3c 13 f0       	push   $0xf0133ca4
f011191f:	e8 8c e8 fe ff       	call   f01001b0 <_panic>

f0111924 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111924:	55                   	push   %ebp
f0111925:	89 e5                	mov    %esp,%ebp
f0111927:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f011192a:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f011192f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111932:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f0111939:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0111940:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111944:	0f 84 a5 00 00 00    	je     f01119ef <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f011194a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111951:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111954:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f011195a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011195d:	eb 4a                	jmp    f01119a9 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f011195f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111962:	8b 00                	mov    (%eax),%eax
f0111964:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111967:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011196a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011196f:	89 c2                	mov    %eax,%edx
f0111971:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111974:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011197b:	8b 45 08             	mov    0x8(%ebp),%eax
f011197e:	01 c8                	add    %ecx,%eax
f0111980:	8b 00                	mov    (%eax),%eax
f0111982:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111985:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111988:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011198d:	39 c2                	cmp    %eax,%edx
f011198f:	74 09                	je     f011199a <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111991:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f0111998:	eb 3e                	jmp    f01119d8 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f011199a:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011199d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119a0:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01119a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01119a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01119ad:	74 08                	je     f01119b7 <sys_check_LRU_lists+0x93>
f01119af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01119b2:	8b 40 10             	mov    0x10(%eax),%eax
f01119b5:	eb 05                	jmp    f01119bc <sys_check_LRU_lists+0x98>
f01119b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01119bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01119bf:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01119c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119c8:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01119ce:	85 c0                	test   %eax,%eax
f01119d0:	75 8d                	jne    f011195f <sys_check_LRU_lists+0x3b>
f01119d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01119d6:	75 87                	jne    f011195f <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f01119d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119db:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01119e1:	8b 45 10             	mov    0x10(%ebp),%eax
f01119e4:	39 c2                	cmp    %eax,%edx
f01119e6:	74 07                	je     f01119ef <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f01119e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f01119ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01119f3:	0f 84 a5 00 00 00    	je     f0111a9e <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f01119f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a03:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111a09:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111a0c:	eb 4a                	jmp    f0111a58 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0111a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a11:	8b 00                	mov    (%eax),%eax
f0111a13:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111a16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111a19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a1e:	89 c2                	mov    %eax,%edx
f0111a20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a23:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111a2d:	01 c8                	add    %ecx,%eax
f0111a2f:	8b 00                	mov    (%eax),%eax
f0111a31:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111a34:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a37:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a3c:	39 c2                	cmp    %eax,%edx
f0111a3e:	74 09                	je     f0111a49 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f0111a40:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f0111a47:	eb 3e                	jmp    f0111a87 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f0111a49:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111a4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a4f:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111a58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a5c:	74 08                	je     f0111a66 <sys_check_LRU_lists+0x142>
f0111a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a61:	8b 40 10             	mov    0x10(%eax),%eax
f0111a64:	eb 05                	jmp    f0111a6b <sys_check_LRU_lists+0x147>
f0111a66:	b8 00 00 00 00       	mov    $0x0,%eax
f0111a6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111a6e:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a77:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111a7d:	85 c0                	test   %eax,%eax
f0111a7f:	75 8d                	jne    f0111a0e <sys_check_LRU_lists+0xea>
f0111a81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a85:	75 87                	jne    f0111a0e <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111a87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a8a:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111a90:	8b 45 14             	mov    0x14(%ebp),%eax
f0111a93:	39 c2                	cmp    %eax,%edx
f0111a95:	74 07                	je     f0111a9e <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111a97:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0111a9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111aa1:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111aa4:	c9                   	leave  
f0111aa5:	c3                   	ret    

f0111aa6 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111aa6:	55                   	push   %ebp
f0111aa7:	89 e5                	mov    %esp,%ebp
f0111aa9:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111aac:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f0111ab1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111ab4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111abe:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111ac4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111ac7:	eb 65                	jmp    f0111b2e <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111ac9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111ad0:	eb 3a                	jmp    f0111b0c <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111ad2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111ad5:	8b 00                	mov    (%eax),%eax
f0111ad7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111ada:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111add:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111ae2:	89 c2                	mov    %eax,%edx
f0111ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111ae7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111aee:	8b 45 08             	mov    0x8(%ebp),%eax
f0111af1:	01 c8                	add    %ecx,%eax
f0111af3:	8b 00                	mov    (%eax),%eax
f0111af5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111af8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111afb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b00:	39 c2                	cmp    %eax,%edx
f0111b02:	75 05                	jne    f0111b09 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111b04:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111b07:	eb 0b                	jmp    f0111b14 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111b09:	ff 45 f4             	incl   -0xc(%ebp)
f0111b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111b0f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111b12:	7c be                	jl     f0111ad2 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111b14:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111b18:	7e 08                	jle    f0111b22 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0111b1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111b1d:	e9 ed 00 00 00       	jmp    f0111c0f <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111b22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b25:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b2b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b2e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b32:	74 08                	je     f0111b3c <sys_check_LRU_lists_free+0x96>
f0111b34:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b37:	8b 40 10             	mov    0x10(%eax),%eax
f0111b3a:	eb 05                	jmp    f0111b41 <sys_check_LRU_lists_free+0x9b>
f0111b3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111b41:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111b44:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111b4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b4d:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b53:	85 c0                	test   %eax,%eax
f0111b55:	0f 85 6e ff ff ff    	jne    f0111ac9 <sys_check_LRU_lists_free+0x23>
f0111b5b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b5f:	0f 85 64 ff ff ff    	jne    f0111ac9 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b68:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111b6e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b71:	eb 62                	jmp    f0111bd5 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f0111b73:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0111b7a:	eb 3a                	jmp    f0111bb6 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111b7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b7f:	8b 00                	mov    (%eax),%eax
f0111b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111b84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111b87:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b8c:	89 c2                	mov    %eax,%edx
f0111b8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111b91:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111b98:	8b 45 08             	mov    0x8(%ebp),%eax
f0111b9b:	01 c8                	add    %ecx,%eax
f0111b9d:	8b 00                	mov    (%eax),%eax
f0111b9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111ba2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111ba5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111baa:	39 c2                	cmp    %eax,%edx
f0111bac:	75 05                	jne    f0111bb3 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0111bae:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111bb1:	eb 0b                	jmp    f0111bbe <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111bb3:	ff 45 f0             	incl   -0x10(%ebp)
f0111bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111bb9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111bbc:	7c be                	jl     f0111b7c <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111bbe:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111bc2:	7e 05                	jle    f0111bc9 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111bc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111bc7:	eb 46                	jmp    f0111c0f <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111bcc:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111bd2:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111bd5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111bd9:	74 08                	je     f0111be3 <sys_check_LRU_lists_free+0x13d>
f0111bdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111bde:	8b 40 10             	mov    0x10(%eax),%eax
f0111be1:	eb 05                	jmp    f0111be8 <sys_check_LRU_lists_free+0x142>
f0111be3:	b8 00 00 00 00       	mov    $0x0,%eax
f0111be8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111beb:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111bf4:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111bfa:	85 c0                	test   %eax,%eax
f0111bfc:	0f 85 71 ff ff ff    	jne    f0111b73 <sys_check_LRU_lists_free+0xcd>
f0111c02:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111c06:	0f 85 67 ff ff ff    	jne    f0111b73 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111c0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111c0f:	c9                   	leave  
f0111c10:	c3                   	ret    

f0111c11 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111c11:	55                   	push   %ebp
f0111c12:	89 e5                	mov    %esp,%ebp
f0111c14:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111c17:	83 ec 04             	sub    $0x4,%esp
f0111c1a:	68 e0 6c 13 f0       	push   $0xf0136ce0
f0111c1f:	68 9c 00 00 00       	push   $0x9c
f0111c24:	68 2b 6d 13 f0       	push   $0xf0136d2b
f0111c29:	e8 82 e5 fe ff       	call   f01001b0 <_panic>

f0111c2e <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111c2e:	55                   	push   %ebp
f0111c2f:	89 e5                	mov    %esp,%ebp
f0111c31:	57                   	push   %edi
f0111c32:	56                   	push   %esi
f0111c33:	53                   	push   %ebx
f0111c34:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111c3a:	83 ec 0c             	sub    $0xc,%esp
f0111c3d:	68 4c 6d 13 f0       	push   $0xf0136d4c
f0111c42:	e8 ea f1 fe ff       	call   f0100e31 <cprintf>
f0111c47:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111c4a:	83 ec 0c             	sub    $0xc,%esp
f0111c4d:	68 70 6d 13 f0       	push   $0xf0136d70
f0111c52:	e8 da f1 fe ff       	call   f0100e31 <cprintf>
f0111c57:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111c5a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111c61:	83 ec 0c             	sub    $0xc,%esp
f0111c64:	68 8c 6d 13 f0       	push   $0xf0136d8c
f0111c69:	e8 c3 f1 fe ff       	call   f0100e31 <cprintf>
f0111c6e:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111c71:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111c74:	bb 46 6e 13 f0       	mov    $0xf0136e46,%ebx
f0111c79:	ba 03 00 00 00       	mov    $0x3,%edx
f0111c7e:	89 c7                	mov    %eax,%edi
f0111c80:	89 de                	mov    %ebx,%esi
f0111c82:	89 d1                	mov    %edx,%ecx
f0111c84:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111c86:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111c89:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111c8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c93:	89 d7                	mov    %edx,%edi
f0111c95:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111c97:	83 ec 0c             	sub    $0xc,%esp
f0111c9a:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111c9d:	50                   	push   %eax
f0111c9e:	e8 20 ff fe ff       	call   f0101bc3 <execute_command>
f0111ca3:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111ca6:	83 ec 0c             	sub    $0xc,%esp
f0111ca9:	68 ba 6d 13 f0       	push   $0xf0136dba
f0111cae:	e8 7e f1 fe ff       	call   f0100e31 <cprintf>
f0111cb3:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111cb6:	83 ec 0c             	sub    $0xc,%esp
f0111cb9:	68 d0 6d 13 f0       	push   $0xf0136dd0
f0111cbe:	e8 6e f1 fe ff       	call   f0100e31 <cprintf>
f0111cc3:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111cc6:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111ccd:	65 00 00 
f0111cd0:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111cd6:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111cdb:	b8 00 00 00 00       	mov    $0x0,%eax
f0111ce0:	89 d7                	mov    %edx,%edi
f0111ce2:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111ce4:	83 ec 0c             	sub    $0xc,%esp
f0111ce7:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111ced:	50                   	push   %eax
f0111cee:	e8 d0 fe fe ff       	call   f0101bc3 <execute_command>
f0111cf3:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111cf6:	83 ec 0c             	sub    $0xc,%esp
f0111cf9:	68 ba 6d 13 f0       	push   $0xf0136dba
f0111cfe:	e8 2e f1 fe ff       	call   f0100e31 <cprintf>
f0111d03:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111d06:	83 ec 0c             	sub    $0xc,%esp
f0111d09:	68 f8 6d 13 f0       	push   $0xf0136df8
f0111d0e:	e8 1e f1 fe ff       	call   f0100e31 <cprintf>
f0111d13:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111d16:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111d1d:	75 00 00 
f0111d20:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111d26:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d2b:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d30:	89 d7                	mov    %edx,%edi
f0111d32:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111d34:	83 ec 0c             	sub    $0xc,%esp
f0111d37:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111d3d:	50                   	push   %eax
f0111d3e:	e8 80 fe fe ff       	call   f0101bc3 <execute_command>
f0111d43:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d46:	83 ec 0c             	sub    $0xc,%esp
f0111d49:	68 ba 6d 13 f0       	push   $0xf0136dba
f0111d4e:	e8 de f0 fe ff       	call   f0100e31 <cprintf>
f0111d53:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111d56:	83 ec 0c             	sub    $0xc,%esp
f0111d59:	68 20 6e 13 f0       	push   $0xf0136e20
f0111d5e:	e8 ce f0 fe ff       	call   f0100e31 <cprintf>
f0111d63:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111d66:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111d6d:	6d 6d 00 
f0111d70:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111d76:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d7b:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d80:	89 d7                	mov    %edx,%edi
f0111d82:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111d84:	83 ec 0c             	sub    $0xc,%esp
f0111d87:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111d8d:	50                   	push   %eax
f0111d8e:	e8 30 fe fe ff       	call   f0101bc3 <execute_command>
f0111d93:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d96:	83 ec 0c             	sub    $0xc,%esp
f0111d99:	68 ba 6d 13 f0       	push   $0xf0136dba
f0111d9e:	e8 8e f0 fe ff       	call   f0100e31 <cprintf>
f0111da3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111da6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111dab:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111dae:	5b                   	pop    %ebx
f0111daf:	5e                   	pop    %esi
f0111db0:	5f                   	pop    %edi
f0111db1:	5d                   	pop    %ebp
f0111db2:	c3                   	ret    

f0111db3 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111db3:	55                   	push   %ebp
f0111db4:	89 e5                	mov    %esp,%ebp
f0111db6:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111db9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111dc0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111dc7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111dce:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111dd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111dd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111dd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ddc:	50                   	push   %eax
f0111ddd:	e8 3d 62 ff ff       	call   f010801f <pt_set_page_permissions>
f0111de2:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111de5:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111dea:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ded:	ff 75 f0             	pushl  -0x10(%ebp)
f0111df0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111df3:	50                   	push   %eax
f0111df4:	e8 b8 4d 00 00       	call   f0116bb1 <CP>
f0111df9:	83 c4 10             	add    $0x10,%esp
f0111dfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111dff:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e03:	74 14                	je     f0111e19 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111e05:	83 ec 04             	sub    $0x4,%esp
f0111e08:	68 ac 6e 13 f0       	push   $0xf0136eac
f0111e0d:	6a 5a                	push   $0x5a
f0111e0f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0111e14:	e8 97 e3 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111e19:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111e20:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111e27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e2e:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e33:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e36:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e39:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e3c:	50                   	push   %eax
f0111e3d:	e8 dd 61 ff ff       	call   f010801f <pt_set_page_permissions>
f0111e42:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e45:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e4a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e4d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e50:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e53:	50                   	push   %eax
f0111e54:	e8 58 4d 00 00       	call   f0116bb1 <CP>
f0111e59:	83 c4 10             	add    $0x10,%esp
f0111e5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111e5f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e63:	74 14                	je     f0111e79 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111e65:	83 ec 04             	sub    $0x4,%esp
f0111e68:	68 ec 6e 13 f0       	push   $0xf0136eec
f0111e6d:	6a 66                	push   $0x66
f0111e6f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0111e74:	e8 37 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111e79:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111e80:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111e87:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e8e:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111e93:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e96:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e99:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e9c:	50                   	push   %eax
f0111e9d:	e8 7d 61 ff ff       	call   f010801f <pt_set_page_permissions>
f0111ea2:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ea5:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111eaa:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ead:	ff 75 f0             	pushl  -0x10(%ebp)
f0111eb0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111eb3:	50                   	push   %eax
f0111eb4:	e8 f8 4c 00 00       	call   f0116bb1 <CP>
f0111eb9:	83 c4 10             	add    $0x10,%esp
f0111ebc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ebf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ec3:	74 14                	je     f0111ed9 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111ec5:	83 ec 04             	sub    $0x4,%esp
f0111ec8:	68 10 6f 13 f0       	push   $0xf0136f10
f0111ecd:	6a 71                	push   $0x71
f0111ecf:	68 ce 6e 13 f0       	push   $0xf0136ece
f0111ed4:	e8 d7 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111ed9:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111ee0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111ee7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111eee:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111ef3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ef6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ef9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111efc:	50                   	push   %eax
f0111efd:	e8 1d 61 ff ff       	call   f010801f <pt_set_page_permissions>
f0111f02:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f05:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111f0a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f0d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f13:	50                   	push   %eax
f0111f14:	e8 98 4c 00 00       	call   f0116bb1 <CP>
f0111f19:	83 c4 10             	add    $0x10,%esp
f0111f1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f1f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f23:	74 14                	je     f0111f39 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111f25:	83 ec 04             	sub    $0x4,%esp
f0111f28:	68 34 6f 13 f0       	push   $0xf0136f34
f0111f2d:	6a 7d                	push   $0x7d
f0111f2f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0111f34:	e8 77 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111f39:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111f40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111f47:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f4e:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111f53:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f56:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f59:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f5c:	50                   	push   %eax
f0111f5d:	e8 bd 60 ff ff       	call   f010801f <pt_set_page_permissions>
f0111f62:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f65:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111f6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f6d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f70:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f73:	50                   	push   %eax
f0111f74:	e8 38 4c 00 00       	call   f0116bb1 <CP>
f0111f79:	83 c4 10             	add    $0x10,%esp
f0111f7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f7f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f83:	74 17                	je     f0111f9c <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111f85:	83 ec 04             	sub    $0x4,%esp
f0111f88:	68 58 6f 13 f0       	push   $0xf0136f58
f0111f8d:	68 89 00 00 00       	push   $0x89
f0111f92:	68 ce 6e 13 f0       	push   $0xf0136ece
f0111f97:	e8 14 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111f9c:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111fa3:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111faa:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fb1:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111fb6:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fbc:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fbf:	50                   	push   %eax
f0111fc0:	e8 5a 60 ff ff       	call   f010801f <pt_set_page_permissions>
f0111fc5:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fc8:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0111fcd:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fd0:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fd3:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fd6:	50                   	push   %eax
f0111fd7:	e8 d5 4b 00 00       	call   f0116bb1 <CP>
f0111fdc:	83 c4 10             	add    $0x10,%esp
f0111fdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111fe2:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111fe6:	74 17                	je     f0111fff <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111fe8:	83 ec 04             	sub    $0x4,%esp
f0111feb:	68 7c 6f 13 f0       	push   $0xf0136f7c
f0111ff0:	68 95 00 00 00       	push   $0x95
f0111ff5:	68 ce 6e 13 f0       	push   $0xf0136ece
f0111ffa:	e8 b1 e1 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111fff:	83 ec 0c             	sub    $0xc,%esp
f0112002:	68 a8 6f 13 f0       	push   $0xf0136fa8
f0112007:	e8 25 ee fe ff       	call   f0100e31 <cprintf>
f011200c:	83 c4 10             	add    $0x10,%esp
	return 0;
f011200f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112014:	c9                   	leave  
f0112015:	c3                   	ret    

f0112016 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0112016:	55                   	push   %ebp
f0112017:	89 e5                	mov    %esp,%ebp
f0112019:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011201c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0112023:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011202a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112031:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112036:	ff 75 ec             	pushl  -0x14(%ebp)
f0112039:	ff 75 f0             	pushl  -0x10(%ebp)
f011203c:	ff 75 f4             	pushl  -0xc(%ebp)
f011203f:	50                   	push   %eax
f0112040:	e8 da 5f ff ff       	call   f010801f <pt_set_page_permissions>
f0112045:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0112048:	83 ec 04             	sub    $0x4,%esp
f011204b:	68 f8 6f 13 f0       	push   $0xf0136ff8
f0112050:	68 a2 00 00 00       	push   $0xa2
f0112055:	68 ce 6e 13 f0       	push   $0xf0136ece
f011205a:	e8 51 e1 fe ff       	call   f01001b0 <_panic>

f011205f <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f011205f:	55                   	push   %ebp
f0112060:	89 e5                	mov    %esp,%ebp
f0112062:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0112065:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011206c:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112071:	83 ec 08             	sub    $0x8,%esp
f0112074:	ff 75 f4             	pushl  -0xc(%ebp)
f0112077:	50                   	push   %eax
f0112078:	e8 66 60 ff ff       	call   f01080e3 <pt_get_page_permissions>
f011207d:	83 c4 10             	add    $0x10,%esp
f0112080:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0112083:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0112087:	74 17                	je     f01120a0 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0112089:	83 ec 04             	sub    $0x4,%esp
f011208c:	68 94 70 13 f0       	push   $0xf0137094
f0112091:	68 b0 00 00 00       	push   $0xb0
f0112096:	68 ce 6e 13 f0       	push   $0xf0136ece
f011209b:	e8 10 e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f01120a0:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120a7:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01120ac:	83 ec 08             	sub    $0x8,%esp
f01120af:	ff 75 f4             	pushl  -0xc(%ebp)
f01120b2:	50                   	push   %eax
f01120b3:	e8 2b 60 ff ff       	call   f01080e3 <pt_get_page_permissions>
f01120b8:	83 c4 10             	add    $0x10,%esp
f01120bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01120be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01120c2:	74 17                	je     f01120db <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01120c4:	83 ec 04             	sub    $0x4,%esp
f01120c7:	68 b8 70 13 f0       	push   $0xf01370b8
f01120cc:	68 b8 00 00 00       	push   $0xb8
f01120d1:	68 ce 6e 13 f0       	push   $0xf0136ece
f01120d6:	e8 d5 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01120db:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120e2:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01120e7:	83 ec 08             	sub    $0x8,%esp
f01120ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01120ed:	50                   	push   %eax
f01120ee:	e8 f0 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f01120f3:	83 c4 10             	add    $0x10,%esp
f01120f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01120f9:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01120fd:	74 17                	je     f0112116 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01120ff:	83 ec 04             	sub    $0x4,%esp
f0112102:	68 dc 70 13 f0       	push   $0xf01370dc
f0112107:	68 c0 00 00 00       	push   $0xc0
f011210c:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112111:	e8 9a e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f0112116:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011211d:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112122:	83 ec 08             	sub    $0x8,%esp
f0112125:	ff 75 f4             	pushl  -0xc(%ebp)
f0112128:	50                   	push   %eax
f0112129:	e8 b5 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f011212e:	83 c4 10             	add    $0x10,%esp
f0112131:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112134:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0112138:	74 17                	je     f0112151 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f011213a:	83 ec 04             	sub    $0x4,%esp
f011213d:	68 00 71 13 f0       	push   $0xf0137100
f0112142:	68 c7 00 00 00       	push   $0xc7
f0112147:	68 ce 6e 13 f0       	push   $0xf0136ece
f011214c:	e8 5f e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112151:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112158:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f011215d:	83 ec 08             	sub    $0x8,%esp
f0112160:	ff 75 f4             	pushl  -0xc(%ebp)
f0112163:	50                   	push   %eax
f0112164:	e8 7a 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f0112169:	83 c4 10             	add    $0x10,%esp
f011216c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f011216f:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0112173:	74 17                	je     f011218c <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0112175:	83 ec 04             	sub    $0x4,%esp
f0112178:	68 24 71 13 f0       	push   $0xf0137124
f011217d:	68 ce 00 00 00       	push   $0xce
f0112182:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112187:	e8 24 e0 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011218c:	83 ec 0c             	sub    $0xc,%esp
f011218f:	68 48 71 13 f0       	push   $0xf0137148
f0112194:	e8 98 ec fe ff       	call   f0100e31 <cprintf>
f0112199:	83 c4 10             	add    $0x10,%esp
	return 0;
f011219c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01121a1:	c9                   	leave  
f01121a2:	c3                   	ret    

f01121a3 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f01121a3:	55                   	push   %ebp
f01121a4:	89 e5                	mov    %esp,%ebp
f01121a6:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f01121a9:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01121b0:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01121b5:	83 ec 08             	sub    $0x8,%esp
f01121b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01121bb:	50                   	push   %eax
f01121bc:	e8 6b 5f ff ff       	call   f010812c <pt_clear_page_table_entry>
f01121c1:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01121c4:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01121c9:	83 ec 08             	sub    $0x8,%esp
f01121cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01121cf:	50                   	push   %eax
f01121d0:	e8 38 49 00 00       	call   f0116b0d <CE>
f01121d5:	83 c4 10             	add    $0x10,%esp
f01121d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01121db:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01121df:	74 17                	je     f01121f8 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01121e1:	83 ec 04             	sub    $0x4,%esp
f01121e4:	68 90 71 13 f0       	push   $0xf0137190
f01121e9:	68 de 00 00 00       	push   $0xde
f01121ee:	68 ce 6e 13 f0       	push   $0xf0136ece
f01121f3:	e8 b8 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f01121f8:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01121ff:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112204:	83 ec 08             	sub    $0x8,%esp
f0112207:	ff 75 f4             	pushl  -0xc(%ebp)
f011220a:	50                   	push   %eax
f011220b:	e8 1c 5f ff ff       	call   f010812c <pt_clear_page_table_entry>
f0112210:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112213:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112218:	83 ec 08             	sub    $0x8,%esp
f011221b:	ff 75 f4             	pushl  -0xc(%ebp)
f011221e:	50                   	push   %eax
f011221f:	e8 e9 48 00 00       	call   f0116b0d <CE>
f0112224:	83 c4 10             	add    $0x10,%esp
f0112227:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011222a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011222e:	74 17                	je     f0112247 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0112230:	83 ec 04             	sub    $0x4,%esp
f0112233:	68 bc 71 13 f0       	push   $0xf01371bc
f0112238:	68 e6 00 00 00       	push   $0xe6
f011223d:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112242:	e8 69 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0112247:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011224e:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112253:	83 ec 08             	sub    $0x8,%esp
f0112256:	ff 75 f4             	pushl  -0xc(%ebp)
f0112259:	50                   	push   %eax
f011225a:	e8 cd 5e ff ff       	call   f010812c <pt_clear_page_table_entry>
f011225f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112262:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0112267:	83 ec 08             	sub    $0x8,%esp
f011226a:	ff 75 f4             	pushl  -0xc(%ebp)
f011226d:	50                   	push   %eax
f011226e:	e8 9a 48 00 00       	call   f0116b0d <CE>
f0112273:	83 c4 10             	add    $0x10,%esp
f0112276:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112279:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011227d:	74 17                	je     f0112296 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011227f:	83 ec 04             	sub    $0x4,%esp
f0112282:	68 e8 71 13 f0       	push   $0xf01371e8
f0112287:	68 ee 00 00 00       	push   $0xee
f011228c:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112291:	e8 1a df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0112296:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011229d:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01122a2:	83 ec 08             	sub    $0x8,%esp
f01122a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01122a8:	50                   	push   %eax
f01122a9:	e8 7e 5e ff ff       	call   f010812c <pt_clear_page_table_entry>
f01122ae:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01122b1:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01122b6:	83 ec 08             	sub    $0x8,%esp
f01122b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01122bc:	50                   	push   %eax
f01122bd:	e8 4b 48 00 00       	call   f0116b0d <CE>
f01122c2:	83 c4 10             	add    $0x10,%esp
f01122c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01122c8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01122cc:	74 17                	je     f01122e5 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01122ce:	83 ec 04             	sub    $0x4,%esp
f01122d1:	68 14 72 13 f0       	push   $0xf0137214
f01122d6:	68 f6 00 00 00       	push   $0xf6
f01122db:	68 ce 6e 13 f0       	push   $0xf0136ece
f01122e0:	e8 cb de fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01122e5:	83 ec 0c             	sub    $0xc,%esp
f01122e8:	68 40 72 13 f0       	push   $0xf0137240
f01122ed:	e8 3f eb fe ff       	call   f0100e31 <cprintf>
f01122f2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01122f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01122fa:	c9                   	leave  
f01122fb:	c3                   	ret    

f01122fc <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01122fc:	55                   	push   %ebp
f01122fd:	89 e5                	mov    %esp,%ebp
f01122ff:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0112302:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112309:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f011230e:	83 ec 08             	sub    $0x8,%esp
f0112311:	ff 75 f4             	pushl  -0xc(%ebp)
f0112314:	50                   	push   %eax
f0112315:	e8 12 5e ff ff       	call   f010812c <pt_clear_page_table_entry>
f011231a:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011231d:	83 ec 04             	sub    $0x4,%esp
f0112320:	68 8c 72 13 f0       	push   $0xf013728c
f0112325:	68 01 01 00 00       	push   $0x101
f011232a:	68 ce 6e 13 f0       	push   $0xf0136ece
f011232f:	e8 7c de fe ff       	call   f01001b0 <_panic>

f0112334 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112334:	55                   	push   %ebp
f0112335:	89 e5                	mov    %esp,%ebp
f0112337:	57                   	push   %edi
f0112338:	56                   	push   %esi
f0112339:	53                   	push   %ebx
f011233a:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112340:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112346:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f011234b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112350:	89 c7                	mov    %eax,%edi
f0112352:	89 de                	mov    %ebx,%esi
f0112354:	89 d1                	mov    %edx,%ecx
f0112356:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112358:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011235e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112363:	b0 00                	mov    $0x0,%al
f0112365:	89 d7                	mov    %edx,%edi
f0112367:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112369:	6a 00                	push   $0x0
f011236b:	6a 0a                	push   $0xa
f011236d:	6a 14                	push   $0x14
f011236f:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112375:	50                   	push   %eax
f0112376:	e8 50 69 ff ff       	call   f0108ccb <env_create>
f011237b:	83 c4 10             	add    $0x10,%esp
f011237e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112381:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112384:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011238a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011238d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112390:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112396:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0112399:	8b 45 90             	mov    -0x70(%ebp),%eax
f011239c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011239f:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01123a6:	75 70 20 
f01123a9:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01123b0:	00 00 00 
f01123b3:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f01123b9:	b9 03 00 00 00       	mov    $0x3,%ecx
f01123be:	b8 00 00 00 00       	mov    $0x0,%eax
f01123c3:	89 d7                	mov    %edx,%edi
f01123c5:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01123c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01123ca:	8b 40 4c             	mov    0x4c(%eax),%eax
f01123cd:	83 ec 08             	sub    $0x8,%esp
f01123d0:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01123d6:	52                   	push   %edx
f01123d7:	50                   	push   %eax
f01123d8:	e8 d7 ce 01 00       	call   f012f2b4 <ltostr>
f01123dd:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01123e0:	83 ec 04             	sub    $0x4,%esp
f01123e3:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123e9:	50                   	push   %eax
f01123ea:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01123f0:	50                   	push   %eax
f01123f1:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01123f7:	50                   	push   %eax
f01123f8:	e8 af cf 01 00       	call   f012f3ac <strcconcat>
f01123fd:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0112400:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112407:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011240e:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112415:	83 ec 0c             	sub    $0xc,%esp
f0112418:	ff 75 d4             	pushl  -0x2c(%ebp)
f011241b:	e8 ee 48 00 00       	call   f0116d0e <ClearUserSpace>
f0112420:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112423:	83 ec 04             	sub    $0x4,%esp
f0112426:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011242c:	50                   	push   %eax
f011242d:	68 22 73 13 f0       	push   $0xf0137322
f0112432:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112438:	50                   	push   %eax
f0112439:	e8 6e cf 01 00       	call   f012f3ac <strcconcat>
f011243e:	83 c4 10             	add    $0x10,%esp
f0112441:	83 ec 0c             	sub    $0xc,%esp
f0112444:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011244a:	50                   	push   %eax
f011244b:	e8 73 f7 fe ff       	call   f0101bc3 <execute_command>
f0112450:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112453:	83 ec 04             	sub    $0x4,%esp
f0112456:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011245c:	50                   	push   %eax
f011245d:	68 2d 73 13 f0       	push   $0xf013732d
f0112462:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112468:	50                   	push   %eax
f0112469:	e8 3e cf 01 00       	call   f012f3ac <strcconcat>
f011246e:	83 c4 10             	add    $0x10,%esp
f0112471:	83 ec 0c             	sub    $0xc,%esp
f0112474:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011247a:	50                   	push   %eax
f011247b:	e8 43 f7 fe ff       	call   f0101bc3 <execute_command>
f0112480:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112483:	83 ec 04             	sub    $0x4,%esp
f0112486:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011248c:	50                   	push   %eax
f011248d:	68 38 73 13 f0       	push   $0xf0137338
f0112492:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112498:	50                   	push   %eax
f0112499:	e8 0e cf 01 00       	call   f012f3ac <strcconcat>
f011249e:	83 c4 10             	add    $0x10,%esp
f01124a1:	83 ec 0c             	sub    $0xc,%esp
f01124a4:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01124aa:	50                   	push   %eax
f01124ab:	e8 13 f7 fe ff       	call   f0101bc3 <execute_command>
f01124b0:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01124b3:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01124ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124bd:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01124c0:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01124c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124ca:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01124cd:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01124d4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124d7:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01124da:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124dd:	83 ec 08             	sub    $0x8,%esp
f01124e0:	50                   	push   %eax
f01124e1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124e4:	e8 8c 47 00 00       	call   f0116c75 <GP>
f01124e9:	83 c4 10             	add    $0x10,%esp
f01124ec:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01124ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01124f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01124fd:	e8 dc a4 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0112502:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112505:	83 ec 0c             	sub    $0xc,%esp
f0112508:	68 44 73 13 f0       	push   $0xf0137344
f011250d:	e8 1f e9 fe ff       	call   f0100e31 <cprintf>
f0112512:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112515:	6a 03                	push   $0x3
f0112517:	68 00 00 90 02       	push   $0x2900000
f011251c:	68 00 00 80 02       	push   $0x2800000
f0112521:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112524:	e8 64 66 ff ff       	call   f0108b8d <cut_paste_pages>
f0112529:	83 c4 10             	add    $0x10,%esp
f011252c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011252f:	e8 aa a4 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0112534:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112537:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011253e:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112542:	75 08                	jne    f011254c <test_cut_paste_pages+0x218>
f0112544:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112547:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011254a:	74 2b                	je     f0112577 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011254c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011254f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112552:	83 ec 0c             	sub    $0xc,%esp
f0112555:	50                   	push   %eax
f0112556:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112559:	68 74 73 13 f0       	push   $0xf0137374
f011255e:	68 3a 01 00 00       	push   $0x13a
f0112563:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112568:	e8 51 de fe ff       	call   f01003be <_warn>
f011256d:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112570:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112577:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011257b:	74 04                	je     f0112581 <test_cut_paste_pages+0x24d>
f011257d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112581:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112588:	83 ec 08             	sub    $0x8,%esp
f011258b:	6a 00                	push   $0x0
f011258d:	6a 01                	push   $0x1
f011258f:	6a 00                	push   $0x0
f0112591:	68 ff 0f 00 00       	push   $0xfff
f0112596:	ff 75 bc             	pushl  -0x44(%ebp)
f0112599:	6a 01                	push   $0x1
f011259b:	68 00 30 00 00       	push   $0x3000
f01125a0:	68 00 00 90 02       	push   $0x2900000
f01125a5:	68 00 00 80 02       	push   $0x2800000
f01125aa:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125ad:	e8 90 47 00 00       	call   f0116d42 <CCP>
f01125b2:	83 c4 30             	add    $0x30,%esp
f01125b5:	83 f8 01             	cmp    $0x1,%eax
f01125b8:	74 21                	je     f01125db <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01125ba:	83 ec 04             	sub    $0x4,%esp
f01125bd:	68 c8 73 13 f0       	push   $0xf01373c8
f01125c2:	68 42 01 00 00       	push   $0x142
f01125c7:	68 ce 6e 13 f0       	push   $0xf0136ece
f01125cc:	e8 ed dd fe ff       	call   f01003be <_warn>
f01125d1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01125d4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01125db:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125df:	74 04                	je     f01125e5 <test_cut_paste_pages+0x2b1>
f01125e1:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01125e5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01125ec:	83 ec 04             	sub    $0x4,%esp
f01125ef:	6a 00                	push   $0x0
f01125f1:	68 00 00 90 02       	push   $0x2900000
f01125f6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125f9:	e8 d5 41 00 00       	call   f01167d3 <CB>
f01125fe:	83 c4 10             	add    $0x10,%esp
f0112601:	85 c0                	test   %eax,%eax
f0112603:	0f 84 f6 00 00 00    	je     f01126ff <test_cut_paste_pages+0x3cb>
f0112609:	83 ec 04             	sub    $0x4,%esp
f011260c:	6a 00                	push   $0x0
f011260e:	68 00 10 90 02       	push   $0x2901000
f0112613:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112616:	e8 b8 41 00 00       	call   f01167d3 <CB>
f011261b:	83 c4 10             	add    $0x10,%esp
f011261e:	85 c0                	test   %eax,%eax
f0112620:	0f 84 d9 00 00 00    	je     f01126ff <test_cut_paste_pages+0x3cb>
f0112626:	83 ec 04             	sub    $0x4,%esp
f0112629:	6a 00                	push   $0x0
f011262b:	68 00 20 90 02       	push   $0x2902000
f0112630:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112633:	e8 9b 41 00 00       	call   f01167d3 <CB>
f0112638:	83 c4 10             	add    $0x10,%esp
f011263b:	85 c0                	test   %eax,%eax
f011263d:	0f 84 bc 00 00 00    	je     f01126ff <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f0112643:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011264a:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112651:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112658:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011265b:	8a 00                	mov    (%eax),%al
f011265d:	3c 61                	cmp    $0x61,%al
f011265f:	75 12                	jne    f0112673 <test_cut_paste_pages+0x33f>
f0112661:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112664:	8a 00                	mov    (%eax),%al
f0112666:	3c 62                	cmp    $0x62,%al
f0112668:	75 09                	jne    f0112673 <test_cut_paste_pages+0x33f>
f011266a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011266d:	8a 00                	mov    (%eax),%al
f011266f:	3c 63                	cmp    $0x63,%al
f0112671:	74 21                	je     f0112694 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112673:	83 ec 04             	sub    $0x4,%esp
f0112676:	68 14 74 13 f0       	push   $0xf0137414
f011267b:	68 4f 01 00 00       	push   $0x14f
f0112680:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112685:	e8 34 dd fe ff       	call   f01003be <_warn>
f011268a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011268d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112694:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112698:	74 04                	je     f011269e <test_cut_paste_pages+0x36a>
f011269a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011269e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01126a5:	83 ec 04             	sub    $0x4,%esp
f01126a8:	6a 01                	push   $0x1
f01126aa:	68 00 10 90 02       	push   $0x2901000
f01126af:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126b2:	e8 1c 41 00 00       	call   f01167d3 <CB>
f01126b7:	83 c4 10             	add    $0x10,%esp
f01126ba:	85 c0                	test   %eax,%eax
f01126bc:	74 41                	je     f01126ff <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f01126be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126c1:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01126c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126c7:	8a 00                	mov    (%eax),%al
f01126c9:	3c 79                	cmp    $0x79,%al
f01126cb:	74 21                	je     f01126ee <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01126cd:	83 ec 04             	sub    $0x4,%esp
f01126d0:	68 14 74 13 f0       	push   $0xf0137414
f01126d5:	68 5a 01 00 00       	push   $0x15a
f01126da:	68 ce 6e 13 f0       	push   $0xf0136ece
f01126df:	e8 da dc fe ff       	call   f01003be <_warn>
f01126e4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01126e7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01126ee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126f2:	74 04                	je     f01126f8 <test_cut_paste_pages+0x3c4>
f01126f4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01126f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01126ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112702:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112705:	6a 02                	push   $0x2
f0112707:	68 00 f0 bf 02       	push   $0x2bff000
f011270c:	68 00 10 90 02       	push   $0x2901000
f0112711:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112714:	e8 74 64 ff ff       	call   f0108b8d <cut_paste_pages>
f0112719:	83 c4 10             	add    $0x10,%esp
f011271c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011271f:	e8 ba a2 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0112724:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112727:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011272b:	75 0b                	jne    f0112738 <test_cut_paste_pages+0x404>
f011272d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112730:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112733:	83 f8 01             	cmp    $0x1,%eax
f0112736:	74 2b                	je     f0112763 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112738:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011273b:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011273e:	83 ec 0c             	sub    $0xc,%esp
f0112741:	50                   	push   %eax
f0112742:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112745:	68 74 73 13 f0       	push   $0xf0137374
f011274a:	68 6b 01 00 00       	push   $0x16b
f011274f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112754:	e8 65 dc fe ff       	call   f01003be <_warn>
f0112759:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011275c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112763:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112767:	74 04                	je     f011276d <test_cut_paste_pages+0x439>
f0112769:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011276d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112774:	83 ec 08             	sub    $0x8,%esp
f0112777:	6a 00                	push   $0x0
f0112779:	6a 01                	push   $0x1
f011277b:	6a 00                	push   $0x0
f011277d:	68 ff 0f 00 00       	push   $0xfff
f0112782:	ff 75 bc             	pushl  -0x44(%ebp)
f0112785:	6a 01                	push   $0x1
f0112787:	68 00 20 00 00       	push   $0x2000
f011278c:	68 00 f0 bf 02       	push   $0x2bff000
f0112791:	68 00 10 90 02       	push   $0x2901000
f0112796:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112799:	e8 a4 45 00 00       	call   f0116d42 <CCP>
f011279e:	83 c4 30             	add    $0x30,%esp
f01127a1:	83 f8 01             	cmp    $0x1,%eax
f01127a4:	74 21                	je     f01127c7 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01127a6:	83 ec 04             	sub    $0x4,%esp
f01127a9:	68 c8 73 13 f0       	push   $0xf01373c8
f01127ae:	68 73 01 00 00       	push   $0x173
f01127b3:	68 ce 6e 13 f0       	push   $0xf0136ece
f01127b8:	e8 01 dc fe ff       	call   f01003be <_warn>
f01127bd:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01127c0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01127c7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127cb:	74 04                	je     f01127d1 <test_cut_paste_pages+0x49d>
f01127cd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01127d1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01127d8:	83 ec 04             	sub    $0x4,%esp
f01127db:	6a 00                	push   $0x0
f01127dd:	68 ff f7 bf 02       	push   $0x2bff7ff
f01127e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127e5:	e8 e9 3f 00 00       	call   f01167d3 <CB>
f01127ea:	83 c4 10             	add    $0x10,%esp
f01127ed:	85 c0                	test   %eax,%eax
f01127ef:	74 6b                	je     f011285c <test_cut_paste_pages+0x528>
f01127f1:	83 ec 04             	sub    $0x4,%esp
f01127f4:	6a 00                	push   $0x0
f01127f6:	68 ff 0f c0 02       	push   $0x2c00fff
f01127fb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127fe:	e8 d0 3f 00 00       	call   f01167d3 <CB>
f0112803:	83 c4 10             	add    $0x10,%esp
f0112806:	85 c0                	test   %eax,%eax
f0112808:	74 52                	je     f011285c <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f011280a:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112811:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112818:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011281b:	8a 00                	mov    (%eax),%al
f011281d:	3c 79                	cmp    $0x79,%al
f011281f:	75 09                	jne    f011282a <test_cut_paste_pages+0x4f6>
f0112821:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112824:	8a 00                	mov    (%eax),%al
f0112826:	3c 63                	cmp    $0x63,%al
f0112828:	74 21                	je     f011284b <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011282a:	83 ec 04             	sub    $0x4,%esp
f011282d:	68 14 74 13 f0       	push   $0xf0137414
f0112832:	68 7f 01 00 00       	push   $0x17f
f0112837:	68 ce 6e 13 f0       	push   $0xf0136ece
f011283c:	e8 7d db fe ff       	call   f01003be <_warn>
f0112841:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112844:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011284b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011284f:	74 04                	je     f0112855 <test_cut_paste_pages+0x521>
f0112851:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112855:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011285c:	83 ec 0c             	sub    $0xc,%esp
f011285f:	68 4d 74 13 f0       	push   $0xf013744d
f0112864:	e8 c8 e5 fe ff       	call   f0100e31 <cprintf>
f0112869:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011286c:	83 ec 0c             	sub    $0xc,%esp
f011286f:	68 5c 74 13 f0       	push   $0xf013745c
f0112874:	e8 b8 e5 fe ff       	call   f0100e31 <cprintf>
f0112879:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011287c:	83 ec 04             	sub    $0x4,%esp
f011287f:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112885:	50                   	push   %eax
f0112886:	68 85 74 13 f0       	push   $0xf0137485
f011288b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112891:	50                   	push   %eax
f0112892:	e8 15 cb 01 00       	call   f012f3ac <strcconcat>
f0112897:	83 c4 10             	add    $0x10,%esp
f011289a:	83 ec 0c             	sub    $0xc,%esp
f011289d:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01128a3:	50                   	push   %eax
f01128a4:	e8 1a f3 fe ff       	call   f0101bc3 <execute_command>
f01128a9:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01128ac:	83 ec 04             	sub    $0x4,%esp
f01128af:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01128b5:	50                   	push   %eax
f01128b6:	68 90 74 13 f0       	push   $0xf0137490
f01128bb:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128c1:	50                   	push   %eax
f01128c2:	e8 e5 ca 01 00       	call   f012f3ac <strcconcat>
f01128c7:	83 c4 10             	add    $0x10,%esp
f01128ca:	83 ec 0c             	sub    $0xc,%esp
f01128cd:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01128d3:	50                   	push   %eax
f01128d4:	e8 ea f2 fe ff       	call   f0101bc3 <execute_command>
f01128d9:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01128dc:	83 ec 04             	sub    $0x4,%esp
f01128df:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01128e5:	50                   	push   %eax
f01128e6:	68 9b 74 13 f0       	push   $0xf013749b
f01128eb:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128f1:	50                   	push   %eax
f01128f2:	e8 b5 ca 01 00       	call   f012f3ac <strcconcat>
f01128f7:	83 c4 10             	add    $0x10,%esp
f01128fa:	83 ec 0c             	sub    $0xc,%esp
f01128fd:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112903:	50                   	push   %eax
f0112904:	e8 ba f2 fe ff       	call   f0101bc3 <execute_command>
f0112909:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f011290c:	83 ec 04             	sub    $0x4,%esp
f011290f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112915:	50                   	push   %eax
f0112916:	68 a6 74 13 f0       	push   $0xf01374a6
f011291b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112921:	50                   	push   %eax
f0112922:	e8 85 ca 01 00       	call   f012f3ac <strcconcat>
f0112927:	83 c4 10             	add    $0x10,%esp
f011292a:	83 ec 0c             	sub    $0xc,%esp
f011292d:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112933:	50                   	push   %eax
f0112934:	e8 8a f2 fe ff       	call   f0101bc3 <execute_command>
f0112939:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011293c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112943:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112946:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112949:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112950:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112953:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112956:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011295d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112960:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112963:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011296a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011296d:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112970:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112977:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011297a:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011297d:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112984:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112987:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011298a:	83 ec 08             	sub    $0x8,%esp
f011298d:	68 00 00 c0 01       	push   $0x1c00000
f0112992:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112995:	e8 db 42 00 00       	call   f0116c75 <GP>
f011299a:	83 c4 10             	add    $0x10,%esp
f011299d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01129a0:	83 ec 08             	sub    $0x8,%esp
f01129a3:	68 00 00 40 01       	push   $0x1400000
f01129a8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129ab:	e8 c5 42 00 00       	call   f0116c75 <GP>
f01129b0:	83 c4 10             	add    $0x10,%esp
f01129b3:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01129b6:	e8 23 a0 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01129bb:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01129be:	6a 01                	push   $0x1
f01129c0:	68 00 00 40 01       	push   $0x1400000
f01129c5:	68 00 00 c0 01       	push   $0x1c00000
f01129ca:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129cd:	e8 bb 61 ff ff       	call   f0108b8d <cut_paste_pages>
f01129d2:	83 c4 10             	add    $0x10,%esp
f01129d5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01129d8:	e8 01 a0 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01129dd:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01129e0:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01129e4:	75 08                	jne    f01129ee <test_cut_paste_pages+0x6ba>
f01129e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129e9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01129ec:	74 2b                	je     f0112a19 <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01129ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129f1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01129f4:	83 ec 0c             	sub    $0xc,%esp
f01129f7:	50                   	push   %eax
f01129f8:	ff 75 b4             	pushl  -0x4c(%ebp)
f01129fb:	68 b4 74 13 f0       	push   $0xf01374b4
f0112a00:	68 a2 01 00 00       	push   $0x1a2
f0112a05:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112a0a:	e8 af d9 fe ff       	call   f01003be <_warn>
f0112a0f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112a12:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112a19:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a1d:	74 04                	je     f0112a23 <test_cut_paste_pages+0x6ef>
f0112a1f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112a23:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112a2a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112a31:	83 ec 08             	sub    $0x8,%esp
f0112a34:	6a 00                	push   $0x0
f0112a36:	68 ff 0f 00 00       	push   $0xfff
f0112a3b:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112a3e:	68 ff 0f 00 00       	push   $0xfff
f0112a43:	ff 75 a0             	pushl  -0x60(%ebp)
f0112a46:	6a 01                	push   $0x1
f0112a48:	68 00 10 00 00       	push   $0x1000
f0112a4d:	68 00 00 40 01       	push   $0x1400000
f0112a52:	68 00 00 c0 01       	push   $0x1c00000
f0112a57:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a5a:	e8 e3 42 00 00       	call   f0116d42 <CCP>
f0112a5f:	83 c4 30             	add    $0x30,%esp
f0112a62:	83 f8 01             	cmp    $0x1,%eax
f0112a65:	74 28                	je     f0112a8f <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112a67:	83 ec 04             	sub    $0x4,%esp
f0112a6a:	68 c8 73 13 f0       	push   $0xf01373c8
f0112a6f:	68 ab 01 00 00       	push   $0x1ab
f0112a74:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112a79:	e8 40 d9 fe ff       	call   f01003be <_warn>
f0112a7e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112a81:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112a88:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112a8f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a93:	74 04                	je     f0112a99 <test_cut_paste_pages+0x765>
f0112a95:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112a99:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112aa0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112aa4:	0f 84 92 00 00 00    	je     f0112b3c <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0112aaa:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112ab1:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112ab8:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112abf:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112ac6:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112acd:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ad4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ad7:	8a 00                	mov    (%eax),%al
f0112ad9:	3c 61                	cmp    $0x61,%al
f0112adb:	75 2d                	jne    f0112b0a <test_cut_paste_pages+0x7d6>
f0112add:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ae0:	8a 00                	mov    (%eax),%al
f0112ae2:	3c 78                	cmp    $0x78,%al
f0112ae4:	75 24                	jne    f0112b0a <test_cut_paste_pages+0x7d6>
f0112ae6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112ae9:	8a 00                	mov    (%eax),%al
f0112aeb:	3c 62                	cmp    $0x62,%al
f0112aed:	75 1b                	jne    f0112b0a <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112aef:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112af2:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112af4:	3c 79                	cmp    $0x79,%al
f0112af6:	75 12                	jne    f0112b0a <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112af8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112afb:	8a 00                	mov    (%eax),%al
f0112afd:	3c 63                	cmp    $0x63,%al
f0112aff:	75 09                	jne    f0112b0a <test_cut_paste_pages+0x7d6>
f0112b01:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112b04:	8a 00                	mov    (%eax),%al
f0112b06:	3c 7a                	cmp    $0x7a,%al
f0112b08:	74 21                	je     f0112b2b <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112b0a:	83 ec 04             	sub    $0x4,%esp
f0112b0d:	68 14 74 13 f0       	push   $0xf0137414
f0112b12:	68 bd 01 00 00       	push   $0x1bd
f0112b17:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112b1c:	e8 9d d8 fe ff       	call   f01003be <_warn>
f0112b21:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112b24:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112b2b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b2f:	74 04                	je     f0112b35 <test_cut_paste_pages+0x801>
f0112b31:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b35:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112b3c:	e8 9d 9e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0112b41:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112b44:	6a 03                	push   $0x3
f0112b46:	68 00 f0 bf 01       	push   $0x1bff000
f0112b4b:	68 00 00 40 01       	push   $0x1400000
f0112b50:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b53:	e8 35 60 ff ff       	call   f0108b8d <cut_paste_pages>
f0112b58:	83 c4 10             	add    $0x10,%esp
f0112b5b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112b5e:	e8 7b 9e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0112b63:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112b66:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112b6a:	75 08                	jne    f0112b74 <test_cut_paste_pages+0x840>
f0112b6c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b6f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112b72:	74 2b                	je     f0112b9f <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112b74:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b77:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112b7a:	83 ec 0c             	sub    $0xc,%esp
f0112b7d:	50                   	push   %eax
f0112b7e:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b81:	68 b4 74 13 f0       	push   $0xf01374b4
f0112b86:	68 cc 01 00 00       	push   $0x1cc
f0112b8b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112b90:	e8 29 d8 fe ff       	call   f01003be <_warn>
f0112b95:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112b98:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112b9f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ba3:	74 04                	je     f0112ba9 <test_cut_paste_pages+0x875>
f0112ba5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112ba9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112bb0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112bb7:	83 ec 04             	sub    $0x4,%esp
f0112bba:	6a 00                	push   $0x0
f0112bbc:	68 00 00 40 01       	push   $0x1400000
f0112bc1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bc4:	e8 0a 3c 00 00       	call   f01167d3 <CB>
f0112bc9:	83 c4 10             	add    $0x10,%esp
f0112bcc:	83 f8 01             	cmp    $0x1,%eax
f0112bcf:	0f 85 80 00 00 00    	jne    f0112c55 <test_cut_paste_pages+0x921>
f0112bd5:	83 ec 04             	sub    $0x4,%esp
f0112bd8:	6a 00                	push   $0x0
f0112bda:	68 00 10 40 01       	push   $0x1401000
f0112bdf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112be2:	e8 ec 3b 00 00       	call   f01167d3 <CB>
f0112be7:	83 c4 10             	add    $0x10,%esp
f0112bea:	83 f8 01             	cmp    $0x1,%eax
f0112bed:	75 66                	jne    f0112c55 <test_cut_paste_pages+0x921>
f0112bef:	83 ec 04             	sub    $0x4,%esp
f0112bf2:	6a 00                	push   $0x0
f0112bf4:	68 00 20 40 01       	push   $0x1402000
f0112bf9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bfc:	e8 d2 3b 00 00       	call   f01167d3 <CB>
f0112c01:	83 c4 10             	add    $0x10,%esp
f0112c04:	83 f8 01             	cmp    $0x1,%eax
f0112c07:	75 4c                	jne    f0112c55 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112c09:	83 ec 04             	sub    $0x4,%esp
f0112c0c:	6a 00                	push   $0x0
f0112c0e:	68 00 f0 bf 01       	push   $0x1bff000
f0112c13:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c16:	e8 b8 3b 00 00       	call   f01167d3 <CB>
f0112c1b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112c1e:	85 c0                	test   %eax,%eax
f0112c20:	75 33                	jne    f0112c55 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112c22:	83 ec 04             	sub    $0x4,%esp
f0112c25:	6a 00                	push   $0x0
f0112c27:	68 00 00 c0 01       	push   $0x1c00000
f0112c2c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c2f:	e8 9f 3b 00 00       	call   f01167d3 <CB>
f0112c34:	83 c4 10             	add    $0x10,%esp
f0112c37:	83 f8 01             	cmp    $0x1,%eax
f0112c3a:	75 19                	jne    f0112c55 <test_cut_paste_pages+0x921>
f0112c3c:	83 ec 04             	sub    $0x4,%esp
f0112c3f:	6a 00                	push   $0x0
f0112c41:	68 00 10 c0 01       	push   $0x1c01000
f0112c46:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c49:	e8 85 3b 00 00       	call   f01167d3 <CB>
f0112c4e:	83 c4 10             	add    $0x10,%esp
f0112c51:	85 c0                	test   %eax,%eax
f0112c53:	74 28                	je     f0112c7d <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112c55:	83 ec 04             	sub    $0x4,%esp
f0112c58:	68 14 75 13 f0       	push   $0xf0137514
f0112c5d:	68 d5 01 00 00       	push   $0x1d5
f0112c62:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112c67:	e8 52 d7 fe ff       	call   f01003be <_warn>
f0112c6c:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c6f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112c76:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112c7d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c81:	74 04                	je     f0112c87 <test_cut_paste_pages+0x953>
f0112c83:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112c87:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112c8e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112c92:	0f 84 99 00 00 00    	je     f0112d31 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112c98:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112c9f:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112ca6:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112cad:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112cb4:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112cbb:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112cc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112cc5:	8a 00                	mov    (%eax),%al
f0112cc7:	3c 61                	cmp    $0x61,%al
f0112cc9:	75 2d                	jne    f0112cf8 <test_cut_paste_pages+0x9c4>
f0112ccb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112cce:	8a 00                	mov    (%eax),%al
f0112cd0:	3c 78                	cmp    $0x78,%al
f0112cd2:	75 24                	jne    f0112cf8 <test_cut_paste_pages+0x9c4>
f0112cd4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112cd7:	8a 00                	mov    (%eax),%al
f0112cd9:	3c 62                	cmp    $0x62,%al
f0112cdb:	75 1b                	jne    f0112cf8 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112cdd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ce0:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ce2:	3c 79                	cmp    $0x79,%al
f0112ce4:	75 12                	jne    f0112cf8 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ce6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ce9:	8a 00                	mov    (%eax),%al
f0112ceb:	3c 63                	cmp    $0x63,%al
f0112ced:	75 09                	jne    f0112cf8 <test_cut_paste_pages+0x9c4>
f0112cef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112cf2:	8a 00                	mov    (%eax),%al
f0112cf4:	3c 7a                	cmp    $0x7a,%al
f0112cf6:	74 28                	je     f0112d20 <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112cf8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112cff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112d06:	83 ec 04             	sub    $0x4,%esp
f0112d09:	68 14 74 13 f0       	push   $0xf0137414
f0112d0e:	68 e9 01 00 00       	push   $0x1e9
f0112d13:	68 ce 6e 13 f0       	push   $0xf0136ece
f0112d18:	e8 a1 d6 fe ff       	call   f01003be <_warn>
f0112d1d:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112d20:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d24:	74 04                	je     f0112d2a <test_cut_paste_pages+0x9f6>
f0112d26:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d2a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112d31:	83 ec 0c             	sub    $0xc,%esp
f0112d34:	68 4d 75 13 f0       	push   $0xf013754d
f0112d39:	e8 f3 e0 fe ff       	call   f0100e31 <cprintf>
f0112d3e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112d41:	83 ec 08             	sub    $0x8,%esp
f0112d44:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112d47:	68 5c 75 13 f0       	push   $0xf013755c
f0112d4c:	e8 e0 e0 fe ff       	call   f0100e31 <cprintf>
f0112d51:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112d54:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112d58:	75 10                	jne    f0112d6a <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112d5a:	83 ec 0c             	sub    $0xc,%esp
f0112d5d:	68 90 75 13 f0       	push   $0xf0137590
f0112d62:	e8 ca e0 fe ff       	call   f0100e31 <cprintf>
f0112d67:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112d6a:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0112d6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112d72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112d75:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112d78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112d7d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112d80:	5b                   	pop    %ebx
f0112d81:	5e                   	pop    %esi
f0112d82:	5f                   	pop    %edi
f0112d83:	5d                   	pop    %ebp
f0112d84:	c3                   	ret    

f0112d85 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112d85:	55                   	push   %ebp
f0112d86:	89 e5                	mov    %esp,%ebp
f0112d88:	57                   	push   %edi
f0112d89:	56                   	push   %esi
f0112d8a:	53                   	push   %ebx
f0112d8b:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112d91:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d97:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f0112d9c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112da1:	89 c7                	mov    %eax,%edi
f0112da3:	89 de                	mov    %ebx,%esi
f0112da5:	89 d1                	mov    %edx,%ecx
f0112da7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112da9:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112daf:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112db4:	b0 00                	mov    $0x0,%al
f0112db6:	89 d7                	mov    %edx,%edi
f0112db8:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112dba:	6a 00                	push   $0x0
f0112dbc:	6a 0a                	push   $0xa
f0112dbe:	6a 14                	push   $0x14
f0112dc0:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112dc6:	50                   	push   %eax
f0112dc7:	e8 ff 5e ff ff       	call   f0108ccb <env_create>
f0112dcc:	83 c4 10             	add    $0x10,%esp
f0112dcf:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112dd2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112dd5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112ddb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112dde:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112de1:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112de7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112ded:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112df3:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112df6:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112dfd:	75 70 20 
f0112e00:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112e07:	00 00 00 
f0112e0a:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112e10:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112e15:	b8 00 00 00 00       	mov    $0x0,%eax
f0112e1a:	89 d7                	mov    %edx,%edi
f0112e1c:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112e1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e21:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112e24:	83 ec 08             	sub    $0x8,%esp
f0112e27:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112e2d:	52                   	push   %edx
f0112e2e:	50                   	push   %eax
f0112e2f:	e8 80 c4 01 00       	call   f012f2b4 <ltostr>
f0112e34:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112e37:	83 ec 04             	sub    $0x4,%esp
f0112e3a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e40:	50                   	push   %eax
f0112e41:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112e47:	50                   	push   %eax
f0112e48:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112e4e:	50                   	push   %eax
f0112e4f:	e8 58 c5 01 00       	call   f012f3ac <strcconcat>
f0112e54:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112e57:	83 ec 0c             	sub    $0xc,%esp
f0112e5a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e5d:	e8 ac 3e 00 00       	call   f0116d0e <ClearUserSpace>
f0112e62:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112e65:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112e6c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112e73:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112e7a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112e81:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112e88:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112e8f:	83 ec 0c             	sub    $0xc,%esp
f0112e92:	68 04 76 13 f0       	push   $0xf0137604
f0112e97:	e8 95 df fe ff       	call   f0100e31 <cprintf>
f0112e9c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112e9f:	83 ec 04             	sub    $0x4,%esp
f0112ea2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ea8:	50                   	push   %eax
f0112ea9:	68 3a 76 13 f0       	push   $0xf013763a
f0112eae:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112eb4:	50                   	push   %eax
f0112eb5:	e8 f2 c4 01 00       	call   f012f3ac <strcconcat>
f0112eba:	83 c4 10             	add    $0x10,%esp
f0112ebd:	83 ec 0c             	sub    $0xc,%esp
f0112ec0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ec6:	50                   	push   %eax
f0112ec7:	e8 f7 ec fe ff       	call   f0101bc3 <execute_command>
f0112ecc:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112ecf:	83 ec 04             	sub    $0x4,%esp
f0112ed2:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ed8:	50                   	push   %eax
f0112ed9:	68 3f 76 13 f0       	push   $0xf013763f
f0112ede:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ee4:	50                   	push   %eax
f0112ee5:	e8 c2 c4 01 00       	call   f012f3ac <strcconcat>
f0112eea:	83 c4 10             	add    $0x10,%esp
f0112eed:	83 ec 0c             	sub    $0xc,%esp
f0112ef0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ef6:	50                   	push   %eax
f0112ef7:	e8 c7 ec fe ff       	call   f0101bc3 <execute_command>
f0112efc:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112eff:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112f05:	bb 45 79 13 f0       	mov    $0xf0137945,%ebx
f0112f0a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f0f:	89 c7                	mov    %eax,%edi
f0112f11:	89 de                	mov    %ebx,%esi
f0112f13:	89 d1                	mov    %edx,%ecx
f0112f15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f17:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112f1d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f22:	b0 00                	mov    $0x0,%al
f0112f24:	89 d7                	mov    %edx,%edi
f0112f26:	f3 aa                	rep stos %al,%es:(%edi)
f0112f28:	83 ec 0c             	sub    $0xc,%esp
f0112f2b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112f31:	50                   	push   %eax
f0112f32:	e8 8c ec fe ff       	call   f0101bc3 <execute_command>
f0112f37:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112f3a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f40:	bb a9 79 13 f0       	mov    $0xf01379a9,%ebx
f0112f45:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f4a:	89 c7                	mov    %eax,%edi
f0112f4c:	89 de                	mov    %ebx,%esi
f0112f4e:	89 d1                	mov    %edx,%ecx
f0112f50:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f52:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112f58:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f5d:	b0 00                	mov    $0x0,%al
f0112f5f:	89 d7                	mov    %edx,%edi
f0112f61:	f3 aa                	rep stos %al,%es:(%edi)
f0112f63:	83 ec 0c             	sub    $0xc,%esp
f0112f66:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f6c:	50                   	push   %eax
f0112f6d:	e8 51 ec fe ff       	call   f0101bc3 <execute_command>
f0112f72:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112f75:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f7b:	bb 0d 7a 13 f0       	mov    $0xf0137a0d,%ebx
f0112f80:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f85:	89 c7                	mov    %eax,%edi
f0112f87:	89 de                	mov    %ebx,%esi
f0112f89:	89 d1                	mov    %edx,%ecx
f0112f8b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f8d:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f93:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f98:	b0 00                	mov    $0x0,%al
f0112f9a:	89 d7                	mov    %edx,%edi
f0112f9c:	f3 aa                	rep stos %al,%es:(%edi)
f0112f9e:	83 ec 0c             	sub    $0xc,%esp
f0112fa1:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112fa7:	50                   	push   %eax
f0112fa8:	e8 16 ec fe ff       	call   f0101bc3 <execute_command>
f0112fad:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112fb0:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112fb6:	bb 71 7a 13 f0       	mov    $0xf0137a71,%ebx
f0112fbb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fc0:	89 c7                	mov    %eax,%edi
f0112fc2:	89 de                	mov    %ebx,%esi
f0112fc4:	89 d1                	mov    %edx,%ecx
f0112fc6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fc8:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112fce:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fd3:	b0 00                	mov    $0x0,%al
f0112fd5:	89 d7                	mov    %edx,%edi
f0112fd7:	f3 aa                	rep stos %al,%es:(%edi)
f0112fd9:	83 ec 0c             	sub    $0xc,%esp
f0112fdc:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112fe2:	50                   	push   %eax
f0112fe3:	e8 db eb fe ff       	call   f0101bc3 <execute_command>
f0112fe8:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112feb:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112ff1:	bb d5 7a 13 f0       	mov    $0xf0137ad5,%ebx
f0112ff6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ffb:	89 c7                	mov    %eax,%edi
f0112ffd:	89 de                	mov    %ebx,%esi
f0112fff:	89 d1                	mov    %edx,%ecx
f0113001:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113003:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113009:	b9 55 00 00 00       	mov    $0x55,%ecx
f011300e:	b0 00                	mov    $0x0,%al
f0113010:	89 d7                	mov    %edx,%edi
f0113012:	f3 aa                	rep stos %al,%es:(%edi)
f0113014:	83 ec 0c             	sub    $0xc,%esp
f0113017:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011301d:	50                   	push   %eax
f011301e:	e8 a0 eb fe ff       	call   f0101bc3 <execute_command>
f0113023:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0113026:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011302c:	bb 39 7b 13 f0       	mov    $0xf0137b39,%ebx
f0113031:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113036:	89 c7                	mov    %eax,%edi
f0113038:	89 de                	mov    %ebx,%esi
f011303a:	89 d1                	mov    %edx,%ecx
f011303c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011303e:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113044:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113049:	b0 00                	mov    $0x0,%al
f011304b:	89 d7                	mov    %edx,%edi
f011304d:	f3 aa                	rep stos %al,%es:(%edi)
f011304f:	83 ec 0c             	sub    $0xc,%esp
f0113052:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113058:	50                   	push   %eax
f0113059:	e8 65 eb fe ff       	call   f0101bc3 <execute_command>
f011305e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0113061:	83 ec 04             	sub    $0x4,%esp
f0113064:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011306a:	50                   	push   %eax
f011306b:	68 47 76 13 f0       	push   $0xf0137647
f0113070:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113076:	50                   	push   %eax
f0113077:	e8 30 c3 01 00       	call   f012f3ac <strcconcat>
f011307c:	83 c4 10             	add    $0x10,%esp
f011307f:	83 ec 0c             	sub    $0xc,%esp
f0113082:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113088:	50                   	push   %eax
f0113089:	e8 35 eb fe ff       	call   f0101bc3 <execute_command>
f011308e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0113091:	83 ec 04             	sub    $0x4,%esp
f0113094:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011309a:	50                   	push   %eax
f011309b:	68 51 76 13 f0       	push   $0xf0137651
f01130a0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130a6:	50                   	push   %eax
f01130a7:	e8 00 c3 01 00       	call   f012f3ac <strcconcat>
f01130ac:	83 c4 10             	add    $0x10,%esp
f01130af:	83 ec 0c             	sub    $0xc,%esp
f01130b2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01130b8:	50                   	push   %eax
f01130b9:	e8 05 eb fe ff       	call   f0101bc3 <execute_command>
f01130be:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f01130c1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130c7:	bb 9d 7b 13 f0       	mov    $0xf0137b9d,%ebx
f01130cc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130d1:	89 c7                	mov    %eax,%edi
f01130d3:	89 de                	mov    %ebx,%esi
f01130d5:	89 d1                	mov    %edx,%ecx
f01130d7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130d9:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01130df:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130e4:	b0 00                	mov    $0x0,%al
f01130e6:	89 d7                	mov    %edx,%edi
f01130e8:	f3 aa                	rep stos %al,%es:(%edi)
f01130ea:	83 ec 0c             	sub    $0xc,%esp
f01130ed:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130f3:	50                   	push   %eax
f01130f4:	e8 ca ea fe ff       	call   f0101bc3 <execute_command>
f01130f9:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01130fc:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113102:	bb 01 7c 13 f0       	mov    $0xf0137c01,%ebx
f0113107:	ba 0f 00 00 00       	mov    $0xf,%edx
f011310c:	89 c7                	mov    %eax,%edi
f011310e:	89 de                	mov    %ebx,%esi
f0113110:	89 d1                	mov    %edx,%ecx
f0113112:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113114:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011311a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011311f:	b0 00                	mov    $0x0,%al
f0113121:	89 d7                	mov    %edx,%edi
f0113123:	f3 aa                	rep stos %al,%es:(%edi)
f0113125:	83 ec 0c             	sub    $0xc,%esp
f0113128:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011312e:	50                   	push   %eax
f011312f:	e8 8f ea fe ff       	call   f0101bc3 <execute_command>
f0113134:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113137:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011313d:	bb 65 7c 13 f0       	mov    $0xf0137c65,%ebx
f0113142:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113147:	89 c7                	mov    %eax,%edi
f0113149:	89 de                	mov    %ebx,%esi
f011314b:	89 d1                	mov    %edx,%ecx
f011314d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011314f:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113155:	b9 55 00 00 00       	mov    $0x55,%ecx
f011315a:	b0 00                	mov    $0x0,%al
f011315c:	89 d7                	mov    %edx,%edi
f011315e:	f3 aa                	rep stos %al,%es:(%edi)
f0113160:	83 ec 0c             	sub    $0xc,%esp
f0113163:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113169:	50                   	push   %eax
f011316a:	e8 54 ea fe ff       	call   f0101bc3 <execute_command>
f011316f:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0113172:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0113179:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0113180:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0113187:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f011318e:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0113195:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011319c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01131a3:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01131aa:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01131b1:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01131b8:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01131bf:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01131c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01131c9:	8a 00                	mov    (%eax),%al
f01131cb:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01131d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01131d4:	8a 00                	mov    (%eax),%al
f01131d6:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f01131dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01131df:	8a 00                	mov    (%eax),%al
f01131e1:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131e7:	e8 f2 97 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01131ec:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01131ef:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01131f2:	89 d0                	mov    %edx,%eax
f01131f4:	01 c0                	add    %eax,%eax
f01131f6:	01 d0                	add    %edx,%eax
f01131f8:	01 c0                	add    %eax,%eax
f01131fa:	50                   	push   %eax
f01131fb:	68 00 00 10 00       	push   $0x100000
f0113200:	6a 00                	push   $0x0
f0113202:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113205:	e8 9d 59 ff ff       	call   f0108ba7 <copy_paste_chunk>
f011320a:	83 c4 10             	add    $0x10,%esp
f011320d:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113210:	e8 c9 97 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113215:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113218:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011321f:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0113223:	75 08                	jne    f011322d <test_copy_paste_chunk+0x4a8>
f0113225:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113228:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011322b:	74 2b                	je     f0113258 <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011322d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113230:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113233:	83 ec 0c             	sub    $0xc,%esp
f0113236:	50                   	push   %eax
f0113237:	ff 75 88             	pushl  -0x78(%ebp)
f011323a:	68 60 76 13 f0       	push   $0xf0137660
f011323f:	68 3c 02 00 00       	push   $0x23c
f0113244:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113249:	e8 70 d1 fe ff       	call   f01003be <_warn>
f011324e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113251:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113258:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011325c:	74 04                	je     f0113262 <test_copy_paste_chunk+0x4dd>
f011325e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113262:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0113269:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011326c:	8a 00                	mov    (%eax),%al
f011326e:	3c 61                	cmp    $0x61,%al
f0113270:	75 75                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f0113272:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113275:	8a 00                	mov    (%eax),%al
f0113277:	3c 78                	cmp    $0x78,%al
f0113279:	75 6c                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f011327b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011327e:	8a 00                	mov    (%eax),%al
f0113280:	3c 62                	cmp    $0x62,%al
f0113282:	75 63                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f0113284:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113287:	8a 00                	mov    (%eax),%al
f0113289:	3c 79                	cmp    $0x79,%al
f011328b:	75 5a                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f011328d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113290:	8a 00                	mov    (%eax),%al
f0113292:	3c 63                	cmp    $0x63,%al
f0113294:	75 51                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f0113296:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113299:	8a 00                	mov    (%eax),%al
f011329b:	3c 7a                	cmp    $0x7a,%al
f011329d:	75 48                	jne    f01132e7 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f011329f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01132a2:	8a 00                	mov    (%eax),%al
f01132a4:	3c 64                	cmp    $0x64,%al
f01132a6:	75 3f                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f01132a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01132ab:	8a 10                	mov    (%eax),%dl
f01132ad:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01132b3:	38 c2                	cmp    %al,%dl
f01132b5:	75 30                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f01132b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01132ba:	8a 00                	mov    (%eax),%al
f01132bc:	3c 65                	cmp    $0x65,%al
f01132be:	75 27                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f01132c0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132c3:	8a 10                	mov    (%eax),%dl
f01132c5:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01132cb:	38 c2                	cmp    %al,%dl
f01132cd:	75 18                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f01132cf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01132d2:	8a 00                	mov    (%eax),%al
f01132d4:	3c 66                	cmp    $0x66,%al
f01132d6:	75 0f                	jne    f01132e7 <test_copy_paste_chunk+0x562>
f01132d8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01132db:	8a 10                	mov    (%eax),%dl
f01132dd:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01132e3:	38 c2                	cmp    %al,%dl
f01132e5:	74 21                	je     f0113308 <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01132e7:	83 ec 04             	sub    $0x4,%esp
f01132ea:	68 c4 76 13 f0       	push   $0xf01376c4
f01132ef:	68 45 02 00 00       	push   $0x245
f01132f4:	68 ce 6e 13 f0       	push   $0xf0136ece
f01132f9:	e8 c0 d0 fe ff       	call   f01003be <_warn>
f01132fe:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113301:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113308:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011330c:	74 04                	je     f0113312 <test_copy_paste_chunk+0x58d>
f011330e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113312:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113319:	83 ec 0c             	sub    $0xc,%esp
f011331c:	68 fe 76 13 f0       	push   $0xf01376fe
f0113321:	e8 0b db fe ff       	call   f0100e31 <cprintf>
f0113326:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113329:	83 ec 0c             	sub    $0xc,%esp
f011332c:	68 10 77 13 f0       	push   $0xf0137710
f0113331:	e8 fb da fe ff       	call   f0100e31 <cprintf>
f0113336:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0113339:	83 ec 04             	sub    $0x4,%esp
f011333c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113342:	50                   	push   %eax
f0113343:	68 46 77 13 f0       	push   $0xf0137746
f0113348:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011334e:	50                   	push   %eax
f011334f:	e8 58 c0 01 00       	call   f012f3ac <strcconcat>
f0113354:	83 c4 10             	add    $0x10,%esp
f0113357:	83 ec 0c             	sub    $0xc,%esp
f011335a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113360:	50                   	push   %eax
f0113361:	e8 5d e8 fe ff       	call   f0101bc3 <execute_command>
f0113366:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0113369:	83 ec 04             	sub    $0x4,%esp
f011336c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113372:	50                   	push   %eax
f0113373:	68 50 77 13 f0       	push   $0xf0137750
f0113378:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011337e:	50                   	push   %eax
f011337f:	e8 28 c0 01 00       	call   f012f3ac <strcconcat>
f0113384:	83 c4 10             	add    $0x10,%esp
f0113387:	83 ec 0c             	sub    $0xc,%esp
f011338a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113390:	50                   	push   %eax
f0113391:	e8 2d e8 fe ff       	call   f0101bc3 <execute_command>
f0113396:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0113399:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011339f:	bb c9 7c 13 f0       	mov    $0xf0137cc9,%ebx
f01133a4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133a9:	89 c7                	mov    %eax,%edi
f01133ab:	89 de                	mov    %ebx,%esi
f01133ad:	89 d1                	mov    %edx,%ecx
f01133af:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133b1:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01133b7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133bc:	b0 00                	mov    $0x0,%al
f01133be:	89 d7                	mov    %edx,%edi
f01133c0:	f3 aa                	rep stos %al,%es:(%edi)
f01133c2:	83 ec 0c             	sub    $0xc,%esp
f01133c5:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01133cb:	50                   	push   %eax
f01133cc:	e8 f2 e7 fe ff       	call   f0101bc3 <execute_command>
f01133d1:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01133d4:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01133da:	bb 2d 7d 13 f0       	mov    $0xf0137d2d,%ebx
f01133df:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133e4:	89 c7                	mov    %eax,%edi
f01133e6:	89 de                	mov    %ebx,%esi
f01133e8:	89 d1                	mov    %edx,%ecx
f01133ea:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133ec:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01133f2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133f7:	b0 00                	mov    $0x0,%al
f01133f9:	89 d7                	mov    %edx,%edi
f01133fb:	f3 aa                	rep stos %al,%es:(%edi)
f01133fd:	83 ec 0c             	sub    $0xc,%esp
f0113400:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113406:	50                   	push   %eax
f0113407:	e8 b7 e7 fe ff       	call   f0101bc3 <execute_command>
f011340c:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011340f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113415:	bb 91 7d 13 f0       	mov    $0xf0137d91,%ebx
f011341a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011341f:	89 c7                	mov    %eax,%edi
f0113421:	89 de                	mov    %ebx,%esi
f0113423:	89 d1                	mov    %edx,%ecx
f0113425:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113427:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011342d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113432:	b0 00                	mov    $0x0,%al
f0113434:	89 d7                	mov    %edx,%edi
f0113436:	f3 aa                	rep stos %al,%es:(%edi)
f0113438:	83 ec 0c             	sub    $0xc,%esp
f011343b:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113441:	50                   	push   %eax
f0113442:	e8 7c e7 fe ff       	call   f0101bc3 <execute_command>
f0113447:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011344a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113450:	bb f5 7d 13 f0       	mov    $0xf0137df5,%ebx
f0113455:	ba 0f 00 00 00       	mov    $0xf,%edx
f011345a:	89 c7                	mov    %eax,%edi
f011345c:	89 de                	mov    %ebx,%esi
f011345e:	89 d1                	mov    %edx,%ecx
f0113460:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113462:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113468:	b9 55 00 00 00       	mov    $0x55,%ecx
f011346d:	b0 00                	mov    $0x0,%al
f011346f:	89 d7                	mov    %edx,%edi
f0113471:	f3 aa                	rep stos %al,%es:(%edi)
f0113473:	83 ec 0c             	sub    $0xc,%esp
f0113476:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011347c:	50                   	push   %eax
f011347d:	e8 41 e7 fe ff       	call   f0101bc3 <execute_command>
f0113482:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113485:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011348b:	bb 59 7e 13 f0       	mov    $0xf0137e59,%ebx
f0113490:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113495:	89 c7                	mov    %eax,%edi
f0113497:	89 de                	mov    %ebx,%esi
f0113499:	89 d1                	mov    %edx,%ecx
f011349b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011349d:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01134a3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134a8:	b0 00                	mov    $0x0,%al
f01134aa:	89 d7                	mov    %edx,%edi
f01134ac:	f3 aa                	rep stos %al,%es:(%edi)
f01134ae:	83 ec 0c             	sub    $0xc,%esp
f01134b1:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01134b7:	50                   	push   %eax
f01134b8:	e8 06 e7 fe ff       	call   f0101bc3 <execute_command>
f01134bd:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01134c0:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01134c6:	bb bd 7e 13 f0       	mov    $0xf0137ebd,%ebx
f01134cb:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134d0:	89 c7                	mov    %eax,%edi
f01134d2:	89 de                	mov    %ebx,%esi
f01134d4:	89 d1                	mov    %edx,%ecx
f01134d6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134d8:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01134de:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134e3:	b0 00                	mov    $0x0,%al
f01134e5:	89 d7                	mov    %edx,%edi
f01134e7:	f3 aa                	rep stos %al,%es:(%edi)
f01134e9:	83 ec 0c             	sub    $0xc,%esp
f01134ec:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01134f2:	50                   	push   %eax
f01134f3:	e8 cb e6 fe ff       	call   f0101bc3 <execute_command>
f01134f8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01134fb:	83 ec 04             	sub    $0x4,%esp
f01134fe:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113504:	50                   	push   %eax
f0113505:	68 5a 77 13 f0       	push   $0xf013775a
f011350a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113510:	50                   	push   %eax
f0113511:	e8 96 be 01 00       	call   f012f3ac <strcconcat>
f0113516:	83 c4 10             	add    $0x10,%esp
f0113519:	83 ec 0c             	sub    $0xc,%esp
f011351c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113522:	50                   	push   %eax
f0113523:	e8 9b e6 fe ff       	call   f0101bc3 <execute_command>
f0113528:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011352b:	83 ec 04             	sub    $0x4,%esp
f011352e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113534:	50                   	push   %eax
f0113535:	68 64 77 13 f0       	push   $0xf0137764
f011353a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113540:	50                   	push   %eax
f0113541:	e8 66 be 01 00       	call   f012f3ac <strcconcat>
f0113546:	83 c4 10             	add    $0x10,%esp
f0113549:	83 ec 0c             	sub    $0xc,%esp
f011354c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113552:	50                   	push   %eax
f0113553:	e8 6b e6 fe ff       	call   f0101bc3 <execute_command>
f0113558:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011355b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113561:	bb 21 7f 13 f0       	mov    $0xf0137f21,%ebx
f0113566:	ba 0f 00 00 00       	mov    $0xf,%edx
f011356b:	89 c7                	mov    %eax,%edi
f011356d:	89 de                	mov    %ebx,%esi
f011356f:	89 d1                	mov    %edx,%ecx
f0113571:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113573:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113579:	b9 55 00 00 00       	mov    $0x55,%ecx
f011357e:	b0 00                	mov    $0x0,%al
f0113580:	89 d7                	mov    %edx,%edi
f0113582:	f3 aa                	rep stos %al,%es:(%edi)
f0113584:	83 ec 0c             	sub    $0xc,%esp
f0113587:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011358d:	50                   	push   %eax
f011358e:	e8 30 e6 fe ff       	call   f0101bc3 <execute_command>
f0113593:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113596:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011359c:	bb 85 7f 13 f0       	mov    $0xf0137f85,%ebx
f01135a1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135a6:	89 c7                	mov    %eax,%edi
f01135a8:	89 de                	mov    %ebx,%esi
f01135aa:	89 d1                	mov    %edx,%ecx
f01135ac:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135ae:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01135b4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135b9:	b0 00                	mov    $0x0,%al
f01135bb:	89 d7                	mov    %edx,%edi
f01135bd:	f3 aa                	rep stos %al,%es:(%edi)
f01135bf:	83 ec 0c             	sub    $0xc,%esp
f01135c2:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135c8:	50                   	push   %eax
f01135c9:	e8 f5 e5 fe ff       	call   f0101bc3 <execute_command>
f01135ce:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01135d1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135d7:	bb e9 7f 13 f0       	mov    $0xf0137fe9,%ebx
f01135dc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135e1:	89 c7                	mov    %eax,%edi
f01135e3:	89 de                	mov    %ebx,%esi
f01135e5:	89 d1                	mov    %edx,%ecx
f01135e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135e9:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01135ef:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135f4:	b0 00                	mov    $0x0,%al
f01135f6:	89 d7                	mov    %edx,%edi
f01135f8:	f3 aa                	rep stos %al,%es:(%edi)
f01135fa:	83 ec 0c             	sub    $0xc,%esp
f01135fd:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113603:	50                   	push   %eax
f0113604:	e8 ba e5 fe ff       	call   f0101bc3 <execute_command>
f0113609:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011360c:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113613:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011361a:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113621:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113628:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f011362f:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113636:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011363d:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113644:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011364b:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113652:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113659:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113660:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113663:	8a 00                	mov    (%eax),%al
f0113665:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011366b:	e8 6e 93 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113670:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113673:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113676:	89 d0                	mov    %edx,%eax
f0113678:	01 c0                	add    %eax,%eax
f011367a:	01 d0                	add    %edx,%eax
f011367c:	01 c0                	add    %eax,%eax
f011367e:	50                   	push   %eax
f011367f:	68 00 00 40 00       	push   $0x400000
f0113684:	68 00 00 20 00       	push   $0x200000
f0113689:	ff 75 d4             	pushl  -0x2c(%ebp)
f011368c:	e8 16 55 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113691:	83 c4 10             	add    $0x10,%esp
f0113694:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113697:	e8 42 93 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011369c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011369f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01136a6:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01136aa:	75 08                	jne    f01136b4 <test_copy_paste_chunk+0x92f>
f01136ac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136af:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01136b2:	74 2b                	je     f01136df <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01136b4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136b7:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01136ba:	83 ec 0c             	sub    $0xc,%esp
f01136bd:	50                   	push   %eax
f01136be:	ff 75 80             	pushl  -0x80(%ebp)
f01136c1:	68 70 77 13 f0       	push   $0xf0137770
f01136c6:	68 75 02 00 00       	push   $0x275
f01136cb:	68 ce 6e 13 f0       	push   $0xf0136ece
f01136d0:	e8 e9 cc fe ff       	call   f01003be <_warn>
f01136d5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01136d8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01136df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136e3:	74 04                	je     f01136e9 <test_copy_paste_chunk+0x964>
f01136e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136e9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01136f0:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01136f7:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01136fa:	83 ec 08             	sub    $0x8,%esp
f01136fd:	6a 01                	push   $0x1
f01136ff:	6a 07                	push   $0x7
f0113701:	6a 07                	push   $0x7
f0113703:	6a 07                	push   $0x7
f0113705:	6a 07                	push   $0x7
f0113707:	6a 01                	push   $0x1
f0113709:	68 00 20 00 00       	push   $0x2000
f011370e:	68 00 00 40 00       	push   $0x400000
f0113713:	68 00 00 20 00       	push   $0x200000
f0113718:	ff 75 d4             	pushl  -0x2c(%ebp)
f011371b:	e8 22 36 00 00       	call   f0116d42 <CCP>
f0113720:	83 c4 30             	add    $0x30,%esp
f0113723:	83 f8 01             	cmp    $0x1,%eax
f0113726:	74 2b                	je     f0113753 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113728:	83 ec 04             	sub    $0x4,%esp
f011372b:	68 c4 77 13 f0       	push   $0xf01377c4
f0113730:	68 7e 02 00 00       	push   $0x27e
f0113735:	68 ce 6e 13 f0       	push   $0xf0136ece
f011373a:	e8 7f cc fe ff       	call   f01003be <_warn>
f011373f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113742:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113749:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113750:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113753:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113757:	74 04                	je     f011375d <test_copy_paste_chunk+0x9d8>
f0113759:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011375d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113764:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113767:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011376a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011376d:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113770:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113773:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113776:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113779:	8a 00                	mov    (%eax),%al
f011377b:	3c 61                	cmp    $0x61,%al
f011377d:	75 69                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f011377f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113782:	8a 00                	mov    (%eax),%al
f0113784:	3c 61                	cmp    $0x61,%al
f0113786:	75 60                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f0113788:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011378b:	8a 00                	mov    (%eax),%al
f011378d:	3c 79                	cmp    $0x79,%al
f011378f:	75 57                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f0113791:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113794:	8a 00                	mov    (%eax),%al
f0113796:	3c 62                	cmp    $0x62,%al
f0113798:	75 4e                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f011379a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011379d:	8a 00                	mov    (%eax),%al
f011379f:	3c 63                	cmp    $0x63,%al
f01137a1:	75 45                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f01137a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01137a6:	8a 00                	mov    (%eax),%al
f01137a8:	3c 7a                	cmp    $0x7a,%al
f01137aa:	75 3c                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01137ac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01137af:	8a 00                	mov    (%eax),%al
f01137b1:	3c 77                	cmp    $0x77,%al
f01137b3:	75 33                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f01137b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01137b8:	8a 00                	mov    (%eax),%al
f01137ba:	3c 64                	cmp    $0x64,%al
f01137bc:	75 2a                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f01137be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01137c1:	8a 00                	mov    (%eax),%al
f01137c3:	3c 65                	cmp    $0x65,%al
f01137c5:	75 21                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f01137c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137ca:	8a 00                	mov    (%eax),%al
f01137cc:	3c 65                	cmp    $0x65,%al
f01137ce:	75 18                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f01137d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01137d3:	8a 00                	mov    (%eax),%al
f01137d5:	3c 66                	cmp    $0x66,%al
f01137d7:	75 0f                	jne    f01137e8 <test_copy_paste_chunk+0xa63>
f01137d9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01137dc:	8a 10                	mov    (%eax),%dl
f01137de:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01137e4:	38 c2                	cmp    %al,%dl
f01137e6:	74 21                	je     f0113809 <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01137e8:	83 ec 04             	sub    $0x4,%esp
f01137eb:	68 c4 76 13 f0       	push   $0xf01376c4
f01137f0:	68 8c 02 00 00       	push   $0x28c
f01137f5:	68 ce 6e 13 f0       	push   $0xf0136ece
f01137fa:	e8 bf cb fe ff       	call   f01003be <_warn>
f01137ff:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113802:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113809:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011380d:	74 04                	je     f0113813 <test_copy_paste_chunk+0xa8e>
f011380f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113813:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011381a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011381d:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113820:	e8 b9 91 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113825:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113828:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011382b:	89 c2                	mov    %eax,%edx
f011382d:	01 d2                	add    %edx,%edx
f011382f:	01 d0                	add    %edx,%eax
f0113831:	50                   	push   %eax
f0113832:	68 00 08 20 00       	push   $0x200800
f0113837:	68 00 08 40 00       	push   $0x400800
f011383c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011383f:	e8 63 53 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113844:	83 c4 10             	add    $0x10,%esp
f0113847:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011384a:	e8 8f 91 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011384f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113852:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113856:	75 08                	jne    f0113860 <test_copy_paste_chunk+0xadb>
f0113858:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011385b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011385e:	74 2b                	je     f011388b <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113860:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113863:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113866:	83 ec 0c             	sub    $0xc,%esp
f0113869:	50                   	push   %eax
f011386a:	ff 75 80             	pushl  -0x80(%ebp)
f011386d:	68 70 77 13 f0       	push   $0xf0137770
f0113872:	68 9c 02 00 00       	push   $0x29c
f0113877:	68 ce 6e 13 f0       	push   $0xf0136ece
f011387c:	e8 3d cb fe ff       	call   f01003be <_warn>
f0113881:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113884:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011388b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011388f:	74 04                	je     f0113895 <test_copy_paste_chunk+0xb10>
f0113891:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113895:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011389c:	83 ec 08             	sub    $0x8,%esp
f011389f:	6a 01                	push   $0x1
f01138a1:	6a 07                	push   $0x7
f01138a3:	6a 07                	push   $0x7
f01138a5:	6a 07                	push   $0x7
f01138a7:	6a 07                	push   $0x7
f01138a9:	6a 01                	push   $0x1
f01138ab:	68 00 20 00 00       	push   $0x2000
f01138b0:	68 00 00 20 00       	push   $0x200000
f01138b5:	68 00 00 40 00       	push   $0x400000
f01138ba:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138bd:	e8 80 34 00 00       	call   f0116d42 <CCP>
f01138c2:	83 c4 30             	add    $0x30,%esp
f01138c5:	83 f8 01             	cmp    $0x1,%eax
f01138c8:	74 21                	je     f01138eb <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01138ca:	83 ec 04             	sub    $0x4,%esp
f01138cd:	68 10 78 13 f0       	push   $0xf0137810
f01138d2:	68 a4 02 00 00       	push   $0x2a4
f01138d7:	68 ce 6e 13 f0       	push   $0xf0136ece
f01138dc:	e8 dd ca fe ff       	call   f01003be <_warn>
f01138e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01138eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138ef:	74 04                	je     f01138f5 <test_copy_paste_chunk+0xb70>
f01138f1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138f5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01138fc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138ff:	8a 00                	mov    (%eax),%al
f0113901:	3c 61                	cmp    $0x61,%al
f0113903:	75 69                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f0113905:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113908:	8a 00                	mov    (%eax),%al
f011390a:	3c 61                	cmp    $0x61,%al
f011390c:	75 60                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f011390e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113911:	8a 00                	mov    (%eax),%al
f0113913:	3c 79                	cmp    $0x79,%al
f0113915:	75 57                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f0113917:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011391a:	8a 00                	mov    (%eax),%al
f011391c:	3c 62                	cmp    $0x62,%al
f011391e:	75 4e                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f0113920:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113923:	8a 00                	mov    (%eax),%al
f0113925:	3c 7a                	cmp    $0x7a,%al
f0113927:	75 45                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f0113929:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011392c:	8a 00                	mov    (%eax),%al
f011392e:	3c 7a                	cmp    $0x7a,%al
f0113930:	75 3c                	jne    f011396e <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113932:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113935:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113937:	3c 64                	cmp    $0x64,%al
f0113939:	75 33                	jne    f011396e <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011393b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011393e:	8a 00                	mov    (%eax),%al
f0113940:	3c 64                	cmp    $0x64,%al
f0113942:	75 2a                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f0113944:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113947:	8a 00                	mov    (%eax),%al
f0113949:	3c 65                	cmp    $0x65,%al
f011394b:	75 21                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f011394d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113950:	8a 00                	mov    (%eax),%al
f0113952:	3c 78                	cmp    $0x78,%al
f0113954:	75 18                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f0113956:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113959:	8a 00                	mov    (%eax),%al
f011395b:	3c 66                	cmp    $0x66,%al
f011395d:	75 0f                	jne    f011396e <test_copy_paste_chunk+0xbe9>
f011395f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113962:	8a 10                	mov    (%eax),%dl
f0113964:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011396a:	38 c2                	cmp    %al,%dl
f011396c:	74 21                	je     f011398f <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011396e:	83 ec 04             	sub    $0x4,%esp
f0113971:	68 c4 76 13 f0       	push   $0xf01376c4
f0113976:	68 ad 02 00 00       	push   $0x2ad
f011397b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113980:	e8 39 ca fe ff       	call   f01003be <_warn>
f0113985:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113988:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011398f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113993:	74 04                	je     f0113999 <test_copy_paste_chunk+0xc14>
f0113995:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113999:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01139a0:	83 ec 0c             	sub    $0xc,%esp
f01139a3:	68 5b 78 13 f0       	push   $0xf013785b
f01139a8:	e8 84 d4 fe ff       	call   f0100e31 <cprintf>
f01139ad:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01139b0:	83 ec 0c             	sub    $0xc,%esp
f01139b3:	68 6c 78 13 f0       	push   $0xf013786c
f01139b8:	e8 74 d4 fe ff       	call   f0100e31 <cprintf>
f01139bd:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01139c0:	83 ec 04             	sub    $0x4,%esp
f01139c3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139c9:	50                   	push   %eax
f01139ca:	68 a0 78 13 f0       	push   $0xf01378a0
f01139cf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139d5:	50                   	push   %eax
f01139d6:	e8 d1 b9 01 00       	call   f012f3ac <strcconcat>
f01139db:	83 c4 10             	add    $0x10,%esp
f01139de:	83 ec 0c             	sub    $0xc,%esp
f01139e1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139e7:	50                   	push   %eax
f01139e8:	e8 d6 e1 fe ff       	call   f0101bc3 <execute_command>
f01139ed:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01139f0:	83 ec 04             	sub    $0x4,%esp
f01139f3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139f9:	50                   	push   %eax
f01139fa:	68 aa 78 13 f0       	push   $0xf01378aa
f01139ff:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113a05:	50                   	push   %eax
f0113a06:	e8 a1 b9 01 00       	call   f012f3ac <strcconcat>
f0113a0b:	83 c4 10             	add    $0x10,%esp
f0113a0e:	83 ec 0c             	sub    $0xc,%esp
f0113a11:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a17:	50                   	push   %eax
f0113a18:	e8 a6 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a1d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113a20:	83 ec 04             	sub    $0x4,%esp
f0113a23:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a29:	50                   	push   %eax
f0113a2a:	68 b4 78 13 f0       	push   $0xf01378b4
f0113a2f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113a35:	50                   	push   %eax
f0113a36:	e8 71 b9 01 00       	call   f012f3ac <strcconcat>
f0113a3b:	83 c4 10             	add    $0x10,%esp
f0113a3e:	83 ec 0c             	sub    $0xc,%esp
f0113a41:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a47:	50                   	push   %eax
f0113a48:	e8 76 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a4d:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113a50:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a56:	bb 4d 80 13 f0       	mov    $0xf013804d,%ebx
f0113a5b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a60:	89 c7                	mov    %eax,%edi
f0113a62:	89 de                	mov    %ebx,%esi
f0113a64:	89 d1                	mov    %edx,%ecx
f0113a66:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a68:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113a6e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a73:	b0 00                	mov    $0x0,%al
f0113a75:	89 d7                	mov    %edx,%edi
f0113a77:	f3 aa                	rep stos %al,%es:(%edi)
f0113a79:	83 ec 0c             	sub    $0xc,%esp
f0113a7c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a82:	50                   	push   %eax
f0113a83:	e8 3b e1 fe ff       	call   f0101bc3 <execute_command>
f0113a88:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113a8b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a91:	bb b1 80 13 f0       	mov    $0xf01380b1,%ebx
f0113a96:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a9b:	89 c7                	mov    %eax,%edi
f0113a9d:	89 de                	mov    %ebx,%esi
f0113a9f:	89 d1                	mov    %edx,%ecx
f0113aa1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113aa3:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113aa9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113aae:	b0 00                	mov    $0x0,%al
f0113ab0:	89 d7                	mov    %edx,%edi
f0113ab2:	f3 aa                	rep stos %al,%es:(%edi)
f0113ab4:	83 ec 0c             	sub    $0xc,%esp
f0113ab7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113abd:	50                   	push   %eax
f0113abe:	e8 00 e1 fe ff       	call   f0101bc3 <execute_command>
f0113ac3:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113ac6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113acc:	bb 15 81 13 f0       	mov    $0xf0138115,%ebx
f0113ad1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ad6:	89 c7                	mov    %eax,%edi
f0113ad8:	89 de                	mov    %ebx,%esi
f0113ada:	89 d1                	mov    %edx,%ecx
f0113adc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ade:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113ae4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113ae9:	b0 00                	mov    $0x0,%al
f0113aeb:	89 d7                	mov    %edx,%edi
f0113aed:	f3 aa                	rep stos %al,%es:(%edi)
f0113aef:	83 ec 0c             	sub    $0xc,%esp
f0113af2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113af8:	50                   	push   %eax
f0113af9:	e8 c5 e0 fe ff       	call   f0101bc3 <execute_command>
f0113afe:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b01:	e8 d8 8e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113b06:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113b09:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b0c:	89 d0                	mov    %edx,%eax
f0113b0e:	01 c0                	add    %eax,%eax
f0113b10:	01 d0                	add    %edx,%eax
f0113b12:	c1 e0 02             	shl    $0x2,%eax
f0113b15:	50                   	push   %eax
f0113b16:	68 00 00 90 00       	push   $0x900000
f0113b1b:	68 00 00 80 00       	push   $0x800000
f0113b20:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b23:	e8 7f 50 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113b28:	83 c4 10             	add    $0x10,%esp
f0113b2b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b31:	e8 a8 8e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113b36:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113b39:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113b40:	75 0b                	jne    f0113b4d <test_copy_paste_chunk+0xdc8>
f0113b42:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b45:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b48:	83 f8 03             	cmp    $0x3,%eax
f0113b4b:	74 2e                	je     f0113b7b <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113b4d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b50:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b53:	83 ec 0c             	sub    $0xc,%esp
f0113b56:	50                   	push   %eax
f0113b57:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113b5d:	68 70 77 13 f0       	push   $0xf0137770
f0113b62:	68 cb 02 00 00       	push   $0x2cb
f0113b67:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113b6c:	e8 4d c8 fe ff       	call   f01003be <_warn>
f0113b71:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b74:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b7b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b7f:	74 04                	je     f0113b85 <test_copy_paste_chunk+0xe00>
f0113b81:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b85:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113b8c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113b93:	83 ec 08             	sub    $0x8,%esp
f0113b96:	6a 01                	push   $0x1
f0113b98:	6a 07                	push   $0x7
f0113b9a:	6a 07                	push   $0x7
f0113b9c:	6a 07                	push   $0x7
f0113b9e:	6a 07                	push   $0x7
f0113ba0:	6a 01                	push   $0x1
f0113ba2:	68 00 30 00 00       	push   $0x3000
f0113ba7:	68 00 00 90 00       	push   $0x900000
f0113bac:	68 00 00 80 00       	push   $0x800000
f0113bb1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113bb4:	e8 89 31 00 00       	call   f0116d42 <CCP>
f0113bb9:	83 c4 30             	add    $0x30,%esp
f0113bbc:	83 f8 01             	cmp    $0x1,%eax
f0113bbf:	74 28                	je     f0113be9 <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113bc1:	83 ec 04             	sub    $0x4,%esp
f0113bc4:	68 10 78 13 f0       	push   $0xf0137810
f0113bc9:	68 d4 02 00 00       	push   $0x2d4
f0113bce:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113bd3:	e8 e6 c7 fe ff       	call   f01003be <_warn>
f0113bd8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113bdb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113be2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113be9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113bed:	74 04                	je     f0113bf3 <test_copy_paste_chunk+0xe6e>
f0113bef:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bf3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113bfa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113bfe:	0f 84 9e 00 00 00    	je     f0113ca2 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113c04:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113c0b:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113c12:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113c19:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113c20:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113c27:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113c2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c31:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113c34:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c37:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113c3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c3d:	8a 00                	mov    (%eax),%al
f0113c3f:	3c 61                	cmp    $0x61,%al
f0113c41:	75 2d                	jne    f0113c70 <test_copy_paste_chunk+0xeeb>
f0113c43:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c46:	8a 00                	mov    (%eax),%al
f0113c48:	3c 61                	cmp    $0x61,%al
f0113c4a:	75 24                	jne    f0113c70 <test_copy_paste_chunk+0xeeb>
f0113c4c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c4f:	8a 00                	mov    (%eax),%al
f0113c51:	3c 79                	cmp    $0x79,%al
f0113c53:	75 1b                	jne    f0113c70 <test_copy_paste_chunk+0xeeb>
f0113c55:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113c58:	8a 00                	mov    (%eax),%al
f0113c5a:	3c 62                	cmp    $0x62,%al
f0113c5c:	75 12                	jne    f0113c70 <test_copy_paste_chunk+0xeeb>
f0113c5e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113c61:	8a 00                	mov    (%eax),%al
f0113c63:	3c 63                	cmp    $0x63,%al
f0113c65:	75 09                	jne    f0113c70 <test_copy_paste_chunk+0xeeb>
f0113c67:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c6a:	8a 00                	mov    (%eax),%al
f0113c6c:	3c 7a                	cmp    $0x7a,%al
f0113c6e:	74 21                	je     f0113c91 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113c70:	83 ec 04             	sub    $0x4,%esp
f0113c73:	68 c4 76 13 f0       	push   $0xf01376c4
f0113c78:	68 e6 02 00 00       	push   $0x2e6
f0113c7d:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113c82:	e8 37 c7 fe ff       	call   f01003be <_warn>
f0113c87:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c8a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113c91:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c95:	74 04                	je     f0113c9b <test_copy_paste_chunk+0xf16>
f0113c97:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113c9b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ca2:	e8 37 8d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113ca7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113caa:	6a 00                	push   $0x0
f0113cac:	6a 02                	push   $0x2
f0113cae:	68 00 10 90 00       	push   $0x901000
f0113cb3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cb6:	e8 c9 2b 00 00       	call   f0116884 <SB>
f0113cbb:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113cbe:	6a 00                	push   $0x0
f0113cc0:	6a 02                	push   $0x2
f0113cc2:	68 00 20 90 00       	push   $0x902000
f0113cc7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cca:	e8 b5 2b 00 00       	call   f0116884 <SB>
f0113ccf:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113cd2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cd5:	c1 e0 03             	shl    $0x3,%eax
f0113cd8:	50                   	push   %eax
f0113cd9:	68 00 f0 bf 00       	push   $0xbff000
f0113cde:	68 00 10 90 00       	push   $0x901000
f0113ce3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ce6:	e8 bc 4e ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113ceb:	83 c4 10             	add    $0x10,%esp
f0113cee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113cf4:	e8 e5 8c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113cf9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113cfc:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113d03:	75 0b                	jne    f0113d10 <test_copy_paste_chunk+0xf8b>
f0113d05:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d08:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d0b:	83 f8 03             	cmp    $0x3,%eax
f0113d0e:	74 2e                	je     f0113d3e <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d10:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d13:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d16:	83 ec 0c             	sub    $0xc,%esp
f0113d19:	50                   	push   %eax
f0113d1a:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113d20:	68 70 77 13 f0       	push   $0xf0137770
f0113d25:	68 f6 02 00 00       	push   $0x2f6
f0113d2a:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113d2f:	e8 8a c6 fe ff       	call   f01003be <_warn>
f0113d34:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d37:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113d3e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d42:	74 04                	je     f0113d48 <test_copy_paste_chunk+0xfc3>
f0113d44:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d48:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113d4f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113d56:	83 ec 08             	sub    $0x8,%esp
f0113d59:	6a 01                	push   $0x1
f0113d5b:	6a 07                	push   $0x7
f0113d5d:	6a 03                	push   $0x3
f0113d5f:	6a 07                	push   $0x7
f0113d61:	6a 03                	push   $0x3
f0113d63:	6a 01                	push   $0x1
f0113d65:	68 00 20 00 00       	push   $0x2000
f0113d6a:	68 00 f0 bf 00       	push   $0xbff000
f0113d6f:	68 00 10 90 00       	push   $0x901000
f0113d74:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d77:	e8 c6 2f 00 00       	call   f0116d42 <CCP>
f0113d7c:	83 c4 30             	add    $0x30,%esp
f0113d7f:	83 f8 01             	cmp    $0x1,%eax
f0113d82:	74 28                	je     f0113dac <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113d84:	83 ec 04             	sub    $0x4,%esp
f0113d87:	68 10 78 13 f0       	push   $0xf0137810
f0113d8c:	68 ff 02 00 00       	push   $0x2ff
f0113d91:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113d96:	e8 23 c6 fe ff       	call   f01003be <_warn>
f0113d9b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d9e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113da5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113dac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113db0:	74 04                	je     f0113db6 <test_copy_paste_chunk+0x1031>
f0113db2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113db6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113dbd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113dc1:	74 72                	je     f0113e35 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113dc3:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113dca:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113dd1:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113dd8:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113ddf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113de2:	8a 00                	mov    (%eax),%al
f0113de4:	3c 62                	cmp    $0x62,%al
f0113de6:	75 1b                	jne    f0113e03 <test_copy_paste_chunk+0x107e>
f0113de8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113deb:	8a 00                	mov    (%eax),%al
f0113ded:	3c 62                	cmp    $0x62,%al
f0113def:	75 12                	jne    f0113e03 <test_copy_paste_chunk+0x107e>
f0113df1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113df4:	8a 00                	mov    (%eax),%al
f0113df6:	3c 7a                	cmp    $0x7a,%al
f0113df8:	75 09                	jne    f0113e03 <test_copy_paste_chunk+0x107e>
f0113dfa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113dfd:	8a 00                	mov    (%eax),%al
f0113dff:	3c 7a                	cmp    $0x7a,%al
f0113e01:	74 21                	je     f0113e24 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113e03:	83 ec 04             	sub    $0x4,%esp
f0113e06:	68 c4 76 13 f0       	push   $0xf01376c4
f0113e0b:	68 0b 03 00 00       	push   $0x30b
f0113e10:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113e15:	e8 a4 c5 fe ff       	call   f01003be <_warn>
f0113e1a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e1d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113e24:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e28:	74 04                	je     f0113e2e <test_copy_paste_chunk+0x10a9>
f0113e2a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e2e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113e35:	83 ec 0c             	sub    $0xc,%esp
f0113e38:	68 be 78 13 f0       	push   $0xf01378be
f0113e3d:	e8 ef cf fe ff       	call   f0100e31 <cprintf>
f0113e42:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113e45:	83 ec 08             	sub    $0x8,%esp
f0113e48:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113e4b:	68 d0 78 13 f0       	push   $0xf01378d0
f0113e50:	e8 dc cf fe ff       	call   f0100e31 <cprintf>
f0113e55:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113e58:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113e5c:	75 10                	jne    f0113e6e <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113e5e:	83 ec 0c             	sub    $0xc,%esp
f0113e61:	68 04 79 13 f0       	push   $0xf0137904
f0113e66:	e8 c6 cf fe ff       	call   f0100e31 <cprintf>
f0113e6b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113e6e:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0113e73:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113e76:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e79:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113e7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113e81:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113e84:	5b                   	pop    %ebx
f0113e85:	5e                   	pop    %esi
f0113e86:	5f                   	pop    %edi
f0113e87:	5d                   	pop    %ebp
f0113e88:	c3                   	ret    

f0113e89 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113e89:	55                   	push   %ebp
f0113e8a:	89 e5                	mov    %esp,%ebp
f0113e8c:	57                   	push   %edi
f0113e8d:	56                   	push   %esi
f0113e8e:	53                   	push   %ebx
f0113e8f:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113e95:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e9b:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f0113ea0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ea5:	89 c7                	mov    %eax,%edi
f0113ea7:	89 de                	mov    %ebx,%esi
f0113ea9:	89 d1                	mov    %edx,%ecx
f0113eab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ead:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113eb3:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113eb8:	b0 00                	mov    $0x0,%al
f0113eba:	89 d7                	mov    %edx,%edi
f0113ebc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113ebe:	6a 00                	push   $0x0
f0113ec0:	6a 0a                	push   $0xa
f0113ec2:	6a 14                	push   $0x14
f0113ec4:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113eca:	50                   	push   %eax
f0113ecb:	e8 fb 4d ff ff       	call   f0108ccb <env_create>
f0113ed0:	83 c4 10             	add    $0x10,%esp
f0113ed3:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113ed6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ed9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113edf:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113ee2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ee5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113eeb:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113eee:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113ef1:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113ef4:	83 ec 0c             	sub    $0xc,%esp
f0113ef7:	ff 75 cc             	pushl  -0x34(%ebp)
f0113efa:	e8 0f 2e 00 00       	call   f0116d0e <ClearUserSpace>
f0113eff:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113f02:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113f09:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113f10:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113f17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113f1b:	83 ec 0c             	sub    $0xc,%esp
f0113f1e:	68 7c 81 13 f0       	push   $0xf013817c
f0113f23:	e8 09 cf fe ff       	call   f0100e31 <cprintf>
f0113f28:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113f2b:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0113f32:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113f39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f3c:	8a 00                	mov    (%eax),%al
f0113f3e:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113f44:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f47:	8a 00                	mov    (%eax),%al
f0113f49:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f4f:	e8 8a 8a ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113f54:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113f57:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f5a:	89 d0                	mov    %edx,%eax
f0113f5c:	01 c0                	add    %eax,%eax
f0113f5e:	01 d0                	add    %edx,%eax
f0113f60:	01 c0                	add    %eax,%eax
f0113f62:	83 ec 0c             	sub    $0xc,%esp
f0113f65:	6a 02                	push   $0x2
f0113f67:	50                   	push   %eax
f0113f68:	68 00 40 10 f0       	push   $0xf0104000
f0113f6d:	68 00 00 10 f0       	push   $0xf0100000
f0113f72:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f75:	e8 47 4c ff ff       	call   f0108bc1 <share_chunk>
f0113f7a:	83 c4 20             	add    $0x20,%esp
f0113f7d:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f80:	e8 59 8a ff ff       	call   f010c9de <sys_calculate_free_frames>
f0113f85:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113f88:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113f8c:	75 08                	jne    f0113f96 <test_share_chunk+0x10d>
f0113f8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f91:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113f94:	74 28                	je     f0113fbe <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113f96:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f99:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f9c:	83 ec 0c             	sub    $0xc,%esp
f0113f9f:	50                   	push   %eax
f0113fa0:	ff 75 b0             	pushl  -0x50(%ebp)
f0113fa3:	68 a8 81 13 f0       	push   $0xf01381a8
f0113fa8:	68 47 03 00 00       	push   $0x347
f0113fad:	68 ce 6e 13 f0       	push   $0xf0136ece
f0113fb2:	e8 07 c4 fe ff       	call   f01003be <_warn>
f0113fb7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113fba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fbe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fc2:	74 04                	je     f0113fc8 <test_share_chunk+0x13f>
f0113fc4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fc8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113fcc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fcf:	c1 e0 03             	shl    $0x3,%eax
f0113fd2:	83 ec 08             	sub    $0x8,%esp
f0113fd5:	68 fd 00 00 00       	push   $0xfd
f0113fda:	6a 07                	push   $0x7
f0113fdc:	6a 03                	push   $0x3
f0113fde:	6a 07                	push   $0x7
f0113fe0:	6a 03                	push   $0x3
f0113fe2:	6a 01                	push   $0x1
f0113fe4:	50                   	push   %eax
f0113fe5:	68 00 40 10 f0       	push   $0xf0104000
f0113fea:	68 00 00 10 f0       	push   $0xf0100000
f0113fef:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ff2:	e8 4b 2d 00 00       	call   f0116d42 <CCP>
f0113ff7:	83 c4 30             	add    $0x30,%esp
f0113ffa:	85 c0                	test   %eax,%eax
f0113ffc:	75 1e                	jne    f011401c <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ffe:	83 ec 04             	sub    $0x4,%esp
f0114001:	68 04 82 13 f0       	push   $0xf0138204
f0114006:	68 4f 03 00 00       	push   $0x34f
f011400b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114010:	e8 a9 c3 fe ff       	call   f01003be <_warn>
f0114015:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114018:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011401c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114020:	74 04                	je     f0114026 <test_share_chunk+0x19d>
f0114022:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0114026:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114029:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f011402c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011402f:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0114032:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114035:	8a 00                	mov    (%eax),%al
f0114037:	3c 41                	cmp    $0x41,%al
f0114039:	75 09                	jne    f0114044 <test_share_chunk+0x1bb>
f011403b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011403e:	8a 00                	mov    (%eax),%al
f0114040:	3c 42                	cmp    $0x42,%al
f0114042:	74 1e                	je     f0114062 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114044:	83 ec 04             	sub    $0x4,%esp
f0114047:	68 4c 82 13 f0       	push   $0xf013824c
f011404c:	68 59 03 00 00       	push   $0x359
f0114051:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114056:	e8 63 c3 fe ff       	call   f01003be <_warn>
f011405b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011405e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114062:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114066:	74 04                	je     f011406c <test_share_chunk+0x1e3>
f0114068:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011406c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0114070:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0114076:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114079:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f011407b:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0114081:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114084:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0114086:	83 ec 0c             	sub    $0xc,%esp
f0114089:	68 81 82 13 f0       	push   $0xf0138281
f011408e:	e8 9e cd fe ff       	call   f0100e31 <cprintf>
f0114093:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0114096:	83 ec 0c             	sub    $0xc,%esp
f0114099:	68 90 82 13 f0       	push   $0xf0138290
f011409e:	e8 8e cd fe ff       	call   f0100e31 <cprintf>
f01140a3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01140a6:	e8 33 89 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01140ab:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01140ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140b1:	c1 e0 05             	shl    $0x5,%eax
f01140b4:	83 ec 0c             	sub    $0xc,%esp
f01140b7:	68 02 0e 00 00       	push   $0xe02
f01140bc:	50                   	push   %eax
f01140bd:	68 00 00 00 40       	push   $0x40000000
f01140c2:	68 00 00 00 f0       	push   $0xf0000000
f01140c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01140ca:	e8 f2 4a ff ff       	call   f0108bc1 <share_chunk>
f01140cf:	83 c4 20             	add    $0x20,%esp
f01140d2:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01140d5:	e8 04 89 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01140da:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f01140dd:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01140e1:	75 1f                	jne    f0114102 <test_share_chunk+0x279>
f01140e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140e6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140e9:	89 c1                	mov    %eax,%ecx
f01140eb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140ee:	c1 e0 05             	shl    $0x5,%eax
f01140f1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01140f4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01140fb:	99                   	cltd   
f01140fc:	f7 fb                	idiv   %ebx
f01140fe:	39 c1                	cmp    %eax,%ecx
f0114100:	74 28                	je     f011412a <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114102:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114105:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114108:	83 ec 0c             	sub    $0xc,%esp
f011410b:	50                   	push   %eax
f011410c:	ff 75 a8             	pushl  -0x58(%ebp)
f011410f:	68 cc 82 13 f0       	push   $0xf01382cc
f0114114:	68 71 03 00 00       	push   $0x371
f0114119:	68 ce 6e 13 f0       	push   $0xf0136ece
f011411e:	e8 9b c2 fe ff       	call   f01003be <_warn>
f0114123:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114126:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011412a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011412e:	74 04                	je     f0114134 <test_share_chunk+0x2ab>
f0114130:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114134:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114138:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011413f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114142:	c1 e0 05             	shl    $0x5,%eax
f0114145:	83 ec 08             	sub    $0x8,%esp
f0114148:	6a 02                	push   $0x2
f011414a:	6a 07                	push   $0x7
f011414c:	6a 03                	push   $0x3
f011414e:	68 07 0e 00 00       	push   $0xe07
f0114153:	68 03 0e 00 00       	push   $0xe03
f0114158:	6a ff                	push   $0xffffffff
f011415a:	50                   	push   %eax
f011415b:	68 00 00 00 40       	push   $0x40000000
f0114160:	68 00 00 00 f0       	push   $0xf0000000
f0114165:	ff 75 cc             	pushl  -0x34(%ebp)
f0114168:	e8 d5 2b 00 00       	call   f0116d42 <CCP>
f011416d:	83 c4 30             	add    $0x30,%esp
f0114170:	85 c0                	test   %eax,%eax
f0114172:	75 25                	jne    f0114199 <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114174:	83 ec 04             	sub    $0x4,%esp
f0114177:	68 04 82 13 f0       	push   $0xf0138204
f011417c:	68 7a 03 00 00       	push   $0x37a
f0114181:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114186:	e8 33 c2 fe ff       	call   f01003be <_warn>
f011418b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011418e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114192:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114199:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011419c:	89 d0                	mov    %edx,%eax
f011419e:	01 c0                	add    %eax,%eax
f01141a0:	01 d0                	add    %edx,%eax
f01141a2:	c1 e0 02             	shl    $0x2,%eax
f01141a5:	83 ec 08             	sub    $0x8,%esp
f01141a8:	6a 02                	push   $0x2
f01141aa:	6a 07                	push   $0x7
f01141ac:	6a 03                	push   $0x3
f01141ae:	68 07 0e 00 00       	push   $0xe07
f01141b3:	68 03 0e 00 00       	push   $0xe03
f01141b8:	6a 02                	push   $0x2
f01141ba:	50                   	push   %eax
f01141bb:	68 00 00 00 40       	push   $0x40000000
f01141c0:	68 00 00 00 f0       	push   $0xf0000000
f01141c5:	ff 75 cc             	pushl  -0x34(%ebp)
f01141c8:	e8 75 2b 00 00       	call   f0116d42 <CCP>
f01141cd:	83 c4 30             	add    $0x30,%esp
f01141d0:	85 c0                	test   %eax,%eax
f01141d2:	75 1e                	jne    f01141f2 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141d4:	83 ec 04             	sub    $0x4,%esp
f01141d7:	68 04 82 13 f0       	push   $0xf0138204
f01141dc:	68 81 03 00 00       	push   $0x381
f01141e1:	68 ce 6e 13 f0       	push   $0xf0136ece
f01141e6:	e8 d3 c1 fe ff       	call   f01003be <_warn>
f01141eb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141f6:	74 04                	je     f01141fc <test_share_chunk+0x373>
f01141f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0114200:	b8 5c e6 2d f0       	mov    $0xf02de65c,%eax
f0114205:	05 00 00 00 10       	add    $0x10000000,%eax
f011420a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011420d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114210:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114215:	83 ec 08             	sub    $0x8,%esp
f0114218:	6a 02                	push   $0x2
f011421a:	6a 07                	push   $0x7
f011421c:	6a 03                	push   $0x3
f011421e:	68 07 0e 00 00       	push   $0xe07
f0114223:	68 03 0e 00 00       	push   $0xe03
f0114228:	6a 02                	push   $0x2
f011422a:	50                   	push   %eax
f011422b:	68 00 00 0a 40       	push   $0x400a0000
f0114230:	68 00 00 0a f0       	push   $0xf00a0000
f0114235:	ff 75 cc             	pushl  -0x34(%ebp)
f0114238:	e8 05 2b 00 00       	call   f0116d42 <CCP>
f011423d:	83 c4 30             	add    $0x30,%esp
f0114240:	85 c0                	test   %eax,%eax
f0114242:	75 1e                	jne    f0114262 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114244:	83 ec 04             	sub    $0x4,%esp
f0114247:	68 04 82 13 f0       	push   $0xf0138204
f011424c:	68 8b 03 00 00       	push   $0x38b
f0114251:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114256:	e8 63 c1 fe ff       	call   f01003be <_warn>
f011425b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011425e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114262:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114266:	74 04                	je     f011426c <test_share_chunk+0x3e3>
f0114268:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011426c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114270:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114274:	0f 84 a4 00 00 00    	je     f011431e <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f011427a:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0114281:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114284:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0114287:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f011428e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114291:	8a 00                	mov    (%eax),%al
f0114293:	3c 41                	cmp    $0x41,%al
f0114295:	75 09                	jne    f01142a0 <test_share_chunk+0x417>
f0114297:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011429a:	8a 00                	mov    (%eax),%al
f011429c:	3c 41                	cmp    $0x41,%al
f011429e:	74 1e                	je     f01142be <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01142a0:	83 ec 04             	sub    $0x4,%esp
f01142a3:	68 4c 82 13 f0       	push   $0xf013824c
f01142a8:	68 98 03 00 00       	push   $0x398
f01142ad:	68 ce 6e 13 f0       	push   $0xf0136ece
f01142b2:	e8 07 c1 fe ff       	call   f01003be <_warn>
f01142b7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142c2:	74 04                	je     f01142c8 <test_share_chunk+0x43f>
f01142c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01142cc:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01142d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142d6:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01142d9:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f01142e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142e3:	8a 00                	mov    (%eax),%al
f01142e5:	3c 43                	cmp    $0x43,%al
f01142e7:	75 09                	jne    f01142f2 <test_share_chunk+0x469>
f01142e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142ec:	8a 00                	mov    (%eax),%al
f01142ee:	3c 43                	cmp    $0x43,%al
f01142f0:	74 1e                	je     f0114310 <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01142f2:	83 ec 04             	sub    $0x4,%esp
f01142f5:	68 4c 82 13 f0       	push   $0xf013824c
f01142fa:	68 a3 03 00 00       	push   $0x3a3
f01142ff:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114304:	e8 b5 c0 fe ff       	call   f01003be <_warn>
f0114309:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011430c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114310:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114314:	74 04                	je     f011431a <test_share_chunk+0x491>
f0114316:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011431a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011431e:	83 ec 0c             	sub    $0xc,%esp
f0114321:	68 5b 78 13 f0       	push   $0xf013785b
f0114326:	e8 06 cb fe ff       	call   f0100e31 <cprintf>
f011432b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f011432e:	83 ec 0c             	sub    $0xc,%esp
f0114331:	68 1c 83 13 f0       	push   $0xf013831c
f0114336:	e8 f6 ca fe ff       	call   f0100e31 <cprintf>
f011433b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011433e:	e8 9b 86 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114343:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114346:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114349:	89 d0                	mov    %edx,%eax
f011434b:	c1 e0 03             	shl    $0x3,%eax
f011434e:	01 d0                	add    %edx,%eax
f0114350:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0114357:	01 d0                	add    %edx,%eax
f0114359:	c1 e0 03             	shl    $0x3,%eax
f011435c:	83 ec 0c             	sub    $0xc,%esp
f011435f:	6a 06                	push   $0x6
f0114361:	50                   	push   %eax
f0114362:	6a 00                	push   $0x0
f0114364:	68 00 00 00 40       	push   $0x40000000
f0114369:	ff 75 cc             	pushl  -0x34(%ebp)
f011436c:	e8 50 48 ff ff       	call   f0108bc1 <share_chunk>
f0114371:	83 c4 20             	add    $0x20,%esp
f0114374:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114377:	e8 62 86 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011437c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011437f:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114383:	75 0b                	jne    f0114390 <test_share_chunk+0x507>
f0114385:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114388:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011438b:	83 f8 01             	cmp    $0x1,%eax
f011438e:	74 28                	je     f01143b8 <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114390:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114393:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114396:	83 ec 0c             	sub    $0xc,%esp
f0114399:	50                   	push   %eax
f011439a:	ff 75 a0             	pushl  -0x60(%ebp)
f011439d:	68 cc 82 13 f0       	push   $0xf01382cc
f01143a2:	68 b9 03 00 00       	push   $0x3b9
f01143a7:	68 ce 6e 13 f0       	push   $0xf0136ece
f01143ac:	e8 0d c0 fe ff       	call   f01003be <_warn>
f01143b1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143b4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143b8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143bc:	74 04                	je     f01143c2 <test_share_chunk+0x539>
f01143be:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143c2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01143c6:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143d0:	05 00 80 02 00       	add    $0x28000,%eax
f01143d5:	c1 e0 02             	shl    $0x2,%eax
f01143d8:	83 ec 08             	sub    $0x8,%esp
f01143db:	6a 02                	push   $0x2
f01143dd:	6a 07                	push   $0x7
f01143df:	6a 03                	push   $0x3
f01143e1:	6a 07                	push   $0x7
f01143e3:	6a 07                	push   $0x7
f01143e5:	6a ff                	push   $0xffffffff
f01143e7:	50                   	push   %eax
f01143e8:	6a 00                	push   $0x0
f01143ea:	68 00 00 00 40       	push   $0x40000000
f01143ef:	ff 75 cc             	pushl  -0x34(%ebp)
f01143f2:	e8 4b 29 00 00       	call   f0116d42 <CCP>
f01143f7:	83 c4 30             	add    $0x30,%esp
f01143fa:	85 c0                	test   %eax,%eax
f01143fc:	75 25                	jne    f0114423 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143fe:	83 ec 04             	sub    $0x4,%esp
f0114401:	68 04 82 13 f0       	push   $0xf0138204
f0114406:	68 c2 03 00 00       	push   $0x3c2
f011440b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114410:	e8 a9 bf fe ff       	call   f01003be <_warn>
f0114415:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114418:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011441c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114423:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114426:	89 d0                	mov    %edx,%eax
f0114428:	01 c0                	add    %eax,%eax
f011442a:	01 d0                	add    %edx,%eax
f011442c:	c1 e0 02             	shl    $0x2,%eax
f011442f:	83 ec 08             	sub    $0x8,%esp
f0114432:	6a 02                	push   $0x2
f0114434:	6a 07                	push   $0x7
f0114436:	6a 03                	push   $0x3
f0114438:	6a 07                	push   $0x7
f011443a:	6a 07                	push   $0x7
f011443c:	6a 03                	push   $0x3
f011443e:	50                   	push   %eax
f011443f:	6a 00                	push   $0x0
f0114441:	68 00 00 00 40       	push   $0x40000000
f0114446:	ff 75 cc             	pushl  -0x34(%ebp)
f0114449:	e8 f4 28 00 00       	call   f0116d42 <CCP>
f011444e:	83 c4 30             	add    $0x30,%esp
f0114451:	85 c0                	test   %eax,%eax
f0114453:	75 1e                	jne    f0114473 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114455:	83 ec 04             	sub    $0x4,%esp
f0114458:	68 04 82 13 f0       	push   $0xf0138204
f011445d:	68 c9 03 00 00       	push   $0x3c9
f0114462:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114467:	e8 52 bf fe ff       	call   f01003be <_warn>
f011446c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011446f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114473:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114477:	74 04                	je     f011447d <test_share_chunk+0x5f4>
f0114479:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011447d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114481:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114484:	89 d0                	mov    %edx,%eax
f0114486:	01 c0                	add    %eax,%eax
f0114488:	01 d0                	add    %edx,%eax
f011448a:	c1 e0 02             	shl    $0x2,%eax
f011448d:	f7 d8                	neg    %eax
f011448f:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114494:	83 ec 08             	sub    $0x8,%esp
f0114497:	6a 02                	push   $0x2
f0114499:	6a 07                	push   $0x7
f011449b:	6a 03                	push   $0x3
f011449d:	6a 07                	push   $0x7
f011449f:	6a 07                	push   $0x7
f01144a1:	6a 02                	push   $0x2
f01144a3:	50                   	push   %eax
f01144a4:	68 00 30 00 00       	push   $0x3000
f01144a9:	68 00 30 00 40       	push   $0x40003000
f01144ae:	ff 75 cc             	pushl  -0x34(%ebp)
f01144b1:	e8 8c 28 00 00       	call   f0116d42 <CCP>
f01144b6:	83 c4 30             	add    $0x30,%esp
f01144b9:	85 c0                	test   %eax,%eax
f01144bb:	75 1e                	jne    f01144db <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144bd:	83 ec 04             	sub    $0x4,%esp
f01144c0:	68 04 82 13 f0       	push   $0xf0138204
f01144c5:	68 d1 03 00 00       	push   $0x3d1
f01144ca:	68 ce 6e 13 f0       	push   $0xf0136ece
f01144cf:	e8 ea be fe ff       	call   f01003be <_warn>
f01144d4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144df:	74 04                	je     f01144e5 <test_share_chunk+0x65c>
f01144e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01144e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144ec:	c1 e0 02             	shl    $0x2,%eax
f01144ef:	83 ec 08             	sub    $0x8,%esp
f01144f2:	6a 02                	push   $0x2
f01144f4:	6a 07                	push   $0x7
f01144f6:	6a 03                	push   $0x3
f01144f8:	6a 07                	push   $0x7
f01144fa:	6a 07                	push   $0x7
f01144fc:	6a 03                	push   $0x3
f01144fe:	50                   	push   %eax
f01144ff:	68 00 00 0a 00       	push   $0xa0000
f0114504:	68 00 00 0a 40       	push   $0x400a0000
f0114509:	ff 75 cc             	pushl  -0x34(%ebp)
f011450c:	e8 31 28 00 00       	call   f0116d42 <CCP>
f0114511:	83 c4 30             	add    $0x30,%esp
f0114514:	85 c0                	test   %eax,%eax
f0114516:	75 1e                	jne    f0114536 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114518:	83 ec 04             	sub    $0x4,%esp
f011451b:	68 04 82 13 f0       	push   $0xf0138204
f0114520:	68 d9 03 00 00       	push   $0x3d9
f0114525:	68 ce 6e 13 f0       	push   $0xf0136ece
f011452a:	e8 8f be fe ff       	call   f01003be <_warn>
f011452f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114532:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114536:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011453a:	74 04                	je     f0114540 <test_share_chunk+0x6b7>
f011453c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114540:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114544:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114548:	0f 84 92 00 00 00    	je     f01145e0 <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f011454e:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114555:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011455c:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114563:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011456a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011456d:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114570:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114577:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011457e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114581:	8a 00                	mov    (%eax),%al
f0114583:	3c 41                	cmp    $0x41,%al
f0114585:	75 2d                	jne    f01145b4 <test_share_chunk+0x72b>
f0114587:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011458a:	8a 00                	mov    (%eax),%al
f011458c:	3c 41                	cmp    $0x41,%al
f011458e:	75 24                	jne    f01145b4 <test_share_chunk+0x72b>
f0114590:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114593:	8a 00                	mov    (%eax),%al
f0114595:	3c 41                	cmp    $0x41,%al
f0114597:	75 1b                	jne    f01145b4 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114599:	8b 45 98             	mov    -0x68(%ebp),%eax
f011459c:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f011459e:	3c 44                	cmp    $0x44,%al
f01145a0:	75 12                	jne    f01145b4 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01145a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01145a5:	8a 00                	mov    (%eax),%al
f01145a7:	3c 44                	cmp    $0x44,%al
f01145a9:	75 09                	jne    f01145b4 <test_share_chunk+0x72b>
f01145ab:	8b 45 90             	mov    -0x70(%ebp),%eax
f01145ae:	8a 00                	mov    (%eax),%al
f01145b0:	3c 44                	cmp    $0x44,%al
f01145b2:	74 1e                	je     f01145d2 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01145b4:	83 ec 04             	sub    $0x4,%esp
f01145b7:	68 4c 82 13 f0       	push   $0xf013824c
f01145bc:	68 eb 03 00 00       	push   $0x3eb
f01145c1:	68 ce 6e 13 f0       	push   $0xf0136ece
f01145c6:	e8 f3 bd fe ff       	call   f01003be <_warn>
f01145cb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01145ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01145d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145d6:	74 04                	je     f01145dc <test_share_chunk+0x753>
f01145d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01145dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01145e0:	83 ec 0c             	sub    $0xc,%esp
f01145e3:	68 be 78 13 f0       	push   $0xf01378be
f01145e8:	e8 44 c8 fe ff       	call   f0100e31 <cprintf>
f01145ed:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01145f0:	83 ec 0c             	sub    $0xc,%esp
f01145f3:	68 58 83 13 f0       	push   $0xf0138358
f01145f8:	e8 34 c8 fe ff       	call   f0100e31 <cprintf>
f01145fd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114600:	e8 d9 83 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114605:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114608:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011460b:	89 d0                	mov    %edx,%eax
f011460d:	01 c0                	add    %eax,%eax
f011460f:	01 d0                	add    %edx,%eax
f0114611:	01 c0                	add    %eax,%eax
f0114613:	01 d0                	add    %edx,%eax
f0114615:	83 ec 0c             	sub    $0xc,%esp
f0114618:	6a 04                	push   $0x4
f011461a:	50                   	push   %eax
f011461b:	68 00 fc 3f 00       	push   $0x3ffc00
f0114620:	68 00 fc 09 00       	push   $0x9fc00
f0114625:	ff 75 cc             	pushl  -0x34(%ebp)
f0114628:	e8 94 45 ff ff       	call   f0108bc1 <share_chunk>
f011462d:	83 c4 20             	add    $0x20,%esp
f0114630:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114633:	e8 a6 83 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114638:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011463b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011463f:	75 0b                	jne    f011464c <test_share_chunk+0x7c3>
f0114641:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114644:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114647:	83 f8 01             	cmp    $0x1,%eax
f011464a:	74 28                	je     f0114674 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011464c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011464f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114652:	83 ec 0c             	sub    $0xc,%esp
f0114655:	50                   	push   %eax
f0114656:	ff 75 8c             	pushl  -0x74(%ebp)
f0114659:	68 cc 82 13 f0       	push   $0xf01382cc
f011465e:	68 01 04 00 00       	push   $0x401
f0114663:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114668:	e8 51 bd fe ff       	call   f01003be <_warn>
f011466d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114670:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114674:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114678:	74 04                	je     f011467e <test_share_chunk+0x7f5>
f011467a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011467e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114682:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114689:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011468c:	89 d0                	mov    %edx,%eax
f011468e:	01 c0                	add    %eax,%eax
f0114690:	01 d0                	add    %edx,%eax
f0114692:	c1 e0 02             	shl    $0x2,%eax
f0114695:	83 ec 08             	sub    $0x8,%esp
f0114698:	6a 02                	push   $0x2
f011469a:	6a 07                	push   $0x7
f011469c:	6a 07                	push   $0x7
f011469e:	6a 07                	push   $0x7
f01146a0:	6a 05                	push   $0x5
f01146a2:	6a ff                	push   $0xffffffff
f01146a4:	50                   	push   %eax
f01146a5:	68 00 f0 3f 00       	push   $0x3ff000
f01146aa:	68 00 f0 09 00       	push   $0x9f000
f01146af:	ff 75 cc             	pushl  -0x34(%ebp)
f01146b2:	e8 8b 26 00 00       	call   f0116d42 <CCP>
f01146b7:	83 c4 30             	add    $0x30,%esp
f01146ba:	85 c0                	test   %eax,%eax
f01146bc:	75 25                	jne    f01146e3 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146be:	83 ec 04             	sub    $0x4,%esp
f01146c1:	68 04 82 13 f0       	push   $0xf0138204
f01146c6:	68 0a 04 00 00       	push   $0x40a
f01146cb:	68 ce 6e 13 f0       	push   $0xf0136ece
f01146d0:	e8 e9 bc fe ff       	call   f01003be <_warn>
f01146d5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01146dc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01146e3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146e7:	74 04                	je     f01146ed <test_share_chunk+0x864>
f01146e9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146ed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01146f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146f4:	c1 e0 02             	shl    $0x2,%eax
f01146f7:	83 ec 08             	sub    $0x8,%esp
f01146fa:	6a 02                	push   $0x2
f01146fc:	6a 07                	push   $0x7
f01146fe:	6a 07                	push   $0x7
f0114700:	6a 07                	push   $0x7
f0114702:	6a 05                	push   $0x5
f0114704:	6a 03                	push   $0x3
f0114706:	50                   	push   %eax
f0114707:	68 00 f0 3f 00       	push   $0x3ff000
f011470c:	68 00 f0 09 00       	push   $0x9f000
f0114711:	ff 75 cc             	pushl  -0x34(%ebp)
f0114714:	e8 29 26 00 00       	call   f0116d42 <CCP>
f0114719:	83 c4 30             	add    $0x30,%esp
f011471c:	85 c0                	test   %eax,%eax
f011471e:	75 1e                	jne    f011473e <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114720:	83 ec 04             	sub    $0x4,%esp
f0114723:	68 04 82 13 f0       	push   $0xf0138204
f0114728:	68 13 04 00 00       	push   $0x413
f011472d:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114732:	e8 87 bc fe ff       	call   f01003be <_warn>
f0114737:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011473a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011473e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114742:	74 04                	je     f0114748 <test_share_chunk+0x8bf>
f0114744:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114748:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011474c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011474f:	c1 e0 03             	shl    $0x3,%eax
f0114752:	83 ec 08             	sub    $0x8,%esp
f0114755:	6a 02                	push   $0x2
f0114757:	6a 07                	push   $0x7
f0114759:	6a 07                	push   $0x7
f011475b:	6a 07                	push   $0x7
f011475d:	6a 05                	push   $0x5
f011475f:	6a 04                	push   $0x4
f0114761:	50                   	push   %eax
f0114762:	68 00 00 40 00       	push   $0x400000
f0114767:	68 00 00 0a 00       	push   $0xa0000
f011476c:	ff 75 cc             	pushl  -0x34(%ebp)
f011476f:	e8 ce 25 00 00       	call   f0116d42 <CCP>
f0114774:	83 c4 30             	add    $0x30,%esp
f0114777:	85 c0                	test   %eax,%eax
f0114779:	75 1e                	jne    f0114799 <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011477b:	83 ec 04             	sub    $0x4,%esp
f011477e:	68 04 82 13 f0       	push   $0xf0138204
f0114783:	68 1b 04 00 00       	push   $0x41b
f0114788:	68 ce 6e 13 f0       	push   $0xf0136ece
f011478d:	e8 2c bc fe ff       	call   f01003be <_warn>
f0114792:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114795:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114799:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011479d:	74 04                	je     f01147a3 <test_share_chunk+0x91a>
f011479f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147a3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01147a7:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01147ab:	0f 84 b2 00 00 00    	je     f0114863 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f01147b1:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01147b8:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01147bf:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01147c6:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01147cd:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01147d4:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01147db:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01147e2:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01147e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147ec:	8a 00                	mov    (%eax),%al
f01147ee:	3c 44                	cmp    $0x44,%al
f01147f0:	75 45                	jne    f0114837 <test_share_chunk+0x9ae>
f01147f2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01147f5:	8a 00                	mov    (%eax),%al
f01147f7:	3c 44                	cmp    $0x44,%al
f01147f9:	75 3c                	jne    f0114837 <test_share_chunk+0x9ae>
f01147fb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01147fe:	8a 00                	mov    (%eax),%al
f0114800:	3c 44                	cmp    $0x44,%al
f0114802:	75 33                	jne    f0114837 <test_share_chunk+0x9ae>
f0114804:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114807:	8a 00                	mov    (%eax),%al
f0114809:	3c 44                	cmp    $0x44,%al
f011480b:	75 2a                	jne    f0114837 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011480d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114810:	8a 10                	mov    (%eax),%dl
f0114812:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114815:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114817:	38 c2                	cmp    %al,%dl
f0114819:	75 1c                	jne    f0114837 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011481b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011481e:	8a 10                	mov    (%eax),%dl
f0114820:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114823:	8a 00                	mov    (%eax),%al
f0114825:	38 c2                	cmp    %al,%dl
f0114827:	75 0e                	jne    f0114837 <test_share_chunk+0x9ae>
f0114829:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011482c:	8a 10                	mov    (%eax),%dl
f011482e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114831:	8a 00                	mov    (%eax),%al
f0114833:	38 c2                	cmp    %al,%dl
f0114835:	74 1e                	je     f0114855 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114837:	83 ec 04             	sub    $0x4,%esp
f011483a:	68 4c 82 13 f0       	push   $0xf013824c
f011483f:	68 30 04 00 00       	push   $0x430
f0114844:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114849:	e8 70 bb fe ff       	call   f01003be <_warn>
f011484e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114851:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114855:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114859:	74 04                	je     f011485f <test_share_chunk+0x9d6>
f011485b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011485f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114863:	83 ec 0c             	sub    $0xc,%esp
f0114866:	68 90 83 13 f0       	push   $0xf0138390
f011486b:	e8 c1 c5 fe ff       	call   f0100e31 <cprintf>
f0114870:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114873:	83 ec 08             	sub    $0x8,%esp
f0114876:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114879:	68 a0 83 13 f0       	push   $0xf01383a0
f011487e:	e8 ae c5 fe ff       	call   f0100e31 <cprintf>
f0114883:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114886:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011488a:	75 10                	jne    f011489c <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011488c:	83 ec 0c             	sub    $0xc,%esp
f011488f:	68 d0 83 13 f0       	push   $0xf01383d0
f0114894:	e8 98 c5 fe ff       	call   f0100e31 <cprintf>
f0114899:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011489c:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01148a1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01148a4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148a7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01148aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01148af:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01148b2:	5b                   	pop    %ebx
f01148b3:	5e                   	pop    %esi
f01148b4:	5f                   	pop    %edi
f01148b5:	5d                   	pop    %ebp
f01148b6:	c3                   	ret    

f01148b7 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01148b7:	55                   	push   %ebp
f01148b8:	89 e5                	mov    %esp,%ebp
f01148ba:	57                   	push   %edi
f01148bb:	56                   	push   %esi
f01148bc:	53                   	push   %ebx
f01148bd:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01148c3:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01148c9:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f01148ce:	ba 0f 00 00 00       	mov    $0xf,%edx
f01148d3:	89 c7                	mov    %eax,%edi
f01148d5:	89 de                	mov    %ebx,%esi
f01148d7:	89 d1                	mov    %edx,%ecx
f01148d9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01148db:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01148e1:	b9 23 00 00 00       	mov    $0x23,%ecx
f01148e6:	b0 00                	mov    $0x0,%al
f01148e8:	89 d7                	mov    %edx,%edi
f01148ea:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01148ec:	6a 00                	push   $0x0
f01148ee:	6a 0a                	push   $0xa
f01148f0:	6a 14                	push   $0x14
f01148f2:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01148f8:	50                   	push   %eax
f01148f9:	e8 cd 43 ff ff       	call   f0108ccb <env_create>
f01148fe:	83 c4 10             	add    $0x10,%esp
f0114901:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114904:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114907:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011490d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114910:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114913:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114919:	89 45 90             	mov    %eax,-0x70(%ebp)
f011491c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011491f:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114922:	83 ec 0c             	sub    $0xc,%esp
f0114925:	ff 75 cc             	pushl  -0x34(%ebp)
f0114928:	e8 e1 23 00 00       	call   f0116d0e <ClearUserSpace>
f011492d:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114930:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114937:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011493e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114945:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114949:	83 ec 0c             	sub    $0xc,%esp
f011494c:	68 0c 84 13 f0       	push   $0xf013840c
f0114951:	e8 db c4 fe ff       	call   f0100e31 <cprintf>
f0114956:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114959:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114960:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114967:	eb 03                	jmp    f011496c <test_allocate_chunk+0xb5>
f0114969:	ff 4d e4             	decl   -0x1c(%ebp)
f011496c:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114973:	76 09                	jbe    f011497e <test_allocate_chunk+0xc7>
f0114975:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114978:	8a 00                	mov    (%eax),%al
f011497a:	84 c0                	test   %al,%al
f011497c:	74 eb                	je     f0114969 <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f011497e:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114985:	75 06                	jne    f011498d <test_allocate_chunk+0xd6>
f0114987:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011498a:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f011498d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114990:	8a 00                	mov    (%eax),%al
f0114992:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114998:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011499b:	8a 00                	mov    (%eax),%al
f011499d:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f01149a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01149a6:	8a 00                	mov    (%eax),%al
f01149a8:	0f be c0             	movsbl %al,%eax
f01149ab:	83 ec 08             	sub    $0x8,%esp
f01149ae:	50                   	push   %eax
f01149af:	68 36 84 13 f0       	push   $0xf0138436
f01149b4:	e8 78 c4 fe ff       	call   f0100e31 <cprintf>
f01149b9:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f01149bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01149bf:	8a 00                	mov    (%eax),%al
f01149c1:	0f be c0             	movsbl %al,%eax
f01149c4:	83 ec 08             	sub    $0x8,%esp
f01149c7:	50                   	push   %eax
f01149c8:	68 42 84 13 f0       	push   $0xf0138442
f01149cd:	e8 5f c4 fe ff       	call   f0100e31 <cprintf>
f01149d2:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01149d5:	83 ec 08             	sub    $0x8,%esp
f01149d8:	68 00 f0 bf ef       	push   $0xefbff000
f01149dd:	ff 75 cc             	pushl  -0x34(%ebp)
f01149e0:	e8 90 22 00 00       	call   f0116c75 <GP>
f01149e5:	83 c4 10             	add    $0x10,%esp
f01149e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149eb:	e8 ee 7f ff ff       	call   f010c9de <sys_calculate_free_frames>
f01149f0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01149f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149f6:	c1 e0 02             	shl    $0x2,%eax
f01149f9:	6a 02                	push   $0x2
f01149fb:	50                   	push   %eax
f01149fc:	68 00 f0 bf ef       	push   $0xefbff000
f0114a01:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a04:	e8 d2 41 ff ff       	call   f0108bdb <allocate_chunk>
f0114a09:	83 c4 10             	add    $0x10,%esp
f0114a0c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a0f:	e8 ca 7f ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114a14:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114a17:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114a1b:	75 08                	jne    f0114a25 <test_allocate_chunk+0x16e>
f0114a1d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a20:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114a23:	74 2a                	je     f0114a4f <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114a25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a28:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a2b:	83 ec 08             	sub    $0x8,%esp
f0114a2e:	6a 00                	push   $0x0
f0114a30:	50                   	push   %eax
f0114a31:	ff 75 b0             	pushl  -0x50(%ebp)
f0114a34:	68 50 84 13 f0       	push   $0xf0138450
f0114a39:	68 70 04 00 00       	push   $0x470
f0114a3e:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114a43:	e8 76 b9 fe ff       	call   f01003be <_warn>
f0114a48:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a4b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114a4f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114a53:	74 04                	je     f0114a59 <test_allocate_chunk+0x1a2>
f0114a55:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114a59:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a5d:	e8 7c 7f ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114a62:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114a65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a68:	01 c0                	add    %eax,%eax
f0114a6a:	89 c1                	mov    %eax,%ecx
f0114a6c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a6f:	89 d0                	mov    %edx,%eax
f0114a71:	c1 e0 02             	shl    $0x2,%eax
f0114a74:	01 d0                	add    %edx,%eax
f0114a76:	f7 d8                	neg    %eax
f0114a78:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114a7d:	6a 02                	push   $0x2
f0114a7f:	51                   	push   %ecx
f0114a80:	50                   	push   %eax
f0114a81:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a84:	e8 52 41 ff ff       	call   f0108bdb <allocate_chunk>
f0114a89:	83 c4 10             	add    $0x10,%esp
f0114a8c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a8f:	e8 4a 7f ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114a94:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114a97:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114a9b:	75 08                	jne    f0114aa5 <test_allocate_chunk+0x1ee>
f0114a9d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114aa0:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114aa3:	74 2a                	je     f0114acf <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114aa5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114aa8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114aab:	83 ec 08             	sub    $0x8,%esp
f0114aae:	6a 00                	push   $0x0
f0114ab0:	50                   	push   %eax
f0114ab1:	ff 75 b0             	pushl  -0x50(%ebp)
f0114ab4:	68 50 84 13 f0       	push   $0xf0138450
f0114ab9:	68 7e 04 00 00       	push   $0x47e
f0114abe:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114ac3:	e8 f6 b8 fe ff       	call   f01003be <_warn>
f0114ac8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114acb:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114acf:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ad3:	74 04                	je     f0114ad9 <test_allocate_chunk+0x222>
f0114ad5:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114ad9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114add:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ae0:	c1 e0 02             	shl    $0x2,%eax
f0114ae3:	83 ec 08             	sub    $0x8,%esp
f0114ae6:	6a 03                	push   $0x3
f0114ae8:	6a 00                	push   $0x0
f0114aea:	6a 00                	push   $0x0
f0114aec:	68 ff 0f 00 00       	push   $0xfff
f0114af1:	ff 75 b8             	pushl  -0x48(%ebp)
f0114af4:	6a 01                	push   $0x1
f0114af6:	50                   	push   %eax
f0114af7:	68 00 f0 bf ef       	push   $0xefbff000
f0114afc:	6a 00                	push   $0x0
f0114afe:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b01:	e8 3c 22 00 00       	call   f0116d42 <CCP>
f0114b06:	83 c4 30             	add    $0x30,%esp
f0114b09:	85 c0                	test   %eax,%eax
f0114b0b:	75 1e                	jne    f0114b2b <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114b0d:	83 ec 04             	sub    $0x4,%esp
f0114b10:	68 b8 84 13 f0       	push   $0xf01384b8
f0114b15:	68 86 04 00 00       	push   $0x486
f0114b1a:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114b1f:	e8 9a b8 fe ff       	call   f01003be <_warn>
f0114b24:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b27:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114b2b:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b2f:	74 04                	je     f0114b35 <test_allocate_chunk+0x27e>
f0114b31:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114b35:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b3c:	8a 10                	mov    (%eax),%dl
f0114b3e:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114b44:	38 c2                	cmp    %al,%dl
f0114b46:	75 0f                	jne    f0114b57 <test_allocate_chunk+0x2a0>
f0114b48:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b4b:	8a 10                	mov    (%eax),%dl
f0114b4d:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114b53:	38 c2                	cmp    %al,%dl
f0114b55:	74 1e                	je     f0114b75 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114b57:	83 ec 04             	sub    $0x4,%esp
f0114b5a:	68 04 85 13 f0       	push   $0xf0138504
f0114b5f:	68 8e 04 00 00       	push   $0x48e
f0114b64:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114b69:	e8 50 b8 fe ff       	call   f01003be <_warn>
f0114b6e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b71:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114b75:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b79:	74 04                	je     f0114b7f <test_allocate_chunk+0x2c8>
f0114b7b:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114b7f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114b83:	83 ec 0c             	sub    $0xc,%esp
f0114b86:	68 81 82 13 f0       	push   $0xf0138281
f0114b8b:	e8 a1 c2 fe ff       	call   f0100e31 <cprintf>
f0114b90:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114b93:	83 ec 0c             	sub    $0xc,%esp
f0114b96:	68 3c 85 13 f0       	push   $0xf013853c
f0114b9b:	e8 91 c2 fe ff       	call   f0100e31 <cprintf>
f0114ba0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114ba3:	e8 36 7e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114ba8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114bab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bae:	c1 e0 05             	shl    $0x5,%eax
f0114bb1:	68 02 0e 00 00       	push   $0xe02
f0114bb6:	50                   	push   %eax
f0114bb7:	6a 00                	push   $0x0
f0114bb9:	ff 75 cc             	pushl  -0x34(%ebp)
f0114bbc:	e8 1a 40 ff ff       	call   f0108bdb <allocate_chunk>
f0114bc1:	83 c4 10             	add    $0x10,%esp
f0114bc4:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114bc7:	e8 12 7e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114bcc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114bcf:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114bd3:	75 36                	jne    f0114c0b <test_allocate_chunk+0x354>
f0114bd5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bd8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bdb:	89 c1                	mov    %eax,%ecx
f0114bdd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114be0:	c1 e0 05             	shl    $0x5,%eax
f0114be3:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114be6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114bed:	99                   	cltd   
f0114bee:	f7 fe                	idiv   %esi
f0114bf0:	89 c3                	mov    %eax,%ebx
f0114bf2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bf5:	c1 e0 05             	shl    $0x5,%eax
f0114bf8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114bfb:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c02:	99                   	cltd   
f0114c03:	f7 fe                	idiv   %esi
f0114c05:	01 d8                	add    %ebx,%eax
f0114c07:	39 c1                	cmp    %eax,%ecx
f0114c09:	74 54                	je     f0114c5f <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114c0b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c0e:	c1 e0 05             	shl    $0x5,%eax
f0114c11:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114c14:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114c1b:	99                   	cltd   
f0114c1c:	f7 ff                	idiv   %edi
f0114c1e:	89 c1                	mov    %eax,%ecx
f0114c20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c23:	c1 e0 05             	shl    $0x5,%eax
f0114c26:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c29:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c30:	99                   	cltd   
f0114c31:	f7 fe                	idiv   %esi
f0114c33:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114c36:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c39:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c3c:	83 ec 08             	sub    $0x8,%esp
f0114c3f:	52                   	push   %edx
f0114c40:	50                   	push   %eax
f0114c41:	ff 75 a8             	pushl  -0x58(%ebp)
f0114c44:	68 7c 85 13 f0       	push   $0xf013857c
f0114c49:	68 a3 04 00 00       	push   $0x4a3
f0114c4e:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114c53:	e8 66 b7 fe ff       	call   f01003be <_warn>
f0114c58:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c5b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114c5f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c63:	74 04                	je     f0114c69 <test_allocate_chunk+0x3b2>
f0114c65:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114c69:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114c6d:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114c74:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c77:	c1 e0 05             	shl    $0x5,%eax
f0114c7a:	83 ec 08             	sub    $0x8,%esp
f0114c7d:	6a 03                	push   $0x3
f0114c7f:	6a 00                	push   $0x0
f0114c81:	6a 00                	push   $0x0
f0114c83:	68 07 0e 00 00       	push   $0xe07
f0114c88:	68 03 0e 00 00       	push   $0xe03
f0114c8d:	6a 01                	push   $0x1
f0114c8f:	50                   	push   %eax
f0114c90:	6a 00                	push   $0x0
f0114c92:	6a 00                	push   $0x0
f0114c94:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c97:	e8 a6 20 00 00       	call   f0116d42 <CCP>
f0114c9c:	83 c4 30             	add    $0x30,%esp
f0114c9f:	85 c0                	test   %eax,%eax
f0114ca1:	75 25                	jne    f0114cc8 <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114ca3:	83 ec 04             	sub    $0x4,%esp
f0114ca6:	68 b8 84 13 f0       	push   $0xf01384b8
f0114cab:	68 ac 04 00 00       	push   $0x4ac
f0114cb0:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114cb5:	e8 04 b7 fe ff       	call   f01003be <_warn>
f0114cba:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114cbd:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114cc1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114cc8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ccc:	74 04                	je     f0114cd2 <test_allocate_chunk+0x41b>
f0114cce:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114cd2:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114cd6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114cda:	74 5a                	je     f0114d36 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114cdc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cdf:	01 c0                	add    %eax,%eax
f0114ce1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114ce4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ce7:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114cea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ced:	01 c0                	add    %eax,%eax
f0114cef:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114cf2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114cf5:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114cf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114cfb:	8a 00                	mov    (%eax),%al
f0114cfd:	3c 4b                	cmp    $0x4b,%al
f0114cff:	75 09                	jne    f0114d0a <test_allocate_chunk+0x453>
f0114d01:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114d04:	8a 00                	mov    (%eax),%al
f0114d06:	3c 4d                	cmp    $0x4d,%al
f0114d08:	74 1e                	je     f0114d28 <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114d0a:	83 ec 04             	sub    $0x4,%esp
f0114d0d:	68 04 85 13 f0       	push   $0xf0138504
f0114d12:	68 ba 04 00 00       	push   $0x4ba
f0114d17:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114d1c:	e8 9d b6 fe ff       	call   f01003be <_warn>
f0114d21:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114d24:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114d28:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d2c:	74 04                	je     f0114d32 <test_allocate_chunk+0x47b>
f0114d2e:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114d32:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114d36:	83 ec 0c             	sub    $0xc,%esp
f0114d39:	68 5b 78 13 f0       	push   $0xf013785b
f0114d3e:	e8 ee c0 fe ff       	call   f0100e31 <cprintf>
f0114d43:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114d46:	83 ec 0c             	sub    $0xc,%esp
f0114d49:	68 dc 85 13 f0       	push   $0xf01385dc
f0114d4e:	e8 de c0 fe ff       	call   f0100e31 <cprintf>
f0114d53:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d56:	e8 83 7c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114d5b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114d5e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d61:	c1 e0 06             	shl    $0x6,%eax
f0114d64:	89 c2                	mov    %eax,%edx
f0114d66:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d69:	c1 e0 05             	shl    $0x5,%eax
f0114d6c:	6a 00                	push   $0x0
f0114d6e:	52                   	push   %edx
f0114d6f:	50                   	push   %eax
f0114d70:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d73:	e8 63 3e ff ff       	call   f0108bdb <allocate_chunk>
f0114d78:	83 c4 10             	add    $0x10,%esp
f0114d7b:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d7e:	e8 5b 7c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114d83:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114d86:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114d8a:	75 36                	jne    f0114dc2 <test_allocate_chunk+0x50b>
f0114d8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d8f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d92:	89 c1                	mov    %eax,%ecx
f0114d94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d97:	c1 e0 06             	shl    $0x6,%eax
f0114d9a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114d9d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114da4:	99                   	cltd   
f0114da5:	f7 ff                	idiv   %edi
f0114da7:	89 c3                	mov    %eax,%ebx
f0114da9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dac:	c1 e0 06             	shl    $0x6,%eax
f0114daf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114db2:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114db9:	99                   	cltd   
f0114dba:	f7 fe                	idiv   %esi
f0114dbc:	01 d8                	add    %ebx,%eax
f0114dbe:	39 c1                	cmp    %eax,%ecx
f0114dc0:	74 54                	je     f0114e16 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114dc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dc5:	c1 e0 06             	shl    $0x6,%eax
f0114dc8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114dcb:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114dd2:	99                   	cltd   
f0114dd3:	f7 fb                	idiv   %ebx
f0114dd5:	89 c1                	mov    %eax,%ecx
f0114dd7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dda:	c1 e0 06             	shl    $0x6,%eax
f0114ddd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114de0:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114de7:	99                   	cltd   
f0114de8:	f7 ff                	idiv   %edi
f0114dea:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114ded:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114df0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114df3:	83 ec 08             	sub    $0x8,%esp
f0114df6:	52                   	push   %edx
f0114df7:	50                   	push   %eax
f0114df8:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114dfb:	68 7c 85 13 f0       	push   $0xf013857c
f0114e00:	68 d0 04 00 00       	push   $0x4d0
f0114e05:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114e0a:	e8 af b5 fe ff       	call   f01003be <_warn>
f0114e0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e12:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114e16:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e1a:	74 04                	je     f0114e20 <test_allocate_chunk+0x569>
f0114e1c:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114e20:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114e24:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e2b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e2e:	c1 e0 06             	shl    $0x6,%eax
f0114e31:	89 c2                	mov    %eax,%edx
f0114e33:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e36:	c1 e0 05             	shl    $0x5,%eax
f0114e39:	83 ec 08             	sub    $0x8,%esp
f0114e3c:	6a 03                	push   $0x3
f0114e3e:	6a 00                	push   $0x0
f0114e40:	6a 00                	push   $0x0
f0114e42:	68 07 0e 00 00       	push   $0xe07
f0114e47:	6a 01                	push   $0x1
f0114e49:	6a 01                	push   $0x1
f0114e4b:	52                   	push   %edx
f0114e4c:	50                   	push   %eax
f0114e4d:	6a 00                	push   $0x0
f0114e4f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114e52:	e8 eb 1e 00 00       	call   f0116d42 <CCP>
f0114e57:	83 c4 30             	add    $0x30,%esp
f0114e5a:	85 c0                	test   %eax,%eax
f0114e5c:	75 25                	jne    f0114e83 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e5e:	83 ec 04             	sub    $0x4,%esp
f0114e61:	68 b8 84 13 f0       	push   $0xf01384b8
f0114e66:	68 d9 04 00 00       	push   $0x4d9
f0114e6b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114e70:	e8 49 b5 fe ff       	call   f01003be <_warn>
f0114e75:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114e78:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114e7c:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114e83:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e87:	74 04                	je     f0114e8d <test_allocate_chunk+0x5d6>
f0114e89:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114e8d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114e91:	83 ec 0c             	sub    $0xc,%esp
f0114e94:	68 be 78 13 f0       	push   $0xf01378be
f0114e99:	e8 93 bf fe ff       	call   f0100e31 <cprintf>
f0114e9e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114ea1:	83 ec 0c             	sub    $0xc,%esp
f0114ea4:	68 1c 86 13 f0       	push   $0xf013861c
f0114ea9:	e8 83 bf fe ff       	call   f0100e31 <cprintf>
f0114eae:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114eb1:	e8 28 7b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114eb6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114eb9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ebc:	c1 e0 06             	shl    $0x6,%eax
f0114ebf:	68 06 0e 00 00       	push   $0xe06
f0114ec4:	50                   	push   %eax
f0114ec5:	68 00 00 00 80       	push   $0x80000000
f0114eca:	ff 75 cc             	pushl  -0x34(%ebp)
f0114ecd:	e8 09 3d ff ff       	call   f0108bdb <allocate_chunk>
f0114ed2:	83 c4 10             	add    $0x10,%esp
f0114ed5:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114ed8:	e8 01 7b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0114edd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114ee0:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114ee4:	75 36                	jne    f0114f1c <test_allocate_chunk+0x665>
f0114ee6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ee9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114eec:	89 c1                	mov    %eax,%ecx
f0114eee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ef1:	c1 e0 06             	shl    $0x6,%eax
f0114ef4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ef7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114efe:	99                   	cltd   
f0114eff:	f7 fb                	idiv   %ebx
f0114f01:	89 c3                	mov    %eax,%ebx
f0114f03:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f06:	c1 e0 06             	shl    $0x6,%eax
f0114f09:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f0c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114f13:	99                   	cltd   
f0114f14:	f7 fe                	idiv   %esi
f0114f16:	01 d8                	add    %ebx,%eax
f0114f18:	39 c1                	cmp    %eax,%ecx
f0114f1a:	74 54                	je     f0114f70 <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114f1c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f1f:	c1 e0 06             	shl    $0x6,%eax
f0114f22:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f25:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114f2c:	99                   	cltd   
f0114f2d:	f7 ff                	idiv   %edi
f0114f2f:	89 c1                	mov    %eax,%ecx
f0114f31:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f34:	c1 e0 06             	shl    $0x6,%eax
f0114f37:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f3a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f41:	99                   	cltd   
f0114f42:	f7 fb                	idiv   %ebx
f0114f44:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114f47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f4a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f4d:	83 ec 08             	sub    $0x8,%esp
f0114f50:	52                   	push   %edx
f0114f51:	50                   	push   %eax
f0114f52:	ff 75 9c             	pushl  -0x64(%ebp)
f0114f55:	68 7c 85 13 f0       	push   $0xf013857c
f0114f5a:	68 ef 04 00 00       	push   $0x4ef
f0114f5f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114f64:	e8 55 b4 fe ff       	call   f01003be <_warn>
f0114f69:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f6c:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114f70:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f74:	74 04                	je     f0114f7a <test_allocate_chunk+0x6c3>
f0114f76:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114f7a:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114f7e:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114f85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f88:	c1 e0 06             	shl    $0x6,%eax
f0114f8b:	83 ec 08             	sub    $0x8,%esp
f0114f8e:	6a 03                	push   $0x3
f0114f90:	6a 00                	push   $0x0
f0114f92:	6a 00                	push   $0x0
f0114f94:	68 07 0e 00 00       	push   $0xe07
f0114f99:	68 07 0e 00 00       	push   $0xe07
f0114f9e:	6a 01                	push   $0x1
f0114fa0:	50                   	push   %eax
f0114fa1:	68 00 00 00 80       	push   $0x80000000
f0114fa6:	6a 00                	push   $0x0
f0114fa8:	ff 75 cc             	pushl  -0x34(%ebp)
f0114fab:	e8 92 1d 00 00       	call   f0116d42 <CCP>
f0114fb0:	83 c4 30             	add    $0x30,%esp
f0114fb3:	85 c0                	test   %eax,%eax
f0114fb5:	75 25                	jne    f0114fdc <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114fb7:	83 ec 04             	sub    $0x4,%esp
f0114fba:	68 b8 84 13 f0       	push   $0xf01384b8
f0114fbf:	68 f8 04 00 00       	push   $0x4f8
f0114fc4:	68 ce 6e 13 f0       	push   $0xf0136ece
f0114fc9:	e8 f0 b3 fe ff       	call   f01003be <_warn>
f0114fce:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114fd1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114fd5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0114fdc:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114fe0:	74 04                	je     f0114fe6 <test_allocate_chunk+0x72f>
f0114fe2:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114fe6:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114fea:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114fee:	74 6f                	je     f011505f <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114ff0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ff3:	01 c0                	add    %eax,%eax
f0114ff5:	05 00 00 00 80       	add    $0x80000000,%eax
f0114ffa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114ffd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115000:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0115003:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115006:	89 d0                	mov    %edx,%eax
f0115008:	c1 e0 02             	shl    $0x2,%eax
f011500b:	01 d0                	add    %edx,%eax
f011500d:	01 c0                	add    %eax,%eax
f011500f:	01 d0                	add    %edx,%eax
f0115011:	01 c0                	add    %eax,%eax
f0115013:	05 00 00 00 80       	add    $0x80000000,%eax
f0115018:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011501b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011501e:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0115021:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115024:	8a 00                	mov    (%eax),%al
f0115026:	3c 4b                	cmp    $0x4b,%al
f0115028:	75 09                	jne    f0115033 <test_allocate_chunk+0x77c>
f011502a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011502d:	8a 00                	mov    (%eax),%al
f011502f:	3c 4d                	cmp    $0x4d,%al
f0115031:	74 1e                	je     f0115051 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0115033:	83 ec 04             	sub    $0x4,%esp
f0115036:	68 04 85 13 f0       	push   $0xf0138504
f011503b:	68 06 05 00 00       	push   $0x506
f0115040:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115045:	e8 74 b3 fe ff       	call   f01003be <_warn>
f011504a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011504d:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0115051:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115055:	74 04                	je     f011505b <test_allocate_chunk+0x7a4>
f0115057:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f011505b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011505f:	83 ec 0c             	sub    $0xc,%esp
f0115062:	68 90 83 13 f0       	push   $0xf0138390
f0115067:	e8 c5 bd fe ff       	call   f0100e31 <cprintf>
f011506c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011506f:	83 ec 0c             	sub    $0xc,%esp
f0115072:	68 58 86 13 f0       	push   $0xf0138658
f0115077:	e8 b5 bd fe ff       	call   f0100e31 <cprintf>
f011507c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011507f:	e8 5a 79 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0115084:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0115087:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011508a:	89 d0                	mov    %edx,%eax
f011508c:	01 c0                	add    %eax,%eax
f011508e:	01 d0                	add    %edx,%eax
f0115090:	01 c0                	add    %eax,%eax
f0115092:	01 d0                	add    %edx,%eax
f0115094:	68 04 0e 00 00       	push   $0xe04
f0115099:	50                   	push   %eax
f011509a:	68 00 fc 3f 40       	push   $0x403ffc00
f011509f:	ff 75 cc             	pushl  -0x34(%ebp)
f01150a2:	e8 34 3b ff ff       	call   f0108bdb <allocate_chunk>
f01150a7:	83 c4 10             	add    $0x10,%esp
f01150aa:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01150ad:	e8 2c 79 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01150b2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01150b5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01150b9:	75 0b                	jne    f01150c6 <test_allocate_chunk+0x80f>
f01150bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150be:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150c1:	83 f8 05             	cmp    $0x5,%eax
f01150c4:	74 2a                	je     f01150f0 <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01150c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150c9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150cc:	83 ec 08             	sub    $0x8,%esp
f01150cf:	6a 05                	push   $0x5
f01150d1:	50                   	push   %eax
f01150d2:	ff 75 98             	pushl  -0x68(%ebp)
f01150d5:	68 7c 85 13 f0       	push   $0xf013857c
f01150da:	68 1d 05 00 00       	push   $0x51d
f01150df:	68 ce 6e 13 f0       	push   $0xf0136ece
f01150e4:	e8 d5 b2 fe ff       	call   f01003be <_warn>
f01150e9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150ec:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01150f0:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01150f4:	74 04                	je     f01150fa <test_allocate_chunk+0x843>
f01150f6:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01150fa:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01150fe:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115105:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115108:	89 d0                	mov    %edx,%eax
f011510a:	01 c0                	add    %eax,%eax
f011510c:	01 d0                	add    %edx,%eax
f011510e:	c1 e0 02             	shl    $0x2,%eax
f0115111:	83 ec 08             	sub    $0x8,%esp
f0115114:	6a 03                	push   $0x3
f0115116:	6a 00                	push   $0x0
f0115118:	6a 00                	push   $0x0
f011511a:	68 07 0e 00 00       	push   $0xe07
f011511f:	68 05 0e 00 00       	push   $0xe05
f0115124:	6a 01                	push   $0x1
f0115126:	50                   	push   %eax
f0115127:	68 00 f0 3f 40       	push   $0x403ff000
f011512c:	6a 00                	push   $0x0
f011512e:	ff 75 cc             	pushl  -0x34(%ebp)
f0115131:	e8 0c 1c 00 00       	call   f0116d42 <CCP>
f0115136:	83 c4 30             	add    $0x30,%esp
f0115139:	85 c0                	test   %eax,%eax
f011513b:	75 25                	jne    f0115162 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011513d:	83 ec 04             	sub    $0x4,%esp
f0115140:	68 b8 84 13 f0       	push   $0xf01384b8
f0115145:	68 26 05 00 00       	push   $0x526
f011514a:	68 ce 6e 13 f0       	push   $0xf0136ece
f011514f:	e8 6a b2 fe ff       	call   f01003be <_warn>
f0115154:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115157:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011515b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115162:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115166:	74 04                	je     f011516c <test_allocate_chunk+0x8b5>
f0115168:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011516c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115170:	83 ec 0c             	sub    $0xc,%esp
f0115173:	68 8f 86 13 f0       	push   $0xf013868f
f0115178:	e8 b4 bc fe ff       	call   f0100e31 <cprintf>
f011517d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115180:	83 ec 08             	sub    $0x8,%esp
f0115183:	ff 75 e0             	pushl  -0x20(%ebp)
f0115186:	68 a0 86 13 f0       	push   $0xf01386a0
f011518b:	e8 a1 bc fe ff       	call   f0100e31 <cprintf>
f0115190:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115193:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0115197:	75 10                	jne    f01151a9 <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0115199:	83 ec 0c             	sub    $0xc,%esp
f011519c:	68 d4 86 13 f0       	push   $0xf01386d4
f01151a1:	e8 8b bc fe ff       	call   f0100e31 <cprintf>
f01151a6:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01151a9:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01151ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01151b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01151b4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01151b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01151bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01151bf:	5b                   	pop    %ebx
f01151c0:	5e                   	pop    %esi
f01151c1:	5f                   	pop    %edi
f01151c2:	5d                   	pop    %ebp
f01151c3:	c3                   	ret    

f01151c4 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01151c4:	55                   	push   %ebp
f01151c5:	89 e5                	mov    %esp,%ebp
f01151c7:	57                   	push   %edi
f01151c8:	56                   	push   %esi
f01151c9:	53                   	push   %ebx
f01151ca:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01151d0:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01151d3:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f01151d8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01151dd:	89 c7                	mov    %eax,%edi
f01151df:	89 de                	mov    %ebx,%esi
f01151e1:	89 d1                	mov    %edx,%ecx
f01151e3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01151e5:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01151e8:	b9 23 00 00 00       	mov    $0x23,%ecx
f01151ed:	b0 00                	mov    $0x0,%al
f01151ef:	89 d7                	mov    %edx,%edi
f01151f1:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01151f3:	6a 00                	push   $0x0
f01151f5:	6a 0a                	push   $0xa
f01151f7:	6a 14                	push   $0x14
f01151f9:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01151fc:	50                   	push   %eax
f01151fd:	e8 c9 3a ff ff       	call   f0108ccb <env_create>
f0115202:	83 c4 10             	add    $0x10,%esp
f0115205:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115208:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011520b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115211:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115214:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115217:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011521d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115220:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115223:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115226:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011522d:	75 70 20 
f0115230:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115237:	00 00 00 
f011523a:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011523d:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115242:	b8 00 00 00 00       	mov    $0x0,%eax
f0115247:	89 d7                	mov    %edx,%edi
f0115249:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011524b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011524e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115251:	83 ec 08             	sub    $0x8,%esp
f0115254:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011525a:	52                   	push   %edx
f011525b:	50                   	push   %eax
f011525c:	e8 53 a0 01 00       	call   f012f2b4 <ltostr>
f0115261:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115264:	83 ec 04             	sub    $0x4,%esp
f0115267:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011526d:	50                   	push   %eax
f011526e:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115274:	50                   	push   %eax
f0115275:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011527b:	50                   	push   %eax
f011527c:	e8 2b a1 01 00       	call   f012f3ac <strcconcat>
f0115281:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115284:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011528b:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115292:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115299:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f01152a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f01152a4:	83 ec 0c             	sub    $0xc,%esp
f01152a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01152aa:	e8 5f 1a 00 00       	call   f0116d0e <ClearUserSpace>
f01152af:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01152b2:	83 ec 0c             	sub    $0xc,%esp
f01152b5:	68 14 87 13 f0       	push   $0xf0138714
f01152ba:	e8 72 bb fe ff       	call   f0100e31 <cprintf>
f01152bf:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01152c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152c5:	c1 e0 03             	shl    $0x3,%eax
f01152c8:	83 ec 04             	sub    $0x4,%esp
f01152cb:	50                   	push   %eax
f01152cc:	6a 00                	push   $0x0
f01152ce:	ff 75 d8             	pushl  -0x28(%ebp)
f01152d1:	e8 39 39 ff ff       	call   f0108c0f <calculate_required_frames>
f01152d6:	83 c4 10             	add    $0x10,%esp
f01152d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01152dc:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01152e0:	74 23                	je     f0115305 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01152e2:	83 ec 0c             	sub    $0xc,%esp
f01152e5:	6a 03                	push   $0x3
f01152e7:	ff 75 c8             	pushl  -0x38(%ebp)
f01152ea:	68 48 87 13 f0       	push   $0xf0138748
f01152ef:	68 5f 05 00 00       	push   $0x55f
f01152f4:	68 ce 6e 13 f0       	push   $0xf0136ece
f01152f9:	e8 c0 b0 fe ff       	call   f01003be <_warn>
f01152fe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115301:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115305:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115309:	74 04                	je     f011530f <test_calculate_required_frames+0x14b>
f011530b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011530f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0115313:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115316:	c1 e0 02             	shl    $0x2,%eax
f0115319:	83 ec 04             	sub    $0x4,%esp
f011531c:	50                   	push   %eax
f011531d:	6a 00                	push   $0x0
f011531f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115322:	e8 e8 38 ff ff       	call   f0108c0f <calculate_required_frames>
f0115327:	83 c4 10             	add    $0x10,%esp
f011532a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011532d:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115334:	74 26                	je     f011535c <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115336:	83 ec 0c             	sub    $0xc,%esp
f0115339:	68 01 04 00 00       	push   $0x401
f011533e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115341:	68 48 87 13 f0       	push   $0xf0138748
f0115346:	68 69 05 00 00       	push   $0x569
f011534b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115350:	e8 69 b0 fe ff       	call   f01003be <_warn>
f0115355:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115358:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011535c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115360:	74 04                	je     f0115366 <test_calculate_required_frames+0x1a2>
f0115362:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115366:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011536a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011536d:	c1 e0 0a             	shl    $0xa,%eax
f0115370:	83 ec 04             	sub    $0x4,%esp
f0115373:	50                   	push   %eax
f0115374:	6a 00                	push   $0x0
f0115376:	ff 75 d8             	pushl  -0x28(%ebp)
f0115379:	e8 91 38 ff ff       	call   f0108c0f <calculate_required_frames>
f011537e:	83 c4 10             	add    $0x10,%esp
f0115381:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115384:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115387:	c1 e0 0a             	shl    $0xa,%eax
f011538a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011538d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115394:	99                   	cltd   
f0115395:	f7 fb                	idiv   %ebx
f0115397:	89 c1                	mov    %eax,%ecx
f0115399:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011539c:	c1 e0 0a             	shl    $0xa,%eax
f011539f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153a2:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01153a9:	99                   	cltd   
f01153aa:	f7 fe                	idiv   %esi
f01153ac:	01 c8                	add    %ecx,%eax
f01153ae:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01153b1:	74 4c                	je     f01153ff <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01153b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153b6:	c1 e0 0a             	shl    $0xa,%eax
f01153b9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01153bc:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01153c3:	99                   	cltd   
f01153c4:	f7 fb                	idiv   %ebx
f01153c6:	89 c1                	mov    %eax,%ecx
f01153c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153cb:	c1 e0 0a             	shl    $0xa,%eax
f01153ce:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153d1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01153d8:	99                   	cltd   
f01153d9:	f7 fe                	idiv   %esi
f01153db:	01 c8                	add    %ecx,%eax
f01153dd:	83 ec 0c             	sub    $0xc,%esp
f01153e0:	50                   	push   %eax
f01153e1:	ff 75 c8             	pushl  -0x38(%ebp)
f01153e4:	68 48 87 13 f0       	push   $0xf0138748
f01153e9:	68 73 05 00 00       	push   $0x573
f01153ee:	68 ce 6e 13 f0       	push   $0xf0136ece
f01153f3:	e8 c6 af fe ff       	call   f01003be <_warn>
f01153f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115403:	74 04                	je     f0115409 <test_calculate_required_frames+0x245>
f0115405:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115409:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f011540d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115410:	89 d0                	mov    %edx,%eax
f0115412:	01 c0                	add    %eax,%eax
f0115414:	01 d0                	add    %edx,%eax
f0115416:	01 c0                	add    %eax,%eax
f0115418:	83 ec 04             	sub    $0x4,%esp
f011541b:	50                   	push   %eax
f011541c:	68 00 10 00 00       	push   $0x1000
f0115421:	ff 75 d8             	pushl  -0x28(%ebp)
f0115424:	e8 e6 37 ff ff       	call   f0108c0f <calculate_required_frames>
f0115429:	83 c4 10             	add    $0x10,%esp
f011542c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011542f:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115433:	74 23                	je     f0115458 <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115435:	83 ec 0c             	sub    $0xc,%esp
f0115438:	6a 03                	push   $0x3
f011543a:	ff 75 c8             	pushl  -0x38(%ebp)
f011543d:	68 48 87 13 f0       	push   $0xf0138748
f0115442:	68 7f 05 00 00       	push   $0x57f
f0115447:	68 ce 6e 13 f0       	push   $0xf0136ece
f011544c:	e8 6d af fe ff       	call   f01003be <_warn>
f0115451:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115454:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115458:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011545c:	74 04                	je     f0115462 <test_calculate_required_frames+0x29e>
f011545e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115462:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115466:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115469:	89 c2                	mov    %eax,%edx
f011546b:	01 d2                	add    %edx,%edx
f011546d:	01 d0                	add    %edx,%eax
f011546f:	83 ec 04             	sub    $0x4,%esp
f0115472:	50                   	push   %eax
f0115473:	68 00 18 00 00       	push   $0x1800
f0115478:	ff 75 d8             	pushl  -0x28(%ebp)
f011547b:	e8 8f 37 ff ff       	call   f0108c0f <calculate_required_frames>
f0115480:	83 c4 10             	add    $0x10,%esp
f0115483:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115486:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011548a:	74 23                	je     f01154af <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011548c:	83 ec 0c             	sub    $0xc,%esp
f011548f:	6a 03                	push   $0x3
f0115491:	ff 75 c8             	pushl  -0x38(%ebp)
f0115494:	68 48 87 13 f0       	push   $0xf0138748
f0115499:	68 89 05 00 00       	push   $0x589
f011549e:	68 ce 6e 13 f0       	push   $0xf0136ece
f01154a3:	e8 16 af fe ff       	call   f01003be <_warn>
f01154a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154b3:	74 04                	je     f01154b9 <test_calculate_required_frames+0x2f5>
f01154b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01154bd:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154c0:	89 d0                	mov    %edx,%eax
f01154c2:	c1 e0 02             	shl    $0x2,%eax
f01154c5:	01 d0                	add    %edx,%eax
f01154c7:	01 c0                	add    %eax,%eax
f01154c9:	83 ec 04             	sub    $0x4,%esp
f01154cc:	50                   	push   %eax
f01154cd:	68 00 00 40 00       	push   $0x400000
f01154d2:	ff 75 d8             	pushl  -0x28(%ebp)
f01154d5:	e8 35 37 ff ff       	call   f0108c0f <calculate_required_frames>
f01154da:	83 c4 10             	add    $0x10,%esp
f01154dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01154e0:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01154e7:	74 26                	je     f011550f <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01154e9:	83 ec 0c             	sub    $0xc,%esp
f01154ec:	68 03 0a 00 00       	push   $0xa03
f01154f1:	ff 75 c8             	pushl  -0x38(%ebp)
f01154f4:	68 48 87 13 f0       	push   $0xf0138748
f01154f9:	68 93 05 00 00       	push   $0x593
f01154fe:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115503:	e8 b6 ae fe ff       	call   f01003be <_warn>
f0115508:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011550b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011550f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115513:	74 04                	je     f0115519 <test_calculate_required_frames+0x355>
f0115515:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115519:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011551d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115520:	01 c0                	add    %eax,%eax
f0115522:	83 ec 04             	sub    $0x4,%esp
f0115525:	50                   	push   %eax
f0115526:	68 00 00 70 00       	push   $0x700000
f011552b:	ff 75 d8             	pushl  -0x28(%ebp)
f011552e:	e8 dc 36 ff ff       	call   f0108c0f <calculate_required_frames>
f0115533:	83 c4 10             	add    $0x10,%esp
f0115536:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115539:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115540:	74 26                	je     f0115568 <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115542:	83 ec 0c             	sub    $0xc,%esp
f0115545:	68 02 02 00 00       	push   $0x202
f011554a:	ff 75 c8             	pushl  -0x38(%ebp)
f011554d:	68 48 87 13 f0       	push   $0xf0138748
f0115552:	68 9f 05 00 00       	push   $0x59f
f0115557:	68 ce 6e 13 f0       	push   $0xf0136ece
f011555c:	e8 5d ae fe ff       	call   f01003be <_warn>
f0115561:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115564:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115568:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011556c:	74 04                	je     f0115572 <test_calculate_required_frames+0x3ae>
f011556e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115572:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115576:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115579:	83 ec 04             	sub    $0x4,%esp
f011557c:	50                   	push   %eax
f011557d:	68 ff ff 3f 00       	push   $0x3fffff
f0115582:	ff 75 d8             	pushl  -0x28(%ebp)
f0115585:	e8 85 36 ff ff       	call   f0108c0f <calculate_required_frames>
f011558a:	83 c4 10             	add    $0x10,%esp
f011558d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115590:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115594:	74 23                	je     f01155b9 <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115596:	83 ec 0c             	sub    $0xc,%esp
f0115599:	6a 04                	push   $0x4
f011559b:	ff 75 c8             	pushl  -0x38(%ebp)
f011559e:	68 48 87 13 f0       	push   $0xf0138748
f01155a3:	68 a9 05 00 00       	push   $0x5a9
f01155a8:	68 ce 6e 13 f0       	push   $0xf0136ece
f01155ad:	e8 0c ae fe ff       	call   f01003be <_warn>
f01155b2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01155b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155bd:	74 04                	je     f01155c3 <test_calculate_required_frames+0x3ff>
f01155bf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01155c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01155c7:	83 ec 0c             	sub    $0xc,%esp
f01155ca:	68 81 82 13 f0       	push   $0xf0138281
f01155cf:	e8 5d b8 fe ff       	call   f0100e31 <cprintf>
f01155d4:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01155d7:	83 ec 0c             	sub    $0xc,%esp
f01155da:	68 a0 87 13 f0       	push   $0xf01387a0
f01155df:	e8 4d b8 fe ff       	call   f0100e31 <cprintf>
f01155e4:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01155e7:	83 ec 04             	sub    $0x4,%esp
f01155ea:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01155f0:	50                   	push   %eax
f01155f1:	68 3a 76 13 f0       	push   $0xf013763a
f01155f6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01155fc:	50                   	push   %eax
f01155fd:	e8 aa 9d 01 00       	call   f012f3ac <strcconcat>
f0115602:	83 c4 10             	add    $0x10,%esp
f0115605:	83 ec 0c             	sub    $0xc,%esp
f0115608:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011560e:	50                   	push   %eax
f011560f:	e8 af c5 fe ff       	call   f0101bc3 <execute_command>
f0115614:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115617:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011561a:	c1 e0 03             	shl    $0x3,%eax
f011561d:	83 ec 04             	sub    $0x4,%esp
f0115620:	50                   	push   %eax
f0115621:	6a 00                	push   $0x0
f0115623:	ff 75 d8             	pushl  -0x28(%ebp)
f0115626:	e8 e4 35 ff ff       	call   f0108c0f <calculate_required_frames>
f011562b:	83 c4 10             	add    $0x10,%esp
f011562e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115631:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115638:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011563b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011563e:	74 24                	je     f0115664 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115640:	83 ec 0c             	sub    $0xc,%esp
f0115643:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115646:	ff 75 c8             	pushl  -0x38(%ebp)
f0115649:	68 48 87 13 f0       	push   $0xf0138748
f011564e:	68 bd 05 00 00       	push   $0x5bd
f0115653:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115658:	e8 61 ad fe ff       	call   f01003be <_warn>
f011565d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115660:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115664:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115668:	74 04                	je     f011566e <test_calculate_required_frames+0x4aa>
f011566a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011566e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115672:	83 ec 04             	sub    $0x4,%esp
f0115675:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011567b:	50                   	push   %eax
f011567c:	68 47 76 13 f0       	push   $0xf0137647
f0115681:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115687:	50                   	push   %eax
f0115688:	e8 1f 9d 01 00       	call   f012f3ac <strcconcat>
f011568d:	83 c4 10             	add    $0x10,%esp
f0115690:	83 ec 0c             	sub    $0xc,%esp
f0115693:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115699:	50                   	push   %eax
f011569a:	e8 24 c5 fe ff       	call   f0101bc3 <execute_command>
f011569f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01156a2:	83 ec 04             	sub    $0x4,%esp
f01156a5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156ab:	50                   	push   %eax
f01156ac:	68 d4 87 13 f0       	push   $0xf01387d4
f01156b1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156b7:	50                   	push   %eax
f01156b8:	e8 ef 9c 01 00       	call   f012f3ac <strcconcat>
f01156bd:	83 c4 10             	add    $0x10,%esp
f01156c0:	83 ec 0c             	sub    $0xc,%esp
f01156c3:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156c9:	50                   	push   %eax
f01156ca:	e8 f4 c4 fe ff       	call   f0101bc3 <execute_command>
f01156cf:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01156d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156d5:	c1 e0 03             	shl    $0x3,%eax
f01156d8:	83 ec 04             	sub    $0x4,%esp
f01156db:	50                   	push   %eax
f01156dc:	6a 00                	push   $0x0
f01156de:	ff 75 d8             	pushl  -0x28(%ebp)
f01156e1:	e8 29 35 ff ff       	call   f0108c0f <calculate_required_frames>
f01156e6:	83 c4 10             	add    $0x10,%esp
f01156e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01156ec:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01156f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01156f6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156f9:	74 24                	je     f011571f <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01156fb:	83 ec 0c             	sub    $0xc,%esp
f01156fe:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115701:	ff 75 c8             	pushl  -0x38(%ebp)
f0115704:	68 48 87 13 f0       	push   $0xf0138748
f0115709:	68 cb 05 00 00       	push   $0x5cb
f011570e:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115713:	e8 a6 ac fe ff       	call   f01003be <_warn>
f0115718:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011571b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011571f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115723:	74 04                	je     f0115729 <test_calculate_required_frames+0x565>
f0115725:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115729:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011572d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115730:	c1 e0 0a             	shl    $0xa,%eax
f0115733:	83 ec 04             	sub    $0x4,%esp
f0115736:	50                   	push   %eax
f0115737:	6a 00                	push   $0x0
f0115739:	ff 75 d8             	pushl  -0x28(%ebp)
f011573c:	e8 ce 34 ff ff       	call   f0108c0f <calculate_required_frames>
f0115741:	83 c4 10             	add    $0x10,%esp
f0115744:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115747:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011574a:	c1 e0 0a             	shl    $0xa,%eax
f011574d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115750:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115757:	99                   	cltd   
f0115758:	f7 fb                	idiv   %ebx
f011575a:	89 c1                	mov    %eax,%ecx
f011575c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011575f:	c1 e0 0a             	shl    $0xa,%eax
f0115762:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115765:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011576c:	99                   	cltd   
f011576d:	f7 fe                	idiv   %esi
f011576f:	01 c8                	add    %ecx,%eax
f0115771:	83 e8 05             	sub    $0x5,%eax
f0115774:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115777:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011577a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011577d:	74 24                	je     f01157a3 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011577f:	83 ec 0c             	sub    $0xc,%esp
f0115782:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115785:	ff 75 c8             	pushl  -0x38(%ebp)
f0115788:	68 48 87 13 f0       	push   $0xf0138748
f011578d:	68 d6 05 00 00       	push   $0x5d6
f0115792:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115797:	e8 22 ac fe ff       	call   f01003be <_warn>
f011579c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011579f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01157a3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157a7:	74 04                	je     f01157ad <test_calculate_required_frames+0x5e9>
f01157a9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01157ad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01157b1:	83 ec 04             	sub    $0x4,%esp
f01157b4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157ba:	50                   	push   %eax
f01157bb:	68 e0 87 13 f0       	push   $0xf01387e0
f01157c0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157c6:	50                   	push   %eax
f01157c7:	e8 e0 9b 01 00       	call   f012f3ac <strcconcat>
f01157cc:	83 c4 10             	add    $0x10,%esp
f01157cf:	83 ec 0c             	sub    $0xc,%esp
f01157d2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157d8:	50                   	push   %eax
f01157d9:	e8 e5 c3 fe ff       	call   f0101bc3 <execute_command>
f01157de:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01157e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157e4:	89 c2                	mov    %eax,%edx
f01157e6:	01 d2                	add    %edx,%edx
f01157e8:	01 d0                	add    %edx,%eax
f01157ea:	83 ec 04             	sub    $0x4,%esp
f01157ed:	50                   	push   %eax
f01157ee:	68 00 18 00 00       	push   $0x1800
f01157f3:	ff 75 d8             	pushl  -0x28(%ebp)
f01157f6:	e8 14 34 ff ff       	call   f0108c0f <calculate_required_frames>
f01157fb:	83 c4 10             	add    $0x10,%esp
f01157fe:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115801:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115808:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011580b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011580e:	74 24                	je     f0115834 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115810:	83 ec 0c             	sub    $0xc,%esp
f0115813:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115816:	ff 75 c8             	pushl  -0x38(%ebp)
f0115819:	68 48 87 13 f0       	push   $0xf0138748
f011581e:	68 e5 05 00 00       	push   $0x5e5
f0115823:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115828:	e8 91 ab fe ff       	call   f01003be <_warn>
f011582d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115830:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115834:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115838:	74 04                	je     f011583e <test_calculate_required_frames+0x67a>
f011583a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011583e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115842:	83 ec 04             	sub    $0x4,%esp
f0115845:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011584b:	50                   	push   %eax
f011584c:	68 a0 78 13 f0       	push   $0xf01378a0
f0115851:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115857:	50                   	push   %eax
f0115858:	e8 4f 9b 01 00       	call   f012f3ac <strcconcat>
f011585d:	83 c4 10             	add    $0x10,%esp
f0115860:	83 ec 0c             	sub    $0xc,%esp
f0115863:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115869:	50                   	push   %eax
f011586a:	e8 54 c3 fe ff       	call   f0101bc3 <execute_command>
f011586f:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115872:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115875:	89 d0                	mov    %edx,%eax
f0115877:	c1 e0 02             	shl    $0x2,%eax
f011587a:	01 d0                	add    %edx,%eax
f011587c:	01 c0                	add    %eax,%eax
f011587e:	83 ec 04             	sub    $0x4,%esp
f0115881:	50                   	push   %eax
f0115882:	68 00 00 40 00       	push   $0x400000
f0115887:	ff 75 d8             	pushl  -0x28(%ebp)
f011588a:	e8 80 33 ff ff       	call   f0108c0f <calculate_required_frames>
f011588f:	83 c4 10             	add    $0x10,%esp
f0115892:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115895:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011589c:	74 26                	je     f01158c4 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011589e:	83 ec 0c             	sub    $0xc,%esp
f01158a1:	68 03 0a 00 00       	push   $0xa03
f01158a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01158a9:	68 48 87 13 f0       	push   $0xf0138748
f01158ae:	68 f1 05 00 00       	push   $0x5f1
f01158b3:	68 ce 6e 13 f0       	push   $0xf0136ece
f01158b8:	e8 01 ab fe ff       	call   f01003be <_warn>
f01158bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158c8:	74 04                	je     f01158ce <test_calculate_required_frames+0x70a>
f01158ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01158d2:	83 ec 04             	sub    $0x4,%esp
f01158d5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01158db:	50                   	push   %eax
f01158dc:	68 aa 78 13 f0       	push   $0xf01378aa
f01158e1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158e7:	50                   	push   %eax
f01158e8:	e8 bf 9a 01 00       	call   f012f3ac <strcconcat>
f01158ed:	83 c4 10             	add    $0x10,%esp
f01158f0:	83 ec 0c             	sub    $0xc,%esp
f01158f3:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01158f9:	50                   	push   %eax
f01158fa:	e8 c4 c2 fe ff       	call   f0101bc3 <execute_command>
f01158ff:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115902:	83 ec 04             	sub    $0x4,%esp
f0115905:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011590b:	50                   	push   %eax
f011590c:	68 e8 87 13 f0       	push   $0xf01387e8
f0115911:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115917:	50                   	push   %eax
f0115918:	e8 8f 9a 01 00       	call   f012f3ac <strcconcat>
f011591d:	83 c4 10             	add    $0x10,%esp
f0115920:	83 ec 0c             	sub    $0xc,%esp
f0115923:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115929:	50                   	push   %eax
f011592a:	e8 94 c2 fe ff       	call   f0101bc3 <execute_command>
f011592f:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115932:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115935:	01 c0                	add    %eax,%eax
f0115937:	83 ec 04             	sub    $0x4,%esp
f011593a:	50                   	push   %eax
f011593b:	68 00 00 70 00       	push   $0x700000
f0115940:	ff 75 d8             	pushl  -0x28(%ebp)
f0115943:	e8 c7 32 ff ff       	call   f0108c0f <calculate_required_frames>
f0115948:	83 c4 10             	add    $0x10,%esp
f011594b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011594e:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115955:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115958:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011595b:	74 24                	je     f0115981 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011595d:	83 ec 0c             	sub    $0xc,%esp
f0115960:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115963:	ff 75 c8             	pushl  -0x38(%ebp)
f0115966:	68 48 87 13 f0       	push   $0xf0138748
f011596b:	68 01 06 00 00       	push   $0x601
f0115970:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115975:	e8 44 aa fe ff       	call   f01003be <_warn>
f011597a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011597d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115981:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115985:	74 04                	je     f011598b <test_calculate_required_frames+0x7c7>
f0115987:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011598b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011598f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115992:	83 ec 04             	sub    $0x4,%esp
f0115995:	50                   	push   %eax
f0115996:	68 ff ff 3f 00       	push   $0x3fffff
f011599b:	ff 75 d8             	pushl  -0x28(%ebp)
f011599e:	e8 6c 32 ff ff       	call   f0108c0f <calculate_required_frames>
f01159a3:	83 c4 10             	add    $0x10,%esp
f01159a6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01159a9:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01159b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01159b3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01159b6:	74 24                	je     f01159dc <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01159b8:	83 ec 0c             	sub    $0xc,%esp
f01159bb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01159be:	ff 75 c8             	pushl  -0x38(%ebp)
f01159c1:	68 48 87 13 f0       	push   $0xf0138748
f01159c6:	68 0c 06 00 00       	push   $0x60c
f01159cb:	68 ce 6e 13 f0       	push   $0xf0136ece
f01159d0:	e8 e9 a9 fe ff       	call   f01003be <_warn>
f01159d5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01159dc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159e0:	74 04                	je     f01159e6 <test_calculate_required_frames+0x822>
f01159e2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01159e6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01159ea:	83 ec 0c             	sub    $0xc,%esp
f01159ed:	68 5b 78 13 f0       	push   $0xf013785b
f01159f2:	e8 3a b4 fe ff       	call   f0100e31 <cprintf>
f01159f7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01159fa:	83 ec 08             	sub    $0x8,%esp
f01159fd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115a00:	68 f4 87 13 f0       	push   $0xf01387f4
f0115a05:	e8 27 b4 fe ff       	call   f0100e31 <cprintf>
f0115a0a:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115a0d:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115a11:	75 10                	jne    f0115a23 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115a13:	83 ec 0c             	sub    $0xc,%esp
f0115a16:	68 34 88 13 f0       	push   $0xf0138834
f0115a1b:	e8 11 b4 fe ff       	call   f0100e31 <cprintf>
f0115a20:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115a23:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f0115a28:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115a2b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115a2e:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115a31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115a36:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115a39:	5b                   	pop    %ebx
f0115a3a:	5e                   	pop    %esi
f0115a3b:	5f                   	pop    %edi
f0115a3c:	5d                   	pop    %ebp
f0115a3d:	c3                   	ret    

f0115a3e <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115a3e:	55                   	push   %ebp
f0115a3f:	89 e5                	mov    %esp,%ebp
f0115a41:	57                   	push   %edi
f0115a42:	56                   	push   %esi
f0115a43:	53                   	push   %ebx
f0115a44:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115a4a:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115a4d:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f0115a52:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115a57:	89 c7                	mov    %eax,%edi
f0115a59:	89 de                	mov    %ebx,%esi
f0115a5b:	89 d1                	mov    %edx,%ecx
f0115a5d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115a5f:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115a62:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115a67:	b0 00                	mov    $0x0,%al
f0115a69:	89 d7                	mov    %edx,%edi
f0115a6b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115a6d:	6a 00                	push   $0x0
f0115a6f:	6a 0a                	push   $0xa
f0115a71:	6a 14                	push   $0x14
f0115a73:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115a76:	50                   	push   %eax
f0115a77:	e8 4f 32 ff ff       	call   f0108ccb <env_create>
f0115a7c:	83 c4 10             	add    $0x10,%esp
f0115a7f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115a82:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a85:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115a8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115a8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a91:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115a97:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115a9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115a9d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115aa0:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115aa7:	75 70 20 
f0115aaa:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115ab1:	00 00 00 
f0115ab4:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115ab7:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115abc:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ac1:	89 d7                	mov    %edx,%edi
f0115ac3:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115ac5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115ac8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115acb:	83 ec 08             	sub    $0x8,%esp
f0115ace:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115ad4:	52                   	push   %edx
f0115ad5:	50                   	push   %eax
f0115ad6:	e8 d9 97 01 00       	call   f012f2b4 <ltostr>
f0115adb:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115ade:	83 ec 04             	sub    $0x4,%esp
f0115ae1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ae7:	50                   	push   %eax
f0115ae8:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115aee:	50                   	push   %eax
f0115aef:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115af5:	50                   	push   %eax
f0115af6:	e8 b1 98 01 00       	call   f012f3ac <strcconcat>
f0115afb:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115afe:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115b05:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115b0c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115b13:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115b17:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b1e:	00 00 00 
	uint32 num_tables = 0;
f0115b21:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b28:	00 00 00 
	ClearUserSpace(proc_directory);
f0115b2b:	83 ec 0c             	sub    $0xc,%esp
f0115b2e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b31:	e8 d8 11 00 00       	call   f0116d0e <ClearUserSpace>
f0115b36:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115b39:	83 ec 0c             	sub    $0xc,%esp
f0115b3c:	68 14 87 13 f0       	push   $0xf0138714
f0115b41:	e8 eb b2 fe ff       	call   f0100e31 <cprintf>
f0115b46:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115b49:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b4c:	c1 e0 03             	shl    $0x3,%eax
f0115b4f:	89 c2                	mov    %eax,%edx
f0115b51:	83 ec 0c             	sub    $0xc,%esp
f0115b54:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b5a:	50                   	push   %eax
f0115b5b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b61:	50                   	push   %eax
f0115b62:	52                   	push   %edx
f0115b63:	6a 00                	push   $0x0
f0115b65:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b68:	e8 88 30 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115b6d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b70:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b76:	85 c0                	test   %eax,%eax
f0115b78:	74 27                	je     f0115ba1 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b80:	83 ec 0c             	sub    $0xc,%esp
f0115b83:	6a 00                	push   $0x0
f0115b85:	50                   	push   %eax
f0115b86:	68 80 88 13 f0       	push   $0xf0138880
f0115b8b:	68 41 06 00 00       	push   $0x641
f0115b90:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115b95:	e8 24 a8 fe ff       	call   f01003be <_warn>
f0115b9a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b9d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ba1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ba7:	85 c0                	test   %eax,%eax
f0115ba9:	74 27                	je     f0115bd2 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115bab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bb1:	83 ec 0c             	sub    $0xc,%esp
f0115bb4:	6a 00                	push   $0x0
f0115bb6:	50                   	push   %eax
f0115bb7:	68 e0 88 13 f0       	push   $0xf01388e0
f0115bbc:	68 46 06 00 00       	push   $0x646
f0115bc1:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115bc6:	e8 f3 a7 fe ff       	call   f01003be <_warn>
f0115bcb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115bd2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bd6:	74 04                	je     f0115bdc <test_calculate_allocated_space+0x19e>
f0115bd8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115bdc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115be0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115be7:	00 00 00 
		num_pages = 0;
f0115bea:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bf1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115bf4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115bf7:	c1 e0 02             	shl    $0x2,%eax
f0115bfa:	89 c2                	mov    %eax,%edx
f0115bfc:	83 ec 0c             	sub    $0xc,%esp
f0115bff:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c05:	50                   	push   %eax
f0115c06:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c0c:	50                   	push   %eax
f0115c0d:	52                   	push   %edx
f0115c0e:	6a 00                	push   $0x0
f0115c10:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c13:	e8 dd 2f ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115c18:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c1b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c21:	85 c0                	test   %eax,%eax
f0115c23:	74 27                	je     f0115c4c <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c25:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c2b:	83 ec 0c             	sub    $0xc,%esp
f0115c2e:	6a 00                	push   $0x0
f0115c30:	50                   	push   %eax
f0115c31:	68 80 88 13 f0       	push   $0xf0138880
f0115c36:	68 52 06 00 00       	push   $0x652
f0115c3b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115c40:	e8 79 a7 fe ff       	call   f01003be <_warn>
f0115c45:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c48:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c4c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c52:	85 c0                	test   %eax,%eax
f0115c54:	74 27                	je     f0115c7d <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c56:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c5c:	83 ec 0c             	sub    $0xc,%esp
f0115c5f:	6a 00                	push   $0x0
f0115c61:	50                   	push   %eax
f0115c62:	68 e0 88 13 f0       	push   $0xf01388e0
f0115c67:	68 57 06 00 00       	push   $0x657
f0115c6c:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115c71:	e8 48 a7 fe ff       	call   f01003be <_warn>
f0115c76:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c79:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c7d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c81:	74 04                	je     f0115c87 <test_calculate_allocated_space+0x249>
f0115c83:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c87:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115c8b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c92:	00 00 00 
		num_pages = 0;
f0115c95:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c9c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115c9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ca2:	c1 e0 0a             	shl    $0xa,%eax
f0115ca5:	89 c2                	mov    %eax,%edx
f0115ca7:	83 ec 0c             	sub    $0xc,%esp
f0115caa:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cb0:	50                   	push   %eax
f0115cb1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cb7:	50                   	push   %eax
f0115cb8:	52                   	push   %edx
f0115cb9:	6a 00                	push   $0x0
f0115cbb:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cbe:	e8 32 2f ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115cc3:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115cc6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ccc:	85 c0                	test   %eax,%eax
f0115cce:	74 27                	je     f0115cf7 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cd0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cd6:	83 ec 0c             	sub    $0xc,%esp
f0115cd9:	6a 00                	push   $0x0
f0115cdb:	50                   	push   %eax
f0115cdc:	68 80 88 13 f0       	push   $0xf0138880
f0115ce1:	68 63 06 00 00       	push   $0x663
f0115ce6:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115ceb:	e8 ce a6 fe ff       	call   f01003be <_warn>
f0115cf0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cf3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115cf7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cfd:	85 c0                	test   %eax,%eax
f0115cff:	74 27                	je     f0115d28 <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d01:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d07:	83 ec 0c             	sub    $0xc,%esp
f0115d0a:	6a 00                	push   $0x0
f0115d0c:	50                   	push   %eax
f0115d0d:	68 e0 88 13 f0       	push   $0xf01388e0
f0115d12:	68 68 06 00 00       	push   $0x668
f0115d17:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115d1c:	e8 9d a6 fe ff       	call   f01003be <_warn>
f0115d21:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d24:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d28:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d2c:	74 04                	je     f0115d32 <test_calculate_allocated_space+0x2f4>
f0115d2e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d32:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115d36:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d3d:	00 00 00 
		num_pages = 0;
f0115d40:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d47:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115d4a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115d4d:	89 d0                	mov    %edx,%eax
f0115d4f:	01 c0                	add    %eax,%eax
f0115d51:	01 d0                	add    %edx,%eax
f0115d53:	01 c0                	add    %eax,%eax
f0115d55:	05 00 10 00 00       	add    $0x1000,%eax
f0115d5a:	89 c2                	mov    %eax,%edx
f0115d5c:	83 ec 0c             	sub    $0xc,%esp
f0115d5f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d65:	50                   	push   %eax
f0115d66:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d6c:	50                   	push   %eax
f0115d6d:	52                   	push   %edx
f0115d6e:	68 00 10 00 00       	push   $0x1000
f0115d73:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d76:	e8 7a 2e ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115d7b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d7e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d84:	85 c0                	test   %eax,%eax
f0115d86:	74 27                	je     f0115daf <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d8e:	83 ec 0c             	sub    $0xc,%esp
f0115d91:	6a 00                	push   $0x0
f0115d93:	50                   	push   %eax
f0115d94:	68 80 88 13 f0       	push   $0xf0138880
f0115d99:	68 75 06 00 00       	push   $0x675
f0115d9e:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115da3:	e8 16 a6 fe ff       	call   f01003be <_warn>
f0115da8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115daf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115db5:	85 c0                	test   %eax,%eax
f0115db7:	74 27                	je     f0115de0 <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115db9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dbf:	83 ec 0c             	sub    $0xc,%esp
f0115dc2:	6a 00                	push   $0x0
f0115dc4:	50                   	push   %eax
f0115dc5:	68 e0 88 13 f0       	push   $0xf01388e0
f0115dca:	68 7a 06 00 00       	push   $0x67a
f0115dcf:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115dd4:	e8 e5 a5 fe ff       	call   f01003be <_warn>
f0115dd9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ddc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115de0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115de4:	74 04                	je     f0115dea <test_calculate_allocated_space+0x3ac>
f0115de6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115dee:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115df5:	00 00 00 
		num_pages = 0;
f0115df8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115dff:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115e02:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115e05:	89 c2                	mov    %eax,%edx
f0115e07:	01 d2                	add    %edx,%edx
f0115e09:	01 d0                	add    %edx,%eax
f0115e0b:	05 00 18 00 00       	add    $0x1800,%eax
f0115e10:	89 c2                	mov    %eax,%edx
f0115e12:	83 ec 0c             	sub    $0xc,%esp
f0115e15:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e1b:	50                   	push   %eax
f0115e1c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e22:	50                   	push   %eax
f0115e23:	52                   	push   %edx
f0115e24:	68 00 18 00 00       	push   $0x1800
f0115e29:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e2c:	e8 c4 2d ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115e31:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e34:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e3a:	85 c0                	test   %eax,%eax
f0115e3c:	74 27                	je     f0115e65 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e3e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e44:	83 ec 0c             	sub    $0xc,%esp
f0115e47:	6a 00                	push   $0x0
f0115e49:	50                   	push   %eax
f0115e4a:	68 80 88 13 f0       	push   $0xf0138880
f0115e4f:	68 86 06 00 00       	push   $0x686
f0115e54:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115e59:	e8 60 a5 fe ff       	call   f01003be <_warn>
f0115e5e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e61:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e65:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e6b:	85 c0                	test   %eax,%eax
f0115e6d:	74 27                	je     f0115e96 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e6f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e75:	83 ec 0c             	sub    $0xc,%esp
f0115e78:	6a 00                	push   $0x0
f0115e7a:	50                   	push   %eax
f0115e7b:	68 e0 88 13 f0       	push   $0xf01388e0
f0115e80:	68 8b 06 00 00       	push   $0x68b
f0115e85:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115e8a:	e8 2f a5 fe ff       	call   f01003be <_warn>
f0115e8f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e92:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e96:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e9a:	74 04                	je     f0115ea0 <test_calculate_allocated_space+0x462>
f0115e9c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ea0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115ea4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115eab:	00 00 00 
		num_pages = 0;
f0115eae:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115eb5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115eb8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115ebb:	89 d0                	mov    %edx,%eax
f0115ebd:	c1 e0 02             	shl    $0x2,%eax
f0115ec0:	01 d0                	add    %edx,%eax
f0115ec2:	01 c0                	add    %eax,%eax
f0115ec4:	05 00 00 40 00       	add    $0x400000,%eax
f0115ec9:	89 c2                	mov    %eax,%edx
f0115ecb:	83 ec 0c             	sub    $0xc,%esp
f0115ece:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ed4:	50                   	push   %eax
f0115ed5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115edb:	50                   	push   %eax
f0115edc:	52                   	push   %edx
f0115edd:	68 00 00 40 00       	push   $0x400000
f0115ee2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ee5:	e8 0b 2d ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115eea:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115eed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ef3:	85 c0                	test   %eax,%eax
f0115ef5:	74 27                	je     f0115f1e <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ef7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115efd:	83 ec 0c             	sub    $0xc,%esp
f0115f00:	6a 00                	push   $0x0
f0115f02:	50                   	push   %eax
f0115f03:	68 80 88 13 f0       	push   $0xf0138880
f0115f08:	68 97 06 00 00       	push   $0x697
f0115f0d:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115f12:	e8 a7 a4 fe ff       	call   f01003be <_warn>
f0115f17:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f1a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f1e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f24:	85 c0                	test   %eax,%eax
f0115f26:	74 27                	je     f0115f4f <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f2e:	83 ec 0c             	sub    $0xc,%esp
f0115f31:	6a 00                	push   $0x0
f0115f33:	50                   	push   %eax
f0115f34:	68 e0 88 13 f0       	push   $0xf01388e0
f0115f39:	68 9c 06 00 00       	push   $0x69c
f0115f3e:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115f43:	e8 76 a4 fe ff       	call   f01003be <_warn>
f0115f48:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f4f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f53:	74 04                	je     f0115f59 <test_calculate_allocated_space+0x51b>
f0115f55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f59:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115f5d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f64:	00 00 00 
		num_pages = 0;
f0115f67:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f6e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115f71:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f74:	05 00 00 38 00       	add    $0x380000,%eax
f0115f79:	01 c0                	add    %eax,%eax
f0115f7b:	89 c2                	mov    %eax,%edx
f0115f7d:	83 ec 0c             	sub    $0xc,%esp
f0115f80:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f86:	50                   	push   %eax
f0115f87:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f8d:	50                   	push   %eax
f0115f8e:	52                   	push   %edx
f0115f8f:	68 00 00 70 00       	push   $0x700000
f0115f94:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f97:	e8 59 2c ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115f9c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fa5:	85 c0                	test   %eax,%eax
f0115fa7:	74 27                	je     f0115fd0 <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115fa9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115faf:	83 ec 0c             	sub    $0xc,%esp
f0115fb2:	6a 00                	push   $0x0
f0115fb4:	50                   	push   %eax
f0115fb5:	68 80 88 13 f0       	push   $0xf0138880
f0115fba:	68 a9 06 00 00       	push   $0x6a9
f0115fbf:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115fc4:	e8 f5 a3 fe ff       	call   f01003be <_warn>
f0115fc9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fcc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115fd0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fd6:	85 c0                	test   %eax,%eax
f0115fd8:	74 27                	je     f0116001 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115fda:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fe0:	83 ec 0c             	sub    $0xc,%esp
f0115fe3:	6a 00                	push   $0x0
f0115fe5:	50                   	push   %eax
f0115fe6:	68 e0 88 13 f0       	push   $0xf01388e0
f0115feb:	68 ae 06 00 00       	push   $0x6ae
f0115ff0:	68 ce 6e 13 f0       	push   $0xf0136ece
f0115ff5:	e8 c4 a3 fe ff       	call   f01003be <_warn>
f0115ffa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ffd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116001:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116005:	74 04                	je     f011600b <test_calculate_allocated_space+0x5cd>
f0116007:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011600b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011600f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116016:	00 00 00 
		num_pages = 0;
f0116019:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116020:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116023:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116026:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011602b:	89 c2                	mov    %eax,%edx
f011602d:	83 ec 0c             	sub    $0xc,%esp
f0116030:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116036:	50                   	push   %eax
f0116037:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011603d:	50                   	push   %eax
f011603e:	52                   	push   %edx
f011603f:	68 ff ff 3f 00       	push   $0x3fffff
f0116044:	ff 75 d8             	pushl  -0x28(%ebp)
f0116047:	e8 a9 2b ff ff       	call   f0108bf5 <calculate_allocated_space>
f011604c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011604f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116055:	85 c0                	test   %eax,%eax
f0116057:	74 27                	je     f0116080 <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116059:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011605f:	83 ec 0c             	sub    $0xc,%esp
f0116062:	6a 00                	push   $0x0
f0116064:	50                   	push   %eax
f0116065:	68 80 88 13 f0       	push   $0xf0138880
f011606a:	68 ba 06 00 00       	push   $0x6ba
f011606f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116074:	e8 45 a3 fe ff       	call   f01003be <_warn>
f0116079:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011607c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116080:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116086:	85 c0                	test   %eax,%eax
f0116088:	74 27                	je     f01160b1 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011608a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116090:	83 ec 0c             	sub    $0xc,%esp
f0116093:	6a 00                	push   $0x0
f0116095:	50                   	push   %eax
f0116096:	68 e0 88 13 f0       	push   $0xf01388e0
f011609b:	68 bf 06 00 00       	push   $0x6bf
f01160a0:	68 ce 6e 13 f0       	push   $0xf0136ece
f01160a5:	e8 14 a3 fe ff       	call   f01003be <_warn>
f01160aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01160b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160b5:	74 04                	je     f01160bb <test_calculate_allocated_space+0x67d>
f01160b7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01160bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01160bf:	83 ec 0c             	sub    $0xc,%esp
f01160c2:	68 81 82 13 f0       	push   $0xf0138281
f01160c7:	e8 65 ad fe ff       	call   f0100e31 <cprintf>
f01160cc:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01160cf:	83 ec 0c             	sub    $0xc,%esp
f01160d2:	68 a0 87 13 f0       	push   $0xf01387a0
f01160d7:	e8 55 ad fe ff       	call   f0100e31 <cprintf>
f01160dc:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01160df:	83 ec 04             	sub    $0x4,%esp
f01160e2:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01160e8:	50                   	push   %eax
f01160e9:	68 3a 76 13 f0       	push   $0xf013763a
f01160ee:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160f4:	50                   	push   %eax
f01160f5:	e8 b2 92 01 00       	call   f012f3ac <strcconcat>
f01160fa:	83 c4 10             	add    $0x10,%esp
f01160fd:	83 ec 0c             	sub    $0xc,%esp
f0116100:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116106:	50                   	push   %eax
f0116107:	e8 b7 ba fe ff       	call   f0101bc3 <execute_command>
f011610c:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011610f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116116:	00 00 00 
		num_pages = 0;
f0116119:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116120:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0116123:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116126:	c1 e0 03             	shl    $0x3,%eax
f0116129:	89 c2                	mov    %eax,%edx
f011612b:	83 ec 0c             	sub    $0xc,%esp
f011612e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116134:	50                   	push   %eax
f0116135:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011613b:	50                   	push   %eax
f011613c:	52                   	push   %edx
f011613d:	6a 00                	push   $0x0
f011613f:	ff 75 d8             	pushl  -0x28(%ebp)
f0116142:	e8 ae 2a ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116147:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011614a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0116151:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116158:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011615e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116161:	74 28                	je     f011618b <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116163:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116169:	83 ec 0c             	sub    $0xc,%esp
f011616c:	ff 75 c8             	pushl  -0x38(%ebp)
f011616f:	50                   	push   %eax
f0116170:	68 80 88 13 f0       	push   $0xf0138880
f0116175:	68 d6 06 00 00       	push   $0x6d6
f011617a:	68 ce 6e 13 f0       	push   $0xf0136ece
f011617f:	e8 3a a2 fe ff       	call   f01003be <_warn>
f0116184:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116187:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011618b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116191:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116194:	74 28                	je     f01161be <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116196:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011619c:	83 ec 0c             	sub    $0xc,%esp
f011619f:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161a2:	50                   	push   %eax
f01161a3:	68 e0 88 13 f0       	push   $0xf01388e0
f01161a8:	68 db 06 00 00       	push   $0x6db
f01161ad:	68 ce 6e 13 f0       	push   $0xf0136ece
f01161b2:	e8 07 a2 fe ff       	call   f01003be <_warn>
f01161b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161c2:	74 04                	je     f01161c8 <test_calculate_allocated_space+0x78a>
f01161c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01161cc:	83 ec 04             	sub    $0x4,%esp
f01161cf:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01161d5:	50                   	push   %eax
f01161d6:	68 47 76 13 f0       	push   $0xf0137647
f01161db:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01161e1:	50                   	push   %eax
f01161e2:	e8 c5 91 01 00       	call   f012f3ac <strcconcat>
f01161e7:	83 c4 10             	add    $0x10,%esp
f01161ea:	83 ec 0c             	sub    $0xc,%esp
f01161ed:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01161f3:	50                   	push   %eax
f01161f4:	e8 ca b9 fe ff       	call   f0101bc3 <execute_command>
f01161f9:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01161fc:	83 ec 04             	sub    $0x4,%esp
f01161ff:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116205:	50                   	push   %eax
f0116206:	68 d4 87 13 f0       	push   $0xf01387d4
f011620b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116211:	50                   	push   %eax
f0116212:	e8 95 91 01 00       	call   f012f3ac <strcconcat>
f0116217:	83 c4 10             	add    $0x10,%esp
f011621a:	83 ec 0c             	sub    $0xc,%esp
f011621d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116223:	50                   	push   %eax
f0116224:	e8 9a b9 fe ff       	call   f0101bc3 <execute_command>
f0116229:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011622c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116233:	00 00 00 
		num_pages = 0;
f0116236:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011623d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116240:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116243:	c1 e0 03             	shl    $0x3,%eax
f0116246:	89 c2                	mov    %eax,%edx
f0116248:	83 ec 0c             	sub    $0xc,%esp
f011624b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116251:	50                   	push   %eax
f0116252:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116258:	50                   	push   %eax
f0116259:	52                   	push   %edx
f011625a:	6a 00                	push   $0x0
f011625c:	ff 75 d8             	pushl  -0x28(%ebp)
f011625f:	e8 91 29 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116264:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116267:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011626e:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116275:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011627b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011627e:	74 28                	je     f01162a8 <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116280:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116286:	83 ec 0c             	sub    $0xc,%esp
f0116289:	ff 75 c8             	pushl  -0x38(%ebp)
f011628c:	50                   	push   %eax
f011628d:	68 80 88 13 f0       	push   $0xf0138880
f0116292:	68 ec 06 00 00       	push   $0x6ec
f0116297:	68 ce 6e 13 f0       	push   $0xf0136ece
f011629c:	e8 1d a1 fe ff       	call   f01003be <_warn>
f01162a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162ae:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01162b1:	74 28                	je     f01162db <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01162b3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162b9:	83 ec 0c             	sub    $0xc,%esp
f01162bc:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162bf:	50                   	push   %eax
f01162c0:	68 e0 88 13 f0       	push   $0xf01388e0
f01162c5:	68 f1 06 00 00       	push   $0x6f1
f01162ca:	68 ce 6e 13 f0       	push   $0xf0136ece
f01162cf:	e8 ea a0 fe ff       	call   f01003be <_warn>
f01162d4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01162db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162df:	74 04                	je     f01162e5 <test_calculate_allocated_space+0x8a7>
f01162e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01162e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01162e9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162f0:	00 00 00 
		num_pages = 0;
f01162f3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162fa:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01162fd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116300:	c1 e0 0a             	shl    $0xa,%eax
f0116303:	89 c2                	mov    %eax,%edx
f0116305:	83 ec 0c             	sub    $0xc,%esp
f0116308:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011630e:	50                   	push   %eax
f011630f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116315:	50                   	push   %eax
f0116316:	52                   	push   %edx
f0116317:	6a 00                	push   $0x0
f0116319:	ff 75 d8             	pushl  -0x28(%ebp)
f011631c:	e8 d4 28 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116321:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0116324:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011632b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116332:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116338:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011633b:	74 28                	je     f0116365 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011633d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116343:	83 ec 0c             	sub    $0xc,%esp
f0116346:	ff 75 c8             	pushl  -0x38(%ebp)
f0116349:	50                   	push   %eax
f011634a:	68 80 88 13 f0       	push   $0xf0138880
f011634f:	68 ff 06 00 00       	push   $0x6ff
f0116354:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116359:	e8 60 a0 fe ff       	call   f01003be <_warn>
f011635e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116361:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116365:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011636b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011636e:	74 28                	je     f0116398 <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116370:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116376:	83 ec 0c             	sub    $0xc,%esp
f0116379:	ff 75 c4             	pushl  -0x3c(%ebp)
f011637c:	50                   	push   %eax
f011637d:	68 e0 88 13 f0       	push   $0xf01388e0
f0116382:	68 04 07 00 00       	push   $0x704
f0116387:	68 ce 6e 13 f0       	push   $0xf0136ece
f011638c:	e8 2d a0 fe ff       	call   f01003be <_warn>
f0116391:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116394:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116398:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011639c:	74 04                	je     f01163a2 <test_calculate_allocated_space+0x964>
f011639e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01163a2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01163a6:	83 ec 04             	sub    $0x4,%esp
f01163a9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163af:	50                   	push   %eax
f01163b0:	68 e0 87 13 f0       	push   $0xf01387e0
f01163b5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01163bb:	50                   	push   %eax
f01163bc:	e8 eb 8f 01 00       	call   f012f3ac <strcconcat>
f01163c1:	83 c4 10             	add    $0x10,%esp
f01163c4:	83 ec 0c             	sub    $0xc,%esp
f01163c7:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163cd:	50                   	push   %eax
f01163ce:	e8 f0 b7 fe ff       	call   f0101bc3 <execute_command>
f01163d3:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01163d6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163dd:	00 00 00 
		num_pages = 0;
f01163e0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163e7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01163ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01163ed:	89 c2                	mov    %eax,%edx
f01163ef:	01 d2                	add    %edx,%edx
f01163f1:	01 d0                	add    %edx,%eax
f01163f3:	05 00 18 00 00       	add    $0x1800,%eax
f01163f8:	89 c2                	mov    %eax,%edx
f01163fa:	83 ec 0c             	sub    $0xc,%esp
f01163fd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116403:	50                   	push   %eax
f0116404:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011640a:	50                   	push   %eax
f011640b:	52                   	push   %edx
f011640c:	68 00 18 00 00       	push   $0x1800
f0116411:	ff 75 d8             	pushl  -0x28(%ebp)
f0116414:	e8 dc 27 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116419:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011641c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116423:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011642a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116430:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116433:	74 28                	je     f011645d <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116435:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011643b:	83 ec 0c             	sub    $0xc,%esp
f011643e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116441:	50                   	push   %eax
f0116442:	68 80 88 13 f0       	push   $0xf0138880
f0116447:	68 15 07 00 00       	push   $0x715
f011644c:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116451:	e8 68 9f fe ff       	call   f01003be <_warn>
f0116456:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116459:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011645d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116463:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116466:	74 28                	je     f0116490 <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116468:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011646e:	83 ec 0c             	sub    $0xc,%esp
f0116471:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116474:	50                   	push   %eax
f0116475:	68 e0 88 13 f0       	push   $0xf01388e0
f011647a:	68 1a 07 00 00       	push   $0x71a
f011647f:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116484:	e8 35 9f fe ff       	call   f01003be <_warn>
f0116489:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011648c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116490:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116494:	74 04                	je     f011649a <test_calculate_allocated_space+0xa5c>
f0116496:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011649a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011649e:	83 ec 04             	sub    $0x4,%esp
f01164a1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164a7:	50                   	push   %eax
f01164a8:	68 a0 78 13 f0       	push   $0xf01378a0
f01164ad:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01164b3:	50                   	push   %eax
f01164b4:	e8 f3 8e 01 00       	call   f012f3ac <strcconcat>
f01164b9:	83 c4 10             	add    $0x10,%esp
f01164bc:	83 ec 0c             	sub    $0xc,%esp
f01164bf:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164c5:	50                   	push   %eax
f01164c6:	e8 f8 b6 fe ff       	call   f0101bc3 <execute_command>
f01164cb:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01164ce:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164d5:	00 00 00 
		num_pages = 0;
f01164d8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164df:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01164e2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01164e5:	89 d0                	mov    %edx,%eax
f01164e7:	c1 e0 02             	shl    $0x2,%eax
f01164ea:	01 d0                	add    %edx,%eax
f01164ec:	01 c0                	add    %eax,%eax
f01164ee:	05 00 00 40 00       	add    $0x400000,%eax
f01164f3:	89 c2                	mov    %eax,%edx
f01164f5:	83 ec 0c             	sub    $0xc,%esp
f01164f8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164fe:	50                   	push   %eax
f01164ff:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116505:	50                   	push   %eax
f0116506:	52                   	push   %edx
f0116507:	68 00 00 40 00       	push   $0x400000
f011650c:	ff 75 d8             	pushl  -0x28(%ebp)
f011650f:	e8 e1 26 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116514:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116517:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011651e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116525:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011652b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011652e:	74 28                	je     f0116558 <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116530:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116536:	83 ec 0c             	sub    $0xc,%esp
f0116539:	ff 75 c8             	pushl  -0x38(%ebp)
f011653c:	50                   	push   %eax
f011653d:	68 80 88 13 f0       	push   $0xf0138880
f0116542:	68 2a 07 00 00       	push   $0x72a
f0116547:	68 ce 6e 13 f0       	push   $0xf0136ece
f011654c:	e8 6d 9e fe ff       	call   f01003be <_warn>
f0116551:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116554:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116558:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011655e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116561:	74 28                	je     f011658b <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116563:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116569:	83 ec 0c             	sub    $0xc,%esp
f011656c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011656f:	50                   	push   %eax
f0116570:	68 e0 88 13 f0       	push   $0xf01388e0
f0116575:	68 2f 07 00 00       	push   $0x72f
f011657a:	68 ce 6e 13 f0       	push   $0xf0136ece
f011657f:	e8 3a 9e fe ff       	call   f01003be <_warn>
f0116584:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116587:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011658b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011658f:	74 04                	je     f0116595 <test_calculate_allocated_space+0xb57>
f0116591:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116595:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116599:	83 ec 04             	sub    $0x4,%esp
f011659c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165a2:	50                   	push   %eax
f01165a3:	68 aa 78 13 f0       	push   $0xf01378aa
f01165a8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01165ae:	50                   	push   %eax
f01165af:	e8 f8 8d 01 00       	call   f012f3ac <strcconcat>
f01165b4:	83 c4 10             	add    $0x10,%esp
f01165b7:	83 ec 0c             	sub    $0xc,%esp
f01165ba:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165c0:	50                   	push   %eax
f01165c1:	e8 fd b5 fe ff       	call   f0101bc3 <execute_command>
f01165c6:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01165c9:	83 ec 04             	sub    $0x4,%esp
f01165cc:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01165d2:	50                   	push   %eax
f01165d3:	68 e8 87 13 f0       	push   $0xf01387e8
f01165d8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01165de:	50                   	push   %eax
f01165df:	e8 c8 8d 01 00       	call   f012f3ac <strcconcat>
f01165e4:	83 c4 10             	add    $0x10,%esp
f01165e7:	83 ec 0c             	sub    $0xc,%esp
f01165ea:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01165f0:	50                   	push   %eax
f01165f1:	e8 cd b5 fe ff       	call   f0101bc3 <execute_command>
f01165f6:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01165f9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116600:	00 00 00 
		num_pages = 0;
f0116603:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011660a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011660d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116610:	05 00 00 38 00       	add    $0x380000,%eax
f0116615:	01 c0                	add    %eax,%eax
f0116617:	89 c2                	mov    %eax,%edx
f0116619:	83 ec 0c             	sub    $0xc,%esp
f011661c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116622:	50                   	push   %eax
f0116623:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116629:	50                   	push   %eax
f011662a:	52                   	push   %edx
f011662b:	68 00 00 70 00       	push   $0x700000
f0116630:	ff 75 d8             	pushl  -0x28(%ebp)
f0116633:	e8 bd 25 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116638:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011663b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116642:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116649:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011664f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116652:	74 28                	je     f011667c <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116654:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011665a:	83 ec 0c             	sub    $0xc,%esp
f011665d:	ff 75 c8             	pushl  -0x38(%ebp)
f0116660:	50                   	push   %eax
f0116661:	68 80 88 13 f0       	push   $0xf0138880
f0116666:	68 41 07 00 00       	push   $0x741
f011666b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116670:	e8 49 9d fe ff       	call   f01003be <_warn>
f0116675:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116678:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011667c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116682:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116685:	74 28                	je     f01166af <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116687:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011668d:	83 ec 0c             	sub    $0xc,%esp
f0116690:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116693:	50                   	push   %eax
f0116694:	68 e0 88 13 f0       	push   $0xf01388e0
f0116699:	68 46 07 00 00       	push   $0x746
f011669e:	68 ce 6e 13 f0       	push   $0xf0136ece
f01166a3:	e8 16 9d fe ff       	call   f01003be <_warn>
f01166a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01166af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01166b3:	74 04                	je     f01166b9 <test_calculate_allocated_space+0xc7b>
f01166b5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01166b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01166bd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01166c4:	00 00 00 
		num_pages = 0;
f01166c7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01166ce:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01166d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01166d4:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01166d9:	89 c2                	mov    %eax,%edx
f01166db:	83 ec 0c             	sub    $0xc,%esp
f01166de:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01166e4:	50                   	push   %eax
f01166e5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01166eb:	50                   	push   %eax
f01166ec:	52                   	push   %edx
f01166ed:	68 ff ff 3f 00       	push   $0x3fffff
f01166f2:	ff 75 d8             	pushl  -0x28(%ebp)
f01166f5:	e8 fb 24 ff ff       	call   f0108bf5 <calculate_allocated_space>
f01166fa:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01166fd:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116704:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011670b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116711:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116714:	74 28                	je     f011673e <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116716:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011671c:	83 ec 0c             	sub    $0xc,%esp
f011671f:	ff 75 c8             	pushl  -0x38(%ebp)
f0116722:	50                   	push   %eax
f0116723:	68 80 88 13 f0       	push   $0xf0138880
f0116728:	68 54 07 00 00       	push   $0x754
f011672d:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116732:	e8 87 9c fe ff       	call   f01003be <_warn>
f0116737:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011673a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011673e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116744:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116747:	74 28                	je     f0116771 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116749:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011674f:	83 ec 0c             	sub    $0xc,%esp
f0116752:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116755:	50                   	push   %eax
f0116756:	68 e0 88 13 f0       	push   $0xf01388e0
f011675b:	68 59 07 00 00       	push   $0x759
f0116760:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116765:	e8 54 9c fe ff       	call   f01003be <_warn>
f011676a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011676d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116771:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116775:	74 04                	je     f011677b <test_calculate_allocated_space+0xd3d>
f0116777:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011677b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011677f:	83 ec 0c             	sub    $0xc,%esp
f0116782:	68 5b 78 13 f0       	push   $0xf013785b
f0116787:	e8 a5 a6 fe ff       	call   f0100e31 <cprintf>
f011678c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f011678f:	83 ec 08             	sub    $0x8,%esp
f0116792:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116795:	68 3c 89 13 f0       	push   $0xf013893c
f011679a:	e8 92 a6 fe ff       	call   f0100e31 <cprintf>
f011679f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01167a2:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01167a6:	75 10                	jne    f01167b8 <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01167a8:	83 ec 0c             	sub    $0xc,%esp
f01167ab:	68 7c 89 13 f0       	push   $0xf013897c
f01167b0:	e8 7c a6 fe ff       	call   f0100e31 <cprintf>
f01167b5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01167b8:	a1 40 bf 2b f0       	mov    0xf02bbf40,%eax
f01167bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01167c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01167c3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01167c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01167cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01167ce:	5b                   	pop    %ebx
f01167cf:	5e                   	pop    %esi
f01167d0:	5f                   	pop    %edi
f01167d1:	5d                   	pop    %ebp
f01167d2:	c3                   	ret    

f01167d3 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01167d3:	55                   	push   %ebp
f01167d4:	89 e5                	mov    %esp,%ebp
f01167d6:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01167d9:	8b 45 10             	mov    0x10(%ebp),%eax
f01167dc:	ba 01 00 00 00       	mov    $0x1,%edx
f01167e1:	88 c1                	mov    %al,%cl
f01167e3:	d3 e2                	shl    %cl,%edx
f01167e5:	89 d0                	mov    %edx,%eax
f01167e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01167ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167ed:	c1 e8 16             	shr    $0x16,%eax
f01167f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01167fa:	01 d0                	add    %edx,%eax
f01167fc:	8b 00                	mov    (%eax),%eax
f01167fe:	83 e0 01             	and    $0x1,%eax
f0116801:	85 c0                	test   %eax,%eax
f0116803:	75 07                	jne    f011680c <CB+0x39>
f0116805:	b8 00 00 00 00       	mov    $0x0,%eax
f011680a:	eb 76                	jmp    f0116882 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011680c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011680f:	c1 e8 16             	shr    $0x16,%eax
f0116812:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116819:	8b 45 08             	mov    0x8(%ebp),%eax
f011681c:	01 d0                	add    %edx,%eax
f011681e:	8b 00                	mov    (%eax),%eax
f0116820:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116825:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116828:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011682b:	c1 e8 0c             	shr    $0xc,%eax
f011682e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116831:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116836:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116839:	72 17                	jb     f0116852 <CB+0x7f>
f011683b:	ff 75 f0             	pushl  -0x10(%ebp)
f011683e:	68 c8 89 13 f0       	push   $0xf01389c8
f0116843:	68 74 07 00 00       	push   $0x774
f0116848:	68 ce 6e 13 f0       	push   $0xf0136ece
f011684d:	e8 5e 99 fe ff       	call   f01001b0 <_panic>
f0116852:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116855:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011685a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011685d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116860:	c1 e8 0c             	shr    $0xc,%eax
f0116863:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116868:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011686f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116872:	01 d0                	add    %edx,%eax
f0116874:	8b 00                	mov    (%eax),%eax
f0116876:	23 45 f4             	and    -0xc(%ebp),%eax
f0116879:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011687c:	0f 94 c0             	sete   %al
f011687f:	0f b6 c0             	movzbl %al,%eax
}
f0116882:	c9                   	leave  
f0116883:	c3                   	ret    

f0116884 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116884:	55                   	push   %ebp
f0116885:	89 e5                	mov    %esp,%ebp
f0116887:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011688a:	8b 45 10             	mov    0x10(%ebp),%eax
f011688d:	ba 01 00 00 00       	mov    $0x1,%edx
f0116892:	88 c1                	mov    %al,%cl
f0116894:	d3 e2                	shl    %cl,%edx
f0116896:	89 d0                	mov    %edx,%eax
f0116898:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011689b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011689e:	c1 e8 16             	shr    $0x16,%eax
f01168a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01168ab:	01 d0                	add    %edx,%eax
f01168ad:	8b 00                	mov    (%eax),%eax
f01168af:	83 e0 01             	and    $0x1,%eax
f01168b2:	85 c0                	test   %eax,%eax
f01168b4:	75 0a                	jne    f01168c0 <SB+0x3c>
f01168b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01168bb:	e9 cd 00 00 00       	jmp    f011698d <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01168c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168c3:	c1 e8 16             	shr    $0x16,%eax
f01168c6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01168d0:	01 d0                	add    %edx,%eax
f01168d2:	8b 00                	mov    (%eax),%eax
f01168d4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01168dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01168df:	c1 e8 0c             	shr    $0xc,%eax
f01168e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01168e5:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01168ea:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01168ed:	72 17                	jb     f0116906 <SB+0x82>
f01168ef:	ff 75 f0             	pushl  -0x10(%ebp)
f01168f2:	68 c8 89 13 f0       	push   $0xf01389c8
f01168f7:	68 7c 07 00 00       	push   $0x77c
f01168fc:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116901:	e8 aa 98 fe ff       	call   f01001b0 <_panic>
f0116906:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116909:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011690e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116911:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116915:	74 3c                	je     f0116953 <SB+0xcf>
f0116917:	8b 45 0c             	mov    0xc(%ebp),%eax
f011691a:	c1 e8 0c             	shr    $0xc,%eax
f011691d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116922:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116929:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011692c:	01 d0                	add    %edx,%eax
f011692e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116931:	c1 ea 0c             	shr    $0xc,%edx
f0116934:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011693a:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116941:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116944:	01 ca                	add    %ecx,%edx
f0116946:	8b 12                	mov    (%edx),%edx
f0116948:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011694b:	f7 d1                	not    %ecx
f011694d:	21 ca                	and    %ecx,%edx
f011694f:	89 10                	mov    %edx,(%eax)
f0116951:	eb 35                	jmp    f0116988 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116953:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116956:	c1 e8 0c             	shr    $0xc,%eax
f0116959:	25 ff 03 00 00       	and    $0x3ff,%eax
f011695e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116965:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116968:	01 c2                	add    %eax,%edx
f011696a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011696d:	c1 e8 0c             	shr    $0xc,%eax
f0116970:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116975:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011697c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011697f:	01 c8                	add    %ecx,%eax
f0116981:	8b 00                	mov    (%eax),%eax
f0116983:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116986:	89 02                	mov    %eax,(%edx)
	return 0;
f0116988:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011698d:	c9                   	leave  
f011698e:	c3                   	ret    

f011698f <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011698f:	55                   	push   %ebp
f0116990:	89 e5                	mov    %esp,%ebp
f0116992:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116995:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116998:	c1 e8 16             	shr    $0x16,%eax
f011699b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01169a5:	01 d0                	add    %edx,%eax
f01169a7:	8b 00                	mov    (%eax),%eax
f01169a9:	83 e0 01             	and    $0x1,%eax
f01169ac:	85 c0                	test   %eax,%eax
f01169ae:	75 0a                	jne    f01169ba <CPs+0x2b>
f01169b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01169b5:	e9 b8 00 00 00       	jmp    f0116a72 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01169ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169bd:	c1 e8 16             	shr    $0x16,%eax
f01169c0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01169ca:	01 d0                	add    %edx,%eax
f01169cc:	8b 00                	mov    (%eax),%eax
f01169ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01169d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01169d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01169d9:	c1 e8 0c             	shr    $0xc,%eax
f01169dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01169df:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f01169e4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01169e7:	72 17                	jb     f0116a00 <CPs+0x71>
f01169e9:	ff 75 f0             	pushl  -0x10(%ebp)
f01169ec:	68 c8 89 13 f0       	push   $0xf01389c8
f01169f1:	68 85 07 00 00       	push   $0x785
f01169f6:	68 ce 6e 13 f0       	push   $0xf0136ece
f01169fb:	e8 b0 97 fe ff       	call   f01001b0 <_panic>
f0116a00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a03:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116a08:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0116a0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116a12:	eb 53                	jmp    f0116a67 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a17:	ba 01 00 00 00       	mov    $0x1,%edx
f0116a1c:	88 c1                	mov    %al,%cl
f0116a1e:	d3 e2                	shl    %cl,%edx
f0116a20:	89 d0                	mov    %edx,%eax
f0116a22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116a25:	8b 45 14             	mov    0x14(%ebp),%eax
f0116a28:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116a2b:	85 c0                	test   %eax,%eax
f0116a2d:	74 34                	je     f0116a63 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a32:	c1 e8 0c             	shr    $0xc,%eax
f0116a35:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116a3a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a41:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a44:	01 d0                	add    %edx,%eax
f0116a46:	8b 00                	mov    (%eax),%eax
f0116a48:	33 45 10             	xor    0x10(%ebp),%eax
f0116a4b:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116a4e:	85 c0                	test   %eax,%eax
f0116a50:	0f 94 c0             	sete   %al
f0116a53:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0116a56:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116a5a:	75 08                	jne    f0116a64 <CPs+0xd5>
f0116a5c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a61:	eb 0f                	jmp    f0116a72 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116a63:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116a64:	ff 45 f4             	incl   -0xc(%ebp)
f0116a67:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116a6b:	7e a7                	jle    f0116a14 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116a6d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116a72:	c9                   	leave  
f0116a73:	c3                   	ret    

f0116a74 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116a74:	55                   	push   %ebp
f0116a75:	89 e5                	mov    %esp,%ebp
f0116a77:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116a7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a7d:	c1 e8 16             	shr    $0x16,%eax
f0116a80:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a8a:	01 d0                	add    %edx,%eax
f0116a8c:	8b 00                	mov    (%eax),%eax
f0116a8e:	83 e0 01             	and    $0x1,%eax
f0116a91:	85 c0                	test   %eax,%eax
f0116a93:	75 07                	jne    f0116a9c <CA+0x28>
f0116a95:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a9a:	eb 6f                	jmp    f0116b0b <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a9f:	c1 e8 16             	shr    $0x16,%eax
f0116aa2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116aa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0116aac:	01 d0                	add    %edx,%eax
f0116aae:	8b 00                	mov    (%eax),%eax
f0116ab0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116abb:	c1 e8 0c             	shr    $0xc,%eax
f0116abe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116ac1:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116ac6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116ac9:	72 17                	jb     f0116ae2 <CA+0x6e>
f0116acb:	ff 75 f4             	pushl  -0xc(%ebp)
f0116ace:	68 c8 89 13 f0       	push   $0xf01389c8
f0116ad3:	68 94 07 00 00       	push   $0x794
f0116ad8:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116add:	e8 ce 96 fe ff       	call   f01001b0 <_panic>
f0116ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ae5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116aea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116aed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116af0:	c1 e8 0c             	shr    $0xc,%eax
f0116af3:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116af8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b02:	01 d0                	add    %edx,%eax
f0116b04:	8b 00                	mov    (%eax),%eax
f0116b06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116b0b:	c9                   	leave  
f0116b0c:	c3                   	ret    

f0116b0d <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116b0d:	55                   	push   %ebp
f0116b0e:	89 e5                	mov    %esp,%ebp
f0116b10:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116b13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b16:	c1 e8 16             	shr    $0x16,%eax
f0116b19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b20:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b23:	01 d0                	add    %edx,%eax
f0116b25:	8b 00                	mov    (%eax),%eax
f0116b27:	83 e0 01             	and    $0x1,%eax
f0116b2a:	85 c0                	test   %eax,%eax
f0116b2c:	75 07                	jne    f0116b35 <CE+0x28>
f0116b2e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b33:	eb 7a                	jmp    f0116baf <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116b35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b38:	c1 e8 16             	shr    $0x16,%eax
f0116b3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b42:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b45:	01 d0                	add    %edx,%eax
f0116b47:	8b 00                	mov    (%eax),%eax
f0116b49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116b4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b54:	c1 e8 0c             	shr    $0xc,%eax
f0116b57:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b5a:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116b5f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116b62:	72 17                	jb     f0116b7b <CE+0x6e>
f0116b64:	ff 75 f4             	pushl  -0xc(%ebp)
f0116b67:	68 c8 89 13 f0       	push   $0xf01389c8
f0116b6c:	68 9b 07 00 00       	push   $0x79b
f0116b71:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116b76:	e8 35 96 fe ff       	call   f01001b0 <_panic>
f0116b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b7e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116b86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b89:	c1 e8 0c             	shr    $0xc,%eax
f0116b8c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b9b:	01 d0                	add    %edx,%eax
f0116b9d:	8b 00                	mov    (%eax),%eax
f0116b9f:	85 c0                	test   %eax,%eax
f0116ba1:	74 07                	je     f0116baa <CE+0x9d>
f0116ba3:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ba8:	eb 05                	jmp    f0116baf <CE+0xa2>
	return 1;
f0116baa:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116baf:	c9                   	leave  
f0116bb0:	c3                   	ret    

f0116bb1 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116bb1:	55                   	push   %ebp
f0116bb2:	89 e5                	mov    %esp,%ebp
f0116bb4:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116bba:	c1 e8 16             	shr    $0x16,%eax
f0116bbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bc7:	01 d0                	add    %edx,%eax
f0116bc9:	8b 00                	mov    (%eax),%eax
f0116bcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116bd1:	83 e0 01             	and    $0x1,%eax
f0116bd4:	85 c0                	test   %eax,%eax
f0116bd6:	0f 84 92 00 00 00    	je     f0116c6e <CP+0xbd>
	{
		uint32 *t = NULL;
f0116bdc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116be6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116beb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116bee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116bf1:	c1 e8 0c             	shr    $0xc,%eax
f0116bf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116bf7:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116bfc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116bff:	72 17                	jb     f0116c18 <CP+0x67>
f0116c01:	ff 75 ec             	pushl  -0x14(%ebp)
f0116c04:	68 c8 89 13 f0       	push   $0xf01389c8
f0116c09:	68 a7 07 00 00       	push   $0x7a7
f0116c0e:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116c13:	e8 98 95 fe ff       	call   f01001b0 <_panic>
f0116c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116c1b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116c20:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116c23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c26:	c1 e8 0c             	shr    $0xc,%eax
f0116c29:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c38:	01 d0                	add    %edx,%eax
f0116c3a:	8b 00                	mov    (%eax),%eax
f0116c3c:	23 45 10             	and    0x10(%ebp),%eax
f0116c3f:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116c42:	75 2a                	jne    f0116c6e <CP+0xbd>
f0116c44:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c47:	c1 e8 0c             	shr    $0xc,%eax
f0116c4a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c4f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c59:	01 d0                	add    %edx,%eax
f0116c5b:	8b 00                	mov    (%eax),%eax
f0116c5d:	f7 d0                	not    %eax
f0116c5f:	23 45 14             	and    0x14(%ebp),%eax
f0116c62:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116c65:	75 07                	jne    f0116c6e <CP+0xbd>
			return 1;
f0116c67:	b8 01 00 00 00       	mov    $0x1,%eax
f0116c6c:	eb 05                	jmp    f0116c73 <CP+0xc2>
	}
	return 0;
f0116c6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116c73:	c9                   	leave  
f0116c74:	c3                   	ret    

f0116c75 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116c75:	55                   	push   %ebp
f0116c76:	89 e5                	mov    %esp,%ebp
f0116c78:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116c7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c7e:	c1 e8 16             	shr    $0x16,%eax
f0116c81:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c88:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c8b:	01 d0                	add    %edx,%eax
f0116c8d:	8b 00                	mov    (%eax),%eax
f0116c8f:	83 e0 01             	and    $0x1,%eax
f0116c92:	85 c0                	test   %eax,%eax
f0116c94:	75 07                	jne    f0116c9d <GP+0x28>
f0116c96:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c9b:	eb 6f                	jmp    f0116d0c <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116c9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ca0:	c1 e8 16             	shr    $0x16,%eax
f0116ca3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116caa:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cad:	01 d0                	add    %edx,%eax
f0116caf:	8b 00                	mov    (%eax),%eax
f0116cb1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116cbc:	c1 e8 0c             	shr    $0xc,%eax
f0116cbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116cc2:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f0116cc7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116cca:	72 17                	jb     f0116ce3 <GP+0x6e>
f0116ccc:	ff 75 f4             	pushl  -0xc(%ebp)
f0116ccf:	68 c8 89 13 f0       	push   $0xf01389c8
f0116cd4:	68 b4 07 00 00       	push   $0x7b4
f0116cd9:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116cde:	e8 cd 94 fe ff       	call   f01001b0 <_panic>
f0116ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ce6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116ceb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116cee:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116cf1:	c1 e8 0c             	shr    $0xc,%eax
f0116cf4:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116cf9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d03:	01 d0                	add    %edx,%eax
f0116d05:	8b 00                	mov    (%eax),%eax
f0116d07:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116d0c:	c9                   	leave  
f0116d0d:	c3                   	ret    

f0116d0e <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116d0e:	55                   	push   %ebp
f0116d0f:	89 e5                	mov    %esp,%ebp
f0116d11:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116d14:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116d1b:	eb 18                	jmp    f0116d35 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116d1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116d20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d2a:	01 d0                	add    %edx,%eax
f0116d2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116d32:	ff 45 fc             	incl   -0x4(%ebp)
f0116d35:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116d38:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116d3d:	76 de                	jbe    f0116d1d <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116d3f:	90                   	nop
f0116d40:	c9                   	leave  
f0116d41:	c3                   	ret    

f0116d42 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116d42:	55                   	push   %ebp
f0116d43:	89 e5                	mov    %esp,%ebp
f0116d45:	83 ec 38             	sub    $0x38,%esp
f0116d48:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116d4b:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116d4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d51:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116d59:	8b 45 10             	mov    0x10(%ebp),%eax
f0116d5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d61:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116d64:	e9 ea 01 00 00       	jmp    f0116f53 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116d69:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116d6d:	74 44                	je     f0116db3 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d72:	83 ec 04             	sub    $0x4,%esp
f0116d75:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116d78:	52                   	push   %edx
f0116d79:	50                   	push   %eax
f0116d7a:	ff 75 08             	pushl  0x8(%ebp)
f0116d7d:	e8 fd 09 ff ff       	call   f010777f <get_frame_info>
f0116d82:	83 c4 10             	add    $0x10,%esp
f0116d85:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116d88:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d8b:	85 c0                	test   %eax,%eax
f0116d8d:	75 24                	jne    f0116db3 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116d8f:	83 ec 04             	sub    $0x4,%esp
f0116d92:	68 f8 89 13 f0       	push   $0xf01389f8
f0116d97:	68 cf 07 00 00       	push   $0x7cf
f0116d9c:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116da1:	e8 18 96 fe ff       	call   f01003be <_warn>
f0116da6:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116da9:	b8 00 00 00 00       	mov    $0x0,%eax
f0116dae:	e9 b6 01 00 00       	jmp    f0116f69 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116db6:	83 ec 04             	sub    $0x4,%esp
f0116db9:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116dbc:	52                   	push   %edx
f0116dbd:	50                   	push   %eax
f0116dbe:	ff 75 08             	pushl  0x8(%ebp)
f0116dc1:	e8 b9 09 ff ff       	call   f010777f <get_frame_info>
f0116dc6:	83 c4 10             	add    $0x10,%esp
f0116dc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116dcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116dcf:	85 c0                	test   %eax,%eax
f0116dd1:	75 24                	jne    f0116df7 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116dd3:	83 ec 04             	sub    $0x4,%esp
f0116dd6:	68 24 8a 13 f0       	push   $0xf0138a24
f0116ddb:	68 d6 07 00 00       	push   $0x7d6
f0116de0:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116de5:	e8 d4 95 fe ff       	call   f01003be <_warn>
f0116dea:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116ded:	b8 00 00 00 00       	mov    $0x0,%eax
f0116df2:	e9 72 01 00 00       	jmp    f0116f69 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116df7:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116dfb:	75 70                	jne    f0116e6d <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116dfd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116e03:	c1 ea 0c             	shr    $0xc,%edx
f0116e06:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116e0c:	c1 e2 02             	shl    $0x2,%edx
f0116e0f:	01 d0                	add    %edx,%eax
f0116e11:	8b 00                	mov    (%eax),%eax
f0116e13:	c1 e8 0c             	shr    $0xc,%eax
f0116e16:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116e19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116e1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116e1f:	c1 ea 0c             	shr    $0xc,%edx
f0116e22:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116e28:	c1 e2 02             	shl    $0x2,%edx
f0116e2b:	01 d0                	add    %edx,%eax
f0116e2d:	8b 00                	mov    (%eax),%eax
f0116e2f:	c1 e8 0c             	shr    $0xc,%eax
f0116e32:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116e35:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116e38:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116e3b:	74 30                	je     f0116e6d <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116e3d:	83 ec 04             	sub    $0x4,%esp
f0116e40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116e43:	ff 75 e8             	pushl  -0x18(%ebp)
f0116e46:	ff 75 f0             	pushl  -0x10(%ebp)
f0116e49:	ff 75 f4             	pushl  -0xc(%ebp)
f0116e4c:	68 50 8a 13 f0       	push   $0xf0138a50
f0116e51:	68 e0 07 00 00       	push   $0x7e0
f0116e56:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116e5b:	e8 5e 95 fe ff       	call   f01003be <_warn>
f0116e60:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116e63:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e68:	e9 fc 00 00 00       	jmp    f0116f69 <CCP+0x227>
			}
		}
		if (ref != -1)
f0116e6d:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116e71:	74 52                	je     f0116ec5 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116e73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e77:	74 0e                	je     f0116e87 <CCP+0x145>
f0116e79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e7c:	8b 40 08             	mov    0x8(%eax),%eax
f0116e7f:	0f b7 c0             	movzwl %ax,%eax
f0116e82:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116e85:	74 3e                	je     f0116ec5 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116e87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e8b:	74 0b                	je     f0116e98 <CCP+0x156>
f0116e8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e90:	8b 40 08             	mov    0x8(%eax),%eax
f0116e93:	0f b7 c0             	movzwl %ax,%eax
f0116e96:	eb 05                	jmp    f0116e9d <CCP+0x15b>
f0116e98:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e9d:	83 ec 0c             	sub    $0xc,%esp
f0116ea0:	50                   	push   %eax
f0116ea1:	ff 75 f0             	pushl  -0x10(%ebp)
f0116ea4:	68 ac 8a 13 f0       	push   $0xf0138aac
f0116ea9:	68 e8 07 00 00       	push   $0x7e8
f0116eae:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116eb3:	e8 06 95 fe ff       	call   f01003be <_warn>
f0116eb8:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116ebb:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ec0:	e9 a4 00 00 00       	jmp    f0116f69 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116ec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ec8:	ff 75 20             	pushl  0x20(%ebp)
f0116ecb:	ff 75 1c             	pushl  0x1c(%ebp)
f0116ece:	50                   	push   %eax
f0116ecf:	ff 75 08             	pushl  0x8(%ebp)
f0116ed2:	e8 b8 fa ff ff       	call   f011698f <CPs>
f0116ed7:	83 c4 10             	add    $0x10,%esp
f0116eda:	85 c0                	test   %eax,%eax
f0116edc:	7f 21                	jg     f0116eff <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116ede:	83 ec 04             	sub    $0x4,%esp
f0116ee1:	68 1c 8b 13 f0       	push   $0xf0138b1c
f0116ee6:	68 ee 07 00 00       	push   $0x7ee
f0116eeb:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116ef0:	e8 c9 94 fe ff       	call   f01003be <_warn>
f0116ef5:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116ef8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116efd:	eb 6a                	jmp    f0116f69 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116eff:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116f03:	74 3a                	je     f0116f3f <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116f05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116f08:	ff 75 28             	pushl  0x28(%ebp)
f0116f0b:	ff 75 24             	pushl  0x24(%ebp)
f0116f0e:	50                   	push   %eax
f0116f0f:	ff 75 08             	pushl  0x8(%ebp)
f0116f12:	e8 78 fa ff ff       	call   f011698f <CPs>
f0116f17:	83 c4 10             	add    $0x10,%esp
f0116f1a:	85 c0                	test   %eax,%eax
f0116f1c:	7f 21                	jg     f0116f3f <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116f1e:	83 ec 04             	sub    $0x4,%esp
f0116f21:	68 64 8b 13 f0       	push   $0xf0138b64
f0116f26:	68 f5 07 00 00       	push   $0x7f5
f0116f2b:	68 ce 6e 13 f0       	push   $0xf0136ece
f0116f30:	e8 89 94 fe ff       	call   f01003be <_warn>
f0116f35:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116f38:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f3d:	eb 2a                	jmp    f0116f69 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116f3f:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116f43:	74 07                	je     f0116f4c <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116f45:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116f4c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116f53:	8b 55 10             	mov    0x10(%ebp),%edx
f0116f56:	8b 45 14             	mov    0x14(%ebp),%eax
f0116f59:	01 d0                	add    %edx,%eax
f0116f5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116f5e:	0f 87 05 fe ff ff    	ja     f0116d69 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116f64:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116f69:	c9                   	leave  
f0116f6a:	c3                   	ret    

f0116f6b <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116f6b:	55                   	push   %ebp
f0116f6c:	89 e5                	mov    %esp,%ebp
f0116f6e:	57                   	push   %edi
f0116f6f:	56                   	push   %esi
f0116f70:	53                   	push   %ebx
f0116f71:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0116f77:	a0 3c cb 18 f0       	mov    0xf018cb3c,%al
f0116f7c:	84 c0                	test   %al,%al
f0116f7e:	0f 84 38 0a 00 00    	je     f01179bc <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116f84:	c6 05 3c cb 18 f0 00 	movb   $0x0,0xf018cb3c
		char command[100] = "load fos_add 20";
f0116f8b:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116f91:	bb 20 8e 13 f0       	mov    $0xf0138e20,%ebx
f0116f96:	ba 04 00 00 00       	mov    $0x4,%edx
f0116f9b:	89 c7                	mov    %eax,%edi
f0116f9d:	89 de                	mov    %ebx,%esi
f0116f9f:	89 d1                	mov    %edx,%ecx
f0116fa1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116fa3:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116fa9:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116fae:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fb3:	89 d7                	mov    %edx,%edi
f0116fb5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116fb7:	83 ec 0c             	sub    $0xc,%esp
f0116fba:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116fc0:	50                   	push   %eax
f0116fc1:	e8 fd ab fe ff       	call   f0101bc3 <execute_command>
f0116fc6:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116fc9:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116fcf:	bb 84 8e 13 f0       	mov    $0xf0138e84,%ebx
f0116fd4:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116fd9:	89 c7                	mov    %eax,%edi
f0116fdb:	89 de                	mov    %ebx,%esi
f0116fdd:	89 d1                	mov    %edx,%ecx
f0116fdf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116fe1:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116fe7:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116fec:	b0 00                	mov    $0x0,%al
f0116fee:	89 d7                	mov    %edx,%edi
f0116ff0:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116ff2:	83 ec 0c             	sub    $0xc,%esp
f0116ff5:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116ffb:	50                   	push   %eax
f0116ffc:	e8 c2 ab fe ff       	call   f0101bc3 <execute_command>
f0117001:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0117004:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011700a:	bb e8 8e 13 f0       	mov    $0xf0138ee8,%ebx
f011700f:	ba 17 00 00 00       	mov    $0x17,%edx
f0117014:	89 c7                	mov    %eax,%edi
f0117016:	89 de                	mov    %ebx,%esi
f0117018:	89 d1                	mov    %edx,%ecx
f011701a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011701c:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0117022:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117027:	b0 00                	mov    $0x0,%al
f0117029:	89 d7                	mov    %edx,%edi
f011702b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011702d:	83 ec 0c             	sub    $0xc,%esp
f0117030:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117036:	50                   	push   %eax
f0117037:	e8 87 ab fe ff       	call   f0101bc3 <execute_command>
f011703c:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f011703f:	83 ec 04             	sub    $0x4,%esp
f0117042:	6a 00                	push   $0x0
f0117044:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0117047:	50                   	push   %eax
f0117048:	6a 10                	push   $0x10
f011704a:	e8 7f 29 ff ff       	call   f01099ce <envid2env>
f011704f:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0117052:	83 ec 04             	sub    $0x4,%esp
f0117055:	6a 00                	push   $0x0
f0117057:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011705a:	50                   	push   %eax
f011705b:	6a 11                	push   $0x11
f011705d:	e8 6c 29 ff ff       	call   f01099ce <envid2env>
f0117062:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0117065:	83 ec 04             	sub    $0x4,%esp
f0117068:	6a 00                	push   $0x0
f011706a:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011706d:	50                   	push   %eax
f011706e:	6a 12                	push   $0x12
f0117070:	e8 59 29 ff ff       	call   f01099ce <envid2env>
f0117075:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117078:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011707b:	85 c0                	test   %eax,%eax
f011707d:	74 0e                	je     f011708d <test_priority_normal_and_higher+0x122>
f011707f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117082:	85 c0                	test   %eax,%eax
f0117084:	74 07                	je     f011708d <test_priority_normal_and_higher+0x122>
f0117086:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117089:	85 c0                	test   %eax,%eax
f011708b:	75 14                	jne    f01170a1 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f011708d:	83 ec 04             	sub    $0x4,%esp
f0117090:	68 a4 8b 13 f0       	push   $0xf0138ba4
f0117095:	6a 29                	push   $0x29
f0117097:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011709c:	e8 0f 91 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01170a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170a4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170aa:	83 f8 14             	cmp    $0x14,%eax
f01170ad:	75 1c                	jne    f01170cb <test_priority_normal_and_higher+0x160>
f01170af:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170b2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170b8:	83 f8 0f             	cmp    $0xf,%eax
f01170bb:	75 0e                	jne    f01170cb <test_priority_normal_and_higher+0x160>
f01170bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170c0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170c6:	83 f8 0a             	cmp    $0xa,%eax
f01170c9:	74 32                	je     f01170fd <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f01170cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170ce:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f01170d4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170d7:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01170dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170e0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170e6:	83 ec 08             	sub    $0x8,%esp
f01170e9:	51                   	push   %ecx
f01170ea:	52                   	push   %edx
f01170eb:	50                   	push   %eax
f01170ec:	68 d8 8b 13 f0       	push   $0xf0138bd8
f01170f1:	6a 2c                	push   $0x2c
f01170f3:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01170f8:	e8 b3 90 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f01170fd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117104:	eb 47                	jmp    f011714d <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117106:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0117109:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011710c:	89 d0                	mov    %edx,%eax
f011710e:	01 c0                	add    %eax,%eax
f0117110:	01 d0                	add    %edx,%eax
f0117112:	c1 e0 03             	shl    $0x3,%eax
f0117115:	01 c8                	add    %ecx,%eax
f0117117:	05 b8 00 00 00       	add    $0xb8,%eax
f011711c:	8b 10                	mov    (%eax),%edx
f011711e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117121:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117128:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011712b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011712e:	89 d0                	mov    %edx,%eax
f0117130:	01 c0                	add    %eax,%eax
f0117132:	01 d0                	add    %edx,%eax
f0117134:	c1 e0 03             	shl    $0x3,%eax
f0117137:	01 c8                	add    %ecx,%eax
f0117139:	05 c0 00 00 00       	add    $0xc0,%eax
f011713e:	8b 10                	mov    (%eax),%edx
f0117140:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117143:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f011714a:	ff 45 e4             	incl   -0x1c(%ebp)
f011714d:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117151:	7e b3                	jle    f0117106 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117153:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011715a:	eb 47                	jmp    f01171a3 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011715c:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011715f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117162:	89 d0                	mov    %edx,%eax
f0117164:	01 c0                	add    %eax,%eax
f0117166:	01 d0                	add    %edx,%eax
f0117168:	c1 e0 03             	shl    $0x3,%eax
f011716b:	01 c8                	add    %ecx,%eax
f011716d:	05 b8 00 00 00       	add    $0xb8,%eax
f0117172:	8b 10                	mov    (%eax),%edx
f0117174:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117177:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011717e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117181:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117184:	89 d0                	mov    %edx,%eax
f0117186:	01 c0                	add    %eax,%eax
f0117188:	01 d0                	add    %edx,%eax
f011718a:	c1 e0 03             	shl    $0x3,%eax
f011718d:	01 c8                	add    %ecx,%eax
f011718f:	05 c0 00 00 00       	add    $0xc0,%eax
f0117194:	8b 10                	mov    (%eax),%edx
f0117196:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117199:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01171a0:	ff 45 e0             	incl   -0x20(%ebp)
f01171a3:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01171a7:	7e b3                	jle    f011715c <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01171a9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01171b0:	eb 47                	jmp    f01171f9 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01171b2:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01171b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171b8:	89 d0                	mov    %edx,%eax
f01171ba:	01 c0                	add    %eax,%eax
f01171bc:	01 d0                	add    %edx,%eax
f01171be:	c1 e0 03             	shl    $0x3,%eax
f01171c1:	01 c8                	add    %ecx,%eax
f01171c3:	05 b8 00 00 00       	add    $0xb8,%eax
f01171c8:	8b 10                	mov    (%eax),%edx
f01171ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171cd:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01171d4:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01171d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171da:	89 d0                	mov    %edx,%eax
f01171dc:	01 c0                	add    %eax,%eax
f01171de:	01 d0                	add    %edx,%eax
f01171e0:	c1 e0 03             	shl    $0x3,%eax
f01171e3:	01 c8                	add    %ecx,%eax
f01171e5:	05 c0 00 00 00       	add    $0xc0,%eax
f01171ea:	8b 10                	mov    (%eax),%edx
f01171ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171ef:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01171f6:	ff 45 dc             	incl   -0x24(%ebp)
f01171f9:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01171fd:	7e b3                	jle    f01171b2 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01171ff:	e8 da 57 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117204:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0117207:	e8 78 d4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011720c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011720f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117212:	83 ec 08             	sub    $0x8,%esp
f0117215:	6a 03                	push   $0x3
f0117217:	50                   	push   %eax
f0117218:	e8 a8 3c ff ff       	call   f010aec5 <set_program_priority>
f011721d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117220:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117223:	83 ec 08             	sub    $0x8,%esp
f0117226:	6a 03                	push   $0x3
f0117228:	50                   	push   %eax
f0117229:	e8 97 3c ff ff       	call   f010aec5 <set_program_priority>
f011722e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117231:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117234:	83 ec 08             	sub    $0x8,%esp
f0117237:	6a 03                	push   $0x3
f0117239:	50                   	push   %eax
f011723a:	e8 86 3c ff ff       	call   f010aec5 <set_program_priority>
f011723f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117242:	e8 3d d4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117247:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011724a:	74 14                	je     f0117260 <test_priority_normal_and_higher+0x2f5>
f011724c:	83 ec 04             	sub    $0x4,%esp
f011724f:	68 40 8c 13 f0       	push   $0xf0138c40
f0117254:	6a 48                	push   $0x48
f0117256:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011725b:	e8 50 8f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117260:	e8 79 57 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117265:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117268:	74 14                	je     f011727e <test_priority_normal_and_higher+0x313>
f011726a:	83 ec 04             	sub    $0x4,%esp
f011726d:	68 40 8c 13 f0       	push   $0xf0138c40
f0117272:	6a 49                	push   $0x49
f0117274:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117279:	e8 32 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011727e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117281:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117287:	83 f8 14             	cmp    $0x14,%eax
f011728a:	75 1c                	jne    f01172a8 <test_priority_normal_and_higher+0x33d>
f011728c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011728f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117295:	83 f8 0f             	cmp    $0xf,%eax
f0117298:	75 0e                	jne    f01172a8 <test_priority_normal_and_higher+0x33d>
f011729a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011729d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172a3:	83 f8 0a             	cmp    $0xa,%eax
f01172a6:	74 14                	je     f01172bc <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01172a8:	83 ec 04             	sub    $0x4,%esp
f01172ab:	68 6c 8c 13 f0       	push   $0xf0138c6c
f01172b0:	6a 4c                	push   $0x4c
f01172b2:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01172b7:	e8 f4 8e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f01172bc:	e8 1d 57 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01172c1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01172c4:	e8 bb d3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01172c9:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01172cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172cf:	83 ec 08             	sub    $0x8,%esp
f01172d2:	6a 04                	push   $0x4
f01172d4:	50                   	push   %eax
f01172d5:	e8 eb 3b ff ff       	call   f010aec5 <set_program_priority>
f01172da:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01172dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172e0:	83 ec 08             	sub    $0x8,%esp
f01172e3:	6a 04                	push   $0x4
f01172e5:	50                   	push   %eax
f01172e6:	e8 da 3b ff ff       	call   f010aec5 <set_program_priority>
f01172eb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01172ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172f1:	83 ec 08             	sub    $0x8,%esp
f01172f4:	6a 04                	push   $0x4
f01172f6:	50                   	push   %eax
f01172f7:	e8 c9 3b ff ff       	call   f010aec5 <set_program_priority>
f01172fc:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01172ff:	e8 80 d3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117304:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117307:	74 14                	je     f011731d <test_priority_normal_and_higher+0x3b2>
f0117309:	83 ec 04             	sub    $0x4,%esp
f011730c:	68 40 8c 13 f0       	push   $0xf0138c40
f0117311:	6a 56                	push   $0x56
f0117313:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117318:	e8 93 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011731d:	e8 bc 56 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117322:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117325:	74 14                	je     f011733b <test_priority_normal_and_higher+0x3d0>
f0117327:	83 ec 04             	sub    $0x4,%esp
f011732a:	68 c0 8c 13 f0       	push   $0xf0138cc0
f011732f:	6a 57                	push   $0x57
f0117331:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117336:	e8 75 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011733b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011733e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117344:	83 f8 14             	cmp    $0x14,%eax
f0117347:	75 1c                	jne    f0117365 <test_priority_normal_and_higher+0x3fa>
f0117349:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011734c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117352:	83 f8 0f             	cmp    $0xf,%eax
f0117355:	75 0e                	jne    f0117365 <test_priority_normal_and_higher+0x3fa>
f0117357:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011735a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117360:	83 f8 14             	cmp    $0x14,%eax
f0117363:	74 14                	je     f0117379 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117365:	83 ec 04             	sub    $0x4,%esp
f0117368:	68 f0 8c 13 f0       	push   $0xf0138cf0
f011736d:	6a 5a                	push   $0x5a
f011736f:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117374:	e8 37 8e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117379:	e8 60 56 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011737e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117381:	e8 fe d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117386:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0117389:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011738c:	83 ec 08             	sub    $0x8,%esp
f011738f:	6a 04                	push   $0x4
f0117391:	50                   	push   %eax
f0117392:	e8 2e 3b ff ff       	call   f010aec5 <set_program_priority>
f0117397:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011739a:	e8 e5 d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011739f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01173a2:	74 14                	je     f01173b8 <test_priority_normal_and_higher+0x44d>
f01173a4:	83 ec 04             	sub    $0x4,%esp
f01173a7:	68 40 8c 13 f0       	push   $0xf0138c40
f01173ac:	6a 62                	push   $0x62
f01173ae:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01173b3:	e8 f8 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01173b8:	e8 21 56 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01173bd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01173c0:	74 14                	je     f01173d6 <test_priority_normal_and_higher+0x46b>
f01173c2:	83 ec 04             	sub    $0x4,%esp
f01173c5:	68 40 8c 13 f0       	push   $0xf0138c40
f01173ca:	6a 63                	push   $0x63
f01173cc:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01173d1:	e8 da 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01173d6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01173d9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173df:	83 f8 14             	cmp    $0x14,%eax
f01173e2:	75 1c                	jne    f0117400 <test_priority_normal_and_higher+0x495>
f01173e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173e7:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173ed:	83 f8 0f             	cmp    $0xf,%eax
f01173f0:	75 0e                	jne    f0117400 <test_priority_normal_and_higher+0x495>
f01173f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173f5:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01173fb:	83 f8 14             	cmp    $0x14,%eax
f01173fe:	74 14                	je     f0117414 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0117400:	83 ec 04             	sub    $0x4,%esp
f0117403:	68 38 8d 13 f0       	push   $0xf0138d38
f0117408:	6a 66                	push   $0x66
f011740a:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011740f:	e8 9c 8d fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117414:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011741b:	eb 1c                	jmp    f0117439 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011741d:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117420:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117423:	89 d0                	mov    %edx,%eax
f0117425:	01 c0                	add    %eax,%eax
f0117427:	01 d0                	add    %edx,%eax
f0117429:	c1 e0 03             	shl    $0x3,%eax
f011742c:	01 c8                	add    %ecx,%eax
f011742e:	05 bc 00 00 00       	add    $0xbc,%eax
f0117433:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117436:	ff 45 d8             	incl   -0x28(%ebp)
f0117439:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011743d:	7e de                	jle    f011741d <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011743f:	e8 9a 55 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117444:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117447:	e8 38 d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011744c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011744f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117452:	83 ec 08             	sub    $0x8,%esp
f0117455:	6a 04                	push   $0x4
f0117457:	50                   	push   %eax
f0117458:	e8 68 3a ff ff       	call   f010aec5 <set_program_priority>
f011745d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117460:	e8 1f d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117465:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117468:	74 14                	je     f011747e <test_priority_normal_and_higher+0x513>
f011746a:	83 ec 04             	sub    $0x4,%esp
f011746d:	68 40 8c 13 f0       	push   $0xf0138c40
f0117472:	6a 73                	push   $0x73
f0117474:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117479:	e8 32 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011747e:	e8 5b 55 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117483:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117486:	74 14                	je     f011749c <test_priority_normal_and_higher+0x531>
f0117488:	83 ec 04             	sub    $0x4,%esp
f011748b:	68 40 8c 13 f0       	push   $0xf0138c40
f0117490:	6a 74                	push   $0x74
f0117492:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117497:	e8 14 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011749c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011749f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174a5:	83 f8 14             	cmp    $0x14,%eax
f01174a8:	75 1c                	jne    f01174c6 <test_priority_normal_and_higher+0x55b>
f01174aa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01174ad:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174b3:	83 f8 0f             	cmp    $0xf,%eax
f01174b6:	75 0e                	jne    f01174c6 <test_priority_normal_and_higher+0x55b>
f01174b8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174bb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174c1:	83 f8 14             	cmp    $0x14,%eax
f01174c4:	74 14                	je     f01174da <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f01174c6:	83 ec 04             	sub    $0x4,%esp
f01174c9:	68 38 8d 13 f0       	push   $0xf0138d38
f01174ce:	6a 77                	push   $0x77
f01174d0:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01174d5:	e8 d6 8c fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f01174da:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01174e1:	eb 1c                	jmp    f01174ff <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01174e3:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01174e6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01174e9:	89 d0                	mov    %edx,%eax
f01174eb:	01 c0                	add    %eax,%eax
f01174ed:	01 d0                	add    %edx,%eax
f01174ef:	c1 e0 03             	shl    $0x3,%eax
f01174f2:	01 c8                	add    %ecx,%eax
f01174f4:	05 bc 00 00 00       	add    $0xbc,%eax
f01174f9:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01174fc:	ff 45 d4             	incl   -0x2c(%ebp)
f01174ff:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117503:	7e de                	jle    f01174e3 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117505:	e8 d4 54 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011750a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011750d:	e8 72 d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117512:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117515:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117518:	83 ec 08             	sub    $0x8,%esp
f011751b:	6a 05                	push   $0x5
f011751d:	50                   	push   %eax
f011751e:	e8 a2 39 ff ff       	call   f010aec5 <set_program_priority>
f0117523:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117526:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117529:	83 ec 08             	sub    $0x8,%esp
f011752c:	6a 05                	push   $0x5
f011752e:	50                   	push   %eax
f011752f:	e8 91 39 ff ff       	call   f010aec5 <set_program_priority>
f0117534:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117537:	e8 48 d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011753c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011753f:	74 17                	je     f0117558 <test_priority_normal_and_higher+0x5ed>
f0117541:	83 ec 04             	sub    $0x4,%esp
f0117544:	68 40 8c 13 f0       	push   $0xf0138c40
f0117549:	68 82 00 00 00       	push   $0x82
f011754e:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117553:	e8 58 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117558:	e8 81 54 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011755d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117560:	74 17                	je     f0117579 <test_priority_normal_and_higher+0x60e>
f0117562:	83 ec 04             	sub    $0x4,%esp
f0117565:	68 40 8c 13 f0       	push   $0xf0138c40
f011756a:	68 83 00 00 00       	push   $0x83
f011756f:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117574:	e8 37 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117579:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011757c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117582:	83 f8 14             	cmp    $0x14,%eax
f0117585:	75 1c                	jne    f01175a3 <test_priority_normal_and_higher+0x638>
f0117587:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011758a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117590:	83 f8 1e             	cmp    $0x1e,%eax
f0117593:	75 0e                	jne    f01175a3 <test_priority_normal_and_higher+0x638>
f0117595:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117598:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011759e:	83 f8 28             	cmp    $0x28,%eax
f01175a1:	74 17                	je     f01175ba <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f01175a3:	83 ec 04             	sub    $0x4,%esp
f01175a6:	68 74 8d 13 f0       	push   $0xf0138d74
f01175ab:	68 86 00 00 00       	push   $0x86
f01175b0:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01175b5:	e8 f6 8b fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f01175ba:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01175c1:	eb 1c                	jmp    f01175df <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01175c3:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01175c6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01175c9:	89 d0                	mov    %edx,%eax
f01175cb:	01 c0                	add    %eax,%eax
f01175cd:	01 d0                	add    %edx,%eax
f01175cf:	c1 e0 03             	shl    $0x3,%eax
f01175d2:	01 c8                	add    %ecx,%eax
f01175d4:	05 bc 00 00 00       	add    $0xbc,%eax
f01175d9:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01175dc:	ff 45 d0             	incl   -0x30(%ebp)
f01175df:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01175e3:	7e de                	jle    f01175c3 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01175e5:	e8 f4 53 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01175ea:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01175ed:	e8 92 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01175f2:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01175f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175f8:	83 ec 08             	sub    $0x8,%esp
f01175fb:	6a 05                	push   $0x5
f01175fd:	50                   	push   %eax
f01175fe:	e8 c2 38 ff ff       	call   f010aec5 <set_program_priority>
f0117603:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117606:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117609:	83 ec 08             	sub    $0x8,%esp
f011760c:	6a 04                	push   $0x4
f011760e:	50                   	push   %eax
f011760f:	e8 b1 38 ff ff       	call   f010aec5 <set_program_priority>
f0117614:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117617:	e8 68 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011761c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011761f:	74 17                	je     f0117638 <test_priority_normal_and_higher+0x6cd>
f0117621:	83 ec 04             	sub    $0x4,%esp
f0117624:	68 40 8c 13 f0       	push   $0xf0138c40
f0117629:	68 91 00 00 00       	push   $0x91
f011762e:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117633:	e8 78 8b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117638:	e8 a1 53 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011763d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117640:	74 17                	je     f0117659 <test_priority_normal_and_higher+0x6ee>
f0117642:	83 ec 04             	sub    $0x4,%esp
f0117645:	68 40 8c 13 f0       	push   $0xf0138c40
f011764a:	68 92 00 00 00       	push   $0x92
f011764f:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117654:	e8 57 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117659:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011765c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117662:	83 f8 14             	cmp    $0x14,%eax
f0117665:	75 1c                	jne    f0117683 <test_priority_normal_and_higher+0x718>
f0117667:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011766a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117670:	83 f8 1e             	cmp    $0x1e,%eax
f0117673:	75 0e                	jne    f0117683 <test_priority_normal_and_higher+0x718>
f0117675:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117678:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011767e:	83 f8 28             	cmp    $0x28,%eax
f0117681:	74 17                	je     f011769a <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117683:	83 ec 04             	sub    $0x4,%esp
f0117686:	68 74 8d 13 f0       	push   $0xf0138d74
f011768b:	68 95 00 00 00       	push   $0x95
f0117690:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117695:	e8 16 8b fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f011769a:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01176a1:	eb 1c                	jmp    f01176bf <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01176a3:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01176a6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01176a9:	89 d0                	mov    %edx,%eax
f01176ab:	01 c0                	add    %eax,%eax
f01176ad:	01 d0                	add    %edx,%eax
f01176af:	c1 e0 03             	shl    $0x3,%eax
f01176b2:	01 c8                	add    %ecx,%eax
f01176b4:	05 bc 00 00 00       	add    $0xbc,%eax
f01176b9:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01176bc:	ff 45 cc             	incl   -0x34(%ebp)
f01176bf:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01176c3:	7e de                	jle    f01176a3 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01176c5:	e8 14 53 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01176ca:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176cd:	e8 b2 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01176d2:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01176d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01176d8:	83 ec 08             	sub    $0x8,%esp
f01176db:	6a 05                	push   $0x5
f01176dd:	50                   	push   %eax
f01176de:	e8 e2 37 ff ff       	call   f010aec5 <set_program_priority>
f01176e3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01176e6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176e9:	83 ec 08             	sub    $0x8,%esp
f01176ec:	6a 04                	push   $0x4
f01176ee:	50                   	push   %eax
f01176ef:	e8 d1 37 ff ff       	call   f010aec5 <set_program_priority>
f01176f4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01176f7:	e8 88 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01176fc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01176ff:	74 17                	je     f0117718 <test_priority_normal_and_higher+0x7ad>
f0117701:	83 ec 04             	sub    $0x4,%esp
f0117704:	68 40 8c 13 f0       	push   $0xf0138c40
f0117709:	68 a0 00 00 00       	push   $0xa0
f011770e:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117713:	e8 98 8a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117718:	e8 c1 52 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011771d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117720:	74 17                	je     f0117739 <test_priority_normal_and_higher+0x7ce>
f0117722:	83 ec 04             	sub    $0x4,%esp
f0117725:	68 40 8c 13 f0       	push   $0xf0138c40
f011772a:	68 a1 00 00 00       	push   $0xa1
f011772f:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117734:	e8 77 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0117739:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011773c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117742:	83 f8 14             	cmp    $0x14,%eax
f0117745:	75 1c                	jne    f0117763 <test_priority_normal_and_higher+0x7f8>
f0117747:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011774a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117750:	83 f8 3c             	cmp    $0x3c,%eax
f0117753:	75 0e                	jne    f0117763 <test_priority_normal_and_higher+0x7f8>
f0117755:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117758:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011775e:	83 f8 28             	cmp    $0x28,%eax
f0117761:	74 17                	je     f011777a <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117763:	83 ec 04             	sub    $0x4,%esp
f0117766:	68 74 8d 13 f0       	push   $0xf0138d74
f011776b:	68 a4 00 00 00       	push   $0xa4
f0117770:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117775:	e8 36 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f011777a:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117781:	eb 1c                	jmp    f011779f <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117783:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117786:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117789:	89 d0                	mov    %edx,%eax
f011778b:	01 c0                	add    %eax,%eax
f011778d:	01 d0                	add    %edx,%eax
f011778f:	c1 e0 03             	shl    $0x3,%eax
f0117792:	01 c8                	add    %ecx,%eax
f0117794:	05 bc 00 00 00       	add    $0xbc,%eax
f0117799:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011779c:	ff 45 c8             	incl   -0x38(%ebp)
f011779f:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01177a3:	7e de                	jle    f0117783 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01177a5:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01177ac:	eb 1c                	jmp    f01177ca <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01177ae:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01177b1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01177b4:	89 d0                	mov    %edx,%eax
f01177b6:	01 c0                	add    %eax,%eax
f01177b8:	01 d0                	add    %edx,%eax
f01177ba:	c1 e0 03             	shl    $0x3,%eax
f01177bd:	01 c8                	add    %ecx,%eax
f01177bf:	05 bc 00 00 00       	add    $0xbc,%eax
f01177c4:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01177c7:	ff 45 c4             	incl   -0x3c(%ebp)
f01177ca:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01177ce:	7e de                	jle    f01177ae <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01177d0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01177d7:	eb 7d                	jmp    f0117856 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01177d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01177dc:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01177e3:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01177e6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01177e9:	89 d0                	mov    %edx,%eax
f01177eb:	01 c0                	add    %eax,%eax
f01177ed:	01 d0                	add    %edx,%eax
f01177ef:	c1 e0 03             	shl    $0x3,%eax
f01177f2:	01 d8                	add    %ebx,%eax
f01177f4:	05 b8 00 00 00       	add    $0xb8,%eax
f01177f9:	8b 00                	mov    (%eax),%eax
f01177fb:	39 c1                	cmp    %eax,%ecx
f01177fd:	74 17                	je     f0117816 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f01177ff:	83 ec 04             	sub    $0x4,%esp
f0117802:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117807:	68 b2 00 00 00       	push   $0xb2
f011780c:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117811:	e8 9a 89 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117816:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117819:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117820:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117823:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117826:	89 d0                	mov    %edx,%eax
f0117828:	01 c0                	add    %eax,%eax
f011782a:	01 d0                	add    %edx,%eax
f011782c:	c1 e0 03             	shl    $0x3,%eax
f011782f:	01 d8                	add    %ebx,%eax
f0117831:	05 c0 00 00 00       	add    $0xc0,%eax
f0117836:	8b 00                	mov    (%eax),%eax
f0117838:	39 c1                	cmp    %eax,%ecx
f011783a:	74 17                	je     f0117853 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f011783c:	83 ec 04             	sub    $0x4,%esp
f011783f:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117844:	68 b5 00 00 00       	push   $0xb5
f0117849:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011784e:	e8 5d 89 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117853:	ff 45 c0             	incl   -0x40(%ebp)
f0117856:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011785a:	0f 8e 79 ff ff ff    	jle    f01177d9 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117860:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117867:	eb 7d                	jmp    f01178e6 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117869:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011786c:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117873:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117876:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117879:	89 d0                	mov    %edx,%eax
f011787b:	01 c0                	add    %eax,%eax
f011787d:	01 d0                	add    %edx,%eax
f011787f:	c1 e0 03             	shl    $0x3,%eax
f0117882:	01 d8                	add    %ebx,%eax
f0117884:	05 b8 00 00 00       	add    $0xb8,%eax
f0117889:	8b 00                	mov    (%eax),%eax
f011788b:	39 c1                	cmp    %eax,%ecx
f011788d:	74 17                	je     f01178a6 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f011788f:	83 ec 04             	sub    $0x4,%esp
f0117892:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117897:	68 bb 00 00 00       	push   $0xbb
f011789c:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01178a1:	e8 0a 89 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01178a6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01178a9:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01178b0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01178b3:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01178b6:	89 d0                	mov    %edx,%eax
f01178b8:	01 c0                	add    %eax,%eax
f01178ba:	01 d0                	add    %edx,%eax
f01178bc:	c1 e0 03             	shl    $0x3,%eax
f01178bf:	01 d8                	add    %ebx,%eax
f01178c1:	05 c0 00 00 00       	add    $0xc0,%eax
f01178c6:	8b 00                	mov    (%eax),%eax
f01178c8:	39 c1                	cmp    %eax,%ecx
f01178ca:	74 17                	je     f01178e3 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f01178cc:	83 ec 04             	sub    $0x4,%esp
f01178cf:	68 b0 8d 13 f0       	push   $0xf0138db0
f01178d4:	68 be 00 00 00       	push   $0xbe
f01178d9:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01178de:	e8 cd 88 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01178e3:	ff 45 bc             	incl   -0x44(%ebp)
f01178e6:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01178ea:	0f 8e 79 ff ff ff    	jle    f0117869 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01178f0:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01178f7:	eb 7d                	jmp    f0117976 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01178f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178fc:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117903:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117906:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117909:	89 d0                	mov    %edx,%eax
f011790b:	01 c0                	add    %eax,%eax
f011790d:	01 d0                	add    %edx,%eax
f011790f:	c1 e0 03             	shl    $0x3,%eax
f0117912:	01 d8                	add    %ebx,%eax
f0117914:	05 b8 00 00 00       	add    $0xb8,%eax
f0117919:	8b 00                	mov    (%eax),%eax
f011791b:	39 c1                	cmp    %eax,%ecx
f011791d:	74 17                	je     f0117936 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f011791f:	83 ec 04             	sub    $0x4,%esp
f0117922:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117927:	68 c4 00 00 00       	push   $0xc4
f011792c:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117931:	e8 7a 88 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117936:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117939:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117940:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117943:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117946:	89 d0                	mov    %edx,%eax
f0117948:	01 c0                	add    %eax,%eax
f011794a:	01 d0                	add    %edx,%eax
f011794c:	c1 e0 03             	shl    $0x3,%eax
f011794f:	01 d8                	add    %ebx,%eax
f0117951:	05 c0 00 00 00       	add    $0xc0,%eax
f0117956:	8b 00                	mov    (%eax),%eax
f0117958:	39 c1                	cmp    %eax,%ecx
f011795a:	74 17                	je     f0117973 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f011795c:	83 ec 04             	sub    $0x4,%esp
f011795f:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117964:	68 c7 00 00 00       	push   $0xc7
f0117969:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011796e:	e8 3d 88 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117973:	ff 45 b8             	incl   -0x48(%ebp)
f0117976:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011797a:	0f 8e 79 ff ff ff    	jle    f01178f9 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117980:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117987:	75 6e 61 
f011798a:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117991:	6c 00 00 
f0117994:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011799a:	b9 17 00 00 00       	mov    $0x17,%ecx
f011799f:	b8 00 00 00 00       	mov    $0x0,%eax
f01179a4:	89 d7                	mov    %edx,%edi
f01179a6:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01179a8:	83 ec 0c             	sub    $0xc,%esp
f01179ab:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01179b1:	50                   	push   %eax
f01179b2:	e8 0c a2 fe ff       	call   f0101bc3 <execute_command>
f01179b7:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f01179ba:	eb 10                	jmp    f01179cc <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01179bc:	83 ec 0c             	sub    $0xc,%esp
f01179bf:	68 e4 8d 13 f0       	push   $0xf0138de4
f01179c4:	e8 68 94 fe ff       	call   f0100e31 <cprintf>
f01179c9:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f01179cc:	90                   	nop
f01179cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01179d0:	5b                   	pop    %ebx
f01179d1:	5e                   	pop    %esi
f01179d2:	5f                   	pop    %edi
f01179d3:	5d                   	pop    %ebp
f01179d4:	c3                   	ret    

f01179d5 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01179d5:	55                   	push   %ebp
f01179d6:	89 e5                	mov    %esp,%ebp
f01179d8:	57                   	push   %edi
f01179d9:	56                   	push   %esi
f01179da:	53                   	push   %ebx
f01179db:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f01179e1:	a0 3c cb 18 f0       	mov    0xf018cb3c,%al
f01179e6:	84 c0                	test   %al,%al
f01179e8:	0f 84 1b 0a 00 00    	je     f0118409 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01179ee:	c6 05 3c cb 18 f0 00 	movb   $0x0,0xf018cb3c
		char command[100] = "load fos_add 20";
f01179f5:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01179fb:	bb 20 8e 13 f0       	mov    $0xf0138e20,%ebx
f0117a00:	ba 04 00 00 00       	mov    $0x4,%edx
f0117a05:	89 c7                	mov    %eax,%edi
f0117a07:	89 de                	mov    %ebx,%esi
f0117a09:	89 d1                	mov    %edx,%ecx
f0117a0b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117a0d:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117a13:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117a18:	b8 00 00 00 00       	mov    $0x0,%eax
f0117a1d:	89 d7                	mov    %edx,%edi
f0117a1f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117a21:	83 ec 0c             	sub    $0xc,%esp
f0117a24:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117a2a:	50                   	push   %eax
f0117a2b:	e8 93 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a30:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117a33:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a39:	bb 28 91 13 f0       	mov    $0xf0139128,%ebx
f0117a3e:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117a43:	89 c7                	mov    %eax,%edi
f0117a45:	89 de                	mov    %ebx,%esi
f0117a47:	89 d1                	mov    %edx,%ecx
f0117a49:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117a4b:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117a51:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117a56:	b0 00                	mov    $0x0,%al
f0117a58:	89 d7                	mov    %edx,%edi
f0117a5a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117a5c:	83 ec 0c             	sub    $0xc,%esp
f0117a5f:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a65:	50                   	push   %eax
f0117a66:	e8 58 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a6b:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117a6e:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117a74:	bb 8c 91 13 f0       	mov    $0xf013918c,%ebx
f0117a79:	ba 17 00 00 00       	mov    $0x17,%edx
f0117a7e:	89 c7                	mov    %eax,%edi
f0117a80:	89 de                	mov    %ebx,%esi
f0117a82:	89 d1                	mov    %edx,%ecx
f0117a84:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117a86:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117a8c:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117a91:	b0 00                	mov    $0x0,%al
f0117a93:	89 d7                	mov    %edx,%edi
f0117a95:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117a97:	83 ec 0c             	sub    $0xc,%esp
f0117a9a:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117aa0:	50                   	push   %eax
f0117aa1:	e8 1d a1 fe ff       	call   f0101bc3 <execute_command>
f0117aa6:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117aa9:	83 ec 04             	sub    $0x4,%esp
f0117aac:	6a 00                	push   $0x0
f0117aae:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117ab1:	50                   	push   %eax
f0117ab2:	68 00 10 00 00       	push   $0x1000
f0117ab7:	e8 12 1f ff ff       	call   f01099ce <envid2env>
f0117abc:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117abf:	83 ec 04             	sub    $0x4,%esp
f0117ac2:	6a 00                	push   $0x0
f0117ac4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117ac7:	50                   	push   %eax
f0117ac8:	68 01 10 00 00       	push   $0x1001
f0117acd:	e8 fc 1e ff ff       	call   f01099ce <envid2env>
f0117ad2:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117ad5:	83 ec 04             	sub    $0x4,%esp
f0117ad8:	6a 00                	push   $0x0
f0117ada:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117add:	50                   	push   %eax
f0117ade:	68 02 10 00 00       	push   $0x1002
f0117ae3:	e8 e6 1e ff ff       	call   f01099ce <envid2env>
f0117ae8:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117aeb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117aee:	85 c0                	test   %eax,%eax
f0117af0:	74 0e                	je     f0117b00 <test_priority_normal_and_lower+0x12b>
f0117af2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117af5:	85 c0                	test   %eax,%eax
f0117af7:	74 07                	je     f0117b00 <test_priority_normal_and_lower+0x12b>
f0117af9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117afc:	85 c0                	test   %eax,%eax
f0117afe:	75 17                	jne    f0117b17 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117b00:	83 ec 04             	sub    $0x4,%esp
f0117b03:	68 a4 8b 13 f0       	push   $0xf0138ba4
f0117b08:	68 f2 00 00 00       	push   $0xf2
f0117b0d:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117b12:	e8 99 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117b17:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b1a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b20:	83 f8 14             	cmp    $0x14,%eax
f0117b23:	75 1c                	jne    f0117b41 <test_priority_normal_and_lower+0x16c>
f0117b25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b28:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b2e:	83 f8 1e             	cmp    $0x1e,%eax
f0117b31:	75 0e                	jne    f0117b41 <test_priority_normal_and_lower+0x16c>
f0117b33:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b36:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b3c:	83 f8 28             	cmp    $0x28,%eax
f0117b3f:	74 17                	je     f0117b58 <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117b41:	83 ec 04             	sub    $0x4,%esp
f0117b44:	68 4c 8f 13 f0       	push   $0xf0138f4c
f0117b49:	68 f5 00 00 00       	push   $0xf5
f0117b4e:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117b53:	e8 58 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117b58:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117b5f:	eb 47                	jmp    f0117ba8 <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117b61:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b67:	89 d0                	mov    %edx,%eax
f0117b69:	01 c0                	add    %eax,%eax
f0117b6b:	01 d0                	add    %edx,%eax
f0117b6d:	c1 e0 03             	shl    $0x3,%eax
f0117b70:	01 c8                	add    %ecx,%eax
f0117b72:	05 b8 00 00 00       	add    $0xb8,%eax
f0117b77:	8b 10                	mov    (%eax),%edx
f0117b79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b7c:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117b83:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b89:	89 d0                	mov    %edx,%eax
f0117b8b:	01 c0                	add    %eax,%eax
f0117b8d:	01 d0                	add    %edx,%eax
f0117b8f:	c1 e0 03             	shl    $0x3,%eax
f0117b92:	01 c8                	add    %ecx,%eax
f0117b94:	05 c0 00 00 00       	add    $0xc0,%eax
f0117b99:	8b 10                	mov    (%eax),%edx
f0117b9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117b9e:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117ba5:	ff 45 e4             	incl   -0x1c(%ebp)
f0117ba8:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117bac:	7e b3                	jle    f0117b61 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117bae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117bb5:	eb 47                	jmp    f0117bfe <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117bb7:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117bba:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117bbd:	89 d0                	mov    %edx,%eax
f0117bbf:	01 c0                	add    %eax,%eax
f0117bc1:	01 d0                	add    %edx,%eax
f0117bc3:	c1 e0 03             	shl    $0x3,%eax
f0117bc6:	01 c8                	add    %ecx,%eax
f0117bc8:	05 b8 00 00 00       	add    $0xb8,%eax
f0117bcd:	8b 10                	mov    (%eax),%edx
f0117bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117bd2:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117bd9:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117bdc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117bdf:	89 d0                	mov    %edx,%eax
f0117be1:	01 c0                	add    %eax,%eax
f0117be3:	01 d0                	add    %edx,%eax
f0117be5:	c1 e0 03             	shl    $0x3,%eax
f0117be8:	01 c8                	add    %ecx,%eax
f0117bea:	05 c0 00 00 00       	add    $0xc0,%eax
f0117bef:	8b 10                	mov    (%eax),%edx
f0117bf1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117bf4:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117bfb:	ff 45 e0             	incl   -0x20(%ebp)
f0117bfe:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117c02:	7e b3                	jle    f0117bb7 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117c04:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117c0b:	eb 47                	jmp    f0117c54 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117c0d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117c10:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117c13:	89 d0                	mov    %edx,%eax
f0117c15:	01 c0                	add    %eax,%eax
f0117c17:	01 d0                	add    %edx,%eax
f0117c19:	c1 e0 03             	shl    $0x3,%eax
f0117c1c:	01 c8                	add    %ecx,%eax
f0117c1e:	05 b8 00 00 00       	add    $0xb8,%eax
f0117c23:	8b 10                	mov    (%eax),%edx
f0117c25:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c28:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117c2f:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117c32:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117c35:	89 d0                	mov    %edx,%eax
f0117c37:	01 c0                	add    %eax,%eax
f0117c39:	01 d0                	add    %edx,%eax
f0117c3b:	c1 e0 03             	shl    $0x3,%eax
f0117c3e:	01 c8                	add    %ecx,%eax
f0117c40:	05 c0 00 00 00       	add    $0xc0,%eax
f0117c45:	8b 10                	mov    (%eax),%edx
f0117c47:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c4a:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117c51:	ff 45 dc             	incl   -0x24(%ebp)
f0117c54:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117c58:	7e b3                	jle    f0117c0d <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117c5a:	e8 7f 4d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117c5f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117c62:	e8 1d ca fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117c67:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117c6a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c6d:	83 ec 08             	sub    $0x8,%esp
f0117c70:	6a 03                	push   $0x3
f0117c72:	50                   	push   %eax
f0117c73:	e8 4d 32 ff ff       	call   f010aec5 <set_program_priority>
f0117c78:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117c7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c7e:	83 ec 08             	sub    $0x8,%esp
f0117c81:	6a 03                	push   $0x3
f0117c83:	50                   	push   %eax
f0117c84:	e8 3c 32 ff ff       	call   f010aec5 <set_program_priority>
f0117c89:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117c8c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c8f:	83 ec 08             	sub    $0x8,%esp
f0117c92:	6a 03                	push   $0x3
f0117c94:	50                   	push   %eax
f0117c95:	e8 2b 32 ff ff       	call   f010aec5 <set_program_priority>
f0117c9a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c9d:	e8 e2 c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117ca2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117ca5:	74 17                	je     f0117cbe <test_priority_normal_and_lower+0x2e9>
f0117ca7:	83 ec 04             	sub    $0x4,%esp
f0117caa:	68 40 8c 13 f0       	push   $0xf0138c40
f0117caf:	68 11 01 00 00       	push   $0x111
f0117cb4:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117cb9:	e8 f2 84 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117cbe:	e8 1b 4d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117cc3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117cc6:	74 17                	je     f0117cdf <test_priority_normal_and_lower+0x30a>
f0117cc8:	83 ec 04             	sub    $0x4,%esp
f0117ccb:	68 40 8c 13 f0       	push   $0xf0138c40
f0117cd0:	68 12 01 00 00       	push   $0x112
f0117cd5:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117cda:	e8 d1 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117cdf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ce2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ce8:	83 f8 14             	cmp    $0x14,%eax
f0117ceb:	75 1c                	jne    f0117d09 <test_priority_normal_and_lower+0x334>
f0117ced:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cf0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117cf6:	83 f8 1e             	cmp    $0x1e,%eax
f0117cf9:	75 0e                	jne    f0117d09 <test_priority_normal_and_lower+0x334>
f0117cfb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117cfe:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d04:	83 f8 28             	cmp    $0x28,%eax
f0117d07:	74 17                	je     f0117d20 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117d09:	83 ec 04             	sub    $0x4,%esp
f0117d0c:	68 6c 8c 13 f0       	push   $0xf0138c6c
f0117d11:	68 15 01 00 00       	push   $0x115
f0117d16:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117d1b:	e8 90 84 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117d20:	e8 b9 4c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117d25:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d28:	e8 57 c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117d2d:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117d30:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d33:	83 ec 08             	sub    $0x8,%esp
f0117d36:	6a 02                	push   $0x2
f0117d38:	50                   	push   %eax
f0117d39:	e8 87 31 ff ff       	call   f010aec5 <set_program_priority>
f0117d3e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117d41:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d44:	83 ec 08             	sub    $0x8,%esp
f0117d47:	6a 02                	push   $0x2
f0117d49:	50                   	push   %eax
f0117d4a:	e8 76 31 ff ff       	call   f010aec5 <set_program_priority>
f0117d4f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117d52:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d55:	83 ec 08             	sub    $0x8,%esp
f0117d58:	6a 02                	push   $0x2
f0117d5a:	50                   	push   %eax
f0117d5b:	e8 65 31 ff ff       	call   f010aec5 <set_program_priority>
f0117d60:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d63:	e8 1c c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117d68:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117d6b:	74 17                	je     f0117d84 <test_priority_normal_and_lower+0x3af>
f0117d6d:	83 ec 04             	sub    $0x4,%esp
f0117d70:	68 40 8c 13 f0       	push   $0xf0138c40
f0117d75:	68 1f 01 00 00       	push   $0x11f
f0117d7a:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117d7f:	e8 2c 84 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117d84:	e8 55 4c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117d89:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117d8c:	74 21                	je     f0117daf <test_priority_normal_and_lower+0x3da>
f0117d8e:	e8 4b 4c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117d93:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117d96:	29 c2                	sub    %eax,%edx
f0117d98:	89 d0                	mov    %edx,%eax
f0117d9a:	50                   	push   %eax
f0117d9b:	68 c0 8c 13 f0       	push   $0xf0138cc0
f0117da0:	68 20 01 00 00       	push   $0x120
f0117da5:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117daa:	e8 01 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117daf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117db2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117db8:	83 f8 0a             	cmp    $0xa,%eax
f0117dbb:	75 1c                	jne    f0117dd9 <test_priority_normal_and_lower+0x404>
f0117dbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117dc0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dc6:	83 f8 0f             	cmp    $0xf,%eax
f0117dc9:	75 0e                	jne    f0117dd9 <test_priority_normal_and_lower+0x404>
f0117dcb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dce:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dd4:	83 f8 14             	cmp    $0x14,%eax
f0117dd7:	74 17                	je     f0117df0 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117dd9:	83 ec 04             	sub    $0x4,%esp
f0117ddc:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117de1:	68 23 01 00 00       	push   $0x123
f0117de6:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117deb:	e8 c0 83 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117df0:	e8 e9 4b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117df5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117df8:	e8 87 c8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117dfd:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117e00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e03:	83 ec 08             	sub    $0x8,%esp
f0117e06:	6a 02                	push   $0x2
f0117e08:	50                   	push   %eax
f0117e09:	e8 b7 30 ff ff       	call   f010aec5 <set_program_priority>
f0117e0e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117e11:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e14:	83 ec 08             	sub    $0x8,%esp
f0117e17:	6a 02                	push   $0x2
f0117e19:	50                   	push   %eax
f0117e1a:	e8 a6 30 ff ff       	call   f010aec5 <set_program_priority>
f0117e1f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117e22:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e25:	83 ec 08             	sub    $0x8,%esp
f0117e28:	6a 02                	push   $0x2
f0117e2a:	50                   	push   %eax
f0117e2b:	e8 95 30 ff ff       	call   f010aec5 <set_program_priority>
f0117e30:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117e33:	e8 4c c8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117e38:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117e3b:	74 17                	je     f0117e54 <test_priority_normal_and_lower+0x47f>
f0117e3d:	83 ec 04             	sub    $0x4,%esp
f0117e40:	68 40 8c 13 f0       	push   $0xf0138c40
f0117e45:	68 2d 01 00 00       	push   $0x12d
f0117e4a:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117e4f:	e8 5c 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117e54:	e8 85 4b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117e59:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117e5c:	74 21                	je     f0117e7f <test_priority_normal_and_lower+0x4aa>
f0117e5e:	e8 7b 4b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0117e63:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117e66:	29 c2                	sub    %eax,%edx
f0117e68:	89 d0                	mov    %edx,%eax
f0117e6a:	50                   	push   %eax
f0117e6b:	68 c0 8c 13 f0       	push   $0xf0138cc0
f0117e70:	68 2e 01 00 00       	push   $0x12e
f0117e75:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117e7a:	e8 31 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117e7f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e82:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e88:	83 f8 0a             	cmp    $0xa,%eax
f0117e8b:	75 1c                	jne    f0117ea9 <test_priority_normal_and_lower+0x4d4>
f0117e8d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e90:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e96:	83 f8 0f             	cmp    $0xf,%eax
f0117e99:	75 0e                	jne    f0117ea9 <test_priority_normal_and_lower+0x4d4>
f0117e9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e9e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ea4:	83 f8 0a             	cmp    $0xa,%eax
f0117ea7:	74 17                	je     f0117ec0 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117ea9:	83 ec 04             	sub    $0x4,%esp
f0117eac:	68 f0 8c 13 f0       	push   $0xf0138cf0
f0117eb1:	68 31 01 00 00       	push   $0x131
f0117eb6:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117ebb:	e8 f0 82 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f0117ec0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117ec7:	eb 7d                	jmp    f0117f46 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117ec9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117ecc:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117ed3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117ed6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117ed9:	89 d0                	mov    %edx,%eax
f0117edb:	01 c0                	add    %eax,%eax
f0117edd:	01 d0                	add    %edx,%eax
f0117edf:	c1 e0 03             	shl    $0x3,%eax
f0117ee2:	01 d8                	add    %ebx,%eax
f0117ee4:	05 b8 00 00 00       	add    $0xb8,%eax
f0117ee9:	8b 00                	mov    (%eax),%eax
f0117eeb:	39 c1                	cmp    %eax,%ecx
f0117eed:	74 17                	je     f0117f06 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0117eef:	83 ec 04             	sub    $0x4,%esp
f0117ef2:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117ef7:	68 36 01 00 00       	push   $0x136
f0117efc:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117f01:	e8 aa 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f06:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117f09:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117f10:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117f13:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117f16:	89 d0                	mov    %edx,%eax
f0117f18:	01 c0                	add    %eax,%eax
f0117f1a:	01 d0                	add    %edx,%eax
f0117f1c:	c1 e0 03             	shl    $0x3,%eax
f0117f1f:	01 d8                	add    %ebx,%eax
f0117f21:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f26:	8b 00                	mov    (%eax),%eax
f0117f28:	39 c1                	cmp    %eax,%ecx
f0117f2a:	74 17                	je     f0117f43 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0117f2c:	83 ec 04             	sub    $0x4,%esp
f0117f2f:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117f34:	68 39 01 00 00       	push   $0x139
f0117f39:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117f3e:	e8 6d 82 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117f43:	ff 45 d8             	incl   -0x28(%ebp)
f0117f46:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117f4a:	0f 8e 79 ff ff ff    	jle    f0117ec9 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117f50:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117f57:	eb 7d                	jmp    f0117fd6 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f59:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f5c:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117f63:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f66:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117f69:	89 d0                	mov    %edx,%eax
f0117f6b:	01 c0                	add    %eax,%eax
f0117f6d:	01 d0                	add    %edx,%eax
f0117f6f:	c1 e0 03             	shl    $0x3,%eax
f0117f72:	01 d8                	add    %ebx,%eax
f0117f74:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f79:	8b 00                	mov    (%eax),%eax
f0117f7b:	39 c1                	cmp    %eax,%ecx
f0117f7d:	74 17                	je     f0117f96 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0117f7f:	83 ec 04             	sub    $0x4,%esp
f0117f82:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117f87:	68 3f 01 00 00       	push   $0x13f
f0117f8c:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117f91:	e8 1a 82 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f99:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117fa0:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117fa3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117fa6:	89 d0                	mov    %edx,%eax
f0117fa8:	01 c0                	add    %eax,%eax
f0117faa:	01 d0                	add    %edx,%eax
f0117fac:	c1 e0 03             	shl    $0x3,%eax
f0117faf:	01 d8                	add    %ebx,%eax
f0117fb1:	05 c0 00 00 00       	add    $0xc0,%eax
f0117fb6:	8b 00                	mov    (%eax),%eax
f0117fb8:	39 c1                	cmp    %eax,%ecx
f0117fba:	74 17                	je     f0117fd3 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0117fbc:	83 ec 04             	sub    $0x4,%esp
f0117fbf:	68 b0 8d 13 f0       	push   $0xf0138db0
f0117fc4:	68 42 01 00 00       	push   $0x142
f0117fc9:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0117fce:	e8 dd 81 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117fd3:	ff 45 d4             	incl   -0x2c(%ebp)
f0117fd6:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117fda:	0f 8e 79 ff ff ff    	jle    f0117f59 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117fe0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117fe7:	eb 7d                	jmp    f0118066 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117fe9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117fec:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117ff3:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0117ff6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117ff9:	89 d0                	mov    %edx,%eax
f0117ffb:	01 c0                	add    %eax,%eax
f0117ffd:	01 d0                	add    %edx,%eax
f0117fff:	c1 e0 03             	shl    $0x3,%eax
f0118002:	01 d8                	add    %ebx,%eax
f0118004:	05 b8 00 00 00       	add    $0xb8,%eax
f0118009:	8b 00                	mov    (%eax),%eax
f011800b:	39 c1                	cmp    %eax,%ecx
f011800d:	74 17                	je     f0118026 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f011800f:	83 ec 04             	sub    $0x4,%esp
f0118012:	68 b0 8d 13 f0       	push   $0xf0138db0
f0118017:	68 48 01 00 00       	push   $0x148
f011801c:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118021:	e8 8a 81 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118026:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118029:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0118030:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118033:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118036:	89 d0                	mov    %edx,%eax
f0118038:	01 c0                	add    %eax,%eax
f011803a:	01 d0                	add    %edx,%eax
f011803c:	c1 e0 03             	shl    $0x3,%eax
f011803f:	01 d8                	add    %ebx,%eax
f0118041:	05 c0 00 00 00       	add    $0xc0,%eax
f0118046:	8b 00                	mov    (%eax),%eax
f0118048:	39 c1                	cmp    %eax,%ecx
f011804a:	74 17                	je     f0118063 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f011804c:	83 ec 04             	sub    $0x4,%esp
f011804f:	68 b0 8d 13 f0       	push   $0xf0138db0
f0118054:	68 4b 01 00 00       	push   $0x14b
f0118059:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011805e:	e8 4d 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0118063:	ff 45 d0             	incl   -0x30(%ebp)
f0118066:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011806a:	0f 8e 79 ff ff ff    	jle    f0117fe9 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0118070:	e8 69 49 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118075:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118078:	e8 07 c6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011807d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0118080:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118083:	83 ec 08             	sub    $0x8,%esp
f0118086:	6a 01                	push   $0x1
f0118088:	50                   	push   %eax
f0118089:	e8 37 2e ff ff       	call   f010aec5 <set_program_priority>
f011808e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0118091:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118094:	83 ec 08             	sub    $0x8,%esp
f0118097:	6a 01                	push   $0x1
f0118099:	50                   	push   %eax
f011809a:	e8 26 2e ff ff       	call   f010aec5 <set_program_priority>
f011809f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f01180a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180a5:	83 ec 08             	sub    $0x8,%esp
f01180a8:	6a 01                	push   $0x1
f01180aa:	50                   	push   %eax
f01180ab:	e8 15 2e ff ff       	call   f010aec5 <set_program_priority>
f01180b0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01180b3:	e8 cc c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01180b8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01180bb:	74 17                	je     f01180d4 <test_priority_normal_and_lower+0x6ff>
f01180bd:	83 ec 04             	sub    $0x4,%esp
f01180c0:	68 40 8c 13 f0       	push   $0xf0138c40
f01180c5:	68 54 01 00 00       	push   $0x154
f01180ca:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01180cf:	e8 dc 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01180d4:	e8 05 49 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01180d9:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01180dc:	83 f8 0d             	cmp    $0xd,%eax
f01180df:	74 17                	je     f01180f8 <test_priority_normal_and_lower+0x723>
f01180e1:	83 ec 04             	sub    $0x4,%esp
f01180e4:	68 98 8f 13 f0       	push   $0xf0138f98
f01180e9:	68 55 01 00 00       	push   $0x155
f01180ee:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01180f3:	e8 b8 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01180f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01180fb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118101:	83 f8 05             	cmp    $0x5,%eax
f0118104:	75 1c                	jne    f0118122 <test_priority_normal_and_lower+0x74d>
f0118106:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118109:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011810f:	83 f8 07             	cmp    $0x7,%eax
f0118112:	75 0e                	jne    f0118122 <test_priority_normal_and_lower+0x74d>
f0118114:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118117:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011811d:	83 f8 05             	cmp    $0x5,%eax
f0118120:	74 17                	je     f0118139 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0118122:	83 ec 04             	sub    $0x4,%esp
f0118125:	68 e0 8f 13 f0       	push   $0xf0138fe0
f011812a:	68 58 01 00 00       	push   $0x158
f011812f:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118134:	e8 77 80 fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f0118139:	e8 a0 48 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011813e:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118141:	e8 3e c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118146:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0118149:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011814c:	83 ec 08             	sub    $0x8,%esp
f011814f:	6a 01                	push   $0x1
f0118151:	50                   	push   %eax
f0118152:	e8 6e 2d ff ff       	call   f010aec5 <set_program_priority>
f0118157:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011815a:	e8 25 c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011815f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118162:	74 17                	je     f011817b <test_priority_normal_and_lower+0x7a6>
f0118164:	83 ec 04             	sub    $0x4,%esp
f0118167:	68 40 8c 13 f0       	push   $0xf0138c40
f011816c:	68 5e 01 00 00       	push   $0x15e
f0118171:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118176:	e8 35 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011817b:	e8 5e 48 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118180:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0118183:	83 f8 03             	cmp    $0x3,%eax
f0118186:	74 17                	je     f011819f <test_priority_normal_and_lower+0x7ca>
f0118188:	83 ec 04             	sub    $0x4,%esp
f011818b:	68 40 8c 13 f0       	push   $0xf0138c40
f0118190:	68 5f 01 00 00       	push   $0x15f
f0118195:	68 bd 8b 13 f0       	push   $0xf0138bbd
f011819a:	e8 11 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011819f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01181a2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181a8:	83 f8 02             	cmp    $0x2,%eax
f01181ab:	75 1c                	jne    f01181c9 <test_priority_normal_and_lower+0x7f4>
f01181ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01181b0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181b6:	83 f8 07             	cmp    $0x7,%eax
f01181b9:	75 0e                	jne    f01181c9 <test_priority_normal_and_lower+0x7f4>
f01181bb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01181be:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181c4:	83 f8 05             	cmp    $0x5,%eax
f01181c7:	74 17                	je     f01181e0 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f01181c9:	83 ec 04             	sub    $0x4,%esp
f01181cc:	68 74 8d 13 f0       	push   $0xf0138d74
f01181d1:	68 62 01 00 00       	push   $0x162
f01181d6:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01181db:	e8 d0 7f fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f01181e0:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01181e7:	e9 83 00 00 00       	jmp    f011826f <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01181ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01181ef:	83 c0 08             	add    $0x8,%eax
f01181f2:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01181f9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01181fc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01181ff:	89 d0                	mov    %edx,%eax
f0118201:	01 c0                	add    %eax,%eax
f0118203:	01 d0                	add    %edx,%eax
f0118205:	c1 e0 03             	shl    $0x3,%eax
f0118208:	01 d8                	add    %ebx,%eax
f011820a:	05 b8 00 00 00       	add    $0xb8,%eax
f011820f:	8b 00                	mov    (%eax),%eax
f0118211:	39 c1                	cmp    %eax,%ecx
f0118213:	74 17                	je     f011822c <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118215:	83 ec 04             	sub    $0x4,%esp
f0118218:	68 10 90 13 f0       	push   $0xf0139010
f011821d:	68 67 01 00 00       	push   $0x167
f0118222:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118227:	e8 84 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011822c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011822f:	83 c0 08             	add    $0x8,%eax
f0118232:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0118239:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011823c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011823f:	89 d0                	mov    %edx,%eax
f0118241:	01 c0                	add    %eax,%eax
f0118243:	01 d0                	add    %edx,%eax
f0118245:	c1 e0 03             	shl    $0x3,%eax
f0118248:	01 d8                	add    %ebx,%eax
f011824a:	05 c0 00 00 00       	add    $0xc0,%eax
f011824f:	8b 00                	mov    (%eax),%eax
f0118251:	39 c1                	cmp    %eax,%ecx
f0118253:	74 17                	je     f011826c <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118255:	83 ec 04             	sub    $0x4,%esp
f0118258:	68 10 90 13 f0       	push   $0xf0139010
f011825d:	68 6a 01 00 00       	push   $0x16a
f0118262:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118267:	e8 44 7f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011826c:	ff 45 cc             	incl   -0x34(%ebp)
f011826f:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0118273:	0f 8e 73 ff ff ff    	jle    f01181ec <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0118279:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0118280:	e9 83 00 00 00       	jmp    f0118308 <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0118285:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118288:	83 c0 03             	add    $0x3,%eax
f011828b:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0118292:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118295:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118298:	89 d0                	mov    %edx,%eax
f011829a:	01 c0                	add    %eax,%eax
f011829c:	01 d0                	add    %edx,%eax
f011829e:	c1 e0 03             	shl    $0x3,%eax
f01182a1:	01 d8                	add    %ebx,%eax
f01182a3:	05 b8 00 00 00       	add    $0xb8,%eax
f01182a8:	8b 00                	mov    (%eax),%eax
f01182aa:	39 c1                	cmp    %eax,%ecx
f01182ac:	74 17                	je     f01182c5 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01182ae:	ff 75 c8             	pushl  -0x38(%ebp)
f01182b1:	68 7c 90 13 f0       	push   $0xf013907c
f01182b6:	68 70 01 00 00       	push   $0x170
f01182bb:	68 bd 8b 13 f0       	push   $0xf0138bbd
f01182c0:	e8 eb 7e fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01182c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01182c8:	83 c0 03             	add    $0x3,%eax
f01182cb:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01182d2:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01182d5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01182d8:	89 d0                	mov    %edx,%eax
f01182da:	01 c0                	add    %eax,%eax
f01182dc:	01 d0                	add    %edx,%eax
f01182de:	c1 e0 03             	shl    $0x3,%eax
f01182e1:	01 d8                	add    %ebx,%eax
f01182e3:	05 c0 00 00 00       	add    $0xc0,%eax
f01182e8:	8b 00                	mov    (%eax),%eax
f01182ea:	39 c1                	cmp    %eax,%ecx
f01182ec:	74 17                	je     f0118305 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01182ee:	83 ec 04             	sub    $0x4,%esp
f01182f1:	68 10 90 13 f0       	push   $0xf0139010
f01182f6:	68 73 01 00 00       	push   $0x173
f01182fb:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118300:	e8 ab 7e fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0118305:	ff 45 c8             	incl   -0x38(%ebp)
f0118308:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011830c:	0f 8e 73 ff ff ff    	jle    f0118285 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118312:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0118319:	e9 83 00 00 00       	jmp    f01183a1 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011831e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118321:	83 c0 05             	add    $0x5,%eax
f0118324:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011832b:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011832e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118331:	89 d0                	mov    %edx,%eax
f0118333:	01 c0                	add    %eax,%eax
f0118335:	01 d0                	add    %edx,%eax
f0118337:	c1 e0 03             	shl    $0x3,%eax
f011833a:	01 d8                	add    %ebx,%eax
f011833c:	05 b8 00 00 00       	add    $0xb8,%eax
f0118341:	8b 00                	mov    (%eax),%eax
f0118343:	39 c1                	cmp    %eax,%ecx
f0118345:	74 17                	je     f011835e <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118347:	83 ec 04             	sub    $0x4,%esp
f011834a:	68 10 90 13 f0       	push   $0xf0139010
f011834f:	68 79 01 00 00       	push   $0x179
f0118354:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118359:	e8 52 7e fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011835e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118361:	83 c0 05             	add    $0x5,%eax
f0118364:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011836b:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011836e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118371:	89 d0                	mov    %edx,%eax
f0118373:	01 c0                	add    %eax,%eax
f0118375:	01 d0                	add    %edx,%eax
f0118377:	c1 e0 03             	shl    $0x3,%eax
f011837a:	01 d8                	add    %ebx,%eax
f011837c:	05 c0 00 00 00       	add    $0xc0,%eax
f0118381:	8b 00                	mov    (%eax),%eax
f0118383:	39 c1                	cmp    %eax,%ecx
f0118385:	74 17                	je     f011839e <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118387:	83 ec 04             	sub    $0x4,%esp
f011838a:	68 10 90 13 f0       	push   $0xf0139010
f011838f:	68 7c 01 00 00       	push   $0x17c
f0118394:	68 bd 8b 13 f0       	push   $0xf0138bbd
f0118399:	e8 12 7e fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011839e:	ff 45 c4             	incl   -0x3c(%ebp)
f01183a1:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01183a5:	0f 8e 73 ff ff ff    	jle    f011831e <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01183ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01183ae:	83 ec 08             	sub    $0x8,%esp
f01183b1:	6a 05                	push   $0x5
f01183b3:	50                   	push   %eax
f01183b4:	e8 0c 2b ff ff       	call   f010aec5 <set_program_priority>
f01183b9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01183bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01183bf:	83 ec 08             	sub    $0x8,%esp
f01183c2:	6a 05                	push   $0x5
f01183c4:	50                   	push   %eax
f01183c5:	e8 fb 2a ff ff       	call   f010aec5 <set_program_priority>
f01183ca:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f01183cd:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f01183d4:	75 6e 61 
f01183d7:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f01183de:	6c 00 00 
f01183e1:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01183e7:	b9 17 00 00 00       	mov    $0x17,%ecx
f01183ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01183f1:	89 d7                	mov    %edx,%edi
f01183f3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01183f5:	83 ec 0c             	sub    $0xc,%esp
f01183f8:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01183fe:	50                   	push   %eax
f01183ff:	e8 bf 97 fe ff       	call   f0101bc3 <execute_command>
f0118404:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0118407:	eb 10                	jmp    f0118419 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0118409:	83 ec 0c             	sub    $0xc,%esp
f011840c:	68 ec 90 13 f0       	push   $0xf01390ec
f0118411:	e8 1b 8a fe ff       	call   f0100e31 <cprintf>
f0118416:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0118419:	90                   	nop
f011841a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011841d:	5b                   	pop    %ebx
f011841e:	5e                   	pop    %esi
f011841f:	5f                   	pop    %edi
f0118420:	5d                   	pop    %ebp
f0118421:	c3                   	ret    

f0118422 <isKHeapPlacementStrategyNEXTFIT>:
f0118422:	55                   	push   %ebp
f0118423:	89 e5                	mov    %esp,%ebp
f0118425:	a1 f8 be 2b f0       	mov    0xf02bbef8,%eax
f011842a:	83 f8 03             	cmp    $0x3,%eax
f011842d:	75 04                	jne    f0118433 <isKHeapPlacementStrategyNEXTFIT+0x11>
f011842f:	b0 01                	mov    $0x1,%al
f0118431:	eb 02                	jmp    f0118435 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0118433:	b0 00                	mov    $0x0,%al
f0118435:	5d                   	pop    %ebp
f0118436:	c3                   	ret    

f0118437 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0118437:	55                   	push   %ebp
f0118438:	89 e5                	mov    %esp,%ebp
f011843a:	57                   	push   %edi
f011843b:	53                   	push   %ebx
f011843c:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f0118442:	83 ec 0c             	sub    $0xc,%esp
f0118445:	68 f0 91 13 f0       	push   $0xf01391f0
f011844a:	e8 e2 89 fe ff       	call   f0100e31 <cprintf>
f011844f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118452:	83 ec 0c             	sub    $0xc,%esp
f0118455:	68 20 92 13 f0       	push   $0xf0139220
f011845a:	e8 d2 89 fe ff       	call   f0100e31 <cprintf>
f011845f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118462:	83 ec 0c             	sub    $0xc,%esp
f0118465:	68 f0 91 13 f0       	push   $0xf01391f0
f011846a:	e8 c2 89 fe ff       	call   f0100e31 <cprintf>
f011846f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118472:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0118476:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011847a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0118480:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118486:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011848d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118494:	e8 45 45 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118499:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011849c:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f01184a2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01184a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01184ac:	89 d7                	mov    %edx,%edi
f01184ae:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01184b0:	e8 29 45 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01184b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01184b8:	e8 c7 c1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01184bd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01184c0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01184c7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01184cc:	0f b6 d0             	movzbl %al,%edx
f01184cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01184d2:	01 d0                	add    %edx,%eax
f01184d4:	48                   	dec    %eax
f01184d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01184d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01184db:	ba 00 00 00 00       	mov    $0x0,%edx
f01184e0:	f7 75 d4             	divl   -0x2c(%ebp)
f01184e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01184e6:	29 d0                	sub    %edx,%eax
f01184e8:	89 c1                	mov    %eax,%ecx
f01184ea:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01184f1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01184f6:	0f b6 c0             	movzbl %al,%eax
f01184f9:	c1 e0 04             	shl    $0x4,%eax
f01184fc:	89 c2                	mov    %eax,%edx
f01184fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118501:	01 d0                	add    %edx,%eax
f0118503:	48                   	dec    %eax
f0118504:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0118507:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011850a:	ba 00 00 00 00       	mov    $0x0,%edx
f011850f:	f7 75 cc             	divl   -0x34(%ebp)
f0118512:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118515:	29 d0                	sub    %edx,%eax
f0118517:	01 c8                	add    %ecx,%eax
f0118519:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011851e:	29 c2                	sub    %eax,%edx
f0118520:	89 d0                	mov    %edx,%eax
f0118522:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118525:	83 ec 0c             	sub    $0xc,%esp
f0118528:	ff 75 c4             	pushl  -0x3c(%ebp)
f011852b:	e8 2f fa fe ff       	call   f0107f5f <kmalloc>
f0118530:	83 c4 10             	add    $0x10,%esp
f0118533:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0118539:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011853f:	85 c0                	test   %eax,%eax
f0118541:	74 14                	je     f0118557 <test_kmalloc+0x120>
f0118543:	83 ec 04             	sub    $0x4,%esp
f0118546:	68 7c 92 13 f0       	push   $0xf013927c
f011854b:	6a 40                	push   $0x40
f011854d:	68 ae 92 13 f0       	push   $0xf01392ae
f0118552:	e8 59 7c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118557:	e8 28 c1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011855c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011855f:	74 14                	je     f0118575 <test_kmalloc+0x13e>
f0118561:	83 ec 04             	sub    $0x4,%esp
f0118564:	68 c8 92 13 f0       	push   $0xf01392c8
f0118569:	6a 41                	push   $0x41
f011856b:	68 ae 92 13 f0       	push   $0xf01392ae
f0118570:	e8 3b 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118575:	e8 64 44 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011857a:	89 c2                	mov    %eax,%edx
f011857c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011857f:	39 c2                	cmp    %eax,%edx
f0118581:	74 14                	je     f0118597 <test_kmalloc+0x160>
f0118583:	83 ec 04             	sub    $0x4,%esp
f0118586:	68 30 93 13 f0       	push   $0xf0139330
f011858b:	6a 42                	push   $0x42
f011858d:	68 ae 92 13 f0       	push   $0xf01392ae
f0118592:	e8 19 7c fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118597:	83 ec 0c             	sub    $0xc,%esp
f011859a:	68 70 93 13 f0       	push   $0xf0139370
f011859f:	e8 8d 88 fe ff       	call   f0100e31 <cprintf>
f01185a4:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01185a7:	e8 32 44 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01185ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01185af:	e8 d0 c0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01185b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01185b7:	83 ec 0c             	sub    $0xc,%esp
f01185ba:	68 00 fc 1f 00       	push   $0x1ffc00
f01185bf:	e8 9b f9 fe ff       	call   f0107f5f <kmalloc>
f01185c4:	83 c4 10             	add    $0x10,%esp
f01185c7:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01185cd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01185d3:	89 c1                	mov    %eax,%ecx
f01185d5:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01185dc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01185e1:	0f b6 d0             	movzbl %al,%edx
f01185e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01185e7:	01 d0                	add    %edx,%eax
f01185e9:	48                   	dec    %eax
f01185ea:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01185ed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01185f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01185f5:	f7 75 c0             	divl   -0x40(%ebp)
f01185f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01185fb:	29 d0                	sub    %edx,%eax
f01185fd:	89 c3                	mov    %eax,%ebx
f01185ff:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118606:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011860b:	0f b6 c0             	movzbl %al,%eax
f011860e:	c1 e0 04             	shl    $0x4,%eax
f0118611:	89 c2                	mov    %eax,%edx
f0118613:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118616:	01 d0                	add    %edx,%eax
f0118618:	48                   	dec    %eax
f0118619:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011861c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011861f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118624:	f7 75 b8             	divl   -0x48(%ebp)
f0118627:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011862a:	29 d0                	sub    %edx,%eax
f011862c:	01 d8                	add    %ebx,%eax
f011862e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118633:	39 c1                	cmp    %eax,%ecx
f0118635:	74 14                	je     f011864b <test_kmalloc+0x214>
f0118637:	83 ec 04             	sub    $0x4,%esp
f011863a:	68 94 93 13 f0       	push   $0xf0139394
f011863f:	6a 49                	push   $0x49
f0118641:	68 ae 92 13 f0       	push   $0xf01392ae
f0118646:	e8 65 7b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011864b:	e8 34 c0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118650:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118653:	74 14                	je     f0118669 <test_kmalloc+0x232>
f0118655:	83 ec 04             	sub    $0x4,%esp
f0118658:	68 c8 92 13 f0       	push   $0xf01392c8
f011865d:	6a 4a                	push   $0x4a
f011865f:	68 ae 92 13 f0       	push   $0xf01392ae
f0118664:	e8 47 7b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118669:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011866c:	e8 6d 43 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118671:	29 c3                	sub    %eax,%ebx
f0118673:	89 d8                	mov    %ebx,%eax
f0118675:	3d 00 02 00 00       	cmp    $0x200,%eax
f011867a:	74 14                	je     f0118690 <test_kmalloc+0x259>
f011867c:	83 ec 04             	sub    $0x4,%esp
f011867f:	68 30 93 13 f0       	push   $0xf0139330
f0118684:	6a 4b                	push   $0x4b
f0118686:	68 ae 92 13 f0       	push   $0xf01392ae
f011868b:	e8 20 7b fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118690:	e8 49 43 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118695:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118698:	e8 e7 bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f011869d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01186a0:	83 ec 0c             	sub    $0xc,%esp
f01186a3:	68 00 fc 1f 00       	push   $0x1ffc00
f01186a8:	e8 b2 f8 fe ff       	call   f0107f5f <kmalloc>
f01186ad:	83 c4 10             	add    $0x10,%esp
f01186b0:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01186b6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01186bc:	89 c1                	mov    %eax,%ecx
f01186be:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01186c5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01186ca:	0f b6 d0             	movzbl %al,%edx
f01186cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01186d0:	01 d0                	add    %edx,%eax
f01186d2:	48                   	dec    %eax
f01186d3:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01186d6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01186d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01186de:	f7 75 b0             	divl   -0x50(%ebp)
f01186e1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01186e4:	29 d0                	sub    %edx,%eax
f01186e6:	89 c3                	mov    %eax,%ebx
f01186e8:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01186ef:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01186f4:	0f b6 c0             	movzbl %al,%eax
f01186f7:	c1 e0 04             	shl    $0x4,%eax
f01186fa:	89 c2                	mov    %eax,%edx
f01186fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01186ff:	01 d0                	add    %edx,%eax
f0118701:	48                   	dec    %eax
f0118702:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118705:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118708:	ba 00 00 00 00       	mov    $0x0,%edx
f011870d:	f7 75 a8             	divl   -0x58(%ebp)
f0118710:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118713:	29 d0                	sub    %edx,%eax
f0118715:	01 d8                	add    %ebx,%eax
f0118717:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011871c:	39 c1                	cmp    %eax,%ecx
f011871e:	74 14                	je     f0118734 <test_kmalloc+0x2fd>
f0118720:	83 ec 04             	sub    $0x4,%esp
f0118723:	68 94 93 13 f0       	push   $0xf0139394
f0118728:	6a 51                	push   $0x51
f011872a:	68 ae 92 13 f0       	push   $0xf01392ae
f011872f:	e8 7c 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118734:	e8 4b bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118739:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011873c:	74 14                	je     f0118752 <test_kmalloc+0x31b>
f011873e:	83 ec 04             	sub    $0x4,%esp
f0118741:	68 c8 92 13 f0       	push   $0xf01392c8
f0118746:	6a 52                	push   $0x52
f0118748:	68 ae 92 13 f0       	push   $0xf01392ae
f011874d:	e8 5e 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118752:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118755:	e8 84 42 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011875a:	29 c3                	sub    %eax,%ebx
f011875c:	89 d8                	mov    %ebx,%eax
f011875e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118763:	74 14                	je     f0118779 <test_kmalloc+0x342>
f0118765:	83 ec 04             	sub    $0x4,%esp
f0118768:	68 30 93 13 f0       	push   $0xf0139330
f011876d:	6a 53                	push   $0x53
f011876f:	68 ae 92 13 f0       	push   $0xf01392ae
f0118774:	e8 37 7a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118779:	e8 60 42 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011877e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118781:	e8 fe be fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118786:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118789:	83 ec 0c             	sub    $0xc,%esp
f011878c:	68 00 08 00 00       	push   $0x800
f0118791:	e8 c9 f7 fe ff       	call   f0107f5f <kmalloc>
f0118796:	83 c4 10             	add    $0x10,%esp
f0118799:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011879f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01187a5:	89 c1                	mov    %eax,%ecx
f01187a7:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01187ae:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01187b3:	0f b6 d0             	movzbl %al,%edx
f01187b6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01187b9:	01 d0                	add    %edx,%eax
f01187bb:	48                   	dec    %eax
f01187bc:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01187bf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01187c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01187c7:	f7 75 a0             	divl   -0x60(%ebp)
f01187ca:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01187cd:	29 d0                	sub    %edx,%eax
f01187cf:	89 c3                	mov    %eax,%ebx
f01187d1:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01187d8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01187dd:	0f b6 c0             	movzbl %al,%eax
f01187e0:	c1 e0 04             	shl    $0x4,%eax
f01187e3:	89 c2                	mov    %eax,%edx
f01187e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01187e8:	01 d0                	add    %edx,%eax
f01187ea:	48                   	dec    %eax
f01187eb:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01187ee:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01187f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01187f6:	f7 75 98             	divl   -0x68(%ebp)
f01187f9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01187fc:	29 d0                	sub    %edx,%eax
f01187fe:	01 d8                	add    %ebx,%eax
f0118800:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118805:	39 c1                	cmp    %eax,%ecx
f0118807:	74 14                	je     f011881d <test_kmalloc+0x3e6>
f0118809:	83 ec 04             	sub    $0x4,%esp
f011880c:	68 94 93 13 f0       	push   $0xf0139394
f0118811:	6a 59                	push   $0x59
f0118813:	68 ae 92 13 f0       	push   $0xf01392ae
f0118818:	e8 93 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011881d:	e8 62 be fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118822:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118825:	74 14                	je     f011883b <test_kmalloc+0x404>
f0118827:	83 ec 04             	sub    $0x4,%esp
f011882a:	68 c8 92 13 f0       	push   $0xf01392c8
f011882f:	6a 5a                	push   $0x5a
f0118831:	68 ae 92 13 f0       	push   $0xf01392ae
f0118836:	e8 75 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011883b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011883e:	e8 9b 41 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118843:	29 c3                	sub    %eax,%ebx
f0118845:	89 d8                	mov    %ebx,%eax
f0118847:	83 f8 01             	cmp    $0x1,%eax
f011884a:	74 14                	je     f0118860 <test_kmalloc+0x429>
f011884c:	83 ec 04             	sub    $0x4,%esp
f011884f:	68 30 93 13 f0       	push   $0xf0139330
f0118854:	6a 5b                	push   $0x5b
f0118856:	68 ae 92 13 f0       	push   $0xf01392ae
f011885b:	e8 50 79 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118860:	e8 79 41 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118865:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118868:	e8 17 be fe ff       	call   f0104684 <pf_calculate_free_frames>
f011886d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118870:	83 ec 0c             	sub    $0xc,%esp
f0118873:	68 00 08 00 00       	push   $0x800
f0118878:	e8 e2 f6 fe ff       	call   f0107f5f <kmalloc>
f011887d:	83 c4 10             	add    $0x10,%esp
f0118880:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118886:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011888c:	89 c1                	mov    %eax,%ecx
f011888e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118895:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011889a:	0f b6 d0             	movzbl %al,%edx
f011889d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01188a0:	01 d0                	add    %edx,%eax
f01188a2:	48                   	dec    %eax
f01188a3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01188a6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01188a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01188ae:	f7 75 90             	divl   -0x70(%ebp)
f01188b1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01188b4:	29 d0                	sub    %edx,%eax
f01188b6:	89 c3                	mov    %eax,%ebx
f01188b8:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01188bf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01188c4:	0f b6 c0             	movzbl %al,%eax
f01188c7:	c1 e0 04             	shl    $0x4,%eax
f01188ca:	89 c2                	mov    %eax,%edx
f01188cc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01188cf:	01 d0                	add    %edx,%eax
f01188d1:	48                   	dec    %eax
f01188d2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01188d5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01188d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01188dd:	f7 75 88             	divl   -0x78(%ebp)
f01188e0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01188e3:	29 d0                	sub    %edx,%eax
f01188e5:	01 d8                	add    %ebx,%eax
f01188e7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01188ec:	39 c1                	cmp    %eax,%ecx
f01188ee:	74 14                	je     f0118904 <test_kmalloc+0x4cd>
f01188f0:	83 ec 04             	sub    $0x4,%esp
f01188f3:	68 94 93 13 f0       	push   $0xf0139394
f01188f8:	6a 61                	push   $0x61
f01188fa:	68 ae 92 13 f0       	push   $0xf01392ae
f01188ff:	e8 ac 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118904:	e8 7b bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118909:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011890c:	74 14                	je     f0118922 <test_kmalloc+0x4eb>
f011890e:	83 ec 04             	sub    $0x4,%esp
f0118911:	68 c8 92 13 f0       	push   $0xf01392c8
f0118916:	6a 62                	push   $0x62
f0118918:	68 ae 92 13 f0       	push   $0xf01392ae
f011891d:	e8 8e 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118922:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118925:	e8 b4 40 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011892a:	29 c3                	sub    %eax,%ebx
f011892c:	89 d8                	mov    %ebx,%eax
f011892e:	83 f8 01             	cmp    $0x1,%eax
f0118931:	74 14                	je     f0118947 <test_kmalloc+0x510>
f0118933:	83 ec 04             	sub    $0x4,%esp
f0118936:	68 30 93 13 f0       	push   $0xf0139330
f011893b:	6a 63                	push   $0x63
f011893d:	68 ae 92 13 f0       	push   $0xf01392ae
f0118942:	e8 69 78 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118947:	e8 92 40 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011894c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011894f:	e8 30 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118954:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118957:	83 ec 0c             	sub    $0xc,%esp
f011895a:	68 00 1c 00 00       	push   $0x1c00
f011895f:	e8 fb f5 fe ff       	call   f0107f5f <kmalloc>
f0118964:	83 c4 10             	add    $0x10,%esp
f0118967:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011896d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118973:	89 c1                	mov    %eax,%ecx
f0118975:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011897c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118981:	0f b6 d0             	movzbl %al,%edx
f0118984:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118987:	01 d0                	add    %edx,%eax
f0118989:	48                   	dec    %eax
f011898a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118990:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118996:	ba 00 00 00 00       	mov    $0x0,%edx
f011899b:	f7 75 80             	divl   -0x80(%ebp)
f011899e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01189a4:	29 d0                	sub    %edx,%eax
f01189a6:	89 c3                	mov    %eax,%ebx
f01189a8:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01189af:	10 00 00 
f01189b2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01189b7:	0f b6 c0             	movzbl %al,%eax
f01189ba:	c1 e0 04             	shl    $0x4,%eax
f01189bd:	89 c2                	mov    %eax,%edx
f01189bf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01189c5:	01 d0                	add    %edx,%eax
f01189c7:	48                   	dec    %eax
f01189c8:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01189ce:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01189d9:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01189df:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189e5:	29 d0                	sub    %edx,%eax
f01189e7:	01 d8                	add    %ebx,%eax
f01189e9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01189ee:	39 c1                	cmp    %eax,%ecx
f01189f0:	74 14                	je     f0118a06 <test_kmalloc+0x5cf>
f01189f2:	83 ec 04             	sub    $0x4,%esp
f01189f5:	68 94 93 13 f0       	push   $0xf0139394
f01189fa:	6a 69                	push   $0x69
f01189fc:	68 ae 92 13 f0       	push   $0xf01392ae
f0118a01:	e8 aa 77 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a06:	e8 79 bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a0e:	74 14                	je     f0118a24 <test_kmalloc+0x5ed>
f0118a10:	83 ec 04             	sub    $0x4,%esp
f0118a13:	68 c8 92 13 f0       	push   $0xf01392c8
f0118a18:	6a 6a                	push   $0x6a
f0118a1a:	68 ae 92 13 f0       	push   $0xf01392ae
f0118a1f:	e8 8c 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a24:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118a27:	e8 b2 3f ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118a2c:	29 c3                	sub    %eax,%ebx
f0118a2e:	89 d8                	mov    %ebx,%eax
f0118a30:	83 f8 02             	cmp    $0x2,%eax
f0118a33:	74 14                	je     f0118a49 <test_kmalloc+0x612>
f0118a35:	83 ec 04             	sub    $0x4,%esp
f0118a38:	68 30 93 13 f0       	push   $0xf0139330
f0118a3d:	6a 6b                	push   $0x6b
f0118a3f:	68 ae 92 13 f0       	push   $0xf01392ae
f0118a44:	e8 67 77 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118a49:	e8 90 3f ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118a4e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a51:	e8 2e bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a56:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118a59:	83 ec 0c             	sub    $0xc,%esp
f0118a5c:	68 00 fc 2f 00       	push   $0x2ffc00
f0118a61:	e8 f9 f4 fe ff       	call   f0107f5f <kmalloc>
f0118a66:	83 c4 10             	add    $0x10,%esp
f0118a69:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a6f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118a75:	89 c1                	mov    %eax,%ecx
f0118a77:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118a7e:	10 00 00 
f0118a81:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118a86:	0f b6 d0             	movzbl %al,%edx
f0118a89:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118a8f:	01 d0                	add    %edx,%eax
f0118a91:	48                   	dec    %eax
f0118a92:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118a98:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa3:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118aa9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118aaf:	29 d0                	sub    %edx,%eax
f0118ab1:	89 c3                	mov    %eax,%ebx
f0118ab3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118aba:	10 00 00 
f0118abd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118ac2:	0f b6 c0             	movzbl %al,%eax
f0118ac5:	c1 e0 04             	shl    $0x4,%eax
f0118ac8:	89 c2                	mov    %eax,%edx
f0118aca:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118ad0:	01 d0                	add    %edx,%eax
f0118ad2:	48                   	dec    %eax
f0118ad3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118ad9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ae4:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118aea:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118af0:	29 d0                	sub    %edx,%eax
f0118af2:	01 d8                	add    %ebx,%eax
f0118af4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118af9:	39 c1                	cmp    %eax,%ecx
f0118afb:	74 14                	je     f0118b11 <test_kmalloc+0x6da>
f0118afd:	83 ec 04             	sub    $0x4,%esp
f0118b00:	68 94 93 13 f0       	push   $0xf0139394
f0118b05:	6a 71                	push   $0x71
f0118b07:	68 ae 92 13 f0       	push   $0xf01392ae
f0118b0c:	e8 9f 76 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b11:	e8 6e bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b19:	74 14                	je     f0118b2f <test_kmalloc+0x6f8>
f0118b1b:	83 ec 04             	sub    $0x4,%esp
f0118b1e:	68 c8 92 13 f0       	push   $0xf01392c8
f0118b23:	6a 72                	push   $0x72
f0118b25:	68 ae 92 13 f0       	push   $0xf01392ae
f0118b2a:	e8 81 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b2f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118b32:	e8 a7 3e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118b37:	29 c3                	sub    %eax,%ebx
f0118b39:	89 d8                	mov    %ebx,%eax
f0118b3b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118b40:	74 14                	je     f0118b56 <test_kmalloc+0x71f>
f0118b42:	83 ec 04             	sub    $0x4,%esp
f0118b45:	68 30 93 13 f0       	push   $0xf0139330
f0118b4a:	6a 73                	push   $0x73
f0118b4c:	68 ae 92 13 f0       	push   $0xf01392ae
f0118b51:	e8 5a 76 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118b56:	e8 83 3e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118b5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b5e:	e8 21 bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b63:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118b66:	83 ec 0c             	sub    $0xc,%esp
f0118b69:	68 00 fc 5f 00       	push   $0x5ffc00
f0118b6e:	e8 ec f3 fe ff       	call   f0107f5f <kmalloc>
f0118b73:	83 c4 10             	add    $0x10,%esp
f0118b76:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b7c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118b82:	89 c1                	mov    %eax,%ecx
f0118b84:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118b8b:	10 00 00 
f0118b8e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118b93:	0f b6 d0             	movzbl %al,%edx
f0118b96:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118b9c:	01 d0                	add    %edx,%eax
f0118b9e:	48                   	dec    %eax
f0118b9f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118ba5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118bab:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bb0:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118bb6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118bbc:	29 d0                	sub    %edx,%eax
f0118bbe:	89 c3                	mov    %eax,%ebx
f0118bc0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118bc7:	10 00 00 
f0118bca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118bcf:	0f b6 c0             	movzbl %al,%eax
f0118bd2:	c1 e0 04             	shl    $0x4,%eax
f0118bd5:	89 c2                	mov    %eax,%edx
f0118bd7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118bdd:	01 d0                	add    %edx,%eax
f0118bdf:	48                   	dec    %eax
f0118be0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118be6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118bec:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bf1:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118bf7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118bfd:	29 d0                	sub    %edx,%eax
f0118bff:	01 d8                	add    %ebx,%eax
f0118c01:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118c06:	39 c1                	cmp    %eax,%ecx
f0118c08:	74 14                	je     f0118c1e <test_kmalloc+0x7e7>
f0118c0a:	83 ec 04             	sub    $0x4,%esp
f0118c0d:	68 94 93 13 f0       	push   $0xf0139394
f0118c12:	6a 79                	push   $0x79
f0118c14:	68 ae 92 13 f0       	push   $0xf01392ae
f0118c19:	e8 92 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c1e:	e8 61 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c23:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118c26:	74 14                	je     f0118c3c <test_kmalloc+0x805>
f0118c28:	83 ec 04             	sub    $0x4,%esp
f0118c2b:	68 c8 92 13 f0       	push   $0xf01392c8
f0118c30:	6a 7a                	push   $0x7a
f0118c32:	68 ae 92 13 f0       	push   $0xf01392ae
f0118c37:	e8 74 75 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c3c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118c3f:	e8 9a 3d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118c44:	29 c3                	sub    %eax,%ebx
f0118c46:	89 d8                	mov    %ebx,%eax
f0118c48:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118c4d:	74 14                	je     f0118c63 <test_kmalloc+0x82c>
f0118c4f:	83 ec 04             	sub    $0x4,%esp
f0118c52:	68 30 93 13 f0       	push   $0xf0139330
f0118c57:	6a 7b                	push   $0x7b
f0118c59:	68 ae 92 13 f0       	push   $0xf01392ae
f0118c5e:	e8 4d 75 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118c63:	e8 76 3d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118c68:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c6b:	e8 14 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c70:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118c73:	83 ec 0c             	sub    $0xc,%esp
f0118c76:	68 00 38 00 00       	push   $0x3800
f0118c7b:	e8 df f2 fe ff       	call   f0107f5f <kmalloc>
f0118c80:	83 c4 10             	add    $0x10,%esp
f0118c83:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c89:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118c8f:	89 c1                	mov    %eax,%ecx
f0118c91:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118c98:	10 00 00 
f0118c9b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118ca0:	0f b6 d0             	movzbl %al,%edx
f0118ca3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118ca9:	01 d0                	add    %edx,%eax
f0118cab:	48                   	dec    %eax
f0118cac:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118cb2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118cb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cbd:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118cc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118cc9:	29 d0                	sub    %edx,%eax
f0118ccb:	89 c3                	mov    %eax,%ebx
f0118ccd:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118cd4:	10 00 00 
f0118cd7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0118cdc:	0f b6 c0             	movzbl %al,%eax
f0118cdf:	c1 e0 04             	shl    $0x4,%eax
f0118ce2:	89 c2                	mov    %eax,%edx
f0118ce4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118cea:	01 d0                	add    %edx,%eax
f0118cec:	48                   	dec    %eax
f0118ced:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118cf3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118cf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cfe:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118d04:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118d0a:	29 d0                	sub    %edx,%eax
f0118d0c:	01 d8                	add    %ebx,%eax
f0118d0e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118d13:	39 c1                	cmp    %eax,%ecx
f0118d15:	74 17                	je     f0118d2e <test_kmalloc+0x8f7>
f0118d17:	83 ec 04             	sub    $0x4,%esp
f0118d1a:	68 94 93 13 f0       	push   $0xf0139394
f0118d1f:	68 81 00 00 00       	push   $0x81
f0118d24:	68 ae 92 13 f0       	push   $0xf01392ae
f0118d29:	e8 82 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d2e:	e8 51 b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118d33:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118d36:	74 17                	je     f0118d4f <test_kmalloc+0x918>
f0118d38:	83 ec 04             	sub    $0x4,%esp
f0118d3b:	68 c8 92 13 f0       	push   $0xf01392c8
f0118d40:	68 82 00 00 00       	push   $0x82
f0118d45:	68 ae 92 13 f0       	push   $0xf01392ae
f0118d4a:	e8 61 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d4f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118d52:	e8 87 3c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118d57:	29 c3                	sub    %eax,%ebx
f0118d59:	89 d8                	mov    %ebx,%eax
f0118d5b:	83 f8 04             	cmp    $0x4,%eax
f0118d5e:	74 17                	je     f0118d77 <test_kmalloc+0x940>
f0118d60:	83 ec 04             	sub    $0x4,%esp
f0118d63:	68 30 93 13 f0       	push   $0xf0139330
f0118d68:	68 83 00 00 00       	push   $0x83
f0118d6d:	68 ae 92 13 f0       	push   $0xf01392ae
f0118d72:	e8 39 74 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f0118d77:	83 ec 0c             	sub    $0xc,%esp
f0118d7a:	68 fa 93 13 f0       	push   $0xf01393fa
f0118d7f:	e8 ad 80 fe ff       	call   f0100e31 <cprintf>
f0118d84:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118d87:	e8 52 3c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0118d8c:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118d8f:	e8 f0 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118d94:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118d97:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0118d9e:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118da1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118da7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0118dad:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118db3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118db6:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118db8:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118dbe:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118dc4:	01 c2                	add    %eax,%edx
f0118dc6:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118dc9:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118dcb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118dd1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118dd7:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118dde:	fd 0f 00 
			shortArr[0] = minShort;
f0118de1:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118de7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118dea:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118ded:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118df3:	01 c0                	add    %eax,%eax
f0118df5:	89 c2                	mov    %eax,%edx
f0118df7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118dfd:	01 c2                	add    %eax,%edx
f0118dff:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118e03:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118e06:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118e0c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118e12:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0118e19:	01 00 00 
			intArr[0] = minInt;
f0118e1c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e22:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118e25:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118e27:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118e2d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118e34:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e3a:	01 c2                	add    %eax,%edx
f0118e3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118e3f:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118e41:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118e47:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118e4d:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0118e54:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118e57:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e5d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118e60:	88 10                	mov    %dl,(%eax)
f0118e62:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0118e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118e6b:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118e6f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e75:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118e78:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118e7b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e81:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e88:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e8e:	01 c2                	add    %eax,%edx
f0118e90:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118e93:	88 02                	mov    %al,(%edx)
f0118e95:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118e9b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ea2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ea8:	01 c2                	add    %eax,%edx
f0118eaa:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118eae:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118eb2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118eb8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ebf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ec5:	01 c2                	add    %eax,%edx
f0118ec7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118eca:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118ecd:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0118ed4:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118ed7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118edd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0118ee3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118ee9:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118eec:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118eee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118ef4:	89 c2                	mov    %eax,%edx
f0118ef6:	c1 ea 1f             	shr    $0x1f,%edx
f0118ef9:	01 d0                	add    %edx,%eax
f0118efb:	d1 f8                	sar    %eax
f0118efd:	89 c2                	mov    %eax,%edx
f0118eff:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f05:	01 c2                	add    %eax,%edx
f0118f07:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118f0a:	88 c1                	mov    %al,%cl
f0118f0c:	c0 e9 07             	shr    $0x7,%cl
f0118f0f:	01 c8                	add    %ecx,%eax
f0118f11:	d0 f8                	sar    %al
f0118f13:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118f15:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118f1b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f21:	01 c2                	add    %eax,%edx
f0118f23:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118f26:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118f28:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f2e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118f34:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f0118f3b:	1b 00 00 
			shortArr2[0] = minShort;
f0118f3e:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0118f44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118f47:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118f4a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118f50:	01 c0                	add    %eax,%eax
f0118f52:	89 c2                	mov    %eax,%edx
f0118f54:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118f5a:	01 c2                	add    %eax,%edx
f0118f5c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118f60:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118f63:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f69:	8a 00                	mov    (%eax),%al
f0118f6b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118f6e:	75 15                	jne    f0118f85 <test_kmalloc+0xb4e>
f0118f70:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118f76:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f7c:	01 d0                	add    %edx,%eax
f0118f7e:	8a 00                	mov    (%eax),%al
f0118f80:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118f83:	74 17                	je     f0118f9c <test_kmalloc+0xb65>
f0118f85:	83 ec 04             	sub    $0x4,%esp
f0118f88:	68 04 94 13 f0       	push   $0xf0139404
f0118f8d:	68 b2 00 00 00       	push   $0xb2
f0118f92:	68 ae 92 13 f0       	push   $0xf01392ae
f0118f97:	e8 14 72 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118f9c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118fa2:	66 8b 00             	mov    (%eax),%ax
f0118fa5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118fa9:	75 1b                	jne    f0118fc6 <test_kmalloc+0xb8f>
f0118fab:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118fb1:	01 c0                	add    %eax,%eax
f0118fb3:	89 c2                	mov    %eax,%edx
f0118fb5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118fbb:	01 d0                	add    %edx,%eax
f0118fbd:	66 8b 00             	mov    (%eax),%ax
f0118fc0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118fc4:	74 17                	je     f0118fdd <test_kmalloc+0xba6>
f0118fc6:	83 ec 04             	sub    $0x4,%esp
f0118fc9:	68 04 94 13 f0       	push   $0xf0139404
f0118fce:	68 b3 00 00 00       	push   $0xb3
f0118fd3:	68 ae 92 13 f0       	push   $0xf01392ae
f0118fd8:	e8 d3 71 fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118fdd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118fe3:	8b 00                	mov    (%eax),%eax
f0118fe5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118fe8:	75 1c                	jne    f0119006 <test_kmalloc+0xbcf>
f0118fea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118ff0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118ff7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118ffd:	01 d0                	add    %edx,%eax
f0118fff:	8b 00                	mov    (%eax),%eax
f0119001:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0119004:	74 17                	je     f011901d <test_kmalloc+0xbe6>
f0119006:	83 ec 04             	sub    $0x4,%esp
f0119009:	68 04 94 13 f0       	push   $0xf0139404
f011900e:	68 b4 00 00 00       	push   $0xb4
f0119013:	68 ae 92 13 f0       	push   $0xf01392ae
f0119018:	e8 93 71 fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011901d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119023:	8a 00                	mov    (%eax),%al
f0119025:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0119028:	75 1c                	jne    f0119046 <test_kmalloc+0xc0f>
f011902a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119030:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119037:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011903d:	01 d0                	add    %edx,%eax
f011903f:	8a 00                	mov    (%eax),%al
f0119041:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119044:	74 17                	je     f011905d <test_kmalloc+0xc26>
f0119046:	83 ec 04             	sub    $0x4,%esp
f0119049:	68 04 94 13 f0       	push   $0xf0139404
f011904e:	68 b6 00 00 00       	push   $0xb6
f0119053:	68 ae 92 13 f0       	push   $0xf01392ae
f0119058:	e8 53 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011905d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119063:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119067:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011906b:	75 1f                	jne    f011908c <test_kmalloc+0xc55>
f011906d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119073:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011907a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119080:	01 d0                	add    %edx,%eax
f0119082:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119086:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011908a:	74 17                	je     f01190a3 <test_kmalloc+0xc6c>
f011908c:	83 ec 04             	sub    $0x4,%esp
f011908f:	68 04 94 13 f0       	push   $0xf0139404
f0119094:	68 b7 00 00 00       	push   $0xb7
f0119099:	68 ae 92 13 f0       	push   $0xf01392ae
f011909e:	e8 0d 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01190a3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190a9:	8b 40 04             	mov    0x4(%eax),%eax
f01190ac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01190af:	75 1d                	jne    f01190ce <test_kmalloc+0xc97>
f01190b1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01190b7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01190be:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190c4:	01 d0                	add    %edx,%eax
f01190c6:	8b 40 04             	mov    0x4(%eax),%eax
f01190c9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01190cc:	74 17                	je     f01190e5 <test_kmalloc+0xcae>
f01190ce:	83 ec 04             	sub    $0x4,%esp
f01190d1:	68 04 94 13 f0       	push   $0xf0139404
f01190d6:	68 b8 00 00 00       	push   $0xb8
f01190db:	68 ae 92 13 f0       	push   $0xf01392ae
f01190e0:	e8 cb 70 fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01190e5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01190eb:	8a 00                	mov    (%eax),%al
f01190ed:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01190f0:	75 40                	jne    f0119132 <test_kmalloc+0xcfb>
f01190f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01190f8:	89 c2                	mov    %eax,%edx
f01190fa:	c1 ea 1f             	shr    $0x1f,%edx
f01190fd:	01 d0                	add    %edx,%eax
f01190ff:	d1 f8                	sar    %eax
f0119101:	89 c2                	mov    %eax,%edx
f0119103:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119109:	01 d0                	add    %edx,%eax
f011910b:	8a 10                	mov    (%eax),%dl
f011910d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119110:	88 c1                	mov    %al,%cl
f0119112:	c0 e9 07             	shr    $0x7,%cl
f0119115:	01 c8                	add    %ecx,%eax
f0119117:	d0 f8                	sar    %al
f0119119:	38 c2                	cmp    %al,%dl
f011911b:	75 15                	jne    f0119132 <test_kmalloc+0xcfb>
f011911d:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0119123:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119129:	01 d0                	add    %edx,%eax
f011912b:	8a 00                	mov    (%eax),%al
f011912d:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119130:	74 17                	je     f0119149 <test_kmalloc+0xd12>
f0119132:	83 ec 04             	sub    $0x4,%esp
f0119135:	68 04 94 13 f0       	push   $0xf0139404
f011913a:	68 ba 00 00 00       	push   $0xba
f011913f:	68 ae 92 13 f0       	push   $0xf01392ae
f0119144:	e8 67 70 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0119149:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011914f:	66 8b 00             	mov    (%eax),%ax
f0119152:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0119156:	75 1b                	jne    f0119173 <test_kmalloc+0xd3c>
f0119158:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011915e:	01 c0                	add    %eax,%eax
f0119160:	89 c2                	mov    %eax,%edx
f0119162:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119168:	01 d0                	add    %edx,%eax
f011916a:	66 8b 00             	mov    (%eax),%ax
f011916d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0119171:	74 17                	je     f011918a <test_kmalloc+0xd53>
f0119173:	83 ec 04             	sub    $0x4,%esp
f0119176:	68 04 94 13 f0       	push   $0xf0139404
f011917b:	68 bb 00 00 00       	push   $0xbb
f0119180:	68 ae 92 13 f0       	push   $0xf01392ae
f0119185:	e8 26 70 fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011918a:	e8 4f 38 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011918f:	89 c2                	mov    %eax,%edx
f0119191:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119194:	39 c2                	cmp    %eax,%edx
f0119196:	74 17                	je     f01191af <test_kmalloc+0xd78>
f0119198:	83 ec 04             	sub    $0x4,%esp
f011919b:	68 30 93 13 f0       	push   $0xf0139330
f01191a0:	68 bd 00 00 00       	push   $0xbd
f01191a5:	68 ae 92 13 f0       	push   $0xf01392ae
f01191aa:	e8 01 70 fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191af:	e8 d0 b4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01191b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01191b7:	74 17                	je     f01191d0 <test_kmalloc+0xd99>
f01191b9:	83 ec 04             	sub    $0x4,%esp
f01191bc:	68 c8 92 13 f0       	push   $0xf01392c8
f01191c1:	68 be 00 00 00       	push   $0xbe
f01191c6:	68 ae 92 13 f0       	push   $0xf01392ae
f01191cb:	e8 e0 6f fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f01191d0:	83 ec 0c             	sub    $0xc,%esp
f01191d3:	68 39 94 13 f0       	push   $0xf0139439
f01191d8:	e8 54 7c fe ff       	call   f0100e31 <cprintf>
f01191dd:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f01191e0:	e8 f9 37 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01191e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01191e8:	e8 97 b4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01191ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f01191f0:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01191f7:	10 00 00 
f01191fa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01191ff:	0f b6 d0             	movzbl %al,%edx
f0119202:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119208:	01 d0                	add    %edx,%eax
f011920a:	48                   	dec    %eax
f011920b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119211:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119217:	ba 00 00 00 00       	mov    $0x0,%edx
f011921c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119222:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119228:	29 d0                	sub    %edx,%eax
f011922a:	89 c1                	mov    %eax,%ecx
f011922c:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119233:	10 00 00 
f0119236:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011923b:	0f b6 c0             	movzbl %al,%eax
f011923e:	c1 e0 04             	shl    $0x4,%eax
f0119241:	89 c2                	mov    %eax,%edx
f0119243:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119249:	01 d0                	add    %edx,%eax
f011924b:	48                   	dec    %eax
f011924c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119252:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119258:	ba 00 00 00 00       	mov    $0x0,%edx
f011925d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119263:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119269:	29 d0                	sub    %edx,%eax
f011926b:	01 c8                	add    %ecx,%eax
f011926d:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0119272:	29 c2                	sub    %eax,%edx
f0119274:	89 d0                	mov    %edx,%eax
f0119276:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011927c:	83 ec 0c             	sub    $0xc,%esp
f011927f:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f0119285:	e8 d5 ec fe ff       	call   f0107f5f <kmalloc>
f011928a:	83 c4 10             	add    $0x10,%esp
f011928d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0119293:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119299:	85 c0                	test   %eax,%eax
f011929b:	74 17                	je     f01192b4 <test_kmalloc+0xe7d>
f011929d:	83 ec 04             	sub    $0x4,%esp
f01192a0:	68 7c 92 13 f0       	push   $0xf013927c
f01192a5:	68 c8 00 00 00       	push   $0xc8
f01192aa:	68 ae 92 13 f0       	push   $0xf01392ae
f01192af:	e8 fc 6e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192b4:	e8 cb b3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01192b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01192bc:	74 17                	je     f01192d5 <test_kmalloc+0xe9e>
f01192be:	83 ec 04             	sub    $0x4,%esp
f01192c1:	68 c8 92 13 f0       	push   $0xf01392c8
f01192c6:	68 c9 00 00 00       	push   $0xc9
f01192cb:	68 ae 92 13 f0       	push   $0xf01392ae
f01192d0:	e8 db 6e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01192d5:	e8 04 37 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01192da:	89 c2                	mov    %eax,%edx
f01192dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01192df:	39 c2                	cmp    %eax,%edx
f01192e1:	74 17                	je     f01192fa <test_kmalloc+0xec3>
f01192e3:	83 ec 04             	sub    $0x4,%esp
f01192e6:	68 30 93 13 f0       	push   $0xf0139330
f01192eb:	68 ca 00 00 00       	push   $0xca
f01192f0:	68 ae 92 13 f0       	push   $0xf01392ae
f01192f5:	e8 b6 6e fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f01192fa:	83 ec 0c             	sub    $0xc,%esp
f01192fd:	68 40 94 13 f0       	push   $0xf0139440
f0119302:	e8 2a 7b fe ff       	call   f0100e31 <cprintf>
f0119307:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f011930a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119310:	05 00 40 00 00       	add    $0x4000,%eax
f0119315:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011931b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119322:	10 00 00 
f0119325:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011932a:	0f b6 d0             	movzbl %al,%edx
f011932d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119333:	01 d0                	add    %edx,%eax
f0119335:	48                   	dec    %eax
f0119336:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011933c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119342:	ba 00 00 00 00       	mov    $0x0,%edx
f0119347:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011934d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119353:	29 d0                	sub    %edx,%eax
f0119355:	89 c1                	mov    %eax,%ecx
f0119357:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011935e:	10 00 00 
f0119361:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119366:	0f b6 c0             	movzbl %al,%eax
f0119369:	c1 e0 04             	shl    $0x4,%eax
f011936c:	89 c2                	mov    %eax,%edx
f011936e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119374:	01 d0                	add    %edx,%eax
f0119376:	48                   	dec    %eax
f0119377:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011937d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119383:	ba 00 00 00 00       	mov    $0x0,%edx
f0119388:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011938e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119394:	29 d0                	sub    %edx,%eax
f0119396:	01 c8                	add    %ecx,%eax
f0119398:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011939d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01193a0:	eb 6a                	jmp    f011940c <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f01193a2:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01193a7:	83 ec 04             	sub    $0x4,%esp
f01193aa:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f01193b0:	52                   	push   %edx
f01193b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01193b4:	50                   	push   %eax
f01193b5:	e8 2d e1 fe ff       	call   f01074e7 <get_page_table>
f01193ba:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01193bd:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01193c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01193c6:	c1 ea 0c             	shr    $0xc,%edx
f01193c9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01193cf:	c1 e2 02             	shl    $0x2,%edx
f01193d2:	01 d0                	add    %edx,%eax
f01193d4:	8b 00                	mov    (%eax),%eax
f01193d6:	25 ff 0f 00 00       	and    $0xfff,%eax
f01193db:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01193e1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01193e7:	83 e0 04             	and    $0x4,%eax
f01193ea:	85 c0                	test   %eax,%eax
f01193ec:	74 17                	je     f0119405 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01193ee:	83 ec 04             	sub    $0x4,%esp
f01193f1:	68 48 94 13 f0       	push   $0xf0139448
f01193f6:	68 d7 00 00 00       	push   $0xd7
f01193fb:	68 ae 92 13 f0       	push   $0xf01392ae
f0119400:	e8 ab 6d fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119405:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011940c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011940f:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f0119415:	72 8b                	jb     f01193a2 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119417:	83 ec 0c             	sub    $0xc,%esp
f011941a:	68 92 94 13 f0       	push   $0xf0139492
f011941f:	e8 0d 7a fe ff       	call   f0100e31 <cprintf>
f0119424:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119427:	83 ec 0c             	sub    $0xc,%esp
f011942a:	68 9c 94 13 f0       	push   $0xf013949c
f011942f:	e8 fd 79 fe ff       	call   f0100e31 <cprintf>
f0119434:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119437:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011943c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011943f:	5b                   	pop    %ebx
f0119440:	5f                   	pop    %edi
f0119441:	5d                   	pop    %ebp
f0119442:	c3                   	ret    

f0119443 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119443:	55                   	push   %ebp
f0119444:	89 e5                	mov    %esp,%ebp
f0119446:	57                   	push   %edi
f0119447:	53                   	push   %ebx
f0119448:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f011944e:	83 ec 0c             	sub    $0xc,%esp
f0119451:	68 f0 91 13 f0       	push   $0xf01391f0
f0119456:	e8 d6 79 fe ff       	call   f0100e31 <cprintf>
f011945b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011945e:	83 ec 0c             	sub    $0xc,%esp
f0119461:	68 20 92 13 f0       	push   $0xf0139220
f0119466:	e8 c6 79 fe ff       	call   f0100e31 <cprintf>
f011946b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011946e:	83 ec 0c             	sub    $0xc,%esp
f0119471:	68 f0 91 13 f0       	push   $0xf01391f0
f0119476:	e8 b6 79 fe ff       	call   f0100e31 <cprintf>
f011947b:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011947e:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119484:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119489:	b8 00 00 00 00       	mov    $0x0,%eax
f011948e:	89 d7                	mov    %edx,%edi
f0119490:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119492:	83 ec 0c             	sub    $0xc,%esp
f0119495:	68 d8 94 13 f0       	push   $0xf01394d8
f011949a:	e8 92 79 fe ff       	call   f0100e31 <cprintf>
f011949f:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01194a2:	e8 37 35 ff ff       	call   f010c9de <sys_calculate_free_frames>
f01194a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01194aa:	e8 d5 b1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01194af:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01194b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01194b9:	eb 1f                	jmp    f01194da <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01194bb:	83 ec 0c             	sub    $0xc,%esp
f01194be:	68 00 00 20 00       	push   $0x200000
f01194c3:	e8 97 ea fe ff       	call   f0107f5f <kmalloc>
f01194c8:	83 c4 10             	add    $0x10,%esp
f01194cb:	89 c2                	mov    %eax,%edx
f01194cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01194d0:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01194d7:	ff 45 f4             	incl   -0xc(%ebp)
f01194da:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01194de:	7e db                	jle    f01194bb <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01194e0:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01194e7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01194ec:	0f b6 d0             	movzbl %al,%edx
f01194ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01194f2:	01 d0                	add    %edx,%eax
f01194f4:	48                   	dec    %eax
f01194f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01194f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01194fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119500:	f7 75 e8             	divl   -0x18(%ebp)
f0119503:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119506:	29 d0                	sub    %edx,%eax
f0119508:	89 c1                	mov    %eax,%ecx
f011950a:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119511:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119516:	0f b6 c0             	movzbl %al,%eax
f0119519:	c1 e0 04             	shl    $0x4,%eax
f011951c:	89 c2                	mov    %eax,%edx
f011951e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119521:	01 d0                	add    %edx,%eax
f0119523:	48                   	dec    %eax
f0119524:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119527:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011952a:	ba 00 00 00 00       	mov    $0x0,%edx
f011952f:	f7 75 e0             	divl   -0x20(%ebp)
f0119532:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119535:	29 d0                	sub    %edx,%eax
f0119537:	01 c8                	add    %ecx,%eax
f0119539:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f011953e:	29 c2                	sub    %eax,%edx
f0119540:	89 d0                	mov    %edx,%eax
f0119542:	83 ec 0c             	sub    $0xc,%esp
f0119545:	50                   	push   %eax
f0119546:	e8 14 ea fe ff       	call   f0107f5f <kmalloc>
f011954b:	83 c4 10             	add    $0x10,%esp
f011954e:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119554:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011955a:	89 c1                	mov    %eax,%ecx
f011955c:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119563:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119568:	0f b6 d0             	movzbl %al,%edx
f011956b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011956e:	01 d0                	add    %edx,%eax
f0119570:	48                   	dec    %eax
f0119571:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119574:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119577:	ba 00 00 00 00       	mov    $0x0,%edx
f011957c:	f7 75 d8             	divl   -0x28(%ebp)
f011957f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119582:	29 d0                	sub    %edx,%eax
f0119584:	89 c3                	mov    %eax,%ebx
f0119586:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011958d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119592:	0f b6 c0             	movzbl %al,%eax
f0119595:	c1 e0 04             	shl    $0x4,%eax
f0119598:	89 c2                	mov    %eax,%edx
f011959a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011959d:	01 d0                	add    %edx,%eax
f011959f:	48                   	dec    %eax
f01195a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01195a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01195a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01195ab:	f7 75 d0             	divl   -0x30(%ebp)
f01195ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01195b1:	29 d0                	sub    %edx,%eax
f01195b3:	01 d8                	add    %ebx,%eax
f01195b5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01195ba:	39 c1                	cmp    %eax,%ecx
f01195bc:	0f 85 4f 03 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01195c2:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01195c8:	89 c1                	mov    %eax,%ecx
f01195ca:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01195d1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01195d6:	0f b6 d0             	movzbl %al,%edx
f01195d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01195dc:	01 d0                	add    %edx,%eax
f01195de:	48                   	dec    %eax
f01195df:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01195e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01195e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01195ea:	f7 75 c8             	divl   -0x38(%ebp)
f01195ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01195f0:	29 d0                	sub    %edx,%eax
f01195f2:	89 c3                	mov    %eax,%ebx
f01195f4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01195fb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119600:	0f b6 c0             	movzbl %al,%eax
f0119603:	c1 e0 04             	shl    $0x4,%eax
f0119606:	89 c2                	mov    %eax,%edx
f0119608:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011960b:	01 d0                	add    %edx,%eax
f011960d:	48                   	dec    %eax
f011960e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119611:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119614:	ba 00 00 00 00       	mov    $0x0,%edx
f0119619:	f7 75 c0             	divl   -0x40(%ebp)
f011961c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011961f:	29 d0                	sub    %edx,%eax
f0119621:	01 d8                	add    %ebx,%eax
f0119623:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119628:	39 c1                	cmp    %eax,%ecx
f011962a:	0f 85 e1 02 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119630:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f0119636:	89 c1                	mov    %eax,%ecx
f0119638:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011963f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119644:	0f b6 d0             	movzbl %al,%edx
f0119647:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011964a:	01 d0                	add    %edx,%eax
f011964c:	48                   	dec    %eax
f011964d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119650:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119653:	ba 00 00 00 00       	mov    $0x0,%edx
f0119658:	f7 75 b8             	divl   -0x48(%ebp)
f011965b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011965e:	29 d0                	sub    %edx,%eax
f0119660:	89 c3                	mov    %eax,%ebx
f0119662:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0119669:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011966e:	0f b6 c0             	movzbl %al,%eax
f0119671:	c1 e0 04             	shl    $0x4,%eax
f0119674:	89 c2                	mov    %eax,%edx
f0119676:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119679:	01 d0                	add    %edx,%eax
f011967b:	48                   	dec    %eax
f011967c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011967f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119682:	ba 00 00 00 00       	mov    $0x0,%edx
f0119687:	f7 75 b0             	divl   -0x50(%ebp)
f011968a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011968d:	29 d0                	sub    %edx,%eax
f011968f:	01 d8                	add    %ebx,%eax
f0119691:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119696:	39 c1                	cmp    %eax,%ecx
f0119698:	0f 85 73 02 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011969e:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f01196a4:	89 c1                	mov    %eax,%ecx
f01196a6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01196ad:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01196b2:	0f b6 d0             	movzbl %al,%edx
f01196b5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01196b8:	01 d0                	add    %edx,%eax
f01196ba:	48                   	dec    %eax
f01196bb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01196be:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01196c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01196c6:	f7 75 a8             	divl   -0x58(%ebp)
f01196c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01196cc:	29 d0                	sub    %edx,%eax
f01196ce:	89 c3                	mov    %eax,%ebx
f01196d0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01196d7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01196dc:	0f b6 c0             	movzbl %al,%eax
f01196df:	c1 e0 04             	shl    $0x4,%eax
f01196e2:	89 c2                	mov    %eax,%edx
f01196e4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01196e7:	01 d0                	add    %edx,%eax
f01196e9:	48                   	dec    %eax
f01196ea:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01196ed:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01196f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01196f5:	f7 75 a0             	divl   -0x60(%ebp)
f01196f8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01196fb:	29 d0                	sub    %edx,%eax
f01196fd:	01 d8                	add    %ebx,%eax
f01196ff:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119704:	39 c1                	cmp    %eax,%ecx
f0119706:	0f 85 05 02 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011970c:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119712:	89 c1                	mov    %eax,%ecx
f0119714:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011971b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119720:	0f b6 d0             	movzbl %al,%edx
f0119723:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119726:	01 d0                	add    %edx,%eax
f0119728:	48                   	dec    %eax
f0119729:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011972c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011972f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119734:	f7 75 98             	divl   -0x68(%ebp)
f0119737:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011973a:	29 d0                	sub    %edx,%eax
f011973c:	89 c3                	mov    %eax,%ebx
f011973e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119745:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011974a:	0f b6 c0             	movzbl %al,%eax
f011974d:	c1 e0 04             	shl    $0x4,%eax
f0119750:	89 c2                	mov    %eax,%edx
f0119752:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119755:	01 d0                	add    %edx,%eax
f0119757:	48                   	dec    %eax
f0119758:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011975b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011975e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119763:	f7 75 90             	divl   -0x70(%ebp)
f0119766:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119769:	29 d0                	sub    %edx,%eax
f011976b:	01 d8                	add    %ebx,%eax
f011976d:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119772:	39 c1                	cmp    %eax,%ecx
f0119774:	0f 85 97 01 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011977a:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119780:	89 c1                	mov    %eax,%ecx
f0119782:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0119789:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011978e:	0f b6 d0             	movzbl %al,%edx
f0119791:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119794:	01 d0                	add    %edx,%eax
f0119796:	48                   	dec    %eax
f0119797:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011979a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011979d:	ba 00 00 00 00       	mov    $0x0,%edx
f01197a2:	f7 75 88             	divl   -0x78(%ebp)
f01197a5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01197a8:	29 d0                	sub    %edx,%eax
f01197aa:	89 c3                	mov    %eax,%ebx
f01197ac:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01197b3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01197b8:	0f b6 c0             	movzbl %al,%eax
f01197bb:	c1 e0 04             	shl    $0x4,%eax
f01197be:	89 c2                	mov    %eax,%edx
f01197c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01197c3:	01 d0                	add    %edx,%eax
f01197c5:	48                   	dec    %eax
f01197c6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01197cc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01197d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01197d7:	f7 75 80             	divl   -0x80(%ebp)
f01197da:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01197e0:	29 d0                	sub    %edx,%eax
f01197e2:	01 d8                	add    %ebx,%eax
f01197e4:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01197e9:	39 c1                	cmp    %eax,%ecx
f01197eb:	0f 85 20 01 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01197f1:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f01197f7:	89 c1                	mov    %eax,%ecx
f01197f9:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119800:	10 00 00 
f0119803:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119808:	0f b6 d0             	movzbl %al,%edx
f011980b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119811:	01 d0                	add    %edx,%eax
f0119813:	48                   	dec    %eax
f0119814:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011981a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119820:	ba 00 00 00 00       	mov    $0x0,%edx
f0119825:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011982b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119831:	29 d0                	sub    %edx,%eax
f0119833:	89 c3                	mov    %eax,%ebx
f0119835:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011983c:	10 00 00 
f011983f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119844:	0f b6 c0             	movzbl %al,%eax
f0119847:	c1 e0 04             	shl    $0x4,%eax
f011984a:	89 c2                	mov    %eax,%edx
f011984c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119852:	01 d0                	add    %edx,%eax
f0119854:	48                   	dec    %eax
f0119855:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011985b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119861:	ba 00 00 00 00       	mov    $0x0,%edx
f0119866:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011986c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119872:	29 d0                	sub    %edx,%eax
f0119874:	01 d8                	add    %ebx,%eax
f0119876:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011987b:	39 c1                	cmp    %eax,%ecx
f011987d:	0f 85 8e 00 00 00    	jne    f0119911 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119883:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119889:	89 c1                	mov    %eax,%ecx
f011988b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119892:	10 00 00 
f0119895:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011989a:	0f b6 d0             	movzbl %al,%edx
f011989d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01198a3:	01 d0                	add    %edx,%eax
f01198a5:	48                   	dec    %eax
f01198a6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01198ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01198b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01198b7:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01198bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01198c3:	29 d0                	sub    %edx,%eax
f01198c5:	89 c3                	mov    %eax,%ebx
f01198c7:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01198ce:	10 00 00 
f01198d1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01198d6:	0f b6 c0             	movzbl %al,%eax
f01198d9:	c1 e0 04             	shl    $0x4,%eax
f01198dc:	89 c2                	mov    %eax,%edx
f01198de:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01198e4:	01 d0                	add    %edx,%eax
f01198e6:	48                   	dec    %eax
f01198e7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01198ed:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01198f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01198f8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01198fe:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119904:	29 d0                	sub    %edx,%eax
f0119906:	01 d8                	add    %ebx,%eax
f0119908:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011990d:	39 c1                	cmp    %eax,%ecx
f011990f:	74 17                	je     f0119928 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119911:	83 ec 04             	sub    $0x4,%esp
f0119914:	68 28 95 13 f0       	push   $0xf0139528
f0119919:	68 03 01 00 00       	push   $0x103
f011991e:	68 ae 92 13 f0       	push   $0xf01392ae
f0119923:	e8 88 68 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119928:	e8 57 ad fe ff       	call   f0104684 <pf_calculate_free_frames>
f011992d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119930:	74 17                	je     f0119949 <test_kmalloc_nextfit+0x506>
f0119932:	83 ec 04             	sub    $0x4,%esp
f0119935:	68 c8 92 13 f0       	push   $0xf01392c8
f011993a:	68 05 01 00 00       	push   $0x105
f011993f:	68 ae 92 13 f0       	push   $0xf01392ae
f0119944:	e8 67 68 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119949:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011994c:	e8 8d 30 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119951:	29 c3                	sub    %eax,%ebx
f0119953:	89 d9                	mov    %ebx,%ecx
f0119955:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011995c:	10 00 00 
f011995f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119964:	0f b6 d0             	movzbl %al,%edx
f0119967:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011996d:	01 d0                	add    %edx,%eax
f011996f:	48                   	dec    %eax
f0119970:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119976:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011997c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119981:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119987:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011998d:	29 d0                	sub    %edx,%eax
f011998f:	89 c3                	mov    %eax,%ebx
f0119991:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119998:	10 00 00 
f011999b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01199a0:	0f b6 c0             	movzbl %al,%eax
f01199a3:	c1 e0 04             	shl    $0x4,%eax
f01199a6:	89 c2                	mov    %eax,%edx
f01199a8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01199ae:	01 d0                	add    %edx,%eax
f01199b0:	48                   	dec    %eax
f01199b1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01199b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01199bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01199c2:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01199c8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01199ce:	29 d0                	sub    %edx,%eax
f01199d0:	01 d8                	add    %ebx,%eax
f01199d2:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01199d7:	29 c2                	sub    %eax,%edx
f01199d9:	89 d0                	mov    %edx,%eax
f01199db:	c1 e8 0c             	shr    $0xc,%eax
f01199de:	39 c1                	cmp    %eax,%ecx
f01199e0:	74 17                	je     f01199f9 <test_kmalloc_nextfit+0x5b6>
f01199e2:	83 ec 04             	sub    $0x4,%esp
f01199e5:	68 6b 95 13 f0       	push   $0xf013956b
f01199ea:	68 06 01 00 00       	push   $0x106
f01199ef:	68 ae 92 13 f0       	push   $0xf01392ae
f01199f4:	e8 b7 67 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01199f9:	e8 86 ac fe ff       	call   f0104684 <pf_calculate_free_frames>
f01199fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a01:	e8 d8 2f ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119a06:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119a09:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119a0f:	83 ec 0c             	sub    $0xc,%esp
f0119a12:	50                   	push   %eax
f0119a13:	e8 61 e5 fe ff       	call   f0107f79 <kfree>
f0119a18:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119a1b:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119a21:	83 ec 0c             	sub    $0xc,%esp
f0119a24:	50                   	push   %eax
f0119a25:	e8 4f e5 fe ff       	call   f0107f79 <kfree>
f0119a2a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119a2d:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0119a33:	83 ec 0c             	sub    $0xc,%esp
f0119a36:	50                   	push   %eax
f0119a37:	e8 3d e5 fe ff       	call   f0107f79 <kfree>
f0119a3c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119a3f:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0119a45:	83 ec 0c             	sub    $0xc,%esp
f0119a48:	50                   	push   %eax
f0119a49:	e8 2b e5 fe ff       	call   f0107f79 <kfree>
f0119a4e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119a51:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119a57:	83 ec 0c             	sub    $0xc,%esp
f0119a5a:	50                   	push   %eax
f0119a5b:	e8 19 e5 fe ff       	call   f0107f79 <kfree>
f0119a60:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119a63:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f0119a69:	83 ec 0c             	sub    $0xc,%esp
f0119a6c:	50                   	push   %eax
f0119a6d:	e8 07 e5 fe ff       	call   f0107f79 <kfree>
f0119a72:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119a75:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0119a7b:	83 ec 0c             	sub    $0xc,%esp
f0119a7e:	50                   	push   %eax
f0119a7f:	e8 f5 e4 fe ff       	call   f0107f79 <kfree>
f0119a84:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119a87:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119a8d:	83 ec 0c             	sub    $0xc,%esp
f0119a90:	50                   	push   %eax
f0119a91:	e8 e3 e4 fe ff       	call   f0107f79 <kfree>
f0119a96:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119a99:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119a9f:	83 ec 0c             	sub    $0xc,%esp
f0119aa2:	50                   	push   %eax
f0119aa3:	e8 d1 e4 fe ff       	call   f0107f79 <kfree>
f0119aa8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119aab:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119ab1:	83 ec 0c             	sub    $0xc,%esp
f0119ab4:	50                   	push   %eax
f0119ab5:	e8 bf e4 fe ff       	call   f0107f79 <kfree>
f0119aba:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119abd:	e8 c2 ab fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119ac2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ac5:	74 17                	je     f0119ade <test_kmalloc_nextfit+0x69b>
f0119ac7:	83 ec 04             	sub    $0x4,%esp
f0119aca:	68 c8 92 13 f0       	push   $0xf01392c8
f0119acf:	68 17 01 00 00       	push   $0x117
f0119ad4:	68 ae 92 13 f0       	push   $0xf01392ae
f0119ad9:	e8 d2 66 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119ade:	e8 fb 2e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119ae3:	89 c2                	mov    %eax,%edx
f0119ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119ae8:	89 d1                	mov    %edx,%ecx
f0119aea:	29 c1                	sub    %eax,%ecx
f0119aec:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119af3:	10 00 00 
f0119af6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119afb:	0f b6 d0             	movzbl %al,%edx
f0119afe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119b04:	01 d0                	add    %edx,%eax
f0119b06:	48                   	dec    %eax
f0119b07:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119b0d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119b13:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b18:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119b1e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119b24:	29 d0                	sub    %edx,%eax
f0119b26:	89 c3                	mov    %eax,%ebx
f0119b28:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119b2f:	10 00 00 
f0119b32:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119b37:	0f b6 c0             	movzbl %al,%eax
f0119b3a:	c1 e0 04             	shl    $0x4,%eax
f0119b3d:	89 c2                	mov    %eax,%edx
f0119b3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119b45:	01 d0                	add    %edx,%eax
f0119b47:	48                   	dec    %eax
f0119b48:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119b4e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b54:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b59:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119b5f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b65:	29 d0                	sub    %edx,%eax
f0119b67:	01 d8                	add    %ebx,%eax
f0119b69:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119b6e:	29 c2                	sub    %eax,%edx
f0119b70:	89 d0                	mov    %edx,%eax
f0119b72:	c1 e8 0c             	shr    $0xc,%eax
f0119b75:	39 c1                	cmp    %eax,%ecx
f0119b77:	74 17                	je     f0119b90 <test_kmalloc_nextfit+0x74d>
f0119b79:	83 ec 04             	sub    $0x4,%esp
f0119b7c:	68 7c 95 13 f0       	push   $0xf013957c
f0119b81:	68 18 01 00 00       	push   $0x118
f0119b86:	68 ae 92 13 f0       	push   $0xf01392ae
f0119b8b:	e8 20 66 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119b90:	e8 ef aa fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b98:	e8 41 2e ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119ba0:	83 ec 0c             	sub    $0xc,%esp
f0119ba3:	68 00 fc 0f 00       	push   $0xffc00
f0119ba8:	e8 b2 e3 fe ff       	call   f0107f5f <kmalloc>
f0119bad:	83 c4 10             	add    $0x10,%esp
f0119bb0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119bb6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119bbd:	10 00 00 
f0119bc0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119bc5:	0f b6 d0             	movzbl %al,%edx
f0119bc8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119bce:	01 d0                	add    %edx,%eax
f0119bd0:	48                   	dec    %eax
f0119bd1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119bd7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119bdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119be2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119be8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119bee:	29 d0                	sub    %edx,%eax
f0119bf0:	89 c1                	mov    %eax,%ecx
f0119bf2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119bf9:	10 00 00 
f0119bfc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119c01:	0f b6 c0             	movzbl %al,%eax
f0119c04:	c1 e0 04             	shl    $0x4,%eax
f0119c07:	89 c2                	mov    %eax,%edx
f0119c09:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119c0f:	01 d0                	add    %edx,%eax
f0119c11:	48                   	dec    %eax
f0119c12:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119c18:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c23:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119c29:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c2f:	29 d0                	sub    %edx,%eax
f0119c31:	01 c8                	add    %ecx,%eax
f0119c33:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119c39:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119c3f:	39 c2                	cmp    %eax,%edx
f0119c41:	74 17                	je     f0119c5a <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119c43:	83 ec 04             	sub    $0x4,%esp
f0119c46:	68 bc 95 13 f0       	push   $0xf01395bc
f0119c4b:	68 1f 01 00 00       	push   $0x11f
f0119c50:	68 ae 92 13 f0       	push   $0xf01392ae
f0119c55:	e8 56 65 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c5a:	e8 25 aa fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119c5f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c62:	74 17                	je     f0119c7b <test_kmalloc_nextfit+0x838>
f0119c64:	83 ec 04             	sub    $0x4,%esp
f0119c67:	68 c8 92 13 f0       	push   $0xf01392c8
f0119c6c:	68 20 01 00 00       	push   $0x120
f0119c71:	68 ae 92 13 f0       	push   $0xf01392ae
f0119c76:	e8 35 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c7b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c7e:	e8 5b 2d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119c83:	29 c3                	sub    %eax,%ebx
f0119c85:	89 d8                	mov    %ebx,%eax
f0119c87:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c8c:	74 17                	je     f0119ca5 <test_kmalloc_nextfit+0x862>
f0119c8e:	83 ec 04             	sub    $0x4,%esp
f0119c91:	68 6b 95 13 f0       	push   $0xf013956b
f0119c96:	68 21 01 00 00       	push   $0x121
f0119c9b:	68 ae 92 13 f0       	push   $0xf01392ae
f0119ca0:	e8 0b 65 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ca5:	e8 da a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119caa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119cad:	e8 2c 2d ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119cb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119cb5:	83 ec 0c             	sub    $0xc,%esp
f0119cb8:	68 00 04 00 00       	push   $0x400
f0119cbd:	e8 9d e2 fe ff       	call   f0107f5f <kmalloc>
f0119cc2:	83 c4 10             	add    $0x10,%esp
f0119cc5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119ccb:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119cd2:	10 00 00 
f0119cd5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119cda:	0f b6 d0             	movzbl %al,%edx
f0119cdd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119ce3:	01 d0                	add    %edx,%eax
f0119ce5:	48                   	dec    %eax
f0119ce6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119cec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cf7:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119cfd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119d03:	29 d0                	sub    %edx,%eax
f0119d05:	89 c1                	mov    %eax,%ecx
f0119d07:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119d0e:	10 00 00 
f0119d11:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119d16:	0f b6 c0             	movzbl %al,%eax
f0119d19:	c1 e0 04             	shl    $0x4,%eax
f0119d1c:	89 c2                	mov    %eax,%edx
f0119d1e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119d24:	01 d0                	add    %edx,%eax
f0119d26:	48                   	dec    %eax
f0119d27:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119d2d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119d33:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d38:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119d3e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119d44:	29 d0                	sub    %edx,%eax
f0119d46:	01 c8                	add    %ecx,%eax
f0119d48:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119d4e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d54:	39 c2                	cmp    %eax,%edx
f0119d56:	74 17                	je     f0119d6f <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f0119d58:	83 ec 04             	sub    $0x4,%esp
f0119d5b:	68 bc 95 13 f0       	push   $0xf01395bc
f0119d60:	68 27 01 00 00       	push   $0x127
f0119d65:	68 ae 92 13 f0       	push   $0xf01392ae
f0119d6a:	e8 41 64 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d6f:	e8 10 a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119d74:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d77:	74 17                	je     f0119d90 <test_kmalloc_nextfit+0x94d>
f0119d79:	83 ec 04             	sub    $0x4,%esp
f0119d7c:	68 c8 92 13 f0       	push   $0xf01392c8
f0119d81:	68 28 01 00 00       	push   $0x128
f0119d86:	68 ae 92 13 f0       	push   $0xf01392ae
f0119d8b:	e8 20 64 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d90:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d93:	e8 46 2c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119d98:	29 c3                	sub    %eax,%ebx
f0119d9a:	89 d8                	mov    %ebx,%eax
f0119d9c:	83 f8 01             	cmp    $0x1,%eax
f0119d9f:	74 17                	je     f0119db8 <test_kmalloc_nextfit+0x975>
f0119da1:	83 ec 04             	sub    $0x4,%esp
f0119da4:	68 6b 95 13 f0       	push   $0xf013956b
f0119da9:	68 29 01 00 00       	push   $0x129
f0119dae:	68 ae 92 13 f0       	push   $0xf01392ae
f0119db3:	e8 f8 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119db8:	e8 c7 a8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119dbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119dc0:	e8 19 2c ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119dc8:	83 ec 0c             	sub    $0xc,%esp
f0119dcb:	68 00 00 50 00       	push   $0x500000
f0119dd0:	e8 8a e1 fe ff       	call   f0107f5f <kmalloc>
f0119dd5:	83 c4 10             	add    $0x10,%esp
f0119dd8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119dde:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119de5:	10 00 00 
f0119de8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119ded:	0f b6 d0             	movzbl %al,%edx
f0119df0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119df6:	01 d0                	add    %edx,%eax
f0119df8:	48                   	dec    %eax
f0119df9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119dff:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119e05:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e0a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119e10:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119e16:	29 d0                	sub    %edx,%eax
f0119e18:	89 c1                	mov    %eax,%ecx
f0119e1a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119e21:	10 00 00 
f0119e24:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119e29:	0f b6 c0             	movzbl %al,%eax
f0119e2c:	c1 e0 04             	shl    $0x4,%eax
f0119e2f:	89 c2                	mov    %eax,%edx
f0119e31:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119e37:	01 d0                	add    %edx,%eax
f0119e39:	48                   	dec    %eax
f0119e3a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119e40:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e4b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119e51:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119e57:	29 d0                	sub    %edx,%eax
f0119e59:	01 c8                	add    %ecx,%eax
f0119e5b:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e61:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e67:	39 c2                	cmp    %eax,%edx
f0119e69:	74 17                	je     f0119e82 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f0119e6b:	83 ec 04             	sub    $0x4,%esp
f0119e6e:	68 bc 95 13 f0       	push   $0xf01395bc
f0119e73:	68 2f 01 00 00       	push   $0x12f
f0119e78:	68 ae 92 13 f0       	push   $0xf01392ae
f0119e7d:	e8 2e 63 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e82:	e8 fd a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119e87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e8a:	74 17                	je     f0119ea3 <test_kmalloc_nextfit+0xa60>
f0119e8c:	83 ec 04             	sub    $0x4,%esp
f0119e8f:	68 c8 92 13 f0       	push   $0xf01392c8
f0119e94:	68 30 01 00 00       	push   $0x130
f0119e99:	68 ae 92 13 f0       	push   $0xf01392ae
f0119e9e:	e8 0d 63 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119ea3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ea6:	e8 33 2b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119eab:	29 c3                	sub    %eax,%ebx
f0119ead:	89 d8                	mov    %ebx,%eax
f0119eaf:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119eb4:	74 17                	je     f0119ecd <test_kmalloc_nextfit+0xa8a>
f0119eb6:	83 ec 04             	sub    $0x4,%esp
f0119eb9:	68 6b 95 13 f0       	push   $0xf013956b
f0119ebe:	68 31 01 00 00       	push   $0x131
f0119ec3:	68 ae 92 13 f0       	push   $0xf01392ae
f0119ec8:	e8 e3 62 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ecd:	e8 b2 a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119ed2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ed5:	e8 04 2b ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119eda:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119edd:	83 ec 0c             	sub    $0xc,%esp
f0119ee0:	68 00 00 10 00       	push   $0x100000
f0119ee5:	e8 75 e0 fe ff       	call   f0107f5f <kmalloc>
f0119eea:	83 c4 10             	add    $0x10,%esp
f0119eed:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119ef3:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119efa:	10 00 00 
f0119efd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119f02:	0f b6 d0             	movzbl %al,%edx
f0119f05:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119f0b:	01 d0                	add    %edx,%eax
f0119f0d:	48                   	dec    %eax
f0119f0e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119f14:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119f1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f1f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119f25:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119f2b:	29 d0                	sub    %edx,%eax
f0119f2d:	89 c1                	mov    %eax,%ecx
f0119f2f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119f36:	10 00 00 
f0119f39:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0119f3e:	0f b6 c0             	movzbl %al,%eax
f0119f41:	c1 e0 04             	shl    $0x4,%eax
f0119f44:	89 c2                	mov    %eax,%edx
f0119f46:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119f4c:	01 d0                	add    %edx,%eax
f0119f4e:	48                   	dec    %eax
f0119f4f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119f55:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f60:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119f66:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f6c:	29 d0                	sub    %edx,%eax
f0119f6e:	01 c8                	add    %ecx,%eax
f0119f70:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119f76:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119f7c:	39 c2                	cmp    %eax,%edx
f0119f7e:	74 17                	je     f0119f97 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f0119f80:	83 ec 04             	sub    $0x4,%esp
f0119f83:	68 bc 95 13 f0       	push   $0xf01395bc
f0119f88:	68 37 01 00 00       	push   $0x137
f0119f8d:	68 ae 92 13 f0       	push   $0xf01392ae
f0119f92:	e8 19 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f97:	e8 e8 a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119f9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f9f:	74 17                	je     f0119fb8 <test_kmalloc_nextfit+0xb75>
f0119fa1:	83 ec 04             	sub    $0x4,%esp
f0119fa4:	68 c8 92 13 f0       	push   $0xf01392c8
f0119fa9:	68 38 01 00 00       	push   $0x138
f0119fae:	68 ae 92 13 f0       	push   $0xf01392ae
f0119fb3:	e8 f8 61 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119fb8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fbb:	e8 1e 2a ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119fc0:	29 c3                	sub    %eax,%ebx
f0119fc2:	89 d8                	mov    %ebx,%eax
f0119fc4:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fc9:	74 17                	je     f0119fe2 <test_kmalloc_nextfit+0xb9f>
f0119fcb:	83 ec 04             	sub    $0x4,%esp
f0119fce:	68 6b 95 13 f0       	push   $0xf013956b
f0119fd3:	68 39 01 00 00       	push   $0x139
f0119fd8:	68 ae 92 13 f0       	push   $0xf01392ae
f0119fdd:	e8 ce 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119fe2:	e8 9d a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119fe7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119fea:	e8 ef 29 ff ff       	call   f010c9de <sys_calculate_free_frames>
f0119fef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119ff2:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119ff8:	83 ec 0c             	sub    $0xc,%esp
f0119ffb:	50                   	push   %eax
f0119ffc:	e8 78 df fe ff       	call   f0107f79 <kfree>
f011a001:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a004:	e8 7b a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a009:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a00c:	74 17                	je     f011a025 <test_kmalloc_nextfit+0xbe2>
f011a00e:	83 ec 04             	sub    $0x4,%esp
f011a011:	68 c8 92 13 f0       	push   $0xf01392c8
f011a016:	68 3e 01 00 00       	push   $0x13e
f011a01b:	68 ae 92 13 f0       	push   $0xf01392ae
f011a020:	e8 8b 61 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a025:	e8 b4 29 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a02a:	89 c2                	mov    %eax,%edx
f011a02c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a02f:	29 c2                	sub    %eax,%edx
f011a031:	89 d0                	mov    %edx,%eax
f011a033:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a038:	74 17                	je     f011a051 <test_kmalloc_nextfit+0xc0e>
f011a03a:	83 ec 04             	sub    $0x4,%esp
f011a03d:	68 7c 95 13 f0       	push   $0xf013957c
f011a042:	68 3f 01 00 00       	push   $0x13f
f011a047:	68 ae 92 13 f0       	push   $0xf01392ae
f011a04c:	e8 5f 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a051:	e8 2e a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a056:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a059:	e8 80 29 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a05e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a061:	83 ec 0c             	sub    $0xc,%esp
f011a064:	68 00 04 00 00       	push   $0x400
f011a069:	e8 f1 de fe ff       	call   f0107f5f <kmalloc>
f011a06e:	83 c4 10             	add    $0x10,%esp
f011a071:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a077:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a07e:	10 00 00 
f011a081:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a086:	0f b6 d0             	movzbl %al,%edx
f011a089:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a08f:	01 d0                	add    %edx,%eax
f011a091:	48                   	dec    %eax
f011a092:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a098:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a09e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0a3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a0a9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a0af:	29 d0                	sub    %edx,%eax
f011a0b1:	89 c1                	mov    %eax,%ecx
f011a0b3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a0ba:	10 00 00 
f011a0bd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a0c2:	0f b6 c0             	movzbl %al,%eax
f011a0c5:	c1 e0 04             	shl    $0x4,%eax
f011a0c8:	89 c2                	mov    %eax,%edx
f011a0ca:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a0d0:	01 d0                	add    %edx,%eax
f011a0d2:	48                   	dec    %eax
f011a0d3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a0d9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a0df:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0e4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a0ea:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a0f0:	29 d0                	sub    %edx,%eax
f011a0f2:	01 c8                	add    %ecx,%eax
f011a0f4:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a0fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a100:	39 c2                	cmp    %eax,%edx
f011a102:	74 17                	je     f011a11b <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a104:	83 ec 04             	sub    $0x4,%esp
f011a107:	68 bc 95 13 f0       	push   $0xf01395bc
f011a10c:	68 45 01 00 00       	push   $0x145
f011a111:	68 ae 92 13 f0       	push   $0xf01392ae
f011a116:	e8 95 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a11b:	e8 64 a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a120:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a123:	74 17                	je     f011a13c <test_kmalloc_nextfit+0xcf9>
f011a125:	83 ec 04             	sub    $0x4,%esp
f011a128:	68 c8 92 13 f0       	push   $0xf01392c8
f011a12d:	68 46 01 00 00       	push   $0x146
f011a132:	68 ae 92 13 f0       	push   $0xf01392ae
f011a137:	e8 74 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a13c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a13f:	e8 9a 28 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a144:	29 c3                	sub    %eax,%ebx
f011a146:	89 d8                	mov    %ebx,%eax
f011a148:	83 f8 01             	cmp    $0x1,%eax
f011a14b:	74 17                	je     f011a164 <test_kmalloc_nextfit+0xd21>
f011a14d:	83 ec 04             	sub    $0x4,%esp
f011a150:	68 6b 95 13 f0       	push   $0xf013956b
f011a155:	68 47 01 00 00       	push   $0x147
f011a15a:	68 ae 92 13 f0       	push   $0xf01392ae
f011a15f:	e8 4c 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a164:	e8 1b a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a169:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a16c:	e8 6d 28 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a171:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a174:	83 ec 0c             	sub    $0xc,%esp
f011a177:	68 00 e0 1f 00       	push   $0x1fe000
f011a17c:	e8 de dd fe ff       	call   f0107f5f <kmalloc>
f011a181:	83 c4 10             	add    $0x10,%esp
f011a184:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a18a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a191:	10 00 00 
f011a194:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a199:	0f b6 d0             	movzbl %al,%edx
f011a19c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a1a2:	01 d0                	add    %edx,%eax
f011a1a4:	48                   	dec    %eax
f011a1a5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a1ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1b6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a1bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1c2:	29 d0                	sub    %edx,%eax
f011a1c4:	89 c1                	mov    %eax,%ecx
f011a1c6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a1cd:	10 00 00 
f011a1d0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a1d5:	0f b6 c0             	movzbl %al,%eax
f011a1d8:	c1 e0 04             	shl    $0x4,%eax
f011a1db:	89 c2                	mov    %eax,%edx
f011a1dd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a1e3:	01 d0                	add    %edx,%eax
f011a1e5:	48                   	dec    %eax
f011a1e6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a1ec:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a1f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1f7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a1fd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a203:	29 d0                	sub    %edx,%eax
f011a205:	01 c8                	add    %ecx,%eax
f011a207:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a20d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a213:	39 c2                	cmp    %eax,%edx
f011a215:	74 17                	je     f011a22e <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a217:	83 ec 04             	sub    $0x4,%esp
f011a21a:	68 bc 95 13 f0       	push   $0xf01395bc
f011a21f:	68 4d 01 00 00       	push   $0x14d
f011a224:	68 ae 92 13 f0       	push   $0xf01392ae
f011a229:	e8 82 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a22e:	e8 51 a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a233:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a236:	74 17                	je     f011a24f <test_kmalloc_nextfit+0xe0c>
f011a238:	83 ec 04             	sub    $0x4,%esp
f011a23b:	68 c8 92 13 f0       	push   $0xf01392c8
f011a240:	68 4e 01 00 00       	push   $0x14e
f011a245:	68 ae 92 13 f0       	push   $0xf01392ae
f011a24a:	e8 61 5f fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a24f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a252:	e8 87 27 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a257:	29 c3                	sub    %eax,%ebx
f011a259:	89 d8                	mov    %ebx,%eax
f011a25b:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a260:	74 17                	je     f011a279 <test_kmalloc_nextfit+0xe36>
f011a262:	83 ec 04             	sub    $0x4,%esp
f011a265:	68 6b 95 13 f0       	push   $0xf013956b
f011a26a:	68 50 01 00 00       	push   $0x150
f011a26f:	68 ae 92 13 f0       	push   $0xf01392ae
f011a274:	e8 37 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a279:	e8 06 a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a27e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a281:	e8 58 27 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a286:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a289:	83 ec 0c             	sub    $0xc,%esp
f011a28c:	68 00 00 08 00       	push   $0x80000
f011a291:	e8 c9 dc fe ff       	call   f0107f5f <kmalloc>
f011a296:	83 c4 10             	add    $0x10,%esp
f011a299:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a29f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a2a6:	10 00 00 
f011a2a9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a2ae:	0f b6 d0             	movzbl %al,%edx
f011a2b1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a2b7:	01 d0                	add    %edx,%eax
f011a2b9:	48                   	dec    %eax
f011a2ba:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a2c0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2cb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a2d1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2d7:	29 d0                	sub    %edx,%eax
f011a2d9:	89 c1                	mov    %eax,%ecx
f011a2db:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a2e2:	10 00 00 
f011a2e5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a2ea:	0f b6 c0             	movzbl %al,%eax
f011a2ed:	c1 e0 04             	shl    $0x4,%eax
f011a2f0:	89 c2                	mov    %eax,%edx
f011a2f2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a2f8:	01 d0                	add    %edx,%eax
f011a2fa:	48                   	dec    %eax
f011a2fb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a301:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a307:	ba 00 00 00 00       	mov    $0x0,%edx
f011a30c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a312:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a318:	29 d0                	sub    %edx,%eax
f011a31a:	01 c8                	add    %ecx,%eax
f011a31c:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a322:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a328:	39 c2                	cmp    %eax,%edx
f011a32a:	74 17                	je     f011a343 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a32c:	83 ec 04             	sub    $0x4,%esp
f011a32f:	68 bc 95 13 f0       	push   $0xf01395bc
f011a334:	68 56 01 00 00       	push   $0x156
f011a339:	68 ae 92 13 f0       	push   $0xf01392ae
f011a33e:	e8 6d 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a343:	e8 3c a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a348:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a34b:	74 17                	je     f011a364 <test_kmalloc_nextfit+0xf21>
f011a34d:	83 ec 04             	sub    $0x4,%esp
f011a350:	68 c8 92 13 f0       	push   $0xf01392c8
f011a355:	68 57 01 00 00       	push   $0x157
f011a35a:	68 ae 92 13 f0       	push   $0xf01392ae
f011a35f:	e8 4c 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a364:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a367:	e8 72 26 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a36c:	29 c3                	sub    %eax,%ebx
f011a36e:	89 d8                	mov    %ebx,%eax
f011a370:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a375:	74 17                	je     f011a38e <test_kmalloc_nextfit+0xf4b>
f011a377:	83 ec 04             	sub    $0x4,%esp
f011a37a:	68 6b 95 13 f0       	push   $0xf013956b
f011a37f:	68 58 01 00 00       	push   $0x158
f011a384:	68 ae 92 13 f0       	push   $0xf01392ae
f011a389:	e8 22 5e fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a38e:	83 ec 0c             	sub    $0xc,%esp
f011a391:	68 dc 95 13 f0       	push   $0xf01395dc
f011a396:	e8 96 6a fe ff       	call   f0100e31 <cprintf>
f011a39b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a39e:	e8 e1 a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a3a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a3a6:	e8 33 26 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a3ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a3ae:	83 ec 0c             	sub    $0xc,%esp
f011a3b1:	68 00 00 38 00       	push   $0x380000
f011a3b6:	e8 a4 db fe ff       	call   f0107f5f <kmalloc>
f011a3bb:	83 c4 10             	add    $0x10,%esp
f011a3be:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a3c4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a3cb:	10 00 00 
f011a3ce:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a3d3:	0f b6 d0             	movzbl %al,%edx
f011a3d6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a3dc:	01 d0                	add    %edx,%eax
f011a3de:	48                   	dec    %eax
f011a3df:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a3e5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3f0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a3f6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a3fc:	29 d0                	sub    %edx,%eax
f011a3fe:	89 c1                	mov    %eax,%ecx
f011a400:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a407:	10 00 00 
f011a40a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a40f:	0f b6 c0             	movzbl %al,%eax
f011a412:	c1 e0 04             	shl    $0x4,%eax
f011a415:	89 c2                	mov    %eax,%edx
f011a417:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a41d:	01 d0                	add    %edx,%eax
f011a41f:	48                   	dec    %eax
f011a420:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a426:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a42c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a431:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a437:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a43d:	29 d0                	sub    %edx,%eax
f011a43f:	01 c8                	add    %ecx,%eax
f011a441:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a447:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a44d:	39 c2                	cmp    %eax,%edx
f011a44f:	74 17                	je     f011a468 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a451:	83 ec 04             	sub    $0x4,%esp
f011a454:	68 bc 95 13 f0       	push   $0xf01395bc
f011a459:	68 62 01 00 00       	push   $0x162
f011a45e:	68 ae 92 13 f0       	push   $0xf01392ae
f011a463:	e8 48 5d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a468:	e8 17 a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a46d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a470:	74 17                	je     f011a489 <test_kmalloc_nextfit+0x1046>
f011a472:	83 ec 04             	sub    $0x4,%esp
f011a475:	68 c8 92 13 f0       	push   $0xf01392c8
f011a47a:	68 63 01 00 00       	push   $0x163
f011a47f:	68 ae 92 13 f0       	push   $0xf01392ae
f011a484:	e8 27 5d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a489:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a48c:	e8 4d 25 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a491:	29 c3                	sub    %eax,%ebx
f011a493:	89 d8                	mov    %ebx,%eax
f011a495:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a49a:	74 17                	je     f011a4b3 <test_kmalloc_nextfit+0x1070>
f011a49c:	83 ec 04             	sub    $0x4,%esp
f011a49f:	68 6b 95 13 f0       	push   $0xf013956b
f011a4a4:	68 64 01 00 00       	push   $0x164
f011a4a9:	68 ae 92 13 f0       	push   $0xf01392ae
f011a4ae:	e8 fd 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a4b3:	e8 cc a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a4b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a4bb:	e8 1e 25 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a4c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a4c3:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a4c9:	83 ec 0c             	sub    $0xc,%esp
f011a4cc:	50                   	push   %eax
f011a4cd:	e8 a7 da fe ff       	call   f0107f79 <kfree>
f011a4d2:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4d5:	e8 aa a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a4da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a4dd:	74 17                	je     f011a4f6 <test_kmalloc_nextfit+0x10b3>
f011a4df:	83 ec 04             	sub    $0x4,%esp
f011a4e2:	68 c8 92 13 f0       	push   $0xf01392c8
f011a4e7:	68 69 01 00 00       	push   $0x169
f011a4ec:	68 ae 92 13 f0       	push   $0xf01392ae
f011a4f1:	e8 ba 5c fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a4f6:	e8 e3 24 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a4fb:	89 c2                	mov    %eax,%edx
f011a4fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a500:	29 c2                	sub    %eax,%edx
f011a502:	89 d0                	mov    %edx,%eax
f011a504:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a509:	74 17                	je     f011a522 <test_kmalloc_nextfit+0x10df>
f011a50b:	83 ec 04             	sub    $0x4,%esp
f011a50e:	68 7c 95 13 f0       	push   $0xf013957c
f011a513:	68 6a 01 00 00       	push   $0x16a
f011a518:	68 ae 92 13 f0       	push   $0xf01392ae
f011a51d:	e8 8e 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a522:	e8 5d a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a527:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a52a:	e8 af 24 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a52f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a532:	83 ec 0c             	sub    $0xc,%esp
f011a535:	68 00 fc 3f 00       	push   $0x3ffc00
f011a53a:	e8 20 da fe ff       	call   f0107f5f <kmalloc>
f011a53f:	83 c4 10             	add    $0x10,%esp
f011a542:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a548:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a54f:	10 00 00 
f011a552:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a557:	0f b6 d0             	movzbl %al,%edx
f011a55a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a560:	01 d0                	add    %edx,%eax
f011a562:	48                   	dec    %eax
f011a563:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a569:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a56f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a574:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a57a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a580:	29 d0                	sub    %edx,%eax
f011a582:	89 c1                	mov    %eax,%ecx
f011a584:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a58b:	10 00 00 
f011a58e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a593:	0f b6 c0             	movzbl %al,%eax
f011a596:	c1 e0 04             	shl    $0x4,%eax
f011a599:	89 c2                	mov    %eax,%edx
f011a59b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a5a1:	01 d0                	add    %edx,%eax
f011a5a3:	48                   	dec    %eax
f011a5a4:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a5aa:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a5b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5b5:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a5bb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a5c1:	29 d0                	sub    %edx,%eax
f011a5c3:	01 c8                	add    %ecx,%eax
f011a5c5:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a5cb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a5d1:	39 c2                	cmp    %eax,%edx
f011a5d3:	74 17                	je     f011a5ec <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a5d5:	83 ec 04             	sub    $0x4,%esp
f011a5d8:	68 bc 95 13 f0       	push   $0xf01395bc
f011a5dd:	68 70 01 00 00       	push   $0x170
f011a5e2:	68 ae 92 13 f0       	push   $0xf01392ae
f011a5e7:	e8 c4 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5ec:	e8 93 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a5f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5f4:	74 17                	je     f011a60d <test_kmalloc_nextfit+0x11ca>
f011a5f6:	83 ec 04             	sub    $0x4,%esp
f011a5f9:	68 c8 92 13 f0       	push   $0xf01392c8
f011a5fe:	68 71 01 00 00       	push   $0x171
f011a603:	68 ae 92 13 f0       	push   $0xf01392ae
f011a608:	e8 a3 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a60d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a610:	e8 c9 23 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a615:	29 c3                	sub    %eax,%ebx
f011a617:	89 d8                	mov    %ebx,%eax
f011a619:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a61e:	74 17                	je     f011a637 <test_kmalloc_nextfit+0x11f4>
f011a620:	83 ec 04             	sub    $0x4,%esp
f011a623:	68 6b 95 13 f0       	push   $0xf013956b
f011a628:	68 72 01 00 00       	push   $0x172
f011a62d:	68 ae 92 13 f0       	push   $0xf01392ae
f011a632:	e8 79 5b fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a637:	83 ec 0c             	sub    $0xc,%esp
f011a63a:	68 18 96 13 f0       	push   $0xf0139618
f011a63f:	e8 ed 67 fe ff       	call   f0100e31 <cprintf>
f011a644:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a647:	e8 38 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a64c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a64f:	e8 8a 23 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a654:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a657:	83 ec 0c             	sub    $0xc,%esp
f011a65a:	68 00 00 60 00       	push   $0x600000
f011a65f:	e8 fb d8 fe ff       	call   f0107f5f <kmalloc>
f011a664:	83 c4 10             	add    $0x10,%esp
f011a667:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a66d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a673:	85 c0                	test   %eax,%eax
f011a675:	74 17                	je     f011a68e <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a677:	83 ec 04             	sub    $0x4,%esp
f011a67a:	68 bc 95 13 f0       	push   $0xf01395bc
f011a67f:	68 7c 01 00 00       	push   $0x17c
f011a684:	68 ae 92 13 f0       	push   $0xf01392ae
f011a689:	e8 22 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a68e:	e8 f1 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a693:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a696:	74 17                	je     f011a6af <test_kmalloc_nextfit+0x126c>
f011a698:	83 ec 04             	sub    $0x4,%esp
f011a69b:	68 c8 92 13 f0       	push   $0xf01392c8
f011a6a0:	68 7d 01 00 00       	push   $0x17d
f011a6a5:	68 ae 92 13 f0       	push   $0xf01392ae
f011a6aa:	e8 01 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a6af:	e8 2a 23 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a6b4:	89 c2                	mov    %eax,%edx
f011a6b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a6b9:	39 c2                	cmp    %eax,%edx
f011a6bb:	74 17                	je     f011a6d4 <test_kmalloc_nextfit+0x1291>
f011a6bd:	83 ec 04             	sub    $0x4,%esp
f011a6c0:	68 6b 95 13 f0       	push   $0xf013956b
f011a6c5:	68 7e 01 00 00       	push   $0x17e
f011a6ca:	68 ae 92 13 f0       	push   $0xf01392ae
f011a6cf:	e8 dc 5a fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a6d4:	83 ec 0c             	sub    $0xc,%esp
f011a6d7:	68 50 96 13 f0       	push   $0xf0139650
f011a6dc:	e8 50 67 fe ff       	call   f0100e31 <cprintf>
f011a6e1:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a6e4:	83 ec 0c             	sub    $0xc,%esp
f011a6e7:	68 8c 96 13 f0       	push   $0xf013968c
f011a6ec:	e8 40 67 fe ff       	call   f0100e31 <cprintf>
f011a6f1:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a6f4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a6f9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a6fc:	5b                   	pop    %ebx
f011a6fd:	5f                   	pop    %edi
f011a6fe:	5d                   	pop    %ebp
f011a6ff:	c3                   	ret    

f011a700 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a700:	55                   	push   %ebp
f011a701:	89 e5                	mov    %esp,%ebp
f011a703:	57                   	push   %edi
f011a704:	53                   	push   %ebx
f011a705:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a70b:	83 ec 0c             	sub    $0xc,%esp
f011a70e:	68 f0 91 13 f0       	push   $0xf01391f0
f011a713:	e8 19 67 fe ff       	call   f0100e31 <cprintf>
f011a718:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a71b:	83 ec 0c             	sub    $0xc,%esp
f011a71e:	68 20 92 13 f0       	push   $0xf0139220
f011a723:	e8 09 67 fe ff       	call   f0100e31 <cprintf>
f011a728:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a72b:	83 ec 0c             	sub    $0xc,%esp
f011a72e:	68 f0 91 13 f0       	push   $0xf01391f0
f011a733:	e8 f9 66 fe ff       	call   f0100e31 <cprintf>
f011a738:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a73b:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a741:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a746:	b8 00 00 00 00       	mov    $0x0,%eax
f011a74b:	89 d7                	mov    %edx,%edi
f011a74d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a74f:	e8 8a 22 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a754:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a757:	e8 28 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a75c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a75f:	83 ec 0c             	sub    $0xc,%esp
f011a762:	68 00 fc 2f 00       	push   $0x2ffc00
f011a767:	e8 f3 d7 fe ff       	call   f0107f5f <kmalloc>
f011a76c:	83 c4 10             	add    $0x10,%esp
f011a76f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a775:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a77b:	89 c1                	mov    %eax,%ecx
f011a77d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a784:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a789:	0f b6 d0             	movzbl %al,%edx
f011a78c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a78f:	01 d0                	add    %edx,%eax
f011a791:	48                   	dec    %eax
f011a792:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a795:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a798:	ba 00 00 00 00       	mov    $0x0,%edx
f011a79d:	f7 75 ec             	divl   -0x14(%ebp)
f011a7a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a7a3:	29 d0                	sub    %edx,%eax
f011a7a5:	89 c3                	mov    %eax,%ebx
f011a7a7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a7ae:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a7b3:	0f b6 c0             	movzbl %al,%eax
f011a7b6:	c1 e0 04             	shl    $0x4,%eax
f011a7b9:	89 c2                	mov    %eax,%edx
f011a7bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a7be:	01 d0                	add    %edx,%eax
f011a7c0:	48                   	dec    %eax
f011a7c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a7c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7cc:	f7 75 e4             	divl   -0x1c(%ebp)
f011a7cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7d2:	29 d0                	sub    %edx,%eax
f011a7d4:	01 d8                	add    %ebx,%eax
f011a7d6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a7db:	39 c1                	cmp    %eax,%ecx
f011a7dd:	74 17                	je     f011a7f6 <test_kmalloc_bestfit1+0xf6>
f011a7df:	83 ec 04             	sub    $0x4,%esp
f011a7e2:	68 c8 96 13 f0       	push   $0xf01396c8
f011a7e7:	68 98 01 00 00       	push   $0x198
f011a7ec:	68 ae 92 13 f0       	push   $0xf01392ae
f011a7f1:	e8 ba 59 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7f6:	e8 89 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a7fb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a7fe:	74 17                	je     f011a817 <test_kmalloc_bestfit1+0x117>
f011a800:	83 ec 04             	sub    $0x4,%esp
f011a803:	68 c8 92 13 f0       	push   $0xf01392c8
f011a808:	68 99 01 00 00       	push   $0x199
f011a80d:	68 ae 92 13 f0       	push   $0xf01392ae
f011a812:	e8 99 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a817:	e8 c2 21 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a81c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a81f:	29 c2                	sub    %eax,%edx
f011a821:	89 d0                	mov    %edx,%eax
f011a823:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a828:	74 17                	je     f011a841 <test_kmalloc_bestfit1+0x141>
f011a82a:	83 ec 04             	sub    $0x4,%esp
f011a82d:	68 f8 96 13 f0       	push   $0xf01396f8
f011a832:	68 9a 01 00 00       	push   $0x19a
f011a837:	68 ae 92 13 f0       	push   $0xf01392ae
f011a83c:	e8 6f 59 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a841:	e8 98 21 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a846:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a849:	e8 36 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a84e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a851:	83 ec 0c             	sub    $0xc,%esp
f011a854:	68 00 fc 2f 00       	push   $0x2ffc00
f011a859:	e8 01 d7 fe ff       	call   f0107f5f <kmalloc>
f011a85e:	83 c4 10             	add    $0x10,%esp
f011a861:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a867:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a86d:	89 c1                	mov    %eax,%ecx
f011a86f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a876:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a87b:	0f b6 d0             	movzbl %al,%edx
f011a87e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a881:	01 d0                	add    %edx,%eax
f011a883:	48                   	dec    %eax
f011a884:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a887:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a88a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a88f:	f7 75 dc             	divl   -0x24(%ebp)
f011a892:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a895:	29 d0                	sub    %edx,%eax
f011a897:	89 c3                	mov    %eax,%ebx
f011a899:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a8a0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a8a5:	0f b6 c0             	movzbl %al,%eax
f011a8a8:	c1 e0 04             	shl    $0x4,%eax
f011a8ab:	89 c2                	mov    %eax,%edx
f011a8ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a8b0:	01 d0                	add    %edx,%eax
f011a8b2:	48                   	dec    %eax
f011a8b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a8b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8be:	f7 75 d4             	divl   -0x2c(%ebp)
f011a8c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8c4:	29 d0                	sub    %edx,%eax
f011a8c6:	01 d8                	add    %ebx,%eax
f011a8c8:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a8cd:	39 c1                	cmp    %eax,%ecx
f011a8cf:	74 17                	je     f011a8e8 <test_kmalloc_bestfit1+0x1e8>
f011a8d1:	83 ec 04             	sub    $0x4,%esp
f011a8d4:	68 c8 96 13 f0       	push   $0xf01396c8
f011a8d9:	68 a0 01 00 00       	push   $0x1a0
f011a8de:	68 ae 92 13 f0       	push   $0xf01392ae
f011a8e3:	e8 c8 58 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8e8:	e8 97 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a8ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8f0:	74 17                	je     f011a909 <test_kmalloc_bestfit1+0x209>
f011a8f2:	83 ec 04             	sub    $0x4,%esp
f011a8f5:	68 c8 92 13 f0       	push   $0xf01392c8
f011a8fa:	68 a1 01 00 00       	push   $0x1a1
f011a8ff:	68 ae 92 13 f0       	push   $0xf01392ae
f011a904:	e8 a7 58 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a909:	e8 d0 20 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a90e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a911:	29 c2                	sub    %eax,%edx
f011a913:	89 d0                	mov    %edx,%eax
f011a915:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a91a:	74 17                	je     f011a933 <test_kmalloc_bestfit1+0x233>
f011a91c:	83 ec 04             	sub    $0x4,%esp
f011a91f:	68 f8 96 13 f0       	push   $0xf01396f8
f011a924:	68 a2 01 00 00       	push   $0x1a2
f011a929:	68 ae 92 13 f0       	push   $0xf01392ae
f011a92e:	e8 7d 58 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a933:	e8 a6 20 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011a938:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a93b:	e8 44 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a940:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a943:	83 ec 0c             	sub    $0xc,%esp
f011a946:	68 00 fc 1f 00       	push   $0x1ffc00
f011a94b:	e8 0f d6 fe ff       	call   f0107f5f <kmalloc>
f011a950:	83 c4 10             	add    $0x10,%esp
f011a953:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a959:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a95f:	89 c1                	mov    %eax,%ecx
f011a961:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a968:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a96d:	0f b6 d0             	movzbl %al,%edx
f011a970:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a973:	01 d0                	add    %edx,%eax
f011a975:	48                   	dec    %eax
f011a976:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a979:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a97c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a981:	f7 75 cc             	divl   -0x34(%ebp)
f011a984:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a987:	29 d0                	sub    %edx,%eax
f011a989:	89 c3                	mov    %eax,%ebx
f011a98b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a992:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011a997:	0f b6 c0             	movzbl %al,%eax
f011a99a:	c1 e0 04             	shl    $0x4,%eax
f011a99d:	89 c2                	mov    %eax,%edx
f011a99f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a9a2:	01 d0                	add    %edx,%eax
f011a9a4:	48                   	dec    %eax
f011a9a5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a9a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a9ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9b0:	f7 75 c4             	divl   -0x3c(%ebp)
f011a9b3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a9b6:	29 d0                	sub    %edx,%eax
f011a9b8:	01 d8                	add    %ebx,%eax
f011a9ba:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a9bf:	39 c1                	cmp    %eax,%ecx
f011a9c1:	74 17                	je     f011a9da <test_kmalloc_bestfit1+0x2da>
f011a9c3:	83 ec 04             	sub    $0x4,%esp
f011a9c6:	68 c8 96 13 f0       	push   $0xf01396c8
f011a9cb:	68 a8 01 00 00       	push   $0x1a8
f011a9d0:	68 ae 92 13 f0       	push   $0xf01392ae
f011a9d5:	e8 d6 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9da:	e8 a5 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a9df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9e2:	74 17                	je     f011a9fb <test_kmalloc_bestfit1+0x2fb>
f011a9e4:	83 ec 04             	sub    $0x4,%esp
f011a9e7:	68 c8 92 13 f0       	push   $0xf01392c8
f011a9ec:	68 a9 01 00 00       	push   $0x1a9
f011a9f1:	68 ae 92 13 f0       	push   $0xf01392ae
f011a9f6:	e8 b5 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a9fb:	e8 de 1f ff ff       	call   f010c9de <sys_calculate_free_frames>
f011aa00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa03:	29 c2                	sub    %eax,%edx
f011aa05:	89 d0                	mov    %edx,%eax
f011aa07:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aa0c:	74 17                	je     f011aa25 <test_kmalloc_bestfit1+0x325>
f011aa0e:	83 ec 04             	sub    $0x4,%esp
f011aa11:	68 f8 96 13 f0       	push   $0xf01396f8
f011aa16:	68 aa 01 00 00       	push   $0x1aa
f011aa1b:	68 ae 92 13 f0       	push   $0xf01392ae
f011aa20:	e8 8b 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa25:	e8 b4 1f ff ff       	call   f010c9de <sys_calculate_free_frames>
f011aa2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa2d:	e8 52 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aa32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011aa35:	83 ec 0c             	sub    $0xc,%esp
f011aa38:	68 00 fc 1f 00       	push   $0x1ffc00
f011aa3d:	e8 1d d5 fe ff       	call   f0107f5f <kmalloc>
f011aa42:	83 c4 10             	add    $0x10,%esp
f011aa45:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011aa4b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aa51:	89 c1                	mov    %eax,%ecx
f011aa53:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aa5a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011aa5f:	0f b6 d0             	movzbl %al,%edx
f011aa62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aa65:	01 d0                	add    %edx,%eax
f011aa67:	48                   	dec    %eax
f011aa68:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aa6b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa73:	f7 75 bc             	divl   -0x44(%ebp)
f011aa76:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa79:	29 d0                	sub    %edx,%eax
f011aa7b:	89 c3                	mov    %eax,%ebx
f011aa7d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011aa84:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011aa89:	0f b6 c0             	movzbl %al,%eax
f011aa8c:	c1 e0 04             	shl    $0x4,%eax
f011aa8f:	89 c2                	mov    %eax,%edx
f011aa91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011aa94:	01 d0                	add    %edx,%eax
f011aa96:	48                   	dec    %eax
f011aa97:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011aa9a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aa9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaa2:	f7 75 b4             	divl   -0x4c(%ebp)
f011aaa5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aaa8:	29 d0                	sub    %edx,%eax
f011aaaa:	01 d8                	add    %ebx,%eax
f011aaac:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011aab1:	39 c1                	cmp    %eax,%ecx
f011aab3:	74 17                	je     f011aacc <test_kmalloc_bestfit1+0x3cc>
f011aab5:	83 ec 04             	sub    $0x4,%esp
f011aab8:	68 c8 96 13 f0       	push   $0xf01396c8
f011aabd:	68 b0 01 00 00       	push   $0x1b0
f011aac2:	68 ae 92 13 f0       	push   $0xf01392ae
f011aac7:	e8 e4 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aacc:	e8 b3 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aad1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aad4:	74 17                	je     f011aaed <test_kmalloc_bestfit1+0x3ed>
f011aad6:	83 ec 04             	sub    $0x4,%esp
f011aad9:	68 c8 92 13 f0       	push   $0xf01392c8
f011aade:	68 b1 01 00 00       	push   $0x1b1
f011aae3:	68 ae 92 13 f0       	push   $0xf01392ae
f011aae8:	e8 c3 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aaed:	e8 ec 1e ff ff       	call   f010c9de <sys_calculate_free_frames>
f011aaf2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aaf5:	29 c2                	sub    %eax,%edx
f011aaf7:	89 d0                	mov    %edx,%eax
f011aaf9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aafe:	74 17                	je     f011ab17 <test_kmalloc_bestfit1+0x417>
f011ab00:	83 ec 04             	sub    $0x4,%esp
f011ab03:	68 f8 96 13 f0       	push   $0xf01396f8
f011ab08:	68 b2 01 00 00       	push   $0x1b2
f011ab0d:	68 ae 92 13 f0       	push   $0xf01392ae
f011ab12:	e8 99 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab17:	e8 c2 1e ff ff       	call   f010c9de <sys_calculate_free_frames>
f011ab1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab1f:	e8 60 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011ab27:	83 ec 0c             	sub    $0xc,%esp
f011ab2a:	68 00 fc 0f 00       	push   $0xffc00
f011ab2f:	e8 2b d4 fe ff       	call   f0107f5f <kmalloc>
f011ab34:	83 c4 10             	add    $0x10,%esp
f011ab37:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ab3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ab43:	89 c1                	mov    %eax,%ecx
f011ab45:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ab4c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ab51:	0f b6 d0             	movzbl %al,%edx
f011ab54:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ab57:	01 d0                	add    %edx,%eax
f011ab59:	48                   	dec    %eax
f011ab5a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ab5d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab60:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab65:	f7 75 ac             	divl   -0x54(%ebp)
f011ab68:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab6b:	29 d0                	sub    %edx,%eax
f011ab6d:	89 c3                	mov    %eax,%ebx
f011ab6f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ab76:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ab7b:	0f b6 c0             	movzbl %al,%eax
f011ab7e:	c1 e0 04             	shl    $0x4,%eax
f011ab81:	89 c2                	mov    %eax,%edx
f011ab83:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ab86:	01 d0                	add    %edx,%eax
f011ab88:	48                   	dec    %eax
f011ab89:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ab8c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab94:	f7 75 a4             	divl   -0x5c(%ebp)
f011ab97:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ab9a:	29 d0                	sub    %edx,%eax
f011ab9c:	01 d8                	add    %ebx,%eax
f011ab9e:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011aba3:	39 c1                	cmp    %eax,%ecx
f011aba5:	74 17                	je     f011abbe <test_kmalloc_bestfit1+0x4be>
f011aba7:	83 ec 04             	sub    $0x4,%esp
f011abaa:	68 c8 96 13 f0       	push   $0xf01396c8
f011abaf:	68 b8 01 00 00       	push   $0x1b8
f011abb4:	68 ae 92 13 f0       	push   $0xf01392ae
f011abb9:	e8 f2 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abbe:	e8 c1 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011abc3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abc6:	74 17                	je     f011abdf <test_kmalloc_bestfit1+0x4df>
f011abc8:	83 ec 04             	sub    $0x4,%esp
f011abcb:	68 c8 92 13 f0       	push   $0xf01392c8
f011abd0:	68 b9 01 00 00       	push   $0x1b9
f011abd5:	68 ae 92 13 f0       	push   $0xf01392ae
f011abda:	e8 d1 55 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011abdf:	e8 fa 1d ff ff       	call   f010c9de <sys_calculate_free_frames>
f011abe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abe7:	29 c2                	sub    %eax,%edx
f011abe9:	89 d0                	mov    %edx,%eax
f011abeb:	3d 00 01 00 00       	cmp    $0x100,%eax
f011abf0:	74 17                	je     f011ac09 <test_kmalloc_bestfit1+0x509>
f011abf2:	83 ec 04             	sub    $0x4,%esp
f011abf5:	68 f8 96 13 f0       	push   $0xf01396f8
f011abfa:	68 ba 01 00 00       	push   $0x1ba
f011abff:	68 ae 92 13 f0       	push   $0xf01392ae
f011ac04:	e8 a7 55 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac09:	e8 d0 1d ff ff       	call   f010c9de <sys_calculate_free_frames>
f011ac0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac11:	e8 6e 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ac16:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ac19:	83 ec 0c             	sub    $0xc,%esp
f011ac1c:	68 00 fc 0f 00       	push   $0xffc00
f011ac21:	e8 39 d3 fe ff       	call   f0107f5f <kmalloc>
f011ac26:	83 c4 10             	add    $0x10,%esp
f011ac29:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ac2f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac35:	89 c1                	mov    %eax,%ecx
f011ac37:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac3e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ac43:	0f b6 d0             	movzbl %al,%edx
f011ac46:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac49:	01 d0                	add    %edx,%eax
f011ac4b:	48                   	dec    %eax
f011ac4c:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ac4f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac57:	f7 75 9c             	divl   -0x64(%ebp)
f011ac5a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac5d:	29 d0                	sub    %edx,%eax
f011ac5f:	89 c3                	mov    %eax,%ebx
f011ac61:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac68:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ac6d:	0f b6 c0             	movzbl %al,%eax
f011ac70:	c1 e0 04             	shl    $0x4,%eax
f011ac73:	89 c2                	mov    %eax,%edx
f011ac75:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ac78:	01 d0                	add    %edx,%eax
f011ac7a:	48                   	dec    %eax
f011ac7b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ac7e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac86:	f7 75 94             	divl   -0x6c(%ebp)
f011ac89:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac8c:	29 d0                	sub    %edx,%eax
f011ac8e:	01 d8                	add    %ebx,%eax
f011ac90:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ac95:	39 c1                	cmp    %eax,%ecx
f011ac97:	74 17                	je     f011acb0 <test_kmalloc_bestfit1+0x5b0>
f011ac99:	83 ec 04             	sub    $0x4,%esp
f011ac9c:	68 c8 96 13 f0       	push   $0xf01396c8
f011aca1:	68 c0 01 00 00       	push   $0x1c0
f011aca6:	68 ae 92 13 f0       	push   $0xf01392ae
f011acab:	e8 00 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acb0:	e8 cf 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011acb5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acb8:	74 17                	je     f011acd1 <test_kmalloc_bestfit1+0x5d1>
f011acba:	83 ec 04             	sub    $0x4,%esp
f011acbd:	68 c8 92 13 f0       	push   $0xf01392c8
f011acc2:	68 c1 01 00 00       	push   $0x1c1
f011acc7:	68 ae 92 13 f0       	push   $0xf01392ae
f011accc:	e8 df 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011acd1:	e8 08 1d ff ff       	call   f010c9de <sys_calculate_free_frames>
f011acd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011acd9:	29 c2                	sub    %eax,%edx
f011acdb:	89 d0                	mov    %edx,%eax
f011acdd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ace2:	74 17                	je     f011acfb <test_kmalloc_bestfit1+0x5fb>
f011ace4:	83 ec 04             	sub    $0x4,%esp
f011ace7:	68 f8 96 13 f0       	push   $0xf01396f8
f011acec:	68 c2 01 00 00       	push   $0x1c2
f011acf1:	68 ae 92 13 f0       	push   $0xf01392ae
f011acf6:	e8 b5 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acfb:	e8 de 1c ff ff       	call   f010c9de <sys_calculate_free_frames>
f011ad00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad03:	e8 7c 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ad08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ad0b:	83 ec 0c             	sub    $0xc,%esp
f011ad0e:	68 00 fc 0f 00       	push   $0xffc00
f011ad13:	e8 47 d2 fe ff       	call   f0107f5f <kmalloc>
f011ad18:	83 c4 10             	add    $0x10,%esp
f011ad1b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ad21:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ad27:	89 c1                	mov    %eax,%ecx
f011ad29:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ad30:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ad35:	0f b6 d0             	movzbl %al,%edx
f011ad38:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad3b:	01 d0                	add    %edx,%eax
f011ad3d:	48                   	dec    %eax
f011ad3e:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ad41:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad44:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad49:	f7 75 8c             	divl   -0x74(%ebp)
f011ad4c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad4f:	29 d0                	sub    %edx,%eax
f011ad51:	89 c3                	mov    %eax,%ebx
f011ad53:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ad5a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ad5f:	0f b6 c0             	movzbl %al,%eax
f011ad62:	c1 e0 04             	shl    $0x4,%eax
f011ad65:	89 c2                	mov    %eax,%edx
f011ad67:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad6a:	01 d0                	add    %edx,%eax
f011ad6c:	48                   	dec    %eax
f011ad6d:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad70:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad78:	f7 75 84             	divl   -0x7c(%ebp)
f011ad7b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad7e:	29 d0                	sub    %edx,%eax
f011ad80:	01 d8                	add    %ebx,%eax
f011ad82:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011ad87:	39 c1                	cmp    %eax,%ecx
f011ad89:	74 17                	je     f011ada2 <test_kmalloc_bestfit1+0x6a2>
f011ad8b:	83 ec 04             	sub    $0x4,%esp
f011ad8e:	68 c8 96 13 f0       	push   $0xf01396c8
f011ad93:	68 c8 01 00 00       	push   $0x1c8
f011ad98:	68 ae 92 13 f0       	push   $0xf01392ae
f011ad9d:	e8 0e 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ada2:	e8 dd 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ada7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adaa:	74 17                	je     f011adc3 <test_kmalloc_bestfit1+0x6c3>
f011adac:	83 ec 04             	sub    $0x4,%esp
f011adaf:	68 c8 92 13 f0       	push   $0xf01392c8
f011adb4:	68 c9 01 00 00       	push   $0x1c9
f011adb9:	68 ae 92 13 f0       	push   $0xf01392ae
f011adbe:	e8 ed 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011adc3:	e8 16 1c ff ff       	call   f010c9de <sys_calculate_free_frames>
f011adc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adcb:	29 c2                	sub    %eax,%edx
f011adcd:	89 d0                	mov    %edx,%eax
f011adcf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011add4:	74 17                	je     f011aded <test_kmalloc_bestfit1+0x6ed>
f011add6:	83 ec 04             	sub    $0x4,%esp
f011add9:	68 f8 96 13 f0       	push   $0xf01396f8
f011adde:	68 ca 01 00 00       	push   $0x1ca
f011ade3:	68 ae 92 13 f0       	push   $0xf01392ae
f011ade8:	e8 c3 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aded:	e8 ec 1b ff ff       	call   f010c9de <sys_calculate_free_frames>
f011adf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adf5:	e8 8a 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011adfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011adfd:	83 ec 0c             	sub    $0xc,%esp
f011ae00:	68 00 fc 0f 00       	push   $0xffc00
f011ae05:	e8 55 d1 fe ff       	call   f0107f5f <kmalloc>
f011ae0a:	83 c4 10             	add    $0x10,%esp
f011ae0d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011ae13:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ae19:	89 c1                	mov    %eax,%ecx
f011ae1b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ae22:	10 00 00 
f011ae25:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ae2a:	0f b6 d0             	movzbl %al,%edx
f011ae2d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ae33:	01 d0                	add    %edx,%eax
f011ae35:	48                   	dec    %eax
f011ae36:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ae3c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae42:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae47:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ae4d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae53:	29 d0                	sub    %edx,%eax
f011ae55:	89 c3                	mov    %eax,%ebx
f011ae57:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae5e:	10 00 00 
f011ae61:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ae66:	0f b6 c0             	movzbl %al,%eax
f011ae69:	c1 e0 04             	shl    $0x4,%eax
f011ae6c:	89 c2                	mov    %eax,%edx
f011ae6e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae74:	01 d0                	add    %edx,%eax
f011ae76:	48                   	dec    %eax
f011ae77:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae7d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae83:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae88:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ae8e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae94:	29 d0                	sub    %edx,%eax
f011ae96:	01 d8                	add    %ebx,%eax
f011ae98:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ae9d:	39 c1                	cmp    %eax,%ecx
f011ae9f:	74 17                	je     f011aeb8 <test_kmalloc_bestfit1+0x7b8>
f011aea1:	83 ec 04             	sub    $0x4,%esp
f011aea4:	68 c8 96 13 f0       	push   $0xf01396c8
f011aea9:	68 d0 01 00 00       	push   $0x1d0
f011aeae:	68 ae 92 13 f0       	push   $0xf01392ae
f011aeb3:	e8 f8 52 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aeb8:	e8 c7 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aebd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aec0:	74 17                	je     f011aed9 <test_kmalloc_bestfit1+0x7d9>
f011aec2:	83 ec 04             	sub    $0x4,%esp
f011aec5:	68 c8 92 13 f0       	push   $0xf01392c8
f011aeca:	68 d1 01 00 00       	push   $0x1d1
f011aecf:	68 ae 92 13 f0       	push   $0xf01392ae
f011aed4:	e8 d7 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aed9:	e8 00 1b ff ff       	call   f010c9de <sys_calculate_free_frames>
f011aede:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aee1:	29 c2                	sub    %eax,%edx
f011aee3:	89 d0                	mov    %edx,%eax
f011aee5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aeea:	74 17                	je     f011af03 <test_kmalloc_bestfit1+0x803>
f011aeec:	83 ec 04             	sub    $0x4,%esp
f011aeef:	68 f8 96 13 f0       	push   $0xf01396f8
f011aef4:	68 d2 01 00 00       	push   $0x1d2
f011aef9:	68 ae 92 13 f0       	push   $0xf01392ae
f011aefe:	e8 ad 52 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af03:	e8 d6 1a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011af08:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af0b:	e8 74 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011af13:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011af19:	83 ec 0c             	sub    $0xc,%esp
f011af1c:	50                   	push   %eax
f011af1d:	e8 57 d0 fe ff       	call   f0107f79 <kfree>
f011af22:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af25:	e8 5a 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af2d:	74 17                	je     f011af46 <test_kmalloc_bestfit1+0x846>
f011af2f:	83 ec 04             	sub    $0x4,%esp
f011af32:	68 c8 92 13 f0       	push   $0xf01392c8
f011af37:	68 db 01 00 00       	push   $0x1db
f011af3c:	68 ae 92 13 f0       	push   $0xf01392ae
f011af41:	e8 6a 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011af46:	e8 93 1a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011af4b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af4e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011af53:	74 17                	je     f011af6c <test_kmalloc_bestfit1+0x86c>
f011af55:	83 ec 04             	sub    $0x4,%esp
f011af58:	68 0b 97 13 f0       	push   $0xf013970b
f011af5d:	68 dc 01 00 00       	push   $0x1dc
f011af62:	68 ae 92 13 f0       	push   $0xf01392ae
f011af67:	e8 44 52 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af6c:	e8 6d 1a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011af71:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af74:	e8 0b 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af79:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011af7c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011af82:	83 ec 0c             	sub    $0xc,%esp
f011af85:	50                   	push   %eax
f011af86:	e8 ee cf fe ff       	call   f0107f79 <kfree>
f011af8b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af8e:	e8 f1 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af96:	74 17                	je     f011afaf <test_kmalloc_bestfit1+0x8af>
f011af98:	83 ec 04             	sub    $0x4,%esp
f011af9b:	68 c8 92 13 f0       	push   $0xf01392c8
f011afa0:	68 e2 01 00 00       	push   $0x1e2
f011afa5:	68 ae 92 13 f0       	push   $0xf01392ae
f011afaa:	e8 01 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011afaf:	e8 2a 1a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011afb4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011afb7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011afbc:	74 17                	je     f011afd5 <test_kmalloc_bestfit1+0x8d5>
f011afbe:	83 ec 04             	sub    $0x4,%esp
f011afc1:	68 0b 97 13 f0       	push   $0xf013970b
f011afc6:	68 e3 01 00 00       	push   $0x1e3
f011afcb:	68 ae 92 13 f0       	push   $0xf01392ae
f011afd0:	e8 db 51 fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011afd5:	e8 04 1a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011afda:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afdd:	e8 a2 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011afe2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011afe5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011afeb:	83 ec 0c             	sub    $0xc,%esp
f011afee:	50                   	push   %eax
f011afef:	e8 85 cf fe ff       	call   f0107f79 <kfree>
f011aff4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aff7:	e8 88 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011affc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afff:	74 17                	je     f011b018 <test_kmalloc_bestfit1+0x918>
f011b001:	83 ec 04             	sub    $0x4,%esp
f011b004:	68 c8 92 13 f0       	push   $0xf01392c8
f011b009:	68 e9 01 00 00       	push   $0x1e9
f011b00e:	68 ae 92 13 f0       	push   $0xf01392ae
f011b013:	e8 98 51 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b018:	e8 c1 19 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b01d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b020:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b025:	74 17                	je     f011b03e <test_kmalloc_bestfit1+0x93e>
f011b027:	83 ec 04             	sub    $0x4,%esp
f011b02a:	68 0b 97 13 f0       	push   $0xf013970b
f011b02f:	68 ea 01 00 00       	push   $0x1ea
f011b034:	68 ae 92 13 f0       	push   $0xf01392ae
f011b039:	e8 72 51 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b03e:	e8 9b 19 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b043:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b046:	e8 39 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b04b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b04e:	83 ec 0c             	sub    $0xc,%esp
f011b051:	68 00 00 08 00       	push   $0x80000
f011b056:	e8 04 cf fe ff       	call   f0107f5f <kmalloc>
f011b05b:	83 c4 10             	add    $0x10,%esp
f011b05e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b064:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b06a:	89 c1                	mov    %eax,%ecx
f011b06c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b073:	10 00 00 
f011b076:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b07b:	0f b6 d0             	movzbl %al,%edx
f011b07e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b084:	01 d0                	add    %edx,%eax
f011b086:	48                   	dec    %eax
f011b087:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b08d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b093:	ba 00 00 00 00       	mov    $0x0,%edx
f011b098:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b09e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b0a4:	29 d0                	sub    %edx,%eax
f011b0a6:	89 c3                	mov    %eax,%ebx
f011b0a8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b0af:	10 00 00 
f011b0b2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b0b7:	0f b6 c0             	movzbl %al,%eax
f011b0ba:	c1 e0 04             	shl    $0x4,%eax
f011b0bd:	89 c2                	mov    %eax,%edx
f011b0bf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b0c5:	01 d0                	add    %edx,%eax
f011b0c7:	48                   	dec    %eax
f011b0c8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b0ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b0d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0d9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b0df:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b0e5:	29 d0                	sub    %edx,%eax
f011b0e7:	01 d8                	add    %ebx,%eax
f011b0e9:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b0ee:	39 c1                	cmp    %eax,%ecx
f011b0f0:	74 17                	je     f011b109 <test_kmalloc_bestfit1+0xa09>
f011b0f2:	83 ec 04             	sub    $0x4,%esp
f011b0f5:	68 c8 96 13 f0       	push   $0xf01396c8
f011b0fa:	68 f3 01 00 00       	push   $0x1f3
f011b0ff:	68 ae 92 13 f0       	push   $0xf01392ae
f011b104:	e8 a7 50 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b109:	e8 76 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b10e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b111:	74 17                	je     f011b12a <test_kmalloc_bestfit1+0xa2a>
f011b113:	83 ec 04             	sub    $0x4,%esp
f011b116:	68 c8 92 13 f0       	push   $0xf01392c8
f011b11b:	68 f4 01 00 00       	push   $0x1f4
f011b120:	68 ae 92 13 f0       	push   $0xf01392ae
f011b125:	e8 86 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b12a:	e8 af 18 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b12f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b132:	29 c2                	sub    %eax,%edx
f011b134:	89 d0                	mov    %edx,%eax
f011b136:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b13b:	74 17                	je     f011b154 <test_kmalloc_bestfit1+0xa54>
f011b13d:	83 ec 04             	sub    $0x4,%esp
f011b140:	68 f8 96 13 f0       	push   $0xf01396f8
f011b145:	68 f5 01 00 00       	push   $0x1f5
f011b14a:	68 ae 92 13 f0       	push   $0xf01392ae
f011b14f:	e8 5c 50 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b154:	e8 85 18 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b159:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b15c:	e8 23 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b161:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b164:	83 ec 0c             	sub    $0xc,%esp
f011b167:	68 00 fc 0f 00       	push   $0xffc00
f011b16c:	e8 ee cd fe ff       	call   f0107f5f <kmalloc>
f011b171:	83 c4 10             	add    $0x10,%esp
f011b174:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b17a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b180:	89 c1                	mov    %eax,%ecx
f011b182:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b189:	10 00 00 
f011b18c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b191:	0f b6 d0             	movzbl %al,%edx
f011b194:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b19a:	01 d0                	add    %edx,%eax
f011b19c:	48                   	dec    %eax
f011b19d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b1a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1ae:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b1b4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b1ba:	29 d0                	sub    %edx,%eax
f011b1bc:	89 c3                	mov    %eax,%ebx
f011b1be:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b1c5:	10 00 00 
f011b1c8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b1cd:	0f b6 c0             	movzbl %al,%eax
f011b1d0:	c1 e0 04             	shl    $0x4,%eax
f011b1d3:	89 c2                	mov    %eax,%edx
f011b1d5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b1db:	01 d0                	add    %edx,%eax
f011b1dd:	48                   	dec    %eax
f011b1de:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b1e4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b1ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1ef:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b1f5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b1fb:	29 d0                	sub    %edx,%eax
f011b1fd:	01 d8                	add    %ebx,%eax
f011b1ff:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b204:	39 c1                	cmp    %eax,%ecx
f011b206:	74 17                	je     f011b21f <test_kmalloc_bestfit1+0xb1f>
f011b208:	83 ec 04             	sub    $0x4,%esp
f011b20b:	68 c8 96 13 f0       	push   $0xf01396c8
f011b210:	68 fb 01 00 00       	push   $0x1fb
f011b215:	68 ae 92 13 f0       	push   $0xf01392ae
f011b21a:	e8 91 4f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b21f:	e8 60 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b224:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b227:	74 17                	je     f011b240 <test_kmalloc_bestfit1+0xb40>
f011b229:	83 ec 04             	sub    $0x4,%esp
f011b22c:	68 c8 92 13 f0       	push   $0xf01392c8
f011b231:	68 fc 01 00 00       	push   $0x1fc
f011b236:	68 ae 92 13 f0       	push   $0xf01392ae
f011b23b:	e8 70 4f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b240:	e8 99 17 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b245:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b248:	29 c2                	sub    %eax,%edx
f011b24a:	89 d0                	mov    %edx,%eax
f011b24c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b251:	74 17                	je     f011b26a <test_kmalloc_bestfit1+0xb6a>
f011b253:	83 ec 04             	sub    $0x4,%esp
f011b256:	68 f8 96 13 f0       	push   $0xf01396f8
f011b25b:	68 fd 01 00 00       	push   $0x1fd
f011b260:	68 ae 92 13 f0       	push   $0xf01392ae
f011b265:	e8 46 4f fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b26a:	e8 6f 17 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b26f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b272:	e8 0d 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b277:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b27a:	83 ec 0c             	sub    $0xc,%esp
f011b27d:	68 00 fc 03 00       	push   $0x3fc00
f011b282:	e8 d8 cc fe ff       	call   f0107f5f <kmalloc>
f011b287:	83 c4 10             	add    $0x10,%esp
f011b28a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b290:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b296:	89 c1                	mov    %eax,%ecx
f011b298:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b29f:	10 00 00 
f011b2a2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b2a7:	0f b6 d0             	movzbl %al,%edx
f011b2aa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b2b0:	01 d0                	add    %edx,%eax
f011b2b2:	48                   	dec    %eax
f011b2b3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b2b9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2c4:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b2ca:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2d0:	29 d0                	sub    %edx,%eax
f011b2d2:	89 c3                	mov    %eax,%ebx
f011b2d4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b2db:	10 00 00 
f011b2de:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b2e3:	0f b6 c0             	movzbl %al,%eax
f011b2e6:	c1 e0 04             	shl    $0x4,%eax
f011b2e9:	89 c2                	mov    %eax,%edx
f011b2eb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b2f1:	01 d0                	add    %edx,%eax
f011b2f3:	48                   	dec    %eax
f011b2f4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b2fa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b300:	ba 00 00 00 00       	mov    $0x0,%edx
f011b305:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b30b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b311:	29 d0                	sub    %edx,%eax
f011b313:	01 d8                	add    %ebx,%eax
f011b315:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b31a:	39 c1                	cmp    %eax,%ecx
f011b31c:	74 17                	je     f011b335 <test_kmalloc_bestfit1+0xc35>
f011b31e:	83 ec 04             	sub    $0x4,%esp
f011b321:	68 c8 96 13 f0       	push   $0xf01396c8
f011b326:	68 03 02 00 00       	push   $0x203
f011b32b:	68 ae 92 13 f0       	push   $0xf01392ae
f011b330:	e8 7b 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b335:	e8 4a 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b33a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b33d:	74 17                	je     f011b356 <test_kmalloc_bestfit1+0xc56>
f011b33f:	83 ec 04             	sub    $0x4,%esp
f011b342:	68 c8 92 13 f0       	push   $0xf01392c8
f011b347:	68 04 02 00 00       	push   $0x204
f011b34c:	68 ae 92 13 f0       	push   $0xf01392ae
f011b351:	e8 5a 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b356:	e8 83 16 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b35b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b35e:	29 c2                	sub    %eax,%edx
f011b360:	89 d0                	mov    %edx,%eax
f011b362:	83 f8 40             	cmp    $0x40,%eax
f011b365:	74 17                	je     f011b37e <test_kmalloc_bestfit1+0xc7e>
f011b367:	83 ec 04             	sub    $0x4,%esp
f011b36a:	68 f8 96 13 f0       	push   $0xf01396f8
f011b36f:	68 05 02 00 00       	push   $0x205
f011b374:	68 ae 92 13 f0       	push   $0xf01392ae
f011b379:	e8 32 4e fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b37e:	e8 5b 16 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b383:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b386:	e8 f9 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b38b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b38e:	83 ec 0c             	sub    $0xc,%esp
f011b391:	68 00 fc 3f 00       	push   $0x3ffc00
f011b396:	e8 c4 cb fe ff       	call   f0107f5f <kmalloc>
f011b39b:	83 c4 10             	add    $0x10,%esp
f011b39e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b3a4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b3aa:	89 c1                	mov    %eax,%ecx
f011b3ac:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b3b3:	10 00 00 
f011b3b6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b3bb:	0f b6 d0             	movzbl %al,%edx
f011b3be:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b3c4:	01 d0                	add    %edx,%eax
f011b3c6:	48                   	dec    %eax
f011b3c7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b3cd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b3d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3d8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b3de:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b3e4:	29 d0                	sub    %edx,%eax
f011b3e6:	89 c3                	mov    %eax,%ebx
f011b3e8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b3ef:	10 00 00 
f011b3f2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b3f7:	0f b6 c0             	movzbl %al,%eax
f011b3fa:	c1 e0 04             	shl    $0x4,%eax
f011b3fd:	89 c2                	mov    %eax,%edx
f011b3ff:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b405:	01 d0                	add    %edx,%eax
f011b407:	48                   	dec    %eax
f011b408:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b40e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b414:	ba 00 00 00 00       	mov    $0x0,%edx
f011b419:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b41f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b425:	29 d0                	sub    %edx,%eax
f011b427:	01 d8                	add    %ebx,%eax
f011b429:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b42e:	39 c1                	cmp    %eax,%ecx
f011b430:	74 17                	je     f011b449 <test_kmalloc_bestfit1+0xd49>
f011b432:	83 ec 04             	sub    $0x4,%esp
f011b435:	68 c8 96 13 f0       	push   $0xf01396c8
f011b43a:	68 0b 02 00 00       	push   $0x20b
f011b43f:	68 ae 92 13 f0       	push   $0xf01392ae
f011b444:	e8 67 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b449:	e8 36 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b44e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b451:	74 17                	je     f011b46a <test_kmalloc_bestfit1+0xd6a>
f011b453:	83 ec 04             	sub    $0x4,%esp
f011b456:	68 c8 92 13 f0       	push   $0xf01392c8
f011b45b:	68 0c 02 00 00       	push   $0x20c
f011b460:	68 ae 92 13 f0       	push   $0xf01392ae
f011b465:	e8 46 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b46a:	e8 6f 15 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b46f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b472:	29 c2                	sub    %eax,%edx
f011b474:	89 d0                	mov    %edx,%eax
f011b476:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b47b:	74 17                	je     f011b494 <test_kmalloc_bestfit1+0xd94>
f011b47d:	83 ec 04             	sub    $0x4,%esp
f011b480:	68 f8 96 13 f0       	push   $0xf01396f8
f011b485:	68 0d 02 00 00       	push   $0x20d
f011b48a:	68 ae 92 13 f0       	push   $0xf01392ae
f011b48f:	e8 1c 4d fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b494:	e8 45 15 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b499:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b49c:	e8 e3 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b4a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b4a4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b4aa:	83 ec 0c             	sub    $0xc,%esp
f011b4ad:	50                   	push   %eax
f011b4ae:	e8 c6 ca fe ff       	call   f0107f79 <kfree>
f011b4b3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4b6:	e8 c9 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b4bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4be:	74 17                	je     f011b4d7 <test_kmalloc_bestfit1+0xdd7>
f011b4c0:	83 ec 04             	sub    $0x4,%esp
f011b4c3:	68 c8 92 13 f0       	push   $0xf01392c8
f011b4c8:	68 16 02 00 00       	push   $0x216
f011b4cd:	68 ae 92 13 f0       	push   $0xf01392ae
f011b4d2:	e8 d9 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b4d7:	e8 02 15 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b4dc:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b4df:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b4e4:	74 17                	je     f011b4fd <test_kmalloc_bestfit1+0xdfd>
f011b4e6:	83 ec 04             	sub    $0x4,%esp
f011b4e9:	68 0b 97 13 f0       	push   $0xf013970b
f011b4ee:	68 17 02 00 00       	push   $0x217
f011b4f3:	68 ae 92 13 f0       	push   $0xf01392ae
f011b4f8:	e8 b3 4c fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b4fd:	e8 dc 14 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b502:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b505:	e8 7a 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b50a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b50d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b513:	83 ec 0c             	sub    $0xc,%esp
f011b516:	50                   	push   %eax
f011b517:	e8 5d ca fe ff       	call   f0107f79 <kfree>
f011b51c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b51f:	e8 60 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b524:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b527:	74 17                	je     f011b540 <test_kmalloc_bestfit1+0xe40>
f011b529:	83 ec 04             	sub    $0x4,%esp
f011b52c:	68 c8 92 13 f0       	push   $0xf01392c8
f011b531:	68 1d 02 00 00       	push   $0x21d
f011b536:	68 ae 92 13 f0       	push   $0xf01392ae
f011b53b:	e8 70 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b540:	e8 99 14 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b545:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b548:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b54d:	74 17                	je     f011b566 <test_kmalloc_bestfit1+0xe66>
f011b54f:	83 ec 04             	sub    $0x4,%esp
f011b552:	68 0b 97 13 f0       	push   $0xf013970b
f011b557:	68 1e 02 00 00       	push   $0x21e
f011b55c:	68 ae 92 13 f0       	push   $0xf01392ae
f011b561:	e8 4a 4c fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b566:	e8 73 14 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b56b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b56e:	e8 11 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b573:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b576:	83 ec 0c             	sub    $0xc,%esp
f011b579:	68 00 fc 1f 00       	push   $0x1ffc00
f011b57e:	e8 dc c9 fe ff       	call   f0107f5f <kmalloc>
f011b583:	83 c4 10             	add    $0x10,%esp
f011b586:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b58c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b592:	89 c1                	mov    %eax,%ecx
f011b594:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b59b:	10 00 00 
f011b59e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b5a3:	0f b6 d0             	movzbl %al,%edx
f011b5a6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b5ac:	01 d0                	add    %edx,%eax
f011b5ae:	48                   	dec    %eax
f011b5af:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b5b5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b5bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5c0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b5c6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b5cc:	29 d0                	sub    %edx,%eax
f011b5ce:	89 c3                	mov    %eax,%ebx
f011b5d0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b5d7:	10 00 00 
f011b5da:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b5df:	0f b6 c0             	movzbl %al,%eax
f011b5e2:	c1 e0 04             	shl    $0x4,%eax
f011b5e5:	89 c2                	mov    %eax,%edx
f011b5e7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b5ed:	01 d0                	add    %edx,%eax
f011b5ef:	48                   	dec    %eax
f011b5f0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b5f6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b5fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b601:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b607:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b60d:	29 d0                	sub    %edx,%eax
f011b60f:	01 d8                	add    %ebx,%eax
f011b611:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b616:	39 c1                	cmp    %eax,%ecx
f011b618:	74 17                	je     f011b631 <test_kmalloc_bestfit1+0xf31>
f011b61a:	83 ec 04             	sub    $0x4,%esp
f011b61d:	68 c8 96 13 f0       	push   $0xf01396c8
f011b622:	68 27 02 00 00       	push   $0x227
f011b627:	68 ae 92 13 f0       	push   $0xf01392ae
f011b62c:	e8 7f 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b631:	e8 4e 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b636:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b639:	74 17                	je     f011b652 <test_kmalloc_bestfit1+0xf52>
f011b63b:	83 ec 04             	sub    $0x4,%esp
f011b63e:	68 c8 92 13 f0       	push   $0xf01392c8
f011b643:	68 28 02 00 00       	push   $0x228
f011b648:	68 ae 92 13 f0       	push   $0xf01392ae
f011b64d:	e8 5e 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b652:	e8 87 13 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b657:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b65a:	29 c2                	sub    %eax,%edx
f011b65c:	89 d0                	mov    %edx,%eax
f011b65e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b663:	74 17                	je     f011b67c <test_kmalloc_bestfit1+0xf7c>
f011b665:	83 ec 04             	sub    $0x4,%esp
f011b668:	68 f8 96 13 f0       	push   $0xf01396f8
f011b66d:	68 29 02 00 00       	push   $0x229
f011b672:	68 ae 92 13 f0       	push   $0xf01392ae
f011b677:	e8 34 4b fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b67c:	83 ec 0c             	sub    $0xc,%esp
f011b67f:	68 18 97 13 f0       	push   $0xf0139718
f011b684:	e8 a8 57 fe ff       	call   f0100e31 <cprintf>
f011b689:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b68c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b691:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b694:	5b                   	pop    %ebx
f011b695:	5f                   	pop    %edi
f011b696:	5d                   	pop    %ebp
f011b697:	c3                   	ret    

f011b698 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b698:	55                   	push   %ebp
f011b699:	89 e5                	mov    %esp,%ebp
f011b69b:	57                   	push   %edi
f011b69c:	53                   	push   %ebx
f011b69d:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b6a3:	83 ec 0c             	sub    $0xc,%esp
f011b6a6:	68 f0 91 13 f0       	push   $0xf01391f0
f011b6ab:	e8 81 57 fe ff       	call   f0100e31 <cprintf>
f011b6b0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b6b3:	83 ec 0c             	sub    $0xc,%esp
f011b6b6:	68 20 92 13 f0       	push   $0xf0139220
f011b6bb:	e8 71 57 fe ff       	call   f0100e31 <cprintf>
f011b6c0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b6c3:	83 ec 0c             	sub    $0xc,%esp
f011b6c6:	68 f0 91 13 f0       	push   $0xf01391f0
f011b6cb:	e8 61 57 fe ff       	call   f0100e31 <cprintf>
f011b6d0:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b6d3:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b6d9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b6de:	b8 00 00 00 00       	mov    $0x0,%eax
f011b6e3:	89 d7                	mov    %edx,%edi
f011b6e5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b6e7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b6ee:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b6f3:	0f b6 d0             	movzbl %al,%edx
f011b6f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b6f9:	01 d0                	add    %edx,%eax
f011b6fb:	48                   	dec    %eax
f011b6fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b6ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b702:	ba 00 00 00 00       	mov    $0x0,%edx
f011b707:	f7 75 f4             	divl   -0xc(%ebp)
f011b70a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b70d:	29 d0                	sub    %edx,%eax
f011b70f:	89 c1                	mov    %eax,%ecx
f011b711:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b718:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b71d:	0f b6 c0             	movzbl %al,%eax
f011b720:	c1 e0 04             	shl    $0x4,%eax
f011b723:	89 c2                	mov    %eax,%edx
f011b725:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b728:	01 d0                	add    %edx,%eax
f011b72a:	48                   	dec    %eax
f011b72b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b72e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b731:	ba 00 00 00 00       	mov    $0x0,%edx
f011b736:	f7 75 ec             	divl   -0x14(%ebp)
f011b739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b73c:	29 d0                	sub    %edx,%eax
f011b73e:	01 c8                	add    %ecx,%eax
f011b740:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b745:	29 c2                	sub    %eax,%edx
f011b747:	89 d0                	mov    %edx,%eax
f011b749:	83 ec 0c             	sub    $0xc,%esp
f011b74c:	50                   	push   %eax
f011b74d:	e8 0d c8 fe ff       	call   f0107f5f <kmalloc>
f011b752:	83 c4 10             	add    $0x10,%esp
f011b755:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b75b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b761:	85 c0                	test   %eax,%eax
f011b763:	74 17                	je     f011b77c <test_kmalloc_bestfit2+0xe4>
f011b765:	83 ec 04             	sub    $0x4,%esp
f011b768:	68 60 97 13 f0       	push   $0xf0139760
f011b76d:	68 3f 02 00 00       	push   $0x23f
f011b772:	68 ae 92 13 f0       	push   $0xf01392ae
f011b777:	e8 34 4a fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b77c:	e8 5d 12 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b781:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b784:	e8 fb 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b789:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b78c:	83 ec 0c             	sub    $0xc,%esp
f011b78f:	68 00 fc 1f 00       	push   $0x1ffc00
f011b794:	e8 c6 c7 fe ff       	call   f0107f5f <kmalloc>
f011b799:	83 c4 10             	add    $0x10,%esp
f011b79c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b7a2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b7a8:	89 c1                	mov    %eax,%ecx
f011b7aa:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b7b1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b7b6:	0f b6 d0             	movzbl %al,%edx
f011b7b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b7bc:	01 d0                	add    %edx,%eax
f011b7be:	48                   	dec    %eax
f011b7bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b7c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b7c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7ca:	f7 75 dc             	divl   -0x24(%ebp)
f011b7cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b7d0:	29 d0                	sub    %edx,%eax
f011b7d2:	89 c3                	mov    %eax,%ebx
f011b7d4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b7db:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b7e0:	0f b6 c0             	movzbl %al,%eax
f011b7e3:	c1 e0 04             	shl    $0x4,%eax
f011b7e6:	89 c2                	mov    %eax,%edx
f011b7e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b7eb:	01 d0                	add    %edx,%eax
f011b7ed:	48                   	dec    %eax
f011b7ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b7f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7f9:	f7 75 d4             	divl   -0x2c(%ebp)
f011b7fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7ff:	29 d0                	sub    %edx,%eax
f011b801:	01 d8                	add    %ebx,%eax
f011b803:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b808:	39 c1                	cmp    %eax,%ecx
f011b80a:	74 17                	je     f011b823 <test_kmalloc_bestfit2+0x18b>
f011b80c:	83 ec 04             	sub    $0x4,%esp
f011b80f:	68 c8 96 13 f0       	push   $0xf01396c8
f011b814:	68 49 02 00 00       	push   $0x249
f011b819:	68 ae 92 13 f0       	push   $0xf01392ae
f011b81e:	e8 8d 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b823:	e8 5c 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b828:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b82b:	74 17                	je     f011b844 <test_kmalloc_bestfit2+0x1ac>
f011b82d:	83 ec 04             	sub    $0x4,%esp
f011b830:	68 c8 92 13 f0       	push   $0xf01392c8
f011b835:	68 4a 02 00 00       	push   $0x24a
f011b83a:	68 ae 92 13 f0       	push   $0xf01392ae
f011b83f:	e8 6c 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b844:	e8 95 11 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b849:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b84c:	29 c2                	sub    %eax,%edx
f011b84e:	89 d0                	mov    %edx,%eax
f011b850:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b855:	74 17                	je     f011b86e <test_kmalloc_bestfit2+0x1d6>
f011b857:	83 ec 04             	sub    $0x4,%esp
f011b85a:	68 f8 96 13 f0       	push   $0xf01396f8
f011b85f:	68 4b 02 00 00       	push   $0x24b
f011b864:	68 ae 92 13 f0       	push   $0xf01392ae
f011b869:	e8 42 49 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b86e:	e8 6b 11 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b873:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b876:	e8 09 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b87b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b87e:	83 ec 0c             	sub    $0xc,%esp
f011b881:	68 00 fc 1f 00       	push   $0x1ffc00
f011b886:	e8 d4 c6 fe ff       	call   f0107f5f <kmalloc>
f011b88b:	83 c4 10             	add    $0x10,%esp
f011b88e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b894:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b89a:	89 c1                	mov    %eax,%ecx
f011b89c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b8a3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b8a8:	0f b6 d0             	movzbl %al,%edx
f011b8ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b8ae:	01 d0                	add    %edx,%eax
f011b8b0:	48                   	dec    %eax
f011b8b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b8b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8bc:	f7 75 cc             	divl   -0x34(%ebp)
f011b8bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8c2:	29 d0                	sub    %edx,%eax
f011b8c4:	89 c3                	mov    %eax,%ebx
f011b8c6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b8cd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b8d2:	0f b6 c0             	movzbl %al,%eax
f011b8d5:	c1 e0 04             	shl    $0x4,%eax
f011b8d8:	89 c2                	mov    %eax,%edx
f011b8da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b8dd:	01 d0                	add    %edx,%eax
f011b8df:	48                   	dec    %eax
f011b8e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b8e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8eb:	f7 75 c4             	divl   -0x3c(%ebp)
f011b8ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8f1:	29 d0                	sub    %edx,%eax
f011b8f3:	01 d8                	add    %ebx,%eax
f011b8f5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b8fa:	39 c1                	cmp    %eax,%ecx
f011b8fc:	74 17                	je     f011b915 <test_kmalloc_bestfit2+0x27d>
f011b8fe:	83 ec 04             	sub    $0x4,%esp
f011b901:	68 c8 96 13 f0       	push   $0xf01396c8
f011b906:	68 51 02 00 00       	push   $0x251
f011b90b:	68 ae 92 13 f0       	push   $0xf01392ae
f011b910:	e8 9b 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b915:	e8 6a 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b91a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b91d:	74 17                	je     f011b936 <test_kmalloc_bestfit2+0x29e>
f011b91f:	83 ec 04             	sub    $0x4,%esp
f011b922:	68 c8 92 13 f0       	push   $0xf01392c8
f011b927:	68 52 02 00 00       	push   $0x252
f011b92c:	68 ae 92 13 f0       	push   $0xf01392ae
f011b931:	e8 7a 48 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b936:	e8 a3 10 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b93b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b93e:	29 c2                	sub    %eax,%edx
f011b940:	89 d0                	mov    %edx,%eax
f011b942:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b947:	74 17                	je     f011b960 <test_kmalloc_bestfit2+0x2c8>
f011b949:	83 ec 04             	sub    $0x4,%esp
f011b94c:	68 f8 96 13 f0       	push   $0xf01396f8
f011b951:	68 53 02 00 00       	push   $0x253
f011b956:	68 ae 92 13 f0       	push   $0xf01392ae
f011b95b:	e8 50 48 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b960:	e8 79 10 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011b965:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b968:	e8 17 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b96d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b970:	83 ec 0c             	sub    $0xc,%esp
f011b973:	68 00 08 00 00       	push   $0x800
f011b978:	e8 e2 c5 fe ff       	call   f0107f5f <kmalloc>
f011b97d:	83 c4 10             	add    $0x10,%esp
f011b980:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b986:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b98c:	89 c1                	mov    %eax,%ecx
f011b98e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b995:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b99a:	0f b6 d0             	movzbl %al,%edx
f011b99d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b9a0:	01 d0                	add    %edx,%eax
f011b9a2:	48                   	dec    %eax
f011b9a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b9a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b9a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ae:	f7 75 bc             	divl   -0x44(%ebp)
f011b9b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b9b4:	29 d0                	sub    %edx,%eax
f011b9b6:	89 c3                	mov    %eax,%ebx
f011b9b8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b9bf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011b9c4:	0f b6 c0             	movzbl %al,%eax
f011b9c7:	c1 e0 04             	shl    $0x4,%eax
f011b9ca:	89 c2                	mov    %eax,%edx
f011b9cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b9cf:	01 d0                	add    %edx,%eax
f011b9d1:	48                   	dec    %eax
f011b9d2:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b9d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b9d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9dd:	f7 75 b4             	divl   -0x4c(%ebp)
f011b9e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b9e3:	29 d0                	sub    %edx,%eax
f011b9e5:	01 d8                	add    %ebx,%eax
f011b9e7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b9ec:	39 c1                	cmp    %eax,%ecx
f011b9ee:	74 17                	je     f011ba07 <test_kmalloc_bestfit2+0x36f>
f011b9f0:	83 ec 04             	sub    $0x4,%esp
f011b9f3:	68 c8 96 13 f0       	push   $0xf01396c8
f011b9f8:	68 59 02 00 00       	push   $0x259
f011b9fd:	68 ae 92 13 f0       	push   $0xf01392ae
f011ba02:	e8 a9 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba07:	e8 78 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba0c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ba0f:	74 17                	je     f011ba28 <test_kmalloc_bestfit2+0x390>
f011ba11:	83 ec 04             	sub    $0x4,%esp
f011ba14:	68 c8 92 13 f0       	push   $0xf01392c8
f011ba19:	68 5a 02 00 00       	push   $0x25a
f011ba1e:	68 ae 92 13 f0       	push   $0xf01392ae
f011ba23:	e8 88 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ba28:	e8 b1 0f ff ff       	call   f010c9de <sys_calculate_free_frames>
f011ba2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ba30:	29 c2                	sub    %eax,%edx
f011ba32:	89 d0                	mov    %edx,%eax
f011ba34:	83 f8 01             	cmp    $0x1,%eax
f011ba37:	74 17                	je     f011ba50 <test_kmalloc_bestfit2+0x3b8>
f011ba39:	83 ec 04             	sub    $0x4,%esp
f011ba3c:	68 f8 96 13 f0       	push   $0xf01396f8
f011ba41:	68 5b 02 00 00       	push   $0x25b
f011ba46:	68 ae 92 13 f0       	push   $0xf01392ae
f011ba4b:	e8 60 47 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba50:	e8 89 0f ff ff       	call   f010c9de <sys_calculate_free_frames>
f011ba55:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba58:	e8 27 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ba60:	83 ec 0c             	sub    $0xc,%esp
f011ba63:	68 00 08 00 00       	push   $0x800
f011ba68:	e8 f2 c4 fe ff       	call   f0107f5f <kmalloc>
f011ba6d:	83 c4 10             	add    $0x10,%esp
f011ba70:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ba76:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ba7c:	89 c1                	mov    %eax,%ecx
f011ba7e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ba85:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ba8a:	0f b6 d0             	movzbl %al,%edx
f011ba8d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ba90:	01 d0                	add    %edx,%eax
f011ba92:	48                   	dec    %eax
f011ba93:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ba96:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba99:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba9e:	f7 75 ac             	divl   -0x54(%ebp)
f011baa1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011baa4:	29 d0                	sub    %edx,%eax
f011baa6:	89 c3                	mov    %eax,%ebx
f011baa8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011baaf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bab4:	0f b6 c0             	movzbl %al,%eax
f011bab7:	c1 e0 04             	shl    $0x4,%eax
f011baba:	89 c2                	mov    %eax,%edx
f011babc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011babf:	01 d0                	add    %edx,%eax
f011bac1:	48                   	dec    %eax
f011bac2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bac5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bac8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bacd:	f7 75 a4             	divl   -0x5c(%ebp)
f011bad0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bad3:	29 d0                	sub    %edx,%eax
f011bad5:	01 d8                	add    %ebx,%eax
f011bad7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011badc:	39 c1                	cmp    %eax,%ecx
f011bade:	74 17                	je     f011baf7 <test_kmalloc_bestfit2+0x45f>
f011bae0:	83 ec 04             	sub    $0x4,%esp
f011bae3:	68 c8 96 13 f0       	push   $0xf01396c8
f011bae8:	68 61 02 00 00       	push   $0x261
f011baed:	68 ae 92 13 f0       	push   $0xf01392ae
f011baf2:	e8 b9 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011baf7:	e8 88 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bafc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011baff:	74 17                	je     f011bb18 <test_kmalloc_bestfit2+0x480>
f011bb01:	83 ec 04             	sub    $0x4,%esp
f011bb04:	68 c8 92 13 f0       	push   $0xf01392c8
f011bb09:	68 62 02 00 00       	push   $0x262
f011bb0e:	68 ae 92 13 f0       	push   $0xf01392ae
f011bb13:	e8 98 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bb18:	e8 c1 0e ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bb1d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bb20:	29 c2                	sub    %eax,%edx
f011bb22:	89 d0                	mov    %edx,%eax
f011bb24:	83 f8 01             	cmp    $0x1,%eax
f011bb27:	74 17                	je     f011bb40 <test_kmalloc_bestfit2+0x4a8>
f011bb29:	83 ec 04             	sub    $0x4,%esp
f011bb2c:	68 f8 96 13 f0       	push   $0xf01396f8
f011bb31:	68 63 02 00 00       	push   $0x263
f011bb36:	68 ae 92 13 f0       	push   $0xf01392ae
f011bb3b:	e8 70 46 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bb40:	e8 99 0e ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bb45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb48:	e8 37 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb4d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011bb50:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bb56:	83 ec 0c             	sub    $0xc,%esp
f011bb59:	50                   	push   %eax
f011bb5a:	e8 1a c4 fe ff       	call   f0107f79 <kfree>
f011bb5f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb62:	e8 1d 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb67:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb6a:	74 17                	je     f011bb83 <test_kmalloc_bestfit2+0x4eb>
f011bb6c:	83 ec 04             	sub    $0x4,%esp
f011bb6f:	68 c8 92 13 f0       	push   $0xf01392c8
f011bb74:	68 69 02 00 00       	push   $0x269
f011bb79:	68 ae 92 13 f0       	push   $0xf01392ae
f011bb7e:	e8 2d 46 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bb83:	e8 56 0e ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bb88:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bb8b:	83 f8 01             	cmp    $0x1,%eax
f011bb8e:	74 17                	je     f011bba7 <test_kmalloc_bestfit2+0x50f>
f011bb90:	83 ec 04             	sub    $0x4,%esp
f011bb93:	68 f8 96 13 f0       	push   $0xf01396f8
f011bb98:	68 6a 02 00 00       	push   $0x26a
f011bb9d:	68 ae 92 13 f0       	push   $0xf01392ae
f011bba2:	e8 09 46 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bba7:	e8 32 0e ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bbac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbaf:	e8 d0 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bbb4:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bbb7:	83 ec 0c             	sub    $0xc,%esp
f011bbba:	68 00 1c 00 00       	push   $0x1c00
f011bbbf:	e8 9b c3 fe ff       	call   f0107f5f <kmalloc>
f011bbc4:	83 c4 10             	add    $0x10,%esp
f011bbc7:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bbcd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bbd3:	89 c1                	mov    %eax,%ecx
f011bbd5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bbdc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bbe1:	0f b6 d0             	movzbl %al,%edx
f011bbe4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bbe7:	01 d0                	add    %edx,%eax
f011bbe9:	48                   	dec    %eax
f011bbea:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bbed:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bbf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbf5:	f7 75 9c             	divl   -0x64(%ebp)
f011bbf8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bbfb:	29 d0                	sub    %edx,%eax
f011bbfd:	89 c3                	mov    %eax,%ebx
f011bbff:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bc06:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bc0b:	0f b6 c0             	movzbl %al,%eax
f011bc0e:	c1 e0 04             	shl    $0x4,%eax
f011bc11:	89 c2                	mov    %eax,%edx
f011bc13:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bc16:	01 d0                	add    %edx,%eax
f011bc18:	48                   	dec    %eax
f011bc19:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bc1c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bc1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc24:	f7 75 94             	divl   -0x6c(%ebp)
f011bc27:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bc2a:	29 d0                	sub    %edx,%eax
f011bc2c:	01 d8                	add    %ebx,%eax
f011bc2e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bc33:	39 c1                	cmp    %eax,%ecx
f011bc35:	74 17                	je     f011bc4e <test_kmalloc_bestfit2+0x5b6>
f011bc37:	83 ec 04             	sub    $0x4,%esp
f011bc3a:	68 c8 96 13 f0       	push   $0xf01396c8
f011bc3f:	68 70 02 00 00       	push   $0x270
f011bc44:	68 ae 92 13 f0       	push   $0xf01392ae
f011bc49:	e8 62 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc4e:	e8 31 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bc53:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc56:	74 17                	je     f011bc6f <test_kmalloc_bestfit2+0x5d7>
f011bc58:	83 ec 04             	sub    $0x4,%esp
f011bc5b:	68 c8 92 13 f0       	push   $0xf01392c8
f011bc60:	68 71 02 00 00       	push   $0x271
f011bc65:	68 ae 92 13 f0       	push   $0xf01392ae
f011bc6a:	e8 41 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bc6f:	e8 6a 0d ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bc74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bc77:	29 c2                	sub    %eax,%edx
f011bc79:	89 d0                	mov    %edx,%eax
f011bc7b:	83 f8 02             	cmp    $0x2,%eax
f011bc7e:	74 17                	je     f011bc97 <test_kmalloc_bestfit2+0x5ff>
f011bc80:	83 ec 04             	sub    $0x4,%esp
f011bc83:	68 f8 96 13 f0       	push   $0xf01396f8
f011bc88:	68 72 02 00 00       	push   $0x272
f011bc8d:	68 ae 92 13 f0       	push   $0xf01392ae
f011bc92:	e8 19 45 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc97:	e8 42 0d ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bc9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc9f:	e8 e0 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bca4:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011bca7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bcad:	83 ec 0c             	sub    $0xc,%esp
f011bcb0:	50                   	push   %eax
f011bcb1:	e8 c3 c2 fe ff       	call   f0107f79 <kfree>
f011bcb6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcb9:	e8 c6 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bcbe:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bcc1:	74 17                	je     f011bcda <test_kmalloc_bestfit2+0x642>
f011bcc3:	83 ec 04             	sub    $0x4,%esp
f011bcc6:	68 c8 92 13 f0       	push   $0xf01392c8
f011bccb:	68 78 02 00 00       	push   $0x278
f011bcd0:	68 ae 92 13 f0       	push   $0xf01392ae
f011bcd5:	e8 d6 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bcda:	e8 ff 0c ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bcdf:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bce2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bce7:	74 17                	je     f011bd00 <test_kmalloc_bestfit2+0x668>
f011bce9:	83 ec 04             	sub    $0x4,%esp
f011bcec:	68 7c 95 13 f0       	push   $0xf013957c
f011bcf1:	68 79 02 00 00       	push   $0x279
f011bcf6:	68 ae 92 13 f0       	push   $0xf01392ae
f011bcfb:	e8 b0 44 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd00:	e8 d9 0c ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bd05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd08:	e8 77 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bd0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bd10:	83 ec 0c             	sub    $0xc,%esp
f011bd13:	68 00 fc 2f 00       	push   $0x2ffc00
f011bd18:	e8 42 c2 fe ff       	call   f0107f5f <kmalloc>
f011bd1d:	83 c4 10             	add    $0x10,%esp
f011bd20:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd26:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bd2c:	89 c1                	mov    %eax,%ecx
f011bd2e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bd35:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bd3a:	0f b6 d0             	movzbl %al,%edx
f011bd3d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bd40:	01 d0                	add    %edx,%eax
f011bd42:	48                   	dec    %eax
f011bd43:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bd46:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bd49:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd4e:	f7 75 8c             	divl   -0x74(%ebp)
f011bd51:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bd54:	29 d0                	sub    %edx,%eax
f011bd56:	89 c3                	mov    %eax,%ebx
f011bd58:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bd5f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bd64:	0f b6 c0             	movzbl %al,%eax
f011bd67:	c1 e0 04             	shl    $0x4,%eax
f011bd6a:	89 c2                	mov    %eax,%edx
f011bd6c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bd6f:	01 d0                	add    %edx,%eax
f011bd71:	48                   	dec    %eax
f011bd72:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bd75:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bd78:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd7d:	f7 75 84             	divl   -0x7c(%ebp)
f011bd80:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bd83:	29 d0                	sub    %edx,%eax
f011bd85:	01 d8                	add    %ebx,%eax
f011bd87:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bd8c:	39 c1                	cmp    %eax,%ecx
f011bd8e:	74 17                	je     f011bda7 <test_kmalloc_bestfit2+0x70f>
f011bd90:	83 ec 04             	sub    $0x4,%esp
f011bd93:	68 c8 96 13 f0       	push   $0xf01396c8
f011bd98:	68 7f 02 00 00       	push   $0x27f
f011bd9d:	68 ae 92 13 f0       	push   $0xf01392ae
f011bda2:	e8 09 44 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bda7:	e8 d8 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bdac:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bdaf:	74 17                	je     f011bdc8 <test_kmalloc_bestfit2+0x730>
f011bdb1:	83 ec 04             	sub    $0x4,%esp
f011bdb4:	68 c8 92 13 f0       	push   $0xf01392c8
f011bdb9:	68 80 02 00 00       	push   $0x280
f011bdbe:	68 ae 92 13 f0       	push   $0xf01392ae
f011bdc3:	e8 e8 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bdc8:	e8 11 0c ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bdcd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bdd0:	29 c2                	sub    %eax,%edx
f011bdd2:	89 d0                	mov    %edx,%eax
f011bdd4:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bdd9:	74 17                	je     f011bdf2 <test_kmalloc_bestfit2+0x75a>
f011bddb:	83 ec 04             	sub    $0x4,%esp
f011bdde:	68 f8 96 13 f0       	push   $0xf01396f8
f011bde3:	68 81 02 00 00       	push   $0x281
f011bde8:	68 ae 92 13 f0       	push   $0xf01392ae
f011bded:	e8 be 43 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdf2:	e8 e7 0b ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bdf7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdfa:	e8 85 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bdff:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011be02:	83 ec 0c             	sub    $0xc,%esp
f011be05:	68 00 18 20 00       	push   $0x201800
f011be0a:	e8 50 c1 fe ff       	call   f0107f5f <kmalloc>
f011be0f:	83 c4 10             	add    $0x10,%esp
f011be12:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011be18:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011be1e:	89 c1                	mov    %eax,%ecx
f011be20:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011be27:	10 00 00 
f011be2a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011be2f:	0f b6 d0             	movzbl %al,%edx
f011be32:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011be38:	01 d0                	add    %edx,%eax
f011be3a:	48                   	dec    %eax
f011be3b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011be41:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be47:	ba 00 00 00 00       	mov    $0x0,%edx
f011be4c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011be52:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be58:	29 d0                	sub    %edx,%eax
f011be5a:	89 c3                	mov    %eax,%ebx
f011be5c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011be63:	10 00 00 
f011be66:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011be6b:	0f b6 c0             	movzbl %al,%eax
f011be6e:	c1 e0 04             	shl    $0x4,%eax
f011be71:	89 c2                	mov    %eax,%edx
f011be73:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011be79:	01 d0                	add    %edx,%eax
f011be7b:	48                   	dec    %eax
f011be7c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011be82:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011be88:	ba 00 00 00 00       	mov    $0x0,%edx
f011be8d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011be93:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011be99:	29 d0                	sub    %edx,%eax
f011be9b:	01 d8                	add    %ebx,%eax
f011be9d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bea2:	39 c1                	cmp    %eax,%ecx
f011bea4:	74 17                	je     f011bebd <test_kmalloc_bestfit2+0x825>
f011bea6:	83 ec 04             	sub    $0x4,%esp
f011bea9:	68 c8 96 13 f0       	push   $0xf01396c8
f011beae:	68 87 02 00 00       	push   $0x287
f011beb3:	68 ae 92 13 f0       	push   $0xf01392ae
f011beb8:	e8 f3 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bebd:	e8 c2 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bec2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bec5:	74 17                	je     f011bede <test_kmalloc_bestfit2+0x846>
f011bec7:	83 ec 04             	sub    $0x4,%esp
f011beca:	68 c8 92 13 f0       	push   $0xf01392c8
f011becf:	68 88 02 00 00       	push   $0x288
f011bed4:	68 ae 92 13 f0       	push   $0xf01392ae
f011bed9:	e8 d2 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bede:	e8 fb 0a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bee6:	29 c2                	sub    %eax,%edx
f011bee8:	89 d0                	mov    %edx,%eax
f011beea:	3d 02 02 00 00       	cmp    $0x202,%eax
f011beef:	74 17                	je     f011bf08 <test_kmalloc_bestfit2+0x870>
f011bef1:	83 ec 04             	sub    $0x4,%esp
f011bef4:	68 f8 96 13 f0       	push   $0xf01396f8
f011bef9:	68 89 02 00 00       	push   $0x289
f011befe:	68 ae 92 13 f0       	push   $0xf01392ae
f011bf03:	e8 a8 42 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf08:	e8 d1 0a ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bf0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf10:	e8 6f 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf15:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bf18:	83 ec 0c             	sub    $0xc,%esp
f011bf1b:	68 00 fc 4f 00       	push   $0x4ffc00
f011bf20:	e8 3a c0 fe ff       	call   f0107f5f <kmalloc>
f011bf25:	83 c4 10             	add    $0x10,%esp
f011bf28:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bf2e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bf34:	89 c1                	mov    %eax,%ecx
f011bf36:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bf3d:	10 00 00 
f011bf40:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bf45:	0f b6 d0             	movzbl %al,%edx
f011bf48:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bf4e:	01 d0                	add    %edx,%eax
f011bf50:	48                   	dec    %eax
f011bf51:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bf57:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf62:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bf68:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf6e:	29 d0                	sub    %edx,%eax
f011bf70:	89 c3                	mov    %eax,%ebx
f011bf72:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bf79:	10 00 00 
f011bf7c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011bf81:	0f b6 c0             	movzbl %al,%eax
f011bf84:	c1 e0 04             	shl    $0x4,%eax
f011bf87:	89 c2                	mov    %eax,%edx
f011bf89:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bf8f:	01 d0                	add    %edx,%eax
f011bf91:	48                   	dec    %eax
f011bf92:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bf98:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bf9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfa3:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bfa9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bfaf:	29 d0                	sub    %edx,%eax
f011bfb1:	01 d8                	add    %ebx,%eax
f011bfb3:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bfb8:	39 c1                	cmp    %eax,%ecx
f011bfba:	74 17                	je     f011bfd3 <test_kmalloc_bestfit2+0x93b>
f011bfbc:	83 ec 04             	sub    $0x4,%esp
f011bfbf:	68 c8 96 13 f0       	push   $0xf01396c8
f011bfc4:	68 8f 02 00 00       	push   $0x28f
f011bfc9:	68 ae 92 13 f0       	push   $0xf01392ae
f011bfce:	e8 dd 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfd3:	e8 ac 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bfd8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bfdb:	74 17                	je     f011bff4 <test_kmalloc_bestfit2+0x95c>
f011bfdd:	83 ec 04             	sub    $0x4,%esp
f011bfe0:	68 c8 92 13 f0       	push   $0xf01392c8
f011bfe5:	68 90 02 00 00       	push   $0x290
f011bfea:	68 ae 92 13 f0       	push   $0xf01392ae
f011bfef:	e8 bc 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011bff4:	e8 e5 09 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011bff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bffc:	29 c2                	sub    %eax,%edx
f011bffe:	89 d0                	mov    %edx,%eax
f011c000:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c005:	74 17                	je     f011c01e <test_kmalloc_bestfit2+0x986>
f011c007:	83 ec 04             	sub    $0x4,%esp
f011c00a:	68 f8 96 13 f0       	push   $0xf01396f8
f011c00f:	68 91 02 00 00       	push   $0x291
f011c014:	68 ae 92 13 f0       	push   $0xf01392ae
f011c019:	e8 92 41 fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c01e:	e8 bb 09 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c023:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c026:	e8 59 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c02b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011c02e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c034:	83 ec 0c             	sub    $0xc,%esp
f011c037:	50                   	push   %eax
f011c038:	e8 3c bf fe ff       	call   f0107f79 <kfree>
f011c03d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c040:	e8 3f 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c045:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c048:	74 17                	je     f011c061 <test_kmalloc_bestfit2+0x9c9>
f011c04a:	83 ec 04             	sub    $0x4,%esp
f011c04d:	68 c8 92 13 f0       	push   $0xf01392c8
f011c052:	68 97 02 00 00       	push   $0x297
f011c057:	68 ae 92 13 f0       	push   $0xf01392ae
f011c05c:	e8 4f 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c061:	e8 78 09 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c066:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c069:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c06e:	74 17                	je     f011c087 <test_kmalloc_bestfit2+0x9ef>
f011c070:	83 ec 04             	sub    $0x4,%esp
f011c073:	68 7c 95 13 f0       	push   $0xf013957c
f011c078:	68 98 02 00 00       	push   $0x298
f011c07d:	68 ae 92 13 f0       	push   $0xf01392ae
f011c082:	e8 29 41 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c087:	e8 52 09 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c08c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c08f:	e8 f0 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c094:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c097:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c09d:	83 ec 0c             	sub    $0xc,%esp
f011c0a0:	50                   	push   %eax
f011c0a1:	e8 d3 be fe ff       	call   f0107f79 <kfree>
f011c0a6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0a9:	e8 d6 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c0ae:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c0b1:	74 17                	je     f011c0ca <test_kmalloc_bestfit2+0xa32>
f011c0b3:	83 ec 04             	sub    $0x4,%esp
f011c0b6:	68 c8 92 13 f0       	push   $0xf01392c8
f011c0bb:	68 9e 02 00 00       	push   $0x29e
f011c0c0:	68 ae 92 13 f0       	push   $0xf01392ae
f011c0c5:	e8 e6 40 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c0ca:	e8 0f 09 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c0cf:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c0d2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c0d7:	74 17                	je     f011c0f0 <test_kmalloc_bestfit2+0xa58>
f011c0d9:	83 ec 04             	sub    $0x4,%esp
f011c0dc:	68 a8 97 13 f0       	push   $0xf01397a8
f011c0e1:	68 9f 02 00 00       	push   $0x29f
f011c0e6:	68 ae 92 13 f0       	push   $0xf01392ae
f011c0eb:	e8 c0 40 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0f0:	e8 e9 08 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c0f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0f8:	e8 87 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c0fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c100:	83 ec 0c             	sub    $0xc,%esp
f011c103:	68 00 fc 1f 00       	push   $0x1ffc00
f011c108:	e8 52 be fe ff       	call   f0107f5f <kmalloc>
f011c10d:	83 c4 10             	add    $0x10,%esp
f011c110:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c116:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c11c:	89 c1                	mov    %eax,%ecx
f011c11e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c125:	10 00 00 
f011c128:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c12d:	0f b6 d0             	movzbl %al,%edx
f011c130:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c136:	01 d0                	add    %edx,%eax
f011c138:	48                   	dec    %eax
f011c139:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c13f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c145:	ba 00 00 00 00       	mov    $0x0,%edx
f011c14a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c150:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c156:	29 d0                	sub    %edx,%eax
f011c158:	89 c3                	mov    %eax,%ebx
f011c15a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c161:	10 00 00 
f011c164:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c169:	0f b6 c0             	movzbl %al,%eax
f011c16c:	c1 e0 04             	shl    $0x4,%eax
f011c16f:	89 c2                	mov    %eax,%edx
f011c171:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c177:	01 d0                	add    %edx,%eax
f011c179:	48                   	dec    %eax
f011c17a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c180:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c186:	ba 00 00 00 00       	mov    $0x0,%edx
f011c18b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c191:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c197:	29 d0                	sub    %edx,%eax
f011c199:	01 d8                	add    %ebx,%eax
f011c19b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c1a0:	39 c1                	cmp    %eax,%ecx
f011c1a2:	74 17                	je     f011c1bb <test_kmalloc_bestfit2+0xb23>
f011c1a4:	83 ec 04             	sub    $0x4,%esp
f011c1a7:	68 c8 96 13 f0       	push   $0xf01396c8
f011c1ac:	68 a5 02 00 00       	push   $0x2a5
f011c1b1:	68 ae 92 13 f0       	push   $0xf01392ae
f011c1b6:	e8 f5 3f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1bb:	e8 c4 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c1c0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1c3:	74 17                	je     f011c1dc <test_kmalloc_bestfit2+0xb44>
f011c1c5:	83 ec 04             	sub    $0x4,%esp
f011c1c8:	68 c8 92 13 f0       	push   $0xf01392c8
f011c1cd:	68 a6 02 00 00       	push   $0x2a6
f011c1d2:	68 ae 92 13 f0       	push   $0xf01392ae
f011c1d7:	e8 d4 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c1dc:	e8 fd 07 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c1e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c1e4:	29 c2                	sub    %eax,%edx
f011c1e6:	89 d0                	mov    %edx,%eax
f011c1e8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c1ed:	74 17                	je     f011c206 <test_kmalloc_bestfit2+0xb6e>
f011c1ef:	83 ec 04             	sub    $0x4,%esp
f011c1f2:	68 e6 97 13 f0       	push   $0xf01397e6
f011c1f7:	68 a7 02 00 00       	push   $0x2a7
f011c1fc:	68 ae 92 13 f0       	push   $0xf01392ae
f011c201:	e8 aa 3f fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c206:	e8 d3 07 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c20b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c20e:	e8 71 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c213:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c216:	83 ec 0c             	sub    $0xc,%esp
f011c219:	68 00 18 00 00       	push   $0x1800
f011c21e:	e8 3c bd fe ff       	call   f0107f5f <kmalloc>
f011c223:	83 c4 10             	add    $0x10,%esp
f011c226:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c22c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c232:	89 c1                	mov    %eax,%ecx
f011c234:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c23b:	10 00 00 
f011c23e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c243:	0f b6 d0             	movzbl %al,%edx
f011c246:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c24c:	01 d0                	add    %edx,%eax
f011c24e:	48                   	dec    %eax
f011c24f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c255:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c25b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c260:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c266:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c26c:	29 d0                	sub    %edx,%eax
f011c26e:	89 c3                	mov    %eax,%ebx
f011c270:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c277:	10 00 00 
f011c27a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c27f:	0f b6 c0             	movzbl %al,%eax
f011c282:	c1 e0 04             	shl    $0x4,%eax
f011c285:	89 c2                	mov    %eax,%edx
f011c287:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c28d:	01 d0                	add    %edx,%eax
f011c28f:	48                   	dec    %eax
f011c290:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c296:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c29c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2a1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c2a7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c2ad:	29 d0                	sub    %edx,%eax
f011c2af:	01 d8                	add    %ebx,%eax
f011c2b1:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c2b6:	39 c1                	cmp    %eax,%ecx
f011c2b8:	74 17                	je     f011c2d1 <test_kmalloc_bestfit2+0xc39>
f011c2ba:	83 ec 04             	sub    $0x4,%esp
f011c2bd:	68 c8 96 13 f0       	push   $0xf01396c8
f011c2c2:	68 ad 02 00 00       	push   $0x2ad
f011c2c7:	68 ae 92 13 f0       	push   $0xf01392ae
f011c2cc:	e8 df 3e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2d1:	e8 ae 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c2d6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c2d9:	74 17                	je     f011c2f2 <test_kmalloc_bestfit2+0xc5a>
f011c2db:	83 ec 04             	sub    $0x4,%esp
f011c2de:	68 c8 92 13 f0       	push   $0xf01392c8
f011c2e3:	68 ae 02 00 00       	push   $0x2ae
f011c2e8:	68 ae 92 13 f0       	push   $0xf01392ae
f011c2ed:	e8 be 3e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c2f2:	e8 e7 06 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c2f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c2fa:	29 c2                	sub    %eax,%edx
f011c2fc:	89 d0                	mov    %edx,%eax
f011c2fe:	83 f8 02             	cmp    $0x2,%eax
f011c301:	74 17                	je     f011c31a <test_kmalloc_bestfit2+0xc82>
f011c303:	83 ec 04             	sub    $0x4,%esp
f011c306:	68 e6 97 13 f0       	push   $0xf01397e6
f011c30b:	68 af 02 00 00       	push   $0x2af
f011c310:	68 ae 92 13 f0       	push   $0xf01392ae
f011c315:	e8 96 3e fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c31a:	e8 bf 06 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c31f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c322:	e8 5d 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c327:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c32a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c330:	83 ec 0c             	sub    $0xc,%esp
f011c333:	50                   	push   %eax
f011c334:	e8 40 bc fe ff       	call   f0107f79 <kfree>
f011c339:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c33c:	e8 43 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c341:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c344:	74 17                	je     f011c35d <test_kmalloc_bestfit2+0xcc5>
f011c346:	83 ec 04             	sub    $0x4,%esp
f011c349:	68 c8 92 13 f0       	push   $0xf01392c8
f011c34e:	68 b5 02 00 00       	push   $0x2b5
f011c353:	68 ae 92 13 f0       	push   $0xf01392ae
f011c358:	e8 53 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c35d:	e8 7c 06 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c362:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c365:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c36a:	74 17                	je     f011c383 <test_kmalloc_bestfit2+0xceb>
f011c36c:	83 ec 04             	sub    $0x4,%esp
f011c36f:	68 a8 97 13 f0       	push   $0xf01397a8
f011c374:	68 b6 02 00 00       	push   $0x2b6
f011c379:	68 ae 92 13 f0       	push   $0xf01392ae
f011c37e:	e8 2d 3e fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c383:	e8 56 06 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c388:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c38b:	e8 f4 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c390:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c393:	83 ec 0c             	sub    $0xc,%esp
f011c396:	68 00 fc 2f 00       	push   $0x2ffc00
f011c39b:	e8 bf bb fe ff       	call   f0107f5f <kmalloc>
f011c3a0:	83 c4 10             	add    $0x10,%esp
f011c3a3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3a9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c3af:	89 c1                	mov    %eax,%ecx
f011c3b1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c3b8:	10 00 00 
f011c3bb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c3c0:	0f b6 d0             	movzbl %al,%edx
f011c3c3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c3c9:	01 d0                	add    %edx,%eax
f011c3cb:	48                   	dec    %eax
f011c3cc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c3d2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3dd:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c3e3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3e9:	29 d0                	sub    %edx,%eax
f011c3eb:	89 c3                	mov    %eax,%ebx
f011c3ed:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c3f4:	10 00 00 
f011c3f7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c3fc:	0f b6 c0             	movzbl %al,%eax
f011c3ff:	c1 e0 04             	shl    $0x4,%eax
f011c402:	89 c2                	mov    %eax,%edx
f011c404:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c40a:	01 d0                	add    %edx,%eax
f011c40c:	48                   	dec    %eax
f011c40d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c413:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c419:	ba 00 00 00 00       	mov    $0x0,%edx
f011c41e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c424:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c42a:	29 d0                	sub    %edx,%eax
f011c42c:	01 d8                	add    %ebx,%eax
f011c42e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c433:	39 c1                	cmp    %eax,%ecx
f011c435:	74 17                	je     f011c44e <test_kmalloc_bestfit2+0xdb6>
f011c437:	83 ec 04             	sub    $0x4,%esp
f011c43a:	68 c8 96 13 f0       	push   $0xf01396c8
f011c43f:	68 bc 02 00 00       	push   $0x2bc
f011c444:	68 ae 92 13 f0       	push   $0xf01392ae
f011c449:	e8 62 3d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c44e:	e8 31 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c453:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c456:	74 17                	je     f011c46f <test_kmalloc_bestfit2+0xdd7>
f011c458:	83 ec 04             	sub    $0x4,%esp
f011c45b:	68 c8 92 13 f0       	push   $0xf01392c8
f011c460:	68 bd 02 00 00       	push   $0x2bd
f011c465:	68 ae 92 13 f0       	push   $0xf01392ae
f011c46a:	e8 41 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c46f:	e8 6a 05 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c474:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c477:	29 c2                	sub    %eax,%edx
f011c479:	89 d0                	mov    %edx,%eax
f011c47b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c480:	74 17                	je     f011c499 <test_kmalloc_bestfit2+0xe01>
f011c482:	83 ec 04             	sub    $0x4,%esp
f011c485:	68 a8 97 13 f0       	push   $0xf01397a8
f011c48a:	68 be 02 00 00       	push   $0x2be
f011c48f:	68 ae 92 13 f0       	push   $0xf01392ae
f011c494:	e8 17 3d fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c499:	e8 40 05 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c49e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c4a1:	e8 de 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c4a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c4a9:	83 ec 0c             	sub    $0xc,%esp
f011c4ac:	68 00 fc 3f 00       	push   $0x3ffc00
f011c4b1:	e8 a9 ba fe ff       	call   f0107f5f <kmalloc>
f011c4b6:	83 c4 10             	add    $0x10,%esp
f011c4b9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c4bf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c4c5:	89 c1                	mov    %eax,%ecx
f011c4c7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4ce:	10 00 00 
f011c4d1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c4d6:	0f b6 d0             	movzbl %al,%edx
f011c4d9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4df:	01 d0                	add    %edx,%eax
f011c4e1:	48                   	dec    %eax
f011c4e2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c4e8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4f3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c4f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4ff:	29 d0                	sub    %edx,%eax
f011c501:	89 c3                	mov    %eax,%ebx
f011c503:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c50a:	10 00 00 
f011c50d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c512:	0f b6 c0             	movzbl %al,%eax
f011c515:	c1 e0 04             	shl    $0x4,%eax
f011c518:	89 c2                	mov    %eax,%edx
f011c51a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c520:	01 d0                	add    %edx,%eax
f011c522:	48                   	dec    %eax
f011c523:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c529:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c52f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c534:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c53a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c540:	29 d0                	sub    %edx,%eax
f011c542:	01 d8                	add    %ebx,%eax
f011c544:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c549:	39 c1                	cmp    %eax,%ecx
f011c54b:	74 17                	je     f011c564 <test_kmalloc_bestfit2+0xecc>
f011c54d:	83 ec 04             	sub    $0x4,%esp
f011c550:	68 c8 96 13 f0       	push   $0xf01396c8
f011c555:	68 c4 02 00 00       	push   $0x2c4
f011c55a:	68 ae 92 13 f0       	push   $0xf01392ae
f011c55f:	e8 4c 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c564:	e8 1b 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c569:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c56c:	74 17                	je     f011c585 <test_kmalloc_bestfit2+0xeed>
f011c56e:	83 ec 04             	sub    $0x4,%esp
f011c571:	68 c8 92 13 f0       	push   $0xf01392c8
f011c576:	68 c5 02 00 00       	push   $0x2c5
f011c57b:	68 ae 92 13 f0       	push   $0xf01392ae
f011c580:	e8 2b 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c585:	e8 54 04 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c58a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c58d:	29 c2                	sub    %eax,%edx
f011c58f:	89 d0                	mov    %edx,%eax
f011c591:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c596:	74 17                	je     f011c5af <test_kmalloc_bestfit2+0xf17>
f011c598:	83 ec 04             	sub    $0x4,%esp
f011c59b:	68 a8 97 13 f0       	push   $0xf01397a8
f011c5a0:	68 c6 02 00 00       	push   $0x2c6
f011c5a5:	68 ae 92 13 f0       	push   $0xf01392ae
f011c5aa:	e8 01 3c fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c5af:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c5b6:	10 00 00 
f011c5b9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c5be:	0f b6 d0             	movzbl %al,%edx
f011c5c1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c5c7:	01 d0                	add    %edx,%eax
f011c5c9:	48                   	dec    %eax
f011c5ca:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c5d0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c5d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5db:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c5e1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c5e7:	29 d0                	sub    %edx,%eax
f011c5e9:	89 c1                	mov    %eax,%ecx
f011c5eb:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c5f2:	10 00 00 
f011c5f5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c5fa:	0f b6 c0             	movzbl %al,%eax
f011c5fd:	c1 e0 04             	shl    $0x4,%eax
f011c600:	89 c2                	mov    %eax,%edx
f011c602:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c608:	01 d0                	add    %edx,%eax
f011c60a:	48                   	dec    %eax
f011c60b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c611:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c617:	ba 00 00 00 00       	mov    $0x0,%edx
f011c61c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c622:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c628:	29 d0                	sub    %edx,%eax
f011c62a:	01 c8                	add    %ecx,%eax
f011c62c:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c631:	29 c2                	sub    %eax,%edx
f011c633:	89 d0                	mov    %edx,%eax
f011c635:	83 ec 0c             	sub    $0xc,%esp
f011c638:	50                   	push   %eax
f011c639:	e8 21 b9 fe ff       	call   f0107f5f <kmalloc>
f011c63e:	83 c4 10             	add    $0x10,%esp
f011c641:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c647:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c64d:	85 c0                	test   %eax,%eax
f011c64f:	74 17                	je     f011c668 <test_kmalloc_bestfit2+0xfd0>
f011c651:	83 ec 04             	sub    $0x4,%esp
f011c654:	68 f8 97 13 f0       	push   $0xf01397f8
f011c659:	68 ce 02 00 00       	push   $0x2ce
f011c65e:	68 ae 92 13 f0       	push   $0xf01392ae
f011c663:	e8 48 3b fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c668:	83 ec 0c             	sub    $0xc,%esp
f011c66b:	68 5c 98 13 f0       	push   $0xf013985c
f011c670:	e8 bc 47 fe ff       	call   f0100e31 <cprintf>
f011c675:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c678:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c67d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c680:	5b                   	pop    %ebx
f011c681:	5f                   	pop    %edi
f011c682:	5d                   	pop    %ebp
f011c683:	c3                   	ret    

f011c684 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c684:	55                   	push   %ebp
f011c685:	89 e5                	mov    %esp,%ebp
f011c687:	57                   	push   %edi
f011c688:	53                   	push   %ebx
f011c689:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c68f:	83 ec 0c             	sub    $0xc,%esp
f011c692:	68 f0 91 13 f0       	push   $0xf01391f0
f011c697:	e8 95 47 fe ff       	call   f0100e31 <cprintf>
f011c69c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c69f:	83 ec 0c             	sub    $0xc,%esp
f011c6a2:	68 20 92 13 f0       	push   $0xf0139220
f011c6a7:	e8 85 47 fe ff       	call   f0100e31 <cprintf>
f011c6ac:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c6af:	83 ec 0c             	sub    $0xc,%esp
f011c6b2:	68 f0 91 13 f0       	push   $0xf01391f0
f011c6b7:	e8 75 47 fe ff       	call   f0100e31 <cprintf>
f011c6bc:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c6bf:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c6c5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c6ca:	b8 00 00 00 00       	mov    $0x0,%eax
f011c6cf:	89 d7                	mov    %edx,%edi
f011c6d1:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6d3:	e8 06 03 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c6d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6db:	e8 a4 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c6e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c6e3:	83 ec 0c             	sub    $0xc,%esp
f011c6e6:	68 00 fc 0f 00       	push   $0xffc00
f011c6eb:	e8 6f b8 fe ff       	call   f0107f5f <kmalloc>
f011c6f0:	83 c4 10             	add    $0x10,%esp
f011c6f3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c6f9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6ff:	89 c1                	mov    %eax,%ecx
f011c701:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c708:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c70d:	0f b6 d0             	movzbl %al,%edx
f011c710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c713:	01 d0                	add    %edx,%eax
f011c715:	48                   	dec    %eax
f011c716:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c71c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c721:	f7 75 ec             	divl   -0x14(%ebp)
f011c724:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c727:	29 d0                	sub    %edx,%eax
f011c729:	89 c3                	mov    %eax,%ebx
f011c72b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c732:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c737:	0f b6 c0             	movzbl %al,%eax
f011c73a:	c1 e0 04             	shl    $0x4,%eax
f011c73d:	89 c2                	mov    %eax,%edx
f011c73f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c742:	01 d0                	add    %edx,%eax
f011c744:	48                   	dec    %eax
f011c745:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c748:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c74b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c750:	f7 75 e4             	divl   -0x1c(%ebp)
f011c753:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c756:	29 d0                	sub    %edx,%eax
f011c758:	01 d8                	add    %ebx,%eax
f011c75a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c75f:	39 c1                	cmp    %eax,%ecx
f011c761:	74 17                	je     f011c77a <test_kmalloc_firstfit1+0xf6>
f011c763:	83 ec 04             	sub    $0x4,%esp
f011c766:	68 c8 96 13 f0       	push   $0xf01396c8
f011c76b:	68 e6 02 00 00       	push   $0x2e6
f011c770:	68 ae 92 13 f0       	push   $0xf01392ae
f011c775:	e8 36 3a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c77a:	e8 05 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c77f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c782:	74 17                	je     f011c79b <test_kmalloc_firstfit1+0x117>
f011c784:	83 ec 04             	sub    $0x4,%esp
f011c787:	68 c8 92 13 f0       	push   $0xf01392c8
f011c78c:	68 e7 02 00 00       	push   $0x2e7
f011c791:	68 ae 92 13 f0       	push   $0xf01392ae
f011c796:	e8 15 3a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c79b:	e8 3e 02 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c7a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7a3:	29 c2                	sub    %eax,%edx
f011c7a5:	89 d0                	mov    %edx,%eax
f011c7a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7ac:	74 17                	je     f011c7c5 <test_kmalloc_firstfit1+0x141>
f011c7ae:	83 ec 04             	sub    $0x4,%esp
f011c7b1:	68 f8 96 13 f0       	push   $0xf01396f8
f011c7b6:	68 e8 02 00 00       	push   $0x2e8
f011c7bb:	68 ae 92 13 f0       	push   $0xf01392ae
f011c7c0:	e8 eb 39 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7c5:	e8 14 02 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c7ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7cd:	e8 b2 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c7d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c7d5:	83 ec 0c             	sub    $0xc,%esp
f011c7d8:	68 00 fc 0f 00       	push   $0xffc00
f011c7dd:	e8 7d b7 fe ff       	call   f0107f5f <kmalloc>
f011c7e2:	83 c4 10             	add    $0x10,%esp
f011c7e5:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c7eb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c7f1:	89 c1                	mov    %eax,%ecx
f011c7f3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c7fa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c7ff:	0f b6 d0             	movzbl %al,%edx
f011c802:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c805:	01 d0                	add    %edx,%eax
f011c807:	48                   	dec    %eax
f011c808:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c80b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c80e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c813:	f7 75 dc             	divl   -0x24(%ebp)
f011c816:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c819:	29 d0                	sub    %edx,%eax
f011c81b:	89 c3                	mov    %eax,%ebx
f011c81d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c824:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c829:	0f b6 c0             	movzbl %al,%eax
f011c82c:	c1 e0 04             	shl    $0x4,%eax
f011c82f:	89 c2                	mov    %eax,%edx
f011c831:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c834:	01 d0                	add    %edx,%eax
f011c836:	48                   	dec    %eax
f011c837:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c83a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c83d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c842:	f7 75 d4             	divl   -0x2c(%ebp)
f011c845:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c848:	29 d0                	sub    %edx,%eax
f011c84a:	01 d8                	add    %ebx,%eax
f011c84c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c851:	39 c1                	cmp    %eax,%ecx
f011c853:	74 17                	je     f011c86c <test_kmalloc_firstfit1+0x1e8>
f011c855:	83 ec 04             	sub    $0x4,%esp
f011c858:	68 c8 96 13 f0       	push   $0xf01396c8
f011c85d:	68 ee 02 00 00       	push   $0x2ee
f011c862:	68 ae 92 13 f0       	push   $0xf01392ae
f011c867:	e8 44 39 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c86c:	e8 13 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c871:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c874:	74 17                	je     f011c88d <test_kmalloc_firstfit1+0x209>
f011c876:	83 ec 04             	sub    $0x4,%esp
f011c879:	68 c8 92 13 f0       	push   $0xf01392c8
f011c87e:	68 ef 02 00 00       	push   $0x2ef
f011c883:	68 ae 92 13 f0       	push   $0xf01392ae
f011c888:	e8 23 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c88d:	e8 4c 01 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c892:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c895:	29 c2                	sub    %eax,%edx
f011c897:	89 d0                	mov    %edx,%eax
f011c899:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c89e:	74 17                	je     f011c8b7 <test_kmalloc_firstfit1+0x233>
f011c8a0:	83 ec 04             	sub    $0x4,%esp
f011c8a3:	68 f8 96 13 f0       	push   $0xf01396f8
f011c8a8:	68 f0 02 00 00       	push   $0x2f0
f011c8ad:	68 ae 92 13 f0       	push   $0xf01392ae
f011c8b2:	e8 f9 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8b7:	e8 22 01 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c8bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8bf:	e8 c0 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c8c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c8c7:	83 ec 0c             	sub    $0xc,%esp
f011c8ca:	68 00 fc 0f 00       	push   $0xffc00
f011c8cf:	e8 8b b6 fe ff       	call   f0107f5f <kmalloc>
f011c8d4:	83 c4 10             	add    $0x10,%esp
f011c8d7:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c8dd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c8e3:	89 c1                	mov    %eax,%ecx
f011c8e5:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c8ec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c8f1:	0f b6 d0             	movzbl %al,%edx
f011c8f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c8f7:	01 d0                	add    %edx,%eax
f011c8f9:	48                   	dec    %eax
f011c8fa:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c8fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c900:	ba 00 00 00 00       	mov    $0x0,%edx
f011c905:	f7 75 cc             	divl   -0x34(%ebp)
f011c908:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c90b:	29 d0                	sub    %edx,%eax
f011c90d:	89 c3                	mov    %eax,%ebx
f011c90f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c916:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c91b:	0f b6 c0             	movzbl %al,%eax
f011c91e:	c1 e0 04             	shl    $0x4,%eax
f011c921:	89 c2                	mov    %eax,%edx
f011c923:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c926:	01 d0                	add    %edx,%eax
f011c928:	48                   	dec    %eax
f011c929:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c92c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c92f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c934:	f7 75 c4             	divl   -0x3c(%ebp)
f011c937:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c93a:	29 d0                	sub    %edx,%eax
f011c93c:	01 d8                	add    %ebx,%eax
f011c93e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c943:	39 c1                	cmp    %eax,%ecx
f011c945:	74 17                	je     f011c95e <test_kmalloc_firstfit1+0x2da>
f011c947:	83 ec 04             	sub    $0x4,%esp
f011c94a:	68 c8 96 13 f0       	push   $0xf01396c8
f011c94f:	68 f6 02 00 00       	push   $0x2f6
f011c954:	68 ae 92 13 f0       	push   $0xf01392ae
f011c959:	e8 52 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c95e:	e8 21 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c963:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c966:	74 17                	je     f011c97f <test_kmalloc_firstfit1+0x2fb>
f011c968:	83 ec 04             	sub    $0x4,%esp
f011c96b:	68 c8 92 13 f0       	push   $0xf01392c8
f011c970:	68 f7 02 00 00       	push   $0x2f7
f011c975:	68 ae 92 13 f0       	push   $0xf01392ae
f011c97a:	e8 31 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c97f:	e8 5a 00 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c984:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c987:	29 c2                	sub    %eax,%edx
f011c989:	89 d0                	mov    %edx,%eax
f011c98b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c990:	74 17                	je     f011c9a9 <test_kmalloc_firstfit1+0x325>
f011c992:	83 ec 04             	sub    $0x4,%esp
f011c995:	68 f8 96 13 f0       	push   $0xf01396f8
f011c99a:	68 f8 02 00 00       	push   $0x2f8
f011c99f:	68 ae 92 13 f0       	push   $0xf01392ae
f011c9a4:	e8 07 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9a9:	e8 30 00 ff ff       	call   f010c9de <sys_calculate_free_frames>
f011c9ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9b1:	e8 ce 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c9b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c9b9:	83 ec 0c             	sub    $0xc,%esp
f011c9bc:	68 00 fc 0f 00       	push   $0xffc00
f011c9c1:	e8 99 b5 fe ff       	call   f0107f5f <kmalloc>
f011c9c6:	83 c4 10             	add    $0x10,%esp
f011c9c9:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c9cf:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c9d5:	89 c1                	mov    %eax,%ecx
f011c9d7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c9de:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011c9e3:	0f b6 d0             	movzbl %al,%edx
f011c9e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c9e9:	01 d0                	add    %edx,%eax
f011c9eb:	48                   	dec    %eax
f011c9ec:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c9ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c9f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9f7:	f7 75 bc             	divl   -0x44(%ebp)
f011c9fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c9fd:	29 d0                	sub    %edx,%eax
f011c9ff:	89 c3                	mov    %eax,%ebx
f011ca01:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ca08:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ca0d:	0f b6 c0             	movzbl %al,%eax
f011ca10:	c1 e0 04             	shl    $0x4,%eax
f011ca13:	89 c2                	mov    %eax,%edx
f011ca15:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ca18:	01 d0                	add    %edx,%eax
f011ca1a:	48                   	dec    %eax
f011ca1b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ca1e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ca21:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca26:	f7 75 b4             	divl   -0x4c(%ebp)
f011ca29:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ca2c:	29 d0                	sub    %edx,%eax
f011ca2e:	01 d8                	add    %ebx,%eax
f011ca30:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ca35:	39 c1                	cmp    %eax,%ecx
f011ca37:	74 17                	je     f011ca50 <test_kmalloc_firstfit1+0x3cc>
f011ca39:	83 ec 04             	sub    $0x4,%esp
f011ca3c:	68 c8 96 13 f0       	push   $0xf01396c8
f011ca41:	68 fe 02 00 00       	push   $0x2fe
f011ca46:	68 ae 92 13 f0       	push   $0xf01392ae
f011ca4b:	e8 60 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca50:	e8 2f 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ca55:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca58:	74 17                	je     f011ca71 <test_kmalloc_firstfit1+0x3ed>
f011ca5a:	83 ec 04             	sub    $0x4,%esp
f011ca5d:	68 c8 92 13 f0       	push   $0xf01392c8
f011ca62:	68 ff 02 00 00       	push   $0x2ff
f011ca67:	68 ae 92 13 f0       	push   $0xf01392ae
f011ca6c:	e8 3f 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca71:	e8 68 ff fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ca76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca79:	29 c2                	sub    %eax,%edx
f011ca7b:	89 d0                	mov    %edx,%eax
f011ca7d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca82:	74 17                	je     f011ca9b <test_kmalloc_firstfit1+0x417>
f011ca84:	83 ec 04             	sub    $0x4,%esp
f011ca87:	68 f8 96 13 f0       	push   $0xf01396f8
f011ca8c:	68 00 03 00 00       	push   $0x300
f011ca91:	68 ae 92 13 f0       	push   $0xf01392ae
f011ca96:	e8 15 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca9b:	e8 3e ff fe ff       	call   f010c9de <sys_calculate_free_frames>
f011caa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caa3:	e8 dc 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011caa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011caab:	83 ec 0c             	sub    $0xc,%esp
f011caae:	68 00 fc 1f 00       	push   $0x1ffc00
f011cab3:	e8 a7 b4 fe ff       	call   f0107f5f <kmalloc>
f011cab8:	83 c4 10             	add    $0x10,%esp
f011cabb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cac1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cac7:	89 c1                	mov    %eax,%ecx
f011cac9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cad0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cad5:	0f b6 d0             	movzbl %al,%edx
f011cad8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cadb:	01 d0                	add    %edx,%eax
f011cadd:	48                   	dec    %eax
f011cade:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cae1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cae4:	ba 00 00 00 00       	mov    $0x0,%edx
f011cae9:	f7 75 ac             	divl   -0x54(%ebp)
f011caec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011caef:	29 d0                	sub    %edx,%eax
f011caf1:	89 c3                	mov    %eax,%ebx
f011caf3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cafa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011caff:	0f b6 c0             	movzbl %al,%eax
f011cb02:	c1 e0 04             	shl    $0x4,%eax
f011cb05:	89 c2                	mov    %eax,%edx
f011cb07:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cb0a:	01 d0                	add    %edx,%eax
f011cb0c:	48                   	dec    %eax
f011cb0d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cb10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cb13:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb18:	f7 75 a4             	divl   -0x5c(%ebp)
f011cb1b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cb1e:	29 d0                	sub    %edx,%eax
f011cb20:	01 d8                	add    %ebx,%eax
f011cb22:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cb27:	39 c1                	cmp    %eax,%ecx
f011cb29:	74 17                	je     f011cb42 <test_kmalloc_firstfit1+0x4be>
f011cb2b:	83 ec 04             	sub    $0x4,%esp
f011cb2e:	68 c8 96 13 f0       	push   $0xf01396c8
f011cb33:	68 06 03 00 00       	push   $0x306
f011cb38:	68 ae 92 13 f0       	push   $0xf01392ae
f011cb3d:	e8 6e 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb42:	e8 3d 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cb47:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb4a:	74 17                	je     f011cb63 <test_kmalloc_firstfit1+0x4df>
f011cb4c:	83 ec 04             	sub    $0x4,%esp
f011cb4f:	68 c8 92 13 f0       	push   $0xf01392c8
f011cb54:	68 07 03 00 00       	push   $0x307
f011cb59:	68 ae 92 13 f0       	push   $0xf01392ae
f011cb5e:	e8 4d 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb63:	e8 76 fe fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cb68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb6b:	29 c2                	sub    %eax,%edx
f011cb6d:	89 d0                	mov    %edx,%eax
f011cb6f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cb74:	74 17                	je     f011cb8d <test_kmalloc_firstfit1+0x509>
f011cb76:	83 ec 04             	sub    $0x4,%esp
f011cb79:	68 f8 96 13 f0       	push   $0xf01396f8
f011cb7e:	68 08 03 00 00       	push   $0x308
f011cb83:	68 ae 92 13 f0       	push   $0xf01392ae
f011cb88:	e8 23 36 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb8d:	e8 4c fe fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cb92:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb95:	e8 ea 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cb9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cb9d:	83 ec 0c             	sub    $0xc,%esp
f011cba0:	68 00 fc 1f 00       	push   $0x1ffc00
f011cba5:	e8 b5 b3 fe ff       	call   f0107f5f <kmalloc>
f011cbaa:	83 c4 10             	add    $0x10,%esp
f011cbad:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cbb3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cbb9:	89 c1                	mov    %eax,%ecx
f011cbbb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cbc2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cbc7:	0f b6 d0             	movzbl %al,%edx
f011cbca:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cbcd:	01 d0                	add    %edx,%eax
f011cbcf:	48                   	dec    %eax
f011cbd0:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cbd3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cbd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbdb:	f7 75 9c             	divl   -0x64(%ebp)
f011cbde:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cbe1:	29 d0                	sub    %edx,%eax
f011cbe3:	89 c3                	mov    %eax,%ebx
f011cbe5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cbec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cbf1:	0f b6 c0             	movzbl %al,%eax
f011cbf4:	c1 e0 04             	shl    $0x4,%eax
f011cbf7:	89 c2                	mov    %eax,%edx
f011cbf9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cbfc:	01 d0                	add    %edx,%eax
f011cbfe:	48                   	dec    %eax
f011cbff:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cc02:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cc05:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc0a:	f7 75 94             	divl   -0x6c(%ebp)
f011cc0d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cc10:	29 d0                	sub    %edx,%eax
f011cc12:	01 d8                	add    %ebx,%eax
f011cc14:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cc19:	39 c1                	cmp    %eax,%ecx
f011cc1b:	74 17                	je     f011cc34 <test_kmalloc_firstfit1+0x5b0>
f011cc1d:	83 ec 04             	sub    $0x4,%esp
f011cc20:	68 c8 96 13 f0       	push   $0xf01396c8
f011cc25:	68 0e 03 00 00       	push   $0x30e
f011cc2a:	68 ae 92 13 f0       	push   $0xf01392ae
f011cc2f:	e8 7c 35 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc34:	e8 4b 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cc39:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc3c:	74 17                	je     f011cc55 <test_kmalloc_firstfit1+0x5d1>
f011cc3e:	83 ec 04             	sub    $0x4,%esp
f011cc41:	68 c8 92 13 f0       	push   $0xf01392c8
f011cc46:	68 0f 03 00 00       	push   $0x30f
f011cc4b:	68 ae 92 13 f0       	push   $0xf01392ae
f011cc50:	e8 5b 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cc55:	e8 84 fd fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cc5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc5d:	29 c2                	sub    %eax,%edx
f011cc5f:	89 d0                	mov    %edx,%eax
f011cc61:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cc66:	74 17                	je     f011cc7f <test_kmalloc_firstfit1+0x5fb>
f011cc68:	83 ec 04             	sub    $0x4,%esp
f011cc6b:	68 f8 96 13 f0       	push   $0xf01396f8
f011cc70:	68 10 03 00 00       	push   $0x310
f011cc75:	68 ae 92 13 f0       	push   $0xf01392ae
f011cc7a:	e8 31 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cc7f:	e8 5a fd fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cc84:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc87:	e8 f8 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cc8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cc8f:	83 ec 0c             	sub    $0xc,%esp
f011cc92:	68 00 fc 2f 00       	push   $0x2ffc00
f011cc97:	e8 c3 b2 fe ff       	call   f0107f5f <kmalloc>
f011cc9c:	83 c4 10             	add    $0x10,%esp
f011cc9f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cca5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ccab:	89 c1                	mov    %eax,%ecx
f011ccad:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ccb4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ccb9:	0f b6 d0             	movzbl %al,%edx
f011ccbc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ccbf:	01 d0                	add    %edx,%eax
f011ccc1:	48                   	dec    %eax
f011ccc2:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ccc5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccc8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cccd:	f7 75 8c             	divl   -0x74(%ebp)
f011ccd0:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccd3:	29 d0                	sub    %edx,%eax
f011ccd5:	89 c3                	mov    %eax,%ebx
f011ccd7:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ccde:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cce3:	0f b6 c0             	movzbl %al,%eax
f011cce6:	c1 e0 04             	shl    $0x4,%eax
f011cce9:	89 c2                	mov    %eax,%edx
f011cceb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ccee:	01 d0                	add    %edx,%eax
f011ccf0:	48                   	dec    %eax
f011ccf1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ccf4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ccf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccfc:	f7 75 84             	divl   -0x7c(%ebp)
f011ccff:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cd02:	29 d0                	sub    %edx,%eax
f011cd04:	01 d8                	add    %ebx,%eax
f011cd06:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cd0b:	39 c1                	cmp    %eax,%ecx
f011cd0d:	74 17                	je     f011cd26 <test_kmalloc_firstfit1+0x6a2>
f011cd0f:	83 ec 04             	sub    $0x4,%esp
f011cd12:	68 c8 96 13 f0       	push   $0xf01396c8
f011cd17:	68 16 03 00 00       	push   $0x316
f011cd1c:	68 ae 92 13 f0       	push   $0xf01392ae
f011cd21:	e8 8a 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd26:	e8 59 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd2e:	74 17                	je     f011cd47 <test_kmalloc_firstfit1+0x6c3>
f011cd30:	83 ec 04             	sub    $0x4,%esp
f011cd33:	68 c8 92 13 f0       	push   $0xf01392c8
f011cd38:	68 17 03 00 00       	push   $0x317
f011cd3d:	68 ae 92 13 f0       	push   $0xf01392ae
f011cd42:	e8 69 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cd47:	e8 92 fc fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cd4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd4f:	29 c2                	sub    %eax,%edx
f011cd51:	89 d0                	mov    %edx,%eax
f011cd53:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cd58:	74 17                	je     f011cd71 <test_kmalloc_firstfit1+0x6ed>
f011cd5a:	83 ec 04             	sub    $0x4,%esp
f011cd5d:	68 f8 96 13 f0       	push   $0xf01396f8
f011cd62:	68 18 03 00 00       	push   $0x318
f011cd67:	68 ae 92 13 f0       	push   $0xf01392ae
f011cd6c:	e8 3f 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd71:	e8 68 fc fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cd76:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd79:	e8 06 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cd81:	83 ec 0c             	sub    $0xc,%esp
f011cd84:	68 00 fc 2f 00       	push   $0x2ffc00
f011cd89:	e8 d1 b1 fe ff       	call   f0107f5f <kmalloc>
f011cd8e:	83 c4 10             	add    $0x10,%esp
f011cd91:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cd97:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cd9d:	89 c1                	mov    %eax,%ecx
f011cd9f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cda6:	10 00 00 
f011cda9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cdae:	0f b6 d0             	movzbl %al,%edx
f011cdb1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cdb7:	01 d0                	add    %edx,%eax
f011cdb9:	48                   	dec    %eax
f011cdba:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cdc0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cdc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdcb:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cdd1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cdd7:	29 d0                	sub    %edx,%eax
f011cdd9:	89 c3                	mov    %eax,%ebx
f011cddb:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cde2:	10 00 00 
f011cde5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cdea:	0f b6 c0             	movzbl %al,%eax
f011cded:	c1 e0 04             	shl    $0x4,%eax
f011cdf0:	89 c2                	mov    %eax,%edx
f011cdf2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cdf8:	01 d0                	add    %edx,%eax
f011cdfa:	48                   	dec    %eax
f011cdfb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ce01:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ce07:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce0c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ce12:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ce18:	29 d0                	sub    %edx,%eax
f011ce1a:	01 d8                	add    %ebx,%eax
f011ce1c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ce21:	39 c1                	cmp    %eax,%ecx
f011ce23:	74 17                	je     f011ce3c <test_kmalloc_firstfit1+0x7b8>
f011ce25:	83 ec 04             	sub    $0x4,%esp
f011ce28:	68 c8 96 13 f0       	push   $0xf01396c8
f011ce2d:	68 1e 03 00 00       	push   $0x31e
f011ce32:	68 ae 92 13 f0       	push   $0xf01392ae
f011ce37:	e8 74 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce3c:	e8 43 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce41:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce44:	74 17                	je     f011ce5d <test_kmalloc_firstfit1+0x7d9>
f011ce46:	83 ec 04             	sub    $0x4,%esp
f011ce49:	68 c8 92 13 f0       	push   $0xf01392c8
f011ce4e:	68 1f 03 00 00       	push   $0x31f
f011ce53:	68 ae 92 13 f0       	push   $0xf01392ae
f011ce58:	e8 53 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ce5d:	e8 7c fb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ce62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce65:	29 c2                	sub    %eax,%edx
f011ce67:	89 d0                	mov    %edx,%eax
f011ce69:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ce6e:	74 17                	je     f011ce87 <test_kmalloc_firstfit1+0x803>
f011ce70:	83 ec 04             	sub    $0x4,%esp
f011ce73:	68 f8 96 13 f0       	push   $0xf01396f8
f011ce78:	68 20 03 00 00       	push   $0x320
f011ce7d:	68 ae 92 13 f0       	push   $0xf01392ae
f011ce82:	e8 29 33 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ce87:	e8 52 fb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ce8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce8f:	e8 f0 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce94:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ce97:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ce9d:	83 ec 0c             	sub    $0xc,%esp
f011cea0:	50                   	push   %eax
f011cea1:	e8 d3 b0 fe ff       	call   f0107f79 <kfree>
f011cea6:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cea9:	e8 d6 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ceae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ceb1:	74 17                	je     f011ceca <test_kmalloc_firstfit1+0x846>
f011ceb3:	83 ec 04             	sub    $0x4,%esp
f011ceb6:	68 c8 92 13 f0       	push   $0xf01392c8
f011cebb:	68 29 03 00 00       	push   $0x329
f011cec0:	68 ae 92 13 f0       	push   $0xf01392ae
f011cec5:	e8 e6 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ceca:	e8 0f fb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cecf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ced2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ced7:	74 17                	je     f011cef0 <test_kmalloc_firstfit1+0x86c>
f011ced9:	83 ec 04             	sub    $0x4,%esp
f011cedc:	68 0b 97 13 f0       	push   $0xf013970b
f011cee1:	68 2a 03 00 00       	push   $0x32a
f011cee6:	68 ae 92 13 f0       	push   $0xf01392ae
f011ceeb:	e8 c0 32 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cef0:	e8 e9 fa fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cef8:	e8 87 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cefd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cf00:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf06:	83 ec 0c             	sub    $0xc,%esp
f011cf09:	50                   	push   %eax
f011cf0a:	e8 6a b0 fe ff       	call   f0107f79 <kfree>
f011cf0f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf12:	e8 6d 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf17:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf1a:	74 17                	je     f011cf33 <test_kmalloc_firstfit1+0x8af>
f011cf1c:	83 ec 04             	sub    $0x4,%esp
f011cf1f:	68 c8 92 13 f0       	push   $0xf01392c8
f011cf24:	68 30 03 00 00       	push   $0x330
f011cf29:	68 ae 92 13 f0       	push   $0xf01392ae
f011cf2e:	e8 7d 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cf33:	e8 a6 fa fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cf38:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf3b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf40:	74 17                	je     f011cf59 <test_kmalloc_firstfit1+0x8d5>
f011cf42:	83 ec 04             	sub    $0x4,%esp
f011cf45:	68 0b 97 13 f0       	push   $0xf013970b
f011cf4a:	68 31 03 00 00       	push   $0x331
f011cf4f:	68 ae 92 13 f0       	push   $0xf01392ae
f011cf54:	e8 57 32 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf59:	e8 80 fa fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cf5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf61:	e8 1e 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf66:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cf69:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf6f:	83 ec 0c             	sub    $0xc,%esp
f011cf72:	50                   	push   %eax
f011cf73:	e8 01 b0 fe ff       	call   f0107f79 <kfree>
f011cf78:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf7b:	e8 04 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf80:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf83:	74 17                	je     f011cf9c <test_kmalloc_firstfit1+0x918>
f011cf85:	83 ec 04             	sub    $0x4,%esp
f011cf88:	68 c8 92 13 f0       	push   $0xf01392c8
f011cf8d:	68 37 03 00 00       	push   $0x337
f011cf92:	68 ae 92 13 f0       	push   $0xf01392ae
f011cf97:	e8 14 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cf9c:	e8 3d fa fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cfa1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cfa4:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cfa9:	74 17                	je     f011cfc2 <test_kmalloc_firstfit1+0x93e>
f011cfab:	83 ec 04             	sub    $0x4,%esp
f011cfae:	68 0b 97 13 f0       	push   $0xf013970b
f011cfb3:	68 38 03 00 00       	push   $0x338
f011cfb8:	68 ae 92 13 f0       	push   $0xf01392ae
f011cfbd:	e8 ee 31 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cfc2:	e8 17 fa fe ff       	call   f010c9de <sys_calculate_free_frames>
f011cfc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfca:	e8 b5 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cfcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011cfd2:	83 ec 0c             	sub    $0xc,%esp
f011cfd5:	68 00 fc 07 00       	push   $0x7fc00
f011cfda:	e8 80 af fe ff       	call   f0107f5f <kmalloc>
f011cfdf:	83 c4 10             	add    $0x10,%esp
f011cfe2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cfe8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cfee:	89 c1                	mov    %eax,%ecx
f011cff0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cff7:	10 00 00 
f011cffa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011cfff:	0f b6 d0             	movzbl %al,%edx
f011d002:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d008:	01 d0                	add    %edx,%eax
f011d00a:	48                   	dec    %eax
f011d00b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d011:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d017:	ba 00 00 00 00       	mov    $0x0,%edx
f011d01c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d022:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d028:	29 d0                	sub    %edx,%eax
f011d02a:	89 c3                	mov    %eax,%ebx
f011d02c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d033:	10 00 00 
f011d036:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d03b:	0f b6 c0             	movzbl %al,%eax
f011d03e:	c1 e0 04             	shl    $0x4,%eax
f011d041:	89 c2                	mov    %eax,%edx
f011d043:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d049:	01 d0                	add    %edx,%eax
f011d04b:	48                   	dec    %eax
f011d04c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d052:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d058:	ba 00 00 00 00       	mov    $0x0,%edx
f011d05d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d063:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d069:	29 d0                	sub    %edx,%eax
f011d06b:	01 d8                	add    %ebx,%eax
f011d06d:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d072:	39 c1                	cmp    %eax,%ecx
f011d074:	74 17                	je     f011d08d <test_kmalloc_firstfit1+0xa09>
f011d076:	83 ec 04             	sub    $0x4,%esp
f011d079:	68 c8 96 13 f0       	push   $0xf01396c8
f011d07e:	68 41 03 00 00       	push   $0x341
f011d083:	68 ae 92 13 f0       	push   $0xf01392ae
f011d088:	e8 23 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d08d:	e8 f2 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d092:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d095:	74 17                	je     f011d0ae <test_kmalloc_firstfit1+0xa2a>
f011d097:	83 ec 04             	sub    $0x4,%esp
f011d09a:	68 c8 92 13 f0       	push   $0xf01392c8
f011d09f:	68 42 03 00 00       	push   $0x342
f011d0a4:	68 ae 92 13 f0       	push   $0xf01392ae
f011d0a9:	e8 02 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d0ae:	e8 2b f9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d0b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0b6:	29 c2                	sub    %eax,%edx
f011d0b8:	89 d0                	mov    %edx,%eax
f011d0ba:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d0bf:	74 17                	je     f011d0d8 <test_kmalloc_firstfit1+0xa54>
f011d0c1:	83 ec 04             	sub    $0x4,%esp
f011d0c4:	68 f8 96 13 f0       	push   $0xf01396f8
f011d0c9:	68 43 03 00 00       	push   $0x343
f011d0ce:	68 ae 92 13 f0       	push   $0xf01392ae
f011d0d3:	e8 d8 30 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d0d8:	e8 01 f9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d0dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0e0:	e8 9f 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d0e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d0e8:	83 ec 0c             	sub    $0xc,%esp
f011d0eb:	68 00 fc 0f 00       	push   $0xffc00
f011d0f0:	e8 6a ae fe ff       	call   f0107f5f <kmalloc>
f011d0f5:	83 c4 10             	add    $0x10,%esp
f011d0f8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d0fe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d104:	89 c1                	mov    %eax,%ecx
f011d106:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d10d:	10 00 00 
f011d110:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d115:	0f b6 d0             	movzbl %al,%edx
f011d118:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d11e:	01 d0                	add    %edx,%eax
f011d120:	48                   	dec    %eax
f011d121:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d127:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d12d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d132:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d138:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d13e:	29 d0                	sub    %edx,%eax
f011d140:	89 c3                	mov    %eax,%ebx
f011d142:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d149:	10 00 00 
f011d14c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d151:	0f b6 c0             	movzbl %al,%eax
f011d154:	c1 e0 04             	shl    $0x4,%eax
f011d157:	89 c2                	mov    %eax,%edx
f011d159:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d15f:	01 d0                	add    %edx,%eax
f011d161:	48                   	dec    %eax
f011d162:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d168:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d16e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d173:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d179:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d17f:	29 d0                	sub    %edx,%eax
f011d181:	01 d8                	add    %ebx,%eax
f011d183:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d188:	39 c1                	cmp    %eax,%ecx
f011d18a:	74 17                	je     f011d1a3 <test_kmalloc_firstfit1+0xb1f>
f011d18c:	83 ec 04             	sub    $0x4,%esp
f011d18f:	68 c8 96 13 f0       	push   $0xf01396c8
f011d194:	68 49 03 00 00       	push   $0x349
f011d199:	68 ae 92 13 f0       	push   $0xf01392ae
f011d19e:	e8 0d 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1a3:	e8 dc 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1ab:	74 17                	je     f011d1c4 <test_kmalloc_firstfit1+0xb40>
f011d1ad:	83 ec 04             	sub    $0x4,%esp
f011d1b0:	68 c8 92 13 f0       	push   $0xf01392c8
f011d1b5:	68 4a 03 00 00       	push   $0x34a
f011d1ba:	68 ae 92 13 f0       	push   $0xf01392ae
f011d1bf:	e8 ec 2f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1c4:	e8 15 f8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d1c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1cc:	29 c2                	sub    %eax,%edx
f011d1ce:	89 d0                	mov    %edx,%eax
f011d1d0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1d5:	74 17                	je     f011d1ee <test_kmalloc_firstfit1+0xb6a>
f011d1d7:	83 ec 04             	sub    $0x4,%esp
f011d1da:	68 f8 96 13 f0       	push   $0xf01396f8
f011d1df:	68 4b 03 00 00       	push   $0x34b
f011d1e4:	68 ae 92 13 f0       	push   $0xf01392ae
f011d1e9:	e8 c2 2f fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d1ee:	e8 eb f7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d1f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1f6:	e8 89 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d1fe:	83 ec 0c             	sub    $0xc,%esp
f011d201:	68 00 fc 03 00       	push   $0x3fc00
f011d206:	e8 54 ad fe ff       	call   f0107f5f <kmalloc>
f011d20b:	83 c4 10             	add    $0x10,%esp
f011d20e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d214:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d21a:	89 c1                	mov    %eax,%ecx
f011d21c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d223:	10 00 00 
f011d226:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d22b:	0f b6 d0             	movzbl %al,%edx
f011d22e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d234:	01 d0                	add    %edx,%eax
f011d236:	48                   	dec    %eax
f011d237:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d23d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d243:	ba 00 00 00 00       	mov    $0x0,%edx
f011d248:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d24e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d254:	29 d0                	sub    %edx,%eax
f011d256:	89 c3                	mov    %eax,%ebx
f011d258:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d25f:	10 00 00 
f011d262:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d267:	0f b6 c0             	movzbl %al,%eax
f011d26a:	c1 e0 04             	shl    $0x4,%eax
f011d26d:	89 c2                	mov    %eax,%edx
f011d26f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d275:	01 d0                	add    %edx,%eax
f011d277:	48                   	dec    %eax
f011d278:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d27e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d284:	ba 00 00 00 00       	mov    $0x0,%edx
f011d289:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d28f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d295:	29 d0                	sub    %edx,%eax
f011d297:	01 d8                	add    %ebx,%eax
f011d299:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d29e:	39 c1                	cmp    %eax,%ecx
f011d2a0:	74 17                	je     f011d2b9 <test_kmalloc_firstfit1+0xc35>
f011d2a2:	83 ec 04             	sub    $0x4,%esp
f011d2a5:	68 c8 96 13 f0       	push   $0xf01396c8
f011d2aa:	68 52 03 00 00       	push   $0x352
f011d2af:	68 ae 92 13 f0       	push   $0xf01392ae
f011d2b4:	e8 f7 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2b9:	e8 c6 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d2be:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2c1:	74 17                	je     f011d2da <test_kmalloc_firstfit1+0xc56>
f011d2c3:	83 ec 04             	sub    $0x4,%esp
f011d2c6:	68 c8 92 13 f0       	push   $0xf01392c8
f011d2cb:	68 53 03 00 00       	push   $0x353
f011d2d0:	68 ae 92 13 f0       	push   $0xf01392ae
f011d2d5:	e8 d6 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d2da:	e8 ff f6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d2df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2e2:	29 c2                	sub    %eax,%edx
f011d2e4:	89 d0                	mov    %edx,%eax
f011d2e6:	83 f8 40             	cmp    $0x40,%eax
f011d2e9:	74 17                	je     f011d302 <test_kmalloc_firstfit1+0xc7e>
f011d2eb:	83 ec 04             	sub    $0x4,%esp
f011d2ee:	68 f8 96 13 f0       	push   $0xf01396f8
f011d2f3:	68 54 03 00 00       	push   $0x354
f011d2f8:	68 ae 92 13 f0       	push   $0xf01392ae
f011d2fd:	e8 ae 2e fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d302:	e8 d7 f6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d307:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d30a:	e8 75 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d30f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d312:	83 ec 0c             	sub    $0xc,%esp
f011d315:	68 00 00 20 00       	push   $0x200000
f011d31a:	e8 40 ac fe ff       	call   f0107f5f <kmalloc>
f011d31f:	83 c4 10             	add    $0x10,%esp
f011d322:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d328:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d32e:	89 c1                	mov    %eax,%ecx
f011d330:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d337:	10 00 00 
f011d33a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d33f:	0f b6 d0             	movzbl %al,%edx
f011d342:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d348:	01 d0                	add    %edx,%eax
f011d34a:	48                   	dec    %eax
f011d34b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d351:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d357:	ba 00 00 00 00       	mov    $0x0,%edx
f011d35c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d362:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d368:	29 d0                	sub    %edx,%eax
f011d36a:	89 c3                	mov    %eax,%ebx
f011d36c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d373:	10 00 00 
f011d376:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d37b:	0f b6 c0             	movzbl %al,%eax
f011d37e:	c1 e0 04             	shl    $0x4,%eax
f011d381:	89 c2                	mov    %eax,%edx
f011d383:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d389:	01 d0                	add    %edx,%eax
f011d38b:	48                   	dec    %eax
f011d38c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d392:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d398:	ba 00 00 00 00       	mov    $0x0,%edx
f011d39d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d3a3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d3a9:	29 d0                	sub    %edx,%eax
f011d3ab:	01 d8                	add    %ebx,%eax
f011d3ad:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d3b2:	39 c1                	cmp    %eax,%ecx
f011d3b4:	74 17                	je     f011d3cd <test_kmalloc_firstfit1+0xd49>
f011d3b6:	83 ec 04             	sub    $0x4,%esp
f011d3b9:	68 c8 96 13 f0       	push   $0xf01396c8
f011d3be:	68 5a 03 00 00       	push   $0x35a
f011d3c3:	68 ae 92 13 f0       	push   $0xf01392ae
f011d3c8:	e8 e3 2d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d3cd:	e8 0c f6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d3d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3d5:	29 c2                	sub    %eax,%edx
f011d3d7:	89 d0                	mov    %edx,%eax
f011d3d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d3de:	74 17                	je     f011d3f7 <test_kmalloc_firstfit1+0xd73>
f011d3e0:	83 ec 04             	sub    $0x4,%esp
f011d3e3:	68 f8 96 13 f0       	push   $0xf01396f8
f011d3e8:	68 5b 03 00 00       	push   $0x35b
f011d3ed:	68 ae 92 13 f0       	push   $0xf01392ae
f011d3f2:	e8 b9 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3f7:	e8 88 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d3fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3ff:	74 17                	je     f011d418 <test_kmalloc_firstfit1+0xd94>
f011d401:	83 ec 04             	sub    $0x4,%esp
f011d404:	68 c8 92 13 f0       	push   $0xf01392c8
f011d409:	68 5c 03 00 00       	push   $0x35c
f011d40e:	68 ae 92 13 f0       	push   $0xf01392ae
f011d413:	e8 98 2d fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d418:	e8 c1 f5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d41d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d420:	e8 5f 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d425:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d428:	83 ec 0c             	sub    $0xc,%esp
f011d42b:	68 00 fc 3f 00       	push   $0x3ffc00
f011d430:	e8 2a ab fe ff       	call   f0107f5f <kmalloc>
f011d435:	83 c4 10             	add    $0x10,%esp
f011d438:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d43e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d444:	89 c1                	mov    %eax,%ecx
f011d446:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d44d:	10 00 00 
f011d450:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d455:	0f b6 d0             	movzbl %al,%edx
f011d458:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d45e:	01 d0                	add    %edx,%eax
f011d460:	48                   	dec    %eax
f011d461:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d467:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d46d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d472:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d478:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d47e:	29 d0                	sub    %edx,%eax
f011d480:	89 c3                	mov    %eax,%ebx
f011d482:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d489:	10 00 00 
f011d48c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d491:	0f b6 c0             	movzbl %al,%eax
f011d494:	c1 e0 04             	shl    $0x4,%eax
f011d497:	89 c2                	mov    %eax,%edx
f011d499:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d49f:	01 d0                	add    %edx,%eax
f011d4a1:	48                   	dec    %eax
f011d4a2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d4a8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4b3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d4b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4bf:	29 d0                	sub    %edx,%eax
f011d4c1:	01 d8                	add    %ebx,%eax
f011d4c3:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d4c8:	39 c1                	cmp    %eax,%ecx
f011d4ca:	74 17                	je     f011d4e3 <test_kmalloc_firstfit1+0xe5f>
f011d4cc:	83 ec 04             	sub    $0x4,%esp
f011d4cf:	68 c8 96 13 f0       	push   $0xf01396c8
f011d4d4:	68 63 03 00 00       	push   $0x363
f011d4d9:	68 ae 92 13 f0       	push   $0xf01392ae
f011d4de:	e8 cd 2c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4e3:	e8 9c 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d4e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4eb:	74 17                	je     f011d504 <test_kmalloc_firstfit1+0xe80>
f011d4ed:	83 ec 04             	sub    $0x4,%esp
f011d4f0:	68 c8 92 13 f0       	push   $0xf01392c8
f011d4f5:	68 64 03 00 00       	push   $0x364
f011d4fa:	68 ae 92 13 f0       	push   $0xf01392ae
f011d4ff:	e8 ac 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d504:	e8 d5 f4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d509:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d50c:	29 c2                	sub    %eax,%edx
f011d50e:	89 d0                	mov    %edx,%eax
f011d510:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d515:	74 17                	je     f011d52e <test_kmalloc_firstfit1+0xeaa>
f011d517:	83 ec 04             	sub    $0x4,%esp
f011d51a:	68 f8 96 13 f0       	push   $0xf01396f8
f011d51f:	68 65 03 00 00       	push   $0x365
f011d524:	68 ae 92 13 f0       	push   $0xf01392ae
f011d529:	e8 82 2c fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d52e:	e8 ab f4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d533:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d536:	e8 49 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d53b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d53e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d544:	83 ec 0c             	sub    $0xc,%esp
f011d547:	50                   	push   %eax
f011d548:	e8 2c aa fe ff       	call   f0107f79 <kfree>
f011d54d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d550:	e8 2f 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d555:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d558:	74 17                	je     f011d571 <test_kmalloc_firstfit1+0xeed>
f011d55a:	83 ec 04             	sub    $0x4,%esp
f011d55d:	68 c8 92 13 f0       	push   $0xf01392c8
f011d562:	68 6e 03 00 00       	push   $0x36e
f011d567:	68 ae 92 13 f0       	push   $0xf01392ae
f011d56c:	e8 3f 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d571:	e8 68 f4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d576:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d579:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d57e:	74 17                	je     f011d597 <test_kmalloc_firstfit1+0xf13>
f011d580:	83 ec 04             	sub    $0x4,%esp
f011d583:	68 0b 97 13 f0       	push   $0xf013970b
f011d588:	68 6f 03 00 00       	push   $0x36f
f011d58d:	68 ae 92 13 f0       	push   $0xf01392ae
f011d592:	e8 19 2c fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d597:	e8 42 f4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d59c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d59f:	e8 e0 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d5a7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d5ad:	83 ec 0c             	sub    $0xc,%esp
f011d5b0:	50                   	push   %eax
f011d5b1:	e8 c3 a9 fe ff       	call   f0107f79 <kfree>
f011d5b6:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5b9:	e8 c6 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5be:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5c1:	74 17                	je     f011d5da <test_kmalloc_firstfit1+0xf56>
f011d5c3:	83 ec 04             	sub    $0x4,%esp
f011d5c6:	68 c8 92 13 f0       	push   $0xf01392c8
f011d5cb:	68 75 03 00 00       	push   $0x375
f011d5d0:	68 ae 92 13 f0       	push   $0xf01392ae
f011d5d5:	e8 d6 2b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d5da:	e8 ff f3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d5df:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d5e2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d5e7:	74 17                	je     f011d600 <test_kmalloc_firstfit1+0xf7c>
f011d5e9:	83 ec 04             	sub    $0x4,%esp
f011d5ec:	68 0b 97 13 f0       	push   $0xf013970b
f011d5f1:	68 76 03 00 00       	push   $0x376
f011d5f6:	68 ae 92 13 f0       	push   $0xf01392ae
f011d5fb:	e8 b0 2b fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d600:	e8 d9 f3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d605:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d608:	e8 77 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d60d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d610:	83 ec 0c             	sub    $0xc,%esp
f011d613:	68 00 00 10 00       	push   $0x100000
f011d618:	e8 42 a9 fe ff       	call   f0107f5f <kmalloc>
f011d61d:	83 c4 10             	add    $0x10,%esp
f011d620:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d626:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d62c:	89 c1                	mov    %eax,%ecx
f011d62e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d635:	10 00 00 
f011d638:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d63d:	0f b6 d0             	movzbl %al,%edx
f011d640:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d646:	01 d0                	add    %edx,%eax
f011d648:	48                   	dec    %eax
f011d649:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d64f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d655:	ba 00 00 00 00       	mov    $0x0,%edx
f011d65a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d660:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d666:	29 d0                	sub    %edx,%eax
f011d668:	89 c3                	mov    %eax,%ebx
f011d66a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d671:	10 00 00 
f011d674:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d679:	0f b6 c0             	movzbl %al,%eax
f011d67c:	c1 e0 04             	shl    $0x4,%eax
f011d67f:	89 c2                	mov    %eax,%edx
f011d681:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d687:	01 d0                	add    %edx,%eax
f011d689:	48                   	dec    %eax
f011d68a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d690:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d696:	ba 00 00 00 00       	mov    $0x0,%edx
f011d69b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d6a1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d6a7:	29 d0                	sub    %edx,%eax
f011d6a9:	01 d8                	add    %ebx,%eax
f011d6ab:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d6b0:	39 c1                	cmp    %eax,%ecx
f011d6b2:	74 17                	je     f011d6cb <test_kmalloc_firstfit1+0x1047>
f011d6b4:	83 ec 04             	sub    $0x4,%esp
f011d6b7:	68 c8 96 13 f0       	push   $0xf01396c8
f011d6bc:	68 80 03 00 00       	push   $0x380
f011d6c1:	68 ae 92 13 f0       	push   $0xf01392ae
f011d6c6:	e8 e5 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6cb:	e8 b4 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d6d0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6d3:	74 17                	je     f011d6ec <test_kmalloc_firstfit1+0x1068>
f011d6d5:	83 ec 04             	sub    $0x4,%esp
f011d6d8:	68 c8 92 13 f0       	push   $0xf01392c8
f011d6dd:	68 81 03 00 00       	push   $0x381
f011d6e2:	68 ae 92 13 f0       	push   $0xf01392ae
f011d6e7:	e8 c4 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d6ec:	e8 ed f2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d6f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6f4:	29 c2                	sub    %eax,%edx
f011d6f6:	89 d0                	mov    %edx,%eax
f011d6f8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d6fd:	74 17                	je     f011d716 <test_kmalloc_firstfit1+0x1092>
f011d6ff:	83 ec 04             	sub    $0x4,%esp
f011d702:	68 f8 96 13 f0       	push   $0xf01396f8
f011d707:	68 82 03 00 00       	push   $0x382
f011d70c:	68 ae 92 13 f0       	push   $0xf01392ae
f011d711:	e8 9a 2a fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d716:	83 ec 0c             	sub    $0xc,%esp
f011d719:	68 a4 98 13 f0       	push   $0xf01398a4
f011d71e:	e8 0e 37 fe ff       	call   f0100e31 <cprintf>
f011d723:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d726:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d72b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d72e:	5b                   	pop    %ebx
f011d72f:	5f                   	pop    %edi
f011d730:	5d                   	pop    %ebp
f011d731:	c3                   	ret    

f011d732 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d732:	55                   	push   %ebp
f011d733:	89 e5                	mov    %esp,%ebp
f011d735:	57                   	push   %edi
f011d736:	53                   	push   %ebx
f011d737:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d73d:	83 ec 0c             	sub    $0xc,%esp
f011d740:	68 f0 91 13 f0       	push   $0xf01391f0
f011d745:	e8 e7 36 fe ff       	call   f0100e31 <cprintf>
f011d74a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d74d:	83 ec 0c             	sub    $0xc,%esp
f011d750:	68 20 92 13 f0       	push   $0xf0139220
f011d755:	e8 d7 36 fe ff       	call   f0100e31 <cprintf>
f011d75a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d75d:	83 ec 0c             	sub    $0xc,%esp
f011d760:	68 f0 91 13 f0       	push   $0xf01391f0
f011d765:	e8 c7 36 fe ff       	call   f0100e31 <cprintf>
f011d76a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d76d:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d773:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d778:	b8 00 00 00 00       	mov    $0x0,%eax
f011d77d:	89 d7                	mov    %edx,%edi
f011d77f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d781:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d788:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d78d:	0f b6 d0             	movzbl %al,%edx
f011d790:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d793:	01 d0                	add    %edx,%eax
f011d795:	48                   	dec    %eax
f011d796:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d799:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d79c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7a1:	f7 75 f4             	divl   -0xc(%ebp)
f011d7a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d7a7:	29 d0                	sub    %edx,%eax
f011d7a9:	89 c1                	mov    %eax,%ecx
f011d7ab:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d7b2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d7b7:	0f b6 c0             	movzbl %al,%eax
f011d7ba:	c1 e0 04             	shl    $0x4,%eax
f011d7bd:	89 c2                	mov    %eax,%edx
f011d7bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d7c2:	01 d0                	add    %edx,%eax
f011d7c4:	48                   	dec    %eax
f011d7c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d7c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d7cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7d0:	f7 75 ec             	divl   -0x14(%ebp)
f011d7d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d7d6:	29 d0                	sub    %edx,%eax
f011d7d8:	01 c8                	add    %ecx,%eax
f011d7da:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d7df:	29 c2                	sub    %eax,%edx
f011d7e1:	89 d0                	mov    %edx,%eax
f011d7e3:	83 ec 0c             	sub    $0xc,%esp
f011d7e6:	50                   	push   %eax
f011d7e7:	e8 73 a7 fe ff       	call   f0107f5f <kmalloc>
f011d7ec:	83 c4 10             	add    $0x10,%esp
f011d7ef:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d7f5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d7fb:	85 c0                	test   %eax,%eax
f011d7fd:	74 17                	je     f011d816 <test_kmalloc_firstfit2+0xe4>
f011d7ff:	83 ec 04             	sub    $0x4,%esp
f011d802:	68 f0 98 13 f0       	push   $0xf01398f0
f011d807:	68 97 03 00 00       	push   $0x397
f011d80c:	68 ae 92 13 f0       	push   $0xf01392ae
f011d811:	e8 9a 29 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d816:	e8 c3 f1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d81b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d81e:	e8 61 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d823:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d826:	83 ec 0c             	sub    $0xc,%esp
f011d829:	68 00 fc 1f 00       	push   $0x1ffc00
f011d82e:	e8 2c a7 fe ff       	call   f0107f5f <kmalloc>
f011d833:	83 c4 10             	add    $0x10,%esp
f011d836:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d83c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d842:	89 c1                	mov    %eax,%ecx
f011d844:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d84b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d850:	0f b6 d0             	movzbl %al,%edx
f011d853:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d856:	01 d0                	add    %edx,%eax
f011d858:	48                   	dec    %eax
f011d859:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d85c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d85f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d864:	f7 75 dc             	divl   -0x24(%ebp)
f011d867:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d86a:	29 d0                	sub    %edx,%eax
f011d86c:	89 c3                	mov    %eax,%ebx
f011d86e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d875:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d87a:	0f b6 c0             	movzbl %al,%eax
f011d87d:	c1 e0 04             	shl    $0x4,%eax
f011d880:	89 c2                	mov    %eax,%edx
f011d882:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d885:	01 d0                	add    %edx,%eax
f011d887:	48                   	dec    %eax
f011d888:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d88b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d88e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d893:	f7 75 d4             	divl   -0x2c(%ebp)
f011d896:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d899:	29 d0                	sub    %edx,%eax
f011d89b:	01 d8                	add    %ebx,%eax
f011d89d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d8a2:	39 c1                	cmp    %eax,%ecx
f011d8a4:	74 17                	je     f011d8bd <test_kmalloc_firstfit2+0x18b>
f011d8a6:	83 ec 04             	sub    $0x4,%esp
f011d8a9:	68 c8 96 13 f0       	push   $0xf01396c8
f011d8ae:	68 a1 03 00 00       	push   $0x3a1
f011d8b3:	68 ae 92 13 f0       	push   $0xf01392ae
f011d8b8:	e8 f3 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8bd:	e8 c2 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d8c2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d8c5:	74 17                	je     f011d8de <test_kmalloc_firstfit2+0x1ac>
f011d8c7:	83 ec 04             	sub    $0x4,%esp
f011d8ca:	68 c8 92 13 f0       	push   $0xf01392c8
f011d8cf:	68 a2 03 00 00       	push   $0x3a2
f011d8d4:	68 ae 92 13 f0       	push   $0xf01392ae
f011d8d9:	e8 d2 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d8de:	e8 fb f0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d8e3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d8e6:	29 c2                	sub    %eax,%edx
f011d8e8:	89 d0                	mov    %edx,%eax
f011d8ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d8ef:	74 17                	je     f011d908 <test_kmalloc_firstfit2+0x1d6>
f011d8f1:	83 ec 04             	sub    $0x4,%esp
f011d8f4:	68 f8 96 13 f0       	push   $0xf01396f8
f011d8f9:	68 a3 03 00 00       	push   $0x3a3
f011d8fe:	68 ae 92 13 f0       	push   $0xf01392ae
f011d903:	e8 a8 28 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d908:	e8 d1 f0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d90d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d910:	e8 6f 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d915:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d918:	83 ec 0c             	sub    $0xc,%esp
f011d91b:	68 00 fc 1f 00       	push   $0x1ffc00
f011d920:	e8 3a a6 fe ff       	call   f0107f5f <kmalloc>
f011d925:	83 c4 10             	add    $0x10,%esp
f011d928:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d92e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d934:	89 c1                	mov    %eax,%ecx
f011d936:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d93d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d942:	0f b6 d0             	movzbl %al,%edx
f011d945:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d948:	01 d0                	add    %edx,%eax
f011d94a:	48                   	dec    %eax
f011d94b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d94e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d951:	ba 00 00 00 00       	mov    $0x0,%edx
f011d956:	f7 75 cc             	divl   -0x34(%ebp)
f011d959:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d95c:	29 d0                	sub    %edx,%eax
f011d95e:	89 c3                	mov    %eax,%ebx
f011d960:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d967:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011d96c:	0f b6 c0             	movzbl %al,%eax
f011d96f:	c1 e0 04             	shl    $0x4,%eax
f011d972:	89 c2                	mov    %eax,%edx
f011d974:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d977:	01 d0                	add    %edx,%eax
f011d979:	48                   	dec    %eax
f011d97a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d97d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d980:	ba 00 00 00 00       	mov    $0x0,%edx
f011d985:	f7 75 c4             	divl   -0x3c(%ebp)
f011d988:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d98b:	29 d0                	sub    %edx,%eax
f011d98d:	01 d8                	add    %ebx,%eax
f011d98f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d994:	39 c1                	cmp    %eax,%ecx
f011d996:	74 17                	je     f011d9af <test_kmalloc_firstfit2+0x27d>
f011d998:	83 ec 04             	sub    $0x4,%esp
f011d99b:	68 c8 96 13 f0       	push   $0xf01396c8
f011d9a0:	68 a9 03 00 00       	push   $0x3a9
f011d9a5:	68 ae 92 13 f0       	push   $0xf01392ae
f011d9aa:	e8 01 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9af:	e8 d0 6c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d9b4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d9b7:	74 17                	je     f011d9d0 <test_kmalloc_firstfit2+0x29e>
f011d9b9:	83 ec 04             	sub    $0x4,%esp
f011d9bc:	68 c8 92 13 f0       	push   $0xf01392c8
f011d9c1:	68 aa 03 00 00       	push   $0x3aa
f011d9c6:	68 ae 92 13 f0       	push   $0xf01392ae
f011d9cb:	e8 e0 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d9d0:	e8 09 f0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d9d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d9d8:	29 c2                	sub    %eax,%edx
f011d9da:	89 d0                	mov    %edx,%eax
f011d9dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d9e1:	74 17                	je     f011d9fa <test_kmalloc_firstfit2+0x2c8>
f011d9e3:	83 ec 04             	sub    $0x4,%esp
f011d9e6:	68 f8 96 13 f0       	push   $0xf01396f8
f011d9eb:	68 ab 03 00 00       	push   $0x3ab
f011d9f0:	68 ae 92 13 f0       	push   $0xf01392ae
f011d9f5:	e8 b6 27 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d9fa:	e8 df ef fe ff       	call   f010c9de <sys_calculate_free_frames>
f011d9ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da02:	e8 7d 6c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011da07:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011da0a:	83 ec 0c             	sub    $0xc,%esp
f011da0d:	68 00 08 00 00       	push   $0x800
f011da12:	e8 48 a5 fe ff       	call   f0107f5f <kmalloc>
f011da17:	83 c4 10             	add    $0x10,%esp
f011da1a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011da20:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011da26:	89 c1                	mov    %eax,%ecx
f011da28:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011da2f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011da34:	0f b6 d0             	movzbl %al,%edx
f011da37:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011da3a:	01 d0                	add    %edx,%eax
f011da3c:	48                   	dec    %eax
f011da3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011da40:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da43:	ba 00 00 00 00       	mov    $0x0,%edx
f011da48:	f7 75 bc             	divl   -0x44(%ebp)
f011da4b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da4e:	29 d0                	sub    %edx,%eax
f011da50:	89 c3                	mov    %eax,%ebx
f011da52:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011da59:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011da5e:	0f b6 c0             	movzbl %al,%eax
f011da61:	c1 e0 04             	shl    $0x4,%eax
f011da64:	89 c2                	mov    %eax,%edx
f011da66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011da69:	01 d0                	add    %edx,%eax
f011da6b:	48                   	dec    %eax
f011da6c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011da6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da72:	ba 00 00 00 00       	mov    $0x0,%edx
f011da77:	f7 75 b4             	divl   -0x4c(%ebp)
f011da7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da7d:	29 d0                	sub    %edx,%eax
f011da7f:	01 d8                	add    %ebx,%eax
f011da81:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011da86:	39 c1                	cmp    %eax,%ecx
f011da88:	73 17                	jae    f011daa1 <test_kmalloc_firstfit2+0x36f>
f011da8a:	83 ec 04             	sub    $0x4,%esp
f011da8d:	68 c8 96 13 f0       	push   $0xf01396c8
f011da92:	68 b1 03 00 00       	push   $0x3b1
f011da97:	68 ae 92 13 f0       	push   $0xf01392ae
f011da9c:	e8 0f 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011daa1:	e8 de 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011daa6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011daa9:	74 17                	je     f011dac2 <test_kmalloc_firstfit2+0x390>
f011daab:	83 ec 04             	sub    $0x4,%esp
f011daae:	68 c8 92 13 f0       	push   $0xf01392c8
f011dab3:	68 b2 03 00 00       	push   $0x3b2
f011dab8:	68 ae 92 13 f0       	push   $0xf01392ae
f011dabd:	e8 ee 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dac2:	e8 17 ef fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dac7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011daca:	29 c2                	sub    %eax,%edx
f011dacc:	89 d0                	mov    %edx,%eax
f011dace:	83 f8 01             	cmp    $0x1,%eax
f011dad1:	74 17                	je     f011daea <test_kmalloc_firstfit2+0x3b8>
f011dad3:	83 ec 04             	sub    $0x4,%esp
f011dad6:	68 f8 96 13 f0       	push   $0xf01396f8
f011dadb:	68 b3 03 00 00       	push   $0x3b3
f011dae0:	68 ae 92 13 f0       	push   $0xf01392ae
f011dae5:	e8 c6 26 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011daea:	e8 ef ee fe ff       	call   f010c9de <sys_calculate_free_frames>
f011daef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daf2:	e8 8d 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011daf7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dafa:	83 ec 0c             	sub    $0xc,%esp
f011dafd:	68 00 08 00 00       	push   $0x800
f011db02:	e8 58 a4 fe ff       	call   f0107f5f <kmalloc>
f011db07:	83 c4 10             	add    $0x10,%esp
f011db0a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011db10:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011db16:	89 c1                	mov    %eax,%ecx
f011db18:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011db1f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011db24:	0f b6 d0             	movzbl %al,%edx
f011db27:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011db2a:	01 d0                	add    %edx,%eax
f011db2c:	48                   	dec    %eax
f011db2d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011db30:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011db33:	ba 00 00 00 00       	mov    $0x0,%edx
f011db38:	f7 75 ac             	divl   -0x54(%ebp)
f011db3b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011db3e:	29 d0                	sub    %edx,%eax
f011db40:	89 c3                	mov    %eax,%ebx
f011db42:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011db49:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011db4e:	0f b6 c0             	movzbl %al,%eax
f011db51:	c1 e0 04             	shl    $0x4,%eax
f011db54:	89 c2                	mov    %eax,%edx
f011db56:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011db59:	01 d0                	add    %edx,%eax
f011db5b:	48                   	dec    %eax
f011db5c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011db5f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db62:	ba 00 00 00 00       	mov    $0x0,%edx
f011db67:	f7 75 a4             	divl   -0x5c(%ebp)
f011db6a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db6d:	29 d0                	sub    %edx,%eax
f011db6f:	01 d8                	add    %ebx,%eax
f011db71:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011db76:	39 c1                	cmp    %eax,%ecx
f011db78:	74 17                	je     f011db91 <test_kmalloc_firstfit2+0x45f>
f011db7a:	83 ec 04             	sub    $0x4,%esp
f011db7d:	68 c8 96 13 f0       	push   $0xf01396c8
f011db82:	68 b9 03 00 00       	push   $0x3b9
f011db87:	68 ae 92 13 f0       	push   $0xf01392ae
f011db8c:	e8 1f 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db91:	e8 ee 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011db96:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011db99:	74 17                	je     f011dbb2 <test_kmalloc_firstfit2+0x480>
f011db9b:	83 ec 04             	sub    $0x4,%esp
f011db9e:	68 c8 92 13 f0       	push   $0xf01392c8
f011dba3:	68 ba 03 00 00       	push   $0x3ba
f011dba8:	68 ae 92 13 f0       	push   $0xf01392ae
f011dbad:	e8 fe 25 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dbb2:	e8 27 ee fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dbb7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dbba:	29 c2                	sub    %eax,%edx
f011dbbc:	89 d0                	mov    %edx,%eax
f011dbbe:	83 f8 01             	cmp    $0x1,%eax
f011dbc1:	74 17                	je     f011dbda <test_kmalloc_firstfit2+0x4a8>
f011dbc3:	83 ec 04             	sub    $0x4,%esp
f011dbc6:	68 f8 96 13 f0       	push   $0xf01396f8
f011dbcb:	68 bb 03 00 00       	push   $0x3bb
f011dbd0:	68 ae 92 13 f0       	push   $0xf01392ae
f011dbd5:	e8 d6 25 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dbda:	e8 ff ed fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dbdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbe2:	e8 9d 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dbe7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011dbea:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dbf0:	83 ec 0c             	sub    $0xc,%esp
f011dbf3:	50                   	push   %eax
f011dbf4:	e8 80 a3 fe ff       	call   f0107f79 <kfree>
f011dbf9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbfc:	e8 83 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc01:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc04:	74 17                	je     f011dc1d <test_kmalloc_firstfit2+0x4eb>
f011dc06:	83 ec 04             	sub    $0x4,%esp
f011dc09:	68 c8 92 13 f0       	push   $0xf01392c8
f011dc0e:	68 c1 03 00 00       	push   $0x3c1
f011dc13:	68 ae 92 13 f0       	push   $0xf01392ae
f011dc18:	e8 93 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011dc1d:	e8 bc ed fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dc22:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dc25:	83 f8 01             	cmp    $0x1,%eax
f011dc28:	74 17                	je     f011dc41 <test_kmalloc_firstfit2+0x50f>
f011dc2a:	83 ec 04             	sub    $0x4,%esp
f011dc2d:	68 0b 97 13 f0       	push   $0xf013970b
f011dc32:	68 c2 03 00 00       	push   $0x3c2
f011dc37:	68 ae 92 13 f0       	push   $0xf01392ae
f011dc3c:	e8 6f 25 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc41:	e8 98 ed fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dc46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc49:	e8 36 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc4e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011dc51:	83 ec 0c             	sub    $0xc,%esp
f011dc54:	68 00 1c 00 00       	push   $0x1c00
f011dc59:	e8 01 a3 fe ff       	call   f0107f5f <kmalloc>
f011dc5e:	83 c4 10             	add    $0x10,%esp
f011dc61:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011dc67:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dc6d:	89 c1                	mov    %eax,%ecx
f011dc6f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dc76:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dc7b:	0f b6 d0             	movzbl %al,%edx
f011dc7e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dc81:	01 d0                	add    %edx,%eax
f011dc83:	48                   	dec    %eax
f011dc84:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dc87:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc8f:	f7 75 9c             	divl   -0x64(%ebp)
f011dc92:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc95:	29 d0                	sub    %edx,%eax
f011dc97:	89 c3                	mov    %eax,%ebx
f011dc99:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dca0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dca5:	0f b6 c0             	movzbl %al,%eax
f011dca8:	c1 e0 04             	shl    $0x4,%eax
f011dcab:	89 c2                	mov    %eax,%edx
f011dcad:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dcb0:	01 d0                	add    %edx,%eax
f011dcb2:	48                   	dec    %eax
f011dcb3:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dcb6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dcb9:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcbe:	f7 75 94             	divl   -0x6c(%ebp)
f011dcc1:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dcc4:	29 d0                	sub    %edx,%eax
f011dcc6:	01 d8                	add    %ebx,%eax
f011dcc8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dccd:	39 c1                	cmp    %eax,%ecx
f011dccf:	74 17                	je     f011dce8 <test_kmalloc_firstfit2+0x5b6>
f011dcd1:	83 ec 04             	sub    $0x4,%esp
f011dcd4:	68 c8 96 13 f0       	push   $0xf01396c8
f011dcd9:	68 c8 03 00 00       	push   $0x3c8
f011dcde:	68 ae 92 13 f0       	push   $0xf01392ae
f011dce3:	e8 c8 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dce8:	e8 97 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dced:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dcf0:	74 17                	je     f011dd09 <test_kmalloc_firstfit2+0x5d7>
f011dcf2:	83 ec 04             	sub    $0x4,%esp
f011dcf5:	68 c8 92 13 f0       	push   $0xf01392c8
f011dcfa:	68 c9 03 00 00       	push   $0x3c9
f011dcff:	68 ae 92 13 f0       	push   $0xf01392ae
f011dd04:	e8 a7 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011dd09:	e8 d0 ec fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dd0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dd11:	29 c2                	sub    %eax,%edx
f011dd13:	89 d0                	mov    %edx,%eax
f011dd15:	83 f8 02             	cmp    $0x2,%eax
f011dd18:	74 17                	je     f011dd31 <test_kmalloc_firstfit2+0x5ff>
f011dd1a:	83 ec 04             	sub    $0x4,%esp
f011dd1d:	68 f8 96 13 f0       	push   $0xf01396f8
f011dd22:	68 ca 03 00 00       	push   $0x3ca
f011dd27:	68 ae 92 13 f0       	push   $0xf01392ae
f011dd2c:	e8 7f 24 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dd31:	e8 a8 ec fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dd36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd39:	e8 46 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011dd41:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dd47:	83 ec 0c             	sub    $0xc,%esp
f011dd4a:	50                   	push   %eax
f011dd4b:	e8 29 a2 fe ff       	call   f0107f79 <kfree>
f011dd50:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd53:	e8 2c 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd58:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd5b:	74 17                	je     f011dd74 <test_kmalloc_firstfit2+0x642>
f011dd5d:	83 ec 04             	sub    $0x4,%esp
f011dd60:	68 c8 92 13 f0       	push   $0xf01392c8
f011dd65:	68 d0 03 00 00       	push   $0x3d0
f011dd6a:	68 ae 92 13 f0       	push   $0xf01392ae
f011dd6f:	e8 3c 24 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dd74:	e8 65 ec fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dd79:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dd7c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd81:	74 17                	je     f011dd9a <test_kmalloc_firstfit2+0x668>
f011dd83:	83 ec 04             	sub    $0x4,%esp
f011dd86:	68 0b 97 13 f0       	push   $0xf013970b
f011dd8b:	68 d1 03 00 00       	push   $0x3d1
f011dd90:	68 ae 92 13 f0       	push   $0xf01392ae
f011dd95:	e8 16 24 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dd9a:	e8 3f ec fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dd9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dda2:	e8 dd 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dda7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ddaa:	83 ec 0c             	sub    $0xc,%esp
f011ddad:	68 00 fc 2f 00       	push   $0x2ffc00
f011ddb2:	e8 a8 a1 fe ff       	call   f0107f5f <kmalloc>
f011ddb7:	83 c4 10             	add    $0x10,%esp
f011ddba:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ddc0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ddc6:	89 c1                	mov    %eax,%ecx
f011ddc8:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ddcf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ddd4:	0f b6 d0             	movzbl %al,%edx
f011ddd7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ddda:	01 d0                	add    %edx,%eax
f011dddc:	48                   	dec    %eax
f011dddd:	89 45 88             	mov    %eax,-0x78(%ebp)
f011dde0:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dde3:	ba 00 00 00 00       	mov    $0x0,%edx
f011dde8:	f7 75 8c             	divl   -0x74(%ebp)
f011ddeb:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ddee:	29 d0                	sub    %edx,%eax
f011ddf0:	89 c3                	mov    %eax,%ebx
f011ddf2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ddf9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ddfe:	0f b6 c0             	movzbl %al,%eax
f011de01:	c1 e0 04             	shl    $0x4,%eax
f011de04:	89 c2                	mov    %eax,%edx
f011de06:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011de09:	01 d0                	add    %edx,%eax
f011de0b:	48                   	dec    %eax
f011de0c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011de0f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011de12:	ba 00 00 00 00       	mov    $0x0,%edx
f011de17:	f7 75 84             	divl   -0x7c(%ebp)
f011de1a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011de1d:	29 d0                	sub    %edx,%eax
f011de1f:	01 d8                	add    %ebx,%eax
f011de21:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011de26:	39 c1                	cmp    %eax,%ecx
f011de28:	74 17                	je     f011de41 <test_kmalloc_firstfit2+0x70f>
f011de2a:	83 ec 04             	sub    $0x4,%esp
f011de2d:	68 c8 96 13 f0       	push   $0xf01396c8
f011de32:	68 d7 03 00 00       	push   $0x3d7
f011de37:	68 ae 92 13 f0       	push   $0xf01392ae
f011de3c:	e8 6f 23 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de41:	e8 3e 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de46:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011de49:	74 17                	je     f011de62 <test_kmalloc_firstfit2+0x730>
f011de4b:	83 ec 04             	sub    $0x4,%esp
f011de4e:	68 c8 92 13 f0       	push   $0xf01392c8
f011de53:	68 d8 03 00 00       	push   $0x3d8
f011de58:	68 ae 92 13 f0       	push   $0xf01392ae
f011de5d:	e8 4e 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011de62:	e8 77 eb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011de67:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011de6a:	29 c2                	sub    %eax,%edx
f011de6c:	89 d0                	mov    %edx,%eax
f011de6e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011de73:	74 17                	je     f011de8c <test_kmalloc_firstfit2+0x75a>
f011de75:	83 ec 04             	sub    $0x4,%esp
f011de78:	68 f8 96 13 f0       	push   $0xf01396f8
f011de7d:	68 d9 03 00 00       	push   $0x3d9
f011de82:	68 ae 92 13 f0       	push   $0xf01392ae
f011de87:	e8 24 23 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011de8c:	e8 4d eb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011de91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de94:	e8 eb 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de99:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011de9c:	83 ec 0c             	sub    $0xc,%esp
f011de9f:	68 00 18 20 00       	push   $0x201800
f011dea4:	e8 b6 a0 fe ff       	call   f0107f5f <kmalloc>
f011dea9:	83 c4 10             	add    $0x10,%esp
f011deac:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011deb2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011deb8:	89 c1                	mov    %eax,%ecx
f011deba:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011dec1:	10 00 00 
f011dec4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011dec9:	0f b6 d0             	movzbl %al,%edx
f011decc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ded2:	01 d0                	add    %edx,%eax
f011ded4:	48                   	dec    %eax
f011ded5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011dedb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dee1:	ba 00 00 00 00       	mov    $0x0,%edx
f011dee6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011deec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011def2:	29 d0                	sub    %edx,%eax
f011def4:	89 c3                	mov    %eax,%ebx
f011def6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011defd:	10 00 00 
f011df00:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011df05:	0f b6 c0             	movzbl %al,%eax
f011df08:	c1 e0 04             	shl    $0x4,%eax
f011df0b:	89 c2                	mov    %eax,%edx
f011df0d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011df13:	01 d0                	add    %edx,%eax
f011df15:	48                   	dec    %eax
f011df16:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011df1c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df22:	ba 00 00 00 00       	mov    $0x0,%edx
f011df27:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011df2d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df33:	29 d0                	sub    %edx,%eax
f011df35:	01 d8                	add    %ebx,%eax
f011df37:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011df3c:	39 c1                	cmp    %eax,%ecx
f011df3e:	74 17                	je     f011df57 <test_kmalloc_firstfit2+0x825>
f011df40:	83 ec 04             	sub    $0x4,%esp
f011df43:	68 c8 96 13 f0       	push   $0xf01396c8
f011df48:	68 df 03 00 00       	push   $0x3df
f011df4d:	68 ae 92 13 f0       	push   $0xf01392ae
f011df52:	e8 59 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df57:	e8 28 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df5c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df5f:	74 17                	je     f011df78 <test_kmalloc_firstfit2+0x846>
f011df61:	83 ec 04             	sub    $0x4,%esp
f011df64:	68 c8 92 13 f0       	push   $0xf01392c8
f011df69:	68 e0 03 00 00       	push   $0x3e0
f011df6e:	68 ae 92 13 f0       	push   $0xf01392ae
f011df73:	e8 38 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011df78:	e8 61 ea fe ff       	call   f010c9de <sys_calculate_free_frames>
f011df7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011df80:	29 c2                	sub    %eax,%edx
f011df82:	89 d0                	mov    %edx,%eax
f011df84:	3d 02 02 00 00       	cmp    $0x202,%eax
f011df89:	74 17                	je     f011dfa2 <test_kmalloc_firstfit2+0x870>
f011df8b:	83 ec 04             	sub    $0x4,%esp
f011df8e:	68 f8 96 13 f0       	push   $0xf01396f8
f011df93:	68 e1 03 00 00       	push   $0x3e1
f011df98:	68 ae 92 13 f0       	push   $0xf01392ae
f011df9d:	e8 0e 22 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dfa2:	e8 37 ea fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dfa7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfaa:	e8 d5 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dfaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011dfb2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dfb8:	83 ec 0c             	sub    $0xc,%esp
f011dfbb:	50                   	push   %eax
f011dfbc:	e8 b8 9f fe ff       	call   f0107f79 <kfree>
f011dfc1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfc4:	e8 bb 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dfc9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dfcc:	74 17                	je     f011dfe5 <test_kmalloc_firstfit2+0x8b3>
f011dfce:	83 ec 04             	sub    $0x4,%esp
f011dfd1:	68 c8 92 13 f0       	push   $0xf01392c8
f011dfd6:	68 e7 03 00 00       	push   $0x3e7
f011dfdb:	68 ae 92 13 f0       	push   $0xf01392ae
f011dfe0:	e8 cb 21 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dfe5:	e8 f4 e9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011dfea:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dfed:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dff2:	74 17                	je     f011e00b <test_kmalloc_firstfit2+0x8d9>
f011dff4:	83 ec 04             	sub    $0x4,%esp
f011dff7:	68 0b 97 13 f0       	push   $0xf013970b
f011dffc:	68 e8 03 00 00       	push   $0x3e8
f011e001:	68 ae 92 13 f0       	push   $0xf01392ae
f011e006:	e8 a5 21 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e00b:	e8 ce e9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e010:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e013:	e8 6c 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e018:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011e01b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e021:	83 ec 0c             	sub    $0xc,%esp
f011e024:	50                   	push   %eax
f011e025:	e8 4f 9f fe ff       	call   f0107f79 <kfree>
f011e02a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e02d:	e8 ac e9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e032:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e035:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e03a:	74 17                	je     f011e053 <test_kmalloc_firstfit2+0x921>
f011e03c:	83 ec 04             	sub    $0x4,%esp
f011e03f:	68 0b 97 13 f0       	push   $0xf013970b
f011e044:	68 ee 03 00 00       	push   $0x3ee
f011e049:	68 ae 92 13 f0       	push   $0xf01392ae
f011e04e:	e8 5d 21 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e053:	e8 2c 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e058:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e05b:	74 17                	je     f011e074 <test_kmalloc_firstfit2+0x942>
f011e05d:	83 ec 04             	sub    $0x4,%esp
f011e060:	68 c8 92 13 f0       	push   $0xf01392c8
f011e065:	68 ef 03 00 00       	push   $0x3ef
f011e06a:	68 ae 92 13 f0       	push   $0xf01392ae
f011e06f:	e8 3c 21 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e074:	e8 65 e9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e079:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e07c:	e8 03 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e081:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e084:	83 ec 0c             	sub    $0xc,%esp
f011e087:	68 00 fc 4f 00       	push   $0x4ffc00
f011e08c:	e8 ce 9e fe ff       	call   f0107f5f <kmalloc>
f011e091:	83 c4 10             	add    $0x10,%esp
f011e094:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e09a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e0a0:	89 c1                	mov    %eax,%ecx
f011e0a2:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e0a9:	10 00 00 
f011e0ac:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e0b1:	0f b6 d0             	movzbl %al,%edx
f011e0b4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e0ba:	01 d0                	add    %edx,%eax
f011e0bc:	48                   	dec    %eax
f011e0bd:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e0c3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e0c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0ce:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e0d4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e0da:	29 d0                	sub    %edx,%eax
f011e0dc:	89 c3                	mov    %eax,%ebx
f011e0de:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e0e5:	10 00 00 
f011e0e8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e0ed:	0f b6 c0             	movzbl %al,%eax
f011e0f0:	c1 e0 04             	shl    $0x4,%eax
f011e0f3:	89 c2                	mov    %eax,%edx
f011e0f5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e0fb:	01 d0                	add    %edx,%eax
f011e0fd:	48                   	dec    %eax
f011e0fe:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e104:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e10a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e10f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e115:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e11b:	29 d0                	sub    %edx,%eax
f011e11d:	01 d8                	add    %ebx,%eax
f011e11f:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e124:	39 c1                	cmp    %eax,%ecx
f011e126:	74 17                	je     f011e13f <test_kmalloc_firstfit2+0xa0d>
f011e128:	83 ec 04             	sub    $0x4,%esp
f011e12b:	68 c8 96 13 f0       	push   $0xf01396c8
f011e130:	68 f5 03 00 00       	push   $0x3f5
f011e135:	68 ae 92 13 f0       	push   $0xf01392ae
f011e13a:	e8 71 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e13f:	e8 40 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e144:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e147:	74 17                	je     f011e160 <test_kmalloc_firstfit2+0xa2e>
f011e149:	83 ec 04             	sub    $0x4,%esp
f011e14c:	68 c8 92 13 f0       	push   $0xf01392c8
f011e151:	68 f6 03 00 00       	push   $0x3f6
f011e156:	68 ae 92 13 f0       	push   $0xf01392ae
f011e15b:	e8 50 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e160:	e8 79 e8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e165:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e168:	29 c2                	sub    %eax,%edx
f011e16a:	89 d0                	mov    %edx,%eax
f011e16c:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e171:	74 17                	je     f011e18a <test_kmalloc_firstfit2+0xa58>
f011e173:	83 ec 04             	sub    $0x4,%esp
f011e176:	68 f8 96 13 f0       	push   $0xf01396f8
f011e17b:	68 f7 03 00 00       	push   $0x3f7
f011e180:	68 ae 92 13 f0       	push   $0xf01392ae
f011e185:	e8 26 20 fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e18a:	e8 4f e8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e18f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e192:	e8 ed 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e197:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e19a:	83 ec 0c             	sub    $0xc,%esp
f011e19d:	68 00 fc 2f 00       	push   $0x2ffc00
f011e1a2:	e8 b8 9d fe ff       	call   f0107f5f <kmalloc>
f011e1a7:	83 c4 10             	add    $0x10,%esp
f011e1aa:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e1b0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e1b6:	89 c1                	mov    %eax,%ecx
f011e1b8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e1bf:	10 00 00 
f011e1c2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e1c7:	0f b6 d0             	movzbl %al,%edx
f011e1ca:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e1d0:	01 d0                	add    %edx,%eax
f011e1d2:	48                   	dec    %eax
f011e1d3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e1d9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e1df:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1e4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e1ea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e1f0:	29 d0                	sub    %edx,%eax
f011e1f2:	89 c3                	mov    %eax,%ebx
f011e1f4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e1fb:	10 00 00 
f011e1fe:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e203:	0f b6 c0             	movzbl %al,%eax
f011e206:	c1 e0 04             	shl    $0x4,%eax
f011e209:	89 c2                	mov    %eax,%edx
f011e20b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e211:	01 d0                	add    %edx,%eax
f011e213:	48                   	dec    %eax
f011e214:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e21a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e220:	ba 00 00 00 00       	mov    $0x0,%edx
f011e225:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e22b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e231:	29 d0                	sub    %edx,%eax
f011e233:	01 d8                	add    %ebx,%eax
f011e235:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e23a:	39 c1                	cmp    %eax,%ecx
f011e23c:	74 17                	je     f011e255 <test_kmalloc_firstfit2+0xb23>
f011e23e:	83 ec 04             	sub    $0x4,%esp
f011e241:	68 c8 96 13 f0       	push   $0xf01396c8
f011e246:	68 05 04 00 00       	push   $0x405
f011e24b:	68 ae 92 13 f0       	push   $0xf01392ae
f011e250:	e8 5b 1f fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e255:	e8 2a 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e25a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e25d:	74 17                	je     f011e276 <test_kmalloc_firstfit2+0xb44>
f011e25f:	83 ec 04             	sub    $0x4,%esp
f011e262:	68 c8 92 13 f0       	push   $0xf01392c8
f011e267:	68 06 04 00 00       	push   $0x406
f011e26c:	68 ae 92 13 f0       	push   $0xf01392ae
f011e271:	e8 3a 1f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e276:	e8 63 e7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e27b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e27e:	29 c2                	sub    %eax,%edx
f011e280:	89 d0                	mov    %edx,%eax
f011e282:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e287:	74 17                	je     f011e2a0 <test_kmalloc_firstfit2+0xb6e>
f011e289:	83 ec 04             	sub    $0x4,%esp
f011e28c:	68 f8 96 13 f0       	push   $0xf01396f8
f011e291:	68 07 04 00 00       	push   $0x407
f011e296:	68 ae 92 13 f0       	push   $0xf01392ae
f011e29b:	e8 10 1f fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e2a0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e2a7:	10 00 00 
f011e2aa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e2af:	0f b6 d0             	movzbl %al,%edx
f011e2b2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e2b8:	01 d0                	add    %edx,%eax
f011e2ba:	48                   	dec    %eax
f011e2bb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e2c1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e2c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2cc:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e2d2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e2d8:	29 d0                	sub    %edx,%eax
f011e2da:	89 c1                	mov    %eax,%ecx
f011e2dc:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e2e3:	10 00 00 
f011e2e6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e2eb:	0f b6 c0             	movzbl %al,%eax
f011e2ee:	c1 e0 04             	shl    $0x4,%eax
f011e2f1:	89 c2                	mov    %eax,%edx
f011e2f3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e2f9:	01 d0                	add    %edx,%eax
f011e2fb:	48                   	dec    %eax
f011e2fc:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e302:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e308:	ba 00 00 00 00       	mov    $0x0,%edx
f011e30d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e313:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e319:	29 d0                	sub    %edx,%eax
f011e31b:	01 c8                	add    %ecx,%eax
f011e31d:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e322:	29 c2                	sub    %eax,%edx
f011e324:	89 d0                	mov    %edx,%eax
f011e326:	83 ec 0c             	sub    $0xc,%esp
f011e329:	50                   	push   %eax
f011e32a:	e8 30 9c fe ff       	call   f0107f5f <kmalloc>
f011e32f:	83 c4 10             	add    $0x10,%esp
f011e332:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e338:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e33e:	85 c0                	test   %eax,%eax
f011e340:	74 17                	je     f011e359 <test_kmalloc_firstfit2+0xc27>
f011e342:	83 ec 04             	sub    $0x4,%esp
f011e345:	68 f8 97 13 f0       	push   $0xf01397f8
f011e34a:	68 0d 04 00 00       	push   $0x40d
f011e34f:	68 ae 92 13 f0       	push   $0xf01392ae
f011e354:	e8 57 1e fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e359:	83 ec 0c             	sub    $0xc,%esp
f011e35c:	68 38 99 13 f0       	push   $0xf0139938
f011e361:	e8 cb 2a fe ff       	call   f0100e31 <cprintf>
f011e366:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e369:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e36e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e371:	5b                   	pop    %ebx
f011e372:	5f                   	pop    %edi
f011e373:	5d                   	pop    %ebp
f011e374:	c3                   	ret    

f011e375 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e375:	55                   	push   %ebp
f011e376:	89 e5                	mov    %esp,%ebp
f011e378:	57                   	push   %edi
f011e379:	53                   	push   %ebx
f011e37a:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e380:	83 ec 0c             	sub    $0xc,%esp
f011e383:	68 f0 91 13 f0       	push   $0xf01391f0
f011e388:	e8 a4 2a fe ff       	call   f0100e31 <cprintf>
f011e38d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e390:	83 ec 0c             	sub    $0xc,%esp
f011e393:	68 20 92 13 f0       	push   $0xf0139220
f011e398:	e8 94 2a fe ff       	call   f0100e31 <cprintf>
f011e39d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e3a0:	83 ec 0c             	sub    $0xc,%esp
f011e3a3:	68 f0 91 13 f0       	push   $0xf01391f0
f011e3a8:	e8 84 2a fe ff       	call   f0100e31 <cprintf>
f011e3ad:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e3b0:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e3b6:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e3bb:	b8 00 00 00 00       	mov    $0x0,%eax
f011e3c0:	89 d7                	mov    %edx,%edi
f011e3c2:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e3c4:	e8 15 e6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e3c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e3cc:	e8 b3 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e3d1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e3d4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e3db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e3e2:	eb 1f                	jmp    f011e403 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e3e4:	83 ec 0c             	sub    $0xc,%esp
f011e3e7:	68 00 00 20 00       	push   $0x200000
f011e3ec:	e8 6e 9b fe ff       	call   f0107f5f <kmalloc>
f011e3f1:	83 c4 10             	add    $0x10,%esp
f011e3f4:	89 c2                	mov    %eax,%edx
f011e3f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e3f9:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e400:	ff 45 f4             	incl   -0xc(%ebp)
f011e403:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e407:	7e db                	jle    f011e3e4 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e409:	83 ec 0c             	sub    $0xc,%esp
f011e40c:	68 00 b0 1f 00       	push   $0x1fb000
f011e411:	e8 49 9b fe ff       	call   f0107f5f <kmalloc>
f011e416:	83 c4 10             	add    $0x10,%esp
f011e419:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e41f:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e425:	89 c1                	mov    %eax,%ecx
f011e427:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e42e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e433:	0f b6 d0             	movzbl %al,%edx
f011e436:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e439:	01 d0                	add    %edx,%eax
f011e43b:	48                   	dec    %eax
f011e43c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e43f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e442:	ba 00 00 00 00       	mov    $0x0,%edx
f011e447:	f7 75 e4             	divl   -0x1c(%ebp)
f011e44a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e44d:	29 d0                	sub    %edx,%eax
f011e44f:	89 c3                	mov    %eax,%ebx
f011e451:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e458:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e45d:	0f b6 c0             	movzbl %al,%eax
f011e460:	c1 e0 04             	shl    $0x4,%eax
f011e463:	89 c2                	mov    %eax,%edx
f011e465:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e468:	01 d0                	add    %edx,%eax
f011e46a:	48                   	dec    %eax
f011e46b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e46e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e471:	ba 00 00 00 00       	mov    $0x0,%edx
f011e476:	f7 75 dc             	divl   -0x24(%ebp)
f011e479:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e47c:	29 d0                	sub    %edx,%eax
f011e47e:	01 d8                	add    %ebx,%eax
f011e480:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e485:	39 c1                	cmp    %eax,%ecx
f011e487:	0f 85 34 03 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e48d:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e493:	89 c1                	mov    %eax,%ecx
f011e495:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e49c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e4a1:	0f b6 d0             	movzbl %al,%edx
f011e4a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e4a7:	01 d0                	add    %edx,%eax
f011e4a9:	48                   	dec    %eax
f011e4aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e4ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e4b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4b5:	f7 75 d4             	divl   -0x2c(%ebp)
f011e4b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e4bb:	29 d0                	sub    %edx,%eax
f011e4bd:	89 c3                	mov    %eax,%ebx
f011e4bf:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e4c6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e4cb:	0f b6 c0             	movzbl %al,%eax
f011e4ce:	c1 e0 04             	shl    $0x4,%eax
f011e4d1:	89 c2                	mov    %eax,%edx
f011e4d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e4d6:	01 d0                	add    %edx,%eax
f011e4d8:	48                   	dec    %eax
f011e4d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e4dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e4df:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e4:	f7 75 cc             	divl   -0x34(%ebp)
f011e4e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e4ea:	29 d0                	sub    %edx,%eax
f011e4ec:	01 d8                	add    %ebx,%eax
f011e4ee:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e4f3:	39 c1                	cmp    %eax,%ecx
f011e4f5:	0f 85 c6 02 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e4fb:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e501:	89 c1                	mov    %eax,%ecx
f011e503:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e50a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e50f:	0f b6 d0             	movzbl %al,%edx
f011e512:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e515:	01 d0                	add    %edx,%eax
f011e517:	48                   	dec    %eax
f011e518:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e51b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e51e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e523:	f7 75 c4             	divl   -0x3c(%ebp)
f011e526:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e529:	29 d0                	sub    %edx,%eax
f011e52b:	89 c3                	mov    %eax,%ebx
f011e52d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e534:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e539:	0f b6 c0             	movzbl %al,%eax
f011e53c:	c1 e0 04             	shl    $0x4,%eax
f011e53f:	89 c2                	mov    %eax,%edx
f011e541:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e544:	01 d0                	add    %edx,%eax
f011e546:	48                   	dec    %eax
f011e547:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e54a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e54d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e552:	f7 75 bc             	divl   -0x44(%ebp)
f011e555:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e558:	29 d0                	sub    %edx,%eax
f011e55a:	01 d8                	add    %ebx,%eax
f011e55c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e561:	39 c1                	cmp    %eax,%ecx
f011e563:	0f 85 58 02 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e569:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e56f:	89 c1                	mov    %eax,%ecx
f011e571:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e578:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e57d:	0f b6 d0             	movzbl %al,%edx
f011e580:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e583:	01 d0                	add    %edx,%eax
f011e585:	48                   	dec    %eax
f011e586:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e589:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e58c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e591:	f7 75 b4             	divl   -0x4c(%ebp)
f011e594:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e597:	29 d0                	sub    %edx,%eax
f011e599:	89 c3                	mov    %eax,%ebx
f011e59b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e5a2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e5a7:	0f b6 c0             	movzbl %al,%eax
f011e5aa:	c1 e0 04             	shl    $0x4,%eax
f011e5ad:	89 c2                	mov    %eax,%edx
f011e5af:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e5b2:	01 d0                	add    %edx,%eax
f011e5b4:	48                   	dec    %eax
f011e5b5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e5b8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e5bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5c0:	f7 75 ac             	divl   -0x54(%ebp)
f011e5c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e5c6:	29 d0                	sub    %edx,%eax
f011e5c8:	01 d8                	add    %ebx,%eax
f011e5ca:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e5cf:	39 c1                	cmp    %eax,%ecx
f011e5d1:	0f 85 ea 01 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e5d7:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e5dd:	89 c1                	mov    %eax,%ecx
f011e5df:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e5e6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e5eb:	0f b6 d0             	movzbl %al,%edx
f011e5ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e5f1:	01 d0                	add    %edx,%eax
f011e5f3:	48                   	dec    %eax
f011e5f4:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e5f7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e5fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5ff:	f7 75 a4             	divl   -0x5c(%ebp)
f011e602:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e605:	29 d0                	sub    %edx,%eax
f011e607:	89 c3                	mov    %eax,%ebx
f011e609:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e610:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e615:	0f b6 c0             	movzbl %al,%eax
f011e618:	c1 e0 04             	shl    $0x4,%eax
f011e61b:	89 c2                	mov    %eax,%edx
f011e61d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e620:	01 d0                	add    %edx,%eax
f011e622:	48                   	dec    %eax
f011e623:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e626:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e629:	ba 00 00 00 00       	mov    $0x0,%edx
f011e62e:	f7 75 9c             	divl   -0x64(%ebp)
f011e631:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e634:	29 d0                	sub    %edx,%eax
f011e636:	01 d8                	add    %ebx,%eax
f011e638:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e63d:	39 c1                	cmp    %eax,%ecx
f011e63f:	0f 85 7c 01 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e645:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e64b:	89 c1                	mov    %eax,%ecx
f011e64d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e654:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e659:	0f b6 d0             	movzbl %al,%edx
f011e65c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e65f:	01 d0                	add    %edx,%eax
f011e661:	48                   	dec    %eax
f011e662:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e665:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e668:	ba 00 00 00 00       	mov    $0x0,%edx
f011e66d:	f7 75 94             	divl   -0x6c(%ebp)
f011e670:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e673:	29 d0                	sub    %edx,%eax
f011e675:	89 c3                	mov    %eax,%ebx
f011e677:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e67e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e683:	0f b6 c0             	movzbl %al,%eax
f011e686:	c1 e0 04             	shl    $0x4,%eax
f011e689:	89 c2                	mov    %eax,%edx
f011e68b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e68e:	01 d0                	add    %edx,%eax
f011e690:	48                   	dec    %eax
f011e691:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e694:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e697:	ba 00 00 00 00       	mov    $0x0,%edx
f011e69c:	f7 75 8c             	divl   -0x74(%ebp)
f011e69f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e6a2:	29 d0                	sub    %edx,%eax
f011e6a4:	01 d8                	add    %ebx,%eax
f011e6a6:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e6ab:	39 c1                	cmp    %eax,%ecx
f011e6ad:	0f 85 0e 01 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e6b3:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e6b9:	89 c1                	mov    %eax,%ecx
f011e6bb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e6c2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e6c7:	0f b6 d0             	movzbl %al,%edx
f011e6ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e6cd:	01 d0                	add    %edx,%eax
f011e6cf:	48                   	dec    %eax
f011e6d0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e6d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e6d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6db:	f7 75 84             	divl   -0x7c(%ebp)
f011e6de:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e6e1:	29 d0                	sub    %edx,%eax
f011e6e3:	89 c3                	mov    %eax,%ebx
f011e6e5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e6ec:	10 00 00 
f011e6ef:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e6f4:	0f b6 c0             	movzbl %al,%eax
f011e6f7:	c1 e0 04             	shl    $0x4,%eax
f011e6fa:	89 c2                	mov    %eax,%edx
f011e6fc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e702:	01 d0                	add    %edx,%eax
f011e704:	48                   	dec    %eax
f011e705:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e70b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e711:	ba 00 00 00 00       	mov    $0x0,%edx
f011e716:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e71c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e722:	29 d0                	sub    %edx,%eax
f011e724:	01 d8                	add    %ebx,%eax
f011e726:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e72b:	39 c1                	cmp    %eax,%ecx
f011e72d:	0f 85 8e 00 00 00    	jne    f011e7c1 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e733:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e739:	89 c1                	mov    %eax,%ecx
f011e73b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e742:	10 00 00 
f011e745:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e74a:	0f b6 d0             	movzbl %al,%edx
f011e74d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e753:	01 d0                	add    %edx,%eax
f011e755:	48                   	dec    %eax
f011e756:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e75c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e762:	ba 00 00 00 00       	mov    $0x0,%edx
f011e767:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e76d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e773:	29 d0                	sub    %edx,%eax
f011e775:	89 c3                	mov    %eax,%ebx
f011e777:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e77e:	10 00 00 
f011e781:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e786:	0f b6 c0             	movzbl %al,%eax
f011e789:	c1 e0 04             	shl    $0x4,%eax
f011e78c:	89 c2                	mov    %eax,%edx
f011e78e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e794:	01 d0                	add    %edx,%eax
f011e796:	48                   	dec    %eax
f011e797:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e79d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e7a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7a8:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e7ae:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e7b4:	29 d0                	sub    %edx,%eax
f011e7b6:	01 d8                	add    %ebx,%eax
f011e7b8:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e7bd:	39 c1                	cmp    %eax,%ecx
f011e7bf:	74 17                	je     f011e7d8 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e7c1:	83 ec 04             	sub    $0x4,%esp
f011e7c4:	68 84 99 13 f0       	push   $0xf0139984
f011e7c9:	68 31 04 00 00       	push   $0x431
f011e7ce:	68 ae 92 13 f0       	push   $0xf01392ae
f011e7d3:	e8 d8 19 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7d8:	e8 a7 5e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e7dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7e0:	74 17                	je     f011e7f9 <test_kmalloc_worstfit+0x484>
f011e7e2:	83 ec 04             	sub    $0x4,%esp
f011e7e5:	68 c8 92 13 f0       	push   $0xf01392c8
f011e7ea:	68 33 04 00 00       	push   $0x433
f011e7ef:	68 ae 92 13 f0       	push   $0xf01392ae
f011e7f4:	e8 b7 19 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e7f9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7fc:	e8 dd e1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e801:	29 c3                	sub    %eax,%ebx
f011e803:	89 d8                	mov    %ebx,%eax
f011e805:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e80a:	74 17                	je     f011e823 <test_kmalloc_worstfit+0x4ae>
f011e80c:	83 ec 04             	sub    $0x4,%esp
f011e80f:	68 6b 95 13 f0       	push   $0xf013956b
f011e814:	68 34 04 00 00       	push   $0x434
f011e819:	68 ae 92 13 f0       	push   $0xf01392ae
f011e81e:	e8 8d 19 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e823:	e8 b6 e1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e828:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e82b:	e8 54 5e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e830:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e833:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e839:	83 ec 0c             	sub    $0xc,%esp
f011e83c:	50                   	push   %eax
f011e83d:	e8 37 97 fe ff       	call   f0107f79 <kfree>
f011e842:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e845:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e84b:	83 ec 0c             	sub    $0xc,%esp
f011e84e:	50                   	push   %eax
f011e84f:	e8 25 97 fe ff       	call   f0107f79 <kfree>
f011e854:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e857:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011e85d:	83 ec 0c             	sub    $0xc,%esp
f011e860:	50                   	push   %eax
f011e861:	e8 13 97 fe ff       	call   f0107f79 <kfree>
f011e866:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e869:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e86f:	83 ec 0c             	sub    $0xc,%esp
f011e872:	50                   	push   %eax
f011e873:	e8 01 97 fe ff       	call   f0107f79 <kfree>
f011e878:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e87b:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011e881:	83 ec 0c             	sub    $0xc,%esp
f011e884:	50                   	push   %eax
f011e885:	e8 ef 96 fe ff       	call   f0107f79 <kfree>
f011e88a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e88d:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011e893:	83 ec 0c             	sub    $0xc,%esp
f011e896:	50                   	push   %eax
f011e897:	e8 dd 96 fe ff       	call   f0107f79 <kfree>
f011e89c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e89f:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011e8a5:	83 ec 0c             	sub    $0xc,%esp
f011e8a8:	50                   	push   %eax
f011e8a9:	e8 cb 96 fe ff       	call   f0107f79 <kfree>
f011e8ae:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e8b1:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011e8b7:	83 ec 0c             	sub    $0xc,%esp
f011e8ba:	50                   	push   %eax
f011e8bb:	e8 b9 96 fe ff       	call   f0107f79 <kfree>
f011e8c0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e8c3:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011e8c9:	83 ec 0c             	sub    $0xc,%esp
f011e8cc:	50                   	push   %eax
f011e8cd:	e8 a7 96 fe ff       	call   f0107f79 <kfree>
f011e8d2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e8d5:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011e8db:	83 ec 0c             	sub    $0xc,%esp
f011e8de:	50                   	push   %eax
f011e8df:	e8 95 96 fe ff       	call   f0107f79 <kfree>
f011e8e4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e8e7:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e8ed:	83 ec 0c             	sub    $0xc,%esp
f011e8f0:	50                   	push   %eax
f011e8f1:	e8 83 96 fe ff       	call   f0107f79 <kfree>
f011e8f6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e8f9:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e8ff:	83 ec 0c             	sub    $0xc,%esp
f011e902:	50                   	push   %eax
f011e903:	e8 71 96 fe ff       	call   f0107f79 <kfree>
f011e908:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e90b:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011e911:	83 ec 0c             	sub    $0xc,%esp
f011e914:	50                   	push   %eax
f011e915:	e8 5f 96 fe ff       	call   f0107f79 <kfree>
f011e91a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e91d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011e923:	83 ec 0c             	sub    $0xc,%esp
f011e926:	50                   	push   %eax
f011e927:	e8 4d 96 fe ff       	call   f0107f79 <kfree>
f011e92c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e92f:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011e935:	83 ec 0c             	sub    $0xc,%esp
f011e938:	50                   	push   %eax
f011e939:	e8 3b 96 fe ff       	call   f0107f79 <kfree>
f011e93e:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e941:	e8 3e 5d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e946:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e949:	74 17                	je     f011e962 <test_kmalloc_worstfit+0x5ed>
f011e94b:	83 ec 04             	sub    $0x4,%esp
f011e94e:	68 c8 92 13 f0       	push   $0xf01392c8
f011e953:	68 4a 04 00 00       	push   $0x44a
f011e958:	68 ae 92 13 f0       	push   $0xf01392ae
f011e95d:	e8 4e 18 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e962:	e8 77 e0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e967:	89 c2                	mov    %eax,%edx
f011e969:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e96c:	29 c2                	sub    %eax,%edx
f011e96e:	89 d0                	mov    %edx,%eax
f011e970:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e975:	74 17                	je     f011e98e <test_kmalloc_worstfit+0x619>
f011e977:	83 ec 04             	sub    $0x4,%esp
f011e97a:	68 7c 95 13 f0       	push   $0xf013957c
f011e97f:	68 4b 04 00 00       	push   $0x44b
f011e984:	68 ae 92 13 f0       	push   $0xf01392ae
f011e989:	e8 22 18 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e98e:	e8 4b e0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011e993:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e996:	e8 e9 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e99b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e99e:	83 ec 0c             	sub    $0xc,%esp
f011e9a1:	68 00 00 10 00       	push   $0x100000
f011e9a6:	e8 b4 95 fe ff       	call   f0107f5f <kmalloc>
f011e9ab:	83 c4 10             	add    $0x10,%esp
f011e9ae:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e9b4:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011e9bb:	10 00 00 
f011e9be:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e9c3:	0f b6 d0             	movzbl %al,%edx
f011e9c6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e9cc:	01 d0                	add    %edx,%eax
f011e9ce:	48                   	dec    %eax
f011e9cf:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011e9d5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e9db:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9e0:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011e9e6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e9ec:	29 d0                	sub    %edx,%eax
f011e9ee:	89 c1                	mov    %eax,%ecx
f011e9f0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011e9f7:	10 00 00 
f011e9fa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011e9ff:	0f b6 c0             	movzbl %al,%eax
f011ea02:	c1 e0 04             	shl    $0x4,%eax
f011ea05:	89 c2                	mov    %eax,%edx
f011ea07:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ea0d:	01 d0                	add    %edx,%eax
f011ea0f:	48                   	dec    %eax
f011ea10:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011ea16:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ea1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea21:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011ea27:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ea2d:	29 d0                	sub    %edx,%eax
f011ea2f:	01 c8                	add    %ecx,%eax
f011ea31:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ea37:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ea3d:	39 c2                	cmp    %eax,%edx
f011ea3f:	74 17                	je     f011ea58 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011ea41:	83 ec 04             	sub    $0x4,%esp
f011ea44:	68 c8 99 13 f0       	push   $0xf01399c8
f011ea49:	68 52 04 00 00       	push   $0x452
f011ea4e:	68 ae 92 13 f0       	push   $0xf01392ae
f011ea53:	e8 58 17 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea58:	e8 27 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ea5d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea60:	74 17                	je     f011ea79 <test_kmalloc_worstfit+0x704>
f011ea62:	83 ec 04             	sub    $0x4,%esp
f011ea65:	68 c8 92 13 f0       	push   $0xf01392c8
f011ea6a:	68 53 04 00 00       	push   $0x453
f011ea6f:	68 ae 92 13 f0       	push   $0xf01392ae
f011ea74:	e8 37 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea79:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea7c:	e8 5d df fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ea81:	29 c3                	sub    %eax,%ebx
f011ea83:	89 d8                	mov    %ebx,%eax
f011ea85:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ea8a:	74 17                	je     f011eaa3 <test_kmalloc_worstfit+0x72e>
f011ea8c:	83 ec 04             	sub    $0x4,%esp
f011ea8f:	68 e6 97 13 f0       	push   $0xf01397e6
f011ea94:	68 54 04 00 00       	push   $0x454
f011ea99:	68 ae 92 13 f0       	push   $0xf01392ae
f011ea9e:	e8 0d 17 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eaa3:	ff 45 e8             	incl   -0x18(%ebp)
f011eaa6:	83 ec 08             	sub    $0x8,%esp
f011eaa9:	ff 75 e8             	pushl  -0x18(%ebp)
f011eaac:	68 e8 99 13 f0       	push   $0xf01399e8
f011eab1:	e8 7b 23 fe ff       	call   f0100e31 <cprintf>
f011eab6:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eab9:	e8 20 df fe ff       	call   f010c9de <sys_calculate_free_frames>
f011eabe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eac1:	e8 be 5b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eac6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011eac9:	83 ec 0c             	sub    $0xc,%esp
f011eacc:	68 00 00 40 00       	push   $0x400000
f011ead1:	e8 89 94 fe ff       	call   f0107f5f <kmalloc>
f011ead6:	83 c4 10             	add    $0x10,%esp
f011ead9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011eadf:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011eae6:	10 00 00 
f011eae9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011eaee:	0f b6 d0             	movzbl %al,%edx
f011eaf1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eaf7:	01 d0                	add    %edx,%eax
f011eaf9:	48                   	dec    %eax
f011eafa:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011eb00:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eb06:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb0b:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011eb11:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eb17:	29 d0                	sub    %edx,%eax
f011eb19:	89 c1                	mov    %eax,%ecx
f011eb1b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011eb22:	10 00 00 
f011eb25:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011eb2a:	0f b6 c0             	movzbl %al,%eax
f011eb2d:	c1 e0 04             	shl    $0x4,%eax
f011eb30:	89 c2                	mov    %eax,%edx
f011eb32:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011eb38:	01 d0                	add    %edx,%eax
f011eb3a:	48                   	dec    %eax
f011eb3b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011eb41:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eb47:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011eb52:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eb58:	29 d0                	sub    %edx,%eax
f011eb5a:	01 c8                	add    %ecx,%eax
f011eb5c:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011eb62:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb68:	39 c2                	cmp    %eax,%edx
f011eb6a:	74 17                	je     f011eb83 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011eb6c:	83 ec 04             	sub    $0x4,%esp
f011eb6f:	68 c8 99 13 f0       	push   $0xf01399c8
f011eb74:	68 5b 04 00 00       	push   $0x45b
f011eb79:	68 ae 92 13 f0       	push   $0xf01392ae
f011eb7e:	e8 2d 16 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb83:	e8 fc 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eb88:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eb8b:	74 17                	je     f011eba4 <test_kmalloc_worstfit+0x82f>
f011eb8d:	83 ec 04             	sub    $0x4,%esp
f011eb90:	68 c8 92 13 f0       	push   $0xf01392c8
f011eb95:	68 5c 04 00 00       	push   $0x45c
f011eb9a:	68 ae 92 13 f0       	push   $0xf01392ae
f011eb9f:	e8 0c 16 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eba4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eba7:	e8 32 de fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ebac:	29 c3                	sub    %eax,%ebx
f011ebae:	89 d8                	mov    %ebx,%eax
f011ebb0:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ebb5:	74 17                	je     f011ebce <test_kmalloc_worstfit+0x859>
f011ebb7:	83 ec 04             	sub    $0x4,%esp
f011ebba:	68 e6 97 13 f0       	push   $0xf01397e6
f011ebbf:	68 5d 04 00 00       	push   $0x45d
f011ebc4:	68 ae 92 13 f0       	push   $0xf01392ae
f011ebc9:	e8 e2 15 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ebce:	ff 45 e8             	incl   -0x18(%ebp)
f011ebd1:	83 ec 08             	sub    $0x8,%esp
f011ebd4:	ff 75 e8             	pushl  -0x18(%ebp)
f011ebd7:	68 e8 99 13 f0       	push   $0xf01399e8
f011ebdc:	e8 50 22 fe ff       	call   f0100e31 <cprintf>
f011ebe1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ebe4:	e8 f5 dd fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ebe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ebec:	e8 93 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ebf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ebf4:	83 ec 0c             	sub    $0xc,%esp
f011ebf7:	68 00 00 60 00       	push   $0x600000
f011ebfc:	e8 5e 93 fe ff       	call   f0107f5f <kmalloc>
f011ec01:	83 c4 10             	add    $0x10,%esp
f011ec04:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ec0a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011ec11:	10 00 00 
f011ec14:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ec19:	0f b6 d0             	movzbl %al,%edx
f011ec1c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ec22:	01 d0                	add    %edx,%eax
f011ec24:	48                   	dec    %eax
f011ec25:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011ec2b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec36:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011ec3c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec42:	29 d0                	sub    %edx,%eax
f011ec44:	89 c1                	mov    %eax,%ecx
f011ec46:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011ec4d:	10 00 00 
f011ec50:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ec55:	0f b6 c0             	movzbl %al,%eax
f011ec58:	c1 e0 04             	shl    $0x4,%eax
f011ec5b:	89 c2                	mov    %eax,%edx
f011ec5d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ec63:	01 d0                	add    %edx,%eax
f011ec65:	48                   	dec    %eax
f011ec66:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011ec6c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec72:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec77:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011ec7d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ec83:	29 d0                	sub    %edx,%eax
f011ec85:	01 c8                	add    %ecx,%eax
f011ec87:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ec8d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ec93:	39 c2                	cmp    %eax,%edx
f011ec95:	74 17                	je     f011ecae <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011ec97:	83 ec 04             	sub    $0x4,%esp
f011ec9a:	68 c8 99 13 f0       	push   $0xf01399c8
f011ec9f:	68 64 04 00 00       	push   $0x464
f011eca4:	68 ae 92 13 f0       	push   $0xf01392ae
f011eca9:	e8 02 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecae:	e8 d1 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ecb3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ecb6:	74 17                	je     f011eccf <test_kmalloc_worstfit+0x95a>
f011ecb8:	83 ec 04             	sub    $0x4,%esp
f011ecbb:	68 c8 92 13 f0       	push   $0xf01392c8
f011ecc0:	68 65 04 00 00       	push   $0x465
f011ecc5:	68 ae 92 13 f0       	push   $0xf01392ae
f011ecca:	e8 e1 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eccf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ecd2:	e8 07 dd fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ecd7:	29 c3                	sub    %eax,%ebx
f011ecd9:	89 d8                	mov    %ebx,%eax
f011ecdb:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ece0:	74 17                	je     f011ecf9 <test_kmalloc_worstfit+0x984>
f011ece2:	83 ec 04             	sub    $0x4,%esp
f011ece5:	68 e6 97 13 f0       	push   $0xf01397e6
f011ecea:	68 66 04 00 00       	push   $0x466
f011ecef:	68 ae 92 13 f0       	push   $0xf01392ae
f011ecf4:	e8 b7 14 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ecf9:	ff 45 e8             	incl   -0x18(%ebp)
f011ecfc:	83 ec 08             	sub    $0x8,%esp
f011ecff:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed02:	68 e8 99 13 f0       	push   $0xf01399e8
f011ed07:	e8 25 21 fe ff       	call   f0100e31 <cprintf>
f011ed0c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed0f:	e8 ca dc fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ed14:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed17:	e8 68 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ed1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ed1f:	83 ec 0c             	sub    $0xc,%esp
f011ed22:	68 00 00 50 00       	push   $0x500000
f011ed27:	e8 33 92 fe ff       	call   f0107f5f <kmalloc>
f011ed2c:	83 c4 10             	add    $0x10,%esp
f011ed2f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ed35:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011ed3c:	10 00 00 
f011ed3f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ed44:	0f b6 d0             	movzbl %al,%edx
f011ed47:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ed4d:	01 d0                	add    %edx,%eax
f011ed4f:	48                   	dec    %eax
f011ed50:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011ed56:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed61:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011ed67:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed6d:	29 d0                	sub    %edx,%eax
f011ed6f:	89 c1                	mov    %eax,%ecx
f011ed71:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011ed78:	10 00 00 
f011ed7b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ed80:	0f b6 c0             	movzbl %al,%eax
f011ed83:	c1 e0 04             	shl    $0x4,%eax
f011ed86:	89 c2                	mov    %eax,%edx
f011ed88:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ed8e:	01 d0                	add    %edx,%eax
f011ed90:	48                   	dec    %eax
f011ed91:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011ed97:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011eda2:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011eda8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011edae:	29 d0                	sub    %edx,%eax
f011edb0:	01 c8                	add    %ecx,%eax
f011edb2:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011edb8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011edbe:	39 c2                	cmp    %eax,%edx
f011edc0:	74 17                	je     f011edd9 <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011edc2:	83 ec 04             	sub    $0x4,%esp
f011edc5:	68 c8 99 13 f0       	push   $0xf01399c8
f011edca:	68 6d 04 00 00       	push   $0x46d
f011edcf:	68 ae 92 13 f0       	push   $0xf01392ae
f011edd4:	e8 d7 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011edd9:	e8 a6 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011edde:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ede1:	74 17                	je     f011edfa <test_kmalloc_worstfit+0xa85>
f011ede3:	83 ec 04             	sub    $0x4,%esp
f011ede6:	68 c8 92 13 f0       	push   $0xf01392c8
f011edeb:	68 6e 04 00 00       	push   $0x46e
f011edf0:	68 ae 92 13 f0       	push   $0xf01392ae
f011edf5:	e8 b6 13 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011edfa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011edfd:	e8 dc db fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ee02:	29 c3                	sub    %eax,%ebx
f011ee04:	89 d8                	mov    %ebx,%eax
f011ee06:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ee0b:	74 17                	je     f011ee24 <test_kmalloc_worstfit+0xaaf>
f011ee0d:	83 ec 04             	sub    $0x4,%esp
f011ee10:	68 e6 97 13 f0       	push   $0xf01397e6
f011ee15:	68 6f 04 00 00       	push   $0x46f
f011ee1a:	68 ae 92 13 f0       	push   $0xf01392ae
f011ee1f:	e8 8c 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee24:	ff 45 e8             	incl   -0x18(%ebp)
f011ee27:	83 ec 08             	sub    $0x8,%esp
f011ee2a:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee2d:	68 e8 99 13 f0       	push   $0xf01399e8
f011ee32:	e8 fa 1f fe ff       	call   f0100e31 <cprintf>
f011ee37:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ee3a:	e8 9f db fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ee3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee42:	e8 3d 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee47:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ee4a:	83 ec 0c             	sub    $0xc,%esp
f011ee4d:	68 00 00 40 00       	push   $0x400000
f011ee52:	e8 08 91 fe ff       	call   f0107f5f <kmalloc>
f011ee57:	83 c4 10             	add    $0x10,%esp
f011ee5a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ee60:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ee67:	10 00 00 
f011ee6a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ee6f:	0f b6 d0             	movzbl %al,%edx
f011ee72:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ee78:	01 d0                	add    %edx,%eax
f011ee7a:	48                   	dec    %eax
f011ee7b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011ee81:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ee87:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee8c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011ee92:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ee98:	29 d0                	sub    %edx,%eax
f011ee9a:	89 c1                	mov    %eax,%ecx
f011ee9c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011eea3:	10 00 00 
f011eea6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011eeab:	0f b6 c0             	movzbl %al,%eax
f011eeae:	c1 e0 04             	shl    $0x4,%eax
f011eeb1:	89 c2                	mov    %eax,%edx
f011eeb3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011eeb9:	01 d0                	add    %edx,%eax
f011eebb:	48                   	dec    %eax
f011eebc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011eec2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eec8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eecd:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011eed3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eed9:	29 d0                	sub    %edx,%eax
f011eedb:	01 c8                	add    %ecx,%eax
f011eedd:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011eee3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eee9:	39 c2                	cmp    %eax,%edx
f011eeeb:	74 17                	je     f011ef04 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011eeed:	83 ec 04             	sub    $0x4,%esp
f011eef0:	68 c8 99 13 f0       	push   $0xf01399c8
f011eef5:	68 76 04 00 00       	push   $0x476
f011eefa:	68 ae 92 13 f0       	push   $0xf01392ae
f011eeff:	e8 ac 12 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef04:	e8 7b 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ef09:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef0c:	74 17                	je     f011ef25 <test_kmalloc_worstfit+0xbb0>
f011ef0e:	83 ec 04             	sub    $0x4,%esp
f011ef11:	68 c8 92 13 f0       	push   $0xf01392c8
f011ef16:	68 77 04 00 00       	push   $0x477
f011ef1b:	68 ae 92 13 f0       	push   $0xf01392ae
f011ef20:	e8 8b 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ef25:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ef28:	e8 b1 da fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ef2d:	29 c3                	sub    %eax,%ebx
f011ef2f:	89 d8                	mov    %ebx,%eax
f011ef31:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ef36:	74 17                	je     f011ef4f <test_kmalloc_worstfit+0xbda>
f011ef38:	83 ec 04             	sub    $0x4,%esp
f011ef3b:	68 e6 97 13 f0       	push   $0xf01397e6
f011ef40:	68 78 04 00 00       	push   $0x478
f011ef45:	68 ae 92 13 f0       	push   $0xf01392ae
f011ef4a:	e8 61 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef4f:	ff 45 e8             	incl   -0x18(%ebp)
f011ef52:	83 ec 08             	sub    $0x8,%esp
f011ef55:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef58:	68 e8 99 13 f0       	push   $0xf01399e8
f011ef5d:	e8 cf 1e fe ff       	call   f0100e31 <cprintf>
f011ef62:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef65:	e8 74 da fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ef6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef6d:	e8 12 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ef72:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011ef75:	83 ec 0c             	sub    $0xc,%esp
f011ef78:	68 00 00 20 00       	push   $0x200000
f011ef7d:	e8 dd 8f fe ff       	call   f0107f5f <kmalloc>
f011ef82:	83 c4 10             	add    $0x10,%esp
f011ef85:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011ef8b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ef92:	10 00 00 
f011ef95:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011ef9a:	0f b6 d0             	movzbl %al,%edx
f011ef9d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011efa3:	01 d0                	add    %edx,%eax
f011efa5:	48                   	dec    %eax
f011efa6:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011efac:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011efb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011efb7:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011efbd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011efc3:	29 d0                	sub    %edx,%eax
f011efc5:	89 c1                	mov    %eax,%ecx
f011efc7:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011efce:	10 00 00 
f011efd1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011efd6:	0f b6 c0             	movzbl %al,%eax
f011efd9:	c1 e0 04             	shl    $0x4,%eax
f011efdc:	89 c2                	mov    %eax,%edx
f011efde:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011efe4:	01 d0                	add    %edx,%eax
f011efe6:	48                   	dec    %eax
f011efe7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011efed:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eff3:	ba 00 00 00 00       	mov    $0x0,%edx
f011eff8:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011effe:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f004:	29 d0                	sub    %edx,%eax
f011f006:	01 c8                	add    %ecx,%eax
f011f008:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f00e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f014:	39 c2                	cmp    %eax,%edx
f011f016:	74 17                	je     f011f02f <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011f018:	83 ec 04             	sub    $0x4,%esp
f011f01b:	68 c8 99 13 f0       	push   $0xf01399c8
f011f020:	68 7f 04 00 00       	push   $0x47f
f011f025:	68 ae 92 13 f0       	push   $0xf01392ae
f011f02a:	e8 81 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f02f:	e8 50 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f034:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f037:	74 17                	je     f011f050 <test_kmalloc_worstfit+0xcdb>
f011f039:	83 ec 04             	sub    $0x4,%esp
f011f03c:	68 c8 92 13 f0       	push   $0xf01392c8
f011f041:	68 80 04 00 00       	push   $0x480
f011f046:	68 ae 92 13 f0       	push   $0xf01392ae
f011f04b:	e8 60 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f050:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f053:	e8 86 d9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f058:	29 c3                	sub    %eax,%ebx
f011f05a:	89 d8                	mov    %ebx,%eax
f011f05c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f061:	74 17                	je     f011f07a <test_kmalloc_worstfit+0xd05>
f011f063:	83 ec 04             	sub    $0x4,%esp
f011f066:	68 e6 97 13 f0       	push   $0xf01397e6
f011f06b:	68 81 04 00 00       	push   $0x481
f011f070:	68 ae 92 13 f0       	push   $0xf01392ae
f011f075:	e8 36 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f07a:	ff 45 e8             	incl   -0x18(%ebp)
f011f07d:	83 ec 08             	sub    $0x8,%esp
f011f080:	ff 75 e8             	pushl  -0x18(%ebp)
f011f083:	68 e8 99 13 f0       	push   $0xf01399e8
f011f088:	e8 a4 1d fe ff       	call   f0100e31 <cprintf>
f011f08d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f090:	e8 49 d9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f095:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f098:	e8 e7 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f09d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f0a0:	83 ec 0c             	sub    $0xc,%esp
f011f0a3:	68 00 00 18 00       	push   $0x180000
f011f0a8:	e8 b2 8e fe ff       	call   f0107f5f <kmalloc>
f011f0ad:	83 c4 10             	add    $0x10,%esp
f011f0b0:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f0b6:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f0bd:	10 00 00 
f011f0c0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f0c5:	0f b6 d0             	movzbl %al,%edx
f011f0c8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f0ce:	01 d0                	add    %edx,%eax
f011f0d0:	48                   	dec    %eax
f011f0d1:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f0d7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f0dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e2:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f0e8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f0ee:	29 d0                	sub    %edx,%eax
f011f0f0:	89 c1                	mov    %eax,%ecx
f011f0f2:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f0f9:	10 00 00 
f011f0fc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f101:	0f b6 c0             	movzbl %al,%eax
f011f104:	c1 e0 04             	shl    $0x4,%eax
f011f107:	89 c2                	mov    %eax,%edx
f011f109:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f10f:	01 d0                	add    %edx,%eax
f011f111:	48                   	dec    %eax
f011f112:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f118:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f11e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f123:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f129:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f12f:	29 d0                	sub    %edx,%eax
f011f131:	01 c8                	add    %ecx,%eax
f011f133:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f139:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f13f:	39 c2                	cmp    %eax,%edx
f011f141:	74 17                	je     f011f15a <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f143:	83 ec 04             	sub    $0x4,%esp
f011f146:	68 c8 99 13 f0       	push   $0xf01399c8
f011f14b:	68 88 04 00 00       	push   $0x488
f011f150:	68 ae 92 13 f0       	push   $0xf01392ae
f011f155:	e8 56 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f15a:	e8 25 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f15f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f162:	74 17                	je     f011f17b <test_kmalloc_worstfit+0xe06>
f011f164:	83 ec 04             	sub    $0x4,%esp
f011f167:	68 c8 92 13 f0       	push   $0xf01392c8
f011f16c:	68 89 04 00 00       	push   $0x489
f011f171:	68 ae 92 13 f0       	push   $0xf01392ae
f011f176:	e8 35 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f17b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f17e:	e8 5b d8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f183:	29 c3                	sub    %eax,%ebx
f011f185:	89 d8                	mov    %ebx,%eax
f011f187:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f18c:	74 17                	je     f011f1a5 <test_kmalloc_worstfit+0xe30>
f011f18e:	83 ec 04             	sub    $0x4,%esp
f011f191:	68 e6 97 13 f0       	push   $0xf01397e6
f011f196:	68 8a 04 00 00       	push   $0x48a
f011f19b:	68 ae 92 13 f0       	push   $0xf01392ae
f011f1a0:	e8 0b 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1a5:	ff 45 e8             	incl   -0x18(%ebp)
f011f1a8:	83 ec 08             	sub    $0x8,%esp
f011f1ab:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1ae:	68 e8 99 13 f0       	push   $0xf01399e8
f011f1b3:	e8 79 1c fe ff       	call   f0100e31 <cprintf>
f011f1b8:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1bb:	e8 1e d8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f1c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1c3:	e8 bc 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f1c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f1cb:	83 ec 0c             	sub    $0xc,%esp
f011f1ce:	68 00 00 08 00       	push   $0x80000
f011f1d3:	e8 87 8d fe ff       	call   f0107f5f <kmalloc>
f011f1d8:	83 c4 10             	add    $0x10,%esp
f011f1db:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f1e1:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f1e8:	10 00 00 
f011f1eb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f1f0:	0f b6 d0             	movzbl %al,%edx
f011f1f3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f1f9:	01 d0                	add    %edx,%eax
f011f1fb:	48                   	dec    %eax
f011f1fc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f202:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f208:	ba 00 00 00 00       	mov    $0x0,%edx
f011f20d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f213:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f219:	29 d0                	sub    %edx,%eax
f011f21b:	89 c1                	mov    %eax,%ecx
f011f21d:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f224:	10 00 00 
f011f227:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f22c:	0f b6 c0             	movzbl %al,%eax
f011f22f:	c1 e0 04             	shl    $0x4,%eax
f011f232:	89 c2                	mov    %eax,%edx
f011f234:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f23a:	01 d0                	add    %edx,%eax
f011f23c:	48                   	dec    %eax
f011f23d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f243:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f249:	ba 00 00 00 00       	mov    $0x0,%edx
f011f24e:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f254:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f25a:	29 d0                	sub    %edx,%eax
f011f25c:	01 c8                	add    %ecx,%eax
f011f25e:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f264:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f26a:	39 c2                	cmp    %eax,%edx
f011f26c:	74 17                	je     f011f285 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f26e:	83 ec 04             	sub    $0x4,%esp
f011f271:	68 c8 99 13 f0       	push   $0xf01399c8
f011f276:	68 91 04 00 00       	push   $0x491
f011f27b:	68 ae 92 13 f0       	push   $0xf01392ae
f011f280:	e8 2b 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f285:	e8 fa 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f28a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f28d:	74 17                	je     f011f2a6 <test_kmalloc_worstfit+0xf31>
f011f28f:	83 ec 04             	sub    $0x4,%esp
f011f292:	68 c8 92 13 f0       	push   $0xf01392c8
f011f297:	68 92 04 00 00       	push   $0x492
f011f29c:	68 ae 92 13 f0       	push   $0xf01392ae
f011f2a1:	e8 0a 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f2a6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2a9:	e8 30 d7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f2ae:	29 c3                	sub    %eax,%ebx
f011f2b0:	89 d8                	mov    %ebx,%eax
f011f2b2:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f2b7:	74 17                	je     f011f2d0 <test_kmalloc_worstfit+0xf5b>
f011f2b9:	83 ec 04             	sub    $0x4,%esp
f011f2bc:	68 e6 97 13 f0       	push   $0xf01397e6
f011f2c1:	68 93 04 00 00       	push   $0x493
f011f2c6:	68 ae 92 13 f0       	push   $0xf01392ae
f011f2cb:	e8 e0 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f2d0:	ff 45 e8             	incl   -0x18(%ebp)
f011f2d3:	83 ec 08             	sub    $0x8,%esp
f011f2d6:	ff 75 e8             	pushl  -0x18(%ebp)
f011f2d9:	68 e8 99 13 f0       	push   $0xf01399e8
f011f2de:	e8 4e 1b fe ff       	call   f0100e31 <cprintf>
f011f2e3:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f2e6:	e8 f3 d6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f2eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f2ee:	e8 91 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f2f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f2f6:	83 ec 0c             	sub    $0xc,%esp
f011f2f9:	68 00 04 00 00       	push   $0x400
f011f2fe:	e8 5c 8c fe ff       	call   f0107f5f <kmalloc>
f011f303:	83 c4 10             	add    $0x10,%esp
f011f306:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f30c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f313:	10 00 00 
f011f316:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f31b:	0f b6 d0             	movzbl %al,%edx
f011f31e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f324:	01 d0                	add    %edx,%eax
f011f326:	48                   	dec    %eax
f011f327:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f32d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f333:	ba 00 00 00 00       	mov    $0x0,%edx
f011f338:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f33e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f344:	29 d0                	sub    %edx,%eax
f011f346:	89 c1                	mov    %eax,%ecx
f011f348:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f34f:	10 00 00 
f011f352:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f357:	0f b6 c0             	movzbl %al,%eax
f011f35a:	c1 e0 04             	shl    $0x4,%eax
f011f35d:	89 c2                	mov    %eax,%edx
f011f35f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f365:	01 d0                	add    %edx,%eax
f011f367:	48                   	dec    %eax
f011f368:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f36e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f374:	ba 00 00 00 00       	mov    $0x0,%edx
f011f379:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f37f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f385:	29 d0                	sub    %edx,%eax
f011f387:	01 c8                	add    %ecx,%eax
f011f389:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f38f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f395:	39 c2                	cmp    %eax,%edx
f011f397:	74 17                	je     f011f3b0 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f399:	83 ec 04             	sub    $0x4,%esp
f011f39c:	68 c8 99 13 f0       	push   $0xf01399c8
f011f3a1:	68 9a 04 00 00       	push   $0x49a
f011f3a6:	68 ae 92 13 f0       	push   $0xf01392ae
f011f3ab:	e8 00 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3b0:	e8 cf 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f3b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3b8:	74 17                	je     f011f3d1 <test_kmalloc_worstfit+0x105c>
f011f3ba:	83 ec 04             	sub    $0x4,%esp
f011f3bd:	68 c8 92 13 f0       	push   $0xf01392c8
f011f3c2:	68 9b 04 00 00       	push   $0x49b
f011f3c7:	68 ae 92 13 f0       	push   $0xf01392ae
f011f3cc:	e8 df 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f3d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f3d4:	e8 05 d6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f3d9:	29 c3                	sub    %eax,%ebx
f011f3db:	89 d8                	mov    %ebx,%eax
f011f3dd:	83 f8 01             	cmp    $0x1,%eax
f011f3e0:	74 17                	je     f011f3f9 <test_kmalloc_worstfit+0x1084>
f011f3e2:	83 ec 04             	sub    $0x4,%esp
f011f3e5:	68 e6 97 13 f0       	push   $0xf01397e6
f011f3ea:	68 9c 04 00 00       	push   $0x49c
f011f3ef:	68 ae 92 13 f0       	push   $0xf01392ae
f011f3f4:	e8 b7 0d fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f3f9:	ff 45 e8             	incl   -0x18(%ebp)
f011f3fc:	83 ec 08             	sub    $0x8,%esp
f011f3ff:	ff 75 e8             	pushl  -0x18(%ebp)
f011f402:	68 e8 99 13 f0       	push   $0xf01399e8
f011f407:	e8 25 1a fe ff       	call   f0100e31 <cprintf>
f011f40c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f40f:	e8 ca d5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f414:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f417:	e8 68 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f41c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f41f:	83 ec 0c             	sub    $0xc,%esp
f011f422:	68 00 f0 1f 00       	push   $0x1ff000
f011f427:	e8 33 8b fe ff       	call   f0107f5f <kmalloc>
f011f42c:	83 c4 10             	add    $0x10,%esp
f011f42f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f435:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f43c:	10 00 00 
f011f43f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f444:	0f b6 d0             	movzbl %al,%edx
f011f447:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f44d:	01 d0                	add    %edx,%eax
f011f44f:	48                   	dec    %eax
f011f450:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f456:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f45c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f461:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f467:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f46d:	29 d0                	sub    %edx,%eax
f011f46f:	89 c1                	mov    %eax,%ecx
f011f471:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f478:	10 00 00 
f011f47b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f480:	0f b6 c0             	movzbl %al,%eax
f011f483:	c1 e0 04             	shl    $0x4,%eax
f011f486:	89 c2                	mov    %eax,%edx
f011f488:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f48e:	01 d0                	add    %edx,%eax
f011f490:	48                   	dec    %eax
f011f491:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f497:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f49d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4a2:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f4a8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f4ae:	29 d0                	sub    %edx,%eax
f011f4b0:	01 c8                	add    %ecx,%eax
f011f4b2:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f4b8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f4be:	39 c2                	cmp    %eax,%edx
f011f4c0:	74 17                	je     f011f4d9 <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f4c2:	83 ec 04             	sub    $0x4,%esp
f011f4c5:	68 c8 99 13 f0       	push   $0xf01399c8
f011f4ca:	68 a3 04 00 00       	push   $0x4a3
f011f4cf:	68 ae 92 13 f0       	push   $0xf01392ae
f011f4d4:	e8 d7 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4d9:	e8 a6 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f4de:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f4e1:	74 17                	je     f011f4fa <test_kmalloc_worstfit+0x1185>
f011f4e3:	83 ec 04             	sub    $0x4,%esp
f011f4e6:	68 c8 92 13 f0       	push   $0xf01392c8
f011f4eb:	68 a4 04 00 00       	push   $0x4a4
f011f4f0:	68 ae 92 13 f0       	push   $0xf01392ae
f011f4f5:	e8 b6 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f4fa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f4fd:	e8 dc d4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f502:	29 c3                	sub    %eax,%ebx
f011f504:	89 d8                	mov    %ebx,%eax
f011f506:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f50b:	74 17                	je     f011f524 <test_kmalloc_worstfit+0x11af>
f011f50d:	83 ec 04             	sub    $0x4,%esp
f011f510:	68 e6 97 13 f0       	push   $0xf01397e6
f011f515:	68 a5 04 00 00       	push   $0x4a5
f011f51a:	68 ae 92 13 f0       	push   $0xf01392ae
f011f51f:	e8 8c 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f524:	ff 45 e8             	incl   -0x18(%ebp)
f011f527:	83 ec 08             	sub    $0x8,%esp
f011f52a:	ff 75 e8             	pushl  -0x18(%ebp)
f011f52d:	68 e8 99 13 f0       	push   $0xf01399e8
f011f532:	e8 fa 18 fe ff       	call   f0100e31 <cprintf>
f011f537:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f53a:	e8 9f d4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f53f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f542:	e8 3d 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f547:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f54a:	83 ec 0c             	sub    $0xc,%esp
f011f54d:	68 00 00 40 00       	push   $0x400000
f011f552:	e8 08 8a fe ff       	call   f0107f5f <kmalloc>
f011f557:	83 c4 10             	add    $0x10,%esp
f011f55a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f560:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f566:	85 c0                	test   %eax,%eax
f011f568:	74 17                	je     f011f581 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f56a:	83 ec 04             	sub    $0x4,%esp
f011f56d:	68 c8 99 13 f0       	push   $0xf01399c8
f011f572:	68 ad 04 00 00       	push   $0x4ad
f011f577:	68 ae 92 13 f0       	push   $0xf01392ae
f011f57c:	e8 2f 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f581:	e8 fe 50 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f586:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f589:	74 17                	je     f011f5a2 <test_kmalloc_worstfit+0x122d>
f011f58b:	83 ec 04             	sub    $0x4,%esp
f011f58e:	68 c8 92 13 f0       	push   $0xf01392c8
f011f593:	68 ae 04 00 00       	push   $0x4ae
f011f598:	68 ae 92 13 f0       	push   $0xf01392ae
f011f59d:	e8 0e 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f5a2:	e8 37 d4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f5a7:	89 c2                	mov    %eax,%edx
f011f5a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f5ac:	39 c2                	cmp    %eax,%edx
f011f5ae:	74 17                	je     f011f5c7 <test_kmalloc_worstfit+0x1252>
f011f5b0:	83 ec 04             	sub    $0x4,%esp
f011f5b3:	68 e6 97 13 f0       	push   $0xf01397e6
f011f5b8:	68 af 04 00 00       	push   $0x4af
f011f5bd:	68 ae 92 13 f0       	push   $0xf01392ae
f011f5c2:	e8 e9 0b fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5c7:	ff 45 e8             	incl   -0x18(%ebp)
f011f5ca:	83 ec 08             	sub    $0x8,%esp
f011f5cd:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5d0:	68 e8 99 13 f0       	push   $0xf01399e8
f011f5d5:	e8 57 18 fe ff       	call   f0100e31 <cprintf>
f011f5da:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f5dd:	83 ec 0c             	sub    $0xc,%esp
f011f5e0:	68 fc 99 13 f0       	push   $0xf01399fc
f011f5e5:	e8 47 18 fe ff       	call   f0100e31 <cprintf>
f011f5ea:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f5ed:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f5f2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f5f5:	5b                   	pop    %ebx
f011f5f6:	5f                   	pop    %edi
f011f5f7:	5d                   	pop    %ebp
f011f5f8:	c3                   	ret    

f011f5f9 <test_kfree>:

int test_kfree()
{
f011f5f9:	55                   	push   %ebp
f011f5fa:	89 e5                	mov    %esp,%ebp
f011f5fc:	57                   	push   %edi
f011f5fd:	53                   	push   %ebx
f011f5fe:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f604:	83 ec 0c             	sub    $0xc,%esp
f011f607:	68 f0 91 13 f0       	push   $0xf01391f0
f011f60c:	e8 20 18 fe ff       	call   f0100e31 <cprintf>
f011f611:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f614:	83 ec 0c             	sub    $0xc,%esp
f011f617:	68 20 92 13 f0       	push   $0xf0139220
f011f61c:	e8 10 18 fe ff       	call   f0100e31 <cprintf>
f011f621:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f624:	83 ec 0c             	sub    $0xc,%esp
f011f627:	68 f0 91 13 f0       	push   $0xf01391f0
f011f62c:	e8 00 18 fe ff       	call   f0100e31 <cprintf>
f011f631:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f634:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f638:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f63c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f642:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f648:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f64f:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f656:	e8 83 d3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f65b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f65e:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f664:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f669:	b8 00 00 00 00       	mov    $0x0,%eax
f011f66e:	89 d7                	mov    %edx,%edi
f011f670:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f672:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f678:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f67d:	b8 00 00 00 00       	mov    $0x0,%eax
f011f682:	89 d7                	mov    %edx,%edi
f011f684:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f686:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f68c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f691:	b8 00 00 00 00       	mov    $0x0,%eax
f011f696:	89 d7                	mov    %edx,%edi
f011f698:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f69a:	e8 3f d3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f69f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f6a2:	e8 dd 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f6a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f6aa:	83 ec 0c             	sub    $0xc,%esp
f011f6ad:	68 00 fc 1f 00       	push   $0x1ffc00
f011f6b2:	e8 a8 88 fe ff       	call   f0107f5f <kmalloc>
f011f6b7:	83 c4 10             	add    $0x10,%esp
f011f6ba:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f6c0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f6c6:	89 c1                	mov    %eax,%ecx
f011f6c8:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f6cf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f6d4:	0f b6 d0             	movzbl %al,%edx
f011f6d7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f6da:	01 d0                	add    %edx,%eax
f011f6dc:	48                   	dec    %eax
f011f6dd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f6e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f6e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6e8:	f7 75 c8             	divl   -0x38(%ebp)
f011f6eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f6ee:	29 d0                	sub    %edx,%eax
f011f6f0:	89 c3                	mov    %eax,%ebx
f011f6f2:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f6f9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f6fe:	0f b6 c0             	movzbl %al,%eax
f011f701:	c1 e0 04             	shl    $0x4,%eax
f011f704:	89 c2                	mov    %eax,%edx
f011f706:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f709:	01 d0                	add    %edx,%eax
f011f70b:	48                   	dec    %eax
f011f70c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f70f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f712:	ba 00 00 00 00       	mov    $0x0,%edx
f011f717:	f7 75 c0             	divl   -0x40(%ebp)
f011f71a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f71d:	29 d0                	sub    %edx,%eax
f011f71f:	01 d8                	add    %ebx,%eax
f011f721:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f726:	39 c1                	cmp    %eax,%ecx
f011f728:	74 17                	je     f011f741 <test_kfree+0x148>
f011f72a:	83 ec 04             	sub    $0x4,%esp
f011f72d:	68 94 93 13 f0       	push   $0xf0139394
f011f732:	68 d7 04 00 00       	push   $0x4d7
f011f737:	68 ae 92 13 f0       	push   $0xf01392ae
f011f73c:	e8 6f 0a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f741:	e8 3e 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f746:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f749:	74 17                	je     f011f762 <test_kfree+0x169>
f011f74b:	83 ec 04             	sub    $0x4,%esp
f011f74e:	68 c8 92 13 f0       	push   $0xf01392c8
f011f753:	68 d8 04 00 00       	push   $0x4d8
f011f758:	68 ae 92 13 f0       	push   $0xf01392ae
f011f75d:	e8 4e 0a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f762:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f765:	e8 74 d2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f76a:	29 c3                	sub    %eax,%ebx
f011f76c:	89 d8                	mov    %ebx,%eax
f011f76e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f773:	74 17                	je     f011f78c <test_kfree+0x193>
f011f775:	83 ec 04             	sub    $0x4,%esp
f011f778:	68 30 93 13 f0       	push   $0xf0139330
f011f77d:	68 d9 04 00 00       	push   $0x4d9
f011f782:	68 ae 92 13 f0       	push   $0xf01392ae
f011f787:	e8 24 0a fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f78c:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f793:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f796:	e8 43 d2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f79b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f79e:	e8 e1 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f7a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f7a6:	83 ec 0c             	sub    $0xc,%esp
f011f7a9:	68 00 fc 1f 00       	push   $0x1ffc00
f011f7ae:	e8 ac 87 fe ff       	call   f0107f5f <kmalloc>
f011f7b3:	83 c4 10             	add    $0x10,%esp
f011f7b6:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f7bc:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f7c2:	89 c1                	mov    %eax,%ecx
f011f7c4:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f7cb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f7d0:	0f b6 d0             	movzbl %al,%edx
f011f7d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f7d6:	01 d0                	add    %edx,%eax
f011f7d8:	48                   	dec    %eax
f011f7d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f7dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f7df:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7e4:	f7 75 b8             	divl   -0x48(%ebp)
f011f7e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f7ea:	29 d0                	sub    %edx,%eax
f011f7ec:	89 c3                	mov    %eax,%ebx
f011f7ee:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f7f5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f7fa:	0f b6 c0             	movzbl %al,%eax
f011f7fd:	c1 e0 04             	shl    $0x4,%eax
f011f800:	89 c2                	mov    %eax,%edx
f011f802:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f805:	01 d0                	add    %edx,%eax
f011f807:	48                   	dec    %eax
f011f808:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f80b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f80e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f813:	f7 75 b0             	divl   -0x50(%ebp)
f011f816:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f819:	29 d0                	sub    %edx,%eax
f011f81b:	01 d8                	add    %ebx,%eax
f011f81d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f822:	39 c1                	cmp    %eax,%ecx
f011f824:	74 17                	je     f011f83d <test_kfree+0x244>
f011f826:	83 ec 04             	sub    $0x4,%esp
f011f829:	68 94 93 13 f0       	push   $0xf0139394
f011f82e:	68 e0 04 00 00       	push   $0x4e0
f011f833:	68 ae 92 13 f0       	push   $0xf01392ae
f011f838:	e8 73 09 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f83d:	e8 42 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f842:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f845:	74 17                	je     f011f85e <test_kfree+0x265>
f011f847:	83 ec 04             	sub    $0x4,%esp
f011f84a:	68 c8 92 13 f0       	push   $0xf01392c8
f011f84f:	68 e1 04 00 00       	push   $0x4e1
f011f854:	68 ae 92 13 f0       	push   $0xf01392ae
f011f859:	e8 52 09 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f85e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f861:	e8 78 d1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f866:	29 c3                	sub    %eax,%ebx
f011f868:	89 d8                	mov    %ebx,%eax
f011f86a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f86f:	74 17                	je     f011f888 <test_kfree+0x28f>
f011f871:	83 ec 04             	sub    $0x4,%esp
f011f874:	68 30 93 13 f0       	push   $0xf0139330
f011f879:	68 e2 04 00 00       	push   $0x4e2
f011f87e:	68 ae 92 13 f0       	push   $0xf01392ae
f011f883:	e8 28 09 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f888:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011f88f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f892:	e8 47 d1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f897:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f89a:	e8 e5 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f89f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f8a2:	83 ec 0c             	sub    $0xc,%esp
f011f8a5:	68 00 08 00 00       	push   $0x800
f011f8aa:	e8 b0 86 fe ff       	call   f0107f5f <kmalloc>
f011f8af:	83 c4 10             	add    $0x10,%esp
f011f8b2:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8b8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f8be:	89 c1                	mov    %eax,%ecx
f011f8c0:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f8c7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f8cc:	0f b6 d0             	movzbl %al,%edx
f011f8cf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f8d2:	01 d0                	add    %edx,%eax
f011f8d4:	48                   	dec    %eax
f011f8d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f8d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f8db:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8e0:	f7 75 a8             	divl   -0x58(%ebp)
f011f8e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f8e6:	29 d0                	sub    %edx,%eax
f011f8e8:	89 c3                	mov    %eax,%ebx
f011f8ea:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f8f1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f8f6:	0f b6 c0             	movzbl %al,%eax
f011f8f9:	c1 e0 04             	shl    $0x4,%eax
f011f8fc:	89 c2                	mov    %eax,%edx
f011f8fe:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f901:	01 d0                	add    %edx,%eax
f011f903:	48                   	dec    %eax
f011f904:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f907:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f90a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f90f:	f7 75 a0             	divl   -0x60(%ebp)
f011f912:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f915:	29 d0                	sub    %edx,%eax
f011f917:	01 d8                	add    %ebx,%eax
f011f919:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f91e:	39 c1                	cmp    %eax,%ecx
f011f920:	74 17                	je     f011f939 <test_kfree+0x340>
f011f922:	83 ec 04             	sub    $0x4,%esp
f011f925:	68 94 93 13 f0       	push   $0xf0139394
f011f92a:	68 e9 04 00 00       	push   $0x4e9
f011f92f:	68 ae 92 13 f0       	push   $0xf01392ae
f011f934:	e8 77 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f939:	e8 46 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f93e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f941:	74 17                	je     f011f95a <test_kfree+0x361>
f011f943:	83 ec 04             	sub    $0x4,%esp
f011f946:	68 c8 92 13 f0       	push   $0xf01392c8
f011f94b:	68 ea 04 00 00       	push   $0x4ea
f011f950:	68 ae 92 13 f0       	push   $0xf01392ae
f011f955:	e8 56 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f95a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f95d:	e8 7c d0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f962:	29 c3                	sub    %eax,%ebx
f011f964:	89 d8                	mov    %ebx,%eax
f011f966:	83 f8 01             	cmp    $0x1,%eax
f011f969:	74 17                	je     f011f982 <test_kfree+0x389>
f011f96b:	83 ec 04             	sub    $0x4,%esp
f011f96e:	68 30 93 13 f0       	push   $0xf0139330
f011f973:	68 eb 04 00 00       	push   $0x4eb
f011f978:	68 ae 92 13 f0       	push   $0xf01392ae
f011f97d:	e8 2e 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f982:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011f989:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f98c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f992:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f995:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f99c:	eb 0e                	jmp    f011f9ac <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011f99e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f9a1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f9a4:	01 d0                	add    %edx,%eax
f011f9a6:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f9a9:	ff 45 f4             	incl   -0xc(%ebp)
f011f9ac:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f9b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f9b5:	7f e7                	jg     f011f99e <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f9b7:	e8 22 d0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f011f9bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f9bf:	e8 c0 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f9c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f9c7:	83 ec 0c             	sub    $0xc,%esp
f011f9ca:	68 00 08 00 00       	push   $0x800
f011f9cf:	e8 8b 85 fe ff       	call   f0107f5f <kmalloc>
f011f9d4:	83 c4 10             	add    $0x10,%esp
f011f9d7:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9dd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f9e3:	89 c1                	mov    %eax,%ecx
f011f9e5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f9ec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011f9f1:	0f b6 d0             	movzbl %al,%edx
f011f9f4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f9f7:	01 d0                	add    %edx,%eax
f011f9f9:	48                   	dec    %eax
f011f9fa:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f9fd:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fa00:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa05:	f7 75 94             	divl   -0x6c(%ebp)
f011fa08:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fa0b:	29 d0                	sub    %edx,%eax
f011fa0d:	89 c3                	mov    %eax,%ebx
f011fa0f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011fa16:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fa1b:	0f b6 c0             	movzbl %al,%eax
f011fa1e:	c1 e0 04             	shl    $0x4,%eax
f011fa21:	89 c2                	mov    %eax,%edx
f011fa23:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fa26:	01 d0                	add    %edx,%eax
f011fa28:	48                   	dec    %eax
f011fa29:	89 45 88             	mov    %eax,-0x78(%ebp)
f011fa2c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fa2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa34:	f7 75 8c             	divl   -0x74(%ebp)
f011fa37:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fa3a:	29 d0                	sub    %edx,%eax
f011fa3c:	01 d8                	add    %ebx,%eax
f011fa3e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fa43:	39 c1                	cmp    %eax,%ecx
f011fa45:	74 17                	je     f011fa5e <test_kfree+0x465>
f011fa47:	83 ec 04             	sub    $0x4,%esp
f011fa4a:	68 94 93 13 f0       	push   $0xf0139394
f011fa4f:	68 f7 04 00 00       	push   $0x4f7
f011fa54:	68 ae 92 13 f0       	push   $0xf01392ae
f011fa59:	e8 52 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa5e:	e8 21 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa63:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa66:	74 17                	je     f011fa7f <test_kfree+0x486>
f011fa68:	83 ec 04             	sub    $0x4,%esp
f011fa6b:	68 c8 92 13 f0       	push   $0xf01392c8
f011fa70:	68 f8 04 00 00       	push   $0x4f8
f011fa75:	68 ae 92 13 f0       	push   $0xf01392ae
f011fa7a:	e8 31 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa7f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa82:	e8 57 cf fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fa87:	29 c3                	sub    %eax,%ebx
f011fa89:	89 d8                	mov    %ebx,%eax
f011fa8b:	83 f8 01             	cmp    $0x1,%eax
f011fa8e:	74 17                	je     f011faa7 <test_kfree+0x4ae>
f011fa90:	83 ec 04             	sub    $0x4,%esp
f011fa93:	68 30 93 13 f0       	push   $0xf0139330
f011fa98:	68 f9 04 00 00       	push   $0x4f9
f011fa9d:	68 ae 92 13 f0       	push   $0xf01392ae
f011faa2:	e8 09 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011faa7:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011faae:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fab1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fab7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011faba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fac1:	eb 0e                	jmp    f011fad1 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011fac3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fac6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fac9:	01 d0                	add    %edx,%eax
f011facb:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011face:	ff 45 f4             	incl   -0xc(%ebp)
f011fad1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fad7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fada:	7f e7                	jg     f011fac3 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fadc:	e8 fd ce fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fae1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fae4:	e8 9b 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fae9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011faec:	83 ec 0c             	sub    $0xc,%esp
f011faef:	68 00 1c 00 00       	push   $0x1c00
f011faf4:	e8 66 84 fe ff       	call   f0107f5f <kmalloc>
f011faf9:	83 c4 10             	add    $0x10,%esp
f011fafc:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb02:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fb08:	89 c1                	mov    %eax,%ecx
f011fb0a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011fb11:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fb16:	0f b6 d0             	movzbl %al,%edx
f011fb19:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fb1c:	01 d0                	add    %edx,%eax
f011fb1e:	48                   	dec    %eax
f011fb1f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011fb22:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fb25:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb2a:	f7 75 84             	divl   -0x7c(%ebp)
f011fb2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fb30:	29 d0                	sub    %edx,%eax
f011fb32:	89 c3                	mov    %eax,%ebx
f011fb34:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fb3b:	10 00 00 
f011fb3e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fb43:	0f b6 c0             	movzbl %al,%eax
f011fb46:	c1 e0 04             	shl    $0x4,%eax
f011fb49:	89 c2                	mov    %eax,%edx
f011fb4b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fb51:	01 d0                	add    %edx,%eax
f011fb53:	48                   	dec    %eax
f011fb54:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fb5a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb60:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb65:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fb6b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb71:	29 d0                	sub    %edx,%eax
f011fb73:	01 d8                	add    %ebx,%eax
f011fb75:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fb7a:	39 c1                	cmp    %eax,%ecx
f011fb7c:	74 17                	je     f011fb95 <test_kfree+0x59c>
f011fb7e:	83 ec 04             	sub    $0x4,%esp
f011fb81:	68 94 93 13 f0       	push   $0xf0139394
f011fb86:	68 05 05 00 00       	push   $0x505
f011fb8b:	68 ae 92 13 f0       	push   $0xf01392ae
f011fb90:	e8 1b 06 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb95:	e8 ea 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fb9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb9d:	74 17                	je     f011fbb6 <test_kfree+0x5bd>
f011fb9f:	83 ec 04             	sub    $0x4,%esp
f011fba2:	68 c8 92 13 f0       	push   $0xf01392c8
f011fba7:	68 06 05 00 00       	push   $0x506
f011fbac:	68 ae 92 13 f0       	push   $0xf01392ae
f011fbb1:	e8 fa 05 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbb6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbb9:	e8 20 ce fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fbbe:	29 c3                	sub    %eax,%ebx
f011fbc0:	89 d8                	mov    %ebx,%eax
f011fbc2:	83 f8 02             	cmp    $0x2,%eax
f011fbc5:	74 17                	je     f011fbde <test_kfree+0x5e5>
f011fbc7:	83 ec 04             	sub    $0x4,%esp
f011fbca:	68 30 93 13 f0       	push   $0xf0139330
f011fbcf:	68 07 05 00 00       	push   $0x507
f011fbd4:	68 ae 92 13 f0       	push   $0xf01392ae
f011fbd9:	e8 d2 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fbde:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011fbe5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fbe8:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fbee:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fbf1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fbf8:	eb 0e                	jmp    f011fc08 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011fbfa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fbfd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fc00:	01 d0                	add    %edx,%eax
f011fc02:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fc05:	ff 45 f4             	incl   -0xc(%ebp)
f011fc08:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fc0e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc11:	7f e7                	jg     f011fbfa <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fc13:	e8 c6 cd fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fc18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc1b:	e8 64 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fc20:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fc23:	83 ec 0c             	sub    $0xc,%esp
f011fc26:	68 00 fc 2f 00       	push   $0x2ffc00
f011fc2b:	e8 2f 83 fe ff       	call   f0107f5f <kmalloc>
f011fc30:	83 c4 10             	add    $0x10,%esp
f011fc33:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc39:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fc3f:	89 c1                	mov    %eax,%ecx
f011fc41:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fc48:	10 00 00 
f011fc4b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fc50:	0f b6 d0             	movzbl %al,%edx
f011fc53:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fc59:	01 d0                	add    %edx,%eax
f011fc5b:	48                   	dec    %eax
f011fc5c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fc62:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc68:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc6d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fc73:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc79:	29 d0                	sub    %edx,%eax
f011fc7b:	89 c3                	mov    %eax,%ebx
f011fc7d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fc84:	10 00 00 
f011fc87:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fc8c:	0f b6 c0             	movzbl %al,%eax
f011fc8f:	c1 e0 04             	shl    $0x4,%eax
f011fc92:	89 c2                	mov    %eax,%edx
f011fc94:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fc9a:	01 d0                	add    %edx,%eax
f011fc9c:	48                   	dec    %eax
f011fc9d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fca3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fca9:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcae:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fcb4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fcba:	29 d0                	sub    %edx,%eax
f011fcbc:	01 d8                	add    %ebx,%eax
f011fcbe:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fcc3:	39 c1                	cmp    %eax,%ecx
f011fcc5:	74 17                	je     f011fcde <test_kfree+0x6e5>
f011fcc7:	83 ec 04             	sub    $0x4,%esp
f011fcca:	68 94 93 13 f0       	push   $0xf0139394
f011fccf:	68 13 05 00 00       	push   $0x513
f011fcd4:	68 ae 92 13 f0       	push   $0xf01392ae
f011fcd9:	e8 d2 04 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcde:	e8 a1 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fce3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fce6:	74 17                	je     f011fcff <test_kfree+0x706>
f011fce8:	83 ec 04             	sub    $0x4,%esp
f011fceb:	68 c8 92 13 f0       	push   $0xf01392c8
f011fcf0:	68 14 05 00 00       	push   $0x514
f011fcf5:	68 ae 92 13 f0       	push   $0xf01392ae
f011fcfa:	e8 b1 04 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fcff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd02:	e8 d7 cc fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fd07:	29 c3                	sub    %eax,%ebx
f011fd09:	89 d8                	mov    %ebx,%eax
f011fd0b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fd10:	74 17                	je     f011fd29 <test_kfree+0x730>
f011fd12:	83 ec 04             	sub    $0x4,%esp
f011fd15:	68 30 93 13 f0       	push   $0xf0139330
f011fd1a:	68 15 05 00 00       	push   $0x515
f011fd1f:	68 ae 92 13 f0       	push   $0xf01392ae
f011fd24:	e8 87 04 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011fd29:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011fd30:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fd33:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fd39:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fd3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd43:	eb 0e                	jmp    f011fd53 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011fd45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd48:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fd4b:	01 d0                	add    %edx,%eax
f011fd4d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fd50:	ff 45 f4             	incl   -0xc(%ebp)
f011fd53:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fd59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd5c:	7f e7                	jg     f011fd45 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd5e:	e8 7b cc fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fd63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd66:	e8 19 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fd6b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fd6e:	83 ec 0c             	sub    $0xc,%esp
f011fd71:	68 00 fc 5f 00       	push   $0x5ffc00
f011fd76:	e8 e4 81 fe ff       	call   f0107f5f <kmalloc>
f011fd7b:	83 c4 10             	add    $0x10,%esp
f011fd7e:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fd84:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fd8a:	89 c1                	mov    %eax,%ecx
f011fd8c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fd93:	10 00 00 
f011fd96:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fd9b:	0f b6 d0             	movzbl %al,%edx
f011fd9e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fda4:	01 d0                	add    %edx,%eax
f011fda6:	48                   	dec    %eax
f011fda7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fdad:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fdb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdb8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fdbe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fdc4:	29 d0                	sub    %edx,%eax
f011fdc6:	89 c3                	mov    %eax,%ebx
f011fdc8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fdcf:	10 00 00 
f011fdd2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fdd7:	0f b6 c0             	movzbl %al,%eax
f011fdda:	c1 e0 04             	shl    $0x4,%eax
f011fddd:	89 c2                	mov    %eax,%edx
f011fddf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fde5:	01 d0                	add    %edx,%eax
f011fde7:	48                   	dec    %eax
f011fde8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fdee:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fdf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdf9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fdff:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe05:	29 d0                	sub    %edx,%eax
f011fe07:	01 d8                	add    %ebx,%eax
f011fe09:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fe0e:	39 c1                	cmp    %eax,%ecx
f011fe10:	74 17                	je     f011fe29 <test_kfree+0x830>
f011fe12:	83 ec 04             	sub    $0x4,%esp
f011fe15:	68 94 93 13 f0       	push   $0xf0139394
f011fe1a:	68 21 05 00 00       	push   $0x521
f011fe1f:	68 ae 92 13 f0       	push   $0xf01392ae
f011fe24:	e8 87 03 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe29:	e8 56 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fe2e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe31:	74 17                	je     f011fe4a <test_kfree+0x851>
f011fe33:	83 ec 04             	sub    $0x4,%esp
f011fe36:	68 c8 92 13 f0       	push   $0xf01392c8
f011fe3b:	68 22 05 00 00       	push   $0x522
f011fe40:	68 ae 92 13 f0       	push   $0xf01392ae
f011fe45:	e8 66 03 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fe4a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fe4d:	e8 8c cb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fe52:	29 c3                	sub    %eax,%ebx
f011fe54:	89 d8                	mov    %ebx,%eax
f011fe56:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fe5b:	74 17                	je     f011fe74 <test_kfree+0x87b>
f011fe5d:	83 ec 04             	sub    $0x4,%esp
f011fe60:	68 30 93 13 f0       	push   $0xf0139330
f011fe65:	68 23 05 00 00       	push   $0x523
f011fe6a:	68 ae 92 13 f0       	push   $0xf01392ae
f011fe6f:	e8 3c 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011fe74:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011fe7b:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fe7e:	e8 5b cb fe ff       	call   f010c9de <sys_calculate_free_frames>
f011fe83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe86:	e8 f9 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fe8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fe8e:	83 ec 0c             	sub    $0xc,%esp
f011fe91:	68 00 38 00 00       	push   $0x3800
f011fe96:	e8 c4 80 fe ff       	call   f0107f5f <kmalloc>
f011fe9b:	83 c4 10             	add    $0x10,%esp
f011fe9e:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fea4:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011feaa:	89 c1                	mov    %eax,%ecx
f011feac:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011feb3:	10 00 00 
f011feb6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011febb:	0f b6 d0             	movzbl %al,%edx
f011febe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fec4:	01 d0                	add    %edx,%eax
f011fec6:	48                   	dec    %eax
f011fec7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fecd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fed3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fed8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fede:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fee4:	29 d0                	sub    %edx,%eax
f011fee6:	89 c3                	mov    %eax,%ebx
f011fee8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011feef:	10 00 00 
f011fef2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f011fef7:	0f b6 c0             	movzbl %al,%eax
f011fefa:	c1 e0 04             	shl    $0x4,%eax
f011fefd:	89 c2                	mov    %eax,%edx
f011feff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ff05:	01 d0                	add    %edx,%eax
f011ff07:	48                   	dec    %eax
f011ff08:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ff0e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff14:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff19:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ff1f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff25:	29 d0                	sub    %edx,%eax
f011ff27:	01 d8                	add    %ebx,%eax
f011ff29:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011ff2e:	39 c1                	cmp    %eax,%ecx
f011ff30:	74 17                	je     f011ff49 <test_kfree+0x950>
f011ff32:	83 ec 04             	sub    $0x4,%esp
f011ff35:	68 94 93 13 f0       	push   $0xf0139394
f011ff3a:	68 2a 05 00 00       	push   $0x52a
f011ff3f:	68 ae 92 13 f0       	push   $0xf01392ae
f011ff44:	e8 67 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff49:	e8 36 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ff4e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff51:	74 17                	je     f011ff6a <test_kfree+0x971>
f011ff53:	83 ec 04             	sub    $0x4,%esp
f011ff56:	68 c8 92 13 f0       	push   $0xf01392c8
f011ff5b:	68 2b 05 00 00       	push   $0x52b
f011ff60:	68 ae 92 13 f0       	push   $0xf01392ae
f011ff65:	e8 46 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff6a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff6d:	e8 6c ca fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ff72:	29 c3                	sub    %eax,%ebx
f011ff74:	89 d8                	mov    %ebx,%eax
f011ff76:	83 f8 04             	cmp    $0x4,%eax
f011ff79:	74 17                	je     f011ff92 <test_kfree+0x999>
f011ff7b:	83 ec 04             	sub    $0x4,%esp
f011ff7e:	68 30 93 13 f0       	push   $0xf0139330
f011ff83:	68 2c 05 00 00       	push   $0x52c
f011ff88:	68 ae 92 13 f0       	push   $0xf01392ae
f011ff8d:	e8 1e 02 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011ff92:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011ff99:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011ff9c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011ffa2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011ffa5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ffac:	eb 0e                	jmp    f011ffbc <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011ffae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ffb1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ffb4:	01 d0                	add    %edx,%eax
f011ffb6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011ffb9:	ff 45 f4             	incl   -0xc(%ebp)
f011ffbc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ffc2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ffc5:	7f e7                	jg     f011ffae <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011ffc7:	e8 12 ca fe ff       	call   f010c9de <sys_calculate_free_frames>
f011ffcc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011ffd2:	e8 ad 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ffd7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011ffdd:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011ffe3:	83 ec 0c             	sub    $0xc,%esp
f011ffe6:	50                   	push   %eax
f011ffe7:	e8 8d 7f fe ff       	call   f0107f79 <kfree>
f011ffec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ffef:	e8 90 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fff4:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011fffa:	74 17                	je     f0120013 <test_kfree+0xa1a>
f011fffc:	83 ec 04             	sub    $0x4,%esp
f011ffff:	68 c8 92 13 f0       	push   $0xf01392c8
f0120004:	68 3b 05 00 00       	push   $0x53b
f0120009:	68 ae 92 13 f0       	push   $0xf01392ae
f012000e:	e8 9d 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120013:	e8 c6 c9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120018:	89 c2                	mov    %eax,%edx
f012001a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120020:	29 c2                	sub    %eax,%edx
f0120022:	89 d0                	mov    %edx,%eax
f0120024:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120029:	74 17                	je     f0120042 <test_kfree+0xa49>
f012002b:	83 ec 04             	sub    $0x4,%esp
f012002e:	68 38 9a 13 f0       	push   $0xf0139a38
f0120033:	68 3c 05 00 00       	push   $0x53c
f0120038:	68 ae 92 13 f0       	push   $0xf01392ae
f012003d:	e8 6e 01 fe ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120042:	e8 97 c9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120047:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012004d:	e8 32 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120052:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0120058:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012005e:	83 ec 0c             	sub    $0xc,%esp
f0120061:	50                   	push   %eax
f0120062:	e8 12 7f fe ff       	call   f0107f79 <kfree>
f0120067:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012006a:	e8 15 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012006f:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120075:	74 17                	je     f012008e <test_kfree+0xa95>
f0120077:	83 ec 04             	sub    $0x4,%esp
f012007a:	68 c8 92 13 f0       	push   $0xf01392c8
f012007f:	68 42 05 00 00       	push   $0x542
f0120084:	68 ae 92 13 f0       	push   $0xf01392ae
f0120089:	e8 22 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012008e:	e8 4b c9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120093:	89 c2                	mov    %eax,%edx
f0120095:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012009b:	29 c2                	sub    %eax,%edx
f012009d:	89 d0                	mov    %edx,%eax
f012009f:	83 f8 01             	cmp    $0x1,%eax
f01200a2:	74 17                	je     f01200bb <test_kfree+0xac2>
f01200a4:	83 ec 04             	sub    $0x4,%esp
f01200a7:	68 38 9a 13 f0       	push   $0xf0139a38
f01200ac:	68 43 05 00 00       	push   $0x543
f01200b1:	68 ae 92 13 f0       	push   $0xf01392ae
f01200b6:	e8 f5 00 fe ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01200bb:	e8 1e c9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01200c0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200c6:	e8 b9 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01200cb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01200d1:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01200d7:	83 ec 0c             	sub    $0xc,%esp
f01200da:	50                   	push   %eax
f01200db:	e8 99 7e fe ff       	call   f0107f79 <kfree>
f01200e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200e3:	e8 9c 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01200e8:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01200ee:	74 17                	je     f0120107 <test_kfree+0xb0e>
f01200f0:	83 ec 04             	sub    $0x4,%esp
f01200f3:	68 c8 92 13 f0       	push   $0xf01392c8
f01200f8:	68 49 05 00 00       	push   $0x549
f01200fd:	68 ae 92 13 f0       	push   $0xf01392ae
f0120102:	e8 a9 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120107:	e8 d2 c8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012010c:	89 c2                	mov    %eax,%edx
f012010e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120114:	29 c2                	sub    %eax,%edx
f0120116:	89 d0                	mov    %edx,%eax
f0120118:	3d 00 02 00 00       	cmp    $0x200,%eax
f012011d:	74 17                	je     f0120136 <test_kfree+0xb3d>
f012011f:	83 ec 04             	sub    $0x4,%esp
f0120122:	68 38 9a 13 f0       	push   $0xf0139a38
f0120127:	68 4a 05 00 00       	push   $0x54a
f012012c:	68 ae 92 13 f0       	push   $0xf01392ae
f0120131:	e8 7a 00 fe ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120136:	e8 a3 c8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012013b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120141:	e8 3e 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120146:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f012014c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0120152:	83 ec 0c             	sub    $0xc,%esp
f0120155:	50                   	push   %eax
f0120156:	e8 1e 7e fe ff       	call   f0107f79 <kfree>
f012015b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012015e:	e8 21 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120163:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120169:	74 17                	je     f0120182 <test_kfree+0xb89>
f012016b:	83 ec 04             	sub    $0x4,%esp
f012016e:	68 c8 92 13 f0       	push   $0xf01392c8
f0120173:	68 50 05 00 00       	push   $0x550
f0120178:	68 ae 92 13 f0       	push   $0xf01392ae
f012017d:	e8 2e 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120182:	e8 57 c8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120187:	89 c2                	mov    %eax,%edx
f0120189:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012018f:	29 c2                	sub    %eax,%edx
f0120191:	89 d0                	mov    %edx,%eax
f0120193:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120198:	74 17                	je     f01201b1 <test_kfree+0xbb8>
f012019a:	83 ec 04             	sub    $0x4,%esp
f012019d:	68 38 9a 13 f0       	push   $0xf0139a38
f01201a2:	68 51 05 00 00       	push   $0x551
f01201a7:	68 ae 92 13 f0       	push   $0xf01392ae
f01201ac:	e8 ff ff fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01201b1:	83 ec 0c             	sub    $0xc,%esp
f01201b4:	68 70 9a 13 f0       	push   $0xf0139a70
f01201b9:	e8 73 0c fe ff       	call   f0100e31 <cprintf>
f01201be:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01201c1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01201c7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01201ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01201d1:	eb 1e                	jmp    f01201f1 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f01201d3:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01201d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01201dc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01201df:	01 c8                	add    %ecx,%eax
f01201e1:	8a 00                	mov    (%eax),%al
f01201e3:	0f be c0             	movsbl %al,%eax
f01201e6:	01 d0                	add    %edx,%eax
f01201e8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01201ee:	ff 45 f4             	incl   -0xc(%ebp)
f01201f1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01201f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01201fa:	7f d7                	jg     f01201d3 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01201fc:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0120202:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120208:	89 c1                	mov    %eax,%ecx
f012020a:	01 c9                	add    %ecx,%ecx
f012020c:	01 c8                	add    %ecx,%eax
f012020e:	39 c2                	cmp    %eax,%edx
f0120210:	74 17                	je     f0120229 <test_kfree+0xc30>
f0120212:	83 ec 04             	sub    $0x4,%esp
f0120215:	68 94 9a 13 f0       	push   $0xf0139a94
f012021a:	68 5e 05 00 00       	push   $0x55e
f012021f:	68 ae 92 13 f0       	push   $0xf01392ae
f0120224:	e8 87 ff fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120229:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012022f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120232:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120239:	eb 1e                	jmp    f0120259 <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f012023b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0120241:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120244:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120247:	01 c8                	add    %ecx,%eax
f0120249:	8a 00                	mov    (%eax),%al
f012024b:	0f be c0             	movsbl %al,%eax
f012024e:	01 d0                	add    %edx,%eax
f0120250:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120256:	ff 45 f4             	incl   -0xc(%ebp)
f0120259:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012025f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120262:	7f d7                	jg     f012023b <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120264:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012026a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0120270:	c1 e2 02             	shl    $0x2,%edx
f0120273:	39 d0                	cmp    %edx,%eax
f0120275:	74 17                	je     f012028e <test_kfree+0xc95>
f0120277:	83 ec 04             	sub    $0x4,%esp
f012027a:	68 94 9a 13 f0       	push   $0xf0139a94
f012027f:	68 66 05 00 00       	push   $0x566
f0120284:	68 ae 92 13 f0       	push   $0xf01392ae
f0120289:	e8 22 ff fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012028e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120294:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120297:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012029e:	eb 1e                	jmp    f01202be <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f01202a0:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01202a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01202a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01202ac:	01 c8                	add    %ecx,%eax
f01202ae:	8a 00                	mov    (%eax),%al
f01202b0:	0f be c0             	movsbl %al,%eax
f01202b3:	01 d0                	add    %edx,%eax
f01202b5:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01202bb:	ff 45 f4             	incl   -0xc(%ebp)
f01202be:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01202c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202c7:	7f d7                	jg     f01202a0 <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01202c9:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01202cf:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01202d5:	89 d0                	mov    %edx,%eax
f01202d7:	c1 e0 02             	shl    $0x2,%eax
f01202da:	01 d0                	add    %edx,%eax
f01202dc:	39 c1                	cmp    %eax,%ecx
f01202de:	74 17                	je     f01202f7 <test_kfree+0xcfe>
f01202e0:	83 ec 04             	sub    $0x4,%esp
f01202e3:	68 94 9a 13 f0       	push   $0xf0139a94
f01202e8:	68 6e 05 00 00       	push   $0x56e
f01202ed:	68 ae 92 13 f0       	push   $0xf01392ae
f01202f2:	e8 b9 fe fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01202f7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01202fd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120300:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120307:	eb 1e                	jmp    f0120327 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f0120309:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012030f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120312:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120315:	01 c8                	add    %ecx,%eax
f0120317:	8a 00                	mov    (%eax),%al
f0120319:	0f be c0             	movsbl %al,%eax
f012031c:	01 d0                	add    %edx,%eax
f012031e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120324:	ff 45 f4             	incl   -0xc(%ebp)
f0120327:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012032d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120330:	7f d7                	jg     f0120309 <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120332:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0120338:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012033e:	89 d0                	mov    %edx,%eax
f0120340:	01 c0                	add    %eax,%eax
f0120342:	01 d0                	add    %edx,%eax
f0120344:	01 c0                	add    %eax,%eax
f0120346:	01 d0                	add    %edx,%eax
f0120348:	39 c1                	cmp    %eax,%ecx
f012034a:	74 17                	je     f0120363 <test_kfree+0xd6a>
f012034c:	83 ec 04             	sub    $0x4,%esp
f012034f:	68 94 9a 13 f0       	push   $0xf0139a94
f0120354:	68 76 05 00 00       	push   $0x576
f0120359:	68 ae 92 13 f0       	push   $0xf01392ae
f012035e:	e8 4d fe fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0120363:	83 ec 0c             	sub    $0xc,%esp
f0120366:	68 c7 9a 13 f0       	push   $0xf0139ac7
f012036b:	e8 c1 0a fe ff       	call   f0100e31 <cprintf>
f0120370:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120373:	e8 66 c6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120378:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012037b:	e8 04 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120380:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120383:	83 ec 0c             	sub    $0xc,%esp
f0120386:	68 00 50 00 00       	push   $0x5000
f012038b:	e8 cf 7b fe ff       	call   f0107f5f <kmalloc>
f0120390:	83 c4 10             	add    $0x10,%esp
f0120393:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120399:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012039f:	89 c1                	mov    %eax,%ecx
f01203a1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01203a8:	10 00 00 
f01203ab:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01203b0:	0f b6 d0             	movzbl %al,%edx
f01203b3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01203b9:	01 d0                	add    %edx,%eax
f01203bb:	48                   	dec    %eax
f01203bc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01203c2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01203c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01203cd:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01203d3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01203d9:	29 d0                	sub    %edx,%eax
f01203db:	89 c3                	mov    %eax,%ebx
f01203dd:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01203e4:	10 00 00 
f01203e7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01203ec:	0f b6 c0             	movzbl %al,%eax
f01203ef:	c1 e0 04             	shl    $0x4,%eax
f01203f2:	89 c2                	mov    %eax,%edx
f01203f4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01203fa:	01 d0                	add    %edx,%eax
f01203fc:	48                   	dec    %eax
f01203fd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120403:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120409:	ba 00 00 00 00       	mov    $0x0,%edx
f012040e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120414:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012041a:	29 d0                	sub    %edx,%eax
f012041c:	01 d8                	add    %ebx,%eax
f012041e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120423:	39 c1                	cmp    %eax,%ecx
f0120425:	74 17                	je     f012043e <test_kfree+0xe45>
f0120427:	83 ec 04             	sub    $0x4,%esp
f012042a:	68 94 93 13 f0       	push   $0xf0139394
f012042f:	68 80 05 00 00       	push   $0x580
f0120434:	68 ae 92 13 f0       	push   $0xf01392ae
f0120439:	e8 72 fd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012043e:	e8 41 42 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120443:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120446:	74 17                	je     f012045f <test_kfree+0xe66>
f0120448:	83 ec 04             	sub    $0x4,%esp
f012044b:	68 c8 92 13 f0       	push   $0xf01392c8
f0120450:	68 81 05 00 00       	push   $0x581
f0120455:	68 ae 92 13 f0       	push   $0xf01392ae
f012045a:	e8 51 fd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012045f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120462:	e8 77 c5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120467:	29 c3                	sub    %eax,%ebx
f0120469:	89 d8                	mov    %ebx,%eax
f012046b:	83 f8 05             	cmp    $0x5,%eax
f012046e:	74 17                	je     f0120487 <test_kfree+0xe8e>
f0120470:	83 ec 04             	sub    $0x4,%esp
f0120473:	68 30 93 13 f0       	push   $0xf0139330
f0120478:	68 82 05 00 00       	push   $0x582
f012047d:	68 ae 92 13 f0       	push   $0xf01392ae
f0120482:	e8 29 fd fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120487:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f012048e:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120491:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120497:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012049a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204a1:	eb 0e                	jmp    f01204b1 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f01204a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01204a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01204a9:	01 d0                	add    %edx,%eax
f01204ab:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01204ae:	ff 45 f4             	incl   -0xc(%ebp)
f01204b1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01204b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204ba:	7f e7                	jg     f01204a3 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01204bc:	e8 1d c5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01204c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204c4:	e8 bb 41 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01204c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01204cc:	83 ec 0c             	sub    $0xc,%esp
f01204cf:	68 00 00 10 00       	push   $0x100000
f01204d4:	e8 86 7a fe ff       	call   f0107f5f <kmalloc>
f01204d9:	83 c4 10             	add    $0x10,%esp
f01204dc:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204e2:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01204e8:	89 c1                	mov    %eax,%ecx
f01204ea:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01204f1:	10 00 00 
f01204f4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01204f9:	0f b6 d0             	movzbl %al,%edx
f01204fc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120502:	01 d0                	add    %edx,%eax
f0120504:	48                   	dec    %eax
f0120505:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012050b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120511:	ba 00 00 00 00       	mov    $0x0,%edx
f0120516:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012051c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120522:	29 d0                	sub    %edx,%eax
f0120524:	89 c3                	mov    %eax,%ebx
f0120526:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012052d:	10 00 00 
f0120530:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120535:	0f b6 c0             	movzbl %al,%eax
f0120538:	c1 e0 04             	shl    $0x4,%eax
f012053b:	89 c2                	mov    %eax,%edx
f012053d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120543:	01 d0                	add    %edx,%eax
f0120545:	48                   	dec    %eax
f0120546:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012054c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120552:	ba 00 00 00 00       	mov    $0x0,%edx
f0120557:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012055d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120563:	29 d0                	sub    %edx,%eax
f0120565:	01 d8                	add    %ebx,%eax
f0120567:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012056c:	39 c1                	cmp    %eax,%ecx
f012056e:	74 17                	je     f0120587 <test_kfree+0xf8e>
f0120570:	83 ec 04             	sub    $0x4,%esp
f0120573:	68 94 93 13 f0       	push   $0xf0139394
f0120578:	68 8e 05 00 00       	push   $0x58e
f012057d:	68 ae 92 13 f0       	push   $0xf01392ae
f0120582:	e8 29 fc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120587:	e8 f8 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012058c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012058f:	74 17                	je     f01205a8 <test_kfree+0xfaf>
f0120591:	83 ec 04             	sub    $0x4,%esp
f0120594:	68 c8 92 13 f0       	push   $0xf01392c8
f0120599:	68 8f 05 00 00       	push   $0x58f
f012059e:	68 ae 92 13 f0       	push   $0xf01392ae
f01205a3:	e8 08 fc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205a8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205ab:	e8 2e c4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01205b0:	29 c3                	sub    %eax,%ebx
f01205b2:	89 d8                	mov    %ebx,%eax
f01205b4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01205b9:	74 17                	je     f01205d2 <test_kfree+0xfd9>
f01205bb:	83 ec 04             	sub    $0x4,%esp
f01205be:	68 30 93 13 f0       	push   $0xf0139330
f01205c3:	68 90 05 00 00       	push   $0x590
f01205c8:	68 ae 92 13 f0       	push   $0xf01392ae
f01205cd:	e8 de fb fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01205d2:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01205d9:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01205dc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01205e2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01205e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205ec:	eb 0e                	jmp    f01205fc <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f01205ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01205f4:	01 d0                	add    %edx,%eax
f01205f6:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01205f9:	ff 45 f4             	incl   -0xc(%ebp)
f01205fc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120602:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120605:	7f e7                	jg     f01205ee <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120607:	e8 16 7e ff ff       	call   f0118422 <isKHeapPlacementStrategyNEXTFIT>
f012060c:	84 c0                	test   %al,%al
f012060e:	0f 84 9e 05 00 00    	je     f0120bb2 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120614:	e8 c5 c3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120619:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012061c:	e8 63 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120621:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120624:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012062b:	10 00 00 
f012062e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120633:	0f b6 d0             	movzbl %al,%edx
f0120636:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012063c:	01 d0                	add    %edx,%eax
f012063e:	48                   	dec    %eax
f012063f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120645:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012064b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120650:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120656:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012065c:	29 d0                	sub    %edx,%eax
f012065e:	89 c1                	mov    %eax,%ecx
f0120660:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120667:	10 00 00 
f012066a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012066f:	0f b6 c0             	movzbl %al,%eax
f0120672:	c1 e0 04             	shl    $0x4,%eax
f0120675:	89 c2                	mov    %eax,%edx
f0120677:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012067d:	01 d0                	add    %edx,%eax
f012067f:	48                   	dec    %eax
f0120680:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120686:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012068c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120691:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120697:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012069d:	29 d0                	sub    %edx,%eax
f012069f:	01 c8                	add    %ecx,%eax
f01206a1:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01206a6:	29 c2                	sub    %eax,%edx
f01206a8:	89 d0                	mov    %edx,%eax
f01206aa:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01206b0:	83 ec 0c             	sub    $0xc,%esp
f01206b3:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f01206b9:	e8 a1 78 fe ff       	call   f0107f5f <kmalloc>
f01206be:	83 c4 10             	add    $0x10,%esp
f01206c1:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206c7:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01206cd:	89 c1                	mov    %eax,%ecx
f01206cf:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01206d6:	10 00 00 
f01206d9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01206de:	0f b6 d0             	movzbl %al,%edx
f01206e1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01206e7:	01 d0                	add    %edx,%eax
f01206e9:	48                   	dec    %eax
f01206ea:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01206f0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01206f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01206fb:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0120701:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120707:	29 d0                	sub    %edx,%eax
f0120709:	89 c3                	mov    %eax,%ebx
f012070b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0120712:	10 00 00 
f0120715:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012071a:	0f b6 c0             	movzbl %al,%eax
f012071d:	c1 e0 04             	shl    $0x4,%eax
f0120720:	89 c2                	mov    %eax,%edx
f0120722:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0120728:	01 d0                	add    %edx,%eax
f012072a:	48                   	dec    %eax
f012072b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0120731:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120737:	ba 00 00 00 00       	mov    $0x0,%edx
f012073c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0120742:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120748:	29 d0                	sub    %edx,%eax
f012074a:	01 d8                	add    %ebx,%eax
f012074c:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120751:	39 c1                	cmp    %eax,%ecx
f0120753:	74 17                	je     f012076c <test_kfree+0x1173>
f0120755:	83 ec 04             	sub    $0x4,%esp
f0120758:	68 94 93 13 f0       	push   $0xf0139394
f012075d:	68 9f 05 00 00       	push   $0x59f
f0120762:	68 ae 92 13 f0       	push   $0xf01392ae
f0120767:	e8 44 fa fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012076c:	e8 13 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120771:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120774:	74 17                	je     f012078d <test_kfree+0x1194>
f0120776:	83 ec 04             	sub    $0x4,%esp
f0120779:	68 c8 92 13 f0       	push   $0xf01392c8
f012077e:	68 a0 05 00 00       	push   $0x5a0
f0120783:	68 ae 92 13 f0       	push   $0xf01392ae
f0120788:	e8 23 fa fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012078d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120790:	e8 49 c2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120795:	29 c3                	sub    %eax,%ebx
f0120797:	89 da                	mov    %ebx,%edx
f0120799:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012079f:	c1 e8 0c             	shr    $0xc,%eax
f01207a2:	39 c2                	cmp    %eax,%edx
f01207a4:	74 17                	je     f01207bd <test_kfree+0x11c4>
f01207a6:	83 ec 04             	sub    $0x4,%esp
f01207a9:	68 30 93 13 f0       	push   $0xf0139330
f01207ae:	68 a1 05 00 00       	push   $0x5a1
f01207b3:	68 ae 92 13 f0       	push   $0xf01392ae
f01207b8:	e8 f3 f9 fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01207bd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01207c3:	48                   	dec    %eax
f01207c4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f01207ca:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01207d0:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01207d3:	e8 06 c2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01207d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01207db:	e8 a4 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01207e0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01207e3:	83 ec 0c             	sub    $0xc,%esp
f01207e6:	68 00 00 30 00       	push   $0x300000
f01207eb:	e8 6f 77 fe ff       	call   f0107f5f <kmalloc>
f01207f0:	83 c4 10             	add    $0x10,%esp
f01207f3:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207f9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01207ff:	89 c1                	mov    %eax,%ecx
f0120801:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0120808:	10 00 00 
f012080b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120810:	0f b6 d0             	movzbl %al,%edx
f0120813:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120819:	01 d0                	add    %edx,%eax
f012081b:	48                   	dec    %eax
f012081c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120822:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120828:	ba 00 00 00 00       	mov    $0x0,%edx
f012082d:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120833:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120839:	29 d0                	sub    %edx,%eax
f012083b:	89 c3                	mov    %eax,%ebx
f012083d:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120844:	10 00 00 
f0120847:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012084c:	0f b6 c0             	movzbl %al,%eax
f012084f:	c1 e0 04             	shl    $0x4,%eax
f0120852:	89 c2                	mov    %eax,%edx
f0120854:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012085a:	01 d0                	add    %edx,%eax
f012085c:	48                   	dec    %eax
f012085d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120863:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120869:	ba 00 00 00 00       	mov    $0x0,%edx
f012086e:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0120874:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012087a:	29 d0                	sub    %edx,%eax
f012087c:	01 d8                	add    %ebx,%eax
f012087e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120883:	39 c1                	cmp    %eax,%ecx
f0120885:	74 17                	je     f012089e <test_kfree+0x12a5>
f0120887:	83 ec 04             	sub    $0x4,%esp
f012088a:	68 94 93 13 f0       	push   $0xf0139394
f012088f:	68 ae 05 00 00       	push   $0x5ae
f0120894:	68 ae 92 13 f0       	push   $0xf01392ae
f0120899:	e8 12 f9 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012089e:	e8 e1 3d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01208a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208a6:	74 17                	je     f01208bf <test_kfree+0x12c6>
f01208a8:	83 ec 04             	sub    $0x4,%esp
f01208ab:	68 c8 92 13 f0       	push   $0xf01392c8
f01208b0:	68 af 05 00 00       	push   $0x5af
f01208b5:	68 ae 92 13 f0       	push   $0xf01392ae
f01208ba:	e8 f1 f8 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208c2:	e8 17 c1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01208c7:	29 c3                	sub    %eax,%ebx
f01208c9:	89 d8                	mov    %ebx,%eax
f01208cb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01208d0:	74 17                	je     f01208e9 <test_kfree+0x12f0>
f01208d2:	83 ec 04             	sub    $0x4,%esp
f01208d5:	68 30 93 13 f0       	push   $0xf0139330
f01208da:	68 b0 05 00 00       	push   $0x5b0
f01208df:	68 ae 92 13 f0       	push   $0xf01392ae
f01208e4:	e8 c7 f8 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f01208e9:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f01208f0:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f01208f3:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01208f9:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f01208fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120903:	eb 0e                	jmp    f0120913 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120905:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120908:	8b 45 98             	mov    -0x68(%ebp),%eax
f012090b:	01 d0                	add    %edx,%eax
f012090d:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120910:	ff 45 f4             	incl   -0xc(%ebp)
f0120913:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120919:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012091c:	7f e7                	jg     f0120905 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012091e:	e8 bb c0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120923:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120926:	e8 59 3d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012092b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012092e:	83 ec 0c             	sub    $0xc,%esp
f0120931:	68 00 08 00 00       	push   $0x800
f0120936:	e8 24 76 fe ff       	call   f0107f5f <kmalloc>
f012093b:	83 c4 10             	add    $0x10,%esp
f012093e:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120944:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012094a:	89 c1                	mov    %eax,%ecx
f012094c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120953:	10 00 00 
f0120956:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012095b:	0f b6 d0             	movzbl %al,%edx
f012095e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120964:	01 d0                	add    %edx,%eax
f0120966:	48                   	dec    %eax
f0120967:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012096d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120973:	ba 00 00 00 00       	mov    $0x0,%edx
f0120978:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012097e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120984:	29 d0                	sub    %edx,%eax
f0120986:	89 c3                	mov    %eax,%ebx
f0120988:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012098f:	10 00 00 
f0120992:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120997:	0f b6 c0             	movzbl %al,%eax
f012099a:	c1 e0 04             	shl    $0x4,%eax
f012099d:	89 c2                	mov    %eax,%edx
f012099f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01209a5:	01 d0                	add    %edx,%eax
f01209a7:	48                   	dec    %eax
f01209a8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01209ae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01209b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01209b9:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01209bf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01209c5:	29 d0                	sub    %edx,%eax
f01209c7:	01 d8                	add    %ebx,%eax
f01209c9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01209ce:	39 c1                	cmp    %eax,%ecx
f01209d0:	74 17                	je     f01209e9 <test_kfree+0x13f0>
f01209d2:	83 ec 04             	sub    $0x4,%esp
f01209d5:	68 94 93 13 f0       	push   $0xf0139394
f01209da:	68 bc 05 00 00       	push   $0x5bc
f01209df:	68 ae 92 13 f0       	push   $0xf01392ae
f01209e4:	e8 c7 f7 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209e9:	e8 96 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01209ee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209f1:	74 17                	je     f0120a0a <test_kfree+0x1411>
f01209f3:	83 ec 04             	sub    $0x4,%esp
f01209f6:	68 c8 92 13 f0       	push   $0xf01392c8
f01209fb:	68 bd 05 00 00       	push   $0x5bd
f0120a00:	68 ae 92 13 f0       	push   $0xf01392ae
f0120a05:	e8 a6 f7 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a0a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a0d:	e8 cc bf fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120a12:	29 c3                	sub    %eax,%ebx
f0120a14:	89 d8                	mov    %ebx,%eax
f0120a16:	83 f8 01             	cmp    $0x1,%eax
f0120a19:	74 17                	je     f0120a32 <test_kfree+0x1439>
f0120a1b:	83 ec 04             	sub    $0x4,%esp
f0120a1e:	68 30 93 13 f0       	push   $0xf0139330
f0120a23:	68 be 05 00 00       	push   $0x5be
f0120a28:	68 ae 92 13 f0       	push   $0xf01392ae
f0120a2d:	e8 7e f7 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120a32:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f0120a39:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120a3c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120a42:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a4c:	eb 0e                	jmp    f0120a5c <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f0120a4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120a54:	01 d0                	add    %edx,%eax
f0120a56:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120a59:	ff 45 f4             	incl   -0xc(%ebp)
f0120a5c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120a62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a65:	7f e7                	jg     f0120a4e <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120a67:	e8 72 bf fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120a6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a6f:	e8 10 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120a74:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120a77:	83 ec 0c             	sub    $0xc,%esp
f0120a7a:	68 00 00 10 00       	push   $0x100000
f0120a7f:	e8 db 74 fe ff       	call   f0107f5f <kmalloc>
f0120a84:	83 c4 10             	add    $0x10,%esp
f0120a87:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a8d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120a93:	89 c1                	mov    %eax,%ecx
f0120a95:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0120a9c:	10 00 00 
f0120a9f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120aa4:	0f b6 d0             	movzbl %al,%edx
f0120aa7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120aad:	01 d0                	add    %edx,%eax
f0120aaf:	48                   	dec    %eax
f0120ab0:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120ab6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120abc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ac1:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120ac7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120acd:	29 d0                	sub    %edx,%eax
f0120acf:	89 c3                	mov    %eax,%ebx
f0120ad1:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120ad8:	10 00 00 
f0120adb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120ae0:	0f b6 c0             	movzbl %al,%eax
f0120ae3:	c1 e0 04             	shl    $0x4,%eax
f0120ae6:	89 c2                	mov    %eax,%edx
f0120ae8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120aee:	01 d0                	add    %edx,%eax
f0120af0:	48                   	dec    %eax
f0120af1:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120af7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120afd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b02:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120b08:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120b0e:	29 d0                	sub    %edx,%eax
f0120b10:	01 d8                	add    %ebx,%eax
f0120b12:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120b17:	39 c1                	cmp    %eax,%ecx
f0120b19:	74 17                	je     f0120b32 <test_kfree+0x1539>
f0120b1b:	83 ec 04             	sub    $0x4,%esp
f0120b1e:	68 94 93 13 f0       	push   $0xf0139394
f0120b23:	68 ca 05 00 00       	push   $0x5ca
f0120b28:	68 ae 92 13 f0       	push   $0xf01392ae
f0120b2d:	e8 7e f6 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b32:	e8 4d 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120b37:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b3a:	74 17                	je     f0120b53 <test_kfree+0x155a>
f0120b3c:	83 ec 04             	sub    $0x4,%esp
f0120b3f:	68 c8 92 13 f0       	push   $0xf01392c8
f0120b44:	68 cb 05 00 00       	push   $0x5cb
f0120b49:	68 ae 92 13 f0       	push   $0xf01392ae
f0120b4e:	e8 5d f6 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b53:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b56:	e8 83 be fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120b5b:	29 c3                	sub    %eax,%ebx
f0120b5d:	89 d8                	mov    %ebx,%eax
f0120b5f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120b64:	74 17                	je     f0120b7d <test_kfree+0x1584>
f0120b66:	83 ec 04             	sub    $0x4,%esp
f0120b69:	68 30 93 13 f0       	push   $0xf0139330
f0120b6e:	68 cc 05 00 00       	push   $0x5cc
f0120b73:	68 ae 92 13 f0       	push   $0xf01392ae
f0120b78:	e8 33 f6 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120b7d:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120b84:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120b87:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120b8d:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120b90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b97:	eb 0e                	jmp    f0120ba7 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120b99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b9c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120b9f:	01 d0                	add    %edx,%eax
f0120ba1:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120ba4:	ff 45 f4             	incl   -0xc(%ebp)
f0120ba7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120bad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120bb0:	7f e7                	jg     f0120b99 <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120bb2:	83 ec 0c             	sub    $0xc,%esp
f0120bb5:	68 ce 9a 13 f0       	push   $0xf0139ace
f0120bba:	e8 72 02 fe ff       	call   f0100e31 <cprintf>
f0120bbf:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120bc2:	e8 17 be fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120bc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bca:	e8 b5 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120bcf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120bd2:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120bd8:	83 ec 0c             	sub    $0xc,%esp
f0120bdb:	50                   	push   %eax
f0120bdc:	e8 98 73 fe ff       	call   f0107f79 <kfree>
f0120be1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120be4:	e8 9b 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120be9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bec:	74 17                	je     f0120c05 <test_kfree+0x160c>
f0120bee:	83 ec 04             	sub    $0x4,%esp
f0120bf1:	68 c8 92 13 f0       	push   $0xf01392c8
f0120bf6:	68 dd 05 00 00       	push   $0x5dd
f0120bfb:	68 ae 92 13 f0       	push   $0xf01392ae
f0120c00:	e8 ab f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c05:	e8 d4 bd fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120c0a:	89 c2                	mov    %eax,%edx
f0120c0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c0f:	29 c2                	sub    %eax,%edx
f0120c11:	89 d0                	mov    %edx,%eax
f0120c13:	83 f8 02             	cmp    $0x2,%eax
f0120c16:	74 17                	je     f0120c2f <test_kfree+0x1636>
f0120c18:	83 ec 04             	sub    $0x4,%esp
f0120c1b:	68 38 9a 13 f0       	push   $0xf0139a38
f0120c20:	68 de 05 00 00       	push   $0x5de
f0120c25:	68 ae 92 13 f0       	push   $0xf01392ae
f0120c2a:	e8 81 f5 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120c2f:	e8 aa bd fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120c34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c37:	e8 48 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120c3f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120c45:	83 ec 0c             	sub    $0xc,%esp
f0120c48:	50                   	push   %eax
f0120c49:	e8 2b 73 fe ff       	call   f0107f79 <kfree>
f0120c4e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c51:	e8 2e 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c56:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c59:	74 17                	je     f0120c72 <test_kfree+0x1679>
f0120c5b:	83 ec 04             	sub    $0x4,%esp
f0120c5e:	68 c8 92 13 f0       	push   $0xf01392c8
f0120c63:	68 e4 05 00 00       	push   $0x5e4
f0120c68:	68 ae 92 13 f0       	push   $0xf01392ae
f0120c6d:	e8 3e f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c72:	e8 67 bd fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120c77:	89 c2                	mov    %eax,%edx
f0120c79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c7c:	29 c2                	sub    %eax,%edx
f0120c7e:	89 d0                	mov    %edx,%eax
f0120c80:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120c85:	74 17                	je     f0120c9e <test_kfree+0x16a5>
f0120c87:	83 ec 04             	sub    $0x4,%esp
f0120c8a:	68 38 9a 13 f0       	push   $0xf0139a38
f0120c8f:	68 e5 05 00 00       	push   $0x5e5
f0120c94:	68 ae 92 13 f0       	push   $0xf01392ae
f0120c99:	e8 12 f5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c9e:	e8 3b bd fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120ca3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ca6:	e8 d9 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120cab:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120cae:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120cb4:	83 ec 0c             	sub    $0xc,%esp
f0120cb7:	50                   	push   %eax
f0120cb8:	e8 bc 72 fe ff       	call   f0107f79 <kfree>
f0120cbd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cc0:	e8 bf 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120cc5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120cc8:	74 17                	je     f0120ce1 <test_kfree+0x16e8>
f0120cca:	83 ec 04             	sub    $0x4,%esp
f0120ccd:	68 c8 92 13 f0       	push   $0xf01392c8
f0120cd2:	68 eb 05 00 00       	push   $0x5eb
f0120cd7:	68 ae 92 13 f0       	push   $0xf01392ae
f0120cdc:	e8 cf f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ce1:	e8 f8 bc fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120ce6:	89 c2                	mov    %eax,%edx
f0120ce8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ceb:	29 c2                	sub    %eax,%edx
f0120ced:	89 d0                	mov    %edx,%eax
f0120cef:	83 f8 01             	cmp    $0x1,%eax
f0120cf2:	74 17                	je     f0120d0b <test_kfree+0x1712>
f0120cf4:	83 ec 04             	sub    $0x4,%esp
f0120cf7:	68 38 9a 13 f0       	push   $0xf0139a38
f0120cfc:	68 ec 05 00 00       	push   $0x5ec
f0120d01:	68 ae 92 13 f0       	push   $0xf01392ae
f0120d06:	e8 a5 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d0b:	e8 ce bc fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120d10:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d13:	e8 6c 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d18:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120d1b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120d21:	83 ec 0c             	sub    $0xc,%esp
f0120d24:	50                   	push   %eax
f0120d25:	e8 4f 72 fe ff       	call   f0107f79 <kfree>
f0120d2a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d2d:	e8 52 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d32:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d35:	74 17                	je     f0120d4e <test_kfree+0x1755>
f0120d37:	83 ec 04             	sub    $0x4,%esp
f0120d3a:	68 c8 92 13 f0       	push   $0xf01392c8
f0120d3f:	68 f2 05 00 00       	push   $0x5f2
f0120d44:	68 ae 92 13 f0       	push   $0xf01392ae
f0120d49:	e8 62 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d4e:	e8 8b bc fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120d53:	89 c2                	mov    %eax,%edx
f0120d55:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d58:	29 c2                	sub    %eax,%edx
f0120d5a:	89 d0                	mov    %edx,%eax
f0120d5c:	83 f8 04             	cmp    $0x4,%eax
f0120d5f:	74 17                	je     f0120d78 <test_kfree+0x177f>
f0120d61:	83 ec 04             	sub    $0x4,%esp
f0120d64:	68 38 9a 13 f0       	push   $0xf0139a38
f0120d69:	68 f3 05 00 00       	push   $0x5f3
f0120d6e:	68 ae 92 13 f0       	push   $0xf01392ae
f0120d73:	e8 38 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d78:	e8 61 bc fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120d7d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d80:	e8 ff 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d85:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120d88:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120d8e:	83 ec 0c             	sub    $0xc,%esp
f0120d91:	50                   	push   %eax
f0120d92:	e8 e2 71 fe ff       	call   f0107f79 <kfree>
f0120d97:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d9a:	e8 e5 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d9f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120da2:	74 17                	je     f0120dbb <test_kfree+0x17c2>
f0120da4:	83 ec 04             	sub    $0x4,%esp
f0120da7:	68 c8 92 13 f0       	push   $0xf01392c8
f0120dac:	68 f9 05 00 00       	push   $0x5f9
f0120db1:	68 ae 92 13 f0       	push   $0xf01392ae
f0120db6:	e8 f5 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120dbb:	e8 1e bc fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120dc0:	89 c2                	mov    %eax,%edx
f0120dc2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120dc5:	29 c2                	sub    %eax,%edx
f0120dc7:	89 d0                	mov    %edx,%eax
f0120dc9:	83 f8 05             	cmp    $0x5,%eax
f0120dcc:	74 17                	je     f0120de5 <test_kfree+0x17ec>
f0120dce:	83 ec 04             	sub    $0x4,%esp
f0120dd1:	68 38 9a 13 f0       	push   $0xf0139a38
f0120dd6:	68 fa 05 00 00       	push   $0x5fa
f0120ddb:	68 ae 92 13 f0       	push   $0xf01392ae
f0120de0:	e8 cb f3 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120de5:	e8 f4 bb fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120dea:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ded:	e8 92 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120df2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120df5:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120dfb:	83 ec 0c             	sub    $0xc,%esp
f0120dfe:	50                   	push   %eax
f0120dff:	e8 75 71 fe ff       	call   f0107f79 <kfree>
f0120e04:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e07:	e8 78 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e0c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e0f:	74 17                	je     f0120e28 <test_kfree+0x182f>
f0120e11:	83 ec 04             	sub    $0x4,%esp
f0120e14:	68 c8 92 13 f0       	push   $0xf01392c8
f0120e19:	68 00 06 00 00       	push   $0x600
f0120e1e:	68 ae 92 13 f0       	push   $0xf01392ae
f0120e23:	e8 88 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e28:	e8 b1 bb fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120e2d:	89 c2                	mov    %eax,%edx
f0120e2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e32:	29 c2                	sub    %eax,%edx
f0120e34:	89 d0                	mov    %edx,%eax
f0120e36:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120e3b:	74 17                	je     f0120e54 <test_kfree+0x185b>
f0120e3d:	83 ec 04             	sub    $0x4,%esp
f0120e40:	68 38 9a 13 f0       	push   $0xf0139a38
f0120e45:	68 01 06 00 00       	push   $0x601
f0120e4a:	68 ae 92 13 f0       	push   $0xf01392ae
f0120e4f:	e8 5c f3 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120e54:	e8 c9 75 ff ff       	call   f0118422 <isKHeapPlacementStrategyNEXTFIT>
f0120e59:	84 c0                	test   %al,%al
f0120e5b:	0f 84 4a 02 00 00    	je     f01210ab <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120e61:	e8 78 bb fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120e66:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120e69:	e8 16 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120e71:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120e77:	83 ec 0c             	sub    $0xc,%esp
f0120e7a:	50                   	push   %eax
f0120e7b:	e8 f9 70 fe ff       	call   f0107f79 <kfree>
f0120e80:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120e83:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0120e8a:	10 00 00 
f0120e8d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120e92:	0f b6 d0             	movzbl %al,%edx
f0120e95:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120e9b:	01 d0                	add    %edx,%eax
f0120e9d:	48                   	dec    %eax
f0120e9e:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0120ea4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120eaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0120eaf:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0120eb5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120ebb:	29 d0                	sub    %edx,%eax
f0120ebd:	89 c1                	mov    %eax,%ecx
f0120ebf:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0120ec6:	10 00 00 
f0120ec9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0120ece:	0f b6 c0             	movzbl %al,%eax
f0120ed1:	c1 e0 04             	shl    $0x4,%eax
f0120ed4:	89 c2                	mov    %eax,%edx
f0120ed6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120edc:	01 d0                	add    %edx,%eax
f0120ede:	48                   	dec    %eax
f0120edf:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0120ee5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120eeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ef0:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0120ef6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120efc:	29 d0                	sub    %edx,%eax
f0120efe:	01 c8                	add    %ecx,%eax
f0120f00:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120f05:	29 c2                	sub    %eax,%edx
f0120f07:	89 d0                	mov    %edx,%eax
f0120f09:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f0f:	e8 70 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f14:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f17:	74 17                	je     f0120f30 <test_kfree+0x1937>
f0120f19:	83 ec 04             	sub    $0x4,%esp
f0120f1c:	68 c8 92 13 f0       	push   $0xf01392c8
f0120f21:	68 0b 06 00 00       	push   $0x60b
f0120f26:	68 ae 92 13 f0       	push   $0xf01392ae
f0120f2b:	e8 80 f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f30:	e8 a9 ba fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120f35:	89 c2                	mov    %eax,%edx
f0120f37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f3a:	29 c2                	sub    %eax,%edx
f0120f3c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120f42:	c1 e8 0c             	shr    $0xc,%eax
f0120f45:	39 c2                	cmp    %eax,%edx
f0120f47:	74 17                	je     f0120f60 <test_kfree+0x1967>
f0120f49:	83 ec 04             	sub    $0x4,%esp
f0120f4c:	68 38 9a 13 f0       	push   $0xf0139a38
f0120f51:	68 0c 06 00 00       	push   $0x60c
f0120f56:	68 ae 92 13 f0       	push   $0xf01392ae
f0120f5b:	e8 50 f2 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f60:	e8 79 ba fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120f65:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f68:	e8 17 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120f70:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f76:	83 ec 0c             	sub    $0xc,%esp
f0120f79:	50                   	push   %eax
f0120f7a:	e8 fa 6f fe ff       	call   f0107f79 <kfree>
f0120f7f:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f82:	e8 fd 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f87:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f8a:	74 17                	je     f0120fa3 <test_kfree+0x19aa>
f0120f8c:	83 ec 04             	sub    $0x4,%esp
f0120f8f:	68 c8 92 13 f0       	push   $0xf01392c8
f0120f94:	68 12 06 00 00       	push   $0x612
f0120f99:	68 ae 92 13 f0       	push   $0xf01392ae
f0120f9e:	e8 0d f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fa3:	e8 36 ba fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120fa8:	89 c2                	mov    %eax,%edx
f0120faa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fad:	29 c2                	sub    %eax,%edx
f0120faf:	89 d0                	mov    %edx,%eax
f0120fb1:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120fb6:	74 17                	je     f0120fcf <test_kfree+0x19d6>
f0120fb8:	83 ec 04             	sub    $0x4,%esp
f0120fbb:	68 38 9a 13 f0       	push   $0xf0139a38
f0120fc0:	68 13 06 00 00       	push   $0x613
f0120fc5:	68 ae 92 13 f0       	push   $0xf01392ae
f0120fca:	e8 e1 f1 fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120fcf:	e8 0a ba fe ff       	call   f010c9de <sys_calculate_free_frames>
f0120fd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120fd7:	e8 a8 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120fdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120fdf:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120fe5:	83 ec 0c             	sub    $0xc,%esp
f0120fe8:	50                   	push   %eax
f0120fe9:	e8 8b 6f fe ff       	call   f0107f79 <kfree>
f0120fee:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ff1:	e8 8e 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120ff6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ff9:	74 17                	je     f0121012 <test_kfree+0x1a19>
f0120ffb:	83 ec 04             	sub    $0x4,%esp
f0120ffe:	68 c8 92 13 f0       	push   $0xf01392c8
f0121003:	68 19 06 00 00       	push   $0x619
f0121008:	68 ae 92 13 f0       	push   $0xf01392ae
f012100d:	e8 9e f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121012:	e8 c7 b9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121017:	89 c2                	mov    %eax,%edx
f0121019:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012101c:	29 c2                	sub    %eax,%edx
f012101e:	89 d0                	mov    %edx,%eax
f0121020:	83 f8 01             	cmp    $0x1,%eax
f0121023:	74 17                	je     f012103c <test_kfree+0x1a43>
f0121025:	83 ec 04             	sub    $0x4,%esp
f0121028:	68 38 9a 13 f0       	push   $0xf0139a38
f012102d:	68 1a 06 00 00       	push   $0x61a
f0121032:	68 ae 92 13 f0       	push   $0xf01392ae
f0121037:	e8 74 f1 fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012103c:	e8 9d b9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121041:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121044:	e8 3b 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121049:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012104c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121052:	83 ec 0c             	sub    $0xc,%esp
f0121055:	50                   	push   %eax
f0121056:	e8 1e 6f fe ff       	call   f0107f79 <kfree>
f012105b:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012105e:	e8 21 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121063:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121066:	74 17                	je     f012107f <test_kfree+0x1a86>
f0121068:	83 ec 04             	sub    $0x4,%esp
f012106b:	68 c8 92 13 f0       	push   $0xf01392c8
f0121070:	68 20 06 00 00       	push   $0x620
f0121075:	68 ae 92 13 f0       	push   $0xf01392ae
f012107a:	e8 31 f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012107f:	e8 5a b9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121084:	89 c2                	mov    %eax,%edx
f0121086:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121089:	29 c2                	sub    %eax,%edx
f012108b:	89 d0                	mov    %edx,%eax
f012108d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121092:	74 17                	je     f01210ab <test_kfree+0x1ab2>
f0121094:	83 ec 04             	sub    $0x4,%esp
f0121097:	68 38 9a 13 f0       	push   $0xf0139a38
f012109c:	68 21 06 00 00       	push   $0x621
f01210a1:	68 ae 92 13 f0       	push   $0xf01392ae
f01210a6:	e8 05 f1 fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01210ab:	e8 2e b9 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01210b0:	89 c2                	mov    %eax,%edx
f01210b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01210b5:	39 c2                	cmp    %eax,%edx
f01210b7:	74 17                	je     f01210d0 <test_kfree+0x1ad7>
f01210b9:	83 ec 04             	sub    $0x4,%esp
f01210bc:	68 d8 9a 13 f0       	push   $0xf0139ad8
f01210c1:	68 24 06 00 00       	push   $0x624
f01210c6:	68 ae 92 13 f0       	push   $0xf01392ae
f01210cb:	e8 e0 f0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01210d0:	83 ec 0c             	sub    $0xc,%esp
f01210d3:	68 0c 9b 13 f0       	push   $0xf0139b0c
f01210d8:	e8 54 fd fd ff       	call   f0100e31 <cprintf>
f01210dd:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01210e0:	83 ec 0c             	sub    $0xc,%esp
f01210e3:	6a 03                	push   $0x3
f01210e5:	e8 8f bd fe ff       	call   f010ce79 <sys_bypassPageFault>
f01210ea:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01210ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210f4:	e9 82 00 00 00       	jmp    f012117b <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f01210f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210fc:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0121103:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0121106:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121109:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012110c:	e8 56 bd fe ff       	call   f010ce67 <sys_rcr2>
f0121111:	89 c2                	mov    %eax,%edx
f0121113:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121116:	39 c2                	cmp    %eax,%edx
f0121118:	74 17                	je     f0121131 <test_kfree+0x1b38>
f012111a:	83 ec 04             	sub    $0x4,%esp
f012111d:	68 14 9b 13 f0       	push   $0xf0139b14
f0121122:	68 33 06 00 00       	push   $0x633
f0121127:	68 ae 92 13 f0       	push   $0xf01392ae
f012112c:	e8 7f f0 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0121131:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121134:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012113b:	89 c2                	mov    %eax,%edx
f012113d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121140:	01 d0                	add    %edx,%eax
f0121142:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121145:	e8 1d bd fe ff       	call   f010ce67 <sys_rcr2>
f012114a:	89 c2                	mov    %eax,%edx
f012114c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012114f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0121156:	89 c1                	mov    %eax,%ecx
f0121158:	8b 45 98             	mov    -0x68(%ebp),%eax
f012115b:	01 c8                	add    %ecx,%eax
f012115d:	39 c2                	cmp    %eax,%edx
f012115f:	74 17                	je     f0121178 <test_kfree+0x1b7f>
f0121161:	83 ec 04             	sub    $0x4,%esp
f0121164:	68 14 9b 13 f0       	push   $0xf0139b14
f0121169:	68 35 06 00 00       	push   $0x635
f012116e:	68 ae 92 13 f0       	push   $0xf01392ae
f0121173:	e8 38 f0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121178:	ff 45 f4             	incl   -0xc(%ebp)
f012117b:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012117f:	0f 8e 74 ff ff ff    	jle    f01210f9 <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121185:	83 ec 0c             	sub    $0xc,%esp
f0121188:	6a 00                	push   $0x0
f012118a:	e8 ea bc fe ff       	call   f010ce79 <sys_bypassPageFault>
f012118f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121192:	83 ec 0c             	sub    $0xc,%esp
f0121195:	68 59 9b 13 f0       	push   $0xf0139b59
f012119a:	e8 92 fc fd ff       	call   f0100e31 <cprintf>
f012119f:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01211a2:	e8 37 b8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01211a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211aa:	e8 d5 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211af:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01211b2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01211b8:	83 ec 0c             	sub    $0xc,%esp
f01211bb:	50                   	push   %eax
f01211bc:	e8 b8 6d fe ff       	call   f0107f79 <kfree>
f01211c1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211c4:	e8 bb 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211c9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211cc:	74 17                	je     f01211e5 <test_kfree+0x1bec>
f01211ce:	83 ec 04             	sub    $0x4,%esp
f01211d1:	68 c8 92 13 f0       	push   $0xf01392c8
f01211d6:	68 43 06 00 00       	push   $0x643
f01211db:	68 ae 92 13 f0       	push   $0xf01392ae
f01211e0:	e8 cb ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01211e5:	e8 f4 b7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01211ea:	89 c2                	mov    %eax,%edx
f01211ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211ef:	39 c2                	cmp    %eax,%edx
f01211f1:	74 17                	je     f012120a <test_kfree+0x1c11>
f01211f3:	83 ec 04             	sub    $0x4,%esp
f01211f6:	68 60 9b 13 f0       	push   $0xf0139b60
f01211fb:	68 44 06 00 00       	push   $0x644
f0121200:	68 ae 92 13 f0       	push   $0xf01392ae
f0121205:	e8 a6 ef fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012120a:	e8 cf b7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012120f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121212:	e8 6d 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121217:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012121a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121220:	83 ec 0c             	sub    $0xc,%esp
f0121223:	50                   	push   %eax
f0121224:	e8 50 6d fe ff       	call   f0107f79 <kfree>
f0121229:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012122c:	e8 53 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121231:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121234:	74 17                	je     f012124d <test_kfree+0x1c54>
f0121236:	83 ec 04             	sub    $0x4,%esp
f0121239:	68 c8 92 13 f0       	push   $0xf01392c8
f012123e:	68 4a 06 00 00       	push   $0x64a
f0121243:	68 ae 92 13 f0       	push   $0xf01392ae
f0121248:	e8 63 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012124d:	e8 8c b7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121252:	89 c2                	mov    %eax,%edx
f0121254:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121257:	39 c2                	cmp    %eax,%edx
f0121259:	74 17                	je     f0121272 <test_kfree+0x1c79>
f012125b:	83 ec 04             	sub    $0x4,%esp
f012125e:	68 60 9b 13 f0       	push   $0xf0139b60
f0121263:	68 4b 06 00 00       	push   $0x64b
f0121268:	68 ae 92 13 f0       	push   $0xf01392ae
f012126d:	e8 3e ef fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121272:	e8 67 b7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121277:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012127a:	e8 05 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012127f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121282:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0121288:	83 ec 0c             	sub    $0xc,%esp
f012128b:	50                   	push   %eax
f012128c:	e8 e8 6c fe ff       	call   f0107f79 <kfree>
f0121291:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121294:	e8 eb 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121299:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012129c:	74 17                	je     f01212b5 <test_kfree+0x1cbc>
f012129e:	83 ec 04             	sub    $0x4,%esp
f01212a1:	68 c8 92 13 f0       	push   $0xf01392c8
f01212a6:	68 51 06 00 00       	push   $0x651
f01212ab:	68 ae 92 13 f0       	push   $0xf01392ae
f01212b0:	e8 fb ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01212b5:	e8 24 b7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01212ba:	89 c2                	mov    %eax,%edx
f01212bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212bf:	39 c2                	cmp    %eax,%edx
f01212c1:	74 17                	je     f01212da <test_kfree+0x1ce1>
f01212c3:	83 ec 04             	sub    $0x4,%esp
f01212c6:	68 60 9b 13 f0       	push   $0xf0139b60
f01212cb:	68 52 06 00 00       	push   $0x652
f01212d0:	68 ae 92 13 f0       	push   $0xf01392ae
f01212d5:	e8 d6 ee fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01212da:	e8 ff b6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01212df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212e2:	e8 9d 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01212ea:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01212f0:	83 ec 0c             	sub    $0xc,%esp
f01212f3:	50                   	push   %eax
f01212f4:	e8 80 6c fe ff       	call   f0107f79 <kfree>
f01212f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212fc:	e8 83 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121301:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121304:	74 17                	je     f012131d <test_kfree+0x1d24>
f0121306:	83 ec 04             	sub    $0x4,%esp
f0121309:	68 c8 92 13 f0       	push   $0xf01392c8
f012130e:	68 58 06 00 00       	push   $0x658
f0121313:	68 ae 92 13 f0       	push   $0xf01392ae
f0121318:	e8 93 ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012131d:	e8 bc b6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121322:	89 c2                	mov    %eax,%edx
f0121324:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121327:	39 c2                	cmp    %eax,%edx
f0121329:	74 17                	je     f0121342 <test_kfree+0x1d49>
f012132b:	83 ec 04             	sub    $0x4,%esp
f012132e:	68 60 9b 13 f0       	push   $0xf0139b60
f0121333:	68 59 06 00 00       	push   $0x659
f0121338:	68 ae 92 13 f0       	push   $0xf01392ae
f012133d:	e8 6e ee fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0121342:	83 ec 0c             	sub    $0xc,%esp
f0121345:	68 a7 9b 13 f0       	push   $0xf0139ba7
f012134a:	e8 e2 fa fd ff       	call   f0100e31 <cprintf>
f012134f:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121352:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121359:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121360:	eb 48                	jmp    f01213aa <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121362:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121365:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012136a:	83 ec 04             	sub    $0x4,%esp
f012136d:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0121373:	51                   	push   %ecx
f0121374:	52                   	push   %edx
f0121375:	50                   	push   %eax
f0121376:	e8 6c 61 fe ff       	call   f01074e7 <get_page_table>
f012137b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012137e:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0121384:	85 c0                	test   %eax,%eax
f0121386:	75 17                	jne    f012139f <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121388:	83 ec 04             	sub    $0x4,%esp
f012138b:	68 b0 9b 13 f0       	push   $0xf0139bb0
f0121390:	68 67 06 00 00       	push   $0x667
f0121395:	68 ae 92 13 f0       	push   $0xf01392ae
f012139a:	e8 11 ee fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012139f:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01213a6:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01213aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01213ae:	78 b2                	js     f0121362 <test_kfree+0x1d69>
f01213b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01213b4:	7f 09                	jg     f01213bf <test_kfree+0x1dc6>
f01213b6:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01213bd:	76 a3                	jbe    f0121362 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01213bf:	83 ec 0c             	sub    $0xc,%esp
f01213c2:	68 92 94 13 f0       	push   $0xf0139492
f01213c7:	e8 65 fa fd ff       	call   f0100e31 <cprintf>
f01213cc:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01213cf:	83 ec 0c             	sub    $0xc,%esp
f01213d2:	68 18 9c 13 f0       	push   $0xf0139c18
f01213d7:	e8 55 fa fd ff       	call   f0100e31 <cprintf>
f01213dc:	83 c4 10             	add    $0x10,%esp

	return 1;
f01213df:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01213e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01213e7:	5b                   	pop    %ebx
f01213e8:	5f                   	pop    %edi
f01213e9:	5d                   	pop    %ebp
f01213ea:	c3                   	ret    

f01213eb <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01213eb:	55                   	push   %ebp
f01213ec:	89 e5                	mov    %esp,%ebp
f01213ee:	57                   	push   %edi
f01213ef:	53                   	push   %ebx
f01213f0:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f01213f6:	83 ec 0c             	sub    $0xc,%esp
f01213f9:	68 f0 91 13 f0       	push   $0xf01391f0
f01213fe:	e8 2e fa fd ff       	call   f0100e31 <cprintf>
f0121403:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121406:	83 ec 0c             	sub    $0xc,%esp
f0121409:	68 20 92 13 f0       	push   $0xf0139220
f012140e:	e8 1e fa fd ff       	call   f0100e31 <cprintf>
f0121413:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121416:	83 ec 0c             	sub    $0xc,%esp
f0121419:	68 f0 91 13 f0       	push   $0xf01391f0
f012141e:	e8 0e fa fd ff       	call   f0100e31 <cprintf>
f0121423:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121426:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012142a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012142e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121434:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012143a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121441:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121448:	e8 91 b5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012144d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121450:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0121456:	b9 14 00 00 00       	mov    $0x14,%ecx
f012145b:	b8 00 00 00 00       	mov    $0x0,%eax
f0121460:	89 d7                	mov    %edx,%edi
f0121462:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121464:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f012146a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012146f:	b8 00 00 00 00       	mov    $0x0,%eax
f0121474:	89 d7                	mov    %edx,%edi
f0121476:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121478:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f012147e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121483:	b8 00 00 00 00       	mov    $0x0,%eax
f0121488:	89 d7                	mov    %edx,%edi
f012148a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012148c:	e8 4d b5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121491:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121494:	e8 eb 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121499:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012149c:	83 ec 0c             	sub    $0xc,%esp
f012149f:	68 00 fc 1f 00       	push   $0x1ffc00
f01214a4:	e8 b6 6a fe ff       	call   f0107f5f <kmalloc>
f01214a9:	83 c4 10             	add    $0x10,%esp
f01214ac:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01214b2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01214b8:	89 c1                	mov    %eax,%ecx
f01214ba:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01214c1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01214c6:	0f b6 d0             	movzbl %al,%edx
f01214c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01214cc:	01 d0                	add    %edx,%eax
f01214ce:	48                   	dec    %eax
f01214cf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01214d2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01214d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01214da:	f7 75 c8             	divl   -0x38(%ebp)
f01214dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01214e0:	29 d0                	sub    %edx,%eax
f01214e2:	89 c3                	mov    %eax,%ebx
f01214e4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01214eb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01214f0:	0f b6 c0             	movzbl %al,%eax
f01214f3:	c1 e0 04             	shl    $0x4,%eax
f01214f6:	89 c2                	mov    %eax,%edx
f01214f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01214fb:	01 d0                	add    %edx,%eax
f01214fd:	48                   	dec    %eax
f01214fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121501:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121504:	ba 00 00 00 00       	mov    $0x0,%edx
f0121509:	f7 75 c0             	divl   -0x40(%ebp)
f012150c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012150f:	29 d0                	sub    %edx,%eax
f0121511:	01 d8                	add    %ebx,%eax
f0121513:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121518:	39 c1                	cmp    %eax,%ecx
f012151a:	74 17                	je     f0121533 <test_kfree_bestfirstfit+0x148>
f012151c:	83 ec 04             	sub    $0x4,%esp
f012151f:	68 94 93 13 f0       	push   $0xf0139394
f0121524:	68 95 06 00 00       	push   $0x695
f0121529:	68 ae 92 13 f0       	push   $0xf01392ae
f012152e:	e8 7d ec fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121533:	e8 4c 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121538:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012153b:	74 17                	je     f0121554 <test_kfree_bestfirstfit+0x169>
f012153d:	83 ec 04             	sub    $0x4,%esp
f0121540:	68 c8 92 13 f0       	push   $0xf01392c8
f0121545:	68 96 06 00 00       	push   $0x696
f012154a:	68 ae 92 13 f0       	push   $0xf01392ae
f012154f:	e8 5c ec fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121554:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121557:	e8 82 b4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012155c:	29 c3                	sub    %eax,%ebx
f012155e:	89 d8                	mov    %ebx,%eax
f0121560:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121565:	74 17                	je     f012157e <test_kfree_bestfirstfit+0x193>
f0121567:	83 ec 04             	sub    $0x4,%esp
f012156a:	68 30 93 13 f0       	push   $0xf0139330
f012156f:	68 97 06 00 00       	push   $0x697
f0121574:	68 ae 92 13 f0       	push   $0xf01392ae
f0121579:	e8 32 ec fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012157e:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121585:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121588:	e8 51 b4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012158d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121590:	e8 ef 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121595:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121598:	83 ec 0c             	sub    $0xc,%esp
f012159b:	68 00 fc 1f 00       	push   $0x1ffc00
f01215a0:	e8 ba 69 fe ff       	call   f0107f5f <kmalloc>
f01215a5:	83 c4 10             	add    $0x10,%esp
f01215a8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215ae:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01215b4:	89 c1                	mov    %eax,%ecx
f01215b6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01215bd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01215c2:	0f b6 d0             	movzbl %al,%edx
f01215c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01215c8:	01 d0                	add    %edx,%eax
f01215ca:	48                   	dec    %eax
f01215cb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01215ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01215d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01215d6:	f7 75 b8             	divl   -0x48(%ebp)
f01215d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01215dc:	29 d0                	sub    %edx,%eax
f01215de:	89 c3                	mov    %eax,%ebx
f01215e0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01215e7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01215ec:	0f b6 c0             	movzbl %al,%eax
f01215ef:	c1 e0 04             	shl    $0x4,%eax
f01215f2:	89 c2                	mov    %eax,%edx
f01215f4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01215f7:	01 d0                	add    %edx,%eax
f01215f9:	48                   	dec    %eax
f01215fa:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01215fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121600:	ba 00 00 00 00       	mov    $0x0,%edx
f0121605:	f7 75 b0             	divl   -0x50(%ebp)
f0121608:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012160b:	29 d0                	sub    %edx,%eax
f012160d:	01 d8                	add    %ebx,%eax
f012160f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121614:	39 c1                	cmp    %eax,%ecx
f0121616:	74 17                	je     f012162f <test_kfree_bestfirstfit+0x244>
f0121618:	83 ec 04             	sub    $0x4,%esp
f012161b:	68 94 93 13 f0       	push   $0xf0139394
f0121620:	68 9e 06 00 00       	push   $0x69e
f0121625:	68 ae 92 13 f0       	push   $0xf01392ae
f012162a:	e8 81 eb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012162f:	e8 50 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121634:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121637:	74 17                	je     f0121650 <test_kfree_bestfirstfit+0x265>
f0121639:	83 ec 04             	sub    $0x4,%esp
f012163c:	68 c8 92 13 f0       	push   $0xf01392c8
f0121641:	68 9f 06 00 00       	push   $0x69f
f0121646:	68 ae 92 13 f0       	push   $0xf01392ae
f012164b:	e8 60 eb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121650:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121653:	e8 86 b3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121658:	29 c3                	sub    %eax,%ebx
f012165a:	89 d8                	mov    %ebx,%eax
f012165c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121661:	74 17                	je     f012167a <test_kfree_bestfirstfit+0x28f>
f0121663:	83 ec 04             	sub    $0x4,%esp
f0121666:	68 30 93 13 f0       	push   $0xf0139330
f012166b:	68 a0 06 00 00       	push   $0x6a0
f0121670:	68 ae 92 13 f0       	push   $0xf01392ae
f0121675:	e8 36 eb fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012167a:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0121681:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121684:	e8 55 b3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121689:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012168c:	e8 f3 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121691:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121694:	83 ec 0c             	sub    $0xc,%esp
f0121697:	68 00 08 00 00       	push   $0x800
f012169c:	e8 be 68 fe ff       	call   f0107f5f <kmalloc>
f01216a1:	83 c4 10             	add    $0x10,%esp
f01216a4:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216aa:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01216b0:	89 c1                	mov    %eax,%ecx
f01216b2:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01216b9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01216be:	0f b6 d0             	movzbl %al,%edx
f01216c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01216c4:	01 d0                	add    %edx,%eax
f01216c6:	48                   	dec    %eax
f01216c7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01216ca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01216cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01216d2:	f7 75 a8             	divl   -0x58(%ebp)
f01216d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01216d8:	29 d0                	sub    %edx,%eax
f01216da:	89 c3                	mov    %eax,%ebx
f01216dc:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01216e3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01216e8:	0f b6 c0             	movzbl %al,%eax
f01216eb:	c1 e0 04             	shl    $0x4,%eax
f01216ee:	89 c2                	mov    %eax,%edx
f01216f0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01216f3:	01 d0                	add    %edx,%eax
f01216f5:	48                   	dec    %eax
f01216f6:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01216f9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01216fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121701:	f7 75 a0             	divl   -0x60(%ebp)
f0121704:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121707:	29 d0                	sub    %edx,%eax
f0121709:	01 d8                	add    %ebx,%eax
f012170b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121710:	39 c1                	cmp    %eax,%ecx
f0121712:	74 17                	je     f012172b <test_kfree_bestfirstfit+0x340>
f0121714:	83 ec 04             	sub    $0x4,%esp
f0121717:	68 94 93 13 f0       	push   $0xf0139394
f012171c:	68 a7 06 00 00       	push   $0x6a7
f0121721:	68 ae 92 13 f0       	push   $0xf01392ae
f0121726:	e8 85 ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012172b:	e8 54 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121730:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121733:	74 17                	je     f012174c <test_kfree_bestfirstfit+0x361>
f0121735:	83 ec 04             	sub    $0x4,%esp
f0121738:	68 c8 92 13 f0       	push   $0xf01392c8
f012173d:	68 a8 06 00 00       	push   $0x6a8
f0121742:	68 ae 92 13 f0       	push   $0xf01392ae
f0121747:	e8 64 ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012174c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012174f:	e8 8a b2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121754:	29 c3                	sub    %eax,%ebx
f0121756:	89 d8                	mov    %ebx,%eax
f0121758:	83 f8 01             	cmp    $0x1,%eax
f012175b:	74 17                	je     f0121774 <test_kfree_bestfirstfit+0x389>
f012175d:	83 ec 04             	sub    $0x4,%esp
f0121760:	68 30 93 13 f0       	push   $0xf0139330
f0121765:	68 a9 06 00 00       	push   $0x6a9
f012176a:	68 ae 92 13 f0       	push   $0xf01392ae
f012176f:	e8 3c ea fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121774:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012177b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012177e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121784:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121787:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012178e:	eb 0e                	jmp    f012179e <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121793:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121796:	01 d0                	add    %edx,%eax
f0121798:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012179b:	ff 45 f4             	incl   -0xc(%ebp)
f012179e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01217a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217a7:	7f e7                	jg     f0121790 <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01217a9:	e8 30 b2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01217ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217b1:	e8 ce 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01217b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01217b9:	83 ec 0c             	sub    $0xc,%esp
f01217bc:	68 00 08 00 00       	push   $0x800
f01217c1:	e8 99 67 fe ff       	call   f0107f5f <kmalloc>
f01217c6:	83 c4 10             	add    $0x10,%esp
f01217c9:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217cf:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01217d5:	89 c1                	mov    %eax,%ecx
f01217d7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01217de:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01217e3:	0f b6 d0             	movzbl %al,%edx
f01217e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01217e9:	01 d0                	add    %edx,%eax
f01217eb:	48                   	dec    %eax
f01217ec:	89 45 90             	mov    %eax,-0x70(%ebp)
f01217ef:	8b 45 90             	mov    -0x70(%ebp),%eax
f01217f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01217f7:	f7 75 94             	divl   -0x6c(%ebp)
f01217fa:	8b 45 90             	mov    -0x70(%ebp),%eax
f01217fd:	29 d0                	sub    %edx,%eax
f01217ff:	89 c3                	mov    %eax,%ebx
f0121801:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0121808:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012180d:	0f b6 c0             	movzbl %al,%eax
f0121810:	c1 e0 04             	shl    $0x4,%eax
f0121813:	89 c2                	mov    %eax,%edx
f0121815:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121818:	01 d0                	add    %edx,%eax
f012181a:	48                   	dec    %eax
f012181b:	89 45 88             	mov    %eax,-0x78(%ebp)
f012181e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121821:	ba 00 00 00 00       	mov    $0x0,%edx
f0121826:	f7 75 8c             	divl   -0x74(%ebp)
f0121829:	8b 45 88             	mov    -0x78(%ebp),%eax
f012182c:	29 d0                	sub    %edx,%eax
f012182e:	01 d8                	add    %ebx,%eax
f0121830:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121835:	39 c1                	cmp    %eax,%ecx
f0121837:	74 17                	je     f0121850 <test_kfree_bestfirstfit+0x465>
f0121839:	83 ec 04             	sub    $0x4,%esp
f012183c:	68 94 93 13 f0       	push   $0xf0139394
f0121841:	68 b5 06 00 00       	push   $0x6b5
f0121846:	68 ae 92 13 f0       	push   $0xf01392ae
f012184b:	e8 60 e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121850:	e8 2f 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121855:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121858:	74 17                	je     f0121871 <test_kfree_bestfirstfit+0x486>
f012185a:	83 ec 04             	sub    $0x4,%esp
f012185d:	68 c8 92 13 f0       	push   $0xf01392c8
f0121862:	68 b6 06 00 00       	push   $0x6b6
f0121867:	68 ae 92 13 f0       	push   $0xf01392ae
f012186c:	e8 3f e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121871:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121874:	e8 65 b1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121879:	29 c3                	sub    %eax,%ebx
f012187b:	89 d8                	mov    %ebx,%eax
f012187d:	83 f8 01             	cmp    $0x1,%eax
f0121880:	74 17                	je     f0121899 <test_kfree_bestfirstfit+0x4ae>
f0121882:	83 ec 04             	sub    $0x4,%esp
f0121885:	68 30 93 13 f0       	push   $0xf0139330
f012188a:	68 b7 06 00 00       	push   $0x6b7
f012188f:	68 ae 92 13 f0       	push   $0xf01392ae
f0121894:	e8 17 e9 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121899:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f01218a0:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01218a3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01218a9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01218ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01218b3:	eb 0e                	jmp    f01218c3 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f01218b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01218b8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01218bb:	01 d0                	add    %edx,%eax
f01218bd:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01218c0:	ff 45 f4             	incl   -0xc(%ebp)
f01218c3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01218c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01218cc:	7f e7                	jg     f01218b5 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01218ce:	e8 0b b1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01218d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218d6:	e8 a9 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01218db:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01218de:	83 ec 0c             	sub    $0xc,%esp
f01218e1:	68 00 1c 00 00       	push   $0x1c00
f01218e6:	e8 74 66 fe ff       	call   f0107f5f <kmalloc>
f01218eb:	83 c4 10             	add    $0x10,%esp
f01218ee:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218f4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01218fa:	89 c1                	mov    %eax,%ecx
f01218fc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121903:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121908:	0f b6 d0             	movzbl %al,%edx
f012190b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012190e:	01 d0                	add    %edx,%eax
f0121910:	48                   	dec    %eax
f0121911:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121914:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121917:	ba 00 00 00 00       	mov    $0x0,%edx
f012191c:	f7 75 84             	divl   -0x7c(%ebp)
f012191f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121922:	29 d0                	sub    %edx,%eax
f0121924:	89 c3                	mov    %eax,%ebx
f0121926:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012192d:	10 00 00 
f0121930:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121935:	0f b6 c0             	movzbl %al,%eax
f0121938:	c1 e0 04             	shl    $0x4,%eax
f012193b:	89 c2                	mov    %eax,%edx
f012193d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121943:	01 d0                	add    %edx,%eax
f0121945:	48                   	dec    %eax
f0121946:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012194c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121952:	ba 00 00 00 00       	mov    $0x0,%edx
f0121957:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012195d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121963:	29 d0                	sub    %edx,%eax
f0121965:	01 d8                	add    %ebx,%eax
f0121967:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012196c:	39 c1                	cmp    %eax,%ecx
f012196e:	74 17                	je     f0121987 <test_kfree_bestfirstfit+0x59c>
f0121970:	83 ec 04             	sub    $0x4,%esp
f0121973:	68 94 93 13 f0       	push   $0xf0139394
f0121978:	68 c3 06 00 00       	push   $0x6c3
f012197d:	68 ae 92 13 f0       	push   $0xf01392ae
f0121982:	e8 29 e8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121987:	e8 f8 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f012198c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012198f:	74 17                	je     f01219a8 <test_kfree_bestfirstfit+0x5bd>
f0121991:	83 ec 04             	sub    $0x4,%esp
f0121994:	68 c8 92 13 f0       	push   $0xf01392c8
f0121999:	68 c4 06 00 00       	push   $0x6c4
f012199e:	68 ae 92 13 f0       	push   $0xf01392ae
f01219a3:	e8 08 e8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219a8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219ab:	e8 2e b0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01219b0:	29 c3                	sub    %eax,%ebx
f01219b2:	89 d8                	mov    %ebx,%eax
f01219b4:	83 f8 02             	cmp    $0x2,%eax
f01219b7:	74 17                	je     f01219d0 <test_kfree_bestfirstfit+0x5e5>
f01219b9:	83 ec 04             	sub    $0x4,%esp
f01219bc:	68 30 93 13 f0       	push   $0xf0139330
f01219c1:	68 c5 06 00 00       	push   $0x6c5
f01219c6:	68 ae 92 13 f0       	push   $0xf01392ae
f01219cb:	e8 e0 e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01219d0:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f01219d7:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01219da:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01219e0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01219e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01219ea:	eb 0e                	jmp    f01219fa <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f01219ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01219ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01219f2:	01 d0                	add    %edx,%eax
f01219f4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01219f7:	ff 45 f4             	incl   -0xc(%ebp)
f01219fa:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121a00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a03:	7f e7                	jg     f01219ec <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121a05:	e8 d4 af fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121a0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a0d:	e8 72 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121a12:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121a15:	83 ec 0c             	sub    $0xc,%esp
f0121a18:	68 00 fc 2f 00       	push   $0x2ffc00
f0121a1d:	e8 3d 65 fe ff       	call   f0107f5f <kmalloc>
f0121a22:	83 c4 10             	add    $0x10,%esp
f0121a25:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a2b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121a31:	89 c1                	mov    %eax,%ecx
f0121a33:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121a3a:	10 00 00 
f0121a3d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121a42:	0f b6 d0             	movzbl %al,%edx
f0121a45:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121a4b:	01 d0                	add    %edx,%eax
f0121a4d:	48                   	dec    %eax
f0121a4e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121a54:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a5f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121a65:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a6b:	29 d0                	sub    %edx,%eax
f0121a6d:	89 c3                	mov    %eax,%ebx
f0121a6f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121a76:	10 00 00 
f0121a79:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121a7e:	0f b6 c0             	movzbl %al,%eax
f0121a81:	c1 e0 04             	shl    $0x4,%eax
f0121a84:	89 c2                	mov    %eax,%edx
f0121a86:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121a8c:	01 d0                	add    %edx,%eax
f0121a8e:	48                   	dec    %eax
f0121a8f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121a95:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aa0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121aa6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121aac:	29 d0                	sub    %edx,%eax
f0121aae:	01 d8                	add    %ebx,%eax
f0121ab0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121ab5:	39 c1                	cmp    %eax,%ecx
f0121ab7:	74 17                	je     f0121ad0 <test_kfree_bestfirstfit+0x6e5>
f0121ab9:	83 ec 04             	sub    $0x4,%esp
f0121abc:	68 94 93 13 f0       	push   $0xf0139394
f0121ac1:	68 d1 06 00 00       	push   $0x6d1
f0121ac6:	68 ae 92 13 f0       	push   $0xf01392ae
f0121acb:	e8 e0 e6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ad0:	e8 af 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ad5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ad8:	74 17                	je     f0121af1 <test_kfree_bestfirstfit+0x706>
f0121ada:	83 ec 04             	sub    $0x4,%esp
f0121add:	68 c8 92 13 f0       	push   $0xf01392c8
f0121ae2:	68 d2 06 00 00       	push   $0x6d2
f0121ae7:	68 ae 92 13 f0       	push   $0xf01392ae
f0121aec:	e8 bf e6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121af1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121af4:	e8 e5 ae fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121af9:	29 c3                	sub    %eax,%ebx
f0121afb:	89 d8                	mov    %ebx,%eax
f0121afd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b02:	74 17                	je     f0121b1b <test_kfree_bestfirstfit+0x730>
f0121b04:	83 ec 04             	sub    $0x4,%esp
f0121b07:	68 30 93 13 f0       	push   $0xf0139330
f0121b0c:	68 d3 06 00 00       	push   $0x6d3
f0121b11:	68 ae 92 13 f0       	push   $0xf01392ae
f0121b16:	e8 95 e6 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121b1b:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121b22:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121b25:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121b2b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121b2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b35:	eb 0e                	jmp    f0121b45 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f0121b37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b3a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121b3d:	01 d0                	add    %edx,%eax
f0121b3f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121b42:	ff 45 f4             	incl   -0xc(%ebp)
f0121b45:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121b4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b4e:	7f e7                	jg     f0121b37 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b50:	e8 89 ae fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121b55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b58:	e8 27 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121b5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121b60:	83 ec 0c             	sub    $0xc,%esp
f0121b63:	68 00 fc 5f 00       	push   $0x5ffc00
f0121b68:	e8 f2 63 fe ff       	call   f0107f5f <kmalloc>
f0121b6d:	83 c4 10             	add    $0x10,%esp
f0121b70:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b76:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121b7c:	89 c1                	mov    %eax,%ecx
f0121b7e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121b85:	10 00 00 
f0121b88:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121b8d:	0f b6 d0             	movzbl %al,%edx
f0121b90:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121b96:	01 d0                	add    %edx,%eax
f0121b98:	48                   	dec    %eax
f0121b99:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121b9f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121ba5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121baa:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121bb0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121bb6:	29 d0                	sub    %edx,%eax
f0121bb8:	89 c3                	mov    %eax,%ebx
f0121bba:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121bc1:	10 00 00 
f0121bc4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121bc9:	0f b6 c0             	movzbl %al,%eax
f0121bcc:	c1 e0 04             	shl    $0x4,%eax
f0121bcf:	89 c2                	mov    %eax,%edx
f0121bd1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121bd7:	01 d0                	add    %edx,%eax
f0121bd9:	48                   	dec    %eax
f0121bda:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121be0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121be6:	ba 00 00 00 00       	mov    $0x0,%edx
f0121beb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121bf1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121bf7:	29 d0                	sub    %edx,%eax
f0121bf9:	01 d8                	add    %ebx,%eax
f0121bfb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121c00:	39 c1                	cmp    %eax,%ecx
f0121c02:	74 17                	je     f0121c1b <test_kfree_bestfirstfit+0x830>
f0121c04:	83 ec 04             	sub    $0x4,%esp
f0121c07:	68 94 93 13 f0       	push   $0xf0139394
f0121c0c:	68 df 06 00 00       	push   $0x6df
f0121c11:	68 ae 92 13 f0       	push   $0xf01392ae
f0121c16:	e8 95 e5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c1b:	e8 64 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121c20:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c23:	74 17                	je     f0121c3c <test_kfree_bestfirstfit+0x851>
f0121c25:	83 ec 04             	sub    $0x4,%esp
f0121c28:	68 c8 92 13 f0       	push   $0xf01392c8
f0121c2d:	68 e0 06 00 00       	push   $0x6e0
f0121c32:	68 ae 92 13 f0       	push   $0xf01392ae
f0121c37:	e8 74 e5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121c3c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121c3f:	e8 9a ad fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121c44:	29 c3                	sub    %eax,%ebx
f0121c46:	89 d8                	mov    %ebx,%eax
f0121c48:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121c4d:	74 17                	je     f0121c66 <test_kfree_bestfirstfit+0x87b>
f0121c4f:	83 ec 04             	sub    $0x4,%esp
f0121c52:	68 30 93 13 f0       	push   $0xf0139330
f0121c57:	68 e1 06 00 00       	push   $0x6e1
f0121c5c:	68 ae 92 13 f0       	push   $0xf01392ae
f0121c61:	e8 4a e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121c66:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0121c6d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c70:	e8 69 ad fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121c75:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c78:	e8 07 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121c7d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121c80:	83 ec 0c             	sub    $0xc,%esp
f0121c83:	68 00 38 00 00       	push   $0x3800
f0121c88:	e8 d2 62 fe ff       	call   f0107f5f <kmalloc>
f0121c8d:	83 c4 10             	add    $0x10,%esp
f0121c90:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c96:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121c9c:	89 c1                	mov    %eax,%ecx
f0121c9e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121ca5:	10 00 00 
f0121ca8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121cad:	0f b6 d0             	movzbl %al,%edx
f0121cb0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121cb6:	01 d0                	add    %edx,%eax
f0121cb8:	48                   	dec    %eax
f0121cb9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121cbf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121cc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cca:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121cd0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121cd6:	29 d0                	sub    %edx,%eax
f0121cd8:	89 c3                	mov    %eax,%ebx
f0121cda:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121ce1:	10 00 00 
f0121ce4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0121ce9:	0f b6 c0             	movzbl %al,%eax
f0121cec:	c1 e0 04             	shl    $0x4,%eax
f0121cef:	89 c2                	mov    %eax,%edx
f0121cf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121cf7:	01 d0                	add    %edx,%eax
f0121cf9:	48                   	dec    %eax
f0121cfa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121d00:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121d06:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d0b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121d11:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121d17:	29 d0                	sub    %edx,%eax
f0121d19:	01 d8                	add    %ebx,%eax
f0121d1b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121d20:	39 c1                	cmp    %eax,%ecx
f0121d22:	74 17                	je     f0121d3b <test_kfree_bestfirstfit+0x950>
f0121d24:	83 ec 04             	sub    $0x4,%esp
f0121d27:	68 94 93 13 f0       	push   $0xf0139394
f0121d2c:	68 e8 06 00 00       	push   $0x6e8
f0121d31:	68 ae 92 13 f0       	push   $0xf01392ae
f0121d36:	e8 75 e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d3b:	e8 44 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121d40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d43:	74 17                	je     f0121d5c <test_kfree_bestfirstfit+0x971>
f0121d45:	83 ec 04             	sub    $0x4,%esp
f0121d48:	68 c8 92 13 f0       	push   $0xf01392c8
f0121d4d:	68 e9 06 00 00       	push   $0x6e9
f0121d52:	68 ae 92 13 f0       	push   $0xf01392ae
f0121d57:	e8 54 e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d5c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d5f:	e8 7a ac fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121d64:	29 c3                	sub    %eax,%ebx
f0121d66:	89 d8                	mov    %ebx,%eax
f0121d68:	83 f8 04             	cmp    $0x4,%eax
f0121d6b:	74 17                	je     f0121d84 <test_kfree_bestfirstfit+0x999>
f0121d6d:	83 ec 04             	sub    $0x4,%esp
f0121d70:	68 30 93 13 f0       	push   $0xf0139330
f0121d75:	68 ea 06 00 00       	push   $0x6ea
f0121d7a:	68 ae 92 13 f0       	push   $0xf01392ae
f0121d7f:	e8 2c e4 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121d84:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0121d8b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121d8e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121d94:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121d97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d9e:	eb 0e                	jmp    f0121dae <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f0121da0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121da3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121da6:	01 d0                	add    %edx,%eax
f0121da8:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121dab:	ff 45 f4             	incl   -0xc(%ebp)
f0121dae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121db4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121db7:	7f e7                	jg     f0121da0 <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121db9:	e8 20 ac fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121dbe:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121dc4:	e8 bb 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121dc9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121dcf:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121dd5:	83 ec 0c             	sub    $0xc,%esp
f0121dd8:	50                   	push   %eax
f0121dd9:	e8 9b 61 fe ff       	call   f0107f79 <kfree>
f0121dde:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121de1:	e8 9e 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121de6:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121dec:	74 17                	je     f0121e05 <test_kfree_bestfirstfit+0xa1a>
f0121dee:	83 ec 04             	sub    $0x4,%esp
f0121df1:	68 c8 92 13 f0       	push   $0xf01392c8
f0121df6:	68 f9 06 00 00       	push   $0x6f9
f0121dfb:	68 ae 92 13 f0       	push   $0xf01392ae
f0121e00:	e8 ab e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e05:	e8 d4 ab fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121e0a:	89 c2                	mov    %eax,%edx
f0121e0c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121e12:	29 c2                	sub    %eax,%edx
f0121e14:	89 d0                	mov    %edx,%eax
f0121e16:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121e1b:	74 17                	je     f0121e34 <test_kfree_bestfirstfit+0xa49>
f0121e1d:	83 ec 04             	sub    $0x4,%esp
f0121e20:	68 38 9a 13 f0       	push   $0xf0139a38
f0121e25:	68 fa 06 00 00       	push   $0x6fa
f0121e2a:	68 ae 92 13 f0       	push   $0xf01392ae
f0121e2f:	e8 7c e3 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e34:	e8 a5 ab fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121e39:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e3f:	e8 40 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e44:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0121e4a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121e50:	83 ec 0c             	sub    $0xc,%esp
f0121e53:	50                   	push   %eax
f0121e54:	e8 20 61 fe ff       	call   f0107f79 <kfree>
f0121e59:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e5c:	e8 23 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e61:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121e67:	74 17                	je     f0121e80 <test_kfree_bestfirstfit+0xa95>
f0121e69:	83 ec 04             	sub    $0x4,%esp
f0121e6c:	68 c8 92 13 f0       	push   $0xf01392c8
f0121e71:	68 00 07 00 00       	push   $0x700
f0121e76:	68 ae 92 13 f0       	push   $0xf01392ae
f0121e7b:	e8 30 e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e80:	e8 59 ab fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121e85:	89 c2                	mov    %eax,%edx
f0121e87:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121e8d:	29 c2                	sub    %eax,%edx
f0121e8f:	89 d0                	mov    %edx,%eax
f0121e91:	83 f8 01             	cmp    $0x1,%eax
f0121e94:	74 17                	je     f0121ead <test_kfree_bestfirstfit+0xac2>
f0121e96:	83 ec 04             	sub    $0x4,%esp
f0121e99:	68 38 9a 13 f0       	push   $0xf0139a38
f0121e9e:	68 01 07 00 00       	push   $0x701
f0121ea3:	68 ae 92 13 f0       	push   $0xf01392ae
f0121ea8:	e8 03 e3 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ead:	e8 2c ab fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121eb2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121eb8:	e8 c7 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ebd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0121ec3:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121ec9:	83 ec 0c             	sub    $0xc,%esp
f0121ecc:	50                   	push   %eax
f0121ecd:	e8 a7 60 fe ff       	call   f0107f79 <kfree>
f0121ed2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ed5:	e8 aa 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121eda:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121ee0:	74 17                	je     f0121ef9 <test_kfree_bestfirstfit+0xb0e>
f0121ee2:	83 ec 04             	sub    $0x4,%esp
f0121ee5:	68 c8 92 13 f0       	push   $0xf01392c8
f0121eea:	68 07 07 00 00       	push   $0x707
f0121eef:	68 ae 92 13 f0       	push   $0xf01392ae
f0121ef4:	e8 b7 e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ef9:	e8 e0 aa fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121efe:	89 c2                	mov    %eax,%edx
f0121f00:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121f06:	29 c2                	sub    %eax,%edx
f0121f08:	89 d0                	mov    %edx,%eax
f0121f0a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121f0f:	74 17                	je     f0121f28 <test_kfree_bestfirstfit+0xb3d>
f0121f11:	83 ec 04             	sub    $0x4,%esp
f0121f14:	68 38 9a 13 f0       	push   $0xf0139a38
f0121f19:	68 08 07 00 00       	push   $0x708
f0121f1e:	68 ae 92 13 f0       	push   $0xf01392ae
f0121f23:	e8 88 e2 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f28:	e8 b1 aa fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121f2d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f33:	e8 4c 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f38:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0121f3e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121f44:	83 ec 0c             	sub    $0xc,%esp
f0121f47:	50                   	push   %eax
f0121f48:	e8 2c 60 fe ff       	call   f0107f79 <kfree>
f0121f4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f50:	e8 2f 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f55:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121f5b:	74 17                	je     f0121f74 <test_kfree_bestfirstfit+0xb89>
f0121f5d:	83 ec 04             	sub    $0x4,%esp
f0121f60:	68 c8 92 13 f0       	push   $0xf01392c8
f0121f65:	68 0e 07 00 00       	push   $0x70e
f0121f6a:	68 ae 92 13 f0       	push   $0xf01392ae
f0121f6f:	e8 3c e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f74:	e8 65 aa fe ff       	call   f010c9de <sys_calculate_free_frames>
f0121f79:	89 c2                	mov    %eax,%edx
f0121f7b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121f81:	29 c2                	sub    %eax,%edx
f0121f83:	89 d0                	mov    %edx,%eax
f0121f85:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121f8a:	74 17                	je     f0121fa3 <test_kfree_bestfirstfit+0xbb8>
f0121f8c:	83 ec 04             	sub    $0x4,%esp
f0121f8f:	68 38 9a 13 f0       	push   $0xf0139a38
f0121f94:	68 0f 07 00 00       	push   $0x70f
f0121f99:	68 ae 92 13 f0       	push   $0xf01392ae
f0121f9e:	e8 0d e2 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121fa3:	83 ec 0c             	sub    $0xc,%esp
f0121fa6:	68 70 9a 13 f0       	push   $0xf0139a70
f0121fab:	e8 81 ee fd ff       	call   f0100e31 <cprintf>
f0121fb0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121fb3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121fb9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121fbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121fc3:	eb 1e                	jmp    f0121fe3 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0121fc5:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121fcb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121fce:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121fd1:	01 c8                	add    %ecx,%eax
f0121fd3:	8a 00                	mov    (%eax),%al
f0121fd5:	0f be c0             	movsbl %al,%eax
f0121fd8:	01 d0                	add    %edx,%eax
f0121fda:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121fe0:	ff 45 f4             	incl   -0xc(%ebp)
f0121fe3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121fe9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121fec:	7f d7                	jg     f0121fc5 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121fee:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121ff4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121ffa:	89 c1                	mov    %eax,%ecx
f0121ffc:	01 c9                	add    %ecx,%ecx
f0121ffe:	01 c8                	add    %ecx,%eax
f0122000:	39 c2                	cmp    %eax,%edx
f0122002:	74 17                	je     f012201b <test_kfree_bestfirstfit+0xc30>
f0122004:	83 ec 04             	sub    $0x4,%esp
f0122007:	68 94 9a 13 f0       	push   $0xf0139a94
f012200c:	68 1c 07 00 00       	push   $0x71c
f0122011:	68 ae 92 13 f0       	push   $0xf01392ae
f0122016:	e8 95 e1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012201b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0122021:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012202b:	eb 1e                	jmp    f012204b <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f012202d:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0122033:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122036:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122039:	01 c8                	add    %ecx,%eax
f012203b:	8a 00                	mov    (%eax),%al
f012203d:	0f be c0             	movsbl %al,%eax
f0122040:	01 d0                	add    %edx,%eax
f0122042:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122048:	ff 45 f4             	incl   -0xc(%ebp)
f012204b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122051:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122054:	7f d7                	jg     f012202d <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122056:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012205c:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0122062:	c1 e2 02             	shl    $0x2,%edx
f0122065:	39 d0                	cmp    %edx,%eax
f0122067:	74 17                	je     f0122080 <test_kfree_bestfirstfit+0xc95>
f0122069:	83 ec 04             	sub    $0x4,%esp
f012206c:	68 94 9a 13 f0       	push   $0xf0139a94
f0122071:	68 24 07 00 00       	push   $0x724
f0122076:	68 ae 92 13 f0       	push   $0xf01392ae
f012207b:	e8 30 e1 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122080:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122086:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122089:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122090:	eb 1e                	jmp    f01220b0 <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f0122092:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122098:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012209b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012209e:	01 c8                	add    %ecx,%eax
f01220a0:	8a 00                	mov    (%eax),%al
f01220a2:	0f be c0             	movsbl %al,%eax
f01220a5:	01 d0                	add    %edx,%eax
f01220a7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01220ad:	ff 45 f4             	incl   -0xc(%ebp)
f01220b0:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01220b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01220b9:	7f d7                	jg     f0122092 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01220bb:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f01220c1:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f01220c7:	89 d0                	mov    %edx,%eax
f01220c9:	c1 e0 02             	shl    $0x2,%eax
f01220cc:	01 d0                	add    %edx,%eax
f01220ce:	39 c1                	cmp    %eax,%ecx
f01220d0:	74 17                	je     f01220e9 <test_kfree_bestfirstfit+0xcfe>
f01220d2:	83 ec 04             	sub    $0x4,%esp
f01220d5:	68 94 9a 13 f0       	push   $0xf0139a94
f01220da:	68 2c 07 00 00       	push   $0x72c
f01220df:	68 ae 92 13 f0       	push   $0xf01392ae
f01220e4:	e8 c7 e0 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01220e9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01220ef:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01220f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01220f9:	eb 1e                	jmp    f0122119 <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f01220fb:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0122101:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122104:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122107:	01 c8                	add    %ecx,%eax
f0122109:	8a 00                	mov    (%eax),%al
f012210b:	0f be c0             	movsbl %al,%eax
f012210e:	01 d0                	add    %edx,%eax
f0122110:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122116:	ff 45 f4             	incl   -0xc(%ebp)
f0122119:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012211f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122122:	7f d7                	jg     f01220fb <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122124:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f012212a:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0122130:	89 d0                	mov    %edx,%eax
f0122132:	01 c0                	add    %eax,%eax
f0122134:	01 d0                	add    %edx,%eax
f0122136:	01 c0                	add    %eax,%eax
f0122138:	01 d0                	add    %edx,%eax
f012213a:	39 c1                	cmp    %eax,%ecx
f012213c:	74 17                	je     f0122155 <test_kfree_bestfirstfit+0xd6a>
f012213e:	83 ec 04             	sub    $0x4,%esp
f0122141:	68 94 9a 13 f0       	push   $0xf0139a94
f0122146:	68 34 07 00 00       	push   $0x734
f012214b:	68 ae 92 13 f0       	push   $0xf01392ae
f0122150:	e8 5b e0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0122155:	83 ec 0c             	sub    $0xc,%esp
f0122158:	68 c7 9a 13 f0       	push   $0xf0139ac7
f012215d:	e8 cf ec fd ff       	call   f0100e31 <cprintf>
f0122162:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122165:	e8 74 a8 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012216a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012216d:	e8 12 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122172:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122175:	83 ec 0c             	sub    $0xc,%esp
f0122178:	68 00 00 30 00       	push   $0x300000
f012217d:	e8 dd 5d fe ff       	call   f0107f5f <kmalloc>
f0122182:	83 c4 10             	add    $0x10,%esp
f0122185:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012218b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122191:	89 c1                	mov    %eax,%ecx
f0122193:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012219a:	10 00 00 
f012219d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01221a2:	0f b6 d0             	movzbl %al,%edx
f01221a5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01221ab:	01 d0                	add    %edx,%eax
f01221ad:	48                   	dec    %eax
f01221ae:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01221b4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01221bf:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01221c5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221cb:	29 d0                	sub    %edx,%eax
f01221cd:	89 c3                	mov    %eax,%ebx
f01221cf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01221d6:	10 00 00 
f01221d9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01221de:	0f b6 c0             	movzbl %al,%eax
f01221e1:	c1 e0 04             	shl    $0x4,%eax
f01221e4:	89 c2                	mov    %eax,%edx
f01221e6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01221ec:	01 d0                	add    %edx,%eax
f01221ee:	48                   	dec    %eax
f01221ef:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01221f5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01221fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122200:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122206:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012220c:	29 d0                	sub    %edx,%eax
f012220e:	01 d8                	add    %ebx,%eax
f0122210:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122215:	39 c1                	cmp    %eax,%ecx
f0122217:	74 17                	je     f0122230 <test_kfree_bestfirstfit+0xe45>
f0122219:	83 ec 04             	sub    $0x4,%esp
f012221c:	68 94 93 13 f0       	push   $0xf0139394
f0122221:	68 3f 07 00 00       	push   $0x73f
f0122226:	68 ae 92 13 f0       	push   $0xf01392ae
f012222b:	e8 80 df fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122230:	e8 4f 24 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122235:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122238:	74 17                	je     f0122251 <test_kfree_bestfirstfit+0xe66>
f012223a:	83 ec 04             	sub    $0x4,%esp
f012223d:	68 c8 92 13 f0       	push   $0xf01392c8
f0122242:	68 40 07 00 00       	push   $0x740
f0122247:	68 ae 92 13 f0       	push   $0xf01392ae
f012224c:	e8 5f df fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122251:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122254:	e8 85 a7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122259:	29 c3                	sub    %eax,%ebx
f012225b:	89 d8                	mov    %ebx,%eax
f012225d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122262:	74 17                	je     f012227b <test_kfree_bestfirstfit+0xe90>
f0122264:	83 ec 04             	sub    $0x4,%esp
f0122267:	68 30 93 13 f0       	push   $0xf0139330
f012226c:	68 41 07 00 00       	push   $0x741
f0122271:	68 ae 92 13 f0       	push   $0xf01392ae
f0122276:	e8 35 df fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012227b:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f0122282:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122285:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012228b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012228e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122295:	eb 0e                	jmp    f01222a5 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0122297:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012229a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012229d:	01 d0                	add    %edx,%eax
f012229f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01222a2:	ff 45 f4             	incl   -0xc(%ebp)
f01222a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01222ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01222ae:	7f e7                	jg     f0122297 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01222b0:	e8 29 a7 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01222b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222b8:	e8 c7 23 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01222bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01222c0:	83 ec 0c             	sub    $0xc,%esp
f01222c3:	68 00 08 00 00       	push   $0x800
f01222c8:	e8 92 5c fe ff       	call   f0107f5f <kmalloc>
f01222cd:	83 c4 10             	add    $0x10,%esp
f01222d0:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222d6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01222dc:	89 c1                	mov    %eax,%ecx
f01222de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01222e5:	10 00 00 
f01222e8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01222ed:	0f b6 d0             	movzbl %al,%edx
f01222f0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01222f6:	01 d0                	add    %edx,%eax
f01222f8:	48                   	dec    %eax
f01222f9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01222ff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122305:	ba 00 00 00 00       	mov    $0x0,%edx
f012230a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122310:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122316:	29 d0                	sub    %edx,%eax
f0122318:	89 c3                	mov    %eax,%ebx
f012231a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122321:	10 00 00 
f0122324:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122329:	0f b6 c0             	movzbl %al,%eax
f012232c:	c1 e0 04             	shl    $0x4,%eax
f012232f:	89 c2                	mov    %eax,%edx
f0122331:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122337:	01 d0                	add    %edx,%eax
f0122339:	48                   	dec    %eax
f012233a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122340:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122346:	ba 00 00 00 00       	mov    $0x0,%edx
f012234b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122351:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122357:	29 d0                	sub    %edx,%eax
f0122359:	01 d8                	add    %ebx,%eax
f012235b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122360:	39 c1                	cmp    %eax,%ecx
f0122362:	74 17                	je     f012237b <test_kfree_bestfirstfit+0xf90>
f0122364:	83 ec 04             	sub    $0x4,%esp
f0122367:	68 94 93 13 f0       	push   $0xf0139394
f012236c:	68 4d 07 00 00       	push   $0x74d
f0122371:	68 ae 92 13 f0       	push   $0xf01392ae
f0122376:	e8 35 de fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012237b:	e8 04 23 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122380:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122383:	74 17                	je     f012239c <test_kfree_bestfirstfit+0xfb1>
f0122385:	83 ec 04             	sub    $0x4,%esp
f0122388:	68 c8 92 13 f0       	push   $0xf01392c8
f012238d:	68 4e 07 00 00       	push   $0x74e
f0122392:	68 ae 92 13 f0       	push   $0xf01392ae
f0122397:	e8 14 de fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012239c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012239f:	e8 3a a6 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01223a4:	29 c3                	sub    %eax,%ebx
f01223a6:	89 d8                	mov    %ebx,%eax
f01223a8:	83 f8 01             	cmp    $0x1,%eax
f01223ab:	74 17                	je     f01223c4 <test_kfree_bestfirstfit+0xfd9>
f01223ad:	83 ec 04             	sub    $0x4,%esp
f01223b0:	68 30 93 13 f0       	push   $0xf0139330
f01223b5:	68 4f 07 00 00       	push   $0x74f
f01223ba:	68 ae 92 13 f0       	push   $0xf01392ae
f01223bf:	e8 ec dd fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01223c4:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f01223cb:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01223ce:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01223d4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01223d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01223de:	eb 0e                	jmp    f01223ee <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f01223e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01223e3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01223e6:	01 d0                	add    %edx,%eax
f01223e8:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01223eb:	ff 45 f4             	incl   -0xc(%ebp)
f01223ee:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01223f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01223f7:	7f e7                	jg     f01223e0 <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01223f9:	e8 e0 a5 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01223fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122401:	e8 7e 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122406:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122409:	83 ec 0c             	sub    $0xc,%esp
f012240c:	68 00 00 10 00       	push   $0x100000
f0122411:	e8 49 5b fe ff       	call   f0107f5f <kmalloc>
f0122416:	83 c4 10             	add    $0x10,%esp
f0122419:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012241f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122425:	89 c1                	mov    %eax,%ecx
f0122427:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012242e:	10 00 00 
f0122431:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122436:	0f b6 d0             	movzbl %al,%edx
f0122439:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012243f:	01 d0                	add    %edx,%eax
f0122441:	48                   	dec    %eax
f0122442:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122448:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012244e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122453:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122459:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012245f:	29 d0                	sub    %edx,%eax
f0122461:	89 c3                	mov    %eax,%ebx
f0122463:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012246a:	10 00 00 
f012246d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122472:	0f b6 c0             	movzbl %al,%eax
f0122475:	c1 e0 04             	shl    $0x4,%eax
f0122478:	89 c2                	mov    %eax,%edx
f012247a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122480:	01 d0                	add    %edx,%eax
f0122482:	48                   	dec    %eax
f0122483:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122489:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012248f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122494:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012249a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01224a0:	29 d0                	sub    %edx,%eax
f01224a2:	01 d8                	add    %ebx,%eax
f01224a4:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01224a9:	39 c1                	cmp    %eax,%ecx
f01224ab:	74 17                	je     f01224c4 <test_kfree_bestfirstfit+0x10d9>
f01224ad:	83 ec 04             	sub    $0x4,%esp
f01224b0:	68 94 93 13 f0       	push   $0xf0139394
f01224b5:	68 5b 07 00 00       	push   $0x75b
f01224ba:	68 ae 92 13 f0       	push   $0xf01392ae
f01224bf:	e8 ec dc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224c4:	e8 bb 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01224c9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224cc:	74 17                	je     f01224e5 <test_kfree_bestfirstfit+0x10fa>
f01224ce:	83 ec 04             	sub    $0x4,%esp
f01224d1:	68 c8 92 13 f0       	push   $0xf01392c8
f01224d6:	68 5c 07 00 00       	push   $0x75c
f01224db:	68 ae 92 13 f0       	push   $0xf01392ae
f01224e0:	e8 cb dc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01224e5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01224e8:	e8 f1 a4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01224ed:	29 c3                	sub    %eax,%ebx
f01224ef:	89 d8                	mov    %ebx,%eax
f01224f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01224f6:	74 17                	je     f012250f <test_kfree_bestfirstfit+0x1124>
f01224f8:	83 ec 04             	sub    $0x4,%esp
f01224fb:	68 30 93 13 f0       	push   $0xf0139330
f0122500:	68 5d 07 00 00       	push   $0x75d
f0122505:	68 ae 92 13 f0       	push   $0xf01392ae
f012250a:	e8 a1 dc fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f012250f:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f0122516:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122519:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012251f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122522:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122529:	eb 0e                	jmp    f0122539 <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f012252b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012252e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122531:	01 d0                	add    %edx,%eax
f0122533:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122536:	ff 45 f4             	incl   -0xc(%ebp)
f0122539:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012253f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122542:	7f e7                	jg     f012252b <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122544:	83 ec 0c             	sub    $0xc,%esp
f0122547:	68 ce 9a 13 f0       	push   $0xf0139ace
f012254c:	e8 e0 e8 fd ff       	call   f0100e31 <cprintf>
f0122551:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122554:	e8 85 a4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122559:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012255c:	e8 23 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122561:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122564:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012256a:	83 ec 0c             	sub    $0xc,%esp
f012256d:	50                   	push   %eax
f012256e:	e8 06 5a fe ff       	call   f0107f79 <kfree>
f0122573:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122576:	e8 09 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012257b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012257e:	74 17                	je     f0122597 <test_kfree_bestfirstfit+0x11ac>
f0122580:	83 ec 04             	sub    $0x4,%esp
f0122583:	68 c8 92 13 f0       	push   $0xf01392c8
f0122588:	68 6d 07 00 00       	push   $0x76d
f012258d:	68 ae 92 13 f0       	push   $0xf01392ae
f0122592:	e8 19 dc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122597:	e8 42 a4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012259c:	89 c2                	mov    %eax,%edx
f012259e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225a1:	29 c2                	sub    %eax,%edx
f01225a3:	89 d0                	mov    %edx,%eax
f01225a5:	83 f8 02             	cmp    $0x2,%eax
f01225a8:	74 17                	je     f01225c1 <test_kfree_bestfirstfit+0x11d6>
f01225aa:	83 ec 04             	sub    $0x4,%esp
f01225ad:	68 38 9a 13 f0       	push   $0xf0139a38
f01225b2:	68 6e 07 00 00       	push   $0x76e
f01225b7:	68 ae 92 13 f0       	push   $0xf01392ae
f01225bc:	e8 ef db fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01225c1:	e8 18 a4 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01225c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225c9:	e8 b6 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01225d1:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01225d7:	83 ec 0c             	sub    $0xc,%esp
f01225da:	50                   	push   %eax
f01225db:	e8 99 59 fe ff       	call   f0107f79 <kfree>
f01225e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225e3:	e8 9c 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225eb:	74 17                	je     f0122604 <test_kfree_bestfirstfit+0x1219>
f01225ed:	83 ec 04             	sub    $0x4,%esp
f01225f0:	68 c8 92 13 f0       	push   $0xf01392c8
f01225f5:	68 74 07 00 00       	push   $0x774
f01225fa:	68 ae 92 13 f0       	push   $0xf01392ae
f01225ff:	e8 ac db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122604:	e8 d5 a3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122609:	89 c2                	mov    %eax,%edx
f012260b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012260e:	29 c2                	sub    %eax,%edx
f0122610:	89 d0                	mov    %edx,%eax
f0122612:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122617:	74 17                	je     f0122630 <test_kfree_bestfirstfit+0x1245>
f0122619:	83 ec 04             	sub    $0x4,%esp
f012261c:	68 38 9a 13 f0       	push   $0xf0139a38
f0122621:	68 75 07 00 00       	push   $0x775
f0122626:	68 ae 92 13 f0       	push   $0xf01392ae
f012262b:	e8 80 db fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122630:	e8 a9 a3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122635:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122638:	e8 47 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012263d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122640:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122646:	83 ec 0c             	sub    $0xc,%esp
f0122649:	50                   	push   %eax
f012264a:	e8 2a 59 fe ff       	call   f0107f79 <kfree>
f012264f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122652:	e8 2d 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122657:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012265a:	74 17                	je     f0122673 <test_kfree_bestfirstfit+0x1288>
f012265c:	83 ec 04             	sub    $0x4,%esp
f012265f:	68 c8 92 13 f0       	push   $0xf01392c8
f0122664:	68 7b 07 00 00       	push   $0x77b
f0122669:	68 ae 92 13 f0       	push   $0xf01392ae
f012266e:	e8 3d db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122673:	e8 66 a3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122678:	89 c2                	mov    %eax,%edx
f012267a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012267d:	29 c2                	sub    %eax,%edx
f012267f:	89 d0                	mov    %edx,%eax
f0122681:	83 f8 01             	cmp    $0x1,%eax
f0122684:	74 17                	je     f012269d <test_kfree_bestfirstfit+0x12b2>
f0122686:	83 ec 04             	sub    $0x4,%esp
f0122689:	68 38 9a 13 f0       	push   $0xf0139a38
f012268e:	68 7c 07 00 00       	push   $0x77c
f0122693:	68 ae 92 13 f0       	push   $0xf01392ae
f0122698:	e8 13 db fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012269d:	e8 3c a3 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01226a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226a5:	e8 da 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01226aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01226ad:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01226b3:	83 ec 0c             	sub    $0xc,%esp
f01226b6:	50                   	push   %eax
f01226b7:	e8 bd 58 fe ff       	call   f0107f79 <kfree>
f01226bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226bf:	e8 c0 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01226c4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226c7:	74 17                	je     f01226e0 <test_kfree_bestfirstfit+0x12f5>
f01226c9:	83 ec 04             	sub    $0x4,%esp
f01226cc:	68 c8 92 13 f0       	push   $0xf01392c8
f01226d1:	68 82 07 00 00       	push   $0x782
f01226d6:	68 ae 92 13 f0       	push   $0xf01392ae
f01226db:	e8 d0 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01226e0:	e8 f9 a2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01226e5:	89 c2                	mov    %eax,%edx
f01226e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01226ea:	29 c2                	sub    %eax,%edx
f01226ec:	89 d0                	mov    %edx,%eax
f01226ee:	83 f8 04             	cmp    $0x4,%eax
f01226f1:	74 17                	je     f012270a <test_kfree_bestfirstfit+0x131f>
f01226f3:	83 ec 04             	sub    $0x4,%esp
f01226f6:	68 38 9a 13 f0       	push   $0xf0139a38
f01226fb:	68 83 07 00 00       	push   $0x783
f0122700:	68 ae 92 13 f0       	push   $0xf01392ae
f0122705:	e8 a6 da fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012270a:	e8 cf a2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012270f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122712:	e8 6d 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122717:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012271a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122720:	83 ec 0c             	sub    $0xc,%esp
f0122723:	50                   	push   %eax
f0122724:	e8 50 58 fe ff       	call   f0107f79 <kfree>
f0122729:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012272c:	e8 53 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122731:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122734:	74 17                	je     f012274d <test_kfree_bestfirstfit+0x1362>
f0122736:	83 ec 04             	sub    $0x4,%esp
f0122739:	68 c8 92 13 f0       	push   $0xf01392c8
f012273e:	68 89 07 00 00       	push   $0x789
f0122743:	68 ae 92 13 f0       	push   $0xf01392ae
f0122748:	e8 63 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012274d:	e8 8c a2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122752:	89 c2                	mov    %eax,%edx
f0122754:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122757:	29 c2                	sub    %eax,%edx
f0122759:	89 d0                	mov    %edx,%eax
f012275b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122760:	74 17                	je     f0122779 <test_kfree_bestfirstfit+0x138e>
f0122762:	83 ec 04             	sub    $0x4,%esp
f0122765:	68 38 9a 13 f0       	push   $0xf0139a38
f012276a:	68 8a 07 00 00       	push   $0x78a
f012276f:	68 ae 92 13 f0       	push   $0xf01392ae
f0122774:	e8 37 da fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122779:	e8 60 a2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012277e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122781:	e8 fe 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122786:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122789:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012278f:	83 ec 0c             	sub    $0xc,%esp
f0122792:	50                   	push   %eax
f0122793:	e8 e1 57 fe ff       	call   f0107f79 <kfree>
f0122798:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012279b:	e8 e4 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227a3:	74 17                	je     f01227bc <test_kfree_bestfirstfit+0x13d1>
f01227a5:	83 ec 04             	sub    $0x4,%esp
f01227a8:	68 c8 92 13 f0       	push   $0xf01392c8
f01227ad:	68 90 07 00 00       	push   $0x790
f01227b2:	68 ae 92 13 f0       	push   $0xf01392ae
f01227b7:	e8 f4 d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01227bc:	e8 1d a2 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01227c1:	89 c2                	mov    %eax,%edx
f01227c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01227c6:	29 c2                	sub    %eax,%edx
f01227c8:	89 d0                	mov    %edx,%eax
f01227ca:	83 f8 01             	cmp    $0x1,%eax
f01227cd:	74 17                	je     f01227e6 <test_kfree_bestfirstfit+0x13fb>
f01227cf:	83 ec 04             	sub    $0x4,%esp
f01227d2:	68 38 9a 13 f0       	push   $0xf0139a38
f01227d7:	68 91 07 00 00       	push   $0x791
f01227dc:	68 ae 92 13 f0       	push   $0xf01392ae
f01227e1:	e8 ca d9 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01227e6:	e8 f3 a1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01227eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227ee:	e8 91 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01227f6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01227fc:	83 ec 0c             	sub    $0xc,%esp
f01227ff:	50                   	push   %eax
f0122800:	e8 74 57 fe ff       	call   f0107f79 <kfree>
f0122805:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122808:	e8 77 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012280d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122810:	74 17                	je     f0122829 <test_kfree_bestfirstfit+0x143e>
f0122812:	83 ec 04             	sub    $0x4,%esp
f0122815:	68 c8 92 13 f0       	push   $0xf01392c8
f012281a:	68 97 07 00 00       	push   $0x797
f012281f:	68 ae 92 13 f0       	push   $0xf01392ae
f0122824:	e8 87 d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122829:	e8 b0 a1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012282e:	89 c2                	mov    %eax,%edx
f0122830:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122833:	29 c2                	sub    %eax,%edx
f0122835:	89 d0                	mov    %edx,%eax
f0122837:	3d 00 01 00 00       	cmp    $0x100,%eax
f012283c:	74 17                	je     f0122855 <test_kfree_bestfirstfit+0x146a>
f012283e:	83 ec 04             	sub    $0x4,%esp
f0122841:	68 38 9a 13 f0       	push   $0xf0139a38
f0122846:	68 98 07 00 00       	push   $0x798
f012284b:	68 ae 92 13 f0       	push   $0xf01392ae
f0122850:	e8 5b d9 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122855:	e8 84 a1 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012285a:	89 c2                	mov    %eax,%edx
f012285c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012285f:	39 c2                	cmp    %eax,%edx
f0122861:	74 17                	je     f012287a <test_kfree_bestfirstfit+0x148f>
f0122863:	83 ec 04             	sub    $0x4,%esp
f0122866:	68 d8 9a 13 f0       	push   $0xf0139ad8
f012286b:	68 9a 07 00 00       	push   $0x79a
f0122870:	68 ae 92 13 f0       	push   $0xf01392ae
f0122875:	e8 36 d9 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f012287a:	83 ec 0c             	sub    $0xc,%esp
f012287d:	68 0c 9b 13 f0       	push   $0xf0139b0c
f0122882:	e8 aa e5 fd ff       	call   f0100e31 <cprintf>
f0122887:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012288a:	83 ec 0c             	sub    $0xc,%esp
f012288d:	6a 03                	push   $0x3
f012288f:	e8 e5 a5 fe ff       	call   f010ce79 <sys_bypassPageFault>
f0122894:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122897:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012289e:	e9 82 00 00 00       	jmp    f0122925 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f01228a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228a6:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f01228ad:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01228b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228b3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01228b6:	e8 ac a5 fe ff       	call   f010ce67 <sys_rcr2>
f01228bb:	89 c2                	mov    %eax,%edx
f01228bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228c0:	39 c2                	cmp    %eax,%edx
f01228c2:	74 17                	je     f01228db <test_kfree_bestfirstfit+0x14f0>
f01228c4:	83 ec 04             	sub    $0x4,%esp
f01228c7:	68 14 9b 13 f0       	push   $0xf0139b14
f01228cc:	68 a9 07 00 00       	push   $0x7a9
f01228d1:	68 ae 92 13 f0       	push   $0xf01392ae
f01228d6:	e8 d5 d8 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f01228db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228de:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01228e5:	89 c2                	mov    %eax,%edx
f01228e7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228ea:	01 d0                	add    %edx,%eax
f01228ec:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01228ef:	e8 73 a5 fe ff       	call   f010ce67 <sys_rcr2>
f01228f4:	89 c2                	mov    %eax,%edx
f01228f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228f9:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122900:	89 c1                	mov    %eax,%ecx
f0122902:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122905:	01 c8                	add    %ecx,%eax
f0122907:	39 c2                	cmp    %eax,%edx
f0122909:	74 17                	je     f0122922 <test_kfree_bestfirstfit+0x1537>
f012290b:	83 ec 04             	sub    $0x4,%esp
f012290e:	68 14 9b 13 f0       	push   $0xf0139b14
f0122913:	68 ab 07 00 00       	push   $0x7ab
f0122918:	68 ae 92 13 f0       	push   $0xf01392ae
f012291d:	e8 8e d8 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122922:	ff 45 f4             	incl   -0xc(%ebp)
f0122925:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122929:	0f 8e 74 ff ff ff    	jle    f01228a3 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012292f:	83 ec 0c             	sub    $0xc,%esp
f0122932:	6a 00                	push   $0x0
f0122934:	e8 40 a5 fe ff       	call   f010ce79 <sys_bypassPageFault>
f0122939:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012293c:	83 ec 0c             	sub    $0xc,%esp
f012293f:	68 59 9b 13 f0       	push   $0xf0139b59
f0122944:	e8 e8 e4 fd ff       	call   f0100e31 <cprintf>
f0122949:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012294c:	e8 8d a0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122951:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122954:	e8 2b 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122959:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012295c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122962:	83 ec 0c             	sub    $0xc,%esp
f0122965:	50                   	push   %eax
f0122966:	e8 0e 56 fe ff       	call   f0107f79 <kfree>
f012296b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012296e:	e8 11 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122973:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122976:	74 17                	je     f012298f <test_kfree_bestfirstfit+0x15a4>
f0122978:	83 ec 04             	sub    $0x4,%esp
f012297b:	68 c8 92 13 f0       	push   $0xf01392c8
f0122980:	68 b9 07 00 00       	push   $0x7b9
f0122985:	68 ae 92 13 f0       	push   $0xf01392ae
f012298a:	e8 21 d8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012298f:	e8 4a a0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122994:	89 c2                	mov    %eax,%edx
f0122996:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122999:	39 c2                	cmp    %eax,%edx
f012299b:	74 17                	je     f01229b4 <test_kfree_bestfirstfit+0x15c9>
f012299d:	83 ec 04             	sub    $0x4,%esp
f01229a0:	68 60 9b 13 f0       	push   $0xf0139b60
f01229a5:	68 ba 07 00 00       	push   $0x7ba
f01229aa:	68 ae 92 13 f0       	push   $0xf01392ae
f01229af:	e8 fc d7 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01229b4:	e8 25 a0 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01229b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229bc:	e8 c3 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01229c4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01229ca:	83 ec 0c             	sub    $0xc,%esp
f01229cd:	50                   	push   %eax
f01229ce:	e8 a6 55 fe ff       	call   f0107f79 <kfree>
f01229d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229d6:	e8 a9 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229de:	74 17                	je     f01229f7 <test_kfree_bestfirstfit+0x160c>
f01229e0:	83 ec 04             	sub    $0x4,%esp
f01229e3:	68 c8 92 13 f0       	push   $0xf01392c8
f01229e8:	68 c0 07 00 00       	push   $0x7c0
f01229ed:	68 ae 92 13 f0       	push   $0xf01392ae
f01229f2:	e8 b9 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01229f7:	e8 e2 9f fe ff       	call   f010c9de <sys_calculate_free_frames>
f01229fc:	89 c2                	mov    %eax,%edx
f01229fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a01:	39 c2                	cmp    %eax,%edx
f0122a03:	74 17                	je     f0122a1c <test_kfree_bestfirstfit+0x1631>
f0122a05:	83 ec 04             	sub    $0x4,%esp
f0122a08:	68 60 9b 13 f0       	push   $0xf0139b60
f0122a0d:	68 c1 07 00 00       	push   $0x7c1
f0122a12:	68 ae 92 13 f0       	push   $0xf01392ae
f0122a17:	e8 94 d7 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a1c:	e8 bd 9f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122a21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a24:	e8 5b 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a29:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122a2c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122a32:	83 ec 0c             	sub    $0xc,%esp
f0122a35:	50                   	push   %eax
f0122a36:	e8 3e 55 fe ff       	call   f0107f79 <kfree>
f0122a3b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a3e:	e8 41 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a43:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a46:	74 17                	je     f0122a5f <test_kfree_bestfirstfit+0x1674>
f0122a48:	83 ec 04             	sub    $0x4,%esp
f0122a4b:	68 c8 92 13 f0       	push   $0xf01392c8
f0122a50:	68 c7 07 00 00       	push   $0x7c7
f0122a55:	68 ae 92 13 f0       	push   $0xf01392ae
f0122a5a:	e8 51 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122a5f:	e8 7a 9f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122a64:	89 c2                	mov    %eax,%edx
f0122a66:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a69:	39 c2                	cmp    %eax,%edx
f0122a6b:	74 17                	je     f0122a84 <test_kfree_bestfirstfit+0x1699>
f0122a6d:	83 ec 04             	sub    $0x4,%esp
f0122a70:	68 60 9b 13 f0       	push   $0xf0139b60
f0122a75:	68 c8 07 00 00       	push   $0x7c8
f0122a7a:	68 ae 92 13 f0       	push   $0xf01392ae
f0122a7f:	e8 2c d7 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a84:	e8 55 9f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122a89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a8c:	e8 f3 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a91:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122a94:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122a9a:	83 ec 0c             	sub    $0xc,%esp
f0122a9d:	50                   	push   %eax
f0122a9e:	e8 d6 54 fe ff       	call   f0107f79 <kfree>
f0122aa3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122aa6:	e8 d9 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122aab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122aae:	74 17                	je     f0122ac7 <test_kfree_bestfirstfit+0x16dc>
f0122ab0:	83 ec 04             	sub    $0x4,%esp
f0122ab3:	68 c8 92 13 f0       	push   $0xf01392c8
f0122ab8:	68 ce 07 00 00       	push   $0x7ce
f0122abd:	68 ae 92 13 f0       	push   $0xf01392ae
f0122ac2:	e8 e9 d6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122ac7:	e8 12 9f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122acc:	89 c2                	mov    %eax,%edx
f0122ace:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ad1:	39 c2                	cmp    %eax,%edx
f0122ad3:	74 17                	je     f0122aec <test_kfree_bestfirstfit+0x1701>
f0122ad5:	83 ec 04             	sub    $0x4,%esp
f0122ad8:	68 60 9b 13 f0       	push   $0xf0139b60
f0122add:	68 cf 07 00 00       	push   $0x7cf
f0122ae2:	68 ae 92 13 f0       	push   $0xf01392ae
f0122ae7:	e8 c4 d6 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122aec:	83 ec 0c             	sub    $0xc,%esp
f0122aef:	68 a7 9b 13 f0       	push   $0xf0139ba7
f0122af4:	e8 38 e3 fd ff       	call   f0100e31 <cprintf>
f0122af9:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122afc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122b03:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122b0a:	eb 48                	jmp    f0122b54 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122b0c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122b0f:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0122b14:	83 ec 04             	sub    $0x4,%esp
f0122b17:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122b1d:	51                   	push   %ecx
f0122b1e:	52                   	push   %edx
f0122b1f:	50                   	push   %eax
f0122b20:	e8 c2 49 fe ff       	call   f01074e7 <get_page_table>
f0122b25:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122b28:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122b2e:	85 c0                	test   %eax,%eax
f0122b30:	75 17                	jne    f0122b49 <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122b32:	83 ec 04             	sub    $0x4,%esp
f0122b35:	68 b0 9b 13 f0       	push   $0xf0139bb0
f0122b3a:	68 dd 07 00 00       	push   $0x7dd
f0122b3f:	68 ae 92 13 f0       	push   $0xf01392ae
f0122b44:	e8 67 d6 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122b49:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122b50:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122b54:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b58:	78 b2                	js     f0122b0c <test_kfree_bestfirstfit+0x1721>
f0122b5a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b5e:	7f 09                	jg     f0122b69 <test_kfree_bestfirstfit+0x177e>
f0122b60:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122b67:	76 a3                	jbe    f0122b0c <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122b69:	83 ec 0c             	sub    $0xc,%esp
f0122b6c:	68 92 94 13 f0       	push   $0xf0139492
f0122b71:	e8 bb e2 fd ff       	call   f0100e31 <cprintf>
f0122b76:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122b79:	83 ec 0c             	sub    $0xc,%esp
f0122b7c:	68 18 9c 13 f0       	push   $0xf0139c18
f0122b81:	e8 ab e2 fd ff       	call   f0100e31 <cprintf>
f0122b86:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122b89:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122b8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122b91:	5b                   	pop    %ebx
f0122b92:	5f                   	pop    %edi
f0122b93:	5d                   	pop    %ebp
f0122b94:	c3                   	ret    

f0122b95 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122b95:	55                   	push   %ebp
f0122b96:	89 e5                	mov    %esp,%ebp
f0122b98:	57                   	push   %edi
f0122b99:	56                   	push   %esi
f0122b9a:	53                   	push   %ebx
f0122b9b:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122ba1:	83 ec 0c             	sub    $0xc,%esp
f0122ba4:	68 f0 91 13 f0       	push   $0xf01391f0
f0122ba9:	e8 83 e2 fd ff       	call   f0100e31 <cprintf>
f0122bae:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122bb1:	83 ec 0c             	sub    $0xc,%esp
f0122bb4:	68 20 92 13 f0       	push   $0xf0139220
f0122bb9:	e8 73 e2 fd ff       	call   f0100e31 <cprintf>
f0122bbe:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122bc1:	83 ec 0c             	sub    $0xc,%esp
f0122bc4:	68 f0 91 13 f0       	push   $0xf01391f0
f0122bc9:	e8 63 e2 fd ff       	call   f0100e31 <cprintf>
f0122bce:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122bd1:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122bd5:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122bd9:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122bdf:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122be5:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122bec:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122bf3:	e8 e6 9d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122bf8:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122bfb:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122c01:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c06:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c0b:	89 d7                	mov    %edx,%edi
f0122c0d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122c0f:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122c15:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c1a:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c1f:	89 d7                	mov    %edx,%edi
f0122c21:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122c23:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0122c29:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c2e:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c33:	89 d7                	mov    %edx,%edi
f0122c35:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c37:	e8 a2 9d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122c3c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c3f:	e8 40 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c44:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122c47:	83 ec 0c             	sub    $0xc,%esp
f0122c4a:	68 00 fc 1f 00       	push   $0x1ffc00
f0122c4f:	e8 0b 53 fe ff       	call   f0107f5f <kmalloc>
f0122c54:	83 c4 10             	add    $0x10,%esp
f0122c57:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c5d:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122c63:	89 c1                	mov    %eax,%ecx
f0122c65:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122c6c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122c71:	0f b6 d0             	movzbl %al,%edx
f0122c74:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122c77:	01 d0                	add    %edx,%eax
f0122c79:	48                   	dec    %eax
f0122c7a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122c7d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122c80:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c85:	f7 75 a0             	divl   -0x60(%ebp)
f0122c88:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122c8b:	29 d0                	sub    %edx,%eax
f0122c8d:	89 c3                	mov    %eax,%ebx
f0122c8f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122c96:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122c9b:	0f b6 c0             	movzbl %al,%eax
f0122c9e:	c1 e0 04             	shl    $0x4,%eax
f0122ca1:	89 c2                	mov    %eax,%edx
f0122ca3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122ca6:	01 d0                	add    %edx,%eax
f0122ca8:	48                   	dec    %eax
f0122ca9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122cac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cb4:	f7 75 98             	divl   -0x68(%ebp)
f0122cb7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122cba:	29 d0                	sub    %edx,%eax
f0122cbc:	01 d8                	add    %ebx,%eax
f0122cbe:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122cc3:	39 c1                	cmp    %eax,%ecx
f0122cc5:	74 17                	je     f0122cde <test_kheap_phys_addr+0x149>
f0122cc7:	83 ec 04             	sub    $0x4,%esp
f0122cca:	68 94 93 13 f0       	push   $0xf0139394
f0122ccf:	68 0a 08 00 00       	push   $0x80a
f0122cd4:	68 ae 92 13 f0       	push   $0xf01392ae
f0122cd9:	e8 d2 d4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cde:	e8 a1 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ce3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ce6:	74 17                	je     f0122cff <test_kheap_phys_addr+0x16a>
f0122ce8:	83 ec 04             	sub    $0x4,%esp
f0122ceb:	68 c8 92 13 f0       	push   $0xf01392c8
f0122cf0:	68 0b 08 00 00       	push   $0x80b
f0122cf5:	68 ae 92 13 f0       	push   $0xf01392ae
f0122cfa:	e8 b1 d4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122cff:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122d02:	e8 d7 9c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122d07:	29 c3                	sub    %eax,%ebx
f0122d09:	89 d8                	mov    %ebx,%eax
f0122d0b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122d10:	74 17                	je     f0122d29 <test_kheap_phys_addr+0x194>
f0122d12:	83 ec 04             	sub    $0x4,%esp
f0122d15:	68 30 93 13 f0       	push   $0xf0139330
f0122d1a:	68 0c 08 00 00       	push   $0x80c
f0122d1f:	68 ae 92 13 f0       	push   $0xf01392ae
f0122d24:	e8 87 d4 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d29:	e8 b0 9c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122d2e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d31:	e8 4e 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d36:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122d39:	83 ec 0c             	sub    $0xc,%esp
f0122d3c:	68 00 fc 1f 00       	push   $0x1ffc00
f0122d41:	e8 19 52 fe ff       	call   f0107f5f <kmalloc>
f0122d46:	83 c4 10             	add    $0x10,%esp
f0122d49:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d4f:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122d55:	89 c1                	mov    %eax,%ecx
f0122d57:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122d5e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122d63:	0f b6 d0             	movzbl %al,%edx
f0122d66:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122d69:	01 d0                	add    %edx,%eax
f0122d6b:	48                   	dec    %eax
f0122d6c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122d6f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122d72:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d77:	f7 75 90             	divl   -0x70(%ebp)
f0122d7a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122d7d:	29 d0                	sub    %edx,%eax
f0122d7f:	89 c3                	mov    %eax,%ebx
f0122d81:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122d88:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122d8d:	0f b6 c0             	movzbl %al,%eax
f0122d90:	c1 e0 04             	shl    $0x4,%eax
f0122d93:	89 c2                	mov    %eax,%edx
f0122d95:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122d98:	01 d0                	add    %edx,%eax
f0122d9a:	48                   	dec    %eax
f0122d9b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122d9e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122da1:	ba 00 00 00 00       	mov    $0x0,%edx
f0122da6:	f7 75 88             	divl   -0x78(%ebp)
f0122da9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122dac:	29 d0                	sub    %edx,%eax
f0122dae:	01 d8                	add    %ebx,%eax
f0122db0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122db5:	39 c1                	cmp    %eax,%ecx
f0122db7:	74 17                	je     f0122dd0 <test_kheap_phys_addr+0x23b>
f0122db9:	83 ec 04             	sub    $0x4,%esp
f0122dbc:	68 94 93 13 f0       	push   $0xf0139394
f0122dc1:	68 12 08 00 00       	push   $0x812
f0122dc6:	68 ae 92 13 f0       	push   $0xf01392ae
f0122dcb:	e8 e0 d3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dd0:	e8 af 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122dd5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122dd8:	74 17                	je     f0122df1 <test_kheap_phys_addr+0x25c>
f0122dda:	83 ec 04             	sub    $0x4,%esp
f0122ddd:	68 c8 92 13 f0       	push   $0xf01392c8
f0122de2:	68 13 08 00 00       	push   $0x813
f0122de7:	68 ae 92 13 f0       	push   $0xf01392ae
f0122dec:	e8 bf d3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122df1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122df4:	e8 e5 9b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122df9:	29 c3                	sub    %eax,%ebx
f0122dfb:	89 d8                	mov    %ebx,%eax
f0122dfd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122e02:	74 17                	je     f0122e1b <test_kheap_phys_addr+0x286>
f0122e04:	83 ec 04             	sub    $0x4,%esp
f0122e07:	68 30 93 13 f0       	push   $0xf0139330
f0122e0c:	68 14 08 00 00       	push   $0x814
f0122e11:	68 ae 92 13 f0       	push   $0xf01392ae
f0122e16:	e8 95 d3 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e1b:	e8 be 9b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122e20:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e23:	e8 5c 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e28:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122e2b:	83 ec 0c             	sub    $0xc,%esp
f0122e2e:	68 00 08 00 00       	push   $0x800
f0122e33:	e8 27 51 fe ff       	call   f0107f5f <kmalloc>
f0122e38:	83 c4 10             	add    $0x10,%esp
f0122e3b:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e41:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0122e47:	89 c1                	mov    %eax,%ecx
f0122e49:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122e50:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122e55:	0f b6 d0             	movzbl %al,%edx
f0122e58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e5b:	01 d0                	add    %edx,%eax
f0122e5d:	48                   	dec    %eax
f0122e5e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122e64:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e6f:	f7 75 80             	divl   -0x80(%ebp)
f0122e72:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e78:	29 d0                	sub    %edx,%eax
f0122e7a:	89 c3                	mov    %eax,%ebx
f0122e7c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122e83:	10 00 00 
f0122e86:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122e8b:	0f b6 c0             	movzbl %al,%eax
f0122e8e:	c1 e0 04             	shl    $0x4,%eax
f0122e91:	89 c2                	mov    %eax,%edx
f0122e93:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122e99:	01 d0                	add    %edx,%eax
f0122e9b:	48                   	dec    %eax
f0122e9c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122ea2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122ea8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ead:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122eb3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122eb9:	29 d0                	sub    %edx,%eax
f0122ebb:	01 d8                	add    %ebx,%eax
f0122ebd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122ec2:	39 c1                	cmp    %eax,%ecx
f0122ec4:	74 17                	je     f0122edd <test_kheap_phys_addr+0x348>
f0122ec6:	83 ec 04             	sub    $0x4,%esp
f0122ec9:	68 94 93 13 f0       	push   $0xf0139394
f0122ece:	68 1a 08 00 00       	push   $0x81a
f0122ed3:	68 ae 92 13 f0       	push   $0xf01392ae
f0122ed8:	e8 d3 d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122edd:	e8 a2 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ee2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ee5:	74 17                	je     f0122efe <test_kheap_phys_addr+0x369>
f0122ee7:	83 ec 04             	sub    $0x4,%esp
f0122eea:	68 c8 92 13 f0       	push   $0xf01392c8
f0122eef:	68 1b 08 00 00       	push   $0x81b
f0122ef4:	68 ae 92 13 f0       	push   $0xf01392ae
f0122ef9:	e8 b2 d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122efe:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f01:	e8 d8 9a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122f06:	29 c3                	sub    %eax,%ebx
f0122f08:	89 d8                	mov    %ebx,%eax
f0122f0a:	83 f8 01             	cmp    $0x1,%eax
f0122f0d:	74 17                	je     f0122f26 <test_kheap_phys_addr+0x391>
f0122f0f:	83 ec 04             	sub    $0x4,%esp
f0122f12:	68 30 93 13 f0       	push   $0xf0139330
f0122f17:	68 1c 08 00 00       	push   $0x81c
f0122f1c:	68 ae 92 13 f0       	push   $0xf01392ae
f0122f21:	e8 8a d2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f26:	e8 b3 9a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0122f2b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f2e:	e8 51 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122f33:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122f36:	83 ec 0c             	sub    $0xc,%esp
f0122f39:	68 00 08 00 00       	push   $0x800
f0122f3e:	e8 1c 50 fe ff       	call   f0107f5f <kmalloc>
f0122f43:	83 c4 10             	add    $0x10,%esp
f0122f46:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f4c:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0122f52:	89 c1                	mov    %eax,%ecx
f0122f54:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122f5b:	10 00 00 
f0122f5e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122f63:	0f b6 d0             	movzbl %al,%edx
f0122f66:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122f6c:	01 d0                	add    %edx,%eax
f0122f6e:	48                   	dec    %eax
f0122f6f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122f75:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122f7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f80:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122f86:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122f8c:	29 d0                	sub    %edx,%eax
f0122f8e:	89 c3                	mov    %eax,%ebx
f0122f90:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122f97:	10 00 00 
f0122f9a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0122f9f:	0f b6 c0             	movzbl %al,%eax
f0122fa2:	c1 e0 04             	shl    $0x4,%eax
f0122fa5:	89 c2                	mov    %eax,%edx
f0122fa7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122fad:	01 d0                	add    %edx,%eax
f0122faf:	48                   	dec    %eax
f0122fb0:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122fb6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122fbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fc1:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122fc7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122fcd:	29 d0                	sub    %edx,%eax
f0122fcf:	01 d8                	add    %ebx,%eax
f0122fd1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122fd6:	39 c1                	cmp    %eax,%ecx
f0122fd8:	74 17                	je     f0122ff1 <test_kheap_phys_addr+0x45c>
f0122fda:	83 ec 04             	sub    $0x4,%esp
f0122fdd:	68 94 93 13 f0       	push   $0xf0139394
f0122fe2:	68 22 08 00 00       	push   $0x822
f0122fe7:	68 ae 92 13 f0       	push   $0xf01392ae
f0122fec:	e8 bf d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ff1:	e8 8e 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ff6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ff9:	74 17                	je     f0123012 <test_kheap_phys_addr+0x47d>
f0122ffb:	83 ec 04             	sub    $0x4,%esp
f0122ffe:	68 c8 92 13 f0       	push   $0xf01392c8
f0123003:	68 23 08 00 00       	push   $0x823
f0123008:	68 ae 92 13 f0       	push   $0xf01392ae
f012300d:	e8 9e d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123012:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123015:	e8 c4 99 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012301a:	29 c3                	sub    %eax,%ebx
f012301c:	89 d8                	mov    %ebx,%eax
f012301e:	83 f8 01             	cmp    $0x1,%eax
f0123021:	74 17                	je     f012303a <test_kheap_phys_addr+0x4a5>
f0123023:	83 ec 04             	sub    $0x4,%esp
f0123026:	68 30 93 13 f0       	push   $0xf0139330
f012302b:	68 24 08 00 00       	push   $0x824
f0123030:	68 ae 92 13 f0       	push   $0xf01392ae
f0123035:	e8 76 d1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012303a:	e8 9f 99 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012303f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123042:	e8 3d 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123047:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012304a:	83 ec 0c             	sub    $0xc,%esp
f012304d:	68 00 1c 00 00       	push   $0x1c00
f0123052:	e8 08 4f fe ff       	call   f0107f5f <kmalloc>
f0123057:	83 c4 10             	add    $0x10,%esp
f012305a:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123060:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0123066:	89 c1                	mov    %eax,%ecx
f0123068:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012306f:	10 00 00 
f0123072:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123077:	0f b6 d0             	movzbl %al,%edx
f012307a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123080:	01 d0                	add    %edx,%eax
f0123082:	48                   	dec    %eax
f0123083:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123089:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012308f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123094:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012309a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01230a0:	29 d0                	sub    %edx,%eax
f01230a2:	89 c3                	mov    %eax,%ebx
f01230a4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01230ab:	10 00 00 
f01230ae:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01230b3:	0f b6 c0             	movzbl %al,%eax
f01230b6:	c1 e0 04             	shl    $0x4,%eax
f01230b9:	89 c2                	mov    %eax,%edx
f01230bb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01230c1:	01 d0                	add    %edx,%eax
f01230c3:	48                   	dec    %eax
f01230c4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01230ca:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01230d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01230d5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01230db:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01230e1:	29 d0                	sub    %edx,%eax
f01230e3:	01 d8                	add    %ebx,%eax
f01230e5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01230ea:	39 c1                	cmp    %eax,%ecx
f01230ec:	74 17                	je     f0123105 <test_kheap_phys_addr+0x570>
f01230ee:	83 ec 04             	sub    $0x4,%esp
f01230f1:	68 94 93 13 f0       	push   $0xf0139394
f01230f6:	68 2a 08 00 00       	push   $0x82a
f01230fb:	68 ae 92 13 f0       	push   $0xf01392ae
f0123100:	e8 ab d0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123105:	e8 7a 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012310a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012310d:	74 17                	je     f0123126 <test_kheap_phys_addr+0x591>
f012310f:	83 ec 04             	sub    $0x4,%esp
f0123112:	68 c8 92 13 f0       	push   $0xf01392c8
f0123117:	68 2b 08 00 00       	push   $0x82b
f012311c:	68 ae 92 13 f0       	push   $0xf01392ae
f0123121:	e8 8a d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123126:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123129:	e8 b0 98 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012312e:	29 c3                	sub    %eax,%ebx
f0123130:	89 d8                	mov    %ebx,%eax
f0123132:	83 f8 02             	cmp    $0x2,%eax
f0123135:	74 17                	je     f012314e <test_kheap_phys_addr+0x5b9>
f0123137:	83 ec 04             	sub    $0x4,%esp
f012313a:	68 30 93 13 f0       	push   $0xf0139330
f012313f:	68 2c 08 00 00       	push   $0x82c
f0123144:	68 ae 92 13 f0       	push   $0xf01392ae
f0123149:	e8 62 d0 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012314e:	e8 8b 98 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123153:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123156:	e8 29 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012315b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012315e:	83 ec 0c             	sub    $0xc,%esp
f0123161:	68 00 fc 2f 00       	push   $0x2ffc00
f0123166:	e8 f4 4d fe ff       	call   f0107f5f <kmalloc>
f012316b:	83 c4 10             	add    $0x10,%esp
f012316e:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123174:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f012317a:	89 c1                	mov    %eax,%ecx
f012317c:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123183:	10 00 00 
f0123186:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012318b:	0f b6 d0             	movzbl %al,%edx
f012318e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123194:	01 d0                	add    %edx,%eax
f0123196:	48                   	dec    %eax
f0123197:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012319d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01231a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01231a8:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01231ae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01231b4:	29 d0                	sub    %edx,%eax
f01231b6:	89 c3                	mov    %eax,%ebx
f01231b8:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01231bf:	10 00 00 
f01231c2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01231c7:	0f b6 c0             	movzbl %al,%eax
f01231ca:	c1 e0 04             	shl    $0x4,%eax
f01231cd:	89 c2                	mov    %eax,%edx
f01231cf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01231d5:	01 d0                	add    %edx,%eax
f01231d7:	48                   	dec    %eax
f01231d8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01231de:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01231e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01231e9:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01231ef:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01231f5:	29 d0                	sub    %edx,%eax
f01231f7:	01 d8                	add    %ebx,%eax
f01231f9:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01231fe:	39 c1                	cmp    %eax,%ecx
f0123200:	74 17                	je     f0123219 <test_kheap_phys_addr+0x684>
f0123202:	83 ec 04             	sub    $0x4,%esp
f0123205:	68 94 93 13 f0       	push   $0xf0139394
f012320a:	68 32 08 00 00       	push   $0x832
f012320f:	68 ae 92 13 f0       	push   $0xf01392ae
f0123214:	e8 97 cf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123219:	e8 66 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012321e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123221:	74 17                	je     f012323a <test_kheap_phys_addr+0x6a5>
f0123223:	83 ec 04             	sub    $0x4,%esp
f0123226:	68 c8 92 13 f0       	push   $0xf01392c8
f012322b:	68 33 08 00 00       	push   $0x833
f0123230:	68 ae 92 13 f0       	push   $0xf01392ae
f0123235:	e8 76 cf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012323a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012323d:	e8 9c 97 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123242:	29 c3                	sub    %eax,%ebx
f0123244:	89 d8                	mov    %ebx,%eax
f0123246:	3d 00 03 00 00       	cmp    $0x300,%eax
f012324b:	74 17                	je     f0123264 <test_kheap_phys_addr+0x6cf>
f012324d:	83 ec 04             	sub    $0x4,%esp
f0123250:	68 30 93 13 f0       	push   $0xf0139330
f0123255:	68 34 08 00 00       	push   $0x834
f012325a:	68 ae 92 13 f0       	push   $0xf01392ae
f012325f:	e8 4c cf fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123264:	e8 75 97 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123269:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012326c:	e8 13 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123271:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123274:	83 ec 0c             	sub    $0xc,%esp
f0123277:	68 00 fc 5f 00       	push   $0x5ffc00
f012327c:	e8 de 4c fe ff       	call   f0107f5f <kmalloc>
f0123281:	83 c4 10             	add    $0x10,%esp
f0123284:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012328a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123290:	89 c1                	mov    %eax,%ecx
f0123292:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123299:	10 00 00 
f012329c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01232a1:	0f b6 d0             	movzbl %al,%edx
f01232a4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01232aa:	01 d0                	add    %edx,%eax
f01232ac:	48                   	dec    %eax
f01232ad:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01232b3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01232b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01232be:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01232c4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01232ca:	29 d0                	sub    %edx,%eax
f01232cc:	89 c3                	mov    %eax,%ebx
f01232ce:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01232d5:	10 00 00 
f01232d8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01232dd:	0f b6 c0             	movzbl %al,%eax
f01232e0:	c1 e0 04             	shl    $0x4,%eax
f01232e3:	89 c2                	mov    %eax,%edx
f01232e5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01232eb:	01 d0                	add    %edx,%eax
f01232ed:	48                   	dec    %eax
f01232ee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01232f4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01232fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ff:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123305:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012330b:	29 d0                	sub    %edx,%eax
f012330d:	01 d8                	add    %ebx,%eax
f012330f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123314:	39 c1                	cmp    %eax,%ecx
f0123316:	74 17                	je     f012332f <test_kheap_phys_addr+0x79a>
f0123318:	83 ec 04             	sub    $0x4,%esp
f012331b:	68 94 93 13 f0       	push   $0xf0139394
f0123320:	68 3a 08 00 00       	push   $0x83a
f0123325:	68 ae 92 13 f0       	push   $0xf01392ae
f012332a:	e8 81 ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012332f:	e8 50 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123334:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123337:	74 17                	je     f0123350 <test_kheap_phys_addr+0x7bb>
f0123339:	83 ec 04             	sub    $0x4,%esp
f012333c:	68 c8 92 13 f0       	push   $0xf01392c8
f0123341:	68 3b 08 00 00       	push   $0x83b
f0123346:	68 ae 92 13 f0       	push   $0xf01392ae
f012334b:	e8 60 ce fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123350:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123353:	e8 86 96 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123358:	29 c3                	sub    %eax,%ebx
f012335a:	89 d8                	mov    %ebx,%eax
f012335c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123361:	74 17                	je     f012337a <test_kheap_phys_addr+0x7e5>
f0123363:	83 ec 04             	sub    $0x4,%esp
f0123366:	68 30 93 13 f0       	push   $0xf0139330
f012336b:	68 3c 08 00 00       	push   $0x83c
f0123370:	68 ae 92 13 f0       	push   $0xf01392ae
f0123375:	e8 36 ce fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012337a:	e8 5f 96 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012337f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123382:	e8 fd 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123387:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012338a:	83 ec 0c             	sub    $0xc,%esp
f012338d:	68 00 38 00 00       	push   $0x3800
f0123392:	e8 c8 4b fe ff       	call   f0107f5f <kmalloc>
f0123397:	83 c4 10             	add    $0x10,%esp
f012339a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01233a0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01233a6:	89 c1                	mov    %eax,%ecx
f01233a8:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01233af:	10 00 00 
f01233b2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01233b7:	0f b6 d0             	movzbl %al,%edx
f01233ba:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01233c0:	01 d0                	add    %edx,%eax
f01233c2:	48                   	dec    %eax
f01233c3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01233c9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01233d4:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01233da:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233e0:	29 d0                	sub    %edx,%eax
f01233e2:	89 c3                	mov    %eax,%ebx
f01233e4:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01233eb:	10 00 00 
f01233ee:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01233f3:	0f b6 c0             	movzbl %al,%eax
f01233f6:	c1 e0 04             	shl    $0x4,%eax
f01233f9:	89 c2                	mov    %eax,%edx
f01233fb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123401:	01 d0                	add    %edx,%eax
f0123403:	48                   	dec    %eax
f0123404:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012340a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123410:	ba 00 00 00 00       	mov    $0x0,%edx
f0123415:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012341b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123421:	29 d0                	sub    %edx,%eax
f0123423:	01 d8                	add    %ebx,%eax
f0123425:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012342a:	39 c1                	cmp    %eax,%ecx
f012342c:	74 17                	je     f0123445 <test_kheap_phys_addr+0x8b0>
f012342e:	83 ec 04             	sub    $0x4,%esp
f0123431:	68 94 93 13 f0       	push   $0xf0139394
f0123436:	68 42 08 00 00       	push   $0x842
f012343b:	68 ae 92 13 f0       	push   $0xf01392ae
f0123440:	e8 6b cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123445:	e8 3a 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012344a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012344d:	74 17                	je     f0123466 <test_kheap_phys_addr+0x8d1>
f012344f:	83 ec 04             	sub    $0x4,%esp
f0123452:	68 c8 92 13 f0       	push   $0xf01392c8
f0123457:	68 43 08 00 00       	push   $0x843
f012345c:	68 ae 92 13 f0       	push   $0xf01392ae
f0123461:	e8 4a cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123466:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123469:	e8 70 95 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012346e:	29 c3                	sub    %eax,%ebx
f0123470:	89 d8                	mov    %ebx,%eax
f0123472:	83 f8 04             	cmp    $0x4,%eax
f0123475:	74 17                	je     f012348e <test_kheap_phys_addr+0x8f9>
f0123477:	83 ec 04             	sub    $0x4,%esp
f012347a:	68 30 93 13 f0       	push   $0xf0139330
f012347f:	68 44 08 00 00       	push   $0x844
f0123484:	68 ae 92 13 f0       	push   $0xf01392ae
f0123489:	e8 22 cd fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f012348e:	89 e0                	mov    %esp,%eax
f0123490:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123492:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123499:	10 00 00 
f012349c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01234a1:	0f b6 d0             	movzbl %al,%edx
f01234a4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01234aa:	01 d0                	add    %edx,%eax
f01234ac:	48                   	dec    %eax
f01234ad:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01234b3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01234be:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01234c4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234ca:	29 d0                	sub    %edx,%eax
f01234cc:	89 c1                	mov    %eax,%ecx
f01234ce:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01234d5:	10 00 00 
f01234d8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01234dd:	0f b6 c0             	movzbl %al,%eax
f01234e0:	c1 e0 04             	shl    $0x4,%eax
f01234e3:	89 c2                	mov    %eax,%edx
f01234e5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01234eb:	01 d0                	add    %edx,%eax
f01234ed:	48                   	dec    %eax
f01234ee:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01234f4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01234fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01234ff:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123505:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012350b:	29 d0                	sub    %edx,%eax
f012350d:	01 c8                	add    %ecx,%eax
f012350f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123514:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012351a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0123521:	10 00 00 
f0123524:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123529:	0f b6 d0             	movzbl %al,%edx
f012352c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123532:	01 d0                	add    %edx,%eax
f0123534:	48                   	dec    %eax
f0123535:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012353b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123541:	ba 00 00 00 00       	mov    $0x0,%edx
f0123546:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012354c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123552:	29 d0                	sub    %edx,%eax
f0123554:	89 c1                	mov    %eax,%ecx
f0123556:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012355d:	10 00 00 
f0123560:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123565:	0f b6 c0             	movzbl %al,%eax
f0123568:	c1 e0 04             	shl    $0x4,%eax
f012356b:	89 c2                	mov    %eax,%edx
f012356d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123573:	01 d0                	add    %edx,%eax
f0123575:	48                   	dec    %eax
f0123576:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012357c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123582:	ba 00 00 00 00       	mov    $0x0,%edx
f0123587:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012358d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123593:	29 d0                	sub    %edx,%eax
f0123595:	01 c8                	add    %ecx,%eax
f0123597:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012359c:	c1 e8 0c             	shr    $0xc,%eax
f012359f:	89 c2                	mov    %eax,%edx
f01235a1:	4a                   	dec    %edx
f01235a2:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f01235a8:	c1 e0 02             	shl    $0x2,%eax
f01235ab:	8d 50 03             	lea    0x3(%eax),%edx
f01235ae:	b8 10 00 00 00       	mov    $0x10,%eax
f01235b3:	48                   	dec    %eax
f01235b4:	01 d0                	add    %edx,%eax
f01235b6:	bf 10 00 00 00       	mov    $0x10,%edi
f01235bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01235c0:	f7 f7                	div    %edi
f01235c2:	6b c0 10             	imul   $0x10,%eax,%eax
f01235c5:	29 c4                	sub    %eax,%esp
f01235c7:	89 e0                	mov    %esp,%eax
f01235c9:	83 c0 03             	add    $0x3,%eax
f01235cc:	c1 e8 02             	shr    $0x2,%eax
f01235cf:	c1 e0 02             	shl    $0x2,%eax
f01235d2:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f01235d8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01235df:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01235e6:	eb 29                	jmp    f0123611 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f01235e8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01235eb:	8d 43 01             	lea    0x1(%ebx),%eax
f01235ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01235f1:	83 ec 0c             	sub    $0xc,%esp
f01235f4:	ff 75 e0             	pushl  -0x20(%ebp)
f01235f7:	e8 b1 49 fe ff       	call   f0107fad <kheap_physical_address>
f01235fc:	83 c4 10             	add    $0x10,%esp
f01235ff:	89 c2                	mov    %eax,%edx
f0123601:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123607:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012360a:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123611:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123614:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012361a:	72 cc                	jb     f01235e8 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012361c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012361f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0123625:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012362c:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123633:	e9 ab 00 00 00       	jmp    f01236e3 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123638:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012363d:	83 ec 04             	sub    $0x4,%esp
f0123640:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f0123646:	52                   	push   %edx
f0123647:	ff 75 e0             	pushl  -0x20(%ebp)
f012364a:	50                   	push   %eax
f012364b:	e8 97 3e fe ff       	call   f01074e7 <get_page_table>
f0123650:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123653:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0123659:	85 c0                	test   %eax,%eax
f012365b:	75 17                	jne    f0123674 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012365d:	83 ec 04             	sub    $0x4,%esp
f0123660:	68 50 9c 13 f0       	push   $0xf0139c50
f0123665:	68 59 08 00 00       	push   $0x859
f012366a:	68 ae 92 13 f0       	push   $0xf01392ae
f012366f:	e8 3c cb fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123674:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123677:	c1 e8 0c             	shr    $0xc,%eax
f012367a:	25 ff 03 00 00       	and    $0x3ff,%eax
f012367f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123682:	eb 4b                	jmp    f01236cf <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123684:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012368a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012368d:	c1 e2 02             	shl    $0x2,%edx
f0123690:	01 d0                	add    %edx,%eax
f0123692:	8b 00                	mov    (%eax),%eax
f0123694:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123699:	89 c1                	mov    %eax,%ecx
f012369b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01236a4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01236a7:	39 c1                	cmp    %eax,%ecx
f01236a9:	74 17                	je     f01236c2 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01236ab:	83 ec 04             	sub    $0x4,%esp
f01236ae:	68 a9 9c 13 f0       	push   $0xf0139ca9
f01236b3:	68 60 08 00 00       	push   $0x860
f01236b8:	68 ae 92 13 f0       	push   $0xf01392ae
f01236bd:	e8 ee ca fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01236c2:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01236c9:	ff 45 dc             	incl   -0x24(%ebp)
f01236cc:	ff 45 e4             	incl   -0x1c(%ebp)
f01236cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01236d2:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01236d8:	7d 09                	jge    f01236e3 <test_kheap_phys_addr+0xb4e>
f01236da:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01236e1:	7e a1                	jle    f0123684 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01236e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01236e6:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01236ec:	0f 82 46 ff ff ff    	jb     f0123638 <test_kheap_phys_addr+0xaa3>
f01236f2:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01236f4:	83 ec 0c             	sub    $0xc,%esp
f01236f7:	68 c8 9c 13 f0       	push   $0xf0139cc8
f01236fc:	e8 30 d7 fd ff       	call   f0100e31 <cprintf>
f0123701:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123704:	e8 d5 92 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123709:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012370f:	e8 70 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123714:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012371a:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0123720:	83 ec 0c             	sub    $0xc,%esp
f0123723:	50                   	push   %eax
f0123724:	e8 50 48 fe ff       	call   f0107f79 <kfree>
f0123729:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012372c:	e8 53 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123731:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123737:	74 17                	je     f0123750 <test_kheap_phys_addr+0xbbb>
f0123739:	83 ec 04             	sub    $0x4,%esp
f012373c:	68 c8 92 13 f0       	push   $0xf01392c8
f0123741:	68 6e 08 00 00       	push   $0x86e
f0123746:	68 ae 92 13 f0       	push   $0xf01392ae
f012374b:	e8 60 ca fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123750:	e8 89 92 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123755:	89 c2                	mov    %eax,%edx
f0123757:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012375d:	29 c2                	sub    %eax,%edx
f012375f:	89 d0                	mov    %edx,%eax
f0123761:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123766:	74 17                	je     f012377f <test_kheap_phys_addr+0xbea>
f0123768:	83 ec 04             	sub    $0x4,%esp
f012376b:	68 38 9a 13 f0       	push   $0xf0139a38
f0123770:	68 6f 08 00 00       	push   $0x86f
f0123775:	68 ae 92 13 f0       	push   $0xf01392ae
f012377a:	e8 31 ca fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012377f:	e8 5a 92 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123784:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012378a:	e8 f5 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012378f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123795:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012379b:	83 ec 0c             	sub    $0xc,%esp
f012379e:	50                   	push   %eax
f012379f:	e8 d5 47 fe ff       	call   f0107f79 <kfree>
f01237a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237a7:	e8 d8 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01237ac:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01237b2:	74 17                	je     f01237cb <test_kheap_phys_addr+0xc36>
f01237b4:	83 ec 04             	sub    $0x4,%esp
f01237b7:	68 c8 92 13 f0       	push   $0xf01392c8
f01237bc:	68 75 08 00 00       	push   $0x875
f01237c1:	68 ae 92 13 f0       	push   $0xf01392ae
f01237c6:	e8 e5 c9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01237cb:	e8 0e 92 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01237d0:	89 c2                	mov    %eax,%edx
f01237d2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01237d8:	29 c2                	sub    %eax,%edx
f01237da:	89 d0                	mov    %edx,%eax
f01237dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01237e1:	74 17                	je     f01237fa <test_kheap_phys_addr+0xc65>
f01237e3:	83 ec 04             	sub    $0x4,%esp
f01237e6:	68 38 9a 13 f0       	push   $0xf0139a38
f01237eb:	68 76 08 00 00       	push   $0x876
f01237f0:	68 ae 92 13 f0       	push   $0xf01392ae
f01237f5:	e8 b6 c9 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01237fa:	e8 df 91 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01237ff:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123805:	e8 7a 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012380a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0123810:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123816:	83 ec 0c             	sub    $0xc,%esp
f0123819:	50                   	push   %eax
f012381a:	e8 5a 47 fe ff       	call   f0107f79 <kfree>
f012381f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123822:	e8 5d 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123827:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012382d:	74 17                	je     f0123846 <test_kheap_phys_addr+0xcb1>
f012382f:	83 ec 04             	sub    $0x4,%esp
f0123832:	68 c8 92 13 f0       	push   $0xf01392c8
f0123837:	68 7c 08 00 00       	push   $0x87c
f012383c:	68 ae 92 13 f0       	push   $0xf01392ae
f0123841:	e8 6a c9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123846:	e8 93 91 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012384b:	89 c2                	mov    %eax,%edx
f012384d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123853:	29 c2                	sub    %eax,%edx
f0123855:	89 d0                	mov    %edx,%eax
f0123857:	3d 00 06 00 00       	cmp    $0x600,%eax
f012385c:	74 17                	je     f0123875 <test_kheap_phys_addr+0xce0>
f012385e:	83 ec 04             	sub    $0x4,%esp
f0123861:	68 38 9a 13 f0       	push   $0xf0139a38
f0123866:	68 7d 08 00 00       	push   $0x87d
f012386b:	68 ae 92 13 f0       	push   $0xf01392ae
f0123870:	e8 3b c9 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123875:	89 e0                	mov    %esp,%eax
f0123877:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123879:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123880:	10 00 00 
f0123883:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123888:	0f b6 d0             	movzbl %al,%edx
f012388b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123891:	01 d0                	add    %edx,%eax
f0123893:	48                   	dec    %eax
f0123894:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012389a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01238a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01238a5:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01238ab:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01238b1:	29 d0                	sub    %edx,%eax
f01238b3:	89 c1                	mov    %eax,%ecx
f01238b5:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01238bc:	10 00 00 
f01238bf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01238c4:	0f b6 c0             	movzbl %al,%eax
f01238c7:	c1 e0 04             	shl    $0x4,%eax
f01238ca:	89 c2                	mov    %eax,%edx
f01238cc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01238d2:	01 d0                	add    %edx,%eax
f01238d4:	48                   	dec    %eax
f01238d5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01238db:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01238e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01238e6:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01238ec:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01238f2:	29 d0                	sub    %edx,%eax
f01238f4:	01 c8                	add    %ecx,%eax
f01238f6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01238fb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123901:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123908:	10 00 00 
f012390b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123910:	0f b6 d0             	movzbl %al,%edx
f0123913:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123919:	01 d0                	add    %edx,%eax
f012391b:	48                   	dec    %eax
f012391c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123922:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123928:	ba 00 00 00 00       	mov    $0x0,%edx
f012392d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123933:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123939:	29 d0                	sub    %edx,%eax
f012393b:	89 c1                	mov    %eax,%ecx
f012393d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123944:	10 00 00 
f0123947:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012394c:	0f b6 c0             	movzbl %al,%eax
f012394f:	c1 e0 04             	shl    $0x4,%eax
f0123952:	89 c2                	mov    %eax,%edx
f0123954:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012395a:	01 d0                	add    %edx,%eax
f012395c:	48                   	dec    %eax
f012395d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123963:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123969:	ba 00 00 00 00       	mov    $0x0,%edx
f012396e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123974:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012397a:	29 d0                	sub    %edx,%eax
f012397c:	01 c8                	add    %ecx,%eax
f012397e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123983:	c1 e8 0c             	shr    $0xc,%eax
f0123986:	89 c2                	mov    %eax,%edx
f0123988:	4a                   	dec    %edx
f0123989:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f012398f:	c1 e0 02             	shl    $0x2,%eax
f0123992:	8d 50 03             	lea    0x3(%eax),%edx
f0123995:	b8 10 00 00 00       	mov    $0x10,%eax
f012399a:	48                   	dec    %eax
f012399b:	01 d0                	add    %edx,%eax
f012399d:	bf 10 00 00 00       	mov    $0x10,%edi
f01239a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01239a7:	f7 f7                	div    %edi
f01239a9:	6b c0 10             	imul   $0x10,%eax,%eax
f01239ac:	29 c4                	sub    %eax,%esp
f01239ae:	89 e0                	mov    %esp,%eax
f01239b0:	83 c0 03             	add    $0x3,%eax
f01239b3:	c1 e8 02             	shr    $0x2,%eax
f01239b6:	c1 e0 02             	shl    $0x2,%eax
f01239b9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f01239bf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01239c6:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01239cd:	eb 29                	jmp    f01239f8 <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f01239cf:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01239d2:	8d 43 01             	lea    0x1(%ebx),%eax
f01239d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01239d8:	83 ec 0c             	sub    $0xc,%esp
f01239db:	ff 75 d8             	pushl  -0x28(%ebp)
f01239de:	e8 ca 45 fe ff       	call   f0107fad <kheap_physical_address>
f01239e3:	83 c4 10             	add    $0x10,%esp
f01239e6:	89 c2                	mov    %eax,%edx
f01239e8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01239ee:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01239f1:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01239f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01239fb:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123a01:	72 cc                	jb     f01239cf <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123a03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123a06:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0123a0c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123a13:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123a1a:	e9 ab 00 00 00       	jmp    f0123aca <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123a1f:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0123a24:	83 ec 04             	sub    $0x4,%esp
f0123a27:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0123a2d:	52                   	push   %edx
f0123a2e:	ff 75 d8             	pushl  -0x28(%ebp)
f0123a31:	50                   	push   %eax
f0123a32:	e8 b0 3a fe ff       	call   f01074e7 <get_page_table>
f0123a37:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123a3a:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123a40:	85 c0                	test   %eax,%eax
f0123a42:	75 17                	jne    f0123a5b <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123a44:	83 ec 04             	sub    $0x4,%esp
f0123a47:	68 50 9c 13 f0       	push   $0xf0139c50
f0123a4c:	68 93 08 00 00       	push   $0x893
f0123a51:	68 ae 92 13 f0       	push   $0xf01392ae
f0123a56:	e8 55 c7 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123a5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123a5e:	c1 e8 0c             	shr    $0xc,%eax
f0123a61:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123a66:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123a69:	eb 4b                	jmp    f0123ab6 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123a6b:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123a71:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123a74:	c1 e2 02             	shl    $0x2,%edx
f0123a77:	01 d0                	add    %edx,%eax
f0123a79:	8b 00                	mov    (%eax),%eax
f0123a7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123a80:	89 c1                	mov    %eax,%ecx
f0123a82:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a88:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123a8b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123a8e:	39 c1                	cmp    %eax,%ecx
f0123a90:	74 17                	je     f0123aa9 <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123a92:	83 ec 04             	sub    $0x4,%esp
f0123a95:	68 a9 9c 13 f0       	push   $0xf0139ca9
f0123a9a:	68 9a 08 00 00       	push   $0x89a
f0123a9f:	68 ae 92 13 f0       	push   $0xf01392ae
f0123aa4:	e8 07 c7 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123aa9:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123ab0:	ff 45 d4             	incl   -0x2c(%ebp)
f0123ab3:	ff 45 e4             	incl   -0x1c(%ebp)
f0123ab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123ab9:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0123abf:	7d 09                	jge    f0123aca <test_kheap_phys_addr+0xf35>
f0123ac1:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123ac8:	7e a1                	jle    f0123a6b <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123aca:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123acd:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123ad3:	0f 82 46 ff ff ff    	jb     f0123a1f <test_kheap_phys_addr+0xe8a>
f0123ad9:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123adb:	83 ec 0c             	sub    $0xc,%esp
f0123ade:	68 39 94 13 f0       	push   $0xf0139439
f0123ae3:	e8 49 d3 fd ff       	call   f0100e31 <cprintf>
f0123ae8:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123aeb:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123af2:	10 00 00 
f0123af5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123afa:	0f b6 d0             	movzbl %al,%edx
f0123afd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123b03:	01 d0                	add    %edx,%eax
f0123b05:	48                   	dec    %eax
f0123b06:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123b0c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123b12:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b17:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123b1d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123b23:	29 d0                	sub    %edx,%eax
f0123b25:	89 c1                	mov    %eax,%ecx
f0123b27:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123b2e:	10 00 00 
f0123b31:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123b36:	0f b6 c0             	movzbl %al,%eax
f0123b39:	c1 e0 04             	shl    $0x4,%eax
f0123b3c:	89 c2                	mov    %eax,%edx
f0123b3e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123b44:	01 d0                	add    %edx,%eax
f0123b46:	48                   	dec    %eax
f0123b47:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123b4d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b58:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123b5e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b64:	29 d0                	sub    %edx,%eax
f0123b66:	01 c8                	add    %ecx,%eax
f0123b68:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123b6d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123b73:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123b7a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b80:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123b83:	eb 0a                	jmp    f0123b8f <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123b85:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123b88:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123b8f:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123b96:	76 ed                	jbe    f0123b85 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123b98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b9b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123ba1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123ba8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123bae:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123bb1:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123bb8:	e9 cc 00 00 00       	jmp    f0123c89 <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123bbd:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123bc0:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f0123bc5:	83 ec 04             	sub    $0x4,%esp
f0123bc8:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123bce:	51                   	push   %ecx
f0123bcf:	52                   	push   %edx
f0123bd0:	50                   	push   %eax
f0123bd1:	e8 11 39 fe ff       	call   f01074e7 <get_page_table>
f0123bd6:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123bd9:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123bdf:	85 c0                	test   %eax,%eax
f0123be1:	75 17                	jne    f0123bfa <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123be3:	83 ec 04             	sub    $0x4,%esp
f0123be6:	68 50 9c 13 f0       	push   $0xf0139c50
f0123beb:	68 b6 08 00 00       	push   $0x8b6
f0123bf0:	68 ae 92 13 f0       	push   $0xf01392ae
f0123bf5:	e8 b6 c5 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123bfa:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123c01:	eb 67                	jmp    f0123c6a <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123c03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c06:	c1 e0 0c             	shl    $0xc,%eax
f0123c09:	89 c2                	mov    %eax,%edx
f0123c0b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123c11:	01 d0                	add    %edx,%eax
f0123c13:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123c19:	83 ec 0c             	sub    $0xc,%esp
f0123c1c:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123c22:	e8 86 43 fe ff       	call   f0107fad <kheap_physical_address>
f0123c27:	83 c4 10             	add    $0x10,%esp
f0123c2a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123c30:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123c36:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123c39:	c1 e2 02             	shl    $0x2,%edx
f0123c3c:	01 d0                	add    %edx,%eax
f0123c3e:	8b 00                	mov    (%eax),%eax
f0123c40:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123c45:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123c4b:	74 17                	je     f0123c64 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123c4d:	83 ec 04             	sub    $0x4,%esp
f0123c50:	68 a9 9c 13 f0       	push   $0xf0139ca9
f0123c55:	68 c0 08 00 00       	push   $0x8c0
f0123c5a:	68 ae 92 13 f0       	push   $0xf01392ae
f0123c5f:	e8 4c c5 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123c64:	ff 45 cc             	incl   -0x34(%ebp)
f0123c67:	ff 45 e4             	incl   -0x1c(%ebp)
f0123c6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c6d:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0123c73:	7d 09                	jge    f0123c7e <test_kheap_phys_addr+0x10e9>
f0123c75:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123c7c:	7e 85                	jle    f0123c03 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123c7e:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123c85:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123c89:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123c8d:	0f 88 2a ff ff ff    	js     f0123bbd <test_kheap_phys_addr+0x1028>
f0123c93:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123c97:	7f 0d                	jg     f0123ca6 <test_kheap_phys_addr+0x1111>
f0123c99:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123ca0:	0f 86 17 ff ff ff    	jbe    f0123bbd <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123ca6:	83 ec 0c             	sub    $0xc,%esp
f0123ca9:	68 92 94 13 f0       	push   $0xf0139492
f0123cae:	e8 7e d1 fd ff       	call   f0100e31 <cprintf>
f0123cb3:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123cb6:	83 ec 0c             	sub    $0xc,%esp
f0123cb9:	68 fc 9c 13 f0       	push   $0xf0139cfc
f0123cbe:	e8 6e d1 fd ff       	call   f0100e31 <cprintf>
f0123cc3:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123cc6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123ccb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123cce:	5b                   	pop    %ebx
f0123ccf:	5e                   	pop    %esi
f0123cd0:	5f                   	pop    %edi
f0123cd1:	5d                   	pop    %ebp
f0123cd2:	c3                   	ret    

f0123cd3 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123cd3:	55                   	push   %ebp
f0123cd4:	89 e5                	mov    %esp,%ebp
f0123cd6:	57                   	push   %edi
f0123cd7:	56                   	push   %esi
f0123cd8:	53                   	push   %ebx
f0123cd9:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123cdf:	89 e0                	mov    %esp,%eax
f0123ce1:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123ce3:	83 ec 0c             	sub    $0xc,%esp
f0123ce6:	68 f0 91 13 f0       	push   $0xf01391f0
f0123ceb:	e8 41 d1 fd ff       	call   f0100e31 <cprintf>
f0123cf0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123cf3:	83 ec 0c             	sub    $0xc,%esp
f0123cf6:	68 20 92 13 f0       	push   $0xf0139220
f0123cfb:	e8 31 d1 fd ff       	call   f0100e31 <cprintf>
f0123d00:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123d03:	83 ec 0c             	sub    $0xc,%esp
f0123d06:	68 f0 91 13 f0       	push   $0xf01391f0
f0123d0b:	e8 21 d1 fd ff       	call   f0100e31 <cprintf>
f0123d10:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123d13:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123d17:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123d1b:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123d21:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123d27:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123d2e:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123d35:	e8 a4 8c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123d3a:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123d3d:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123d43:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d48:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d4d:	89 d7                	mov    %edx,%edi
f0123d4f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123d51:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0123d57:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d5c:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d61:	89 d7                	mov    %edx,%edi
f0123d63:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123d65:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0123d6b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d70:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d75:	89 d7                	mov    %edx,%edi
f0123d77:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d79:	e8 60 8c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123d7e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d81:	e8 fe 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123d86:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123d89:	83 ec 0c             	sub    $0xc,%esp
f0123d8c:	68 00 fc 1f 00       	push   $0x1ffc00
f0123d91:	e8 c9 41 fe ff       	call   f0107f5f <kmalloc>
f0123d96:	83 c4 10             	add    $0x10,%esp
f0123d99:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123d9f:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123da5:	89 c1                	mov    %eax,%ecx
f0123da7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123dae:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123db3:	0f b6 d0             	movzbl %al,%edx
f0123db6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123db9:	01 d0                	add    %edx,%eax
f0123dbb:	48                   	dec    %eax
f0123dbc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123dbf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123dc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dc7:	f7 75 b4             	divl   -0x4c(%ebp)
f0123dca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123dcd:	29 d0                	sub    %edx,%eax
f0123dcf:	89 c3                	mov    %eax,%ebx
f0123dd1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123dd8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123ddd:	0f b6 c0             	movzbl %al,%eax
f0123de0:	c1 e0 04             	shl    $0x4,%eax
f0123de3:	89 c2                	mov    %eax,%edx
f0123de5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123de8:	01 d0                	add    %edx,%eax
f0123dea:	48                   	dec    %eax
f0123deb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123dee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123df1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123df6:	f7 75 ac             	divl   -0x54(%ebp)
f0123df9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123dfc:	29 d0                	sub    %edx,%eax
f0123dfe:	01 d8                	add    %ebx,%eax
f0123e00:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123e05:	39 c1                	cmp    %eax,%ecx
f0123e07:	74 17                	je     f0123e20 <test_kheap_virt_addr+0x14d>
f0123e09:	83 ec 04             	sub    $0x4,%esp
f0123e0c:	68 94 93 13 f0       	push   $0xf0139394
f0123e11:	68 ed 08 00 00       	push   $0x8ed
f0123e16:	68 ae 92 13 f0       	push   $0xf01392ae
f0123e1b:	e8 90 c3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e20:	e8 5f 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123e25:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123e28:	74 17                	je     f0123e41 <test_kheap_virt_addr+0x16e>
f0123e2a:	83 ec 04             	sub    $0x4,%esp
f0123e2d:	68 c8 92 13 f0       	push   $0xf01392c8
f0123e32:	68 ee 08 00 00       	push   $0x8ee
f0123e37:	68 ae 92 13 f0       	push   $0xf01392ae
f0123e3c:	e8 6f c3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e41:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123e44:	e8 95 8b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123e49:	29 c3                	sub    %eax,%ebx
f0123e4b:	89 d8                	mov    %ebx,%eax
f0123e4d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123e52:	74 17                	je     f0123e6b <test_kheap_virt_addr+0x198>
f0123e54:	83 ec 04             	sub    $0x4,%esp
f0123e57:	68 30 93 13 f0       	push   $0xf0139330
f0123e5c:	68 ef 08 00 00       	push   $0x8ef
f0123e61:	68 ae 92 13 f0       	push   $0xf01392ae
f0123e66:	e8 45 c3 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e6b:	e8 6e 8b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123e70:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e73:	e8 0c 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123e78:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123e7b:	83 ec 0c             	sub    $0xc,%esp
f0123e7e:	68 00 fc 1f 00       	push   $0x1ffc00
f0123e83:	e8 d7 40 fe ff       	call   f0107f5f <kmalloc>
f0123e88:	83 c4 10             	add    $0x10,%esp
f0123e8b:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e91:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123e97:	89 c1                	mov    %eax,%ecx
f0123e99:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123ea0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123ea5:	0f b6 d0             	movzbl %al,%edx
f0123ea8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123eab:	01 d0                	add    %edx,%eax
f0123ead:	48                   	dec    %eax
f0123eae:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123eb1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123eb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123eb9:	f7 75 a4             	divl   -0x5c(%ebp)
f0123ebc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123ebf:	29 d0                	sub    %edx,%eax
f0123ec1:	89 c3                	mov    %eax,%ebx
f0123ec3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0123eca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123ecf:	0f b6 c0             	movzbl %al,%eax
f0123ed2:	c1 e0 04             	shl    $0x4,%eax
f0123ed5:	89 c2                	mov    %eax,%edx
f0123ed7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123eda:	01 d0                	add    %edx,%eax
f0123edc:	48                   	dec    %eax
f0123edd:	89 45 98             	mov    %eax,-0x68(%ebp)
f0123ee0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123ee3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ee8:	f7 75 9c             	divl   -0x64(%ebp)
f0123eeb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123eee:	29 d0                	sub    %edx,%eax
f0123ef0:	01 d8                	add    %ebx,%eax
f0123ef2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123ef7:	39 c1                	cmp    %eax,%ecx
f0123ef9:	74 17                	je     f0123f12 <test_kheap_virt_addr+0x23f>
f0123efb:	83 ec 04             	sub    $0x4,%esp
f0123efe:	68 94 93 13 f0       	push   $0xf0139394
f0123f03:	68 f5 08 00 00       	push   $0x8f5
f0123f08:	68 ae 92 13 f0       	push   $0xf01392ae
f0123f0d:	e8 9e c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f12:	e8 6d 07 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123f17:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123f1a:	74 17                	je     f0123f33 <test_kheap_virt_addr+0x260>
f0123f1c:	83 ec 04             	sub    $0x4,%esp
f0123f1f:	68 c8 92 13 f0       	push   $0xf01392c8
f0123f24:	68 f6 08 00 00       	push   $0x8f6
f0123f29:	68 ae 92 13 f0       	push   $0xf01392ae
f0123f2e:	e8 7d c2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f33:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123f36:	e8 a3 8a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123f3b:	29 c3                	sub    %eax,%ebx
f0123f3d:	89 d8                	mov    %ebx,%eax
f0123f3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123f44:	74 17                	je     f0123f5d <test_kheap_virt_addr+0x28a>
f0123f46:	83 ec 04             	sub    $0x4,%esp
f0123f49:	68 30 93 13 f0       	push   $0xf0139330
f0123f4e:	68 f7 08 00 00       	push   $0x8f7
f0123f53:	68 ae 92 13 f0       	push   $0xf01392ae
f0123f58:	e8 53 c2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f5d:	e8 7c 8a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0123f62:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f65:	e8 1a 07 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123f6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123f6d:	83 ec 0c             	sub    $0xc,%esp
f0123f70:	68 00 08 00 00       	push   $0x800
f0123f75:	e8 e5 3f fe ff       	call   f0107f5f <kmalloc>
f0123f7a:	83 c4 10             	add    $0x10,%esp
f0123f7d:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f83:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123f89:	89 c1                	mov    %eax,%ecx
f0123f8b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0123f92:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123f97:	0f b6 d0             	movzbl %al,%edx
f0123f9a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123f9d:	01 d0                	add    %edx,%eax
f0123f9f:	48                   	dec    %eax
f0123fa0:	89 45 90             	mov    %eax,-0x70(%ebp)
f0123fa3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123fa6:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fab:	f7 75 94             	divl   -0x6c(%ebp)
f0123fae:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123fb1:	29 d0                	sub    %edx,%eax
f0123fb3:	89 c3                	mov    %eax,%ebx
f0123fb5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0123fbc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0123fc1:	0f b6 c0             	movzbl %al,%eax
f0123fc4:	c1 e0 04             	shl    $0x4,%eax
f0123fc7:	89 c2                	mov    %eax,%edx
f0123fc9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123fcc:	01 d0                	add    %edx,%eax
f0123fce:	48                   	dec    %eax
f0123fcf:	89 45 88             	mov    %eax,-0x78(%ebp)
f0123fd2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123fd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fda:	f7 75 8c             	divl   -0x74(%ebp)
f0123fdd:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123fe0:	29 d0                	sub    %edx,%eax
f0123fe2:	01 d8                	add    %ebx,%eax
f0123fe4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123fe9:	39 c1                	cmp    %eax,%ecx
f0123feb:	74 17                	je     f0124004 <test_kheap_virt_addr+0x331>
f0123fed:	83 ec 04             	sub    $0x4,%esp
f0123ff0:	68 94 93 13 f0       	push   $0xf0139394
f0123ff5:	68 fd 08 00 00       	push   $0x8fd
f0123ffa:	68 ae 92 13 f0       	push   $0xf01392ae
f0123fff:	e8 ac c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124004:	e8 7b 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124009:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012400c:	74 17                	je     f0124025 <test_kheap_virt_addr+0x352>
f012400e:	83 ec 04             	sub    $0x4,%esp
f0124011:	68 c8 92 13 f0       	push   $0xf01392c8
f0124016:	68 fe 08 00 00       	push   $0x8fe
f012401b:	68 ae 92 13 f0       	push   $0xf01392ae
f0124020:	e8 8b c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124025:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124028:	e8 b1 89 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012402d:	29 c3                	sub    %eax,%ebx
f012402f:	89 d8                	mov    %ebx,%eax
f0124031:	83 f8 01             	cmp    $0x1,%eax
f0124034:	74 17                	je     f012404d <test_kheap_virt_addr+0x37a>
f0124036:	83 ec 04             	sub    $0x4,%esp
f0124039:	68 30 93 13 f0       	push   $0xf0139330
f012403e:	68 ff 08 00 00       	push   $0x8ff
f0124043:	68 ae 92 13 f0       	push   $0xf01392ae
f0124048:	e8 63 c1 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012404d:	e8 8c 89 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124052:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124055:	e8 2a 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012405a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012405d:	83 ec 0c             	sub    $0xc,%esp
f0124060:	68 00 08 00 00       	push   $0x800
f0124065:	e8 f5 3e fe ff       	call   f0107f5f <kmalloc>
f012406a:	83 c4 10             	add    $0x10,%esp
f012406d:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124073:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0124079:	89 c1                	mov    %eax,%ecx
f012407b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124082:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124087:	0f b6 d0             	movzbl %al,%edx
f012408a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012408d:	01 d0                	add    %edx,%eax
f012408f:	48                   	dec    %eax
f0124090:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124093:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124096:	ba 00 00 00 00       	mov    $0x0,%edx
f012409b:	f7 75 84             	divl   -0x7c(%ebp)
f012409e:	8b 45 80             	mov    -0x80(%ebp),%eax
f01240a1:	29 d0                	sub    %edx,%eax
f01240a3:	89 c3                	mov    %eax,%ebx
f01240a5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01240ac:	10 00 00 
f01240af:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01240b4:	0f b6 c0             	movzbl %al,%eax
f01240b7:	c1 e0 04             	shl    $0x4,%eax
f01240ba:	89 c2                	mov    %eax,%edx
f01240bc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01240c2:	01 d0                	add    %edx,%eax
f01240c4:	48                   	dec    %eax
f01240c5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01240cb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01240d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01240d6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01240dc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01240e2:	29 d0                	sub    %edx,%eax
f01240e4:	01 d8                	add    %ebx,%eax
f01240e6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01240eb:	39 c1                	cmp    %eax,%ecx
f01240ed:	74 17                	je     f0124106 <test_kheap_virt_addr+0x433>
f01240ef:	83 ec 04             	sub    $0x4,%esp
f01240f2:	68 94 93 13 f0       	push   $0xf0139394
f01240f7:	68 05 09 00 00       	push   $0x905
f01240fc:	68 ae 92 13 f0       	push   $0xf01392ae
f0124101:	e8 aa c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124106:	e8 79 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012410b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012410e:	74 17                	je     f0124127 <test_kheap_virt_addr+0x454>
f0124110:	83 ec 04             	sub    $0x4,%esp
f0124113:	68 c8 92 13 f0       	push   $0xf01392c8
f0124118:	68 06 09 00 00       	push   $0x906
f012411d:	68 ae 92 13 f0       	push   $0xf01392ae
f0124122:	e8 89 c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124127:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012412a:	e8 af 88 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012412f:	29 c3                	sub    %eax,%ebx
f0124131:	89 d8                	mov    %ebx,%eax
f0124133:	83 f8 01             	cmp    $0x1,%eax
f0124136:	74 17                	je     f012414f <test_kheap_virt_addr+0x47c>
f0124138:	83 ec 04             	sub    $0x4,%esp
f012413b:	68 30 93 13 f0       	push   $0xf0139330
f0124140:	68 07 09 00 00       	push   $0x907
f0124145:	68 ae 92 13 f0       	push   $0xf01392ae
f012414a:	e8 61 c0 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012414f:	e8 8a 88 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124154:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124157:	e8 28 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012415c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012415f:	83 ec 0c             	sub    $0xc,%esp
f0124162:	68 00 1c 00 00       	push   $0x1c00
f0124167:	e8 f3 3d fe ff       	call   f0107f5f <kmalloc>
f012416c:	83 c4 10             	add    $0x10,%esp
f012416f:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124175:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012417b:	89 c1                	mov    %eax,%ecx
f012417d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124184:	10 00 00 
f0124187:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012418c:	0f b6 d0             	movzbl %al,%edx
f012418f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124195:	01 d0                	add    %edx,%eax
f0124197:	48                   	dec    %eax
f0124198:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012419e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01241a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01241a9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01241af:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01241b5:	29 d0                	sub    %edx,%eax
f01241b7:	89 c3                	mov    %eax,%ebx
f01241b9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01241c0:	10 00 00 
f01241c3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01241c8:	0f b6 c0             	movzbl %al,%eax
f01241cb:	c1 e0 04             	shl    $0x4,%eax
f01241ce:	89 c2                	mov    %eax,%edx
f01241d0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01241d6:	01 d0                	add    %edx,%eax
f01241d8:	48                   	dec    %eax
f01241d9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01241df:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01241e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01241ea:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01241f0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01241f6:	29 d0                	sub    %edx,%eax
f01241f8:	01 d8                	add    %ebx,%eax
f01241fa:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01241ff:	39 c1                	cmp    %eax,%ecx
f0124201:	74 17                	je     f012421a <test_kheap_virt_addr+0x547>
f0124203:	83 ec 04             	sub    $0x4,%esp
f0124206:	68 94 93 13 f0       	push   $0xf0139394
f012420b:	68 0d 09 00 00       	push   $0x90d
f0124210:	68 ae 92 13 f0       	push   $0xf01392ae
f0124215:	e8 96 bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012421a:	e8 65 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012421f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124222:	74 17                	je     f012423b <test_kheap_virt_addr+0x568>
f0124224:	83 ec 04             	sub    $0x4,%esp
f0124227:	68 c8 92 13 f0       	push   $0xf01392c8
f012422c:	68 0e 09 00 00       	push   $0x90e
f0124231:	68 ae 92 13 f0       	push   $0xf01392ae
f0124236:	e8 75 bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012423b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012423e:	e8 9b 87 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124243:	29 c3                	sub    %eax,%ebx
f0124245:	89 d8                	mov    %ebx,%eax
f0124247:	83 f8 02             	cmp    $0x2,%eax
f012424a:	74 17                	je     f0124263 <test_kheap_virt_addr+0x590>
f012424c:	83 ec 04             	sub    $0x4,%esp
f012424f:	68 30 93 13 f0       	push   $0xf0139330
f0124254:	68 0f 09 00 00       	push   $0x90f
f0124259:	68 ae 92 13 f0       	push   $0xf01392ae
f012425e:	e8 4d bf fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124263:	e8 76 87 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124268:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012426b:	e8 14 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124270:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124273:	83 ec 0c             	sub    $0xc,%esp
f0124276:	68 00 fc 2f 00       	push   $0x2ffc00
f012427b:	e8 df 3c fe ff       	call   f0107f5f <kmalloc>
f0124280:	83 c4 10             	add    $0x10,%esp
f0124283:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124289:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012428f:	89 c1                	mov    %eax,%ecx
f0124291:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124298:	10 00 00 
f012429b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01242a0:	0f b6 d0             	movzbl %al,%edx
f01242a3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01242a9:	01 d0                	add    %edx,%eax
f01242ab:	48                   	dec    %eax
f01242ac:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01242b2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01242b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01242bd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01242c3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01242c9:	29 d0                	sub    %edx,%eax
f01242cb:	89 c3                	mov    %eax,%ebx
f01242cd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01242d4:	10 00 00 
f01242d7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01242dc:	0f b6 c0             	movzbl %al,%eax
f01242df:	c1 e0 04             	shl    $0x4,%eax
f01242e2:	89 c2                	mov    %eax,%edx
f01242e4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01242ea:	01 d0                	add    %edx,%eax
f01242ec:	48                   	dec    %eax
f01242ed:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01242f3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01242f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01242fe:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124304:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012430a:	29 d0                	sub    %edx,%eax
f012430c:	01 d8                	add    %ebx,%eax
f012430e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124313:	39 c1                	cmp    %eax,%ecx
f0124315:	74 17                	je     f012432e <test_kheap_virt_addr+0x65b>
f0124317:	83 ec 04             	sub    $0x4,%esp
f012431a:	68 94 93 13 f0       	push   $0xf0139394
f012431f:	68 15 09 00 00       	push   $0x915
f0124324:	68 ae 92 13 f0       	push   $0xf01392ae
f0124329:	e8 82 be fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012432e:	e8 51 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124333:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124336:	74 17                	je     f012434f <test_kheap_virt_addr+0x67c>
f0124338:	83 ec 04             	sub    $0x4,%esp
f012433b:	68 c8 92 13 f0       	push   $0xf01392c8
f0124340:	68 16 09 00 00       	push   $0x916
f0124345:	68 ae 92 13 f0       	push   $0xf01392ae
f012434a:	e8 61 be fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012434f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124352:	e8 87 86 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124357:	29 c3                	sub    %eax,%ebx
f0124359:	89 d8                	mov    %ebx,%eax
f012435b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124360:	74 17                	je     f0124379 <test_kheap_virt_addr+0x6a6>
f0124362:	83 ec 04             	sub    $0x4,%esp
f0124365:	68 30 93 13 f0       	push   $0xf0139330
f012436a:	68 17 09 00 00       	push   $0x917
f012436f:	68 ae 92 13 f0       	push   $0xf01392ae
f0124374:	e8 37 be fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124379:	e8 60 86 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012437e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124381:	e8 fe 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124386:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124389:	83 ec 0c             	sub    $0xc,%esp
f012438c:	68 00 fc 5f 00       	push   $0x5ffc00
f0124391:	e8 c9 3b fe ff       	call   f0107f5f <kmalloc>
f0124396:	83 c4 10             	add    $0x10,%esp
f0124399:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012439f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01243a5:	89 c1                	mov    %eax,%ecx
f01243a7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01243ae:	10 00 00 
f01243b1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01243b6:	0f b6 d0             	movzbl %al,%edx
f01243b9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01243bf:	01 d0                	add    %edx,%eax
f01243c1:	48                   	dec    %eax
f01243c2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01243c8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01243ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01243d3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01243d9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01243df:	29 d0                	sub    %edx,%eax
f01243e1:	89 c3                	mov    %eax,%ebx
f01243e3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01243ea:	10 00 00 
f01243ed:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01243f2:	0f b6 c0             	movzbl %al,%eax
f01243f5:	c1 e0 04             	shl    $0x4,%eax
f01243f8:	89 c2                	mov    %eax,%edx
f01243fa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124400:	01 d0                	add    %edx,%eax
f0124402:	48                   	dec    %eax
f0124403:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124409:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012440f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124414:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012441a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124420:	29 d0                	sub    %edx,%eax
f0124422:	01 d8                	add    %ebx,%eax
f0124424:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124429:	39 c1                	cmp    %eax,%ecx
f012442b:	74 17                	je     f0124444 <test_kheap_virt_addr+0x771>
f012442d:	83 ec 04             	sub    $0x4,%esp
f0124430:	68 94 93 13 f0       	push   $0xf0139394
f0124435:	68 1d 09 00 00       	push   $0x91d
f012443a:	68 ae 92 13 f0       	push   $0xf01392ae
f012443f:	e8 6c bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124444:	e8 3b 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124449:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012444c:	74 17                	je     f0124465 <test_kheap_virt_addr+0x792>
f012444e:	83 ec 04             	sub    $0x4,%esp
f0124451:	68 c8 92 13 f0       	push   $0xf01392c8
f0124456:	68 1e 09 00 00       	push   $0x91e
f012445b:	68 ae 92 13 f0       	push   $0xf01392ae
f0124460:	e8 4b bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124465:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124468:	e8 71 85 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012446d:	29 c3                	sub    %eax,%ebx
f012446f:	89 d8                	mov    %ebx,%eax
f0124471:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124476:	74 17                	je     f012448f <test_kheap_virt_addr+0x7bc>
f0124478:	83 ec 04             	sub    $0x4,%esp
f012447b:	68 30 93 13 f0       	push   $0xf0139330
f0124480:	68 1f 09 00 00       	push   $0x91f
f0124485:	68 ae 92 13 f0       	push   $0xf01392ae
f012448a:	e8 21 bd fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012448f:	e8 4a 85 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124494:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124497:	e8 e8 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012449c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012449f:	83 ec 0c             	sub    $0xc,%esp
f01244a2:	68 00 38 00 00       	push   $0x3800
f01244a7:	e8 b3 3a fe ff       	call   f0107f5f <kmalloc>
f01244ac:	83 c4 10             	add    $0x10,%esp
f01244af:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01244b5:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01244bb:	89 c1                	mov    %eax,%ecx
f01244bd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01244c4:	10 00 00 
f01244c7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01244cc:	0f b6 d0             	movzbl %al,%edx
f01244cf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01244d5:	01 d0                	add    %edx,%eax
f01244d7:	48                   	dec    %eax
f01244d8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01244de:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01244e9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01244ef:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244f5:	29 d0                	sub    %edx,%eax
f01244f7:	89 c3                	mov    %eax,%ebx
f01244f9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124500:	10 00 00 
f0124503:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124508:	0f b6 c0             	movzbl %al,%eax
f012450b:	c1 e0 04             	shl    $0x4,%eax
f012450e:	89 c2                	mov    %eax,%edx
f0124510:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124516:	01 d0                	add    %edx,%eax
f0124518:	48                   	dec    %eax
f0124519:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012451f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124525:	ba 00 00 00 00       	mov    $0x0,%edx
f012452a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124530:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124536:	29 d0                	sub    %edx,%eax
f0124538:	01 d8                	add    %ebx,%eax
f012453a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012453f:	39 c1                	cmp    %eax,%ecx
f0124541:	74 17                	je     f012455a <test_kheap_virt_addr+0x887>
f0124543:	83 ec 04             	sub    $0x4,%esp
f0124546:	68 94 93 13 f0       	push   $0xf0139394
f012454b:	68 25 09 00 00       	push   $0x925
f0124550:	68 ae 92 13 f0       	push   $0xf01392ae
f0124555:	e8 56 bc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012455a:	e8 25 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012455f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124562:	74 17                	je     f012457b <test_kheap_virt_addr+0x8a8>
f0124564:	83 ec 04             	sub    $0x4,%esp
f0124567:	68 c8 92 13 f0       	push   $0xf01392c8
f012456c:	68 26 09 00 00       	push   $0x926
f0124571:	68 ae 92 13 f0       	push   $0xf01392ae
f0124576:	e8 35 bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012457b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012457e:	e8 5b 84 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124583:	29 c3                	sub    %eax,%ebx
f0124585:	89 d8                	mov    %ebx,%eax
f0124587:	83 f8 04             	cmp    $0x4,%eax
f012458a:	74 17                	je     f01245a3 <test_kheap_virt_addr+0x8d0>
f012458c:	83 ec 04             	sub    $0x4,%esp
f012458f:	68 30 93 13 f0       	push   $0xf0139330
f0124594:	68 27 09 00 00       	push   $0x927
f0124599:	68 ae 92 13 f0       	push   $0xf01392ae
f012459e:	e8 0d bc fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f01245a3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01245aa:	10 00 00 
f01245ad:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01245b2:	0f b6 d0             	movzbl %al,%edx
f01245b5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01245bb:	01 d0                	add    %edx,%eax
f01245bd:	48                   	dec    %eax
f01245be:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01245c4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01245cf:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01245d5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245db:	29 d0                	sub    %edx,%eax
f01245dd:	89 c1                	mov    %eax,%ecx
f01245df:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01245e6:	10 00 00 
f01245e9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01245ee:	0f b6 c0             	movzbl %al,%eax
f01245f1:	c1 e0 04             	shl    $0x4,%eax
f01245f4:	89 c2                	mov    %eax,%edx
f01245f6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01245fc:	01 d0                	add    %edx,%eax
f01245fe:	48                   	dec    %eax
f01245ff:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124605:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012460b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124610:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124616:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012461c:	29 d0                	sub    %edx,%eax
f012461e:	01 c8                	add    %ecx,%eax
f0124620:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124625:	c1 e8 0c             	shr    $0xc,%eax
f0124628:	89 c2                	mov    %eax,%edx
f012462a:	4a                   	dec    %edx
f012462b:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0124631:	c1 e0 02             	shl    $0x2,%eax
f0124634:	8d 50 03             	lea    0x3(%eax),%edx
f0124637:	b8 10 00 00 00       	mov    $0x10,%eax
f012463c:	48                   	dec    %eax
f012463d:	01 d0                	add    %edx,%eax
f012463f:	bf 10 00 00 00       	mov    $0x10,%edi
f0124644:	ba 00 00 00 00       	mov    $0x0,%edx
f0124649:	f7 f7                	div    %edi
f012464b:	6b c0 10             	imul   $0x10,%eax,%eax
f012464e:	29 c4                	sub    %eax,%esp
f0124650:	89 e0                	mov    %esp,%eax
f0124652:	83 c0 03             	add    $0x3,%eax
f0124655:	c1 e8 02             	shr    $0x2,%eax
f0124658:	c1 e0 02             	shl    $0x2,%eax
f012465b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124661:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124668:	10 00 00 
f012466b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124670:	0f b6 d0             	movzbl %al,%edx
f0124673:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124679:	01 d0                	add    %edx,%eax
f012467b:	48                   	dec    %eax
f012467c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124682:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124688:	ba 00 00 00 00       	mov    $0x0,%edx
f012468d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124693:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124699:	29 d0                	sub    %edx,%eax
f012469b:	89 c1                	mov    %eax,%ecx
f012469d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01246a4:	10 00 00 
f01246a7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01246ac:	0f b6 c0             	movzbl %al,%eax
f01246af:	c1 e0 04             	shl    $0x4,%eax
f01246b2:	89 c2                	mov    %eax,%edx
f01246b4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01246ba:	01 d0                	add    %edx,%eax
f01246bc:	48                   	dec    %eax
f01246bd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01246c3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01246c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01246ce:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01246d4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01246da:	29 d0                	sub    %edx,%eax
f01246dc:	01 c8                	add    %ecx,%eax
f01246de:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01246e3:	c1 e8 0c             	shr    $0xc,%eax
f01246e6:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01246ec:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01246f3:	10 00 00 
f01246f6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01246fb:	0f b6 d0             	movzbl %al,%edx
f01246fe:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124704:	01 d0                	add    %edx,%eax
f0124706:	48                   	dec    %eax
f0124707:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012470d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124713:	ba 00 00 00 00       	mov    $0x0,%edx
f0124718:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012471e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124724:	29 d0                	sub    %edx,%eax
f0124726:	89 c1                	mov    %eax,%ecx
f0124728:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012472f:	10 00 00 
f0124732:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124737:	0f b6 c0             	movzbl %al,%eax
f012473a:	c1 e0 04             	shl    $0x4,%eax
f012473d:	89 c2                	mov    %eax,%edx
f012473f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124745:	01 d0                	add    %edx,%eax
f0124747:	48                   	dec    %eax
f0124748:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012474e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124754:	ba 00 00 00 00       	mov    $0x0,%edx
f0124759:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012475f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124765:	29 d0                	sub    %edx,%eax
f0124767:	01 c8                	add    %ecx,%eax
f0124769:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012476e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0124774:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012477b:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124782:	e9 21 01 00 00       	jmp    f01248a8 <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124787:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012478c:	83 ec 04             	sub    $0x4,%esp
f012478f:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124795:	52                   	push   %edx
f0124796:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124799:	50                   	push   %eax
f012479a:	e8 48 2d fe ff       	call   f01074e7 <get_page_table>
f012479f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01247a2:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01247a8:	85 c0                	test   %eax,%eax
f01247aa:	75 17                	jne    f01247c3 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01247ac:	83 ec 04             	sub    $0x4,%esp
f01247af:	68 50 9c 13 f0       	push   $0xf0139c50
f01247b4:	68 38 09 00 00       	push   $0x938
f01247b9:	68 ae 92 13 f0       	push   $0xf01392ae
f01247be:	e8 ed b9 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01247c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247c6:	c1 e8 0c             	shr    $0xc,%eax
f01247c9:	25 ff 03 00 00       	and    $0x3ff,%eax
f01247ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01247d1:	e9 ba 00 00 00       	jmp    f0124890 <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01247d6:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01247dc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01247df:	c1 e2 02             	shl    $0x2,%edx
f01247e2:	01 d0                	add    %edx,%eax
f01247e4:	8b 00                	mov    (%eax),%eax
f01247e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01247eb:	89 c1                	mov    %eax,%ecx
f01247ed:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247f3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01247f6:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01247f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01247ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124802:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124805:	83 ec 0c             	sub    $0xc,%esp
f0124808:	50                   	push   %eax
f0124809:	e8 85 37 fe ff       	call   f0107f93 <kheap_virtual_address>
f012480e:	83 c4 10             	add    $0x10,%esp
f0124811:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124817:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012481d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124820:	74 61                	je     f0124883 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124822:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124828:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012482b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012482e:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124834:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124837:	c1 e1 02             	shl    $0x2,%ecx
f012483a:	01 ca                	add    %ecx,%edx
f012483c:	8b 12                	mov    (%edx),%edx
f012483e:	89 d1                	mov    %edx,%ecx
f0124840:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124846:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124849:	c1 e2 0c             	shl    $0xc,%edx
f012484c:	89 d3                	mov    %edx,%ebx
f012484e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124851:	01 da                	add    %ebx,%edx
f0124853:	83 ec 0c             	sub    $0xc,%esp
f0124856:	50                   	push   %eax
f0124857:	51                   	push   %ecx
f0124858:	52                   	push   %edx
f0124859:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f012485f:	68 44 9d 13 f0       	push   $0xf0139d44
f0124864:	e8 c8 c5 fd ff       	call   f0100e31 <cprintf>
f0124869:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012486c:	83 ec 04             	sub    $0x4,%esp
f012486f:	68 87 9d 13 f0       	push   $0xf0139d87
f0124874:	68 42 09 00 00       	push   $0x942
f0124879:	68 ae 92 13 f0       	push   $0xf01392ae
f012487e:	e8 2d b9 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124883:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012488a:	ff 45 dc             	incl   -0x24(%ebp)
f012488d:	ff 45 e0             	incl   -0x20(%ebp)
f0124890:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124893:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0124899:	7d 0d                	jge    f01248a8 <test_kheap_virt_addr+0xbd5>
f012489b:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01248a2:	0f 8e 2e ff ff ff    	jle    f01247d6 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01248a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01248ab:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f01248b1:	0f 82 d0 fe ff ff    	jb     f0124787 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01248b7:	83 ec 0c             	sub    $0xc,%esp
f01248ba:	68 a4 9d 13 f0       	push   $0xf0139da4
f01248bf:	e8 6d c5 fd ff       	call   f0100e31 <cprintf>
f01248c4:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01248c7:	e8 12 81 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01248cc:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01248d2:	e8 ad fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01248d7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f01248dd:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01248e3:	83 ec 0c             	sub    $0xc,%esp
f01248e6:	50                   	push   %eax
f01248e7:	e8 8d 36 fe ff       	call   f0107f79 <kfree>
f01248ec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248ef:	e8 90 fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01248f4:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01248fa:	74 17                	je     f0124913 <test_kheap_virt_addr+0xc40>
f01248fc:	83 ec 04             	sub    $0x4,%esp
f01248ff:	68 c8 92 13 f0       	push   $0xf01392c8
f0124904:	68 50 09 00 00       	push   $0x950
f0124909:	68 ae 92 13 f0       	push   $0xf01392ae
f012490e:	e8 9d b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124913:	e8 c6 80 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124918:	89 c2                	mov    %eax,%edx
f012491a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124920:	29 c2                	sub    %eax,%edx
f0124922:	89 d0                	mov    %edx,%eax
f0124924:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124929:	74 17                	je     f0124942 <test_kheap_virt_addr+0xc6f>
f012492b:	83 ec 04             	sub    $0x4,%esp
f012492e:	68 38 9a 13 f0       	push   $0xf0139a38
f0124933:	68 51 09 00 00       	push   $0x951
f0124938:	68 ae 92 13 f0       	push   $0xf01392ae
f012493d:	e8 6e b8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124942:	e8 97 80 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124947:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012494d:	e8 32 fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124952:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0124958:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012495e:	83 ec 0c             	sub    $0xc,%esp
f0124961:	50                   	push   %eax
f0124962:	e8 12 36 fe ff       	call   f0107f79 <kfree>
f0124967:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012496a:	e8 15 fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012496f:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124975:	74 17                	je     f012498e <test_kheap_virt_addr+0xcbb>
f0124977:	83 ec 04             	sub    $0x4,%esp
f012497a:	68 c8 92 13 f0       	push   $0xf01392c8
f012497f:	68 57 09 00 00       	push   $0x957
f0124984:	68 ae 92 13 f0       	push   $0xf01392ae
f0124989:	e8 22 b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012498e:	e8 4b 80 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124993:	89 c2                	mov    %eax,%edx
f0124995:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012499b:	29 c2                	sub    %eax,%edx
f012499d:	89 d0                	mov    %edx,%eax
f012499f:	3d 00 02 00 00       	cmp    $0x200,%eax
f01249a4:	74 17                	je     f01249bd <test_kheap_virt_addr+0xcea>
f01249a6:	83 ec 04             	sub    $0x4,%esp
f01249a9:	68 38 9a 13 f0       	push   $0xf0139a38
f01249ae:	68 58 09 00 00       	push   $0x958
f01249b3:	68 ae 92 13 f0       	push   $0xf01392ae
f01249b8:	e8 f3 b7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01249bd:	e8 1c 80 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01249c2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249c8:	e8 b7 fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01249cd:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f01249d3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01249d9:	83 ec 0c             	sub    $0xc,%esp
f01249dc:	50                   	push   %eax
f01249dd:	e8 97 35 fe ff       	call   f0107f79 <kfree>
f01249e2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01249e5:	e8 9a fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01249ea:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01249f0:	74 17                	je     f0124a09 <test_kheap_virt_addr+0xd36>
f01249f2:	83 ec 04             	sub    $0x4,%esp
f01249f5:	68 c8 92 13 f0       	push   $0xf01392c8
f01249fa:	68 5e 09 00 00       	push   $0x95e
f01249ff:	68 ae 92 13 f0       	push   $0xf01392ae
f0124a04:	e8 a7 b7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124a09:	e8 d0 7f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124a0e:	89 c2                	mov    %eax,%edx
f0124a10:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124a16:	29 c2                	sub    %eax,%edx
f0124a18:	89 d0                	mov    %edx,%eax
f0124a1a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124a1f:	74 17                	je     f0124a38 <test_kheap_virt_addr+0xd65>
f0124a21:	83 ec 04             	sub    $0x4,%esp
f0124a24:	68 38 9a 13 f0       	push   $0xf0139a38
f0124a29:	68 5f 09 00 00       	push   $0x95f
f0124a2e:	68 ae 92 13 f0       	push   $0xf01392ae
f0124a33:	e8 78 b7 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124a38:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124a3f:	10 00 00 
f0124a42:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124a47:	0f b6 d0             	movzbl %al,%edx
f0124a4a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124a50:	01 d0                	add    %edx,%eax
f0124a52:	48                   	dec    %eax
f0124a53:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124a59:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a64:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124a6a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a70:	29 d0                	sub    %edx,%eax
f0124a72:	89 c1                	mov    %eax,%ecx
f0124a74:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124a7b:	10 00 00 
f0124a7e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124a83:	0f b6 c0             	movzbl %al,%eax
f0124a86:	c1 e0 04             	shl    $0x4,%eax
f0124a89:	89 c2                	mov    %eax,%edx
f0124a8b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124a91:	01 d0                	add    %edx,%eax
f0124a93:	48                   	dec    %eax
f0124a94:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124a9a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124aa0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aa5:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124aab:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124ab1:	29 d0                	sub    %edx,%eax
f0124ab3:	01 c8                	add    %ecx,%eax
f0124ab5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124aba:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124ac0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124ac7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124ace:	10 00 00 
f0124ad1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124ad6:	0f b6 d0             	movzbl %al,%edx
f0124ad9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124adf:	01 d0                	add    %edx,%eax
f0124ae1:	48                   	dec    %eax
f0124ae2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124ae8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124aee:	ba 00 00 00 00       	mov    $0x0,%edx
f0124af3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124af9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124aff:	29 d0                	sub    %edx,%eax
f0124b01:	89 c1                	mov    %eax,%ecx
f0124b03:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124b0a:	10 00 00 
f0124b0d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124b12:	0f b6 c0             	movzbl %al,%eax
f0124b15:	c1 e0 04             	shl    $0x4,%eax
f0124b18:	89 c2                	mov    %eax,%edx
f0124b1a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124b20:	01 d0                	add    %edx,%eax
f0124b22:	48                   	dec    %eax
f0124b23:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124b29:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124b2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b34:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124b3a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124b40:	29 d0                	sub    %edx,%eax
f0124b42:	01 c8                	add    %ecx,%eax
f0124b44:	05 00 40 00 00       	add    $0x4000,%eax
f0124b49:	c1 e8 0c             	shr    $0xc,%eax
f0124b4c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124b52:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b58:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124b5b:	eb 41                	jmp    f0124b9e <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124b5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124b63:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124b66:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b69:	83 ec 0c             	sub    $0xc,%esp
f0124b6c:	50                   	push   %eax
f0124b6d:	e8 21 34 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124b72:	83 c4 10             	add    $0x10,%esp
f0124b75:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0124b7b:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124b82:	74 17                	je     f0124b9b <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124b84:	83 ec 04             	sub    $0x4,%esp
f0124b87:	68 87 9d 13 f0       	push   $0xf0139d87
f0124b8c:	68 70 09 00 00       	push   $0x970
f0124b91:	68 ae 92 13 f0       	push   $0xf01392ae
f0124b96:	e8 15 b6 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124b9b:	ff 45 d8             	incl   -0x28(%ebp)
f0124b9e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124ba4:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0124baa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124bad:	39 c2                	cmp    %eax,%edx
f0124baf:	77 ac                	ja     f0124b5d <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124bb1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124bb7:	05 00 04 00 00       	add    $0x400,%eax
f0124bbc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124bbf:	eb 4b                	jmp    f0124c0c <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124bc1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124bc7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124bca:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124bcd:	83 ec 0c             	sub    $0xc,%esp
f0124bd0:	50                   	push   %eax
f0124bd1:	e8 bd 33 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124bd6:	83 c4 10             	add    $0x10,%esp
f0124bd9:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124bdf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124be2:	c1 e0 0c             	shl    $0xc,%eax
f0124be5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124bea:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124bf0:	74 17                	je     f0124c09 <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124bf2:	83 ec 04             	sub    $0x4,%esp
f0124bf5:	68 87 9d 13 f0       	push   $0xf0139d87
f0124bfa:	68 7a 09 00 00       	push   $0x97a
f0124bff:	68 ae 92 13 f0       	push   $0xf01392ae
f0124c04:	e8 a7 b5 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c09:	ff 45 d8             	incl   -0x28(%ebp)
f0124c0c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c12:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124c18:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c1b:	39 c2                	cmp    %eax,%edx
f0124c1d:	77 a2                	ja     f0124bc1 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c1f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c25:	05 04 07 00 00       	add    $0x704,%eax
f0124c2a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124c2d:	eb 41                	jmp    f0124c70 <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124c2f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c35:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124c38:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c3b:	83 ec 0c             	sub    $0xc,%esp
f0124c3e:	50                   	push   %eax
f0124c3f:	e8 4f 33 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124c44:	83 c4 10             	add    $0x10,%esp
f0124c47:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124c4d:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124c54:	74 17                	je     f0124c6d <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f0124c56:	83 ec 04             	sub    $0x4,%esp
f0124c59:	68 87 9d 13 f0       	push   $0xf0139d87
f0124c5e:	68 83 09 00 00       	push   $0x983
f0124c63:	68 ae 92 13 f0       	push   $0xf01392ae
f0124c68:	e8 43 b5 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c6d:	ff 45 d8             	incl   -0x28(%ebp)
f0124c70:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c76:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0124c7c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c7f:	39 c2                	cmp    %eax,%edx
f0124c81:	77 ac                	ja     f0124c2f <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124c83:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c89:	05 04 0d 00 00       	add    $0xd04,%eax
f0124c8e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124c91:	eb 4b                	jmp    f0124cde <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124c93:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c99:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124c9c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c9f:	83 ec 0c             	sub    $0xc,%esp
f0124ca2:	50                   	push   %eax
f0124ca3:	e8 eb 32 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124ca8:	83 c4 10             	add    $0x10,%esp
f0124cab:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124cb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124cb4:	c1 e0 0c             	shl    $0xc,%eax
f0124cb7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124cbc:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124cc2:	74 17                	je     f0124cdb <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124cc4:	83 ec 04             	sub    $0x4,%esp
f0124cc7:	68 87 9d 13 f0       	push   $0xf0139d87
f0124ccc:	68 8c 09 00 00       	push   $0x98c
f0124cd1:	68 ae 92 13 f0       	push   $0xf01392ae
f0124cd6:	e8 d5 b4 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124cdb:	ff 45 d8             	incl   -0x28(%ebp)
f0124cde:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124ce4:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0124cea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124ced:	39 c2                	cmp    %eax,%edx
f0124cef:	77 a2                	ja     f0124c93 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124cf1:	83 ec 0c             	sub    $0xc,%esp
f0124cf4:	68 39 94 13 f0       	push   $0xf0139439
f0124cf9:	e8 33 c1 fd ff       	call   f0100e31 <cprintf>
f0124cfe:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124d01:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124d08:	eb 54                	jmp    f0124d5e <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0124d0a:	83 ec 0c             	sub    $0xc,%esp
f0124d0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124d10:	e8 7e 32 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124d15:	83 c4 10             	add    $0x10,%esp
f0124d18:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124d1e:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124d25:	74 30                	je     f0124d57 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0124d27:	83 ec 04             	sub    $0x4,%esp
f0124d2a:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124d30:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124d33:	68 d5 9d 13 f0       	push   $0xf0139dd5
f0124d38:	e8 f4 c0 fd ff       	call   f0100e31 <cprintf>
f0124d3d:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124d40:	83 ec 04             	sub    $0x4,%esp
f0124d43:	68 87 9d 13 f0       	push   $0xf0139d87
f0124d48:	68 9c 09 00 00       	push   $0x99c
f0124d4d:	68 ae 92 13 f0       	push   $0xf01392ae
f0124d52:	e8 59 b4 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124d57:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124d5e:	b8 5c e6 2d 00       	mov    $0x2de65c,%eax
f0124d63:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0124d66:	72 a2                	jb     f0124d0a <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124d68:	83 ec 0c             	sub    $0xc,%esp
f0124d6b:	68 92 94 13 f0       	push   $0xf0139492
f0124d70:	e8 bc c0 fd ff       	call   f0100e31 <cprintf>
f0124d75:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0124d78:	83 ec 0c             	sub    $0xc,%esp
f0124d7b:	68 f4 9d 13 f0       	push   $0xf0139df4
f0124d80:	e8 ac c0 fd ff       	call   f0100e31 <cprintf>
f0124d85:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124d88:	b8 01 00 00 00       	mov    $0x1,%eax
f0124d8d:	89 f4                	mov    %esi,%esp

}
f0124d8f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124d92:	5b                   	pop    %ebx
f0124d93:	5e                   	pop    %esi
f0124d94:	5f                   	pop    %edi
f0124d95:	5d                   	pop    %ebp
f0124d96:	c3                   	ret    

f0124d97 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0124d97:	55                   	push   %ebp
f0124d98:	89 e5                	mov    %esp,%ebp
f0124d9a:	57                   	push   %edi
f0124d9b:	56                   	push   %esi
f0124d9c:	53                   	push   %ebx
f0124d9d:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0124da3:	a0 3d cb 18 f0       	mov    0xf018cb3d,%al
f0124da8:	84 c0                	test   %al,%al
f0124daa:	74 56                	je     f0124e02 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0124dac:	c6 05 3d cb 18 f0 00 	movb   $0x0,0xf018cb3d
		initFreeFrames = sys_calculate_free_frames() ;
f0124db3:	e8 26 7c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124db8:	a3 48 e6 2d f0       	mov    %eax,0xf02de648
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0124dbd:	e8 c2 f8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124dc2:	a3 44 e6 2d f0       	mov    %eax,0xf02de644
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0124dc7:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124dcd:	bb 51 9f 13 f0       	mov    $0xf0139f51,%ebx
f0124dd2:	ba 11 00 00 00       	mov    $0x11,%edx
f0124dd7:	89 c7                	mov    %eax,%edi
f0124dd9:	89 de                	mov    %ebx,%esi
f0124ddb:	89 d1                	mov    %edx,%ecx
f0124ddd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124ddf:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124de5:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124dea:	b0 00                	mov    $0x0,%al
f0124dec:	89 d7                	mov    %edx,%edi
f0124dee:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124df0:	83 ec 0c             	sub    $0xc,%esp
f0124df3:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124df9:	50                   	push   %eax
f0124dfa:	e8 c4 cd fd ff       	call   f0101bc3 <execute_command>
f0124dff:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124e02:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124e09:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124e10:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f0124e15:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e18:	eb 2b                	jmp    f0124e45 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0124e1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e1d:	83 c0 5c             	add    $0x5c,%eax
f0124e20:	83 ec 08             	sub    $0x8,%esp
f0124e23:	68 3b 9e 13 f0       	push   $0xf0139e3b
f0124e28:	50                   	push   %eax
f0124e29:	e8 ec a0 00 00       	call   f012ef1a <strcmp>
f0124e2e:	83 c4 10             	add    $0x10,%esp
f0124e31:	85 c0                	test   %eax,%eax
f0124e33:	75 08                	jne    f0124e3d <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0124e35:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e38:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0124e3b:	eb 2f                	jmp    f0124e6c <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124e3d:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0124e42:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e45:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e49:	74 08                	je     f0124e53 <test_three_creation_functions+0xbc>
f0124e4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e4e:	8b 40 44             	mov    0x44(%eax),%eax
f0124e51:	eb 05                	jmp    f0124e58 <test_three_creation_functions+0xc1>
f0124e53:	b8 00 00 00 00       	mov    $0x0,%eax
f0124e58:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f0124e5d:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f0124e62:	85 c0                	test   %eax,%eax
f0124e64:	75 b4                	jne    f0124e1a <test_three_creation_functions+0x83>
f0124e66:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e6a:	75 ae                	jne    f0124e1a <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0124e6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e6f:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0124e75:	85 c0                	test   %eax,%eax
f0124e77:	74 17                	je     f0124e90 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0124e79:	83 ec 04             	sub    $0x4,%esp
f0124e7c:	68 44 9e 13 f0       	push   $0xf0139e44
f0124e81:	68 c6 09 00 00       	push   $0x9c6
f0124e86:	68 ae 92 13 f0       	push   $0xf01392ae
f0124e8b:	e8 20 b3 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0124e90:	83 ec 0c             	sub    $0xc,%esp
f0124e93:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124e96:	e8 ba 33 fe ff       	call   f0108255 <env_page_ws_get_size>
f0124e9b:	83 c4 10             	add    $0x10,%esp
f0124e9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0124ea1:	e8 38 7b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124ea6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0124ea9:	e8 d6 f7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124eae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124eb1:	a1 44 e6 2d f0       	mov    0xf02de644,%eax
f0124eb6:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0124eb9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0124ebc:	74 17                	je     f0124ed5 <test_three_creation_functions+0x13e>
f0124ebe:	83 ec 04             	sub    $0x4,%esp
f0124ec1:	68 c8 92 13 f0       	push   $0xf01392c8
f0124ec6:	68 cc 09 00 00       	push   $0x9cc
f0124ecb:	68 ae 92 13 f0       	push   $0xf01392ae
f0124ed0:	e8 db b2 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ed5:	a1 48 e6 2d f0       	mov    0xf02de648,%eax
f0124eda:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0124edd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ee0:	83 c2 15             	add    $0x15,%edx
f0124ee3:	39 d0                	cmp    %edx,%eax
f0124ee5:	74 17                	je     f0124efe <test_three_creation_functions+0x167>
f0124ee7:	83 ec 04             	sub    $0x4,%esp
f0124eea:	68 30 93 13 f0       	push   $0xf0139330
f0124eef:	68 ce 09 00 00       	push   $0x9ce
f0124ef4:	68 ae 92 13 f0       	push   $0xf01392ae
f0124ef9:	e8 b2 b2 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0124efe:	83 ec 0c             	sub    $0xc,%esp
f0124f01:	68 00 10 00 00       	push   $0x1000
f0124f06:	e8 54 30 fe ff       	call   f0107f5f <kmalloc>
f0124f0b:	83 c4 10             	add    $0x10,%esp
f0124f0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0124f11:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0124f18:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124f1d:	0f b6 d0             	movzbl %al,%edx
f0124f20:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0124f23:	01 d0                	add    %edx,%eax
f0124f25:	48                   	dec    %eax
f0124f26:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0124f29:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124f2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f31:	f7 75 cc             	divl   -0x34(%ebp)
f0124f34:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124f37:	29 d0                	sub    %edx,%eax
f0124f39:	89 c1                	mov    %eax,%ecx
f0124f3b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0124f42:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0124f47:	0f b6 c0             	movzbl %al,%eax
f0124f4a:	c1 e0 04             	shl    $0x4,%eax
f0124f4d:	89 c2                	mov    %eax,%edx
f0124f4f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124f52:	01 d0                	add    %edx,%eax
f0124f54:	48                   	dec    %eax
f0124f55:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124f58:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f60:	f7 75 c4             	divl   -0x3c(%ebp)
f0124f63:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f66:	29 d0                	sub    %edx,%eax
f0124f68:	01 c8                	add    %ecx,%eax
f0124f6a:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0124f70:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124f73:	39 c2                	cmp    %eax,%edx
f0124f75:	74 17                	je     f0124f8e <test_three_creation_functions+0x1f7>
f0124f77:	83 ec 04             	sub    $0x4,%esp
f0124f7a:	68 94 9e 13 f0       	push   $0xf0139e94
f0124f7f:	68 d2 09 00 00       	push   $0x9d2
f0124f84:	68 ae 92 13 f0       	push   $0xf01392ae
f0124f89:	e8 22 b2 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0124f8e:	83 ec 0c             	sub    $0xc,%esp
f0124f91:	68 04 9f 13 f0       	push   $0xf0139f04
f0124f96:	e8 96 be fd ff       	call   f0100e31 <cprintf>
f0124f9b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124f9e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0124fa3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124fa6:	5b                   	pop    %ebx
f0124fa7:	5e                   	pop    %esi
f0124fa8:	5f                   	pop    %edi
f0124fa9:	5d                   	pop    %ebp
f0124faa:	c3                   	ret    

f0124fab <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0124fab:	55                   	push   %ebp
f0124fac:	89 e5                	mov    %esp,%ebp
f0124fae:	57                   	push   %edi
f0124faf:	53                   	push   %ebx
f0124fb0:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0124fb6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0124fba:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0124fbe:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0124fc4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0124fca:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124fd1:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124fd8:	e8 01 7a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0124fdd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124fe0:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0124fe6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124feb:	b8 00 00 00 00       	mov    $0x0,%eax
f0124ff0:	89 d7                	mov    %edx,%edi
f0124ff2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124ff4:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0124ffa:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124fff:	b8 00 00 00 00       	mov    $0x0,%eax
f0125004:	89 d7                	mov    %edx,%edi
f0125006:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125008:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f012500e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125013:	b8 00 00 00 00       	mov    $0x0,%eax
f0125018:	89 d7                	mov    %edx,%edi
f012501a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012501c:	e8 bd 79 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125021:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125024:	e8 5b f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125029:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012502c:	83 ec 0c             	sub    $0xc,%esp
f012502f:	68 00 fc 1f 00       	push   $0x1ffc00
f0125034:	e8 26 2f fe ff       	call   f0107f5f <kmalloc>
f0125039:	83 c4 10             	add    $0x10,%esp
f012503c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125042:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125048:	89 c1                	mov    %eax,%ecx
f012504a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125051:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125056:	0f b6 d0             	movzbl %al,%edx
f0125059:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012505c:	01 d0                	add    %edx,%eax
f012505e:	48                   	dec    %eax
f012505f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125062:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125065:	ba 00 00 00 00       	mov    $0x0,%edx
f012506a:	f7 75 c8             	divl   -0x38(%ebp)
f012506d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125070:	29 d0                	sub    %edx,%eax
f0125072:	89 c3                	mov    %eax,%ebx
f0125074:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012507b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125080:	0f b6 c0             	movzbl %al,%eax
f0125083:	c1 e0 04             	shl    $0x4,%eax
f0125086:	89 c2                	mov    %eax,%edx
f0125088:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012508b:	01 d0                	add    %edx,%eax
f012508d:	48                   	dec    %eax
f012508e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125091:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125094:	ba 00 00 00 00       	mov    $0x0,%edx
f0125099:	f7 75 c0             	divl   -0x40(%ebp)
f012509c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012509f:	29 d0                	sub    %edx,%eax
f01250a1:	01 d8                	add    %ebx,%eax
f01250a3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01250a8:	39 c1                	cmp    %eax,%ecx
f01250aa:	74 17                	je     f01250c3 <test_kfreeall+0x118>
f01250ac:	83 ec 04             	sub    $0x4,%esp
f01250af:	68 94 93 13 f0       	push   $0xf0139394
f01250b4:	68 f9 09 00 00       	push   $0x9f9
f01250b9:	68 ae 92 13 f0       	push   $0xf01392ae
f01250be:	e8 ed b0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250c3:	e8 bc f5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01250c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01250cb:	74 17                	je     f01250e4 <test_kfreeall+0x139>
f01250cd:	83 ec 04             	sub    $0x4,%esp
f01250d0:	68 c8 92 13 f0       	push   $0xf01392c8
f01250d5:	68 fa 09 00 00       	push   $0x9fa
f01250da:	68 ae 92 13 f0       	push   $0xf01392ae
f01250df:	e8 cc b0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01250e4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01250e7:	e8 f2 78 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01250ec:	29 c3                	sub    %eax,%ebx
f01250ee:	89 d8                	mov    %ebx,%eax
f01250f0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01250f5:	74 17                	je     f012510e <test_kfreeall+0x163>
f01250f7:	83 ec 04             	sub    $0x4,%esp
f01250fa:	68 30 93 13 f0       	push   $0xf0139330
f01250ff:	68 fb 09 00 00       	push   $0x9fb
f0125104:	68 ae 92 13 f0       	push   $0xf01392ae
f0125109:	e8 a2 b0 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012510e:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0125115:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125118:	e8 c1 78 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012511d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125120:	e8 5f f5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125125:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125128:	83 ec 0c             	sub    $0xc,%esp
f012512b:	68 00 fc 1f 00       	push   $0x1ffc00
f0125130:	e8 2a 2e fe ff       	call   f0107f5f <kmalloc>
f0125135:	83 c4 10             	add    $0x10,%esp
f0125138:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012513e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125144:	89 c1                	mov    %eax,%ecx
f0125146:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012514d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125152:	0f b6 d0             	movzbl %al,%edx
f0125155:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125158:	01 d0                	add    %edx,%eax
f012515a:	48                   	dec    %eax
f012515b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012515e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125161:	ba 00 00 00 00       	mov    $0x0,%edx
f0125166:	f7 75 b8             	divl   -0x48(%ebp)
f0125169:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012516c:	29 d0                	sub    %edx,%eax
f012516e:	89 c3                	mov    %eax,%ebx
f0125170:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125177:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012517c:	0f b6 c0             	movzbl %al,%eax
f012517f:	c1 e0 04             	shl    $0x4,%eax
f0125182:	89 c2                	mov    %eax,%edx
f0125184:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125187:	01 d0                	add    %edx,%eax
f0125189:	48                   	dec    %eax
f012518a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012518d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125190:	ba 00 00 00 00       	mov    $0x0,%edx
f0125195:	f7 75 b0             	divl   -0x50(%ebp)
f0125198:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012519b:	29 d0                	sub    %edx,%eax
f012519d:	01 d8                	add    %ebx,%eax
f012519f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01251a4:	39 c1                	cmp    %eax,%ecx
f01251a6:	74 17                	je     f01251bf <test_kfreeall+0x214>
f01251a8:	83 ec 04             	sub    $0x4,%esp
f01251ab:	68 94 93 13 f0       	push   $0xf0139394
f01251b0:	68 02 0a 00 00       	push   $0xa02
f01251b5:	68 ae 92 13 f0       	push   $0xf01392ae
f01251ba:	e8 f1 af fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01251bf:	e8 c0 f4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01251c4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01251c7:	74 17                	je     f01251e0 <test_kfreeall+0x235>
f01251c9:	83 ec 04             	sub    $0x4,%esp
f01251cc:	68 c8 92 13 f0       	push   $0xf01392c8
f01251d1:	68 03 0a 00 00       	push   $0xa03
f01251d6:	68 ae 92 13 f0       	push   $0xf01392ae
f01251db:	e8 d0 af fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01251e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01251e3:	e8 f6 77 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01251e8:	29 c3                	sub    %eax,%ebx
f01251ea:	89 d8                	mov    %ebx,%eax
f01251ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f01251f1:	74 17                	je     f012520a <test_kfreeall+0x25f>
f01251f3:	83 ec 04             	sub    $0x4,%esp
f01251f6:	68 30 93 13 f0       	push   $0xf0139330
f01251fb:	68 04 0a 00 00       	push   $0xa04
f0125200:	68 ae 92 13 f0       	push   $0xf01392ae
f0125205:	e8 a6 af fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012520a:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0125211:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125214:	e8 c5 77 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125219:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012521c:	e8 63 f4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125221:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125224:	83 ec 0c             	sub    $0xc,%esp
f0125227:	68 00 08 00 00       	push   $0x800
f012522c:	e8 2e 2d fe ff       	call   f0107f5f <kmalloc>
f0125231:	83 c4 10             	add    $0x10,%esp
f0125234:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012523a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125240:	89 c1                	mov    %eax,%ecx
f0125242:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0125249:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012524e:	0f b6 d0             	movzbl %al,%edx
f0125251:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125254:	01 d0                	add    %edx,%eax
f0125256:	48                   	dec    %eax
f0125257:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012525a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012525d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125262:	f7 75 a8             	divl   -0x58(%ebp)
f0125265:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125268:	29 d0                	sub    %edx,%eax
f012526a:	89 c3                	mov    %eax,%ebx
f012526c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125273:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125278:	0f b6 c0             	movzbl %al,%eax
f012527b:	c1 e0 04             	shl    $0x4,%eax
f012527e:	89 c2                	mov    %eax,%edx
f0125280:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125283:	01 d0                	add    %edx,%eax
f0125285:	48                   	dec    %eax
f0125286:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125289:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012528c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125291:	f7 75 a0             	divl   -0x60(%ebp)
f0125294:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125297:	29 d0                	sub    %edx,%eax
f0125299:	01 d8                	add    %ebx,%eax
f012529b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01252a0:	39 c1                	cmp    %eax,%ecx
f01252a2:	74 17                	je     f01252bb <test_kfreeall+0x310>
f01252a4:	83 ec 04             	sub    $0x4,%esp
f01252a7:	68 94 93 13 f0       	push   $0xf0139394
f01252ac:	68 0b 0a 00 00       	push   $0xa0b
f01252b1:	68 ae 92 13 f0       	push   $0xf01392ae
f01252b6:	e8 f5 ae fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01252bb:	e8 c4 f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01252c0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01252c3:	74 17                	je     f01252dc <test_kfreeall+0x331>
f01252c5:	83 ec 04             	sub    $0x4,%esp
f01252c8:	68 c8 92 13 f0       	push   $0xf01392c8
f01252cd:	68 0c 0a 00 00       	push   $0xa0c
f01252d2:	68 ae 92 13 f0       	push   $0xf01392ae
f01252d7:	e8 d4 ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01252dc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01252df:	e8 fa 76 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01252e4:	29 c3                	sub    %eax,%ebx
f01252e6:	89 d8                	mov    %ebx,%eax
f01252e8:	83 f8 01             	cmp    $0x1,%eax
f01252eb:	74 17                	je     f0125304 <test_kfreeall+0x359>
f01252ed:	83 ec 04             	sub    $0x4,%esp
f01252f0:	68 30 93 13 f0       	push   $0xf0139330
f01252f5:	68 0d 0a 00 00       	push   $0xa0d
f01252fa:	68 ae 92 13 f0       	push   $0xf01392ae
f01252ff:	e8 ac ae fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0125304:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012530b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012530e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125314:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125317:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012531e:	eb 0e                	jmp    f012532e <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f0125320:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125323:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125326:	01 d0                	add    %edx,%eax
f0125328:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012532b:	ff 45 f4             	incl   -0xc(%ebp)
f012532e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125334:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125337:	7f e7                	jg     f0125320 <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125339:	e8 a0 76 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012533e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125341:	e8 3e f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125346:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125349:	83 ec 0c             	sub    $0xc,%esp
f012534c:	68 00 08 00 00       	push   $0x800
f0125351:	e8 09 2c fe ff       	call   f0107f5f <kmalloc>
f0125356:	83 c4 10             	add    $0x10,%esp
f0125359:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012535f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125365:	89 c1                	mov    %eax,%ecx
f0125367:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012536e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125373:	0f b6 d0             	movzbl %al,%edx
f0125376:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125379:	01 d0                	add    %edx,%eax
f012537b:	48                   	dec    %eax
f012537c:	89 45 90             	mov    %eax,-0x70(%ebp)
f012537f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125382:	ba 00 00 00 00       	mov    $0x0,%edx
f0125387:	f7 75 94             	divl   -0x6c(%ebp)
f012538a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012538d:	29 d0                	sub    %edx,%eax
f012538f:	89 c3                	mov    %eax,%ebx
f0125391:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125398:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012539d:	0f b6 c0             	movzbl %al,%eax
f01253a0:	c1 e0 04             	shl    $0x4,%eax
f01253a3:	89 c2                	mov    %eax,%edx
f01253a5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01253a8:	01 d0                	add    %edx,%eax
f01253aa:	48                   	dec    %eax
f01253ab:	89 45 88             	mov    %eax,-0x78(%ebp)
f01253ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f01253b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01253b6:	f7 75 8c             	divl   -0x74(%ebp)
f01253b9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01253bc:	29 d0                	sub    %edx,%eax
f01253be:	01 d8                	add    %ebx,%eax
f01253c0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01253c5:	39 c1                	cmp    %eax,%ecx
f01253c7:	74 17                	je     f01253e0 <test_kfreeall+0x435>
f01253c9:	83 ec 04             	sub    $0x4,%esp
f01253cc:	68 94 93 13 f0       	push   $0xf0139394
f01253d1:	68 19 0a 00 00       	push   $0xa19
f01253d6:	68 ae 92 13 f0       	push   $0xf01392ae
f01253db:	e8 d0 ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01253e0:	e8 9f f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01253e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01253e8:	74 17                	je     f0125401 <test_kfreeall+0x456>
f01253ea:	83 ec 04             	sub    $0x4,%esp
f01253ed:	68 c8 92 13 f0       	push   $0xf01392c8
f01253f2:	68 1a 0a 00 00       	push   $0xa1a
f01253f7:	68 ae 92 13 f0       	push   $0xf01392ae
f01253fc:	e8 af ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125401:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125404:	e8 d5 75 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125409:	29 c3                	sub    %eax,%ebx
f012540b:	89 d8                	mov    %ebx,%eax
f012540d:	83 f8 01             	cmp    $0x1,%eax
f0125410:	74 17                	je     f0125429 <test_kfreeall+0x47e>
f0125412:	83 ec 04             	sub    $0x4,%esp
f0125415:	68 30 93 13 f0       	push   $0xf0139330
f012541a:	68 1b 0a 00 00       	push   $0xa1b
f012541f:	68 ae 92 13 f0       	push   $0xf01392ae
f0125424:	e8 87 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125429:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0125430:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125433:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125439:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012543c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125443:	eb 0e                	jmp    f0125453 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f0125445:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125448:	8b 45 98             	mov    -0x68(%ebp),%eax
f012544b:	01 d0                	add    %edx,%eax
f012544d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125450:	ff 45 f4             	incl   -0xc(%ebp)
f0125453:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125459:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012545c:	7f e7                	jg     f0125445 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012545e:	e8 7b 75 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125463:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125466:	e8 19 f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012546b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012546e:	83 ec 0c             	sub    $0xc,%esp
f0125471:	68 00 1c 00 00       	push   $0x1c00
f0125476:	e8 e4 2a fe ff       	call   f0107f5f <kmalloc>
f012547b:	83 c4 10             	add    $0x10,%esp
f012547e:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125484:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012548a:	89 c1                	mov    %eax,%ecx
f012548c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125493:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125498:	0f b6 d0             	movzbl %al,%edx
f012549b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012549e:	01 d0                	add    %edx,%eax
f01254a0:	48                   	dec    %eax
f01254a1:	89 45 80             	mov    %eax,-0x80(%ebp)
f01254a4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01254ac:	f7 75 84             	divl   -0x7c(%ebp)
f01254af:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254b2:	29 d0                	sub    %edx,%eax
f01254b4:	89 c3                	mov    %eax,%ebx
f01254b6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01254bd:	10 00 00 
f01254c0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01254c5:	0f b6 c0             	movzbl %al,%eax
f01254c8:	c1 e0 04             	shl    $0x4,%eax
f01254cb:	89 c2                	mov    %eax,%edx
f01254cd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01254d3:	01 d0                	add    %edx,%eax
f01254d5:	48                   	dec    %eax
f01254d6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01254dc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01254e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01254e7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01254ed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01254f3:	29 d0                	sub    %edx,%eax
f01254f5:	01 d8                	add    %ebx,%eax
f01254f7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01254fc:	39 c1                	cmp    %eax,%ecx
f01254fe:	74 17                	je     f0125517 <test_kfreeall+0x56c>
f0125500:	83 ec 04             	sub    $0x4,%esp
f0125503:	68 94 93 13 f0       	push   $0xf0139394
f0125508:	68 27 0a 00 00       	push   $0xa27
f012550d:	68 ae 92 13 f0       	push   $0xf01392ae
f0125512:	e8 99 ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125517:	e8 68 f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012551c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012551f:	74 17                	je     f0125538 <test_kfreeall+0x58d>
f0125521:	83 ec 04             	sub    $0x4,%esp
f0125524:	68 c8 92 13 f0       	push   $0xf01392c8
f0125529:	68 28 0a 00 00       	push   $0xa28
f012552e:	68 ae 92 13 f0       	push   $0xf01392ae
f0125533:	e8 78 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125538:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012553b:	e8 9e 74 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125540:	29 c3                	sub    %eax,%ebx
f0125542:	89 d8                	mov    %ebx,%eax
f0125544:	83 f8 02             	cmp    $0x2,%eax
f0125547:	74 17                	je     f0125560 <test_kfreeall+0x5b5>
f0125549:	83 ec 04             	sub    $0x4,%esp
f012554c:	68 30 93 13 f0       	push   $0xf0139330
f0125551:	68 29 0a 00 00       	push   $0xa29
f0125556:	68 ae 92 13 f0       	push   $0xf01392ae
f012555b:	e8 50 ac fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125560:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0125567:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012556a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125570:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125573:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012557a:	eb 0e                	jmp    f012558a <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f012557c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012557f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125582:	01 d0                	add    %edx,%eax
f0125584:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125587:	ff 45 f4             	incl   -0xc(%ebp)
f012558a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125590:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125593:	7f e7                	jg     f012557c <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125595:	e8 44 74 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012559a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012559d:	e8 e2 f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01255a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01255a5:	83 ec 0c             	sub    $0xc,%esp
f01255a8:	68 00 fc 2f 00       	push   $0x2ffc00
f01255ad:	e8 ad 29 fe ff       	call   f0107f5f <kmalloc>
f01255b2:	83 c4 10             	add    $0x10,%esp
f01255b5:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255bb:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01255c1:	89 c1                	mov    %eax,%ecx
f01255c3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01255ca:	10 00 00 
f01255cd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01255d2:	0f b6 d0             	movzbl %al,%edx
f01255d5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01255db:	01 d0                	add    %edx,%eax
f01255dd:	48                   	dec    %eax
f01255de:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01255e4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01255ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ef:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01255f5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01255fb:	29 d0                	sub    %edx,%eax
f01255fd:	89 c3                	mov    %eax,%ebx
f01255ff:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125606:	10 00 00 
f0125609:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012560e:	0f b6 c0             	movzbl %al,%eax
f0125611:	c1 e0 04             	shl    $0x4,%eax
f0125614:	89 c2                	mov    %eax,%edx
f0125616:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012561c:	01 d0                	add    %edx,%eax
f012561e:	48                   	dec    %eax
f012561f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125625:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012562b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125630:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125636:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012563c:	29 d0                	sub    %edx,%eax
f012563e:	01 d8                	add    %ebx,%eax
f0125640:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125645:	39 c1                	cmp    %eax,%ecx
f0125647:	74 17                	je     f0125660 <test_kfreeall+0x6b5>
f0125649:	83 ec 04             	sub    $0x4,%esp
f012564c:	68 94 93 13 f0       	push   $0xf0139394
f0125651:	68 35 0a 00 00       	push   $0xa35
f0125656:	68 ae 92 13 f0       	push   $0xf01392ae
f012565b:	e8 50 ab fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125660:	e8 1f f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125665:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125668:	74 17                	je     f0125681 <test_kfreeall+0x6d6>
f012566a:	83 ec 04             	sub    $0x4,%esp
f012566d:	68 c8 92 13 f0       	push   $0xf01392c8
f0125672:	68 36 0a 00 00       	push   $0xa36
f0125677:	68 ae 92 13 f0       	push   $0xf01392ae
f012567c:	e8 2f ab fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125681:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125684:	e8 55 73 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125689:	29 c3                	sub    %eax,%ebx
f012568b:	89 d8                	mov    %ebx,%eax
f012568d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125692:	74 17                	je     f01256ab <test_kfreeall+0x700>
f0125694:	83 ec 04             	sub    $0x4,%esp
f0125697:	68 30 93 13 f0       	push   $0xf0139330
f012569c:	68 37 0a 00 00       	push   $0xa37
f01256a1:	68 ae 92 13 f0       	push   $0xf01392ae
f01256a6:	e8 05 ab fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01256ab:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f01256b2:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01256b5:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01256bb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01256be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01256c5:	eb 0e                	jmp    f01256d5 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f01256c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01256ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01256cd:	01 d0                	add    %edx,%eax
f01256cf:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01256d2:	ff 45 f4             	incl   -0xc(%ebp)
f01256d5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01256db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01256de:	7f e7                	jg     f01256c7 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01256e0:	e8 f9 72 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01256e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256e8:	e8 97 ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f01256ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01256f0:	83 ec 0c             	sub    $0xc,%esp
f01256f3:	68 00 fc 5f 00       	push   $0x5ffc00
f01256f8:	e8 62 28 fe ff       	call   f0107f5f <kmalloc>
f01256fd:	83 c4 10             	add    $0x10,%esp
f0125700:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125706:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012570c:	89 c1                	mov    %eax,%ecx
f012570e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125715:	10 00 00 
f0125718:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012571d:	0f b6 d0             	movzbl %al,%edx
f0125720:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125726:	01 d0                	add    %edx,%eax
f0125728:	48                   	dec    %eax
f0125729:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012572f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125735:	ba 00 00 00 00       	mov    $0x0,%edx
f012573a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125740:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125746:	29 d0                	sub    %edx,%eax
f0125748:	89 c3                	mov    %eax,%ebx
f012574a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125751:	10 00 00 
f0125754:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125759:	0f b6 c0             	movzbl %al,%eax
f012575c:	c1 e0 04             	shl    $0x4,%eax
f012575f:	89 c2                	mov    %eax,%edx
f0125761:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125767:	01 d0                	add    %edx,%eax
f0125769:	48                   	dec    %eax
f012576a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125770:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125776:	ba 00 00 00 00       	mov    $0x0,%edx
f012577b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125781:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125787:	29 d0                	sub    %edx,%eax
f0125789:	01 d8                	add    %ebx,%eax
f012578b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125790:	39 c1                	cmp    %eax,%ecx
f0125792:	74 17                	je     f01257ab <test_kfreeall+0x800>
f0125794:	83 ec 04             	sub    $0x4,%esp
f0125797:	68 94 93 13 f0       	push   $0xf0139394
f012579c:	68 43 0a 00 00       	push   $0xa43
f01257a1:	68 ae 92 13 f0       	push   $0xf01392ae
f01257a6:	e8 05 aa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257ab:	e8 d4 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f01257b0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01257b3:	74 17                	je     f01257cc <test_kfreeall+0x821>
f01257b5:	83 ec 04             	sub    $0x4,%esp
f01257b8:	68 c8 92 13 f0       	push   $0xf01392c8
f01257bd:	68 44 0a 00 00       	push   $0xa44
f01257c2:	68 ae 92 13 f0       	push   $0xf01392ae
f01257c7:	e8 e4 a9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257cc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01257cf:	e8 0a 72 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01257d4:	29 c3                	sub    %eax,%ebx
f01257d6:	89 d8                	mov    %ebx,%eax
f01257d8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01257dd:	74 17                	je     f01257f6 <test_kfreeall+0x84b>
f01257df:	83 ec 04             	sub    $0x4,%esp
f01257e2:	68 30 93 13 f0       	push   $0xf0139330
f01257e7:	68 45 0a 00 00       	push   $0xa45
f01257ec:	68 ae 92 13 f0       	push   $0xf01392ae
f01257f1:	e8 ba a9 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01257f6:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01257fd:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125800:	e8 d9 71 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125805:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125808:	e8 77 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f012580d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125810:	83 ec 0c             	sub    $0xc,%esp
f0125813:	68 00 38 00 00       	push   $0x3800
f0125818:	e8 42 27 fe ff       	call   f0107f5f <kmalloc>
f012581d:	83 c4 10             	add    $0x10,%esp
f0125820:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125826:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012582c:	89 c1                	mov    %eax,%ecx
f012582e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125835:	10 00 00 
f0125838:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012583d:	0f b6 d0             	movzbl %al,%edx
f0125840:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125846:	01 d0                	add    %edx,%eax
f0125848:	48                   	dec    %eax
f0125849:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012584f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125855:	ba 00 00 00 00       	mov    $0x0,%edx
f012585a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125860:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125866:	29 d0                	sub    %edx,%eax
f0125868:	89 c3                	mov    %eax,%ebx
f012586a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125871:	10 00 00 
f0125874:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125879:	0f b6 c0             	movzbl %al,%eax
f012587c:	c1 e0 04             	shl    $0x4,%eax
f012587f:	89 c2                	mov    %eax,%edx
f0125881:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125887:	01 d0                	add    %edx,%eax
f0125889:	48                   	dec    %eax
f012588a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125890:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125896:	ba 00 00 00 00       	mov    $0x0,%edx
f012589b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01258a1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01258a7:	29 d0                	sub    %edx,%eax
f01258a9:	01 d8                	add    %ebx,%eax
f01258ab:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01258b0:	39 c1                	cmp    %eax,%ecx
f01258b2:	74 17                	je     f01258cb <test_kfreeall+0x920>
f01258b4:	83 ec 04             	sub    $0x4,%esp
f01258b7:	68 94 93 13 f0       	push   $0xf0139394
f01258bc:	68 4c 0a 00 00       	push   $0xa4c
f01258c1:	68 ae 92 13 f0       	push   $0xf01392ae
f01258c6:	e8 e5 a8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258cb:	e8 b4 ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f01258d0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01258d3:	74 17                	je     f01258ec <test_kfreeall+0x941>
f01258d5:	83 ec 04             	sub    $0x4,%esp
f01258d8:	68 c8 92 13 f0       	push   $0xf01392c8
f01258dd:	68 4d 0a 00 00       	push   $0xa4d
f01258e2:	68 ae 92 13 f0       	push   $0xf01392ae
f01258e7:	e8 c4 a8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01258ec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01258ef:	e8 ea 70 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01258f4:	29 c3                	sub    %eax,%ebx
f01258f6:	89 d8                	mov    %ebx,%eax
f01258f8:	83 f8 04             	cmp    $0x4,%eax
f01258fb:	74 17                	je     f0125914 <test_kfreeall+0x969>
f01258fd:	83 ec 04             	sub    $0x4,%esp
f0125900:	68 30 93 13 f0       	push   $0xf0139330
f0125905:	68 4e 0a 00 00       	push   $0xa4e
f012590a:	68 ae 92 13 f0       	push   $0xf01392ae
f012590f:	e8 9c a8 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125914:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f012591b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012591e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125924:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125927:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012592e:	eb 0e                	jmp    f012593e <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f0125930:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125933:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125936:	01 d0                	add    %edx,%eax
f0125938:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012593b:	ff 45 f4             	incl   -0xc(%ebp)
f012593e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125944:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125947:	7f e7                	jg     f0125930 <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125949:	e8 90 70 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012594e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125954:	e8 2b ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125959:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f012595f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125965:	83 ec 0c             	sub    $0xc,%esp
f0125968:	50                   	push   %eax
f0125969:	e8 0b 26 fe ff       	call   f0107f79 <kfree>
f012596e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125971:	e8 0e ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125976:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012597c:	74 17                	je     f0125995 <test_kfreeall+0x9ea>
f012597e:	83 ec 04             	sub    $0x4,%esp
f0125981:	68 c8 92 13 f0       	push   $0xf01392c8
f0125986:	68 5d 0a 00 00       	push   $0xa5d
f012598b:	68 ae 92 13 f0       	push   $0xf01392ae
f0125990:	e8 1b a8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125995:	e8 44 70 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012599a:	89 c2                	mov    %eax,%edx
f012599c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01259a2:	29 c2                	sub    %eax,%edx
f01259a4:	89 d0                	mov    %edx,%eax
f01259a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01259ab:	74 17                	je     f01259c4 <test_kfreeall+0xa19>
f01259ad:	83 ec 04             	sub    $0x4,%esp
f01259b0:	68 38 9a 13 f0       	push   $0xf0139a38
f01259b5:	68 5e 0a 00 00       	push   $0xa5e
f01259ba:	68 ae 92 13 f0       	push   $0xf01392ae
f01259bf:	e8 ec a7 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01259c4:	e8 15 70 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01259c9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259cf:	e8 b0 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f01259d4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01259da:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01259e0:	83 ec 0c             	sub    $0xc,%esp
f01259e3:	50                   	push   %eax
f01259e4:	e8 90 25 fe ff       	call   f0107f79 <kfree>
f01259e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259ec:	e8 93 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f01259f1:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01259f7:	74 17                	je     f0125a10 <test_kfreeall+0xa65>
f01259f9:	83 ec 04             	sub    $0x4,%esp
f01259fc:	68 c8 92 13 f0       	push   $0xf01392c8
f0125a01:	68 64 0a 00 00       	push   $0xa64
f0125a06:	68 ae 92 13 f0       	push   $0xf01392ae
f0125a0b:	e8 a0 a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a10:	e8 c9 6f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125a15:	89 c2                	mov    %eax,%edx
f0125a17:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125a1d:	29 c2                	sub    %eax,%edx
f0125a1f:	89 d0                	mov    %edx,%eax
f0125a21:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125a26:	74 17                	je     f0125a3f <test_kfreeall+0xa94>
f0125a28:	83 ec 04             	sub    $0x4,%esp
f0125a2b:	68 38 9a 13 f0       	push   $0xf0139a38
f0125a30:	68 65 0a 00 00       	push   $0xa65
f0125a35:	68 ae 92 13 f0       	push   $0xf01392ae
f0125a3a:	e8 71 a7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a3f:	e8 9a 6f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125a44:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a4a:	e8 35 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a4f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0125a55:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125a5b:	83 ec 0c             	sub    $0xc,%esp
f0125a5e:	50                   	push   %eax
f0125a5f:	e8 15 25 fe ff       	call   f0107f79 <kfree>
f0125a64:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a67:	e8 18 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a6c:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125a72:	74 17                	je     f0125a8b <test_kfreeall+0xae0>
f0125a74:	83 ec 04             	sub    $0x4,%esp
f0125a77:	68 c8 92 13 f0       	push   $0xf01392c8
f0125a7c:	68 6b 0a 00 00       	push   $0xa6b
f0125a81:	68 ae 92 13 f0       	push   $0xf01392ae
f0125a86:	e8 25 a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a8b:	e8 4e 6f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125a90:	89 c2                	mov    %eax,%edx
f0125a92:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125a98:	29 c2                	sub    %eax,%edx
f0125a9a:	89 d0                	mov    %edx,%eax
f0125a9c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125aa1:	74 17                	je     f0125aba <test_kfreeall+0xb0f>
f0125aa3:	83 ec 04             	sub    $0x4,%esp
f0125aa6:	68 38 9a 13 f0       	push   $0xf0139a38
f0125aab:	68 6c 0a 00 00       	push   $0xa6c
f0125ab0:	68 ae 92 13 f0       	push   $0xf01392ae
f0125ab5:	e8 f6 a6 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0125aba:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125ac0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125ac3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125aca:	eb 1e                	jmp    f0125aea <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125acc:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125ad2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125ad5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ad8:	01 c8                	add    %ecx,%eax
f0125ada:	8a 00                	mov    (%eax),%al
f0125adc:	0f be c0             	movsbl %al,%eax
f0125adf:	01 d0                	add    %edx,%eax
f0125ae1:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125ae7:	ff 45 f4             	incl   -0xc(%ebp)
f0125aea:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125af0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125af3:	7f d7                	jg     f0125acc <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125af5:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125afb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125b01:	01 c0                	add    %eax,%eax
f0125b03:	39 c2                	cmp    %eax,%edx
f0125b05:	74 17                	je     f0125b1e <test_kfreeall+0xb73>
f0125b07:	83 ec 04             	sub    $0x4,%esp
f0125b0a:	68 94 9a 13 f0       	push   $0xf0139a94
f0125b0f:	68 78 0a 00 00       	push   $0xa78
f0125b14:	68 ae 92 13 f0       	push   $0xf01392ae
f0125b19:	e8 92 a6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125b1e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125b24:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125b27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b2e:	eb 1e                	jmp    f0125b4e <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125b30:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b36:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125b39:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b3c:	01 c8                	add    %ecx,%eax
f0125b3e:	8a 00                	mov    (%eax),%al
f0125b40:	0f be c0             	movsbl %al,%eax
f0125b43:	01 d0                	add    %edx,%eax
f0125b45:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125b4b:	ff 45 f4             	incl   -0xc(%ebp)
f0125b4e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b57:	7f d7                	jg     f0125b30 <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0125b59:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b5f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b65:	89 c1                	mov    %eax,%ecx
f0125b67:	01 c9                	add    %ecx,%ecx
f0125b69:	01 c8                	add    %ecx,%eax
f0125b6b:	39 c2                	cmp    %eax,%edx
f0125b6d:	74 17                	je     f0125b86 <test_kfreeall+0xbdb>
f0125b6f:	83 ec 04             	sub    $0x4,%esp
f0125b72:	68 94 9a 13 f0       	push   $0xf0139a94
f0125b77:	68 80 0a 00 00       	push   $0xa80
f0125b7c:	68 ae 92 13 f0       	push   $0xf01392ae
f0125b81:	e8 2a a6 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125b86:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125b8c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125b8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b96:	eb 1e                	jmp    f0125bb6 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125b98:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0125b9e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125ba1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ba4:	01 c8                	add    %ecx,%eax
f0125ba6:	8a 00                	mov    (%eax),%al
f0125ba8:	0f be c0             	movsbl %al,%eax
f0125bab:	01 d0                	add    %edx,%eax
f0125bad:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125bb3:	ff 45 f4             	incl   -0xc(%ebp)
f0125bb6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125bbc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125bbf:	7f d7                	jg     f0125b98 <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125bc1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125bc7:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125bcd:	c1 e2 02             	shl    $0x2,%edx
f0125bd0:	39 d0                	cmp    %edx,%eax
f0125bd2:	74 17                	je     f0125beb <test_kfreeall+0xc40>
f0125bd4:	83 ec 04             	sub    $0x4,%esp
f0125bd7:	68 94 9a 13 f0       	push   $0xf0139a94
f0125bdc:	68 88 0a 00 00       	push   $0xa88
f0125be1:	68 ae 92 13 f0       	push   $0xf01392ae
f0125be6:	e8 c5 a5 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0125beb:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125bf1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125bf4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125bfb:	eb 1e                	jmp    f0125c1b <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125bfd:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125c03:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125c06:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c09:	01 c8                	add    %ecx,%eax
f0125c0b:	8a 00                	mov    (%eax),%al
f0125c0d:	0f be c0             	movsbl %al,%eax
f0125c10:	01 d0                	add    %edx,%eax
f0125c12:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125c18:	ff 45 f4             	incl   -0xc(%ebp)
f0125c1b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125c21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125c24:	7f d7                	jg     f0125bfd <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0125c26:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125c2c:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125c32:	89 d0                	mov    %edx,%eax
f0125c34:	c1 e0 02             	shl    $0x2,%eax
f0125c37:	01 d0                	add    %edx,%eax
f0125c39:	39 c1                	cmp    %eax,%ecx
f0125c3b:	74 17                	je     f0125c54 <test_kfreeall+0xca9>
f0125c3d:	83 ec 04             	sub    $0x4,%esp
f0125c40:	68 94 9a 13 f0       	push   $0xf0139a94
f0125c45:	68 90 0a 00 00       	push   $0xa90
f0125c4a:	68 ae 92 13 f0       	push   $0xf01392ae
f0125c4f:	e8 5c a5 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125c54:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c5a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125c5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c64:	eb 1e                	jmp    f0125c84 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f0125c66:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0125c6c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125c6f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c72:	01 c8                	add    %ecx,%eax
f0125c74:	8a 00                	mov    (%eax),%al
f0125c76:	0f be c0             	movsbl %al,%eax
f0125c79:	01 d0                	add    %edx,%eax
f0125c7b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125c81:	ff 45 f4             	incl   -0xc(%ebp)
f0125c84:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125c8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125c8d:	7f d7                	jg     f0125c66 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0125c8f:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125c95:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0125c9b:	89 d0                	mov    %edx,%eax
f0125c9d:	01 c0                	add    %eax,%eax
f0125c9f:	01 d0                	add    %edx,%eax
f0125ca1:	01 c0                	add    %eax,%eax
f0125ca3:	01 d0                	add    %edx,%eax
f0125ca5:	39 c1                	cmp    %eax,%ecx
f0125ca7:	74 17                	je     f0125cc0 <test_kfreeall+0xd15>
f0125ca9:	83 ec 04             	sub    $0x4,%esp
f0125cac:	68 94 9a 13 f0       	push   $0xf0139a94
f0125cb1:	68 98 0a 00 00       	push   $0xa98
f0125cb6:	68 ae 92 13 f0       	push   $0xf01392ae
f0125cbb:	e8 f0 a4 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125cc0:	e8 19 6d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125cc5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cc8:	e8 b7 e9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125ccd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125cd0:	83 ec 0c             	sub    $0xc,%esp
f0125cd3:	68 00 50 00 00       	push   $0x5000
f0125cd8:	e8 82 22 fe ff       	call   f0107f5f <kmalloc>
f0125cdd:	83 c4 10             	add    $0x10,%esp
f0125ce0:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125ce6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125cec:	89 c1                	mov    %eax,%ecx
f0125cee:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125cf5:	10 00 00 
f0125cf8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125cfd:	0f b6 d0             	movzbl %al,%edx
f0125d00:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125d06:	01 d0                	add    %edx,%eax
f0125d08:	48                   	dec    %eax
f0125d09:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125d0f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d1a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d20:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d26:	29 d0                	sub    %edx,%eax
f0125d28:	89 c3                	mov    %eax,%ebx
f0125d2a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125d31:	10 00 00 
f0125d34:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125d39:	0f b6 c0             	movzbl %al,%eax
f0125d3c:	c1 e0 04             	shl    $0x4,%eax
f0125d3f:	89 c2                	mov    %eax,%edx
f0125d41:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d47:	01 d0                	add    %edx,%eax
f0125d49:	48                   	dec    %eax
f0125d4a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125d50:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d56:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d5b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d61:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d67:	29 d0                	sub    %edx,%eax
f0125d69:	01 d8                	add    %ebx,%eax
f0125d6b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125d70:	39 c1                	cmp    %eax,%ecx
f0125d72:	74 17                	je     f0125d8b <test_kfreeall+0xde0>
f0125d74:	83 ec 04             	sub    $0x4,%esp
f0125d77:	68 94 93 13 f0       	push   $0xf0139394
f0125d7c:	68 a1 0a 00 00       	push   $0xaa1
f0125d81:	68 ae 92 13 f0       	push   $0xf01392ae
f0125d86:	e8 25 a4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d8b:	e8 f4 e8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125d90:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125d93:	74 17                	je     f0125dac <test_kfreeall+0xe01>
f0125d95:	83 ec 04             	sub    $0x4,%esp
f0125d98:	68 c8 92 13 f0       	push   $0xf01392c8
f0125d9d:	68 a2 0a 00 00       	push   $0xaa2
f0125da2:	68 ae 92 13 f0       	push   $0xf01392ae
f0125da7:	e8 04 a4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125dac:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125daf:	e8 2a 6c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125db4:	29 c3                	sub    %eax,%ebx
f0125db6:	89 d8                	mov    %ebx,%eax
f0125db8:	83 f8 05             	cmp    $0x5,%eax
f0125dbb:	74 17                	je     f0125dd4 <test_kfreeall+0xe29>
f0125dbd:	83 ec 04             	sub    $0x4,%esp
f0125dc0:	68 30 93 13 f0       	push   $0xf0139330
f0125dc5:	68 a3 0a 00 00       	push   $0xaa3
f0125dca:	68 ae 92 13 f0       	push   $0xf01392ae
f0125dcf:	e8 dc a3 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125dd4:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125ddb:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125dde:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125de4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125de7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125dee:	eb 0e                	jmp    f0125dfe <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125df0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125df3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125df6:	01 d0                	add    %edx,%eax
f0125df8:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125dfb:	ff 45 f4             	incl   -0xc(%ebp)
f0125dfe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125e04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e07:	7f e7                	jg     f0125df0 <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e09:	e8 d0 6b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125e0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e11:	e8 6e e8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125e16:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0125e19:	83 ec 0c             	sub    $0xc,%esp
f0125e1c:	68 00 00 10 00       	push   $0x100000
f0125e21:	e8 39 21 fe ff       	call   f0107f5f <kmalloc>
f0125e26:	83 c4 10             	add    $0x10,%esp
f0125e29:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e2f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125e35:	89 c1                	mov    %eax,%ecx
f0125e37:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125e3e:	10 00 00 
f0125e41:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125e46:	0f b6 d0             	movzbl %al,%edx
f0125e49:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125e4f:	01 d0                	add    %edx,%eax
f0125e51:	48                   	dec    %eax
f0125e52:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125e58:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e63:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125e69:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e6f:	29 d0                	sub    %edx,%eax
f0125e71:	89 c3                	mov    %eax,%ebx
f0125e73:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125e7a:	10 00 00 
f0125e7d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125e82:	0f b6 c0             	movzbl %al,%eax
f0125e85:	c1 e0 04             	shl    $0x4,%eax
f0125e88:	89 c2                	mov    %eax,%edx
f0125e8a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125e90:	01 d0                	add    %edx,%eax
f0125e92:	48                   	dec    %eax
f0125e93:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125e99:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ea4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125eaa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125eb0:	29 d0                	sub    %edx,%eax
f0125eb2:	01 d8                	add    %ebx,%eax
f0125eb4:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0125eb9:	39 c1                	cmp    %eax,%ecx
f0125ebb:	74 17                	je     f0125ed4 <test_kfreeall+0xf29>
f0125ebd:	83 ec 04             	sub    $0x4,%esp
f0125ec0:	68 94 93 13 f0       	push   $0xf0139394
f0125ec5:	68 af 0a 00 00       	push   $0xaaf
f0125eca:	68 ae 92 13 f0       	push   $0xf01392ae
f0125ecf:	e8 dc a2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ed4:	e8 ab e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125ed9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125edc:	74 17                	je     f0125ef5 <test_kfreeall+0xf4a>
f0125ede:	83 ec 04             	sub    $0x4,%esp
f0125ee1:	68 c8 92 13 f0       	push   $0xf01392c8
f0125ee6:	68 b0 0a 00 00       	push   $0xab0
f0125eeb:	68 ae 92 13 f0       	push   $0xf01392ae
f0125ef0:	e8 bb a2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ef5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ef8:	e8 e1 6a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125efd:	29 c3                	sub    %eax,%ebx
f0125eff:	89 d8                	mov    %ebx,%eax
f0125f01:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125f06:	74 17                	je     f0125f1f <test_kfreeall+0xf74>
f0125f08:	83 ec 04             	sub    $0x4,%esp
f0125f0b:	68 30 93 13 f0       	push   $0xf0139330
f0125f10:	68 b1 0a 00 00       	push   $0xab1
f0125f15:	68 ae 92 13 f0       	push   $0xf01392ae
f0125f1a:	e8 91 a2 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0125f1f:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0125f26:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0125f29:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125f2f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0125f32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125f39:	eb 0e                	jmp    f0125f49 <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f0125f3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125f3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125f41:	01 d0                	add    %edx,%eax
f0125f43:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0125f46:	ff 45 f4             	incl   -0xc(%ebp)
f0125f49:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125f4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125f52:	7f e7                	jg     f0125f3b <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0125f54:	e8 85 6a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125f59:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f5c:	e8 23 e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f61:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0125f64:	e8 5e 20 fe ff       	call   f0107fc7 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f69:	e8 16 e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f6e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f71:	74 17                	je     f0125f8a <test_kfreeall+0xfdf>
f0125f73:	83 ec 04             	sub    $0x4,%esp
f0125f76:	68 c8 92 13 f0       	push   $0xf01392c8
f0125f7b:	68 c1 0a 00 00       	push   $0xac1
f0125f80:	68 ae 92 13 f0       	push   $0xf01392ae
f0125f85:	e8 26 a2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0125f8a:	e8 4f 6a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0125f8f:	89 c2                	mov    %eax,%edx
f0125f91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125f94:	89 d1                	mov    %edx,%ecx
f0125f96:	29 c1                	sub    %eax,%ecx
f0125f98:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125f9f:	10 00 00 
f0125fa2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125fa7:	0f b6 d0             	movzbl %al,%edx
f0125faa:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125fb0:	01 d0                	add    %edx,%eax
f0125fb2:	48                   	dec    %eax
f0125fb3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125fb9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fc4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125fca:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fd0:	29 d0                	sub    %edx,%eax
f0125fd2:	89 c3                	mov    %eax,%ebx
f0125fd4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125fdb:	10 00 00 
f0125fde:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0125fe3:	0f b6 c0             	movzbl %al,%eax
f0125fe6:	c1 e0 04             	shl    $0x4,%eax
f0125fe9:	89 c2                	mov    %eax,%edx
f0125feb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125ff1:	01 d0                	add    %edx,%eax
f0125ff3:	48                   	dec    %eax
f0125ff4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125ffa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126000:	ba 00 00 00 00       	mov    $0x0,%edx
f0126005:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012600b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126011:	29 d0                	sub    %edx,%eax
f0126013:	01 d8                	add    %ebx,%eax
f0126015:	05 00 40 00 00       	add    $0x4000,%eax
f012601a:	c1 e8 0c             	shr    $0xc,%eax
f012601d:	05 0d 04 00 00       	add    $0x40d,%eax
f0126022:	39 c1                	cmp    %eax,%ecx
f0126024:	74 17                	je     f012603d <test_kfreeall+0x1092>
f0126026:	83 ec 04             	sub    $0x4,%esp
f0126029:	68 38 9a 13 f0       	push   $0xf0139a38
f012602e:	68 c2 0a 00 00       	push   $0xac2
f0126033:	68 ae 92 13 f0       	push   $0xf01392ae
f0126038:	e8 73 a1 fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012603d:	83 ec 0c             	sub    $0xc,%esp
f0126040:	6a 03                	push   $0x3
f0126042:	e8 32 6e fe ff       	call   f010ce79 <sys_bypassPageFault>
f0126047:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012604a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126051:	e9 82 00 00 00       	jmp    f01260d8 <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0126056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126059:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0126060:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0126063:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126066:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126069:	e8 f9 6d fe ff       	call   f010ce67 <sys_rcr2>
f012606e:	89 c2                	mov    %eax,%edx
f0126070:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126073:	39 c2                	cmp    %eax,%edx
f0126075:	74 17                	je     f012608e <test_kfreeall+0x10e3>
f0126077:	83 ec 04             	sub    $0x4,%esp
f012607a:	68 14 9b 13 f0       	push   $0xf0139b14
f012607f:	68 d0 0a 00 00       	push   $0xad0
f0126084:	68 ae 92 13 f0       	push   $0xf01392ae
f0126089:	e8 22 a1 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012608e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126091:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0126098:	89 c2                	mov    %eax,%edx
f012609a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012609d:	01 d0                	add    %edx,%eax
f012609f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01260a2:	e8 c0 6d fe ff       	call   f010ce67 <sys_rcr2>
f01260a7:	89 c2                	mov    %eax,%edx
f01260a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01260ac:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01260b3:	89 c1                	mov    %eax,%ecx
f01260b5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01260b8:	01 c8                	add    %ecx,%eax
f01260ba:	39 c2                	cmp    %eax,%edx
f01260bc:	74 17                	je     f01260d5 <test_kfreeall+0x112a>
f01260be:	83 ec 04             	sub    $0x4,%esp
f01260c1:	68 14 9b 13 f0       	push   $0xf0139b14
f01260c6:	68 d2 0a 00 00       	push   $0xad2
f01260cb:	68 ae 92 13 f0       	push   $0xf01392ae
f01260d0:	e8 db a0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01260d5:	ff 45 f4             	incl   -0xc(%ebp)
f01260d8:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01260dc:	0f 8e 74 ff ff ff    	jle    f0126056 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01260e2:	83 ec 0c             	sub    $0xc,%esp
f01260e5:	6a 00                	push   $0x0
f01260e7:	e8 8d 6d fe ff       	call   f010ce79 <sys_bypassPageFault>
f01260ec:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01260ef:	e8 ea 68 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01260f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01260f7:	e8 88 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01260fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01260ff:	83 ec 0c             	sub    $0xc,%esp
f0126102:	68 00 00 40 00       	push   $0x400000
f0126107:	e8 53 1e fe ff       	call   f0107f5f <kmalloc>
f012610c:	83 c4 10             	add    $0x10,%esp
f012610f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126115:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012611b:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0126120:	74 17                	je     f0126139 <test_kfreeall+0x118e>
f0126122:	83 ec 04             	sub    $0x4,%esp
f0126125:	68 b8 9f 13 f0       	push   $0xf0139fb8
f012612a:	68 de 0a 00 00       	push   $0xade
f012612f:	68 ae 92 13 f0       	push   $0xf01392ae
f0126134:	e8 77 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126139:	e8 46 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012613e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126141:	74 17                	je     f012615a <test_kfreeall+0x11af>
f0126143:	83 ec 04             	sub    $0x4,%esp
f0126146:	68 c8 92 13 f0       	push   $0xf01392c8
f012614b:	68 df 0a 00 00       	push   $0xadf
f0126150:	68 ae 92 13 f0       	push   $0xf01392ae
f0126155:	e8 56 a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012615a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012615d:	e8 7c 68 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126162:	29 c3                	sub    %eax,%ebx
f0126164:	89 d8                	mov    %ebx,%eax
f0126166:	3d 00 04 00 00       	cmp    $0x400,%eax
f012616b:	74 17                	je     f0126184 <test_kfreeall+0x11d9>
f012616d:	83 ec 04             	sub    $0x4,%esp
f0126170:	68 30 93 13 f0       	push   $0xf0139330
f0126175:	68 e0 0a 00 00       	push   $0xae0
f012617a:	68 ae 92 13 f0       	push   $0xf01392ae
f012617f:	e8 2c a0 fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126184:	e8 55 68 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126189:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012618c:	e8 f3 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126191:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126194:	83 ec 0c             	sub    $0xc,%esp
f0126197:	68 00 30 00 00       	push   $0x3000
f012619c:	e8 be 1d fe ff       	call   f0107f5f <kmalloc>
f01261a1:	83 c4 10             	add    $0x10,%esp
f01261a4:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01261aa:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01261b0:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f01261b5:	74 17                	je     f01261ce <test_kfreeall+0x1223>
f01261b7:	83 ec 04             	sub    $0x4,%esp
f01261ba:	68 b8 9f 13 f0       	push   $0xf0139fb8
f01261bf:	68 e6 0a 00 00       	push   $0xae6
f01261c4:	68 ae 92 13 f0       	push   $0xf01392ae
f01261c9:	e8 e2 9f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261ce:	e8 b1 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01261d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01261d6:	74 17                	je     f01261ef <test_kfreeall+0x1244>
f01261d8:	83 ec 04             	sub    $0x4,%esp
f01261db:	68 c8 92 13 f0       	push   $0xf01392c8
f01261e0:	68 e7 0a 00 00       	push   $0xae7
f01261e5:	68 ae 92 13 f0       	push   $0xf01392ae
f01261ea:	e8 c1 9f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01261ef:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01261f2:	e8 e7 67 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01261f7:	29 c3                	sub    %eax,%ebx
f01261f9:	89 d8                	mov    %ebx,%eax
f01261fb:	83 f8 03             	cmp    $0x3,%eax
f01261fe:	74 17                	je     f0126217 <test_kfreeall+0x126c>
f0126200:	83 ec 04             	sub    $0x4,%esp
f0126203:	68 30 93 13 f0       	push   $0xf0139330
f0126208:	68 e8 0a 00 00       	push   $0xae8
f012620d:	68 ae 92 13 f0       	push   $0xf01392ae
f0126212:	e8 99 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126217:	e8 c2 67 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012621c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012621f:	e8 60 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126224:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126227:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012622d:	83 ec 0c             	sub    $0xc,%esp
f0126230:	50                   	push   %eax
f0126231:	e8 43 1d fe ff       	call   f0107f79 <kfree>
f0126236:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126239:	e8 46 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012623e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126241:	74 17                	je     f012625a <test_kfreeall+0x12af>
f0126243:	83 ec 04             	sub    $0x4,%esp
f0126246:	68 c8 92 13 f0       	push   $0xf01392c8
f012624b:	68 f2 0a 00 00       	push   $0xaf2
f0126250:	68 ae 92 13 f0       	push   $0xf01392ae
f0126255:	e8 56 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012625a:	e8 7f 67 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012625f:	89 c2                	mov    %eax,%edx
f0126261:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126264:	29 c2                	sub    %eax,%edx
f0126266:	89 d0                	mov    %edx,%eax
f0126268:	83 f8 03             	cmp    $0x3,%eax
f012626b:	74 17                	je     f0126284 <test_kfreeall+0x12d9>
f012626d:	83 ec 04             	sub    $0x4,%esp
f0126270:	68 60 9b 13 f0       	push   $0xf0139b60
f0126275:	68 f3 0a 00 00       	push   $0xaf3
f012627a:	68 ae 92 13 f0       	push   $0xf01392ae
f012627f:	e8 2c 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126284:	e8 55 67 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126289:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012628c:	e8 f3 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126291:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126294:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012629a:	83 ec 0c             	sub    $0xc,%esp
f012629d:	50                   	push   %eax
f012629e:	e8 d6 1c fe ff       	call   f0107f79 <kfree>
f01262a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262a6:	e8 d9 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01262ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262ae:	74 17                	je     f01262c7 <test_kfreeall+0x131c>
f01262b0:	83 ec 04             	sub    $0x4,%esp
f01262b3:	68 c8 92 13 f0       	push   $0xf01392c8
f01262b8:	68 fc 0a 00 00       	push   $0xafc
f01262bd:	68 ae 92 13 f0       	push   $0xf01392ae
f01262c2:	e8 e9 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01262c7:	e8 12 67 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01262cc:	89 c2                	mov    %eax,%edx
f01262ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01262d1:	39 c2                	cmp    %eax,%edx
f01262d3:	74 17                	je     f01262ec <test_kfreeall+0x1341>
f01262d5:	83 ec 04             	sub    $0x4,%esp
f01262d8:	68 60 9b 13 f0       	push   $0xf0139b60
f01262dd:	68 fd 0a 00 00       	push   $0xafd
f01262e2:	68 ae 92 13 f0       	push   $0xf01392ae
f01262e7:	e8 c4 9e fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01262ec:	e8 ed 66 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01262f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262f4:	e8 8b e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01262f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01262fc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126302:	83 ec 0c             	sub    $0xc,%esp
f0126305:	50                   	push   %eax
f0126306:	e8 6e 1c fe ff       	call   f0107f79 <kfree>
f012630b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012630e:	e8 71 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126313:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126316:	74 17                	je     f012632f <test_kfreeall+0x1384>
f0126318:	83 ec 04             	sub    $0x4,%esp
f012631b:	68 c8 92 13 f0       	push   $0xf01392c8
f0126320:	68 03 0b 00 00       	push   $0xb03
f0126325:	68 ae 92 13 f0       	push   $0xf01392ae
f012632a:	e8 81 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012632f:	e8 aa 66 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126334:	89 c2                	mov    %eax,%edx
f0126336:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126339:	39 c2                	cmp    %eax,%edx
f012633b:	74 17                	je     f0126354 <test_kfreeall+0x13a9>
f012633d:	83 ec 04             	sub    $0x4,%esp
f0126340:	68 60 9b 13 f0       	push   $0xf0139b60
f0126345:	68 04 0b 00 00       	push   $0xb04
f012634a:	68 ae 92 13 f0       	push   $0xf01392ae
f012634f:	e8 5c 9e fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126354:	e8 85 66 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126359:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012635c:	e8 23 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126361:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126364:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012636a:	83 ec 0c             	sub    $0xc,%esp
f012636d:	50                   	push   %eax
f012636e:	e8 06 1c fe ff       	call   f0107f79 <kfree>
f0126373:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126376:	e8 09 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012637b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012637e:	74 17                	je     f0126397 <test_kfreeall+0x13ec>
f0126380:	83 ec 04             	sub    $0x4,%esp
f0126383:	68 c8 92 13 f0       	push   $0xf01392c8
f0126388:	68 0a 0b 00 00       	push   $0xb0a
f012638d:	68 ae 92 13 f0       	push   $0xf01392ae
f0126392:	e8 19 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126397:	e8 42 66 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012639c:	89 c2                	mov    %eax,%edx
f012639e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01263a1:	39 c2                	cmp    %eax,%edx
f01263a3:	74 17                	je     f01263bc <test_kfreeall+0x1411>
f01263a5:	83 ec 04             	sub    $0x4,%esp
f01263a8:	68 60 9b 13 f0       	push   $0xf0139b60
f01263ad:	68 0b 0b 00 00       	push   $0xb0b
f01263b2:	68 ae 92 13 f0       	push   $0xf01392ae
f01263b7:	e8 f4 9d fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01263bc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01263c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01263ca:	eb 48                	jmp    f0126414 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01263cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01263cf:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f01263d4:	83 ec 04             	sub    $0x4,%esp
f01263d7:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f01263dd:	51                   	push   %ecx
f01263de:	52                   	push   %edx
f01263df:	50                   	push   %eax
f01263e0:	e8 02 11 fe ff       	call   f01074e7 <get_page_table>
f01263e5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01263e8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01263ee:	85 c0                	test   %eax,%eax
f01263f0:	75 17                	jne    f0126409 <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01263f2:	83 ec 04             	sub    $0x4,%esp
f01263f5:	68 b0 9b 13 f0       	push   $0xf0139bb0
f01263fa:	68 18 0b 00 00       	push   $0xb18
f01263ff:	68 ae 92 13 f0       	push   $0xf01392ae
f0126404:	e8 a7 9d fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126409:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126410:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126414:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126418:	78 b2                	js     f01263cc <test_kfreeall+0x1421>
f012641a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012641e:	7f 09                	jg     f0126429 <test_kfreeall+0x147e>
f0126420:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126427:	76 a3                	jbe    f01263cc <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126429:	83 ec 0c             	sub    $0xc,%esp
f012642c:	68 0c a0 13 f0       	push   $0xf013a00c
f0126431:	e8 fb a9 fd ff       	call   f0100e31 <cprintf>
f0126436:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126439:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012643e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126441:	5b                   	pop    %ebx
f0126442:	5f                   	pop    %edi
f0126443:	5d                   	pop    %ebp
f0126444:	c3                   	ret    

f0126445 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126445:	55                   	push   %ebp
f0126446:	89 e5                	mov    %esp,%ebp
f0126448:	57                   	push   %edi
f0126449:	53                   	push   %ebx
f012644a:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f0126450:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126454:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126458:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012645e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126464:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012646b:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126472:	e8 67 65 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126477:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012647a:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f0126480:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126485:	b8 00 00 00 00       	mov    $0x0,%eax
f012648a:	89 d7                	mov    %edx,%edi
f012648c:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012648e:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126494:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126499:	b8 00 00 00 00       	mov    $0x0,%eax
f012649e:	89 d7                	mov    %edx,%edi
f01264a0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01264a2:	e8 37 65 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01264a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264aa:	e8 d5 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01264af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01264b2:	83 ec 0c             	sub    $0xc,%esp
f01264b5:	68 00 fc 1f 00       	push   $0x1ffc00
f01264ba:	e8 a0 1a fe ff       	call   f0107f5f <kmalloc>
f01264bf:	83 c4 10             	add    $0x10,%esp
f01264c2:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264c8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01264ce:	89 c1                	mov    %eax,%ecx
f01264d0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01264d7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01264dc:	0f b6 d0             	movzbl %al,%edx
f01264df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01264e2:	01 d0                	add    %edx,%eax
f01264e4:	48                   	dec    %eax
f01264e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01264e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01264f0:	f7 75 d4             	divl   -0x2c(%ebp)
f01264f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01264f6:	29 d0                	sub    %edx,%eax
f01264f8:	89 c3                	mov    %eax,%ebx
f01264fa:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126501:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126506:	0f b6 c0             	movzbl %al,%eax
f0126509:	c1 e0 04             	shl    $0x4,%eax
f012650c:	89 c2                	mov    %eax,%edx
f012650e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126511:	01 d0                	add    %edx,%eax
f0126513:	48                   	dec    %eax
f0126514:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126517:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012651a:	ba 00 00 00 00       	mov    $0x0,%edx
f012651f:	f7 75 cc             	divl   -0x34(%ebp)
f0126522:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126525:	29 d0                	sub    %edx,%eax
f0126527:	01 d8                	add    %ebx,%eax
f0126529:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012652e:	39 c1                	cmp    %eax,%ecx
f0126530:	74 17                	je     f0126549 <test_kexpand+0x104>
f0126532:	83 ec 04             	sub    $0x4,%esp
f0126535:	68 94 93 13 f0       	push   $0xf0139394
f012653a:	68 43 0b 00 00       	push   $0xb43
f012653f:	68 ae 92 13 f0       	push   $0xf01392ae
f0126544:	e8 67 9c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126549:	e8 36 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012654e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126551:	74 17                	je     f012656a <test_kexpand+0x125>
f0126553:	83 ec 04             	sub    $0x4,%esp
f0126556:	68 c8 92 13 f0       	push   $0xf01392c8
f012655b:	68 44 0b 00 00       	push   $0xb44
f0126560:	68 ae 92 13 f0       	push   $0xf01392ae
f0126565:	e8 46 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012656a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012656d:	e8 6c 64 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126572:	29 c3                	sub    %eax,%ebx
f0126574:	89 d8                	mov    %ebx,%eax
f0126576:	3d 00 02 00 00       	cmp    $0x200,%eax
f012657b:	74 17                	je     f0126594 <test_kexpand+0x14f>
f012657d:	83 ec 04             	sub    $0x4,%esp
f0126580:	68 30 93 13 f0       	push   $0xf0139330
f0126585:	68 45 0b 00 00       	push   $0xb45
f012658a:	68 ae 92 13 f0       	push   $0xf01392ae
f012658f:	e8 1c 9c fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126594:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f012659b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012659e:	e8 3b 64 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01265a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265a6:	e8 d9 e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01265ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01265ae:	83 ec 0c             	sub    $0xc,%esp
f01265b1:	68 00 fc 1f 00       	push   $0x1ffc00
f01265b6:	e8 a4 19 fe ff       	call   f0107f5f <kmalloc>
f01265bb:	83 c4 10             	add    $0x10,%esp
f01265be:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01265c4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01265ca:	89 c1                	mov    %eax,%ecx
f01265cc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01265d3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01265d8:	0f b6 d0             	movzbl %al,%edx
f01265db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01265de:	01 d0                	add    %edx,%eax
f01265e0:	48                   	dec    %eax
f01265e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01265e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01265e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01265ec:	f7 75 c4             	divl   -0x3c(%ebp)
f01265ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01265f2:	29 d0                	sub    %edx,%eax
f01265f4:	89 c3                	mov    %eax,%ebx
f01265f6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01265fd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126602:	0f b6 c0             	movzbl %al,%eax
f0126605:	c1 e0 04             	shl    $0x4,%eax
f0126608:	89 c2                	mov    %eax,%edx
f012660a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012660d:	01 d0                	add    %edx,%eax
f012660f:	48                   	dec    %eax
f0126610:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126613:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126616:	ba 00 00 00 00       	mov    $0x0,%edx
f012661b:	f7 75 bc             	divl   -0x44(%ebp)
f012661e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126621:	29 d0                	sub    %edx,%eax
f0126623:	01 d8                	add    %ebx,%eax
f0126625:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012662a:	39 c1                	cmp    %eax,%ecx
f012662c:	74 17                	je     f0126645 <test_kexpand+0x200>
f012662e:	83 ec 04             	sub    $0x4,%esp
f0126631:	68 94 93 13 f0       	push   $0xf0139394
f0126636:	68 4c 0b 00 00       	push   $0xb4c
f012663b:	68 ae 92 13 f0       	push   $0xf01392ae
f0126640:	e8 6b 9b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126645:	e8 3a e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012664a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012664d:	74 17                	je     f0126666 <test_kexpand+0x221>
f012664f:	83 ec 04             	sub    $0x4,%esp
f0126652:	68 c8 92 13 f0       	push   $0xf01392c8
f0126657:	68 4d 0b 00 00       	push   $0xb4d
f012665c:	68 ae 92 13 f0       	push   $0xf01392ae
f0126661:	e8 4a 9b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126666:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126669:	e8 70 63 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012666e:	29 c3                	sub    %eax,%ebx
f0126670:	89 d8                	mov    %ebx,%eax
f0126672:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126677:	74 17                	je     f0126690 <test_kexpand+0x24b>
f0126679:	83 ec 04             	sub    $0x4,%esp
f012667c:	68 30 93 13 f0       	push   $0xf0139330
f0126681:	68 4e 0b 00 00       	push   $0xb4e
f0126686:	68 ae 92 13 f0       	push   $0xf01392ae
f012668b:	e8 20 9b fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126690:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126697:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012669a:	e8 3f 63 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012669f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01266a2:	e8 dd df fd ff       	call   f0104684 <pf_calculate_free_frames>
f01266a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01266aa:	83 ec 0c             	sub    $0xc,%esp
f01266ad:	68 00 08 00 00       	push   $0x800
f01266b2:	e8 a8 18 fe ff       	call   f0107f5f <kmalloc>
f01266b7:	83 c4 10             	add    $0x10,%esp
f01266ba:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266c0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01266c6:	89 c1                	mov    %eax,%ecx
f01266c8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01266cf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01266d4:	0f b6 d0             	movzbl %al,%edx
f01266d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01266da:	01 d0                	add    %edx,%eax
f01266dc:	48                   	dec    %eax
f01266dd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01266e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01266e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01266e8:	f7 75 b4             	divl   -0x4c(%ebp)
f01266eb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01266ee:	29 d0                	sub    %edx,%eax
f01266f0:	89 c3                	mov    %eax,%ebx
f01266f2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01266f9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01266fe:	0f b6 c0             	movzbl %al,%eax
f0126701:	c1 e0 04             	shl    $0x4,%eax
f0126704:	89 c2                	mov    %eax,%edx
f0126706:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126709:	01 d0                	add    %edx,%eax
f012670b:	48                   	dec    %eax
f012670c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012670f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126712:	ba 00 00 00 00       	mov    $0x0,%edx
f0126717:	f7 75 ac             	divl   -0x54(%ebp)
f012671a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012671d:	29 d0                	sub    %edx,%eax
f012671f:	01 d8                	add    %ebx,%eax
f0126721:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126726:	39 c1                	cmp    %eax,%ecx
f0126728:	74 17                	je     f0126741 <test_kexpand+0x2fc>
f012672a:	83 ec 04             	sub    $0x4,%esp
f012672d:	68 94 93 13 f0       	push   $0xf0139394
f0126732:	68 55 0b 00 00       	push   $0xb55
f0126737:	68 ae 92 13 f0       	push   $0xf01392ae
f012673c:	e8 6f 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126741:	e8 3e df fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126746:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126749:	74 17                	je     f0126762 <test_kexpand+0x31d>
f012674b:	83 ec 04             	sub    $0x4,%esp
f012674e:	68 c8 92 13 f0       	push   $0xf01392c8
f0126753:	68 56 0b 00 00       	push   $0xb56
f0126758:	68 ae 92 13 f0       	push   $0xf01392ae
f012675d:	e8 4e 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126762:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126765:	e8 74 62 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012676a:	29 c3                	sub    %eax,%ebx
f012676c:	89 d8                	mov    %ebx,%eax
f012676e:	83 f8 01             	cmp    $0x1,%eax
f0126771:	74 17                	je     f012678a <test_kexpand+0x345>
f0126773:	83 ec 04             	sub    $0x4,%esp
f0126776:	68 30 93 13 f0       	push   $0xf0139330
f012677b:	68 57 0b 00 00       	push   $0xb57
f0126780:	68 ae 92 13 f0       	push   $0xf01392ae
f0126785:	e8 26 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012678a:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126791:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126794:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012679a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012679d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01267a4:	eb 0e                	jmp    f01267b4 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f01267a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01267a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01267ac:	01 d0                	add    %edx,%eax
f01267ae:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01267b1:	ff 45 f4             	incl   -0xc(%ebp)
f01267b4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01267ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267bd:	7f e7                	jg     f01267a6 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01267bf:	e8 1a 62 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01267c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267c7:	e8 b8 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f01267cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01267cf:	83 ec 0c             	sub    $0xc,%esp
f01267d2:	68 00 08 00 00       	push   $0x800
f01267d7:	e8 83 17 fe ff       	call   f0107f5f <kmalloc>
f01267dc:	83 c4 10             	add    $0x10,%esp
f01267df:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267e5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01267eb:	89 c1                	mov    %eax,%ecx
f01267ed:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01267f4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01267f9:	0f b6 d0             	movzbl %al,%edx
f01267fc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01267ff:	01 d0                	add    %edx,%eax
f0126801:	48                   	dec    %eax
f0126802:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126805:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126808:	ba 00 00 00 00       	mov    $0x0,%edx
f012680d:	f7 75 a0             	divl   -0x60(%ebp)
f0126810:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126813:	29 d0                	sub    %edx,%eax
f0126815:	89 c3                	mov    %eax,%ebx
f0126817:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012681e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126823:	0f b6 c0             	movzbl %al,%eax
f0126826:	c1 e0 04             	shl    $0x4,%eax
f0126829:	89 c2                	mov    %eax,%edx
f012682b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012682e:	01 d0                	add    %edx,%eax
f0126830:	48                   	dec    %eax
f0126831:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126834:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126837:	ba 00 00 00 00       	mov    $0x0,%edx
f012683c:	f7 75 98             	divl   -0x68(%ebp)
f012683f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126842:	29 d0                	sub    %edx,%eax
f0126844:	01 d8                	add    %ebx,%eax
f0126846:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012684b:	39 c1                	cmp    %eax,%ecx
f012684d:	74 17                	je     f0126866 <test_kexpand+0x421>
f012684f:	83 ec 04             	sub    $0x4,%esp
f0126852:	68 94 93 13 f0       	push   $0xf0139394
f0126857:	68 63 0b 00 00       	push   $0xb63
f012685c:	68 ae 92 13 f0       	push   $0xf01392ae
f0126861:	e8 4a 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126866:	e8 19 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f012686b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012686e:	74 17                	je     f0126887 <test_kexpand+0x442>
f0126870:	83 ec 04             	sub    $0x4,%esp
f0126873:	68 c8 92 13 f0       	push   $0xf01392c8
f0126878:	68 64 0b 00 00       	push   $0xb64
f012687d:	68 ae 92 13 f0       	push   $0xf01392ae
f0126882:	e8 29 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126887:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012688a:	e8 4f 61 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012688f:	29 c3                	sub    %eax,%ebx
f0126891:	89 d8                	mov    %ebx,%eax
f0126893:	83 f8 01             	cmp    $0x1,%eax
f0126896:	74 17                	je     f01268af <test_kexpand+0x46a>
f0126898:	83 ec 04             	sub    $0x4,%esp
f012689b:	68 30 93 13 f0       	push   $0xf0139330
f01268a0:	68 65 0b 00 00       	push   $0xb65
f01268a5:	68 ae 92 13 f0       	push   $0xf01392ae
f01268aa:	e8 01 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01268af:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f01268b6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01268b9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01268bf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01268c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268c9:	eb 0e                	jmp    f01268d9 <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f01268cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01268ce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01268d1:	01 d0                	add    %edx,%eax
f01268d3:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01268d6:	ff 45 f4             	incl   -0xc(%ebp)
f01268d9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01268df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01268e2:	7f e7                	jg     f01268cb <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01268e4:	e8 f5 60 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01268e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01268ec:	e8 93 dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01268f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01268f4:	83 ec 0c             	sub    $0xc,%esp
f01268f7:	68 00 1c 00 00       	push   $0x1c00
f01268fc:	e8 5e 16 fe ff       	call   f0107f5f <kmalloc>
f0126901:	83 c4 10             	add    $0x10,%esp
f0126904:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012690a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126910:	89 c1                	mov    %eax,%ecx
f0126912:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126919:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012691e:	0f b6 d0             	movzbl %al,%edx
f0126921:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126924:	01 d0                	add    %edx,%eax
f0126926:	48                   	dec    %eax
f0126927:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012692a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012692d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126932:	f7 75 90             	divl   -0x70(%ebp)
f0126935:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126938:	29 d0                	sub    %edx,%eax
f012693a:	89 c3                	mov    %eax,%ebx
f012693c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126943:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126948:	0f b6 c0             	movzbl %al,%eax
f012694b:	c1 e0 04             	shl    $0x4,%eax
f012694e:	89 c2                	mov    %eax,%edx
f0126950:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126953:	01 d0                	add    %edx,%eax
f0126955:	48                   	dec    %eax
f0126956:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126959:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012695c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126961:	f7 75 88             	divl   -0x78(%ebp)
f0126964:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126967:	29 d0                	sub    %edx,%eax
f0126969:	01 d8                	add    %ebx,%eax
f012696b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126970:	39 c1                	cmp    %eax,%ecx
f0126972:	74 17                	je     f012698b <test_kexpand+0x546>
f0126974:	83 ec 04             	sub    $0x4,%esp
f0126977:	68 94 93 13 f0       	push   $0xf0139394
f012697c:	68 71 0b 00 00       	push   $0xb71
f0126981:	68 ae 92 13 f0       	push   $0xf01392ae
f0126986:	e8 25 98 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012698b:	e8 f4 dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126990:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126993:	74 17                	je     f01269ac <test_kexpand+0x567>
f0126995:	83 ec 04             	sub    $0x4,%esp
f0126998:	68 c8 92 13 f0       	push   $0xf01392c8
f012699d:	68 72 0b 00 00       	push   $0xb72
f01269a2:	68 ae 92 13 f0       	push   $0xf01392ae
f01269a7:	e8 04 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01269ac:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01269af:	e8 2a 60 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01269b4:	29 c3                	sub    %eax,%ebx
f01269b6:	89 d8                	mov    %ebx,%eax
f01269b8:	83 f8 02             	cmp    $0x2,%eax
f01269bb:	74 17                	je     f01269d4 <test_kexpand+0x58f>
f01269bd:	83 ec 04             	sub    $0x4,%esp
f01269c0:	68 30 93 13 f0       	push   $0xf0139330
f01269c5:	68 73 0b 00 00       	push   $0xb73
f01269ca:	68 ae 92 13 f0       	push   $0xf01392ae
f01269cf:	e8 dc 97 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01269d4:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f01269db:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01269de:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01269e4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01269e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269ee:	eb 0e                	jmp    f01269fe <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f01269f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01269f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01269f6:	01 d0                	add    %edx,%eax
f01269f8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01269fb:	ff 45 f4             	incl   -0xc(%ebp)
f01269fe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126a04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a07:	7f e7                	jg     f01269f0 <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a09:	e8 d0 5f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126a0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a11:	e8 6e dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126a16:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126a19:	83 ec 0c             	sub    $0xc,%esp
f0126a1c:	68 00 fc 2f 00       	push   $0x2ffc00
f0126a21:	e8 39 15 fe ff       	call   f0107f5f <kmalloc>
f0126a26:	83 c4 10             	add    $0x10,%esp
f0126a29:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a2f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126a35:	89 c1                	mov    %eax,%ecx
f0126a37:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0126a3e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126a43:	0f b6 d0             	movzbl %al,%edx
f0126a46:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a49:	01 d0                	add    %edx,%eax
f0126a4b:	48                   	dec    %eax
f0126a4c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0126a52:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a58:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a5d:	f7 75 80             	divl   -0x80(%ebp)
f0126a60:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a66:	29 d0                	sub    %edx,%eax
f0126a68:	89 c3                	mov    %eax,%ebx
f0126a6a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0126a71:	10 00 00 
f0126a74:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126a79:	0f b6 c0             	movzbl %al,%eax
f0126a7c:	c1 e0 04             	shl    $0x4,%eax
f0126a7f:	89 c2                	mov    %eax,%edx
f0126a81:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126a87:	01 d0                	add    %edx,%eax
f0126a89:	48                   	dec    %eax
f0126a8a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126a90:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126a96:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a9b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126aa1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126aa7:	29 d0                	sub    %edx,%eax
f0126aa9:	01 d8                	add    %ebx,%eax
f0126aab:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126ab0:	39 c1                	cmp    %eax,%ecx
f0126ab2:	74 17                	je     f0126acb <test_kexpand+0x686>
f0126ab4:	83 ec 04             	sub    $0x4,%esp
f0126ab7:	68 94 93 13 f0       	push   $0xf0139394
f0126abc:	68 7f 0b 00 00       	push   $0xb7f
f0126ac1:	68 ae 92 13 f0       	push   $0xf01392ae
f0126ac6:	e8 e5 96 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126acb:	e8 b4 db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ad0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ad3:	74 17                	je     f0126aec <test_kexpand+0x6a7>
f0126ad5:	83 ec 04             	sub    $0x4,%esp
f0126ad8:	68 c8 92 13 f0       	push   $0xf01392c8
f0126add:	68 80 0b 00 00       	push   $0xb80
f0126ae2:	68 ae 92 13 f0       	push   $0xf01392ae
f0126ae7:	e8 c4 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126aec:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126aef:	e8 ea 5e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126af4:	29 c3                	sub    %eax,%ebx
f0126af6:	89 d8                	mov    %ebx,%eax
f0126af8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126afd:	74 17                	je     f0126b16 <test_kexpand+0x6d1>
f0126aff:	83 ec 04             	sub    $0x4,%esp
f0126b02:	68 30 93 13 f0       	push   $0xf0139330
f0126b07:	68 81 0b 00 00       	push   $0xb81
f0126b0c:	68 ae 92 13 f0       	push   $0xf01392ae
f0126b11:	e8 9a 96 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126b16:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126b1d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126b20:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126b26:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126b29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b30:	eb 0e                	jmp    f0126b40 <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126b32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b35:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126b38:	01 d0                	add    %edx,%eax
f0126b3a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126b3d:	ff 45 f4             	incl   -0xc(%ebp)
f0126b40:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126b46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b49:	7f e7                	jg     f0126b32 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b4b:	e8 8e 5e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126b50:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b53:	e8 2c db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126b58:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0126b5b:	83 ec 0c             	sub    $0xc,%esp
f0126b5e:	68 00 00 60 00       	push   $0x600000
f0126b63:	e8 f7 13 fe ff       	call   f0107f5f <kmalloc>
f0126b68:	83 c4 10             	add    $0x10,%esp
f0126b6b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b71:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126b77:	89 c1                	mov    %eax,%ecx
f0126b79:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126b80:	10 00 00 
f0126b83:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126b88:	0f b6 d0             	movzbl %al,%edx
f0126b8b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126b91:	01 d0                	add    %edx,%eax
f0126b93:	48                   	dec    %eax
f0126b94:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0126b9a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126ba0:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ba5:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0126bab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126bb1:	29 d0                	sub    %edx,%eax
f0126bb3:	89 c3                	mov    %eax,%ebx
f0126bb5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0126bbc:	10 00 00 
f0126bbf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126bc4:	0f b6 c0             	movzbl %al,%eax
f0126bc7:	c1 e0 04             	shl    $0x4,%eax
f0126bca:	89 c2                	mov    %eax,%edx
f0126bcc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126bd2:	01 d0                	add    %edx,%eax
f0126bd4:	48                   	dec    %eax
f0126bd5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0126bdb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126be1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126be6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126bec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126bf2:	29 d0                	sub    %edx,%eax
f0126bf4:	01 d8                	add    %ebx,%eax
f0126bf6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126bfb:	39 c1                	cmp    %eax,%ecx
f0126bfd:	74 17                	je     f0126c16 <test_kexpand+0x7d1>
f0126bff:	83 ec 04             	sub    $0x4,%esp
f0126c02:	68 94 93 13 f0       	push   $0xf0139394
f0126c07:	68 8d 0b 00 00       	push   $0xb8d
f0126c0c:	68 ae 92 13 f0       	push   $0xf01392ae
f0126c11:	e8 9a 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c16:	e8 69 da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126c1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126c1e:	74 17                	je     f0126c37 <test_kexpand+0x7f2>
f0126c20:	83 ec 04             	sub    $0x4,%esp
f0126c23:	68 c8 92 13 f0       	push   $0xf01392c8
f0126c28:	68 8e 0b 00 00       	push   $0xb8e
f0126c2d:	68 ae 92 13 f0       	push   $0xf01392ae
f0126c32:	e8 79 95 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c37:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c3a:	e8 9f 5d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126c3f:	29 c3                	sub    %eax,%ebx
f0126c41:	89 d8                	mov    %ebx,%eax
f0126c43:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126c48:	74 17                	je     f0126c61 <test_kexpand+0x81c>
f0126c4a:	83 ec 04             	sub    $0x4,%esp
f0126c4d:	68 30 93 13 f0       	push   $0xf0139330
f0126c52:	68 8f 0b 00 00       	push   $0xb8f
f0126c57:	68 ae 92 13 f0       	push   $0xf01392ae
f0126c5c:	e8 4f 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126c61:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f0126c68:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0126c6b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126c71:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0126c77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c7e:	eb 1a                	jmp    f0126c9a <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126c8a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126c90:	01 c2                	add    %eax,%edx
f0126c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c95:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126c97:	ff 45 f4             	incl   -0xc(%ebp)
f0126c9a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126ca0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126ca3:	7d db                	jge    f0126c80 <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126ca5:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0126cac:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0126caf:	e8 2a 5d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126cb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126cb7:	e8 c8 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126cbc:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0126cbf:	83 ec 0c             	sub    $0xc,%esp
f0126cc2:	68 00 00 70 00       	push   $0x700000
f0126cc7:	e8 2f 13 fe ff       	call   f0107ffb <kexpand>
f0126ccc:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126ccf:	e8 b0 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126cd4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126cd7:	74 19                	je     f0126cf2 <test_kexpand+0x8ad>
f0126cd9:	68 48 a0 13 f0       	push   $0xf013a048
f0126cde:	68 79 a0 13 f0       	push   $0xf013a079
f0126ce3:	68 a0 0b 00 00       	push   $0xba0
f0126ce8:	68 ae 92 13 f0       	push   $0xf01392ae
f0126ced:	e8 be 94 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126cf2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126cf5:	e8 e4 5c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126cfa:	29 c3                	sub    %eax,%ebx
f0126cfc:	89 d8                	mov    %ebx,%eax
f0126cfe:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126d03:	74 19                	je     f0126d1e <test_kexpand+0x8d9>
f0126d05:	68 90 a0 13 f0       	push   $0xf013a090
f0126d0a:	68 79 a0 13 f0       	push   $0xf013a079
f0126d0f:	68 a1 0b 00 00       	push   $0xba1
f0126d14:	68 ae 92 13 f0       	push   $0xf01392ae
f0126d19:	e8 92 94 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126d1e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126d24:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0126d27:	eb 1a                	jmp    f0126d43 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0126d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d2c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d33:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d39:	01 c2                	add    %eax,%edx
f0126d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d3e:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126d40:	ff 45 f4             	incl   -0xc(%ebp)
f0126d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d46:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126d4c:	7c db                	jl     f0126d29 <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126d4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d55:	eb 37                	jmp    f0126d8e <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f0126d57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d61:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d67:	01 d0                	add    %edx,%eax
f0126d69:	8b 10                	mov    (%eax),%edx
f0126d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d6e:	39 c2                	cmp    %eax,%edx
f0126d70:	74 19                	je     f0126d8b <test_kexpand+0x946>
f0126d72:	68 c0 a0 13 f0       	push   $0xf013a0c0
f0126d77:	68 79 a0 13 f0       	push   $0xf013a079
f0126d7c:	68 ad 0b 00 00       	push   $0xbad
f0126d81:	68 ae 92 13 f0       	push   $0xf01392ae
f0126d86:	e8 25 94 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126d8b:	ff 45 f4             	incl   -0xc(%ebp)
f0126d8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d91:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126d97:	7c be                	jl     f0126d57 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126d99:	e8 40 5c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126d9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126da1:	e8 de d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126da6:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0126da9:	83 ec 0c             	sub    $0xc,%esp
f0126dac:	68 00 00 a0 00       	push   $0xa00000
f0126db1:	e8 45 12 fe ff       	call   f0107ffb <kexpand>
f0126db6:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126db9:	e8 c6 d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126dbe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126dc1:	74 19                	je     f0126ddc <test_kexpand+0x997>
f0126dc3:	68 48 a0 13 f0       	push   $0xf013a048
f0126dc8:	68 79 a0 13 f0       	push   $0xf013a079
f0126dcd:	68 b8 0b 00 00       	push   $0xbb8
f0126dd2:	68 ae 92 13 f0       	push   $0xf01392ae
f0126dd7:	e8 d4 93 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126ddc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ddf:	e8 fa 5b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126de4:	29 c3                	sub    %eax,%ebx
f0126de6:	89 d8                	mov    %ebx,%eax
f0126de8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126ded:	74 19                	je     f0126e08 <test_kexpand+0x9c3>
f0126def:	68 cc a0 13 f0       	push   $0xf013a0cc
f0126df4:	68 79 a0 13 f0       	push   $0xf013a079
f0126df9:	68 b9 0b 00 00       	push   $0xbb9
f0126dfe:	68 ae 92 13 f0       	push   $0xf01392ae
f0126e03:	e8 a8 93 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e08:	e8 d1 5b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126e0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e10:	e8 6f d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126e15:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0126e18:	83 ec 0c             	sub    $0xc,%esp
f0126e1b:	68 00 00 40 00       	push   $0x400000
f0126e20:	e8 3a 11 fe ff       	call   f0107f5f <kmalloc>
f0126e25:	83 c4 10             	add    $0x10,%esp
f0126e28:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0126e2e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126e34:	89 c1                	mov    %eax,%ecx
f0126e36:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0126e3d:	10 00 00 
f0126e40:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126e45:	0f b6 d0             	movzbl %al,%edx
f0126e48:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126e4e:	01 d0                	add    %edx,%eax
f0126e50:	48                   	dec    %eax
f0126e51:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0126e57:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e62:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0126e68:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e6e:	29 d0                	sub    %edx,%eax
f0126e70:	89 c3                	mov    %eax,%ebx
f0126e72:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0126e79:	10 00 00 
f0126e7c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0126e81:	0f b6 c0             	movzbl %al,%eax
f0126e84:	c1 e0 04             	shl    $0x4,%eax
f0126e87:	89 c2                	mov    %eax,%edx
f0126e89:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126e8f:	01 d0                	add    %edx,%eax
f0126e91:	48                   	dec    %eax
f0126e92:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0126e98:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126e9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ea3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0126ea9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126eaf:	29 d0                	sub    %edx,%eax
f0126eb1:	01 d8                	add    %ebx,%eax
f0126eb3:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0126eb8:	39 c1                	cmp    %eax,%ecx
f0126eba:	74 17                	je     f0126ed3 <test_kexpand+0xa8e>
f0126ebc:	83 ec 04             	sub    $0x4,%esp
f0126ebf:	68 fc a0 13 f0       	push   $0xf013a0fc
f0126ec4:	68 c4 0b 00 00       	push   $0xbc4
f0126ec9:	68 ae 92 13 f0       	push   $0xf01392ae
f0126ece:	e8 dd 92 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ed3:	e8 ac d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ed8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126edb:	74 17                	je     f0126ef4 <test_kexpand+0xaaf>
f0126edd:	83 ec 04             	sub    $0x4,%esp
f0126ee0:	68 c8 92 13 f0       	push   $0xf01392c8
f0126ee5:	68 c5 0b 00 00       	push   $0xbc5
f0126eea:	68 ae 92 13 f0       	push   $0xf01392ae
f0126eef:	e8 bc 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ef4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ef7:	e8 e2 5a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126efc:	29 c3                	sub    %eax,%ebx
f0126efe:	89 d8                	mov    %ebx,%eax
f0126f00:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126f05:	74 17                	je     f0126f1e <test_kexpand+0xad9>
f0126f07:	83 ec 04             	sub    $0x4,%esp
f0126f0a:	68 30 93 13 f0       	push   $0xf0139330
f0126f0f:	68 c6 0b 00 00       	push   $0xbc6
f0126f14:	68 ae 92 13 f0       	push   $0xf01392ae
f0126f19:	e8 92 92 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0126f1e:	e8 bb 5a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126f23:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f26:	e8 59 d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0126f2e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126f34:	83 ec 0c             	sub    $0xc,%esp
f0126f37:	50                   	push   %eax
f0126f38:	e8 3c 10 fe ff       	call   f0107f79 <kfree>
f0126f3d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f40:	e8 3f d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f48:	74 17                	je     f0126f61 <test_kexpand+0xb1c>
f0126f4a:	83 ec 04             	sub    $0x4,%esp
f0126f4d:	68 c8 92 13 f0       	push   $0xf01392c8
f0126f52:	68 cf 0b 00 00       	push   $0xbcf
f0126f57:	68 ae 92 13 f0       	push   $0xf01392ae
f0126f5c:	e8 4f 92 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126f61:	e8 78 5a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126f66:	89 c2                	mov    %eax,%edx
f0126f68:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0126f6b:	29 c2                	sub    %eax,%edx
f0126f6d:	89 d0                	mov    %edx,%eax
f0126f6f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126f74:	74 17                	je     f0126f8d <test_kexpand+0xb48>
f0126f76:	83 ec 04             	sub    $0x4,%esp
f0126f79:	68 60 9b 13 f0       	push   $0xf0139b60
f0126f7e:	68 d0 0b 00 00       	push   $0xbd0
f0126f83:	68 ae 92 13 f0       	push   $0xf01392ae
f0126f88:	e8 23 92 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126f8d:	e8 4c 5a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126f92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f95:	e8 ea d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f9a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0126f9d:	83 ec 0c             	sub    $0xc,%esp
f0126fa0:	68 00 50 40 00       	push   $0x405000
f0126fa5:	e8 51 10 fe ff       	call   f0107ffb <kexpand>
f0126faa:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126fad:	e8 d2 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126fb2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126fb5:	74 19                	je     f0126fd0 <test_kexpand+0xb8b>
f0126fb7:	68 48 a0 13 f0       	push   $0xf013a048
f0126fbc:	68 79 a0 13 f0       	push   $0xf013a079
f0126fc1:	68 da 0b 00 00       	push   $0xbda
f0126fc6:	68 ae 92 13 f0       	push   $0xf01392ae
f0126fcb:	e8 e0 91 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0126fd0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126fd3:	e8 06 5a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0126fd8:	29 c3                	sub    %eax,%ebx
f0126fda:	89 d8                	mov    %ebx,%eax
f0126fdc:	83 f8 05             	cmp    $0x5,%eax
f0126fdf:	74 19                	je     f0126ffa <test_kexpand+0xbb5>
f0126fe1:	68 24 a1 13 f0       	push   $0xf013a124
f0126fe6:	68 79 a0 13 f0       	push   $0xf013a079
f0126feb:	68 db 0b 00 00       	push   $0xbdb
f0126ff0:	68 ae 92 13 f0       	push   $0xf01392ae
f0126ff5:	e8 b6 91 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126ffa:	83 ec 0c             	sub    $0xc,%esp
f0126ffd:	68 0c a0 13 f0       	push   $0xf013a00c
f0127002:	e8 2a 9e fd ff       	call   f0100e31 <cprintf>
f0127007:	83 c4 10             	add    $0x10,%esp

	return 1;
f012700a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012700f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127012:	5b                   	pop    %ebx
f0127013:	5f                   	pop    %edi
f0127014:	5d                   	pop    %ebp
f0127015:	c3                   	ret    

f0127016 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127016:	55                   	push   %ebp
f0127017:	89 e5                	mov    %esp,%ebp
f0127019:	57                   	push   %edi
f012701a:	53                   	push   %ebx
f012701b:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0127021:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127025:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127029:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012702f:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127035:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012703c:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127043:	e8 96 59 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127048:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012704b:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0127051:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127056:	b8 00 00 00 00       	mov    $0x0,%eax
f012705b:	89 d7                	mov    %edx,%edi
f012705d:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012705f:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0127065:	b9 14 00 00 00       	mov    $0x14,%ecx
f012706a:	b8 00 00 00 00       	mov    $0x0,%eax
f012706f:	89 d7                	mov    %edx,%edi
f0127071:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127073:	e8 66 59 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127078:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012707b:	e8 04 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127080:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127083:	83 ec 0c             	sub    $0xc,%esp
f0127086:	68 00 fc 1f 00       	push   $0x1ffc00
f012708b:	e8 cf 0e fe ff       	call   f0107f5f <kmalloc>
f0127090:	83 c4 10             	add    $0x10,%esp
f0127093:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127099:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012709f:	89 c1                	mov    %eax,%ecx
f01270a1:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01270a8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01270ad:	0f b6 d0             	movzbl %al,%edx
f01270b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01270b3:	01 d0                	add    %edx,%eax
f01270b5:	48                   	dec    %eax
f01270b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01270b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01270bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01270c1:	f7 75 d4             	divl   -0x2c(%ebp)
f01270c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01270c7:	29 d0                	sub    %edx,%eax
f01270c9:	89 c3                	mov    %eax,%ebx
f01270cb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01270d2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01270d7:	0f b6 c0             	movzbl %al,%eax
f01270da:	c1 e0 04             	shl    $0x4,%eax
f01270dd:	89 c2                	mov    %eax,%edx
f01270df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01270e2:	01 d0                	add    %edx,%eax
f01270e4:	48                   	dec    %eax
f01270e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01270e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01270eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01270f0:	f7 75 cc             	divl   -0x34(%ebp)
f01270f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01270f6:	29 d0                	sub    %edx,%eax
f01270f8:	01 d8                	add    %ebx,%eax
f01270fa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01270ff:	39 c1                	cmp    %eax,%ecx
f0127101:	74 17                	je     f012711a <test_kshrink+0x104>
f0127103:	83 ec 04             	sub    $0x4,%esp
f0127106:	68 94 93 13 f0       	push   $0xf0139394
f012710b:	68 01 0c 00 00       	push   $0xc01
f0127110:	68 ae 92 13 f0       	push   $0xf01392ae
f0127115:	e8 96 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012711a:	e8 65 d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012711f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127122:	74 17                	je     f012713b <test_kshrink+0x125>
f0127124:	83 ec 04             	sub    $0x4,%esp
f0127127:	68 c8 92 13 f0       	push   $0xf01392c8
f012712c:	68 02 0c 00 00       	push   $0xc02
f0127131:	68 ae 92 13 f0       	push   $0xf01392ae
f0127136:	e8 75 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012713b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012713e:	e8 9b 58 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127143:	29 c3                	sub    %eax,%ebx
f0127145:	89 d8                	mov    %ebx,%eax
f0127147:	3d 00 02 00 00       	cmp    $0x200,%eax
f012714c:	74 17                	je     f0127165 <test_kshrink+0x14f>
f012714e:	83 ec 04             	sub    $0x4,%esp
f0127151:	68 30 93 13 f0       	push   $0xf0139330
f0127156:	68 03 0c 00 00       	push   $0xc03
f012715b:	68 ae 92 13 f0       	push   $0xf01392ae
f0127160:	e8 4b 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127165:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f012716c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012716f:	e8 6a 58 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127174:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127177:	e8 08 d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012717c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012717f:	83 ec 0c             	sub    $0xc,%esp
f0127182:	68 00 fc 1f 00       	push   $0x1ffc00
f0127187:	e8 d3 0d fe ff       	call   f0107f5f <kmalloc>
f012718c:	83 c4 10             	add    $0x10,%esp
f012718f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127195:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012719b:	89 c1                	mov    %eax,%ecx
f012719d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01271a4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01271a9:	0f b6 d0             	movzbl %al,%edx
f01271ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01271af:	01 d0                	add    %edx,%eax
f01271b1:	48                   	dec    %eax
f01271b2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01271b5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01271b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01271bd:	f7 75 c4             	divl   -0x3c(%ebp)
f01271c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01271c3:	29 d0                	sub    %edx,%eax
f01271c5:	89 c3                	mov    %eax,%ebx
f01271c7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01271ce:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01271d3:	0f b6 c0             	movzbl %al,%eax
f01271d6:	c1 e0 04             	shl    $0x4,%eax
f01271d9:	89 c2                	mov    %eax,%edx
f01271db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01271de:	01 d0                	add    %edx,%eax
f01271e0:	48                   	dec    %eax
f01271e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01271e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01271e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ec:	f7 75 bc             	divl   -0x44(%ebp)
f01271ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01271f2:	29 d0                	sub    %edx,%eax
f01271f4:	01 d8                	add    %ebx,%eax
f01271f6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01271fb:	39 c1                	cmp    %eax,%ecx
f01271fd:	74 17                	je     f0127216 <test_kshrink+0x200>
f01271ff:	83 ec 04             	sub    $0x4,%esp
f0127202:	68 94 93 13 f0       	push   $0xf0139394
f0127207:	68 0a 0c 00 00       	push   $0xc0a
f012720c:	68 ae 92 13 f0       	push   $0xf01392ae
f0127211:	e8 9a 8f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127216:	e8 69 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012721b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012721e:	74 17                	je     f0127237 <test_kshrink+0x221>
f0127220:	83 ec 04             	sub    $0x4,%esp
f0127223:	68 c8 92 13 f0       	push   $0xf01392c8
f0127228:	68 0b 0c 00 00       	push   $0xc0b
f012722d:	68 ae 92 13 f0       	push   $0xf01392ae
f0127232:	e8 79 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127237:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012723a:	e8 9f 57 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012723f:	29 c3                	sub    %eax,%ebx
f0127241:	89 d8                	mov    %ebx,%eax
f0127243:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127248:	74 17                	je     f0127261 <test_kshrink+0x24b>
f012724a:	83 ec 04             	sub    $0x4,%esp
f012724d:	68 30 93 13 f0       	push   $0xf0139330
f0127252:	68 0c 0c 00 00       	push   $0xc0c
f0127257:	68 ae 92 13 f0       	push   $0xf01392ae
f012725c:	e8 4f 8f fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127261:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f0127268:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012726b:	e8 6e 57 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127270:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127273:	e8 0c d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127278:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012727b:	83 ec 0c             	sub    $0xc,%esp
f012727e:	68 00 08 00 00       	push   $0x800
f0127283:	e8 d7 0c fe ff       	call   f0107f5f <kmalloc>
f0127288:	83 c4 10             	add    $0x10,%esp
f012728b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127291:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127297:	89 c1                	mov    %eax,%ecx
f0127299:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01272a0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01272a5:	0f b6 d0             	movzbl %al,%edx
f01272a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01272ab:	01 d0                	add    %edx,%eax
f01272ad:	48                   	dec    %eax
f01272ae:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01272b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01272b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01272b9:	f7 75 b4             	divl   -0x4c(%ebp)
f01272bc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01272bf:	29 d0                	sub    %edx,%eax
f01272c1:	89 c3                	mov    %eax,%ebx
f01272c3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01272ca:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01272cf:	0f b6 c0             	movzbl %al,%eax
f01272d2:	c1 e0 04             	shl    $0x4,%eax
f01272d5:	89 c2                	mov    %eax,%edx
f01272d7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01272da:	01 d0                	add    %edx,%eax
f01272dc:	48                   	dec    %eax
f01272dd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01272e0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01272e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01272e8:	f7 75 ac             	divl   -0x54(%ebp)
f01272eb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01272ee:	29 d0                	sub    %edx,%eax
f01272f0:	01 d8                	add    %ebx,%eax
f01272f2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01272f7:	39 c1                	cmp    %eax,%ecx
f01272f9:	74 17                	je     f0127312 <test_kshrink+0x2fc>
f01272fb:	83 ec 04             	sub    $0x4,%esp
f01272fe:	68 94 93 13 f0       	push   $0xf0139394
f0127303:	68 13 0c 00 00       	push   $0xc13
f0127308:	68 ae 92 13 f0       	push   $0xf01392ae
f012730d:	e8 9e 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127312:	e8 6d d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127317:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012731a:	74 17                	je     f0127333 <test_kshrink+0x31d>
f012731c:	83 ec 04             	sub    $0x4,%esp
f012731f:	68 c8 92 13 f0       	push   $0xf01392c8
f0127324:	68 14 0c 00 00       	push   $0xc14
f0127329:	68 ae 92 13 f0       	push   $0xf01392ae
f012732e:	e8 7d 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127333:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127336:	e8 a3 56 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012733b:	29 c3                	sub    %eax,%ebx
f012733d:	89 d8                	mov    %ebx,%eax
f012733f:	83 f8 01             	cmp    $0x1,%eax
f0127342:	74 17                	je     f012735b <test_kshrink+0x345>
f0127344:	83 ec 04             	sub    $0x4,%esp
f0127347:	68 30 93 13 f0       	push   $0xf0139330
f012734c:	68 15 0c 00 00       	push   $0xc15
f0127351:	68 ae 92 13 f0       	push   $0xf01392ae
f0127356:	e8 55 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012735b:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0127362:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127365:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012736b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012736e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127375:	eb 0e                	jmp    f0127385 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f0127377:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012737a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012737d:	01 d0                	add    %edx,%eax
f012737f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127382:	ff 45 f4             	incl   -0xc(%ebp)
f0127385:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012738b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012738e:	7f e7                	jg     f0127377 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127390:	e8 49 56 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127395:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127398:	e8 e7 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012739d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01273a0:	83 ec 0c             	sub    $0xc,%esp
f01273a3:	68 00 08 00 00       	push   $0x800
f01273a8:	e8 b2 0b fe ff       	call   f0107f5f <kmalloc>
f01273ad:	83 c4 10             	add    $0x10,%esp
f01273b0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01273b6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01273bc:	89 c1                	mov    %eax,%ecx
f01273be:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01273c5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01273ca:	0f b6 d0             	movzbl %al,%edx
f01273cd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01273d0:	01 d0                	add    %edx,%eax
f01273d2:	48                   	dec    %eax
f01273d3:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01273d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01273d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01273de:	f7 75 a0             	divl   -0x60(%ebp)
f01273e1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01273e4:	29 d0                	sub    %edx,%eax
f01273e6:	89 c3                	mov    %eax,%ebx
f01273e8:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01273ef:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01273f4:	0f b6 c0             	movzbl %al,%eax
f01273f7:	c1 e0 04             	shl    $0x4,%eax
f01273fa:	89 c2                	mov    %eax,%edx
f01273fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01273ff:	01 d0                	add    %edx,%eax
f0127401:	48                   	dec    %eax
f0127402:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127405:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127408:	ba 00 00 00 00       	mov    $0x0,%edx
f012740d:	f7 75 98             	divl   -0x68(%ebp)
f0127410:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127413:	29 d0                	sub    %edx,%eax
f0127415:	01 d8                	add    %ebx,%eax
f0127417:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012741c:	39 c1                	cmp    %eax,%ecx
f012741e:	74 17                	je     f0127437 <test_kshrink+0x421>
f0127420:	83 ec 04             	sub    $0x4,%esp
f0127423:	68 94 93 13 f0       	push   $0xf0139394
f0127428:	68 21 0c 00 00       	push   $0xc21
f012742d:	68 ae 92 13 f0       	push   $0xf01392ae
f0127432:	e8 79 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127437:	e8 48 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012743c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012743f:	74 17                	je     f0127458 <test_kshrink+0x442>
f0127441:	83 ec 04             	sub    $0x4,%esp
f0127444:	68 c8 92 13 f0       	push   $0xf01392c8
f0127449:	68 22 0c 00 00       	push   $0xc22
f012744e:	68 ae 92 13 f0       	push   $0xf01392ae
f0127453:	e8 58 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127458:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012745b:	e8 7e 55 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127460:	29 c3                	sub    %eax,%ebx
f0127462:	89 d8                	mov    %ebx,%eax
f0127464:	83 f8 01             	cmp    $0x1,%eax
f0127467:	74 17                	je     f0127480 <test_kshrink+0x46a>
f0127469:	83 ec 04             	sub    $0x4,%esp
f012746c:	68 30 93 13 f0       	push   $0xf0139330
f0127471:	68 23 0c 00 00       	push   $0xc23
f0127476:	68 ae 92 13 f0       	push   $0xf01392ae
f012747b:	e8 30 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127480:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127487:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012748a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127490:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127493:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012749a:	eb 0e                	jmp    f01274aa <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f012749c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012749f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01274a2:	01 d0                	add    %edx,%eax
f01274a4:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01274a7:	ff 45 f4             	incl   -0xc(%ebp)
f01274aa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01274b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01274b3:	7f e7                	jg     f012749c <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01274b5:	e8 24 55 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01274ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274bd:	e8 c2 d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01274c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01274c5:	83 ec 0c             	sub    $0xc,%esp
f01274c8:	68 00 1c 00 00       	push   $0x1c00
f01274cd:	e8 8d 0a fe ff       	call   f0107f5f <kmalloc>
f01274d2:	83 c4 10             	add    $0x10,%esp
f01274d5:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01274db:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01274e1:	89 c1                	mov    %eax,%ecx
f01274e3:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01274ea:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01274ef:	0f b6 d0             	movzbl %al,%edx
f01274f2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01274f5:	01 d0                	add    %edx,%eax
f01274f7:	48                   	dec    %eax
f01274f8:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01274fb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01274fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0127503:	f7 75 90             	divl   -0x70(%ebp)
f0127506:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127509:	29 d0                	sub    %edx,%eax
f012750b:	89 c3                	mov    %eax,%ebx
f012750d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127514:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127519:	0f b6 c0             	movzbl %al,%eax
f012751c:	c1 e0 04             	shl    $0x4,%eax
f012751f:	89 c2                	mov    %eax,%edx
f0127521:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127524:	01 d0                	add    %edx,%eax
f0127526:	48                   	dec    %eax
f0127527:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012752a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012752d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127532:	f7 75 88             	divl   -0x78(%ebp)
f0127535:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127538:	29 d0                	sub    %edx,%eax
f012753a:	01 d8                	add    %ebx,%eax
f012753c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127541:	39 c1                	cmp    %eax,%ecx
f0127543:	74 17                	je     f012755c <test_kshrink+0x546>
f0127545:	83 ec 04             	sub    $0x4,%esp
f0127548:	68 94 93 13 f0       	push   $0xf0139394
f012754d:	68 2f 0c 00 00       	push   $0xc2f
f0127552:	68 ae 92 13 f0       	push   $0xf01392ae
f0127557:	e8 54 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012755c:	e8 23 d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127561:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127564:	74 17                	je     f012757d <test_kshrink+0x567>
f0127566:	83 ec 04             	sub    $0x4,%esp
f0127569:	68 c8 92 13 f0       	push   $0xf01392c8
f012756e:	68 30 0c 00 00       	push   $0xc30
f0127573:	68 ae 92 13 f0       	push   $0xf01392ae
f0127578:	e8 33 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012757d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127580:	e8 59 54 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127585:	29 c3                	sub    %eax,%ebx
f0127587:	89 d8                	mov    %ebx,%eax
f0127589:	83 f8 02             	cmp    $0x2,%eax
f012758c:	74 17                	je     f01275a5 <test_kshrink+0x58f>
f012758e:	83 ec 04             	sub    $0x4,%esp
f0127591:	68 30 93 13 f0       	push   $0xf0139330
f0127596:	68 31 0c 00 00       	push   $0xc31
f012759b:	68 ae 92 13 f0       	push   $0xf01392ae
f01275a0:	e8 0b 8c fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01275a5:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f01275ac:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01275af:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01275b5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01275b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275bf:	eb 0e                	jmp    f01275cf <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f01275c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01275c7:	01 d0                	add    %edx,%eax
f01275c9:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01275cc:	ff 45 f4             	incl   -0xc(%ebp)
f01275cf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01275d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275d8:	7f e7                	jg     f01275c1 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01275da:	e8 ff 53 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01275df:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275e2:	e8 9d d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01275e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01275ea:	83 ec 0c             	sub    $0xc,%esp
f01275ed:	68 00 fc 2f 00       	push   $0x2ffc00
f01275f2:	e8 68 09 fe ff       	call   f0107f5f <kmalloc>
f01275f7:	83 c4 10             	add    $0x10,%esp
f01275fa:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127600:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127606:	89 c1                	mov    %eax,%ecx
f0127608:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012760f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127614:	0f b6 d0             	movzbl %al,%edx
f0127617:	8b 45 80             	mov    -0x80(%ebp),%eax
f012761a:	01 d0                	add    %edx,%eax
f012761c:	48                   	dec    %eax
f012761d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127623:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127629:	ba 00 00 00 00       	mov    $0x0,%edx
f012762e:	f7 75 80             	divl   -0x80(%ebp)
f0127631:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127637:	29 d0                	sub    %edx,%eax
f0127639:	89 c3                	mov    %eax,%ebx
f012763b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127642:	10 00 00 
f0127645:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012764a:	0f b6 c0             	movzbl %al,%eax
f012764d:	c1 e0 04             	shl    $0x4,%eax
f0127650:	89 c2                	mov    %eax,%edx
f0127652:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127658:	01 d0                	add    %edx,%eax
f012765a:	48                   	dec    %eax
f012765b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127661:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127667:	ba 00 00 00 00       	mov    $0x0,%edx
f012766c:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127672:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127678:	29 d0                	sub    %edx,%eax
f012767a:	01 d8                	add    %ebx,%eax
f012767c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127681:	39 c1                	cmp    %eax,%ecx
f0127683:	74 17                	je     f012769c <test_kshrink+0x686>
f0127685:	83 ec 04             	sub    $0x4,%esp
f0127688:	68 94 93 13 f0       	push   $0xf0139394
f012768d:	68 3d 0c 00 00       	push   $0xc3d
f0127692:	68 ae 92 13 f0       	push   $0xf01392ae
f0127697:	e8 14 8b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012769c:	e8 e3 cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01276a1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276a4:	74 17                	je     f01276bd <test_kshrink+0x6a7>
f01276a6:	83 ec 04             	sub    $0x4,%esp
f01276a9:	68 c8 92 13 f0       	push   $0xf01392c8
f01276ae:	68 3e 0c 00 00       	push   $0xc3e
f01276b3:	68 ae 92 13 f0       	push   $0xf01392ae
f01276b8:	e8 f3 8a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276bd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276c0:	e8 19 53 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01276c5:	29 c3                	sub    %eax,%ebx
f01276c7:	89 d8                	mov    %ebx,%eax
f01276c9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01276ce:	74 17                	je     f01276e7 <test_kshrink+0x6d1>
f01276d0:	83 ec 04             	sub    $0x4,%esp
f01276d3:	68 30 93 13 f0       	push   $0xf0139330
f01276d8:	68 3f 0c 00 00       	push   $0xc3f
f01276dd:	68 ae 92 13 f0       	push   $0xf01392ae
f01276e2:	e8 c9 8a fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01276e7:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f01276ee:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01276f1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01276f7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01276fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127701:	eb 0e                	jmp    f0127711 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f0127703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127706:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127709:	01 d0                	add    %edx,%eax
f012770b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012770e:	ff 45 f4             	incl   -0xc(%ebp)
f0127711:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0127717:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012771a:	7f e7                	jg     f0127703 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012771c:	e8 bd 52 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127721:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127724:	e8 5b cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127729:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012772c:	83 ec 0c             	sub    $0xc,%esp
f012772f:	68 00 00 60 00       	push   $0x600000
f0127734:	e8 26 08 fe ff       	call   f0107f5f <kmalloc>
f0127739:	83 c4 10             	add    $0x10,%esp
f012773c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127742:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127748:	89 c1                	mov    %eax,%ecx
f012774a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127751:	10 00 00 
f0127754:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127759:	0f b6 d0             	movzbl %al,%edx
f012775c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127762:	01 d0                	add    %edx,%eax
f0127764:	48                   	dec    %eax
f0127765:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012776b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127771:	ba 00 00 00 00       	mov    $0x0,%edx
f0127776:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012777c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127782:	29 d0                	sub    %edx,%eax
f0127784:	89 c3                	mov    %eax,%ebx
f0127786:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012778d:	10 00 00 
f0127790:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127795:	0f b6 c0             	movzbl %al,%eax
f0127798:	c1 e0 04             	shl    $0x4,%eax
f012779b:	89 c2                	mov    %eax,%edx
f012779d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01277a3:	01 d0                	add    %edx,%eax
f01277a5:	48                   	dec    %eax
f01277a6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01277ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01277b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01277b7:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01277bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01277c3:	29 d0                	sub    %edx,%eax
f01277c5:	01 d8                	add    %ebx,%eax
f01277c7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01277cc:	39 c1                	cmp    %eax,%ecx
f01277ce:	74 17                	je     f01277e7 <test_kshrink+0x7d1>
f01277d0:	83 ec 04             	sub    $0x4,%esp
f01277d3:	68 94 93 13 f0       	push   $0xf0139394
f01277d8:	68 4b 0c 00 00       	push   $0xc4b
f01277dd:	68 ae 92 13 f0       	push   $0xf01392ae
f01277e2:	e8 c9 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277e7:	e8 98 ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f01277ec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01277ef:	74 17                	je     f0127808 <test_kshrink+0x7f2>
f01277f1:	83 ec 04             	sub    $0x4,%esp
f01277f4:	68 c8 92 13 f0       	push   $0xf01392c8
f01277f9:	68 4c 0c 00 00       	push   $0xc4c
f01277fe:	68 ae 92 13 f0       	push   $0xf01392ae
f0127803:	e8 a8 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127808:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012780b:	e8 ce 51 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127810:	29 c3                	sub    %eax,%ebx
f0127812:	89 d8                	mov    %ebx,%eax
f0127814:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127819:	74 17                	je     f0127832 <test_kshrink+0x81c>
f012781b:	83 ec 04             	sub    $0x4,%esp
f012781e:	68 30 93 13 f0       	push   $0xf0139330
f0127823:	68 4d 0c 00 00       	push   $0xc4d
f0127828:	68 ae 92 13 f0       	push   $0xf01392ae
f012782d:	e8 7e 89 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127832:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f0127839:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012783c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127842:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127848:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012784f:	eb 1a                	jmp    f012786b <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127851:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127854:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012785b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127861:	01 c2                	add    %eax,%edx
f0127863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127866:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127868:	ff 45 f4             	incl   -0xc(%ebp)
f012786b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127871:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127874:	7d db                	jge    f0127851 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127876:	e8 63 51 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012787b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012787e:	e8 01 ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127883:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127886:	83 ec 0c             	sub    $0xc,%esp
f0127889:	68 00 00 50 00       	push   $0x500000
f012788e:	e8 4e 07 fe ff       	call   f0107fe1 <kshrink>
f0127893:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127896:	e8 e9 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012789b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012789e:	74 19                	je     f01278b9 <test_kshrink+0x8a3>
f01278a0:	68 48 a0 13 f0       	push   $0xf013a048
f01278a5:	68 79 a0 13 f0       	push   $0xf013a079
f01278aa:	68 5d 0c 00 00       	push   $0xc5d
f01278af:	68 ae 92 13 f0       	push   $0xf01392ae
f01278b4:	e8 f7 88 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01278b9:	e8 20 51 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01278be:	89 c2                	mov    %eax,%edx
f01278c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01278c3:	29 c2                	sub    %eax,%edx
f01278c5:	89 d0                	mov    %edx,%eax
f01278c7:	3d 00 01 00 00       	cmp    $0x100,%eax
f01278cc:	74 19                	je     f01278e7 <test_kshrink+0x8d1>
f01278ce:	68 54 a1 13 f0       	push   $0xf013a154
f01278d3:	68 79 a0 13 f0       	push   $0xf013a079
f01278d8:	68 5e 0c 00 00       	push   $0xc5e
f01278dd:	68 ae 92 13 f0       	push   $0xf01392ae
f01278e2:	e8 c9 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f01278e7:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f01278ee:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01278f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278f8:	eb 37                	jmp    f0127931 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f01278fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01278fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127904:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012790a:	01 d0                	add    %edx,%eax
f012790c:	8b 10                	mov    (%eax),%edx
f012790e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127911:	39 c2                	cmp    %eax,%edx
f0127913:	74 19                	je     f012792e <test_kshrink+0x918>
f0127915:	68 84 a1 13 f0       	push   $0xf013a184
f012791a:	68 79 a0 13 f0       	push   $0xf013a079
f012791f:	68 66 0c 00 00       	push   $0xc66
f0127924:	68 ae 92 13 f0       	push   $0xf01392ae
f0127929:	e8 82 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012792e:	ff 45 f4             	incl   -0xc(%ebp)
f0127931:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127934:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f012793a:	7e be                	jle    f01278fa <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012793c:	83 ec 0c             	sub    $0xc,%esp
f012793f:	6a 03                	push   $0x3
f0127941:	e8 33 55 fe ff       	call   f010ce79 <sys_bypassPageFault>
f0127946:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0127949:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012794f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127952:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127955:	05 00 00 50 00       	add    $0x500000,%eax
f012795a:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012795d:	e8 05 55 fe ff       	call   f010ce67 <sys_rcr2>
f0127962:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127965:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012796b:	39 d0                	cmp    %edx,%eax
f012796d:	74 19                	je     f0127988 <test_kshrink+0x972>
f012796f:	68 90 a1 13 f0       	push   $0xf013a190
f0127974:	68 79 a0 13 f0       	push   $0xf013a079
f0127979:	68 6f 0c 00 00       	push   $0xc6f
f012797e:	68 ae 92 13 f0       	push   $0xf01392ae
f0127983:	e8 28 88 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0127988:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012798b:	05 00 10 50 00       	add    $0x501000,%eax
f0127990:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127993:	e8 cf 54 fe ff       	call   f010ce67 <sys_rcr2>
f0127998:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f012799b:	81 c2 00 10 50 00    	add    $0x501000,%edx
f01279a1:	39 d0                	cmp    %edx,%eax
f01279a3:	74 19                	je     f01279be <test_kshrink+0x9a8>
f01279a5:	68 b8 a1 13 f0       	push   $0xf013a1b8
f01279aa:	68 79 a0 13 f0       	push   $0xf013a079
f01279af:	68 72 0c 00 00       	push   $0xc72
f01279b4:	68 ae 92 13 f0       	push   $0xf01392ae
f01279b9:	e8 f2 87 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f01279be:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01279c1:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01279c6:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01279c9:	e8 99 54 fe ff       	call   f010ce67 <sys_rcr2>
f01279ce:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01279d1:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f01279d7:	39 d0                	cmp    %edx,%eax
f01279d9:	74 19                	je     f01279f4 <test_kshrink+0x9de>
f01279db:	68 e4 a1 13 f0       	push   $0xf013a1e4
f01279e0:	68 79 a0 13 f0       	push   $0xf013a079
f01279e5:	68 75 0c 00 00       	push   $0xc75
f01279ea:	68 ae 92 13 f0       	push   $0xf01392ae
f01279ef:	e8 bc 87 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01279f4:	83 ec 0c             	sub    $0xc,%esp
f01279f7:	6a 00                	push   $0x0
f01279f9:	e8 7b 54 fe ff       	call   f010ce79 <sys_bypassPageFault>
f01279fe:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127a01:	e8 d8 4f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127a06:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a09:	e8 76 cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a0e:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0127a11:	83 ec 0c             	sub    $0xc,%esp
f0127a14:	68 00 00 20 00       	push   $0x200000
f0127a19:	e8 c3 05 fe ff       	call   f0107fe1 <kshrink>
f0127a1e:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127a21:	e8 5e cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a26:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a29:	74 19                	je     f0127a44 <test_kshrink+0xa2e>
f0127a2b:	68 48 a0 13 f0       	push   $0xf013a048
f0127a30:	68 79 a0 13 f0       	push   $0xf013a079
f0127a35:	68 82 0c 00 00       	push   $0xc82
f0127a3a:	68 ae 92 13 f0       	push   $0xf01392ae
f0127a3f:	e8 6c 87 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0127a44:	e8 95 4f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127a49:	89 c2                	mov    %eax,%edx
f0127a4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127a4e:	29 c2                	sub    %eax,%edx
f0127a50:	89 d0                	mov    %edx,%eax
f0127a52:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127a57:	74 19                	je     f0127a72 <test_kshrink+0xa5c>
f0127a59:	68 10 a2 13 f0       	push   $0xf013a210
f0127a5e:	68 79 a0 13 f0       	push   $0xf013a079
f0127a63:	68 83 0c 00 00       	push   $0xc83
f0127a68:	68 ae 92 13 f0       	push   $0xf01392ae
f0127a6d:	e8 3e 87 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a72:	e8 67 4f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127a77:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a7a:	e8 05 cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127a82:	83 ec 0c             	sub    $0xc,%esp
f0127a85:	68 00 00 40 00       	push   $0x400000
f0127a8a:	e8 d0 04 fe ff       	call   f0107f5f <kmalloc>
f0127a8f:	83 c4 10             	add    $0x10,%esp
f0127a92:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127a98:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127a9f:	10 00 00 
f0127aa2:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127aa7:	0f b6 d0             	movzbl %al,%edx
f0127aaa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127ab0:	01 d0                	add    %edx,%eax
f0127ab2:	48                   	dec    %eax
f0127ab3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127ab9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ac4:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127aca:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127ad0:	29 d0                	sub    %edx,%eax
f0127ad2:	89 c1                	mov    %eax,%ecx
f0127ad4:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127adb:	10 00 00 
f0127ade:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127ae3:	0f b6 c0             	movzbl %al,%eax
f0127ae6:	c1 e0 04             	shl    $0x4,%eax
f0127ae9:	89 c2                	mov    %eax,%edx
f0127aeb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127af1:	01 d0                	add    %edx,%eax
f0127af3:	48                   	dec    %eax
f0127af4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127afa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127b00:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b05:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127b0b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127b11:	29 d0                	sub    %edx,%eax
f0127b13:	01 c8                	add    %ecx,%eax
f0127b15:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0127b1b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b21:	83 ec 04             	sub    $0x4,%esp
f0127b24:	52                   	push   %edx
f0127b25:	50                   	push   %eax
f0127b26:	68 40 a2 13 f0       	push   $0xf013a240
f0127b2b:	e8 01 93 fd ff       	call   f0100e31 <cprintf>
f0127b30:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127b33:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b39:	89 c1                	mov    %eax,%ecx
f0127b3b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127b42:	10 00 00 
f0127b45:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127b4a:	0f b6 d0             	movzbl %al,%edx
f0127b4d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127b53:	01 d0                	add    %edx,%eax
f0127b55:	48                   	dec    %eax
f0127b56:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127b5c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b62:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b67:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127b6d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b73:	29 d0                	sub    %edx,%eax
f0127b75:	89 c3                	mov    %eax,%ebx
f0127b77:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127b7e:	10 00 00 
f0127b81:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127b86:	0f b6 c0             	movzbl %al,%eax
f0127b89:	c1 e0 04             	shl    $0x4,%eax
f0127b8c:	89 c2                	mov    %eax,%edx
f0127b8e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127b94:	01 d0                	add    %edx,%eax
f0127b96:	48                   	dec    %eax
f0127b97:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127b9d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127ba3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ba8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127bae:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127bb4:	29 d0                	sub    %edx,%eax
f0127bb6:	01 d8                	add    %ebx,%eax
f0127bb8:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0127bbd:	39 c1                	cmp    %eax,%ecx
f0127bbf:	74 17                	je     f0127bd8 <test_kshrink+0xbc2>
f0127bc1:	83 ec 04             	sub    $0x4,%esp
f0127bc4:	68 5c a2 13 f0       	push   $0xf013a25c
f0127bc9:	68 8e 0c 00 00       	push   $0xc8e
f0127bce:	68 ae 92 13 f0       	push   $0xf01392ae
f0127bd3:	e8 d8 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bd8:	e8 a7 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127bdd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127be0:	74 17                	je     f0127bf9 <test_kshrink+0xbe3>
f0127be2:	83 ec 04             	sub    $0x4,%esp
f0127be5:	68 c8 92 13 f0       	push   $0xf01392c8
f0127bea:	68 8f 0c 00 00       	push   $0xc8f
f0127bef:	68 ae 92 13 f0       	push   $0xf01392ae
f0127bf4:	e8 b7 85 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127bf9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127bfc:	e8 dd 4d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127c01:	29 c3                	sub    %eax,%ebx
f0127c03:	89 d8                	mov    %ebx,%eax
f0127c05:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127c0a:	74 17                	je     f0127c23 <test_kshrink+0xc0d>
f0127c0c:	83 ec 04             	sub    $0x4,%esp
f0127c0f:	68 30 93 13 f0       	push   $0xf0139330
f0127c14:	68 90 0c 00 00       	push   $0xc90
f0127c19:	68 ae 92 13 f0       	push   $0xf01392ae
f0127c1e:	e8 8d 85 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127c23:	e8 b6 4d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127c28:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c2b:	e8 54 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c30:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127c33:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127c39:	83 ec 0c             	sub    $0xc,%esp
f0127c3c:	50                   	push   %eax
f0127c3d:	e8 37 03 fe ff       	call   f0107f79 <kfree>
f0127c42:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c45:	e8 3a ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c4a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c4d:	74 17                	je     f0127c66 <test_kshrink+0xc50>
f0127c4f:	83 ec 04             	sub    $0x4,%esp
f0127c52:	68 c8 92 13 f0       	push   $0xf01392c8
f0127c57:	68 9a 0c 00 00       	push   $0xc9a
f0127c5c:	68 ae 92 13 f0       	push   $0xf01392ae
f0127c61:	e8 4a 85 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127c66:	e8 73 4d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127c6b:	89 c2                	mov    %eax,%edx
f0127c6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127c70:	29 c2                	sub    %eax,%edx
f0127c72:	89 d0                	mov    %edx,%eax
f0127c74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127c79:	74 17                	je     f0127c92 <test_kshrink+0xc7c>
f0127c7b:	83 ec 04             	sub    $0x4,%esp
f0127c7e:	68 60 9b 13 f0       	push   $0xf0139b60
f0127c83:	68 9b 0c 00 00       	push   $0xc9b
f0127c88:	68 ae 92 13 f0       	push   $0xf01392ae
f0127c8d:	e8 1e 85 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127c92:	e8 47 4d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127c97:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c9a:	e8 e5 c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c9f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127ca2:	83 ec 0c             	sub    $0xc,%esp
f0127ca5:	68 00 b0 3f 00       	push   $0x3fb000
f0127caa:	e8 32 03 fe ff       	call   f0107fe1 <kshrink>
f0127caf:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127cb2:	e8 cd c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127cb7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127cba:	74 19                	je     f0127cd5 <test_kshrink+0xcbf>
f0127cbc:	68 48 a0 13 f0       	push   $0xf013a048
f0127cc1:	68 79 a0 13 f0       	push   $0xf013a079
f0127cc6:	68 a5 0c 00 00       	push   $0xca5
f0127ccb:	68 ae 92 13 f0       	push   $0xf01392ae
f0127cd0:	e8 db 84 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127cd5:	e8 04 4d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127cda:	89 c2                	mov    %eax,%edx
f0127cdc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127cdf:	29 c2                	sub    %eax,%edx
f0127ce1:	89 d0                	mov    %edx,%eax
f0127ce3:	83 f8 05             	cmp    $0x5,%eax
f0127ce6:	74 19                	je     f0127d01 <test_kshrink+0xceb>
f0127ce8:	68 b0 a2 13 f0       	push   $0xf013a2b0
f0127ced:	68 79 a0 13 f0       	push   $0xf013a079
f0127cf2:	68 a6 0c 00 00       	push   $0xca6
f0127cf7:	68 ae 92 13 f0       	push   $0xf01392ae
f0127cfc:	e8 af 84 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127d01:	83 ec 0c             	sub    $0xc,%esp
f0127d04:	68 0c a0 13 f0       	push   $0xf013a00c
f0127d09:	e8 23 91 fd ff       	call   f0100e31 <cprintf>
f0127d0e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127d11:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127d16:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127d19:	5b                   	pop    %ebx
f0127d1a:	5f                   	pop    %edi
f0127d1b:	5d                   	pop    %ebp
f0127d1c:	c3                   	ret    

f0127d1d <test_kfreelast>:


int test_kfreelast()
{
f0127d1d:	55                   	push   %ebp
f0127d1e:	89 e5                	mov    %esp,%ebp
f0127d20:	57                   	push   %edi
f0127d21:	53                   	push   %ebx
f0127d22:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0127d28:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127d2c:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127d30:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0127d36:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127d3c:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127d43:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127d4a:	e8 8f 4c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127d4f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127d52:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f0127d58:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d62:	89 d7                	mov    %edx,%edi
f0127d64:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0127d66:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f0127d6c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d71:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d76:	89 d7                	mov    %edx,%edi
f0127d78:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0127d7a:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f0127d80:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d85:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d8a:	89 d7                	mov    %edx,%edi
f0127d8c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d8e:	e8 4b 4c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127d93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d96:	e8 e9 c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127d9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127d9e:	83 ec 0c             	sub    $0xc,%esp
f0127da1:	68 00 fc 1f 00       	push   $0x1ffc00
f0127da6:	e8 b4 01 fe ff       	call   f0107f5f <kmalloc>
f0127dab:	83 c4 10             	add    $0x10,%esp
f0127dae:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127db4:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127dba:	89 c1                	mov    %eax,%ecx
f0127dbc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127dc3:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127dc8:	0f b6 d0             	movzbl %al,%edx
f0127dcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127dce:	01 d0                	add    %edx,%eax
f0127dd0:	48                   	dec    %eax
f0127dd1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127dd4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127dd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ddc:	f7 75 cc             	divl   -0x34(%ebp)
f0127ddf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127de2:	29 d0                	sub    %edx,%eax
f0127de4:	89 c3                	mov    %eax,%ebx
f0127de6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127ded:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127df2:	0f b6 c0             	movzbl %al,%eax
f0127df5:	c1 e0 04             	shl    $0x4,%eax
f0127df8:	89 c2                	mov    %eax,%edx
f0127dfa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127dfd:	01 d0                	add    %edx,%eax
f0127dff:	48                   	dec    %eax
f0127e00:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127e03:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127e06:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e0b:	f7 75 c4             	divl   -0x3c(%ebp)
f0127e0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127e11:	29 d0                	sub    %edx,%eax
f0127e13:	01 d8                	add    %ebx,%eax
f0127e15:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127e1a:	39 c1                	cmp    %eax,%ecx
f0127e1c:	74 17                	je     f0127e35 <test_kfreelast+0x118>
f0127e1e:	83 ec 04             	sub    $0x4,%esp
f0127e21:	68 94 93 13 f0       	push   $0xf0139394
f0127e26:	68 ca 0c 00 00       	push   $0xcca
f0127e2b:	68 ae 92 13 f0       	push   $0xf01392ae
f0127e30:	e8 7b 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e35:	e8 4a c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e3a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127e3d:	74 17                	je     f0127e56 <test_kfreelast+0x139>
f0127e3f:	83 ec 04             	sub    $0x4,%esp
f0127e42:	68 c8 92 13 f0       	push   $0xf01392c8
f0127e47:	68 cb 0c 00 00       	push   $0xccb
f0127e4c:	68 ae 92 13 f0       	push   $0xf01392ae
f0127e51:	e8 5a 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e56:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127e59:	e8 80 4b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127e5e:	29 c3                	sub    %eax,%ebx
f0127e60:	89 d8                	mov    %ebx,%eax
f0127e62:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e67:	74 17                	je     f0127e80 <test_kfreelast+0x163>
f0127e69:	83 ec 04             	sub    $0x4,%esp
f0127e6c:	68 30 93 13 f0       	push   $0xf0139330
f0127e71:	68 cc 0c 00 00       	push   $0xccc
f0127e76:	68 ae 92 13 f0       	push   $0xf01392ae
f0127e7b:	e8 30 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127e80:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0127e87:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e8a:	e8 4f 4b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127e8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e92:	e8 ed c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e97:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127e9a:	83 ec 0c             	sub    $0xc,%esp
f0127e9d:	68 00 fc 1f 00       	push   $0x1ffc00
f0127ea2:	e8 b8 00 fe ff       	call   f0107f5f <kmalloc>
f0127ea7:	83 c4 10             	add    $0x10,%esp
f0127eaa:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127eb0:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127eb6:	89 c1                	mov    %eax,%ecx
f0127eb8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127ebf:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127ec4:	0f b6 d0             	movzbl %al,%edx
f0127ec7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127eca:	01 d0                	add    %edx,%eax
f0127ecc:	48                   	dec    %eax
f0127ecd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127ed0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127ed3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ed8:	f7 75 bc             	divl   -0x44(%ebp)
f0127edb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127ede:	29 d0                	sub    %edx,%eax
f0127ee0:	89 c3                	mov    %eax,%ebx
f0127ee2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127ee9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127eee:	0f b6 c0             	movzbl %al,%eax
f0127ef1:	c1 e0 04             	shl    $0x4,%eax
f0127ef4:	89 c2                	mov    %eax,%edx
f0127ef6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127ef9:	01 d0                	add    %edx,%eax
f0127efb:	48                   	dec    %eax
f0127efc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127eff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127f02:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f07:	f7 75 b4             	divl   -0x4c(%ebp)
f0127f0a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127f0d:	29 d0                	sub    %edx,%eax
f0127f0f:	01 d8                	add    %ebx,%eax
f0127f11:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127f16:	39 c1                	cmp    %eax,%ecx
f0127f18:	74 17                	je     f0127f31 <test_kfreelast+0x214>
f0127f1a:	83 ec 04             	sub    $0x4,%esp
f0127f1d:	68 94 93 13 f0       	push   $0xf0139394
f0127f22:	68 d3 0c 00 00       	push   $0xcd3
f0127f27:	68 ae 92 13 f0       	push   $0xf01392ae
f0127f2c:	e8 7f 82 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f31:	e8 4e c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f36:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127f39:	74 17                	je     f0127f52 <test_kfreelast+0x235>
f0127f3b:	83 ec 04             	sub    $0x4,%esp
f0127f3e:	68 c8 92 13 f0       	push   $0xf01392c8
f0127f43:	68 d4 0c 00 00       	push   $0xcd4
f0127f48:	68 ae 92 13 f0       	push   $0xf01392ae
f0127f4d:	e8 5e 82 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f52:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127f55:	e8 84 4a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127f5a:	29 c3                	sub    %eax,%ebx
f0127f5c:	89 d8                	mov    %ebx,%eax
f0127f5e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f63:	74 17                	je     f0127f7c <test_kfreelast+0x25f>
f0127f65:	83 ec 04             	sub    $0x4,%esp
f0127f68:	68 30 93 13 f0       	push   $0xf0139330
f0127f6d:	68 d5 0c 00 00       	push   $0xcd5
f0127f72:	68 ae 92 13 f0       	push   $0xf01392ae
f0127f77:	e8 34 82 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127f7c:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0127f83:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f86:	e8 53 4a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0127f8b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f8e:	e8 f1 c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127f96:	83 ec 0c             	sub    $0xc,%esp
f0127f99:	68 00 08 00 00       	push   $0x800
f0127f9e:	e8 bc ff fd ff       	call   f0107f5f <kmalloc>
f0127fa3:	83 c4 10             	add    $0x10,%esp
f0127fa6:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127fac:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127fb2:	89 c1                	mov    %eax,%ecx
f0127fb4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127fbb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127fc0:	0f b6 d0             	movzbl %al,%edx
f0127fc3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127fc6:	01 d0                	add    %edx,%eax
f0127fc8:	48                   	dec    %eax
f0127fc9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127fcc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127fcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fd4:	f7 75 ac             	divl   -0x54(%ebp)
f0127fd7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127fda:	29 d0                	sub    %edx,%eax
f0127fdc:	89 c3                	mov    %eax,%ebx
f0127fde:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127fe5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0127fea:	0f b6 c0             	movzbl %al,%eax
f0127fed:	c1 e0 04             	shl    $0x4,%eax
f0127ff0:	89 c2                	mov    %eax,%edx
f0127ff2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127ff5:	01 d0                	add    %edx,%eax
f0127ff7:	48                   	dec    %eax
f0127ff8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127ffb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127ffe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128003:	f7 75 a4             	divl   -0x5c(%ebp)
f0128006:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128009:	29 d0                	sub    %edx,%eax
f012800b:	01 d8                	add    %ebx,%eax
f012800d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128012:	39 c1                	cmp    %eax,%ecx
f0128014:	74 17                	je     f012802d <test_kfreelast+0x310>
f0128016:	83 ec 04             	sub    $0x4,%esp
f0128019:	68 94 93 13 f0       	push   $0xf0139394
f012801e:	68 dc 0c 00 00       	push   $0xcdc
f0128023:	68 ae 92 13 f0       	push   $0xf01392ae
f0128028:	e8 83 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012802d:	e8 52 c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128032:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128035:	74 17                	je     f012804e <test_kfreelast+0x331>
f0128037:	83 ec 04             	sub    $0x4,%esp
f012803a:	68 c8 92 13 f0       	push   $0xf01392c8
f012803f:	68 dd 0c 00 00       	push   $0xcdd
f0128044:	68 ae 92 13 f0       	push   $0xf01392ae
f0128049:	e8 62 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012804e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128051:	e8 88 49 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128056:	29 c3                	sub    %eax,%ebx
f0128058:	89 d8                	mov    %ebx,%eax
f012805a:	83 f8 01             	cmp    $0x1,%eax
f012805d:	74 17                	je     f0128076 <test_kfreelast+0x359>
f012805f:	83 ec 04             	sub    $0x4,%esp
f0128062:	68 30 93 13 f0       	push   $0xf0139330
f0128067:	68 de 0c 00 00       	push   $0xcde
f012806c:	68 ae 92 13 f0       	push   $0xf01392ae
f0128071:	e8 3a 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128076:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012807d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128080:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128086:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128089:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128090:	eb 0e                	jmp    f01280a0 <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f0128092:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128095:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128098:	01 d0                	add    %edx,%eax
f012809a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012809d:	ff 45 f4             	incl   -0xc(%ebp)
f01280a0:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01280a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01280a9:	7f e7                	jg     f0128092 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01280ab:	e8 2e 49 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01280b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280b3:	e8 cc c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01280b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01280bb:	83 ec 0c             	sub    $0xc,%esp
f01280be:	68 00 08 00 00       	push   $0x800
f01280c3:	e8 97 fe fd ff       	call   f0107f5f <kmalloc>
f01280c8:	83 c4 10             	add    $0x10,%esp
f01280cb:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280d1:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01280d7:	89 c1                	mov    %eax,%ecx
f01280d9:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01280e0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01280e5:	0f b6 d0             	movzbl %al,%edx
f01280e8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01280eb:	01 d0                	add    %edx,%eax
f01280ed:	48                   	dec    %eax
f01280ee:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01280f1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01280f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01280f9:	f7 75 98             	divl   -0x68(%ebp)
f01280fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01280ff:	29 d0                	sub    %edx,%eax
f0128101:	89 c3                	mov    %eax,%ebx
f0128103:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012810a:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012810f:	0f b6 c0             	movzbl %al,%eax
f0128112:	c1 e0 04             	shl    $0x4,%eax
f0128115:	89 c2                	mov    %eax,%edx
f0128117:	8b 45 90             	mov    -0x70(%ebp),%eax
f012811a:	01 d0                	add    %edx,%eax
f012811c:	48                   	dec    %eax
f012811d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0128120:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128123:	ba 00 00 00 00       	mov    $0x0,%edx
f0128128:	f7 75 90             	divl   -0x70(%ebp)
f012812b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012812e:	29 d0                	sub    %edx,%eax
f0128130:	01 d8                	add    %ebx,%eax
f0128132:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128137:	39 c1                	cmp    %eax,%ecx
f0128139:	74 17                	je     f0128152 <test_kfreelast+0x435>
f012813b:	83 ec 04             	sub    $0x4,%esp
f012813e:	68 94 93 13 f0       	push   $0xf0139394
f0128143:	68 ea 0c 00 00       	push   $0xcea
f0128148:	68 ae 92 13 f0       	push   $0xf01392ae
f012814d:	e8 5e 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128152:	e8 2d c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128157:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012815a:	74 17                	je     f0128173 <test_kfreelast+0x456>
f012815c:	83 ec 04             	sub    $0x4,%esp
f012815f:	68 c8 92 13 f0       	push   $0xf01392c8
f0128164:	68 eb 0c 00 00       	push   $0xceb
f0128169:	68 ae 92 13 f0       	push   $0xf01392ae
f012816e:	e8 3d 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128173:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128176:	e8 63 48 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012817b:	29 c3                	sub    %eax,%ebx
f012817d:	89 d8                	mov    %ebx,%eax
f012817f:	83 f8 01             	cmp    $0x1,%eax
f0128182:	74 17                	je     f012819b <test_kfreelast+0x47e>
f0128184:	83 ec 04             	sub    $0x4,%esp
f0128187:	68 30 93 13 f0       	push   $0xf0139330
f012818c:	68 ec 0c 00 00       	push   $0xcec
f0128191:	68 ae 92 13 f0       	push   $0xf01392ae
f0128196:	e8 15 80 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012819b:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f01281a2:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01281a5:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01281ab:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01281ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01281b5:	eb 0e                	jmp    f01281c5 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f01281b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01281ba:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01281bd:	01 d0                	add    %edx,%eax
f01281bf:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01281c2:	ff 45 f4             	incl   -0xc(%ebp)
f01281c5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01281cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01281ce:	7f e7                	jg     f01281b7 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01281d0:	e8 09 48 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01281d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281d8:	e8 a7 c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01281dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01281e0:	83 ec 0c             	sub    $0xc,%esp
f01281e3:	68 00 1c 00 00       	push   $0x1c00
f01281e8:	e8 72 fd fd ff       	call   f0107f5f <kmalloc>
f01281ed:	83 c4 10             	add    $0x10,%esp
f01281f0:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01281f6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01281fc:	89 c1                	mov    %eax,%ecx
f01281fe:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128205:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012820a:	0f b6 d0             	movzbl %al,%edx
f012820d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128210:	01 d0                	add    %edx,%eax
f0128212:	48                   	dec    %eax
f0128213:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128216:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128219:	ba 00 00 00 00       	mov    $0x0,%edx
f012821e:	f7 75 88             	divl   -0x78(%ebp)
f0128221:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128224:	29 d0                	sub    %edx,%eax
f0128226:	89 c3                	mov    %eax,%ebx
f0128228:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012822f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128234:	0f b6 c0             	movzbl %al,%eax
f0128237:	c1 e0 04             	shl    $0x4,%eax
f012823a:	89 c2                	mov    %eax,%edx
f012823c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012823f:	01 d0                	add    %edx,%eax
f0128241:	48                   	dec    %eax
f0128242:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128248:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012824e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128253:	f7 75 80             	divl   -0x80(%ebp)
f0128256:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012825c:	29 d0                	sub    %edx,%eax
f012825e:	01 d8                	add    %ebx,%eax
f0128260:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128265:	39 c1                	cmp    %eax,%ecx
f0128267:	74 17                	je     f0128280 <test_kfreelast+0x563>
f0128269:	83 ec 04             	sub    $0x4,%esp
f012826c:	68 94 93 13 f0       	push   $0xf0139394
f0128271:	68 f8 0c 00 00       	push   $0xcf8
f0128276:	68 ae 92 13 f0       	push   $0xf01392ae
f012827b:	e8 30 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128280:	e8 ff c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128285:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128288:	74 17                	je     f01282a1 <test_kfreelast+0x584>
f012828a:	83 ec 04             	sub    $0x4,%esp
f012828d:	68 c8 92 13 f0       	push   $0xf01392c8
f0128292:	68 f9 0c 00 00       	push   $0xcf9
f0128297:	68 ae 92 13 f0       	push   $0xf01392ae
f012829c:	e8 0f 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01282a1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01282a4:	e8 35 47 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01282a9:	29 c3                	sub    %eax,%ebx
f01282ab:	89 d8                	mov    %ebx,%eax
f01282ad:	83 f8 02             	cmp    $0x2,%eax
f01282b0:	74 17                	je     f01282c9 <test_kfreelast+0x5ac>
f01282b2:	83 ec 04             	sub    $0x4,%esp
f01282b5:	68 30 93 13 f0       	push   $0xf0139330
f01282ba:	68 fa 0c 00 00       	push   $0xcfa
f01282bf:	68 ae 92 13 f0       	push   $0xf01392ae
f01282c4:	e8 e7 7e fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01282c9:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f01282d0:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01282d3:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01282d9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01282dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01282e3:	eb 0e                	jmp    f01282f3 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f01282e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01282e8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01282eb:	01 d0                	add    %edx,%eax
f01282ed:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01282f0:	ff 45 f4             	incl   -0xc(%ebp)
f01282f3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01282f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01282fc:	7f e7                	jg     f01282e5 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01282fe:	e8 db 46 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128303:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128306:	e8 79 c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012830b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012830e:	83 ec 0c             	sub    $0xc,%esp
f0128311:	68 00 fc 2f 00       	push   $0x2ffc00
f0128316:	e8 44 fc fd ff       	call   f0107f5f <kmalloc>
f012831b:	83 c4 10             	add    $0x10,%esp
f012831e:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128324:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012832a:	89 c1                	mov    %eax,%ecx
f012832c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128333:	10 00 00 
f0128336:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012833b:	0f b6 d0             	movzbl %al,%edx
f012833e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128344:	01 d0                	add    %edx,%eax
f0128346:	48                   	dec    %eax
f0128347:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012834d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128353:	ba 00 00 00 00       	mov    $0x0,%edx
f0128358:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012835e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128364:	29 d0                	sub    %edx,%eax
f0128366:	89 c3                	mov    %eax,%ebx
f0128368:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012836f:	10 00 00 
f0128372:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128377:	0f b6 c0             	movzbl %al,%eax
f012837a:	c1 e0 04             	shl    $0x4,%eax
f012837d:	89 c2                	mov    %eax,%edx
f012837f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128385:	01 d0                	add    %edx,%eax
f0128387:	48                   	dec    %eax
f0128388:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012838e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128394:	ba 00 00 00 00       	mov    $0x0,%edx
f0128399:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012839f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01283a5:	29 d0                	sub    %edx,%eax
f01283a7:	01 d8                	add    %ebx,%eax
f01283a9:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01283ae:	39 c1                	cmp    %eax,%ecx
f01283b0:	74 17                	je     f01283c9 <test_kfreelast+0x6ac>
f01283b2:	83 ec 04             	sub    $0x4,%esp
f01283b5:	68 94 93 13 f0       	push   $0xf0139394
f01283ba:	68 06 0d 00 00       	push   $0xd06
f01283bf:	68 ae 92 13 f0       	push   $0xf01392ae
f01283c4:	e8 e7 7d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283c9:	e8 b6 c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01283ce:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01283d1:	74 17                	je     f01283ea <test_kfreelast+0x6cd>
f01283d3:	83 ec 04             	sub    $0x4,%esp
f01283d6:	68 c8 92 13 f0       	push   $0xf01392c8
f01283db:	68 07 0d 00 00       	push   $0xd07
f01283e0:	68 ae 92 13 f0       	push   $0xf01392ae
f01283e5:	e8 c6 7d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01283ea:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01283ed:	e8 ec 45 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01283f2:	29 c3                	sub    %eax,%ebx
f01283f4:	89 d8                	mov    %ebx,%eax
f01283f6:	3d 00 03 00 00       	cmp    $0x300,%eax
f01283fb:	74 17                	je     f0128414 <test_kfreelast+0x6f7>
f01283fd:	83 ec 04             	sub    $0x4,%esp
f0128400:	68 30 93 13 f0       	push   $0xf0139330
f0128405:	68 08 0d 00 00       	push   $0xd08
f012840a:	68 ae 92 13 f0       	push   $0xf01392ae
f012840f:	e8 9c 7d fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128414:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f012841b:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012841e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128424:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128427:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012842e:	eb 0e                	jmp    f012843e <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f0128430:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128433:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128436:	01 d0                	add    %edx,%eax
f0128438:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012843b:	ff 45 f4             	incl   -0xc(%ebp)
f012843e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128444:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128447:	7f e7                	jg     f0128430 <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128449:	e8 90 45 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012844e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128451:	e8 2e c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128456:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0128459:	83 ec 0c             	sub    $0xc,%esp
f012845c:	68 00 fc 5f 00       	push   $0x5ffc00
f0128461:	e8 f9 fa fd ff       	call   f0107f5f <kmalloc>
f0128466:	83 c4 10             	add    $0x10,%esp
f0128469:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012846f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128475:	89 c1                	mov    %eax,%ecx
f0128477:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012847e:	10 00 00 
f0128481:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128486:	0f b6 d0             	movzbl %al,%edx
f0128489:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012848f:	01 d0                	add    %edx,%eax
f0128491:	48                   	dec    %eax
f0128492:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128498:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012849e:	ba 00 00 00 00       	mov    $0x0,%edx
f01284a3:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01284a9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01284af:	29 d0                	sub    %edx,%eax
f01284b1:	89 c3                	mov    %eax,%ebx
f01284b3:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01284ba:	10 00 00 
f01284bd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01284c2:	0f b6 c0             	movzbl %al,%eax
f01284c5:	c1 e0 04             	shl    $0x4,%eax
f01284c8:	89 c2                	mov    %eax,%edx
f01284ca:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01284d0:	01 d0                	add    %edx,%eax
f01284d2:	48                   	dec    %eax
f01284d3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01284d9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01284df:	ba 00 00 00 00       	mov    $0x0,%edx
f01284e4:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01284ea:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01284f0:	29 d0                	sub    %edx,%eax
f01284f2:	01 d8                	add    %ebx,%eax
f01284f4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01284f9:	39 c1                	cmp    %eax,%ecx
f01284fb:	74 17                	je     f0128514 <test_kfreelast+0x7f7>
f01284fd:	83 ec 04             	sub    $0x4,%esp
f0128500:	68 94 93 13 f0       	push   $0xf0139394
f0128505:	68 14 0d 00 00       	push   $0xd14
f012850a:	68 ae 92 13 f0       	push   $0xf01392ae
f012850f:	e8 9c 7c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128514:	e8 6b c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128519:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012851c:	74 17                	je     f0128535 <test_kfreelast+0x818>
f012851e:	83 ec 04             	sub    $0x4,%esp
f0128521:	68 c8 92 13 f0       	push   $0xf01392c8
f0128526:	68 15 0d 00 00       	push   $0xd15
f012852b:	68 ae 92 13 f0       	push   $0xf01392ae
f0128530:	e8 7b 7c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128535:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128538:	e8 a1 44 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012853d:	29 c3                	sub    %eax,%ebx
f012853f:	89 d8                	mov    %ebx,%eax
f0128541:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128546:	74 17                	je     f012855f <test_kfreelast+0x842>
f0128548:	83 ec 04             	sub    $0x4,%esp
f012854b:	68 30 93 13 f0       	push   $0xf0139330
f0128550:	68 16 0d 00 00       	push   $0xd16
f0128555:	68 ae 92 13 f0       	push   $0xf01392ae
f012855a:	e8 51 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012855f:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f0128566:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0128569:	e8 70 44 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012856e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128571:	e8 0e c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128576:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0128579:	83 ec 0c             	sub    $0xc,%esp
f012857c:	68 00 38 00 00       	push   $0x3800
f0128581:	e8 d9 f9 fd ff       	call   f0107f5f <kmalloc>
f0128586:	83 c4 10             	add    $0x10,%esp
f0128589:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012858f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128595:	89 c1                	mov    %eax,%ecx
f0128597:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012859e:	10 00 00 
f01285a1:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01285a6:	0f b6 d0             	movzbl %al,%edx
f01285a9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01285af:	01 d0                	add    %edx,%eax
f01285b1:	48                   	dec    %eax
f01285b2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01285b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285be:	ba 00 00 00 00       	mov    $0x0,%edx
f01285c3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01285c9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285cf:	29 d0                	sub    %edx,%eax
f01285d1:	89 c3                	mov    %eax,%ebx
f01285d3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01285da:	10 00 00 
f01285dd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01285e2:	0f b6 c0             	movzbl %al,%eax
f01285e5:	c1 e0 04             	shl    $0x4,%eax
f01285e8:	89 c2                	mov    %eax,%edx
f01285ea:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01285f0:	01 d0                	add    %edx,%eax
f01285f2:	48                   	dec    %eax
f01285f3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01285f9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01285ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0128604:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012860a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128610:	29 d0                	sub    %edx,%eax
f0128612:	01 d8                	add    %ebx,%eax
f0128614:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0128619:	39 c1                	cmp    %eax,%ecx
f012861b:	74 17                	je     f0128634 <test_kfreelast+0x917>
f012861d:	83 ec 04             	sub    $0x4,%esp
f0128620:	68 94 93 13 f0       	push   $0xf0139394
f0128625:	68 1d 0d 00 00       	push   $0xd1d
f012862a:	68 ae 92 13 f0       	push   $0xf01392ae
f012862f:	e8 7c 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128634:	e8 4b c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128639:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012863c:	74 17                	je     f0128655 <test_kfreelast+0x938>
f012863e:	83 ec 04             	sub    $0x4,%esp
f0128641:	68 c8 92 13 f0       	push   $0xf01392c8
f0128646:	68 1e 0d 00 00       	push   $0xd1e
f012864b:	68 ae 92 13 f0       	push   $0xf01392ae
f0128650:	e8 5b 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128655:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128658:	e8 81 43 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012865d:	29 c3                	sub    %eax,%ebx
f012865f:	89 d8                	mov    %ebx,%eax
f0128661:	83 f8 04             	cmp    $0x4,%eax
f0128664:	74 17                	je     f012867d <test_kfreelast+0x960>
f0128666:	83 ec 04             	sub    $0x4,%esp
f0128669:	68 30 93 13 f0       	push   $0xf0139330
f012866e:	68 1f 0d 00 00       	push   $0xd1f
f0128673:	68 ae 92 13 f0       	push   $0xf01392ae
f0128678:	e8 33 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012867d:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128684:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128687:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012868d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128690:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128697:	eb 0e                	jmp    f01286a7 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f0128699:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012869c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012869f:	01 d0                	add    %edx,%eax
f01286a1:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01286a4:	ff 45 f4             	incl   -0xc(%ebp)
f01286a7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01286ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01286b0:	7f e7                	jg     f0128699 <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01286b2:	e8 27 43 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01286b7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01286bd:	e8 c2 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01286c2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f01286c8:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01286ce:	83 ec 0c             	sub    $0xc,%esp
f01286d1:	50                   	push   %eax
f01286d2:	e8 a2 f8 fd ff       	call   f0107f79 <kfree>
f01286d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01286da:	e8 a5 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01286df:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01286e5:	74 17                	je     f01286fe <test_kfreelast+0x9e1>
f01286e7:	83 ec 04             	sub    $0x4,%esp
f01286ea:	68 c8 92 13 f0       	push   $0xf01392c8
f01286ef:	68 2e 0d 00 00       	push   $0xd2e
f01286f4:	68 ae 92 13 f0       	push   $0xf01392ae
f01286f9:	e8 b2 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01286fe:	e8 db 42 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128703:	89 c2                	mov    %eax,%edx
f0128705:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012870b:	29 c2                	sub    %eax,%edx
f012870d:	89 d0                	mov    %edx,%eax
f012870f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128714:	74 17                	je     f012872d <test_kfreelast+0xa10>
f0128716:	83 ec 04             	sub    $0x4,%esp
f0128719:	68 38 9a 13 f0       	push   $0xf0139a38
f012871e:	68 2f 0d 00 00       	push   $0xd2f
f0128723:	68 ae 92 13 f0       	push   $0xf01392ae
f0128728:	e8 83 7a fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012872d:	e8 ac 42 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128732:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128738:	e8 47 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f012873d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f0128743:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0128749:	83 ec 0c             	sub    $0xc,%esp
f012874c:	50                   	push   %eax
f012874d:	e8 27 f8 fd ff       	call   f0107f79 <kfree>
f0128752:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128755:	e8 2a bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f012875a:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128760:	74 17                	je     f0128779 <test_kfreelast+0xa5c>
f0128762:	83 ec 04             	sub    $0x4,%esp
f0128765:	68 c8 92 13 f0       	push   $0xf01392c8
f012876a:	68 35 0d 00 00       	push   $0xd35
f012876f:	68 ae 92 13 f0       	push   $0xf01392ae
f0128774:	e8 37 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0128779:	e8 60 42 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012877e:	89 c2                	mov    %eax,%edx
f0128780:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128786:	29 c2                	sub    %eax,%edx
f0128788:	89 d0                	mov    %edx,%eax
f012878a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012878f:	74 17                	je     f01287a8 <test_kfreelast+0xa8b>
f0128791:	83 ec 04             	sub    $0x4,%esp
f0128794:	68 38 9a 13 f0       	push   $0xf0139a38
f0128799:	68 36 0d 00 00       	push   $0xd36
f012879e:	68 ae 92 13 f0       	push   $0xf01392ae
f01287a3:	e8 08 7a fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01287a8:	e8 31 42 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01287ad:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287b3:	e8 cc be fd ff       	call   f0104684 <pf_calculate_free_frames>
f01287b8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f01287be:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01287c4:	83 ec 0c             	sub    $0xc,%esp
f01287c7:	50                   	push   %eax
f01287c8:	e8 ac f7 fd ff       	call   f0107f79 <kfree>
f01287cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287d0:	e8 af be fd ff       	call   f0104684 <pf_calculate_free_frames>
f01287d5:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f01287db:	74 17                	je     f01287f4 <test_kfreelast+0xad7>
f01287dd:	83 ec 04             	sub    $0x4,%esp
f01287e0:	68 c8 92 13 f0       	push   $0xf01392c8
f01287e5:	68 3c 0d 00 00       	push   $0xd3c
f01287ea:	68 ae 92 13 f0       	push   $0xf01392ae
f01287ef:	e8 bc 79 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01287f4:	e8 e5 41 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01287f9:	89 c2                	mov    %eax,%edx
f01287fb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128801:	29 c2                	sub    %eax,%edx
f0128803:	89 d0                	mov    %edx,%eax
f0128805:	3d 00 06 00 00       	cmp    $0x600,%eax
f012880a:	74 17                	je     f0128823 <test_kfreelast+0xb06>
f012880c:	83 ec 04             	sub    $0x4,%esp
f012880f:	68 38 9a 13 f0       	push   $0xf0139a38
f0128814:	68 3d 0d 00 00       	push   $0xd3d
f0128819:	68 ae 92 13 f0       	push   $0xf01392ae
f012881e:	e8 8d 79 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128823:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128829:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012882c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128833:	eb 1e                	jmp    f0128853 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128835:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012883b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012883e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128841:	01 c8                	add    %ecx,%eax
f0128843:	8a 00                	mov    (%eax),%al
f0128845:	0f be c0             	movsbl %al,%eax
f0128848:	01 d0                	add    %edx,%eax
f012884a:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128850:	ff 45 f4             	incl   -0xc(%ebp)
f0128853:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128859:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012885c:	7f d7                	jg     f0128835 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012885e:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128864:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012886a:	01 c0                	add    %eax,%eax
f012886c:	39 c2                	cmp    %eax,%edx
f012886e:	74 17                	je     f0128887 <test_kfreelast+0xb6a>
f0128870:	83 ec 04             	sub    $0x4,%esp
f0128873:	68 94 9a 13 f0       	push   $0xf0139a94
f0128878:	68 48 0d 00 00       	push   $0xd48
f012887d:	68 ae 92 13 f0       	push   $0xf01392ae
f0128882:	e8 29 79 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128887:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012888d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128890:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128897:	eb 1e                	jmp    f01288b7 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f0128899:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f012889f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01288a2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01288a5:	01 c8                	add    %ecx,%eax
f01288a7:	8a 00                	mov    (%eax),%al
f01288a9:	0f be c0             	movsbl %al,%eax
f01288ac:	01 d0                	add    %edx,%eax
f01288ae:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01288b4:	ff 45 f4             	incl   -0xc(%ebp)
f01288b7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01288bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288c0:	7f d7                	jg     f0128899 <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01288c2:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f01288c8:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01288ce:	89 c1                	mov    %eax,%ecx
f01288d0:	01 c9                	add    %ecx,%ecx
f01288d2:	01 c8                	add    %ecx,%eax
f01288d4:	39 c2                	cmp    %eax,%edx
f01288d6:	74 17                	je     f01288ef <test_kfreelast+0xbd2>
f01288d8:	83 ec 04             	sub    $0x4,%esp
f01288db:	68 94 9a 13 f0       	push   $0xf0139a94
f01288e0:	68 50 0d 00 00       	push   $0xd50
f01288e5:	68 ae 92 13 f0       	push   $0xf01392ae
f01288ea:	e8 c1 78 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01288ef:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01288f5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01288f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288ff:	eb 1e                	jmp    f012891f <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128901:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0128907:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012890a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012890d:	01 c8                	add    %ecx,%eax
f012890f:	8a 00                	mov    (%eax),%al
f0128911:	0f be c0             	movsbl %al,%eax
f0128914:	01 d0                	add    %edx,%eax
f0128916:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012891c:	ff 45 f4             	incl   -0xc(%ebp)
f012891f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128925:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128928:	7f d7                	jg     f0128901 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012892a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128930:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0128936:	c1 e2 02             	shl    $0x2,%edx
f0128939:	39 d0                	cmp    %edx,%eax
f012893b:	74 17                	je     f0128954 <test_kfreelast+0xc37>
f012893d:	83 ec 04             	sub    $0x4,%esp
f0128940:	68 94 9a 13 f0       	push   $0xf0139a94
f0128945:	68 58 0d 00 00       	push   $0xd58
f012894a:	68 ae 92 13 f0       	push   $0xf01392ae
f012894f:	e8 5c 78 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128954:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012895a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012895d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128964:	eb 1e                	jmp    f0128984 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128966:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f012896c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012896f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128972:	01 c8                	add    %ecx,%eax
f0128974:	8a 00                	mov    (%eax),%al
f0128976:	0f be c0             	movsbl %al,%eax
f0128979:	01 d0                	add    %edx,%eax
f012897b:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128981:	ff 45 f4             	incl   -0xc(%ebp)
f0128984:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012898a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012898d:	7f d7                	jg     f0128966 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012898f:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128995:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f012899b:	89 d0                	mov    %edx,%eax
f012899d:	c1 e0 02             	shl    $0x2,%eax
f01289a0:	01 d0                	add    %edx,%eax
f01289a2:	39 c1                	cmp    %eax,%ecx
f01289a4:	74 17                	je     f01289bd <test_kfreelast+0xca0>
f01289a6:	83 ec 04             	sub    $0x4,%esp
f01289a9:	68 94 9a 13 f0       	push   $0xf0139a94
f01289ae:	68 60 0d 00 00       	push   $0xd60
f01289b3:	68 ae 92 13 f0       	push   $0xf01392ae
f01289b8:	e8 f3 77 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01289bd:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01289c3:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01289c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01289cd:	eb 1e                	jmp    f01289ed <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f01289cf:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f01289d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01289d8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01289db:	01 c8                	add    %ecx,%eax
f01289dd:	8a 00                	mov    (%eax),%al
f01289df:	0f be c0             	movsbl %al,%eax
f01289e2:	01 d0                	add    %edx,%eax
f01289e4:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01289ea:	ff 45 f4             	incl   -0xc(%ebp)
f01289ed:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01289f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01289f6:	7f d7                	jg     f01289cf <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01289f8:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f01289fe:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f0128a04:	89 d0                	mov    %edx,%eax
f0128a06:	01 c0                	add    %eax,%eax
f0128a08:	01 d0                	add    %edx,%eax
f0128a0a:	01 c0                	add    %eax,%eax
f0128a0c:	01 d0                	add    %edx,%eax
f0128a0e:	39 c1                	cmp    %eax,%ecx
f0128a10:	74 17                	je     f0128a29 <test_kfreelast+0xd0c>
f0128a12:	83 ec 04             	sub    $0x4,%esp
f0128a15:	68 94 9a 13 f0       	push   $0xf0139a94
f0128a1a:	68 68 0d 00 00       	push   $0xd68
f0128a1f:	68 ae 92 13 f0       	push   $0xf01392ae
f0128a24:	e8 87 77 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0128a29:	e8 b0 3f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128a2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a31:	e8 4e bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128a36:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0128a39:	83 ec 0c             	sub    $0xc,%esp
f0128a3c:	68 00 50 00 00       	push   $0x5000
f0128a41:	e8 19 f5 fd ff       	call   f0107f5f <kmalloc>
f0128a46:	83 c4 10             	add    $0x10,%esp
f0128a49:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a4f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128a55:	89 c1                	mov    %eax,%ecx
f0128a57:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128a5e:	10 00 00 
f0128a61:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128a66:	0f b6 d0             	movzbl %al,%edx
f0128a69:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128a6f:	01 d0                	add    %edx,%eax
f0128a71:	48                   	dec    %eax
f0128a72:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128a78:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128a7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a83:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128a89:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128a8f:	29 d0                	sub    %edx,%eax
f0128a91:	89 c3                	mov    %eax,%ebx
f0128a93:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128a9a:	10 00 00 
f0128a9d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128aa2:	0f b6 c0             	movzbl %al,%eax
f0128aa5:	c1 e0 04             	shl    $0x4,%eax
f0128aa8:	89 c2                	mov    %eax,%edx
f0128aaa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128ab0:	01 d0                	add    %edx,%eax
f0128ab2:	48                   	dec    %eax
f0128ab3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128ab9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ac4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128aca:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128ad0:	29 d0                	sub    %edx,%eax
f0128ad2:	01 d8                	add    %ebx,%eax
f0128ad4:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128ad9:	39 c1                	cmp    %eax,%ecx
f0128adb:	74 17                	je     f0128af4 <test_kfreelast+0xdd7>
f0128add:	83 ec 04             	sub    $0x4,%esp
f0128ae0:	68 94 93 13 f0       	push   $0xf0139394
f0128ae5:	68 71 0d 00 00       	push   $0xd71
f0128aea:	68 ae 92 13 f0       	push   $0xf01392ae
f0128aef:	e8 bc 76 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128af4:	e8 8b bb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128af9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128afc:	74 17                	je     f0128b15 <test_kfreelast+0xdf8>
f0128afe:	83 ec 04             	sub    $0x4,%esp
f0128b01:	68 c8 92 13 f0       	push   $0xf01392c8
f0128b06:	68 72 0d 00 00       	push   $0xd72
f0128b0b:	68 ae 92 13 f0       	push   $0xf01392ae
f0128b10:	e8 9b 76 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b15:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128b18:	e8 c1 3e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128b1d:	29 c3                	sub    %eax,%ebx
f0128b1f:	89 d8                	mov    %ebx,%eax
f0128b21:	83 f8 05             	cmp    $0x5,%eax
f0128b24:	74 17                	je     f0128b3d <test_kfreelast+0xe20>
f0128b26:	83 ec 04             	sub    $0x4,%esp
f0128b29:	68 30 93 13 f0       	push   $0xf0139330
f0128b2e:	68 73 0d 00 00       	push   $0xd73
f0128b33:	68 ae 92 13 f0       	push   $0xf01392ae
f0128b38:	e8 73 76 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128b3d:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128b44:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0128b47:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128b4d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128b50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b57:	eb 0e                	jmp    f0128b67 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f0128b59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128b5c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b5f:	01 d0                	add    %edx,%eax
f0128b61:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128b64:	ff 45 f4             	incl   -0xc(%ebp)
f0128b67:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0128b6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b70:	7f e7                	jg     f0128b59 <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b72:	e8 67 3e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128b77:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b7a:	e8 05 bb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128b7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128b82:	83 ec 0c             	sub    $0xc,%esp
f0128b85:	68 00 00 10 00       	push   $0x100000
f0128b8a:	e8 d0 f3 fd ff       	call   f0107f5f <kmalloc>
f0128b8f:	83 c4 10             	add    $0x10,%esp
f0128b92:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b98:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128b9e:	89 c1                	mov    %eax,%ecx
f0128ba0:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128ba7:	10 00 00 
f0128baa:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128baf:	0f b6 d0             	movzbl %al,%edx
f0128bb2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128bb8:	01 d0                	add    %edx,%eax
f0128bba:	48                   	dec    %eax
f0128bbb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128bc1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128bc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bcc:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128bd2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128bd8:	29 d0                	sub    %edx,%eax
f0128bda:	89 c3                	mov    %eax,%ebx
f0128bdc:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128be3:	10 00 00 
f0128be6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128beb:	0f b6 c0             	movzbl %al,%eax
f0128bee:	c1 e0 04             	shl    $0x4,%eax
f0128bf1:	89 c2                	mov    %eax,%edx
f0128bf3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128bf9:	01 d0                	add    %edx,%eax
f0128bfb:	48                   	dec    %eax
f0128bfc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128c02:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128c08:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c0d:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128c13:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128c19:	29 d0                	sub    %edx,%eax
f0128c1b:	01 d8                	add    %ebx,%eax
f0128c1d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128c22:	39 c1                	cmp    %eax,%ecx
f0128c24:	74 17                	je     f0128c3d <test_kfreelast+0xf20>
f0128c26:	83 ec 04             	sub    $0x4,%esp
f0128c29:	68 94 93 13 f0       	push   $0xf0139394
f0128c2e:	68 7f 0d 00 00       	push   $0xd7f
f0128c33:	68 ae 92 13 f0       	push   $0xf01392ae
f0128c38:	e8 73 75 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c3d:	e8 42 ba fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128c42:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c45:	74 17                	je     f0128c5e <test_kfreelast+0xf41>
f0128c47:	83 ec 04             	sub    $0x4,%esp
f0128c4a:	68 c8 92 13 f0       	push   $0xf01392c8
f0128c4f:	68 80 0d 00 00       	push   $0xd80
f0128c54:	68 ae 92 13 f0       	push   $0xf01392ae
f0128c59:	e8 52 75 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c5e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128c61:	e8 78 3d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128c66:	29 c3                	sub    %eax,%ebx
f0128c68:	89 d8                	mov    %ebx,%eax
f0128c6a:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128c6f:	74 17                	je     f0128c88 <test_kfreelast+0xf6b>
f0128c71:	83 ec 04             	sub    $0x4,%esp
f0128c74:	68 30 93 13 f0       	push   $0xf0139330
f0128c79:	68 81 0d 00 00       	push   $0xd81
f0128c7e:	68 ae 92 13 f0       	push   $0xf01392ae
f0128c83:	e8 28 75 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128c88:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f0128c8f:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128c92:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128c98:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0128c9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ca2:	eb 0e                	jmp    f0128cb2 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128ca4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ca7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128caa:	01 d0                	add    %edx,%eax
f0128cac:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0128caf:	ff 45 f4             	incl   -0xc(%ebp)
f0128cb2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128cb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128cbb:	7f e7                	jg     f0128ca4 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0128cbd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128cc4:	e8 15 3d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128cc9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ccc:	e8 b3 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128cd1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128cd4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128cda:	83 ec 0c             	sub    $0xc,%esp
f0128cdd:	50                   	push   %eax
f0128cde:	e8 96 f2 fd ff       	call   f0107f79 <kfree>
f0128ce3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ce6:	e8 99 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ceb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128cee:	74 17                	je     f0128d07 <test_kfreelast+0xfea>
f0128cf0:	83 ec 04             	sub    $0x4,%esp
f0128cf3:	68 c8 92 13 f0       	push   $0xf01392c8
f0128cf8:	68 91 0d 00 00       	push   $0xd91
f0128cfd:	68 ae 92 13 f0       	push   $0xf01392ae
f0128d02:	e8 a9 74 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128d07:	e8 d2 3c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128d0c:	89 c2                	mov    %eax,%edx
f0128d0e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128d11:	29 c2                	sub    %eax,%edx
f0128d13:	89 d0                	mov    %edx,%eax
f0128d15:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128d1a:	74 17                	je     f0128d33 <test_kfreelast+0x1016>
f0128d1c:	83 ec 04             	sub    $0x4,%esp
f0128d1f:	68 38 9a 13 f0       	push   $0xf0139a38
f0128d24:	68 92 0d 00 00       	push   $0xd92
f0128d29:	68 ae 92 13 f0       	push   $0xf01392ae
f0128d2e:	e8 7d 74 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d33:	e8 a6 3c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128d38:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d3b:	e8 44 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d40:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128d43:	83 ec 0c             	sub    $0xc,%esp
f0128d46:	68 00 78 00 00       	push   $0x7800
f0128d4b:	e8 0f f2 fd ff       	call   f0107f5f <kmalloc>
f0128d50:	83 c4 10             	add    $0x10,%esp
f0128d53:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d59:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128d5f:	89 c1                	mov    %eax,%ecx
f0128d61:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128d68:	10 00 00 
f0128d6b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128d70:	0f b6 d0             	movzbl %al,%edx
f0128d73:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128d79:	01 d0                	add    %edx,%eax
f0128d7b:	48                   	dec    %eax
f0128d7c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128d82:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d88:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d8d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128d93:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128d99:	29 d0                	sub    %edx,%eax
f0128d9b:	89 c3                	mov    %eax,%ebx
f0128d9d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128da4:	10 00 00 
f0128da7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128dac:	0f b6 c0             	movzbl %al,%eax
f0128daf:	c1 e0 04             	shl    $0x4,%eax
f0128db2:	89 c2                	mov    %eax,%edx
f0128db4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128dba:	01 d0                	add    %edx,%eax
f0128dbc:	48                   	dec    %eax
f0128dbd:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128dc3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128dc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dce:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128dd4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128dda:	29 d0                	sub    %edx,%eax
f0128ddc:	01 d8                	add    %ebx,%eax
f0128dde:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128de3:	39 c1                	cmp    %eax,%ecx
f0128de5:	74 17                	je     f0128dfe <test_kfreelast+0x10e1>
f0128de7:	83 ec 04             	sub    $0x4,%esp
f0128dea:	68 94 93 13 f0       	push   $0xf0139394
f0128def:	68 9b 0d 00 00       	push   $0xd9b
f0128df4:	68 ae 92 13 f0       	push   $0xf01392ae
f0128df9:	e8 b2 73 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128dfe:	e8 81 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e03:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e06:	74 17                	je     f0128e1f <test_kfreelast+0x1102>
f0128e08:	83 ec 04             	sub    $0x4,%esp
f0128e0b:	68 c8 92 13 f0       	push   $0xf01392c8
f0128e10:	68 9c 0d 00 00       	push   $0xd9c
f0128e15:	68 ae 92 13 f0       	push   $0xf01392ae
f0128e1a:	e8 91 73 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e1f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e22:	e8 b7 3b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128e27:	29 c3                	sub    %eax,%ebx
f0128e29:	89 d8                	mov    %ebx,%eax
f0128e2b:	83 f8 08             	cmp    $0x8,%eax
f0128e2e:	74 17                	je     f0128e47 <test_kfreelast+0x112a>
f0128e30:	83 ec 04             	sub    $0x4,%esp
f0128e33:	68 30 93 13 f0       	push   $0xf0139330
f0128e38:	68 9d 0d 00 00       	push   $0xd9d
f0128e3d:	68 ae 92 13 f0       	push   $0xf01392ae
f0128e42:	e8 69 73 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0128e47:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0128e4e:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0128e51:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128e57:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0128e5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e61:	eb 0e                	jmp    f0128e71 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0128e63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e66:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128e69:	01 d0                	add    %edx,%eax
f0128e6b:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0128e6e:	ff 45 f4             	incl   -0xc(%ebp)
f0128e71:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128e77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e7a:	7f e7                	jg     f0128e63 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e7c:	e8 5d 3b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128e81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e84:	e8 fb b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0128e8c:	83 ec 0c             	sub    $0xc,%esp
f0128e8f:	68 00 00 10 00       	push   $0x100000
f0128e94:	e8 c6 f0 fd ff       	call   f0107f5f <kmalloc>
f0128e99:	83 c4 10             	add    $0x10,%esp
f0128e9c:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ea2:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128ea8:	89 c1                	mov    %eax,%ecx
f0128eaa:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128eb1:	10 00 00 
f0128eb4:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128eb9:	0f b6 d0             	movzbl %al,%edx
f0128ebc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128ec2:	01 d0                	add    %edx,%eax
f0128ec4:	48                   	dec    %eax
f0128ec5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128ecb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ed6:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128edc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ee2:	29 d0                	sub    %edx,%eax
f0128ee4:	89 c3                	mov    %eax,%ebx
f0128ee6:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128eed:	10 00 00 
f0128ef0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0128ef5:	0f b6 c0             	movzbl %al,%eax
f0128ef8:	c1 e0 04             	shl    $0x4,%eax
f0128efb:	89 c2                	mov    %eax,%edx
f0128efd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128f03:	01 d0                	add    %edx,%eax
f0128f05:	48                   	dec    %eax
f0128f06:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128f0c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f12:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f17:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128f1d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f23:	29 d0                	sub    %edx,%eax
f0128f25:	01 d8                	add    %ebx,%eax
f0128f27:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0128f2c:	39 c1                	cmp    %eax,%ecx
f0128f2e:	74 17                	je     f0128f47 <test_kfreelast+0x122a>
f0128f30:	83 ec 04             	sub    $0x4,%esp
f0128f33:	68 94 93 13 f0       	push   $0xf0139394
f0128f38:	68 a9 0d 00 00       	push   $0xda9
f0128f3d:	68 ae 92 13 f0       	push   $0xf01392ae
f0128f42:	e8 69 72 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f47:	e8 38 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128f4c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f4f:	74 17                	je     f0128f68 <test_kfreelast+0x124b>
f0128f51:	83 ec 04             	sub    $0x4,%esp
f0128f54:	68 c8 92 13 f0       	push   $0xf01392c8
f0128f59:	68 aa 0d 00 00       	push   $0xdaa
f0128f5e:	68 ae 92 13 f0       	push   $0xf01392ae
f0128f63:	e8 48 72 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f68:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128f6b:	e8 6e 3a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128f70:	29 c3                	sub    %eax,%ebx
f0128f72:	89 d8                	mov    %ebx,%eax
f0128f74:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128f79:	74 17                	je     f0128f92 <test_kfreelast+0x1275>
f0128f7b:	83 ec 04             	sub    $0x4,%esp
f0128f7e:	68 30 93 13 f0       	push   $0xf0139330
f0128f83:	68 ab 0d 00 00       	push   $0xdab
f0128f88:	68 ae 92 13 f0       	push   $0xf01392ae
f0128f8d:	e8 1e 72 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0128f92:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0128f99:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0128f9c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128fa2:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0128fa5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128fac:	eb 0e                	jmp    f0128fbc <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0128fae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128fb1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128fb4:	01 d0                	add    %edx,%eax
f0128fb6:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0128fb9:	ff 45 f4             	incl   -0xc(%ebp)
f0128fbc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128fc2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128fc5:	7f e7                	jg     f0128fae <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0128fc7:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0128fcb:	83 ec 08             	sub    $0x8,%esp
f0128fce:	ff 75 f0             	pushl  -0x10(%ebp)
f0128fd1:	68 e0 a2 13 f0       	push   $0xf013a2e0
f0128fd6:	e8 56 7e fd ff       	call   f0100e31 <cprintf>
f0128fdb:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0128fde:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128fe5:	e8 f4 39 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0128fea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fed:	e8 92 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ff2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0128ff5:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128ffb:	83 ec 0c             	sub    $0xc,%esp
f0128ffe:	50                   	push   %eax
f0128fff:	e8 75 ef fd ff       	call   f0107f79 <kfree>
f0129004:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129007:	e8 78 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012900c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012900f:	74 1d                	je     f012902e <test_kfreelast+0x1311>
f0129011:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129015:	75 17                	jne    f012902e <test_kfreelast+0x1311>
f0129017:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012901e:	83 ec 0c             	sub    $0xc,%esp
f0129021:	68 08 a3 13 f0       	push   $0xf013a308
f0129026:	e8 06 7e fd ff       	call   f0100e31 <cprintf>
f012902b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012902e:	e8 ab 39 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129033:	89 c2                	mov    %eax,%edx
f0129035:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129038:	29 c2                	sub    %eax,%edx
f012903a:	89 d0                	mov    %edx,%eax
f012903c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129041:	74 1d                	je     f0129060 <test_kfreelast+0x1343>
f0129043:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129047:	75 17                	jne    f0129060 <test_kfreelast+0x1343>
f0129049:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129050:	83 ec 0c             	sub    $0xc,%esp
f0129053:	68 74 a3 13 f0       	push   $0xf013a374
f0129058:	e8 d4 7d fd ff       	call   f0100e31 <cprintf>
f012905d:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129060:	e8 79 39 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129065:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129068:	e8 17 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012906d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0129070:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0129076:	83 ec 0c             	sub    $0xc,%esp
f0129079:	50                   	push   %eax
f012907a:	e8 fa ee fd ff       	call   f0107f79 <kfree>
f012907f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129082:	e8 fd b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129087:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012908a:	74 1d                	je     f01290a9 <test_kfreelast+0x138c>
f012908c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129090:	75 17                	jne    f01290a9 <test_kfreelast+0x138c>
f0129092:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129099:	83 ec 0c             	sub    $0xc,%esp
f012909c:	68 08 a3 13 f0       	push   $0xf013a308
f01290a1:	e8 8b 7d fd ff       	call   f0100e31 <cprintf>
f01290a6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01290a9:	e8 30 39 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01290ae:	89 c2                	mov    %eax,%edx
f01290b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01290b3:	29 c2                	sub    %eax,%edx
f01290b5:	89 d0                	mov    %edx,%eax
f01290b7:	83 f8 08             	cmp    $0x8,%eax
f01290ba:	74 1d                	je     f01290d9 <test_kfreelast+0x13bc>
f01290bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290c0:	75 17                	jne    f01290d9 <test_kfreelast+0x13bc>
f01290c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290c9:	83 ec 0c             	sub    $0xc,%esp
f01290cc:	68 74 a3 13 f0       	push   $0xf013a374
f01290d1:	e8 5b 7d fd ff       	call   f0100e31 <cprintf>
f01290d6:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f01290d9:	e8 00 39 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01290de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290e1:	e8 9e b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01290e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f01290e9:	83 ec 0c             	sub    $0xc,%esp
f01290ec:	68 00 28 00 00       	push   $0x2800
f01290f1:	e8 69 ee fd ff       	call   f0107f5f <kmalloc>
f01290f6:	83 c4 10             	add    $0x10,%esp
f01290f9:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01290ff:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129105:	89 c1                	mov    %eax,%ecx
f0129107:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012910e:	10 00 00 
f0129111:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129116:	0f b6 d0             	movzbl %al,%edx
f0129119:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012911f:	01 d0                	add    %edx,%eax
f0129121:	48                   	dec    %eax
f0129122:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129128:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012912e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129133:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129139:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012913f:	29 d0                	sub    %edx,%eax
f0129141:	89 c3                	mov    %eax,%ebx
f0129143:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012914a:	10 00 00 
f012914d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129152:	0f b6 c0             	movzbl %al,%eax
f0129155:	c1 e0 04             	shl    $0x4,%eax
f0129158:	89 c2                	mov    %eax,%edx
f012915a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129160:	01 d0                	add    %edx,%eax
f0129162:	48                   	dec    %eax
f0129163:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129169:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012916f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129174:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012917a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129180:	29 d0                	sub    %edx,%eax
f0129182:	01 d8                	add    %ebx,%eax
f0129184:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129189:	39 c1                	cmp    %eax,%ecx
f012918b:	74 1d                	je     f01291aa <test_kfreelast+0x148d>
f012918d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129191:	75 17                	jne    f01291aa <test_kfreelast+0x148d>
f0129193:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012919a:	83 ec 0c             	sub    $0xc,%esp
f012919d:	68 ac a3 13 f0       	push   $0xf013a3ac
f01291a2:	e8 8a 7c fd ff       	call   f0100e31 <cprintf>
f01291a7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01291aa:	e8 d5 b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01291af:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01291b2:	74 1d                	je     f01291d1 <test_kfreelast+0x14b4>
f01291b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291b8:	75 17                	jne    f01291d1 <test_kfreelast+0x14b4>
f01291ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291c1:	83 ec 0c             	sub    $0xc,%esp
f01291c4:	68 08 a3 13 f0       	push   $0xf013a308
f01291c9:	e8 63 7c fd ff       	call   f0100e31 <cprintf>
f01291ce:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01291d1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01291d4:	e8 05 38 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01291d9:	29 c3                	sub    %eax,%ebx
f01291db:	89 d8                	mov    %ebx,%eax
f01291dd:	83 f8 03             	cmp    $0x3,%eax
f01291e0:	74 1d                	je     f01291ff <test_kfreelast+0x14e2>
f01291e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291e6:	75 17                	jne    f01291ff <test_kfreelast+0x14e2>
f01291e8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291ef:	83 ec 0c             	sub    $0xc,%esp
f01291f2:	68 14 a4 13 f0       	push   $0xf013a414
f01291f7:	e8 35 7c fd ff       	call   f0100e31 <cprintf>
f01291fc:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f01291ff:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f0129206:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f0129209:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012920f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129212:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129219:	eb 0e                	jmp    f0129229 <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f012921b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012921e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129221:	01 d0                	add    %edx,%eax
f0129223:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129226:	ff 45 f4             	incl   -0xc(%ebp)
f0129229:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012922f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129232:	7f e7                	jg     f012921b <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129234:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129238:	75 17                	jne    f0129251 <test_kfreelast+0x1534>
f012923a:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012923e:	83 ec 08             	sub    $0x8,%esp
f0129241:	ff 75 f0             	pushl  -0x10(%ebp)
f0129244:	68 e0 a2 13 f0       	push   $0xf013a2e0
f0129249:	e8 e3 7b fd ff       	call   f0100e31 <cprintf>
f012924e:	83 c4 10             	add    $0x10,%esp
f0129251:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f0129258:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012925e:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129261:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129268:	eb 1e                	jmp    f0129288 <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f012926a:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f0129270:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129273:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129276:	01 c8                	add    %ecx,%eax
f0129278:	8a 00                	mov    (%eax),%al
f012927a:	0f be c0             	movsbl %al,%eax
f012927d:	01 d0                	add    %edx,%eax
f012927f:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129285:	ff 45 f4             	incl   -0xc(%ebp)
f0129288:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012928e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129291:	7f d7                	jg     f012926a <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129293:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f0129299:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f012929f:	89 d0                	mov    %edx,%eax
f01292a1:	01 c0                	add    %eax,%eax
f01292a3:	01 d0                	add    %edx,%eax
f01292a5:	c1 e0 02             	shl    $0x2,%eax
f01292a8:	39 c1                	cmp    %eax,%ecx
f01292aa:	74 1d                	je     f01292c9 <test_kfreelast+0x15ac>
f01292ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292b0:	75 17                	jne    f01292c9 <test_kfreelast+0x15ac>
f01292b2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292b9:	83 ec 0c             	sub    $0xc,%esp
f01292bc:	68 58 a4 13 f0       	push   $0xf013a458
f01292c1:	e8 6b 7b fd ff       	call   f0100e31 <cprintf>
f01292c6:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01292c9:	83 ec 0c             	sub    $0xc,%esp
f01292cc:	6a 03                	push   $0x3
f01292ce:	e8 a6 3b fe ff       	call   f010ce79 <sys_bypassPageFault>
f01292d3:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f01292d6:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01292dc:	05 00 30 00 00       	add    $0x3000,%eax
f01292e1:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f01292e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01292eb:	eb 3c                	jmp    f0129329 <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f01292ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01292f0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01292f3:	01 d0                	add    %edx,%eax
f01292f5:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01292f8:	e8 6a 3b fe ff       	call   f010ce67 <sys_rcr2>
f01292fd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129300:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129303:	01 ca                	add    %ecx,%edx
f0129305:	39 d0                	cmp    %edx,%eax
f0129307:	74 1d                	je     f0129326 <test_kfreelast+0x1609>
f0129309:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012930d:	75 17                	jne    f0129326 <test_kfreelast+0x1609>
f012930f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129316:	83 ec 0c             	sub    $0xc,%esp
f0129319:	68 8c a4 13 f0       	push   $0xf013a48c
f012931e:	e8 0e 7b fd ff       	call   f0100e31 <cprintf>
f0129323:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0129326:	ff 45 f4             	incl   -0xc(%ebp)
f0129329:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f0129330:	7e bb                	jle    f01292ed <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129332:	83 ec 0c             	sub    $0xc,%esp
f0129335:	6a 00                	push   $0x0
f0129337:	e8 3d 3b fe ff       	call   f010ce79 <sys_bypassPageFault>
f012933c:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012933f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129343:	75 17                	jne    f012935c <test_kfreelast+0x163f>
f0129345:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129349:	83 ec 08             	sub    $0x8,%esp
f012934c:	ff 75 f0             	pushl  -0x10(%ebp)
f012934f:	68 e0 a2 13 f0       	push   $0xf013a2e0
f0129354:	e8 d8 7a fd ff       	call   f0100e31 <cprintf>
f0129359:	83 c4 10             	add    $0x10,%esp
f012935c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129363:	e8 76 36 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129368:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012936b:	e8 14 b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129370:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0129373:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129379:	83 ec 0c             	sub    $0xc,%esp
f012937c:	50                   	push   %eax
f012937d:	e8 f7 eb fd ff       	call   f0107f79 <kfree>
f0129382:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129385:	e8 fa b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012938a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012938d:	74 1d                	je     f01293ac <test_kfreelast+0x168f>
f012938f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129393:	75 17                	jne    f01293ac <test_kfreelast+0x168f>
f0129395:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012939c:	83 ec 0c             	sub    $0xc,%esp
f012939f:	68 08 a3 13 f0       	push   $0xf013a308
f01293a4:	e8 88 7a fd ff       	call   f0100e31 <cprintf>
f01293a9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01293ac:	e8 2d 36 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01293b1:	89 c2                	mov    %eax,%edx
f01293b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01293b6:	29 c2                	sub    %eax,%edx
f01293b8:	89 d0                	mov    %edx,%eax
f01293ba:	83 f8 03             	cmp    $0x3,%eax
f01293bd:	74 1d                	je     f01293dc <test_kfreelast+0x16bf>
f01293bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293c3:	75 17                	jne    f01293dc <test_kfreelast+0x16bf>
f01293c5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293cc:	83 ec 0c             	sub    $0xc,%esp
f01293cf:	68 74 a3 13 f0       	push   $0xf013a374
f01293d4:	e8 58 7a fd ff       	call   f0100e31 <cprintf>
f01293d9:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01293dc:	e8 fd 35 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01293e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293e4:	e8 9b b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01293e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f01293ec:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01293f2:	83 ec 0c             	sub    $0xc,%esp
f01293f5:	50                   	push   %eax
f01293f6:	e8 7e eb fd ff       	call   f0107f79 <kfree>
f01293fb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01293fe:	e8 81 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129403:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129406:	74 1d                	je     f0129425 <test_kfreelast+0x1708>
f0129408:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012940c:	75 17                	jne    f0129425 <test_kfreelast+0x1708>
f012940e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129415:	83 ec 0c             	sub    $0xc,%esp
f0129418:	68 08 a3 13 f0       	push   $0xf013a308
f012941d:	e8 0f 7a fd ff       	call   f0100e31 <cprintf>
f0129422:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129425:	e8 b4 35 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012942a:	89 c2                	mov    %eax,%edx
f012942c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012942f:	29 c2                	sub    %eax,%edx
f0129431:	89 d0                	mov    %edx,%eax
f0129433:	83 f8 04             	cmp    $0x4,%eax
f0129436:	74 1d                	je     f0129455 <test_kfreelast+0x1738>
f0129438:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012943c:	75 17                	jne    f0129455 <test_kfreelast+0x1738>
f012943e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129445:	83 ec 0c             	sub    $0xc,%esp
f0129448:	68 74 a3 13 f0       	push   $0xf013a374
f012944d:	e8 df 79 fd ff       	call   f0100e31 <cprintf>
f0129452:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129455:	e8 84 35 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012945a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012945d:	e8 22 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129462:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129465:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012946b:	83 ec 0c             	sub    $0xc,%esp
f012946e:	50                   	push   %eax
f012946f:	e8 05 eb fd ff       	call   f0107f79 <kfree>
f0129474:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129477:	e8 08 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012947c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012947f:	74 1d                	je     f012949e <test_kfreelast+0x1781>
f0129481:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129485:	75 17                	jne    f012949e <test_kfreelast+0x1781>
f0129487:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012948e:	83 ec 0c             	sub    $0xc,%esp
f0129491:	68 08 a3 13 f0       	push   $0xf013a308
f0129496:	e8 96 79 fd ff       	call   f0100e31 <cprintf>
f012949b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012949e:	e8 3b 35 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01294a3:	89 c2                	mov    %eax,%edx
f01294a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01294a8:	29 c2                	sub    %eax,%edx
f01294aa:	89 d0                	mov    %edx,%eax
f01294ac:	83 f8 05             	cmp    $0x5,%eax
f01294af:	74 1d                	je     f01294ce <test_kfreelast+0x17b1>
f01294b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294b5:	75 17                	jne    f01294ce <test_kfreelast+0x17b1>
f01294b7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01294be:	83 ec 0c             	sub    $0xc,%esp
f01294c1:	68 74 a3 13 f0       	push   $0xf013a374
f01294c6:	e8 66 79 fd ff       	call   f0100e31 <cprintf>
f01294cb:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f01294ce:	e8 0b 35 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01294d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294d6:	e8 a9 b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01294db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f01294de:	83 ec 0c             	sub    $0xc,%esp
f01294e1:	68 00 c8 00 00       	push   $0xc800
f01294e6:	e8 74 ea fd ff       	call   f0107f5f <kmalloc>
f01294eb:	83 c4 10             	add    $0x10,%esp
f01294ee:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f01294f4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01294fa:	89 c1                	mov    %eax,%ecx
f01294fc:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129503:	10 00 00 
f0129506:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012950b:	0f b6 d0             	movzbl %al,%edx
f012950e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129514:	01 d0                	add    %edx,%eax
f0129516:	48                   	dec    %eax
f0129517:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012951d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129523:	ba 00 00 00 00       	mov    $0x0,%edx
f0129528:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012952e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129534:	29 d0                	sub    %edx,%eax
f0129536:	89 c3                	mov    %eax,%ebx
f0129538:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012953f:	10 00 00 
f0129542:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129547:	0f b6 c0             	movzbl %al,%eax
f012954a:	c1 e0 04             	shl    $0x4,%eax
f012954d:	89 c2                	mov    %eax,%edx
f012954f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129555:	01 d0                	add    %edx,%eax
f0129557:	48                   	dec    %eax
f0129558:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012955e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129564:	ba 00 00 00 00       	mov    $0x0,%edx
f0129569:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012956f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129575:	29 d0                	sub    %edx,%eax
f0129577:	01 d8                	add    %ebx,%eax
f0129579:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012957e:	39 c1                	cmp    %eax,%ecx
f0129580:	74 1d                	je     f012959f <test_kfreelast+0x1882>
f0129582:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129586:	75 17                	jne    f012959f <test_kfreelast+0x1882>
f0129588:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012958f:	83 ec 0c             	sub    $0xc,%esp
f0129592:	68 ac a3 13 f0       	push   $0xf013a3ac
f0129597:	e8 95 78 fd ff       	call   f0100e31 <cprintf>
f012959c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012959f:	e8 e0 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01295a4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01295a7:	74 1d                	je     f01295c6 <test_kfreelast+0x18a9>
f01295a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295ad:	75 17                	jne    f01295c6 <test_kfreelast+0x18a9>
f01295af:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295b6:	83 ec 0c             	sub    $0xc,%esp
f01295b9:	68 08 a3 13 f0       	push   $0xf013a308
f01295be:	e8 6e 78 fd ff       	call   f0100e31 <cprintf>
f01295c3:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01295c6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01295c9:	e8 10 34 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01295ce:	29 c3                	sub    %eax,%ebx
f01295d0:	89 d8                	mov    %ebx,%eax
f01295d2:	83 f8 0d             	cmp    $0xd,%eax
f01295d5:	74 1d                	je     f01295f4 <test_kfreelast+0x18d7>
f01295d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295db:	75 17                	jne    f01295f4 <test_kfreelast+0x18d7>
f01295dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295e4:	83 ec 0c             	sub    $0xc,%esp
f01295e7:	68 14 a4 13 f0       	push   $0xf013a414
f01295ec:	e8 40 78 fd ff       	call   f0100e31 <cprintf>
f01295f1:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f01295f4:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f01295fb:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f01295fe:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129604:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0129607:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012960e:	eb 0e                	jmp    f012961e <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f0129610:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129613:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129616:	01 d0                	add    %edx,%eax
f0129618:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012961b:	ff 45 f4             	incl   -0xc(%ebp)
f012961e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129624:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129627:	7f e7                	jg     f0129610 <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129629:	e8 b0 33 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012962e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129631:	e8 4e b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129636:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f0129639:	83 ec 0c             	sub    $0xc,%esp
f012963c:	68 00 fc 2f 00       	push   $0x2ffc00
f0129641:	e8 19 e9 fd ff       	call   f0107f5f <kmalloc>
f0129646:	83 c4 10             	add    $0x10,%esp
f0129649:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012964f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129655:	89 c1                	mov    %eax,%ecx
f0129657:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012965e:	10 00 00 
f0129661:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129666:	0f b6 d0             	movzbl %al,%edx
f0129669:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012966f:	01 d0                	add    %edx,%eax
f0129671:	48                   	dec    %eax
f0129672:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0129678:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012967e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129683:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129689:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012968f:	29 d0                	sub    %edx,%eax
f0129691:	89 c3                	mov    %eax,%ebx
f0129693:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012969a:	10 00 00 
f012969d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f01296a2:	0f b6 c0             	movzbl %al,%eax
f01296a5:	c1 e0 04             	shl    $0x4,%eax
f01296a8:	89 c2                	mov    %eax,%edx
f01296aa:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01296b0:	01 d0                	add    %edx,%eax
f01296b2:	48                   	dec    %eax
f01296b3:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01296b9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01296bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01296c4:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01296ca:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01296d0:	29 d0                	sub    %edx,%eax
f01296d2:	01 d8                	add    %ebx,%eax
f01296d4:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f01296d9:	39 c1                	cmp    %eax,%ecx
f01296db:	74 1d                	je     f01296fa <test_kfreelast+0x19dd>
f01296dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296e1:	75 17                	jne    f01296fa <test_kfreelast+0x19dd>
f01296e3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296ea:	83 ec 0c             	sub    $0xc,%esp
f01296ed:	68 ac a3 13 f0       	push   $0xf013a3ac
f01296f2:	e8 3a 77 fd ff       	call   f0100e31 <cprintf>
f01296f7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01296fa:	e8 85 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f01296ff:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129702:	74 1d                	je     f0129721 <test_kfreelast+0x1a04>
f0129704:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129708:	75 17                	jne    f0129721 <test_kfreelast+0x1a04>
f012970a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129711:	83 ec 0c             	sub    $0xc,%esp
f0129714:	68 08 a3 13 f0       	push   $0xf013a308
f0129719:	e8 13 77 fd ff       	call   f0100e31 <cprintf>
f012971e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129721:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129724:	e8 b5 32 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129729:	29 c3                	sub    %eax,%ebx
f012972b:	89 d8                	mov    %ebx,%eax
f012972d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129732:	74 1d                	je     f0129751 <test_kfreelast+0x1a34>
f0129734:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129738:	75 17                	jne    f0129751 <test_kfreelast+0x1a34>
f012973a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129741:	83 ec 0c             	sub    $0xc,%esp
f0129744:	68 14 a4 13 f0       	push   $0xf013a414
f0129749:	e8 e3 76 fd ff       	call   f0100e31 <cprintf>
f012974e:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0129751:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f0129758:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012975b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129761:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129764:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012976b:	eb 0e                	jmp    f012977b <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f012976d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129770:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129773:	01 d0                	add    %edx,%eax
f0129775:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129778:	ff 45 f4             	incl   -0xc(%ebp)
f012977b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129781:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129784:	7f e7                	jg     f012976d <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129786:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012978a:	75 17                	jne    f01297a3 <test_kfreelast+0x1a86>
f012978c:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129790:	83 ec 08             	sub    $0x8,%esp
f0129793:	ff 75 f0             	pushl  -0x10(%ebp)
f0129796:	68 e0 a2 13 f0       	push   $0xf013a2e0
f012979b:	e8 91 76 fd ff       	call   f0100e31 <cprintf>
f01297a0:	83 c4 10             	add    $0x10,%esp
f01297a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f01297aa:	e8 2f 32 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01297af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297b2:	e8 cd ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f01297b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f01297ba:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297c0:	83 ec 0c             	sub    $0xc,%esp
f01297c3:	50                   	push   %eax
f01297c4:	e8 b0 e7 fd ff       	call   f0107f79 <kfree>
f01297c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01297cc:	e8 b3 ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f01297d1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01297d4:	74 1d                	je     f01297f3 <test_kfreelast+0x1ad6>
f01297d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297da:	75 17                	jne    f01297f3 <test_kfreelast+0x1ad6>
f01297dc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01297e3:	83 ec 0c             	sub    $0xc,%esp
f01297e6:	68 08 a3 13 f0       	push   $0xf013a308
f01297eb:	e8 41 76 fd ff       	call   f0100e31 <cprintf>
f01297f0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01297f3:	e8 e6 31 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01297f8:	89 c2                	mov    %eax,%edx
f01297fa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01297fd:	29 c2                	sub    %eax,%edx
f01297ff:	89 d0                	mov    %edx,%eax
f0129801:	83 f8 0d             	cmp    $0xd,%eax
f0129804:	74 1d                	je     f0129823 <test_kfreelast+0x1b06>
f0129806:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012980a:	75 17                	jne    f0129823 <test_kfreelast+0x1b06>
f012980c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129813:	83 ec 0c             	sub    $0xc,%esp
f0129816:	68 74 a3 13 f0       	push   $0xf013a374
f012981b:	e8 11 76 fd ff       	call   f0100e31 <cprintf>
f0129820:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129823:	83 ec 0c             	sub    $0xc,%esp
f0129826:	6a 03                	push   $0x3
f0129828:	e8 4c 36 fe ff       	call   f010ce79 <sys_bypassPageFault>
f012982d:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0129830:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129836:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f0129839:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129840:	eb 3c                	jmp    f012987e <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129842:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129845:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129848:	01 d0                	add    %edx,%eax
f012984a:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012984d:	e8 15 36 fe ff       	call   f010ce67 <sys_rcr2>
f0129852:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129855:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129858:	01 ca                	add    %ecx,%edx
f012985a:	39 d0                	cmp    %edx,%eax
f012985c:	74 1d                	je     f012987b <test_kfreelast+0x1b5e>
f012985e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129862:	75 17                	jne    f012987b <test_kfreelast+0x1b5e>
f0129864:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012986b:	83 ec 0c             	sub    $0xc,%esp
f012986e:	68 8c a4 13 f0       	push   $0xf013a48c
f0129873:	e8 b9 75 fd ff       	call   f0100e31 <cprintf>
f0129878:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012987b:	ff 45 f4             	incl   -0xc(%ebp)
f012987e:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129885:	7e bb                	jle    f0129842 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129887:	83 ec 0c             	sub    $0xc,%esp
f012988a:	6a 00                	push   $0x0
f012988c:	e8 e8 35 fe ff       	call   f010ce79 <sys_bypassPageFault>
f0129891:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129894:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012989a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012989d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01298a4:	eb 1e                	jmp    f01298c4 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f01298a6:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f01298ac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01298af:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01298b2:	01 c8                	add    %ecx,%eax
f01298b4:	8a 00                	mov    (%eax),%al
f01298b6:	0f be c0             	movsbl %al,%eax
f01298b9:	01 d0                	add    %edx,%eax
f01298bb:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01298c1:	ff 45 f4             	incl   -0xc(%ebp)
f01298c4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01298ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298cd:	7f d7                	jg     f01298a6 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f01298cf:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f01298d5:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f01298db:	89 d0                	mov    %edx,%eax
f01298dd:	01 c0                	add    %eax,%eax
f01298df:	01 d0                	add    %edx,%eax
f01298e1:	01 c0                	add    %eax,%eax
f01298e3:	01 d0                	add    %edx,%eax
f01298e5:	01 c0                	add    %eax,%eax
f01298e7:	39 c1                	cmp    %eax,%ecx
f01298e9:	74 1d                	je     f0129908 <test_kfreelast+0x1beb>
f01298eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298ef:	75 17                	jne    f0129908 <test_kfreelast+0x1beb>
f01298f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01298f8:	83 ec 0c             	sub    $0xc,%esp
f01298fb:	68 58 a4 13 f0       	push   $0xf013a458
f0129900:	e8 2c 75 fd ff       	call   f0100e31 <cprintf>
f0129905:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129908:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012990c:	75 17                	jne    f0129925 <test_kfreelast+0x1c08>
f012990e:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129912:	83 ec 08             	sub    $0x8,%esp
f0129915:	ff 75 f0             	pushl  -0x10(%ebp)
f0129918:	68 e0 a2 13 f0       	push   $0xf013a2e0
f012991d:	e8 0f 75 fd ff       	call   f0100e31 <cprintf>
f0129922:	83 c4 10             	add    $0x10,%esp
f0129925:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012992c:	e8 ad 30 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129931:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129934:	e8 4b ad fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129939:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012993c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129942:	83 ec 0c             	sub    $0xc,%esp
f0129945:	50                   	push   %eax
f0129946:	e8 2e e6 fd ff       	call   f0107f79 <kfree>
f012994b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012994e:	e8 31 ad fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129953:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129956:	74 1d                	je     f0129975 <test_kfreelast+0x1c58>
f0129958:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012995c:	75 17                	jne    f0129975 <test_kfreelast+0x1c58>
f012995e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129965:	83 ec 0c             	sub    $0xc,%esp
f0129968:	68 08 a3 13 f0       	push   $0xf013a308
f012996d:	e8 bf 74 fd ff       	call   f0100e31 <cprintf>
f0129972:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129975:	e8 64 30 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012997a:	89 c2                	mov    %eax,%edx
f012997c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012997f:	29 c2                	sub    %eax,%edx
f0129981:	89 d0                	mov    %edx,%eax
f0129983:	83 f8 02             	cmp    $0x2,%eax
f0129986:	74 1d                	je     f01299a5 <test_kfreelast+0x1c88>
f0129988:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012998c:	75 17                	jne    f01299a5 <test_kfreelast+0x1c88>
f012998e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129995:	83 ec 0c             	sub    $0xc,%esp
f0129998:	68 74 a3 13 f0       	push   $0xf013a374
f012999d:	e8 8f 74 fd ff       	call   f0100e31 <cprintf>
f01299a2:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01299a5:	e8 34 30 fe ff       	call   f010c9de <sys_calculate_free_frames>
f01299aa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299ad:	e8 d2 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f01299b5:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01299bb:	83 ec 0c             	sub    $0xc,%esp
f01299be:	50                   	push   %eax
f01299bf:	e8 b5 e5 fd ff       	call   f0107f79 <kfree>
f01299c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299c7:	e8 b8 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299cc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299cf:	74 1d                	je     f01299ee <test_kfreelast+0x1cd1>
f01299d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299d5:	75 17                	jne    f01299ee <test_kfreelast+0x1cd1>
f01299d7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299de:	83 ec 0c             	sub    $0xc,%esp
f01299e1:	68 08 a3 13 f0       	push   $0xf013a308
f01299e6:	e8 46 74 fd ff       	call   f0100e31 <cprintf>
f01299eb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01299ee:	e8 eb 2f fe ff       	call   f010c9de <sys_calculate_free_frames>
f01299f3:	89 c2                	mov    %eax,%edx
f01299f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01299f8:	29 c2                	sub    %eax,%edx
f01299fa:	89 d0                	mov    %edx,%eax
f01299fc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a01:	74 1d                	je     f0129a20 <test_kfreelast+0x1d03>
f0129a03:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a07:	75 17                	jne    f0129a20 <test_kfreelast+0x1d03>
f0129a09:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a10:	83 ec 0c             	sub    $0xc,%esp
f0129a13:	68 74 a3 13 f0       	push   $0xf013a374
f0129a18:	e8 14 74 fd ff       	call   f0100e31 <cprintf>
f0129a1d:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a20:	e8 b9 2f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129a25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a28:	e8 57 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0129a30:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0129a36:	83 ec 0c             	sub    $0xc,%esp
f0129a39:	50                   	push   %eax
f0129a3a:	e8 3a e5 fd ff       	call   f0107f79 <kfree>
f0129a3f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a42:	e8 3d ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a47:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a4a:	74 1d                	je     f0129a69 <test_kfreelast+0x1d4c>
f0129a4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a50:	75 17                	jne    f0129a69 <test_kfreelast+0x1d4c>
f0129a52:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a59:	83 ec 0c             	sub    $0xc,%esp
f0129a5c:	68 08 a3 13 f0       	push   $0xf013a308
f0129a61:	e8 cb 73 fd ff       	call   f0100e31 <cprintf>
f0129a66:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a69:	e8 70 2f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129a6e:	89 c2                	mov    %eax,%edx
f0129a70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a73:	29 c2                	sub    %eax,%edx
f0129a75:	89 d0                	mov    %edx,%eax
f0129a77:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a7c:	74 1d                	je     f0129a9b <test_kfreelast+0x1d7e>
f0129a7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a82:	75 17                	jne    f0129a9b <test_kfreelast+0x1d7e>
f0129a84:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a8b:	83 ec 0c             	sub    $0xc,%esp
f0129a8e:	68 74 a3 13 f0       	push   $0xf013a374
f0129a93:	e8 99 73 fd ff       	call   f0100e31 <cprintf>
f0129a98:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129a9b:	e8 3e 2f fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129aa0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129aa3:	e8 dc ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129aa8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129aab:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129ab1:	83 ec 0c             	sub    $0xc,%esp
f0129ab4:	50                   	push   %eax
f0129ab5:	e8 bf e4 fd ff       	call   f0107f79 <kfree>
f0129aba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129abd:	e8 c2 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ac2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ac5:	74 1d                	je     f0129ae4 <test_kfreelast+0x1dc7>
f0129ac7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129acb:	75 17                	jne    f0129ae4 <test_kfreelast+0x1dc7>
f0129acd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ad4:	83 ec 0c             	sub    $0xc,%esp
f0129ad7:	68 08 a3 13 f0       	push   $0xf013a308
f0129adc:	e8 50 73 fd ff       	call   f0100e31 <cprintf>
f0129ae1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129ae4:	e8 f5 2e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129ae9:	89 c2                	mov    %eax,%edx
f0129aeb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129aee:	29 c2                	sub    %eax,%edx
f0129af0:	89 d0                	mov    %edx,%eax
f0129af2:	83 f8 01             	cmp    $0x1,%eax
f0129af5:	74 1d                	je     f0129b14 <test_kfreelast+0x1df7>
f0129af7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129afb:	75 17                	jne    f0129b14 <test_kfreelast+0x1df7>
f0129afd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b04:	83 ec 0c             	sub    $0xc,%esp
f0129b07:	68 74 a3 13 f0       	push   $0xf013a374
f0129b0c:	e8 20 73 fd ff       	call   f0100e31 <cprintf>
f0129b11:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b14:	e8 c5 2e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129b19:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b1c:	e8 63 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129b24:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0129b2a:	83 ec 0c             	sub    $0xc,%esp
f0129b2d:	50                   	push   %eax
f0129b2e:	e8 46 e4 fd ff       	call   f0107f79 <kfree>
f0129b33:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129b36:	e8 49 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b3b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b3e:	74 1d                	je     f0129b5d <test_kfreelast+0x1e40>
f0129b40:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b44:	75 17                	jne    f0129b5d <test_kfreelast+0x1e40>
f0129b46:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b4d:	83 ec 0c             	sub    $0xc,%esp
f0129b50:	68 08 a3 13 f0       	push   $0xf013a308
f0129b55:	e8 d7 72 fd ff       	call   f0100e31 <cprintf>
f0129b5a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129b5d:	e8 7c 2e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129b62:	89 c2                	mov    %eax,%edx
f0129b64:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b67:	29 c2                	sub    %eax,%edx
f0129b69:	89 d0                	mov    %edx,%eax
f0129b6b:	83 f8 01             	cmp    $0x1,%eax
f0129b6e:	74 1d                	je     f0129b8d <test_kfreelast+0x1e70>
f0129b70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b74:	75 17                	jne    f0129b8d <test_kfreelast+0x1e70>
f0129b76:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b7d:	83 ec 0c             	sub    $0xc,%esp
f0129b80:	68 74 a3 13 f0       	push   $0xf013a374
f0129b85:	e8 a7 72 fd ff       	call   f0100e31 <cprintf>
f0129b8a:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f0129b8d:	e8 4c 2e fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129b92:	89 c2                	mov    %eax,%edx
f0129b94:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129b97:	39 c2                	cmp    %eax,%edx
f0129b99:	74 1d                	je     f0129bb8 <test_kfreelast+0x1e9b>
f0129b9b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b9f:	75 17                	jne    f0129bb8 <test_kfreelast+0x1e9b>
f0129ba1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ba8:	83 ec 0c             	sub    $0xc,%esp
f0129bab:	68 d4 a4 13 f0       	push   $0xf013a4d4
f0129bb0:	e8 7c 72 fd ff       	call   f0100e31 <cprintf>
f0129bb5:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129bb8:	83 ec 0c             	sub    $0xc,%esp
f0129bbb:	6a 03                	push   $0x3
f0129bbd:	e8 b7 32 fe ff       	call   f010ce79 <sys_bypassPageFault>
f0129bc2:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129bc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129bcc:	e9 8e 00 00 00       	jmp    f0129c5f <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bd4:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f0129bdb:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129bde:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129be1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129be4:	e8 7e 32 fe ff       	call   f010ce67 <sys_rcr2>
f0129be9:	89 c2                	mov    %eax,%edx
f0129beb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129bee:	39 c2                	cmp    %eax,%edx
f0129bf0:	74 1d                	je     f0129c0f <test_kfreelast+0x1ef2>
f0129bf2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bf6:	75 17                	jne    f0129c0f <test_kfreelast+0x1ef2>
f0129bf8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bff:	83 ec 0c             	sub    $0xc,%esp
f0129c02:	68 8c a4 13 f0       	push   $0xf013a48c
f0129c07:	e8 25 72 fd ff       	call   f0100e31 <cprintf>
f0129c0c:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c12:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129c19:	89 c2                	mov    %eax,%edx
f0129c1b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c1e:	01 d0                	add    %edx,%eax
f0129c20:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129c23:	e8 3f 32 fe ff       	call   f010ce67 <sys_rcr2>
f0129c28:	89 c2                	mov    %eax,%edx
f0129c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c2d:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129c34:	89 c1                	mov    %eax,%ecx
f0129c36:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c39:	01 c8                	add    %ecx,%eax
f0129c3b:	39 c2                	cmp    %eax,%edx
f0129c3d:	74 1d                	je     f0129c5c <test_kfreelast+0x1f3f>
f0129c3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c43:	75 17                	jne    f0129c5c <test_kfreelast+0x1f3f>
f0129c45:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c4c:	83 ec 0c             	sub    $0xc,%esp
f0129c4f:	68 8c a4 13 f0       	push   $0xf013a48c
f0129c54:	e8 d8 71 fd ff       	call   f0100e31 <cprintf>
f0129c59:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129c5c:	ff 45 f4             	incl   -0xc(%ebp)
f0129c5f:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129c63:	0f 8e 68 ff ff ff    	jle    f0129bd1 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129c69:	83 ec 0c             	sub    $0xc,%esp
f0129c6c:	6a 00                	push   $0x0
f0129c6e:	e8 06 32 fe ff       	call   f010ce79 <sys_bypassPageFault>
f0129c73:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c76:	e8 63 2d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129c7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c7e:	e8 01 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129c86:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0129c8c:	83 ec 0c             	sub    $0xc,%esp
f0129c8f:	50                   	push   %eax
f0129c90:	e8 e4 e2 fd ff       	call   f0107f79 <kfree>
f0129c95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129c98:	e8 e7 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c9d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ca0:	74 1d                	je     f0129cbf <test_kfreelast+0x1fa2>
f0129ca2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ca6:	75 17                	jne    f0129cbf <test_kfreelast+0x1fa2>
f0129ca8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129caf:	83 ec 0c             	sub    $0xc,%esp
f0129cb2:	68 08 a3 13 f0       	push   $0xf013a308
f0129cb7:	e8 75 71 fd ff       	call   f0100e31 <cprintf>
f0129cbc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129cbf:	e8 1a 2d fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129cc4:	89 c2                	mov    %eax,%edx
f0129cc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129cc9:	39 c2                	cmp    %eax,%edx
f0129ccb:	74 1d                	je     f0129cea <test_kfreelast+0x1fcd>
f0129ccd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cd1:	75 17                	jne    f0129cea <test_kfreelast+0x1fcd>
f0129cd3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cda:	83 ec 0c             	sub    $0xc,%esp
f0129cdd:	68 0c a5 13 f0       	push   $0xf013a50c
f0129ce2:	e8 4a 71 fd ff       	call   f0100e31 <cprintf>
f0129ce7:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129cea:	e8 ef 2c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129cef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cf2:	e8 8d a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129cf7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129cfa:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129d00:	83 ec 0c             	sub    $0xc,%esp
f0129d03:	50                   	push   %eax
f0129d04:	e8 70 e2 fd ff       	call   f0107f79 <kfree>
f0129d09:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d0c:	e8 73 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d11:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d14:	74 1d                	je     f0129d33 <test_kfreelast+0x2016>
f0129d16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d1a:	75 17                	jne    f0129d33 <test_kfreelast+0x2016>
f0129d1c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d23:	83 ec 0c             	sub    $0xc,%esp
f0129d26:	68 08 a3 13 f0       	push   $0xf013a308
f0129d2b:	e8 01 71 fd ff       	call   f0100e31 <cprintf>
f0129d30:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129d33:	e8 a6 2c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129d38:	89 c2                	mov    %eax,%edx
f0129d3a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d3d:	39 c2                	cmp    %eax,%edx
f0129d3f:	74 1d                	je     f0129d5e <test_kfreelast+0x2041>
f0129d41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d45:	75 17                	jne    f0129d5e <test_kfreelast+0x2041>
f0129d47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d4e:	83 ec 0c             	sub    $0xc,%esp
f0129d51:	68 0c a5 13 f0       	push   $0xf013a50c
f0129d56:	e8 d6 70 fd ff       	call   f0100e31 <cprintf>
f0129d5b:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d5e:	e8 7b 2c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129d63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d66:	e8 19 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129d6e:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0129d74:	83 ec 0c             	sub    $0xc,%esp
f0129d77:	50                   	push   %eax
f0129d78:	e8 fc e1 fd ff       	call   f0107f79 <kfree>
f0129d7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d80:	e8 ff a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d85:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d88:	74 1d                	je     f0129da7 <test_kfreelast+0x208a>
f0129d8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d8e:	75 17                	jne    f0129da7 <test_kfreelast+0x208a>
f0129d90:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d97:	83 ec 0c             	sub    $0xc,%esp
f0129d9a:	68 08 a3 13 f0       	push   $0xf013a308
f0129d9f:	e8 8d 70 fd ff       	call   f0100e31 <cprintf>
f0129da4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129da7:	e8 32 2c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129dac:	89 c2                	mov    %eax,%edx
f0129dae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129db1:	39 c2                	cmp    %eax,%edx
f0129db3:	74 1d                	je     f0129dd2 <test_kfreelast+0x20b5>
f0129db5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129db9:	75 17                	jne    f0129dd2 <test_kfreelast+0x20b5>
f0129dbb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129dc2:	83 ec 0c             	sub    $0xc,%esp
f0129dc5:	68 0c a5 13 f0       	push   $0xf013a50c
f0129dca:	e8 62 70 fd ff       	call   f0100e31 <cprintf>
f0129dcf:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129dd2:	e8 07 2c fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129dd7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129dda:	e8 a5 a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ddf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129de2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129de8:	83 ec 0c             	sub    $0xc,%esp
f0129deb:	50                   	push   %eax
f0129dec:	e8 88 e1 fd ff       	call   f0107f79 <kfree>
f0129df1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129df4:	e8 8b a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129df9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129dfc:	74 1d                	je     f0129e1b <test_kfreelast+0x20fe>
f0129dfe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e02:	75 17                	jne    f0129e1b <test_kfreelast+0x20fe>
f0129e04:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e0b:	83 ec 0c             	sub    $0xc,%esp
f0129e0e:	68 08 a3 13 f0       	push   $0xf013a308
f0129e13:	e8 19 70 fd ff       	call   f0100e31 <cprintf>
f0129e18:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129e1b:	e8 be 2b fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129e20:	89 c2                	mov    %eax,%edx
f0129e22:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129e25:	39 c2                	cmp    %eax,%edx
f0129e27:	74 1d                	je     f0129e46 <test_kfreelast+0x2129>
f0129e29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e2d:	75 17                	jne    f0129e46 <test_kfreelast+0x2129>
f0129e2f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e36:	83 ec 0c             	sub    $0xc,%esp
f0129e39:	68 0c a5 13 f0       	push   $0xf013a50c
f0129e3e:	e8 ee 6f fd ff       	call   f0100e31 <cprintf>
f0129e43:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129e46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e4a:	75 17                	jne    f0129e63 <test_kfreelast+0x2146>
f0129e4c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129e50:	83 ec 08             	sub    $0x8,%esp
f0129e53:	ff 75 f0             	pushl  -0x10(%ebp)
f0129e56:	68 e0 a2 13 f0       	push   $0xf013a2e0
f0129e5b:	e8 d1 6f fd ff       	call   f0100e31 <cprintf>
f0129e60:	83 c4 10             	add    $0x10,%esp
f0129e63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f0129e6a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129e6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129e72:	5b                   	pop    %ebx
f0129e73:	5f                   	pop    %edi
f0129e74:	5d                   	pop    %ebp
f0129e75:	c3                   	ret    

f0129e76 <test_krealloc>:

int test_krealloc() {
f0129e76:	55                   	push   %ebp
f0129e77:	89 e5                	mov    %esp,%ebp
f0129e79:	57                   	push   %edi
f0129e7a:	53                   	push   %ebx
f0129e7b:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f0129e81:	83 ec 0c             	sub    $0xc,%esp
f0129e84:	68 f0 91 13 f0       	push   $0xf01391f0
f0129e89:	e8 a3 6f fd ff       	call   f0100e31 <cprintf>
f0129e8e:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0129e91:	83 ec 0c             	sub    $0xc,%esp
f0129e94:	68 20 92 13 f0       	push   $0xf0139220
f0129e99:	e8 93 6f fd ff       	call   f0100e31 <cprintf>
f0129e9e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0129ea1:	83 ec 0c             	sub    $0xc,%esp
f0129ea4:	68 f0 91 13 f0       	push   $0xf01391f0
f0129ea9:	e8 83 6f fd ff       	call   f0100e31 <cprintf>
f0129eae:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0129eb1:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0129eb5:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0129eb9:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f0129ebf:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0129ec5:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129ecc:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0129ed3:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f0129ed9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129ede:	b8 00 00 00 00       	mov    $0x0,%eax
f0129ee3:	89 d7                	mov    %edx,%edi
f0129ee5:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0129ee7:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f0129eee:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0129ef4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129ef9:	b8 00 00 00 00       	mov    $0x0,%eax
f0129efe:	89 d7                	mov    %edx,%edi
f0129f00:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0129f02:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f0129f08:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129f0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0129f12:	89 d7                	mov    %edx,%edi
f0129f14:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129f16:	e8 c3 2a fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129f1b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f0129f1e:	83 ec 08             	sub    $0x8,%esp
f0129f21:	68 00 fc 0f 00       	push   $0xffc00
f0129f26:	6a 00                	push   $0x0
f0129f28:	e8 e8 e0 fd ff       	call   f0108015 <krealloc>
f0129f2d:	83 c4 10             	add    $0x10,%esp
f0129f30:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0129f36:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0129f41:	77 17                	ja     f0129f5a <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129f43:	83 ec 04             	sub    $0x4,%esp
f0129f46:	68 54 a5 13 f0       	push   $0xf013a554
f0129f4b:	68 e2 0e 00 00       	push   $0xee2
f0129f50:	68 ae 92 13 f0       	push   $0xf01392ae
f0129f55:	e8 56 62 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f0129f5a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f60:	89 c1                	mov    %eax,%ecx
f0129f62:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129f69:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129f6e:	0f b6 d0             	movzbl %al,%edx
f0129f71:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129f74:	01 d0                	add    %edx,%eax
f0129f76:	48                   	dec    %eax
f0129f77:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129f7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f82:	f7 75 b4             	divl   -0x4c(%ebp)
f0129f85:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f88:	29 d0                	sub    %edx,%eax
f0129f8a:	89 c3                	mov    %eax,%ebx
f0129f8c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129f93:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f0129f98:	0f b6 c0             	movzbl %al,%eax
f0129f9b:	c1 e0 04             	shl    $0x4,%eax
f0129f9e:	89 c2                	mov    %eax,%edx
f0129fa0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129fa3:	01 d0                	add    %edx,%eax
f0129fa5:	48                   	dec    %eax
f0129fa6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129fa9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129fac:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fb1:	f7 75 ac             	divl   -0x54(%ebp)
f0129fb4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129fb7:	29 d0                	sub    %edx,%eax
f0129fb9:	01 d8                	add    %ebx,%eax
f0129fbb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129fc0:	39 c1                	cmp    %eax,%ecx
f0129fc2:	74 17                	je     f0129fdb <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f0129fc4:	83 ec 04             	sub    $0x4,%esp
f0129fc7:	68 90 a5 13 f0       	push   $0xf013a590
f0129fcc:	68 e4 0e 00 00       	push   $0xee4
f0129fd1:	68 ae 92 13 f0       	push   $0xf01392ae
f0129fd6:	e8 d5 61 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0129fdb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0129fde:	e8 fb 29 fe ff       	call   f010c9de <sys_calculate_free_frames>
f0129fe3:	29 c3                	sub    %eax,%ebx
f0129fe5:	89 d8                	mov    %ebx,%eax
f0129fe7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129fec:	74 17                	je     f012a005 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f0129fee:	83 ec 04             	sub    $0x4,%esp
f0129ff1:	68 c2 a5 13 f0       	push   $0xf013a5c2
f0129ff6:	68 e7 0e 00 00       	push   $0xee7
f0129ffb:	68 ae 92 13 f0       	push   $0xf01392ae
f012a000:	e8 ab 61 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a005:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f012a00c:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a00f:	e8 ca 29 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a014:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012a017:	83 ec 08             	sub    $0x8,%esp
f012a01a:	68 00 fc 0f 00       	push   $0xffc00
f012a01f:	6a 00                	push   $0x0
f012a021:	e8 ef df fd ff       	call   f0108015 <krealloc>
f012a026:	83 c4 10             	add    $0x10,%esp
f012a029:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012a02f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a035:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012a03a:	77 17                	ja     f012a053 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a03c:	83 ec 04             	sub    $0x4,%esp
f012a03f:	68 54 a5 13 f0       	push   $0xf013a554
f012a044:	68 ef 0e 00 00       	push   $0xeef
f012a049:	68 ae 92 13 f0       	push   $0xf01392ae
f012a04e:	e8 5d 61 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012a053:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a059:	89 c1                	mov    %eax,%ecx
f012a05b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a062:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a067:	0f b6 d0             	movzbl %al,%edx
f012a06a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a06d:	01 d0                	add    %edx,%eax
f012a06f:	48                   	dec    %eax
f012a070:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a073:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a076:	ba 00 00 00 00       	mov    $0x0,%edx
f012a07b:	f7 75 a4             	divl   -0x5c(%ebp)
f012a07e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a081:	29 d0                	sub    %edx,%eax
f012a083:	89 c3                	mov    %eax,%ebx
f012a085:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a08c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a091:	0f b6 c0             	movzbl %al,%eax
f012a094:	c1 e0 04             	shl    $0x4,%eax
f012a097:	89 c2                	mov    %eax,%edx
f012a099:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a09c:	01 d0                	add    %edx,%eax
f012a09e:	48                   	dec    %eax
f012a09f:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a0a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a0a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0aa:	f7 75 9c             	divl   -0x64(%ebp)
f012a0ad:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a0b0:	29 d0                	sub    %edx,%eax
f012a0b2:	01 d8                	add    %ebx,%eax
f012a0b4:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a0b9:	39 c1                	cmp    %eax,%ecx
f012a0bb:	74 17                	je     f012a0d4 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a0bd:	83 ec 04             	sub    $0x4,%esp
f012a0c0:	68 90 a5 13 f0       	push   $0xf013a590
f012a0c5:	68 f1 0e 00 00       	push   $0xef1
f012a0ca:	68 ae 92 13 f0       	push   $0xf01392ae
f012a0cf:	e8 dc 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a0d4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a0d7:	e8 02 29 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a0dc:	29 c3                	sub    %eax,%ebx
f012a0de:	89 d8                	mov    %ebx,%eax
f012a0e0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a0e5:	74 17                	je     f012a0fe <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a0e7:	83 ec 04             	sub    $0x4,%esp
f012a0ea:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012a0ef:	68 f3 0e 00 00       	push   $0xef3
f012a0f4:	68 ae 92 13 f0       	push   $0xf01392ae
f012a0f9:	e8 b2 60 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a0fe:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a105:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a108:	e8 d1 28 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a10d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a110:	83 ec 08             	sub    $0x8,%esp
f012a113:	68 00 fc 0f 00       	push   $0xffc00
f012a118:	6a 00                	push   $0x0
f012a11a:	e8 f6 de fd ff       	call   f0108015 <krealloc>
f012a11f:	83 c4 10             	add    $0x10,%esp
f012a122:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a128:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a12e:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a133:	77 17                	ja     f012a14c <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a135:	83 ec 04             	sub    $0x4,%esp
f012a138:	68 54 a5 13 f0       	push   $0xf013a554
f012a13d:	68 fb 0e 00 00       	push   $0xefb
f012a142:	68 ae 92 13 f0       	push   $0xf01392ae
f012a147:	e8 64 60 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a14c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a152:	89 c1                	mov    %eax,%ecx
f012a154:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a15b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a160:	0f b6 d0             	movzbl %al,%edx
f012a163:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a166:	01 d0                	add    %edx,%eax
f012a168:	48                   	dec    %eax
f012a169:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a16c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a16f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a174:	f7 75 94             	divl   -0x6c(%ebp)
f012a177:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a17a:	29 d0                	sub    %edx,%eax
f012a17c:	89 c3                	mov    %eax,%ebx
f012a17e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a185:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a18a:	0f b6 c0             	movzbl %al,%eax
f012a18d:	c1 e0 04             	shl    $0x4,%eax
f012a190:	89 c2                	mov    %eax,%edx
f012a192:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a195:	01 d0                	add    %edx,%eax
f012a197:	48                   	dec    %eax
f012a198:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a19b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a19e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1a3:	f7 75 8c             	divl   -0x74(%ebp)
f012a1a6:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a1a9:	29 d0                	sub    %edx,%eax
f012a1ab:	01 d8                	add    %ebx,%eax
f012a1ad:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a1b2:	39 c1                	cmp    %eax,%ecx
f012a1b4:	74 17                	je     f012a1cd <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a1b6:	83 ec 04             	sub    $0x4,%esp
f012a1b9:	68 90 a5 13 f0       	push   $0xf013a590
f012a1be:	68 fd 0e 00 00       	push   $0xefd
f012a1c3:	68 ae 92 13 f0       	push   $0xf01392ae
f012a1c8:	e8 e3 5f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a1cd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a1d0:	e8 09 28 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a1d5:	29 c3                	sub    %eax,%ebx
f012a1d7:	89 d8                	mov    %ebx,%eax
f012a1d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a1de:	74 17                	je     f012a1f7 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a1e0:	83 ec 04             	sub    $0x4,%esp
f012a1e3:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012a1e8:	68 ff 0e 00 00       	push   $0xeff
f012a1ed:	68 ae 92 13 f0       	push   $0xf01392ae
f012a1f2:	e8 b9 5f fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a1f7:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a1fe:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a201:	e8 d8 27 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a206:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a209:	83 ec 08             	sub    $0x8,%esp
f012a20c:	68 00 fc 0f 00       	push   $0xffc00
f012a211:	6a 00                	push   $0x0
f012a213:	e8 fd dd fd ff       	call   f0108015 <krealloc>
f012a218:	83 c4 10             	add    $0x10,%esp
f012a21b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a221:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a227:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a22c:	77 17                	ja     f012a245 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a22e:	83 ec 04             	sub    $0x4,%esp
f012a231:	68 54 a5 13 f0       	push   $0xf013a554
f012a236:	68 06 0f 00 00       	push   $0xf06
f012a23b:	68 ae 92 13 f0       	push   $0xf01392ae
f012a240:	e8 6b 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a245:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a24b:	89 c1                	mov    %eax,%ecx
f012a24d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a254:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a259:	0f b6 d0             	movzbl %al,%edx
f012a25c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a25f:	01 d0                	add    %edx,%eax
f012a261:	48                   	dec    %eax
f012a262:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a265:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a268:	ba 00 00 00 00       	mov    $0x0,%edx
f012a26d:	f7 75 84             	divl   -0x7c(%ebp)
f012a270:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a273:	29 d0                	sub    %edx,%eax
f012a275:	89 c3                	mov    %eax,%ebx
f012a277:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a27e:	10 00 00 
f012a281:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a286:	0f b6 c0             	movzbl %al,%eax
f012a289:	c1 e0 04             	shl    $0x4,%eax
f012a28c:	89 c2                	mov    %eax,%edx
f012a28e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a294:	01 d0                	add    %edx,%eax
f012a296:	48                   	dec    %eax
f012a297:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a29d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a2a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2a8:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a2ae:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a2b4:	29 d0                	sub    %edx,%eax
f012a2b6:	01 d8                	add    %ebx,%eax
f012a2b8:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a2bd:	39 c1                	cmp    %eax,%ecx
f012a2bf:	74 17                	je     f012a2d8 <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a2c1:	83 ec 04             	sub    $0x4,%esp
f012a2c4:	68 90 a5 13 f0       	push   $0xf013a590
f012a2c9:	68 08 0f 00 00       	push   $0xf08
f012a2ce:	68 ae 92 13 f0       	push   $0xf01392ae
f012a2d3:	e8 d8 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a2d8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a2db:	e8 fe 26 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a2e0:	29 c3                	sub    %eax,%ebx
f012a2e2:	89 d8                	mov    %ebx,%eax
f012a2e4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a2e9:	74 17                	je     f012a302 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a2eb:	83 ec 04             	sub    $0x4,%esp
f012a2ee:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012a2f3:	68 0a 0f 00 00       	push   $0xf0a
f012a2f8:	68 ae 92 13 f0       	push   $0xf01392ae
f012a2fd:	e8 ae 5e fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a302:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a309:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a30c:	e8 cd 26 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a311:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a314:	83 ec 08             	sub    $0x8,%esp
f012a317:	68 00 fc 1f 00       	push   $0x1ffc00
f012a31c:	6a 00                	push   $0x0
f012a31e:	e8 f2 dc fd ff       	call   f0108015 <krealloc>
f012a323:	83 c4 10             	add    $0x10,%esp
f012a326:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a32c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a332:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a337:	77 17                	ja     f012a350 <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a339:	83 ec 04             	sub    $0x4,%esp
f012a33c:	68 54 a5 13 f0       	push   $0xf013a554
f012a341:	68 11 0f 00 00       	push   $0xf11
f012a346:	68 ae 92 13 f0       	push   $0xf01392ae
f012a34b:	e8 60 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a350:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a356:	89 c1                	mov    %eax,%ecx
f012a358:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a35f:	10 00 00 
f012a362:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a367:	0f b6 d0             	movzbl %al,%edx
f012a36a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a370:	01 d0                	add    %edx,%eax
f012a372:	48                   	dec    %eax
f012a373:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a379:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a37f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a384:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a38a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a390:	29 d0                	sub    %edx,%eax
f012a392:	89 c3                	mov    %eax,%ebx
f012a394:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a39b:	10 00 00 
f012a39e:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a3a3:	0f b6 c0             	movzbl %al,%eax
f012a3a6:	c1 e0 04             	shl    $0x4,%eax
f012a3a9:	89 c2                	mov    %eax,%edx
f012a3ab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a3b1:	01 d0                	add    %edx,%eax
f012a3b3:	48                   	dec    %eax
f012a3b4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a3ba:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a3c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3c5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a3cb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a3d1:	29 d0                	sub    %edx,%eax
f012a3d3:	01 d8                	add    %ebx,%eax
f012a3d5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a3da:	39 c1                	cmp    %eax,%ecx
f012a3dc:	74 17                	je     f012a3f5 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a3de:	83 ec 04             	sub    $0x4,%esp
f012a3e1:	68 90 a5 13 f0       	push   $0xf013a590
f012a3e6:	68 13 0f 00 00       	push   $0xf13
f012a3eb:	68 ae 92 13 f0       	push   $0xf01392ae
f012a3f0:	e8 bb 5d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a3f5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a3f8:	e8 e1 25 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a3fd:	29 c3                	sub    %eax,%ebx
f012a3ff:	89 d8                	mov    %ebx,%eax
f012a401:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a406:	74 17                	je     f012a41f <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a408:	83 ec 04             	sub    $0x4,%esp
f012a40b:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012a410:	68 15 0f 00 00       	push   $0xf15
f012a415:	68 ae 92 13 f0       	push   $0xf01392ae
f012a41a:	e8 91 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a41f:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a426:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a429:	e8 b0 25 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a431:	83 ec 08             	sub    $0x8,%esp
f012a434:	68 00 fc 1f 00       	push   $0x1ffc00
f012a439:	6a 00                	push   $0x0
f012a43b:	e8 d5 db fd ff       	call   f0108015 <krealloc>
f012a440:	83 c4 10             	add    $0x10,%esp
f012a443:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a449:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a44f:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a454:	77 17                	ja     f012a46d <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a456:	83 ec 04             	sub    $0x4,%esp
f012a459:	68 54 a5 13 f0       	push   $0xf013a554
f012a45e:	68 1c 0f 00 00       	push   $0xf1c
f012a463:	68 ae 92 13 f0       	push   $0xf01392ae
f012a468:	e8 43 5d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a46d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a473:	89 c1                	mov    %eax,%ecx
f012a475:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a47c:	10 00 00 
f012a47f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a484:	0f b6 d0             	movzbl %al,%edx
f012a487:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a48d:	01 d0                	add    %edx,%eax
f012a48f:	48                   	dec    %eax
f012a490:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a496:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a49c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4a1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a4a7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a4ad:	29 d0                	sub    %edx,%eax
f012a4af:	89 c3                	mov    %eax,%ebx
f012a4b1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a4b8:	10 00 00 
f012a4bb:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a4c0:	0f b6 c0             	movzbl %al,%eax
f012a4c3:	c1 e0 04             	shl    $0x4,%eax
f012a4c6:	89 c2                	mov    %eax,%edx
f012a4c8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a4ce:	01 d0                	add    %edx,%eax
f012a4d0:	48                   	dec    %eax
f012a4d1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a4d7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a4dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4e2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a4e8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a4ee:	29 d0                	sub    %edx,%eax
f012a4f0:	01 d8                	add    %ebx,%eax
f012a4f2:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a4f7:	39 c1                	cmp    %eax,%ecx
f012a4f9:	74 17                	je     f012a512 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a4fb:	83 ec 04             	sub    $0x4,%esp
f012a4fe:	68 90 a5 13 f0       	push   $0xf013a590
f012a503:	68 1e 0f 00 00       	push   $0xf1e
f012a508:	68 ae 92 13 f0       	push   $0xf01392ae
f012a50d:	e8 9e 5c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a512:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a515:	e8 c4 24 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a51a:	29 c3                	sub    %eax,%ebx
f012a51c:	89 d8                	mov    %ebx,%eax
f012a51e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a523:	74 17                	je     f012a53c <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a525:	83 ec 04             	sub    $0x4,%esp
f012a528:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012a52d:	68 20 0f 00 00       	push   $0xf20
f012a532:	68 ae 92 13 f0       	push   $0xf01392ae
f012a537:	e8 74 5c fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a53c:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a543:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a546:	e8 93 24 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a54b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a54e:	83 ec 08             	sub    $0x8,%esp
f012a551:	68 00 fc 2f 00       	push   $0x2ffc00
f012a556:	6a 00                	push   $0x0
f012a558:	e8 b8 da fd ff       	call   f0108015 <krealloc>
f012a55d:	83 c4 10             	add    $0x10,%esp
f012a560:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a566:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a56c:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a571:	77 17                	ja     f012a58a <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a573:	83 ec 04             	sub    $0x4,%esp
f012a576:	68 54 a5 13 f0       	push   $0xf013a554
f012a57b:	68 27 0f 00 00       	push   $0xf27
f012a580:	68 ae 92 13 f0       	push   $0xf01392ae
f012a585:	e8 26 5c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a58a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a590:	89 c1                	mov    %eax,%ecx
f012a592:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a599:	10 00 00 
f012a59c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a5a1:	0f b6 d0             	movzbl %al,%edx
f012a5a4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a5aa:	01 d0                	add    %edx,%eax
f012a5ac:	48                   	dec    %eax
f012a5ad:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a5b3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a5b9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5be:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a5c4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a5ca:	29 d0                	sub    %edx,%eax
f012a5cc:	89 c3                	mov    %eax,%ebx
f012a5ce:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a5d5:	10 00 00 
f012a5d8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a5dd:	0f b6 c0             	movzbl %al,%eax
f012a5e0:	c1 e0 04             	shl    $0x4,%eax
f012a5e3:	89 c2                	mov    %eax,%edx
f012a5e5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a5eb:	01 d0                	add    %edx,%eax
f012a5ed:	48                   	dec    %eax
f012a5ee:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a5f4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a5fa:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5ff:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a605:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a60b:	29 d0                	sub    %edx,%eax
f012a60d:	01 d8                	add    %ebx,%eax
f012a60f:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a614:	39 c1                	cmp    %eax,%ecx
f012a616:	74 17                	je     f012a62f <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a618:	83 ec 04             	sub    $0x4,%esp
f012a61b:	68 90 a5 13 f0       	push   $0xf013a590
f012a620:	68 29 0f 00 00       	push   $0xf29
f012a625:	68 ae 92 13 f0       	push   $0xf01392ae
f012a62a:	e8 81 5b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a62f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a632:	e8 a7 23 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a637:	29 c3                	sub    %eax,%ebx
f012a639:	89 d8                	mov    %ebx,%eax
f012a63b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a640:	74 17                	je     f012a659 <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a642:	83 ec 04             	sub    $0x4,%esp
f012a645:	68 f8 96 13 f0       	push   $0xf01396f8
f012a64a:	68 2b 0f 00 00       	push   $0xf2b
f012a64f:	68 ae 92 13 f0       	push   $0xf01392ae
f012a654:	e8 57 5b fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a659:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a660:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a663:	e8 76 23 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a668:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a66b:	83 ec 08             	sub    $0x8,%esp
f012a66e:	68 00 fc 2f 00       	push   $0x2ffc00
f012a673:	6a 00                	push   $0x0
f012a675:	e8 9b d9 fd ff       	call   f0108015 <krealloc>
f012a67a:	83 c4 10             	add    $0x10,%esp
f012a67d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a683:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a689:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a68e:	77 17                	ja     f012a6a7 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a690:	83 ec 04             	sub    $0x4,%esp
f012a693:	68 54 a5 13 f0       	push   $0xf013a554
f012a698:	68 32 0f 00 00       	push   $0xf32
f012a69d:	68 ae 92 13 f0       	push   $0xf01392ae
f012a6a2:	e8 09 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a6a7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a6ad:	89 c1                	mov    %eax,%ecx
f012a6af:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a6b6:	10 00 00 
f012a6b9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a6be:	0f b6 d0             	movzbl %al,%edx
f012a6c1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a6c7:	01 d0                	add    %edx,%eax
f012a6c9:	48                   	dec    %eax
f012a6ca:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a6d0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a6d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6db:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a6e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a6e7:	29 d0                	sub    %edx,%eax
f012a6e9:	89 c3                	mov    %eax,%ebx
f012a6eb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a6f2:	10 00 00 
f012a6f5:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012a6fa:	0f b6 c0             	movzbl %al,%eax
f012a6fd:	c1 e0 04             	shl    $0x4,%eax
f012a700:	89 c2                	mov    %eax,%edx
f012a702:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a708:	01 d0                	add    %edx,%eax
f012a70a:	48                   	dec    %eax
f012a70b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a711:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a717:	ba 00 00 00 00       	mov    $0x0,%edx
f012a71c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a722:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a728:	29 d0                	sub    %edx,%eax
f012a72a:	01 d8                	add    %ebx,%eax
f012a72c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a731:	39 c1                	cmp    %eax,%ecx
f012a733:	74 17                	je     f012a74c <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a735:	83 ec 04             	sub    $0x4,%esp
f012a738:	68 90 a5 13 f0       	push   $0xf013a590
f012a73d:	68 34 0f 00 00       	push   $0xf34
f012a742:	68 ae 92 13 f0       	push   $0xf01392ae
f012a747:	e8 64 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a74c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a74f:	e8 8a 22 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a754:	29 c3                	sub    %eax,%ebx
f012a756:	89 d8                	mov    %ebx,%eax
f012a758:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a75d:	74 17                	je     f012a776 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a75f:	83 ec 04             	sub    $0x4,%esp
f012a762:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012a767:	68 36 0f 00 00       	push   $0xf36
f012a76c:	68 ae 92 13 f0       	push   $0xf01392ae
f012a771:	e8 3a 5a fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a776:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a77d:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a780:	e8 59 22 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012a785:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a788:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a78f:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a792:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a798:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a79e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a7a4:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a7a7:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a7a9:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a7af:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a7b5:	01 c2                	add    %eax,%edx
f012a7b7:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a7ba:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a7bc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a7c2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a7c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7cf:	eb 11                	jmp    f012a7e2 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a7d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7d4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a7da:	01 d0                	add    %edx,%eax
f012a7dc:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a7df:	ff 45 f4             	incl   -0xc(%ebp)
f012a7e2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a7e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7eb:	7d e4                	jge    f012a7d1 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a7ed:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a7f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a7f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a7ff:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a805:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a80b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a812:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a818:	01 d0                	add    %edx,%eax
f012a81a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012a820:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a826:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a82c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012a833:	eb 1b                	jmp    f012a850 <test_krealloc+0x9da>
			intArr[i] = 4;
f012a835:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a838:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a83f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a845:	01 d0                	add    %edx,%eax
f012a847:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a84d:	ff 45 f0             	incl   -0x10(%ebp)
f012a850:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a856:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012a859:	7d da                	jge    f012a835 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012a85b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a861:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a867:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012a86e:	eb 17                	jmp    f012a887 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012a870:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012a873:	01 c0                	add    %eax,%eax
f012a875:	89 c2                	mov    %eax,%edx
f012a877:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a87d:	01 d0                	add    %edx,%eax
f012a87f:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a884:	ff 45 ec             	incl   -0x14(%ebp)
f012a887:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a88d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012a890:	7d de                	jge    f012a870 <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012a892:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a898:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012a89e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8a4:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012a8a9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a8af:	01 c0                	add    %eax,%eax
f012a8b1:	89 c2                	mov    %eax,%edx
f012a8b3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8b9:	01 d0                	add    %edx,%eax
f012a8bb:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012a8c0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a8c6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a8cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012a8d3:	eb 49                	jmp    f012a91e <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012a8d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a8d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8e5:	01 d0                	add    %edx,%eax
f012a8e7:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012a8ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a8ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a8f4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a8fa:	01 d0                	add    %edx,%eax
f012a8fc:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012a902:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a905:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a90c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a912:	01 d0                	add    %edx,%eax
f012a914:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a91b:	ff 45 e8             	incl   -0x18(%ebp)
f012a91e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a924:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012a927:	7d ac                	jge    f012a8d5 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012a929:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a92f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012a935:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a93b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012a93e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a944:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012a94a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a950:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012a957:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a95d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a964:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a96a:	01 d0                	add    %edx,%eax
f012a96c:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012a96f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a975:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a97c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a982:	01 d0                	add    %edx,%eax
f012a984:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012a98a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a990:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a997:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a99d:	01 d0                	add    %edx,%eax
f012a99f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012a9a6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9ac:	8a 00                	mov    (%eax),%al
f012a9ae:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012a9b1:	75 17                	jne    f012a9ca <test_krealloc+0xb54>
f012a9b3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012a9b9:	89 c2                	mov    %eax,%edx
f012a9bb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9c1:	01 d0                	add    %edx,%eax
f012a9c3:	8a 00                	mov    (%eax),%al
f012a9c5:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012a9c8:	74 17                	je     f012a9e1 <test_krealloc+0xb6b>
			panic(
f012a9ca:	83 ec 04             	sub    $0x4,%esp
f012a9cd:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012a9d2:	68 79 0f 00 00       	push   $0xf79
f012a9d7:	68 ae 92 13 f0       	push   $0xf01392ae
f012a9dc:	e8 cf 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012a9e1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a9e7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012a9ed:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9f3:	8a 00                	mov    (%eax),%al
f012a9f5:	3c 02                	cmp    $0x2,%al
f012a9f7:	75 16                	jne    f012aa0f <test_krealloc+0xb99>
f012a9f9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9ff:	89 c2                	mov    %eax,%edx
f012aa01:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa07:	01 d0                	add    %edx,%eax
f012aa09:	8a 00                	mov    (%eax),%al
f012aa0b:	3c 02                	cmp    $0x2,%al
f012aa0d:	74 20                	je     f012aa2f <test_krealloc+0xbb9>
			panic(
f012aa0f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa15:	8a 00                	mov    (%eax),%al
f012aa17:	0f be c0             	movsbl %al,%eax
f012aa1a:	50                   	push   %eax
f012aa1b:	68 20 a6 13 f0       	push   $0xf013a620
f012aa20:	68 7f 0f 00 00       	push   $0xf7f
f012aa25:	68 ae 92 13 f0       	push   $0xf01392ae
f012aa2a:	e8 81 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012aa2f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012aa35:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012aa3b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa41:	8b 00                	mov    (%eax),%eax
f012aa43:	83 f8 03             	cmp    $0x3,%eax
f012aa46:	75 1c                	jne    f012aa64 <test_krealloc+0xbee>
f012aa48:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012aa4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa55:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa5b:	01 d0                	add    %edx,%eax
f012aa5d:	8b 00                	mov    (%eax),%eax
f012aa5f:	83 f8 03             	cmp    $0x3,%eax
f012aa62:	74 17                	je     f012aa7b <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012aa64:	83 ec 04             	sub    $0x4,%esp
f012aa67:	68 6c a6 13 f0       	push   $0xf013a66c
f012aa6c:	68 83 0f 00 00       	push   $0xf83
f012aa71:	68 ae 92 13 f0       	push   $0xf01392ae
f012aa76:	e8 35 57 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012aa7b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aa81:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012aa87:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa8d:	8b 00                	mov    (%eax),%eax
f012aa8f:	83 f8 04             	cmp    $0x4,%eax
f012aa92:	75 1c                	jne    f012aab0 <test_krealloc+0xc3a>
f012aa94:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aa9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aaa1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aaa7:	01 d0                	add    %edx,%eax
f012aaa9:	8b 00                	mov    (%eax),%eax
f012aaab:	83 f8 04             	cmp    $0x4,%eax
f012aaae:	74 17                	je     f012aac7 <test_krealloc+0xc51>
			panic(
f012aab0:	83 ec 04             	sub    $0x4,%esp
f012aab3:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012aab8:	68 88 0f 00 00       	push   $0xf88
f012aabd:	68 ae 92 13 f0       	push   $0xf01392ae
f012aac2:	e8 e9 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012aac7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aacd:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012aad3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aad9:	66 8b 00             	mov    (%eax),%ax
f012aadc:	66 83 f8 05          	cmp    $0x5,%ax
f012aae0:	75 1b                	jne    f012aafd <test_krealloc+0xc87>
f012aae2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012aae8:	01 c0                	add    %eax,%eax
f012aaea:	89 c2                	mov    %eax,%edx
f012aaec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aaf2:	01 d0                	add    %edx,%eax
f012aaf4:	66 8b 00             	mov    (%eax),%ax
f012aaf7:	66 83 f8 05          	cmp    $0x5,%ax
f012aafb:	74 17                	je     f012ab14 <test_krealloc+0xc9e>
			panic(
f012aafd:	83 ec 04             	sub    $0x4,%esp
f012ab00:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ab05:	68 8d 0f 00 00       	push   $0xf8d
f012ab0a:	68 ae 92 13 f0       	push   $0xf01392ae
f012ab0f:	e8 9c 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ab14:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ab1a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ab20:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab26:	66 8b 00             	mov    (%eax),%ax
f012ab29:	66 83 f8 06          	cmp    $0x6,%ax
f012ab2d:	75 1b                	jne    f012ab4a <test_krealloc+0xcd4>
f012ab2f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ab35:	01 c0                	add    %eax,%eax
f012ab37:	89 c2                	mov    %eax,%edx
f012ab39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab3f:	01 d0                	add    %edx,%eax
f012ab41:	66 8b 00             	mov    (%eax),%ax
f012ab44:	66 83 f8 06          	cmp    $0x6,%ax
f012ab48:	74 17                	je     f012ab61 <test_krealloc+0xceb>
			panic(
f012ab4a:	83 ec 04             	sub    $0x4,%esp
f012ab4d:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ab52:	68 92 0f 00 00       	push   $0xf92
f012ab57:	68 ae 92 13 f0       	push   $0xf01392ae
f012ab5c:	e8 4f 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ab61:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ab67:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ab6d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab73:	8a 00                	mov    (%eax),%al
f012ab75:	3c 07                	cmp    $0x7,%al
f012ab77:	75 1b                	jne    f012ab94 <test_krealloc+0xd1e>
f012ab79:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ab7f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ab86:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ab8c:	01 d0                	add    %edx,%eax
f012ab8e:	8a 00                	mov    (%eax),%al
f012ab90:	3c 07                	cmp    $0x7,%al
f012ab92:	74 17                	je     f012abab <test_krealloc+0xd35>
			panic(
f012ab94:	83 ec 04             	sub    $0x4,%esp
f012ab97:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ab9c:	68 97 0f 00 00       	push   $0xf97
f012aba1:	68 ae 92 13 f0       	push   $0xf01392ae
f012aba6:	e8 05 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012abab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abb1:	66 8b 40 02          	mov    0x2(%eax),%ax
f012abb5:	66 83 f8 07          	cmp    $0x7,%ax
f012abb9:	75 1f                	jne    f012abda <test_krealloc+0xd64>
f012abbb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012abc1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abc8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abce:	01 d0                	add    %edx,%eax
f012abd0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012abd4:	66 83 f8 07          	cmp    $0x7,%ax
f012abd8:	74 17                	je     f012abf1 <test_krealloc+0xd7b>
			panic(
f012abda:	83 ec 04             	sub    $0x4,%esp
f012abdd:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012abe2:	68 9a 0f 00 00       	push   $0xf9a
f012abe7:	68 ae 92 13 f0       	push   $0xf01392ae
f012abec:	e8 bf 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012abf1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abf7:	8b 40 04             	mov    0x4(%eax),%eax
f012abfa:	83 f8 07             	cmp    $0x7,%eax
f012abfd:	75 1d                	jne    f012ac1c <test_krealloc+0xda6>
f012abff:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ac05:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac0c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac12:	01 d0                	add    %edx,%eax
f012ac14:	8b 40 04             	mov    0x4(%eax),%eax
f012ac17:	83 f8 07             	cmp    $0x7,%eax
f012ac1a:	74 17                	je     f012ac33 <test_krealloc+0xdbd>
			panic(
f012ac1c:	83 ec 04             	sub    $0x4,%esp
f012ac1f:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ac24:	68 9d 0f 00 00       	push   $0xf9d
f012ac29:	68 ae 92 13 f0       	push   $0xf01392ae
f012ac2e:	e8 7d 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012ac33:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ac39:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ac3f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac45:	8a 00                	mov    (%eax),%al
f012ac47:	3c 08                	cmp    $0x8,%al
f012ac49:	75 1b                	jne    f012ac66 <test_krealloc+0xdf0>
f012ac4b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac5e:	01 d0                	add    %edx,%eax
f012ac60:	8a 00                	mov    (%eax),%al
f012ac62:	3c 08                	cmp    $0x8,%al
f012ac64:	74 17                	je     f012ac7d <test_krealloc+0xe07>
			panic(
f012ac66:	83 ec 04             	sub    $0x4,%esp
f012ac69:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ac6e:	68 a2 0f 00 00       	push   $0xfa2
f012ac73:	68 ae 92 13 f0       	push   $0xf01392ae
f012ac78:	e8 33 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ac7d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac83:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ac87:	66 83 f8 08          	cmp    $0x8,%ax
f012ac8b:	75 1f                	jne    f012acac <test_krealloc+0xe36>
f012ac8d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac93:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aca0:	01 d0                	add    %edx,%eax
f012aca2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012aca6:	66 83 f8 08          	cmp    $0x8,%ax
f012acaa:	74 17                	je     f012acc3 <test_krealloc+0xe4d>
			panic(
f012acac:	83 ec 04             	sub    $0x4,%esp
f012acaf:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012acb4:	68 a5 0f 00 00       	push   $0xfa5
f012acb9:	68 ae 92 13 f0       	push   $0xf01392ae
f012acbe:	e8 ed 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012acc3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012acc9:	8b 40 04             	mov    0x4(%eax),%eax
f012accc:	83 f8 08             	cmp    $0x8,%eax
f012accf:	75 1d                	jne    f012acee <test_krealloc+0xe78>
f012acd1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012acd7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012acde:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ace4:	01 d0                	add    %edx,%eax
f012ace6:	8b 40 04             	mov    0x4(%eax),%eax
f012ace9:	83 f8 08             	cmp    $0x8,%eax
f012acec:	74 17                	je     f012ad05 <test_krealloc+0xe8f>
			panic(
f012acee:	83 ec 04             	sub    $0x4,%esp
f012acf1:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012acf6:	68 a8 0f 00 00       	push   $0xfa8
f012acfb:	68 ae 92 13 f0       	push   $0xf01392ae
f012ad00:	e8 ab 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ad05:	e8 d4 1c fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ad0a:	89 c2                	mov    %eax,%edx
f012ad0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ad0f:	39 c2                	cmp    %eax,%edx
f012ad11:	74 17                	je     f012ad2a <test_krealloc+0xeb4>
			panic(
f012ad13:	83 ec 04             	sub    $0x4,%esp
f012ad16:	68 a0 a6 13 f0       	push   $0xf013a6a0
f012ad1b:	68 ac 0f 00 00       	push   $0xfac
f012ad20:	68 ae 92 13 f0       	push   $0xf01392ae
f012ad25:	e8 86 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ad2a:	83 ec 0c             	sub    $0xc,%esp
f012ad2d:	68 ec a6 13 f0       	push   $0xf013a6ec
f012ad32:	e8 fa 60 fd ff       	call   f0100e31 <cprintf>
f012ad37:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ad3a:	e8 9f 1c fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ad3f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ad42:	e8 3d 99 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ad47:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ad4d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ad53:	83 ec 08             	sub    $0x8,%esp
f012ad56:	6a 00                	push   $0x0
f012ad58:	50                   	push   %eax
f012ad59:	e8 b7 d2 fd ff       	call   f0108015 <krealloc>
f012ad5e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ad61:	e8 1e 99 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ad66:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ad6c:	74 17                	je     f012ad85 <test_krealloc+0xf0f>
			panic(
f012ad6e:	83 ec 04             	sub    $0x4,%esp
f012ad71:	68 10 a7 13 f0       	push   $0xf013a710
f012ad76:	68 b9 0f 00 00       	push   $0xfb9
f012ad7b:	68 ae 92 13 f0       	push   $0xf01392ae
f012ad80:	e8 2b 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ad85:	e8 54 1c fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ad8a:	89 c2                	mov    %eax,%edx
f012ad8c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ad8f:	29 c2                	sub    %eax,%edx
f012ad91:	89 d0                	mov    %edx,%eax
f012ad93:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad98:	74 17                	je     f012adb1 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012ad9a:	83 ec 04             	sub    $0x4,%esp
f012ad9d:	68 84 a7 13 f0       	push   $0xf013a784
f012ada2:	68 bb 0f 00 00       	push   $0xfbb
f012ada7:	68 ae 92 13 f0       	push   $0xf01392ae
f012adac:	e8 ff 53 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012adb1:	e8 28 1c fe ff       	call   f010c9de <sys_calculate_free_frames>
f012adb6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012adb9:	e8 c6 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012adbe:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012adc4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012adca:	83 ec 08             	sub    $0x8,%esp
f012adcd:	6a 00                	push   $0x0
f012adcf:	50                   	push   %eax
f012add0:	e8 40 d2 fd ff       	call   f0108015 <krealloc>
f012add5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012add8:	e8 a7 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012addd:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ade3:	74 17                	je     f012adfc <test_krealloc+0xf86>
			panic(
f012ade5:	83 ec 04             	sub    $0x4,%esp
f012ade8:	68 10 a7 13 f0       	push   $0xf013a710
f012aded:	68 c4 0f 00 00       	push   $0xfc4
f012adf2:	68 ae 92 13 f0       	push   $0xf01392ae
f012adf7:	e8 b4 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012adfc:	e8 dd 1b fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ae01:	89 c2                	mov    %eax,%edx
f012ae03:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae06:	29 c2                	sub    %eax,%edx
f012ae08:	89 d0                	mov    %edx,%eax
f012ae0a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae0f:	74 17                	je     f012ae28 <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012ae11:	83 ec 04             	sub    $0x4,%esp
f012ae14:	68 84 a7 13 f0       	push   $0xf013a784
f012ae19:	68 c6 0f 00 00       	push   $0xfc6
f012ae1e:	68 ae 92 13 f0       	push   $0xf01392ae
f012ae23:	e8 88 53 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ae28:	e8 b1 1b fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ae2d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ae30:	e8 4f 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ae35:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ae3b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ae41:	83 ec 08             	sub    $0x8,%esp
f012ae44:	6a 00                	push   $0x0
f012ae46:	50                   	push   %eax
f012ae47:	e8 c9 d1 fd ff       	call   f0108015 <krealloc>
f012ae4c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ae4f:	e8 30 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ae54:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ae5a:	74 17                	je     f012ae73 <test_krealloc+0xffd>
			panic(
f012ae5c:	83 ec 04             	sub    $0x4,%esp
f012ae5f:	68 c8 92 13 f0       	push   $0xf01392c8
f012ae64:	68 ce 0f 00 00       	push   $0xfce
f012ae69:	68 ae 92 13 f0       	push   $0xf01392ae
f012ae6e:	e8 3d 53 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012ae73:	e8 66 1b fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ae78:	89 c2                	mov    %eax,%edx
f012ae7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae7d:	29 c2                	sub    %eax,%edx
f012ae7f:	89 d0                	mov    %edx,%eax
f012ae81:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ae86:	74 17                	je     f012ae9f <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012ae88:	83 ec 04             	sub    $0x4,%esp
f012ae8b:	68 84 a7 13 f0       	push   $0xf013a784
f012ae90:	68 d0 0f 00 00       	push   $0xfd0
f012ae95:	68 ae 92 13 f0       	push   $0xf01392ae
f012ae9a:	e8 11 53 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012ae9f:	e8 3a 1b fe ff       	call   f010c9de <sys_calculate_free_frames>
f012aea4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012aea7:	e8 d8 97 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012aeac:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012aeb2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aeb8:	83 ec 08             	sub    $0x8,%esp
f012aebb:	6a 00                	push   $0x0
f012aebd:	50                   	push   %eax
f012aebe:	e8 52 d1 fd ff       	call   f0108015 <krealloc>
f012aec3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aec6:	e8 b9 97 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012aecb:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012aed1:	74 17                	je     f012aeea <test_krealloc+0x1074>
			panic(
f012aed3:	83 ec 04             	sub    $0x4,%esp
f012aed6:	68 10 a7 13 f0       	push   $0xf013a710
f012aedb:	68 d8 0f 00 00       	push   $0xfd8
f012aee0:	68 ae 92 13 f0       	push   $0xf01392ae
f012aee5:	e8 c6 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012aeea:	e8 ef 1a fe ff       	call   f010c9de <sys_calculate_free_frames>
f012aeef:	89 c2                	mov    %eax,%edx
f012aef1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aef4:	29 c2                	sub    %eax,%edx
f012aef6:	89 d0                	mov    %edx,%eax
f012aef8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012aefd:	74 17                	je     f012af16 <test_krealloc+0x10a0>
			panic(
f012aeff:	83 ec 04             	sub    $0x4,%esp
f012af02:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012af07:	68 db 0f 00 00       	push   $0xfdb
f012af0c:	68 ae 92 13 f0       	push   $0xf01392ae
f012af11:	e8 9a 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012af16:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012af1d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012af24:	eb 48                	jmp    f012af6e <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012af26:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012af29:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012af2e:	83 ec 04             	sub    $0x4,%esp
f012af31:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012af37:	51                   	push   %ecx
f012af38:	52                   	push   %edx
f012af39:	50                   	push   %eax
f012af3a:	e8 a8 c5 fd ff       	call   f01074e7 <get_page_table>
f012af3f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012af42:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012af48:	85 c0                	test   %eax,%eax
f012af4a:	75 17                	jne    f012af63 <test_krealloc+0x10ed>
					panic(
f012af4c:	83 ec 04             	sub    $0x4,%esp
f012af4f:	68 b0 9b 13 f0       	push   $0xf0139bb0
f012af54:	68 e7 0f 00 00       	push   $0xfe7
f012af59:	68 ae 92 13 f0       	push   $0xf01392ae
f012af5e:	e8 4d 52 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012af63:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012af6a:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012af6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012af72:	78 b2                	js     f012af26 <test_krealloc+0x10b0>
f012af74:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012af78:	7f 09                	jg     f012af83 <test_krealloc+0x110d>
f012af7a:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012af81:	76 a3                	jbe    f012af26 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012af83:	83 ec 0c             	sub    $0xc,%esp
f012af86:	68 f7 a7 13 f0       	push   $0xf013a7f7
f012af8b:	e8 a1 5e fd ff       	call   f0100e31 <cprintf>
f012af90:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012af93:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af99:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012af9f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012afa6:	eb 21                	jmp    f012afc9 <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012afa8:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012afae:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012afb1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012afb7:	01 c8                	add    %ecx,%eax
f012afb9:	8a 00                	mov    (%eax),%al
f012afbb:	0f be c0             	movsbl %al,%eax
f012afbe:	01 d0                	add    %edx,%eax
f012afc0:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012afc6:	ff 45 dc             	incl   -0x24(%ebp)
f012afc9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012afcf:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012afd2:	7d d4                	jge    f012afa8 <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012afd4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012afda:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012afe0:	42                   	inc    %edx
f012afe1:	01 d2                	add    %edx,%edx
f012afe3:	39 d0                	cmp    %edx,%eax
f012afe5:	74 17                	je     f012affe <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012afe7:	83 ec 04             	sub    $0x4,%esp
f012afea:	68 00 a8 13 f0       	push   $0xf013a800
f012afef:	68 f9 0f 00 00       	push   $0xff9
f012aff4:	68 ae 92 13 f0       	push   $0xf01392ae
f012aff9:	e8 b2 51 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012affe:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b004:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b00a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b011:	eb 25                	jmp    f012b038 <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012b013:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b019:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b01c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012b023:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b029:	01 c8                	add    %ecx,%eax
f012b02b:	8b 00                	mov    (%eax),%eax
f012b02d:	01 d0                	add    %edx,%eax
f012b02f:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b035:	ff 45 dc             	incl   -0x24(%ebp)
f012b038:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b03e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b041:	7d d0                	jge    f012b013 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012b043:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b049:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012b04f:	42                   	inc    %edx
f012b050:	c1 e2 02             	shl    $0x2,%edx
f012b053:	39 d0                	cmp    %edx,%eax
f012b055:	74 17                	je     f012b06e <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012b057:	83 ec 04             	sub    $0x4,%esp
f012b05a:	68 00 a8 13 f0       	push   $0xf013a800
f012b05f:	68 03 10 00 00       	push   $0x1003
f012b064:	68 ae 92 13 f0       	push   $0xf01392ae
f012b069:	e8 42 51 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b06e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b074:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b07a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b081:	eb 24                	jmp    f012b0a7 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b083:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b089:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b08c:	01 c0                	add    %eax,%eax
f012b08e:	89 c1                	mov    %eax,%ecx
f012b090:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b096:	01 c8                	add    %ecx,%eax
f012b098:	66 8b 00             	mov    (%eax),%ax
f012b09b:	98                   	cwtl   
f012b09c:	01 d0                	add    %edx,%eax
f012b09e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b0a4:	ff 45 dc             	incl   -0x24(%ebp)
f012b0a7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b0ad:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b0b0:	7d d1                	jge    f012b083 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b0b2:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b0b8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b0be:	8d 48 01             	lea    0x1(%eax),%ecx
f012b0c1:	89 c8                	mov    %ecx,%eax
f012b0c3:	c1 e0 02             	shl    $0x2,%eax
f012b0c6:	01 c8                	add    %ecx,%eax
f012b0c8:	39 c2                	cmp    %eax,%edx
f012b0ca:	74 17                	je     f012b0e3 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b0cc:	83 ec 04             	sub    $0x4,%esp
f012b0cf:	68 00 a8 13 f0       	push   $0xf013a800
f012b0d4:	68 0d 10 00 00       	push   $0x100d
f012b0d9:	68 ae 92 13 f0       	push   $0xf01392ae
f012b0de:	e8 cd 50 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b0e3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b0e9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b0ef:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b0f6:	eb 70                	jmp    f012b168 <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b0f8:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b0fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b101:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b108:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b10e:	01 c8                	add    %ecx,%eax
f012b110:	8a 00                	mov    (%eax),%al
f012b112:	0f be c0             	movsbl %al,%eax
f012b115:	01 d0                	add    %edx,%eax
f012b117:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b11d:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b123:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b126:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b12d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b133:	01 c8                	add    %ecx,%eax
f012b135:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b139:	98                   	cwtl   
f012b13a:	01 d0                	add    %edx,%eax
f012b13c:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b142:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b148:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b14b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b152:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b158:	01 c8                	add    %ecx,%eax
f012b15a:	8b 40 04             	mov    0x4(%eax),%eax
f012b15d:	01 d0                	add    %edx,%eax
f012b15f:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b165:	ff 45 dc             	incl   -0x24(%ebp)
f012b168:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b16e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b171:	7d 85                	jge    f012b0f8 <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b173:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b179:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b17f:	8d 50 01             	lea    0x1(%eax),%edx
f012b182:	89 d0                	mov    %edx,%eax
f012b184:	01 c0                	add    %eax,%eax
f012b186:	01 d0                	add    %edx,%eax
f012b188:	01 c0                	add    %eax,%eax
f012b18a:	01 d0                	add    %edx,%eax
f012b18c:	39 c1                	cmp    %eax,%ecx
f012b18e:	75 3a                	jne    f012b1ca <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b190:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b196:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b19c:	8d 50 01             	lea    0x1(%eax),%edx
f012b19f:	89 d0                	mov    %edx,%eax
f012b1a1:	01 c0                	add    %eax,%eax
f012b1a3:	01 d0                	add    %edx,%eax
f012b1a5:	01 c0                	add    %eax,%eax
f012b1a7:	01 d0                	add    %edx,%eax
f012b1a9:	39 c1                	cmp    %eax,%ecx
f012b1ab:	75 1d                	jne    f012b1ca <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b1ad:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b1b3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b1b9:	8d 50 01             	lea    0x1(%eax),%edx
f012b1bc:	89 d0                	mov    %edx,%eax
f012b1be:	01 c0                	add    %eax,%eax
f012b1c0:	01 d0                	add    %edx,%eax
f012b1c2:	01 c0                	add    %eax,%eax
f012b1c4:	01 d0                	add    %edx,%eax
f012b1c6:	39 c1                	cmp    %eax,%ecx
f012b1c8:	74 17                	je     f012b1e1 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b1ca:	83 ec 04             	sub    $0x4,%esp
f012b1cd:	68 00 a8 13 f0       	push   $0xf013a800
f012b1d2:	68 1b 10 00 00       	push   $0x101b
f012b1d7:	68 ae 92 13 f0       	push   $0xf01392ae
f012b1dc:	e8 cf 4f fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b1e1:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b1e8:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b1eb:	e8 ee 17 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b1f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b1f3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b1f9:	83 ec 08             	sub    $0x8,%esp
f012b1fc:	68 00 3c 00 00       	push   $0x3c00
f012b201:	50                   	push   %eax
f012b202:	e8 0e ce fd ff       	call   f0108015 <krealloc>
f012b207:	83 c4 10             	add    $0x10,%esp
f012b20a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b210:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b216:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b21b:	77 17                	ja     f012b234 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b21d:	83 ec 04             	sub    $0x4,%esp
f012b220:	68 54 a5 13 f0       	push   $0xf013a554
f012b225:	68 27 10 00 00       	push   $0x1027
f012b22a:	68 ae 92 13 f0       	push   $0xf01392ae
f012b22f:	e8 7c 4f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b234:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b23a:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b240:	74 17                	je     f012b259 <test_krealloc+0x13e3>
			panic(
f012b242:	83 ec 04             	sub    $0x4,%esp
f012b245:	68 38 a8 13 f0       	push   $0xf013a838
f012b24a:	68 2a 10 00 00       	push   $0x102a
f012b24f:	68 ae 92 13 f0       	push   $0xf01392ae
f012b254:	e8 57 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b259:	e8 80 17 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b25e:	89 c2                	mov    %eax,%edx
f012b260:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b263:	39 c2                	cmp    %eax,%edx
f012b265:	74 17                	je     f012b27e <test_krealloc+0x1408>
			panic(
f012b267:	83 ec 04             	sub    $0x4,%esp
f012b26a:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012b26f:	68 2d 10 00 00       	push   $0x102d
f012b274:	68 ae 92 13 f0       	push   $0xf01392ae
f012b279:	e8 32 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b27e:	e8 5b 17 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b283:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b286:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b28c:	83 ec 08             	sub    $0x8,%esp
f012b28f:	68 00 fc 0f 00       	push   $0xffc00
f012b294:	50                   	push   %eax
f012b295:	e8 7b cd fd ff       	call   f0108015 <krealloc>
f012b29a:	83 c4 10             	add    $0x10,%esp
f012b29d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b2a3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b2a9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b2ae:	77 17                	ja     f012b2c7 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b2b0:	83 ec 04             	sub    $0x4,%esp
f012b2b3:	68 54 a5 13 f0       	push   $0xf013a554
f012b2b8:	68 33 10 00 00       	push   $0x1033
f012b2bd:	68 ae 92 13 f0       	push   $0xf01392ae
f012b2c2:	e8 e9 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b2c7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b2cd:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b2d3:	74 17                	je     f012b2ec <test_krealloc+0x1476>
			panic(
f012b2d5:	83 ec 04             	sub    $0x4,%esp
f012b2d8:	68 38 a8 13 f0       	push   $0xf013a838
f012b2dd:	68 36 10 00 00       	push   $0x1036
f012b2e2:	68 ae 92 13 f0       	push   $0xf01392ae
f012b2e7:	e8 c4 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b2ec:	e8 ed 16 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b2f1:	89 c2                	mov    %eax,%edx
f012b2f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b2f6:	39 c2                	cmp    %eax,%edx
f012b2f8:	74 17                	je     f012b311 <test_krealloc+0x149b>
			panic(
f012b2fa:	83 ec 04             	sub    $0x4,%esp
f012b2fd:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012b302:	68 39 10 00 00       	push   $0x1039
f012b307:	68 ae 92 13 f0       	push   $0xf01392ae
f012b30c:	e8 9f 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b311:	e8 c8 16 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b316:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b319:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b31f:	83 ec 08             	sub    $0x8,%esp
f012b322:	68 00 fc 0f 00       	push   $0xffc00
f012b327:	50                   	push   %eax
f012b328:	e8 e8 cc fd ff       	call   f0108015 <krealloc>
f012b32d:	83 c4 10             	add    $0x10,%esp
f012b330:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b336:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b33c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b341:	77 17                	ja     f012b35a <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b343:	83 ec 04             	sub    $0x4,%esp
f012b346:	68 54 a5 13 f0       	push   $0xf013a554
f012b34b:	68 3f 10 00 00       	push   $0x103f
f012b350:	68 ae 92 13 f0       	push   $0xf01392ae
f012b355:	e8 56 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b35a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b360:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b366:	74 17                	je     f012b37f <test_krealloc+0x1509>
			panic(
f012b368:	83 ec 04             	sub    $0x4,%esp
f012b36b:	68 38 a8 13 f0       	push   $0xf013a838
f012b370:	68 42 10 00 00       	push   $0x1042
f012b375:	68 ae 92 13 f0       	push   $0xf01392ae
f012b37a:	e8 31 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b37f:	e8 5a 16 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b384:	89 c2                	mov    %eax,%edx
f012b386:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b389:	39 c2                	cmp    %eax,%edx
f012b38b:	74 17                	je     f012b3a4 <test_krealloc+0x152e>
			panic(
f012b38d:	83 ec 04             	sub    $0x4,%esp
f012b390:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012b395:	68 45 10 00 00       	push   $0x1045
f012b39a:	68 ae 92 13 f0       	push   $0xf01392ae
f012b39f:	e8 0c 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b3a4:	e8 35 16 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b3a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b3ac:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b3b2:	83 ec 08             	sub    $0x8,%esp
f012b3b5:	68 00 fc 0f 00       	push   $0xffc00
f012b3ba:	50                   	push   %eax
f012b3bb:	e8 55 cc fd ff       	call   f0108015 <krealloc>
f012b3c0:	83 c4 10             	add    $0x10,%esp
f012b3c3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b3c9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b3cf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b3d4:	77 17                	ja     f012b3ed <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b3d6:	83 ec 04             	sub    $0x4,%esp
f012b3d9:	68 54 a5 13 f0       	push   $0xf013a554
f012b3de:	68 4d 10 00 00       	push   $0x104d
f012b3e3:	68 ae 92 13 f0       	push   $0xf01392ae
f012b3e8:	e8 c3 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b3ed:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b3f3:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b3f9:	74 17                	je     f012b412 <test_krealloc+0x159c>
			panic(
f012b3fb:	83 ec 04             	sub    $0x4,%esp
f012b3fe:	68 e8 a8 13 f0       	push   $0xf013a8e8
f012b403:	68 50 10 00 00       	push   $0x1050
f012b408:	68 ae 92 13 f0       	push   $0xf01392ae
f012b40d:	e8 9e 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b412:	e8 c7 15 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b417:	89 c2                	mov    %eax,%edx
f012b419:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b41c:	39 c2                	cmp    %eax,%edx
f012b41e:	74 17                	je     f012b437 <test_krealloc+0x15c1>
			panic(
f012b420:	83 ec 04             	sub    $0x4,%esp
f012b423:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012b428:	68 53 10 00 00       	push   $0x1053
f012b42d:	68 ae 92 13 f0       	push   $0xf01392ae
f012b432:	e8 79 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b437:	83 ec 0c             	sub    $0xc,%esp
f012b43a:	68 c7 9a 13 f0       	push   $0xf0139ac7
f012b43f:	e8 ed 59 fd ff       	call   f0100e31 <cprintf>
f012b444:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b447:	e8 92 15 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b44c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b44f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b455:	83 ec 08             	sub    $0x8,%esp
f012b458:	68 00 18 10 00       	push   $0x101800
f012b45d:	50                   	push   %eax
f012b45e:	e8 b2 cb fd ff       	call   f0108015 <krealloc>
f012b463:	83 c4 10             	add    $0x10,%esp
f012b466:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b469:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b46c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b471:	77 17                	ja     f012b48a <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b473:	83 ec 04             	sub    $0x4,%esp
f012b476:	68 54 a5 13 f0       	push   $0xf013a554
f012b47b:	68 5c 10 00 00       	push   $0x105c
f012b480:	68 ae 92 13 f0       	push   $0xf01392ae
f012b485:	e8 26 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b48a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b490:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b493:	74 17                	je     f012b4ac <test_krealloc+0x1636>
			panic(
f012b495:	83 ec 04             	sub    $0x4,%esp
f012b498:	68 48 a9 13 f0       	push   $0xf013a948
f012b49d:	68 5f 10 00 00       	push   $0x105f
f012b4a2:	68 ae 92 13 f0       	push   $0xf01392ae
f012b4a7:	e8 04 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b4ac:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b4af:	e8 2a 15 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b4b4:	29 c3                	sub    %eax,%ebx
f012b4b6:	89 d8                	mov    %ebx,%eax
f012b4b8:	83 f8 02             	cmp    $0x2,%eax
f012b4bb:	74 17                	je     f012b4d4 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b4bd:	83 ec 04             	sub    $0x4,%esp
f012b4c0:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012b4c5:	68 61 10 00 00       	push   $0x1061
f012b4ca:	68 ae 92 13 f0       	push   $0xf01392ae
f012b4cf:	e8 dc 4c fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b4d4:	e8 05 15 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b4d9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b4dc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b4e2:	83 ec 08             	sub    $0x8,%esp
f012b4e5:	68 00 fc 3f 00       	push   $0x3ffc00
f012b4ea:	50                   	push   %eax
f012b4eb:	e8 25 cb fd ff       	call   f0108015 <krealloc>
f012b4f0:	83 c4 10             	add    $0x10,%esp
f012b4f3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b4f6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b4f9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b4fe:	77 17                	ja     f012b517 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b500:	83 ec 04             	sub    $0x4,%esp
f012b503:	68 54 a5 13 f0       	push   $0xf013a554
f012b508:	68 67 10 00 00       	push   $0x1067
f012b50d:	68 ae 92 13 f0       	push   $0xf01392ae
f012b512:	e8 99 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b517:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b51d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b520:	74 17                	je     f012b539 <test_krealloc+0x16c3>
			panic(
f012b522:	83 ec 04             	sub    $0x4,%esp
f012b525:	68 48 a9 13 f0       	push   $0xf013a948
f012b52a:	68 6a 10 00 00       	push   $0x106a
f012b52f:	68 ae 92 13 f0       	push   $0xf01392ae
f012b534:	e8 77 4c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b539:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b53c:	e8 9d 14 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b541:	29 c3                	sub    %eax,%ebx
f012b543:	89 d8                	mov    %ebx,%eax
f012b545:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b54a:	74 17                	je     f012b563 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b54c:	83 ec 04             	sub    $0x4,%esp
f012b54f:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012b554:	68 6d 10 00 00       	push   $0x106d
f012b559:	68 ae 92 13 f0       	push   $0xf01392ae
f012b55e:	e8 4d 4c fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b563:	83 ec 0c             	sub    $0xc,%esp
f012b566:	68 0c 9b 13 f0       	push   $0xf0139b0c
f012b56b:	e8 c1 58 fd ff       	call   f0100e31 <cprintf>
f012b570:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b573:	e8 66 14 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b578:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b57b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b581:	83 ec 08             	sub    $0x8,%esp
f012b584:	68 00 fc 9f 00       	push   $0x9ffc00
f012b589:	50                   	push   %eax
f012b58a:	e8 86 ca fd ff       	call   f0108015 <krealloc>
f012b58f:	83 c4 10             	add    $0x10,%esp
f012b592:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b595:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b598:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b59d:	77 17                	ja     f012b5b6 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b59f:	83 ec 04             	sub    $0x4,%esp
f012b5a2:	68 54 a5 13 f0       	push   $0xf013a554
f012b5a7:	68 78 10 00 00       	push   $0x1078
f012b5ac:	68 ae 92 13 f0       	push   $0xf01392ae
f012b5b1:	e8 fa 4b fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b5b6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b5bd:	10 00 00 
f012b5c0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b5c5:	0f b6 d0             	movzbl %al,%edx
f012b5c8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b5ce:	01 d0                	add    %edx,%eax
f012b5d0:	48                   	dec    %eax
f012b5d1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b5d7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b5dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5e2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b5e8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b5ee:	29 d0                	sub    %edx,%eax
f012b5f0:	89 c1                	mov    %eax,%ecx
f012b5f2:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b5f9:	10 00 00 
f012b5fc:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b601:	0f b6 c0             	movzbl %al,%eax
f012b604:	c1 e0 04             	shl    $0x4,%eax
f012b607:	89 c2                	mov    %eax,%edx
f012b609:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b60f:	01 d0                	add    %edx,%eax
f012b611:	48                   	dec    %eax
f012b612:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b618:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b61e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b623:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b629:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b62f:	29 d0                	sub    %edx,%eax
f012b631:	01 c8                	add    %ecx,%eax
f012b633:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b639:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b63c:	39 c2                	cmp    %eax,%edx
f012b63e:	74 18                	je     f012b658 <test_krealloc+0x17e2>
			panic(
f012b640:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b643:	50                   	push   %eax
f012b644:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012b649:	68 7c 10 00 00       	push   $0x107c
f012b64e:	68 ae 92 13 f0       	push   $0xf01392ae
f012b653:	e8 58 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b658:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b65e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b661:	75 17                	jne    f012b67a <test_krealloc+0x1804>
			panic(
f012b663:	83 ec 04             	sub    $0x4,%esp
f012b666:	68 3c aa 13 f0       	push   $0xf013aa3c
f012b66b:	68 7f 10 00 00       	push   $0x107f
f012b670:	68 ae 92 13 f0       	push   $0xf01392ae
f012b675:	e8 36 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b67a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b67d:	e8 5c 13 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b682:	29 c3                	sub    %eax,%ebx
f012b684:	89 d8                	mov    %ebx,%eax
f012b686:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b68b:	74 17                	je     f012b6a4 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b68d:	83 ec 04             	sub    $0x4,%esp
f012b690:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012b695:	68 82 10 00 00       	push   $0x1082
f012b69a:	68 ae 92 13 f0       	push   $0xf01392ae
f012b69f:	e8 0c 4b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b6a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b6a7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b6ad:	e8 2c 13 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b6b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b6b5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b6bb:	83 ec 08             	sub    $0x8,%esp
f012b6be:	68 00 fc 5f 00       	push   $0x5ffc00
f012b6c3:	50                   	push   %eax
f012b6c4:	e8 4c c9 fd ff       	call   f0108015 <krealloc>
f012b6c9:	83 c4 10             	add    $0x10,%esp
f012b6cc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b6cf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b6d2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b6d7:	77 17                	ja     f012b6f0 <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b6d9:	83 ec 04             	sub    $0x4,%esp
f012b6dc:	68 54 a5 13 f0       	push   $0xf013a554
f012b6e1:	68 8b 10 00 00       	push   $0x108b
f012b6e6:	68 ae 92 13 f0       	push   $0xf01392ae
f012b6eb:	e8 c0 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b6f0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b6f6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b6f9:	74 17                	je     f012b712 <test_krealloc+0x189c>
			panic(
f012b6fb:	83 ec 04             	sub    $0x4,%esp
f012b6fe:	68 48 a9 13 f0       	push   $0xf013a948
f012b703:	68 8e 10 00 00       	push   $0x108e
f012b708:	68 ae 92 13 f0       	push   $0xf01392ae
f012b70d:	e8 9e 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b712:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b715:	e8 c4 12 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b71a:	29 c3                	sub    %eax,%ebx
f012b71c:	89 d8                	mov    %ebx,%eax
f012b71e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b723:	74 17                	je     f012b73c <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b725:	83 ec 04             	sub    $0x4,%esp
f012b728:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012b72d:	68 91 10 00 00       	push   $0x1091
f012b732:	68 ae 92 13 f0       	push   $0xf01392ae
f012b737:	e8 74 4a fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b73c:	e8 9d 12 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b741:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b744:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b74a:	83 ec 08             	sub    $0x8,%esp
f012b74d:	68 00 fc 3f 01       	push   $0x13ffc00
f012b752:	50                   	push   %eax
f012b753:	e8 bd c8 fd ff       	call   f0108015 <krealloc>
f012b758:	83 c4 10             	add    $0x10,%esp
f012b75b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b75e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b761:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b766:	77 17                	ja     f012b77f <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b768:	83 ec 04             	sub    $0x4,%esp
f012b76b:	68 54 a5 13 f0       	push   $0xf013a554
f012b770:	68 98 10 00 00       	push   $0x1098
f012b775:	68 ae 92 13 f0       	push   $0xf01392ae
f012b77a:	e8 31 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b77f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b785:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b788:	75 17                	jne    f012b7a1 <test_krealloc+0x192b>
			panic(
f012b78a:	83 ec 04             	sub    $0x4,%esp
f012b78d:	68 3c aa 13 f0       	push   $0xf013aa3c
f012b792:	68 9b 10 00 00       	push   $0x109b
f012b797:	68 ae 92 13 f0       	push   $0xf01392ae
f012b79c:	e8 0f 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b7a1:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b7a8:	10 00 00 
f012b7ab:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b7b0:	0f b6 d0             	movzbl %al,%edx
f012b7b3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b7b9:	01 d0                	add    %edx,%eax
f012b7bb:	48                   	dec    %eax
f012b7bc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b7c2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7cd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b7d3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7d9:	29 d0                	sub    %edx,%eax
f012b7db:	89 c1                	mov    %eax,%ecx
f012b7dd:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b7e4:	10 00 00 
f012b7e7:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012b7ec:	0f b6 c0             	movzbl %al,%eax
f012b7ef:	c1 e0 04             	shl    $0x4,%eax
f012b7f2:	89 c2                	mov    %eax,%edx
f012b7f4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b7fa:	01 d0                	add    %edx,%eax
f012b7fc:	48                   	dec    %eax
f012b7fd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b803:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b809:	ba 00 00 00 00       	mov    $0x0,%edx
f012b80e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b814:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b81a:	29 d0                	sub    %edx,%eax
f012b81c:	01 c8                	add    %ecx,%eax
f012b81e:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012b824:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b827:	39 c2                	cmp    %eax,%edx
f012b829:	74 17                	je     f012b842 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012b82b:	83 ec 04             	sub    $0x4,%esp
f012b82e:	68 c0 aa 13 f0       	push   $0xf013aac0
f012b833:	68 9d 10 00 00       	push   $0x109d
f012b838:	68 ae 92 13 f0       	push   $0xf01392ae
f012b83d:	e8 6e 49 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012b842:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b845:	e8 94 11 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012b84a:	29 c3                	sub    %eax,%ebx
f012b84c:	89 d8                	mov    %ebx,%eax
f012b84e:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012b853:	74 17                	je     f012b86c <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b855:	83 ec 04             	sub    $0x4,%esp
f012b858:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012b85d:	68 a0 10 00 00       	push   $0x10a0
f012b862:	68 ae 92 13 f0       	push   $0xf01392ae
f012b867:	e8 44 49 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012b86c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b86f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b875:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b87b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012b881:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b888:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b88b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b892:	eb 21                	jmp    f012b8b5 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012b894:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b89a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012b89d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b8a3:	01 c8                	add    %ecx,%eax
f012b8a5:	8a 00                	mov    (%eax),%al
f012b8a7:	0f be c0             	movsbl %al,%eax
f012b8aa:	01 d0                	add    %edx,%eax
f012b8ac:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b8b2:	ff 45 d8             	incl   -0x28(%ebp)
f012b8b5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b8bb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b8be:	7d d4                	jge    f012b894 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b8c0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b8c6:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b8cc:	42                   	inc    %edx
f012b8cd:	01 d2                	add    %edx,%edx
f012b8cf:	39 d0                	cmp    %edx,%eax
f012b8d1:	74 17                	je     f012b8ea <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012b8d3:	83 ec 04             	sub    $0x4,%esp
f012b8d6:	68 f4 aa 13 f0       	push   $0xf013aaf4
f012b8db:	68 ae 10 00 00       	push   $0x10ae
f012b8e0:	68 ae 92 13 f0       	push   $0xf01392ae
f012b8e5:	e8 c6 48 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b8ea:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b8f0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012b8f6:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b8fd:	00 00 00 
		sums[1] = 0;
f012b900:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012b907:	00 00 00 
		sums[2] = 0;
f012b90a:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012b911:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b914:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b91b:	eb 70                	jmp    f012b98d <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012b91d:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b923:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b926:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b92d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b933:	01 c8                	add    %ecx,%eax
f012b935:	8a 00                	mov    (%eax),%al
f012b937:	0f be c0             	movsbl %al,%eax
f012b93a:	01 d0                	add    %edx,%eax
f012b93c:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012b942:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b948:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b94b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b952:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b958:	01 c8                	add    %ecx,%eax
f012b95a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b95e:	98                   	cwtl   
f012b95f:	01 d0                	add    %edx,%eax
f012b961:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012b967:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b96d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b970:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b977:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b97d:	01 c8                	add    %ecx,%eax
f012b97f:	8b 40 04             	mov    0x4(%eax),%eax
f012b982:	01 d0                	add    %edx,%eax
f012b984:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b98a:	ff 45 d8             	incl   -0x28(%ebp)
f012b98d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b993:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b996:	7d 85                	jge    f012b91d <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012b998:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012b99e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9a4:	8d 50 01             	lea    0x1(%eax),%edx
f012b9a7:	89 d0                	mov    %edx,%eax
f012b9a9:	01 c0                	add    %eax,%eax
f012b9ab:	01 d0                	add    %edx,%eax
f012b9ad:	01 c0                	add    %eax,%eax
f012b9af:	01 d0                	add    %edx,%eax
f012b9b1:	39 c1                	cmp    %eax,%ecx
f012b9b3:	75 3a                	jne    f012b9ef <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012b9b5:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012b9bb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9c1:	8d 50 01             	lea    0x1(%eax),%edx
f012b9c4:	89 d0                	mov    %edx,%eax
f012b9c6:	01 c0                	add    %eax,%eax
f012b9c8:	01 d0                	add    %edx,%eax
f012b9ca:	01 c0                	add    %eax,%eax
f012b9cc:	01 d0                	add    %edx,%eax
f012b9ce:	39 c1                	cmp    %eax,%ecx
f012b9d0:	75 1d                	jne    f012b9ef <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012b9d2:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012b9d8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9de:	8d 50 01             	lea    0x1(%eax),%edx
f012b9e1:	89 d0                	mov    %edx,%eax
f012b9e3:	01 c0                	add    %eax,%eax
f012b9e5:	01 d0                	add    %edx,%eax
f012b9e7:	01 c0                	add    %eax,%eax
f012b9e9:	01 d0                	add    %edx,%eax
f012b9eb:	39 c1                	cmp    %eax,%ecx
f012b9ed:	74 17                	je     f012ba06 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012b9ef:	83 ec 04             	sub    $0x4,%esp
f012b9f2:	68 f4 aa 13 f0       	push   $0xf013aaf4
f012b9f7:	68 c0 10 00 00       	push   $0x10c0
f012b9fc:	68 ae 92 13 f0       	push   $0xf01392ae
f012ba01:	e8 aa 47 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ba06:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ba0c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012ba12:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012ba19:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ba1c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ba23:	eb 24                	jmp    f012ba49 <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012ba25:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ba2e:	01 c0                	add    %eax,%eax
f012ba30:	89 c1                	mov    %eax,%ecx
f012ba32:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ba38:	01 c8                	add    %ecx,%eax
f012ba3a:	66 8b 00             	mov    (%eax),%ax
f012ba3d:	98                   	cwtl   
f012ba3e:	01 d0                	add    %edx,%eax
f012ba40:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ba46:	ff 45 d8             	incl   -0x28(%ebp)
f012ba49:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ba52:	7d d1                	jge    f012ba25 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ba54:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba5a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba60:	8d 48 01             	lea    0x1(%eax),%ecx
f012ba63:	89 c8                	mov    %ecx,%eax
f012ba65:	c1 e0 02             	shl    $0x2,%eax
f012ba68:	01 c8                	add    %ecx,%eax
f012ba6a:	39 c2                	cmp    %eax,%edx
f012ba6c:	74 17                	je     f012ba85 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012ba6e:	83 ec 04             	sub    $0x4,%esp
f012ba71:	68 f4 aa 13 f0       	push   $0xf013aaf4
f012ba76:	68 ca 10 00 00       	push   $0x10ca
f012ba7b:	68 ae 92 13 f0       	push   $0xf01392ae
f012ba80:	e8 2b 47 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ba85:	e8 54 0f fe ff       	call   f010c9de <sys_calculate_free_frames>
f012ba8a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ba8d:	e8 f2 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ba92:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ba98:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ba9e:	83 ec 08             	sub    $0x8,%esp
f012baa1:	6a 00                	push   $0x0
f012baa3:	50                   	push   %eax
f012baa4:	e8 6c c5 fd ff       	call   f0108015 <krealloc>
f012baa9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012baac:	e8 d3 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bab1:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bab7:	74 17                	je     f012bad0 <test_krealloc+0x1c5a>
			panic(
f012bab9:	83 ec 04             	sub    $0x4,%esp
f012babc:	68 c8 92 13 f0       	push   $0xf01392c8
f012bac1:	68 d2 10 00 00       	push   $0x10d2
f012bac6:	68 ae 92 13 f0       	push   $0xf01392ae
f012bacb:	e8 e0 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012bad0:	e8 09 0f fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bad5:	89 c2                	mov    %eax,%edx
f012bad7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bada:	29 c2                	sub    %eax,%edx
f012badc:	89 d0                	mov    %edx,%eax
f012bade:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012bae3:	74 17                	je     f012bafc <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012bae5:	83 ec 04             	sub    $0x4,%esp
f012bae8:	68 84 a7 13 f0       	push   $0xf013a784
f012baed:	68 d4 10 00 00       	push   $0x10d4
f012baf2:	68 ae 92 13 f0       	push   $0xf01392ae
f012baf7:	e8 b4 46 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012bafc:	e8 dd 0e fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bb01:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bb04:	e8 7b 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bb09:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012bb0f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bb15:	83 ec 0c             	sub    $0xc,%esp
f012bb18:	50                   	push   %eax
f012bb19:	e8 5b c4 fd ff       	call   f0107f79 <kfree>
f012bb1e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bb21:	e8 5e 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bb26:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bb2c:	74 17                	je     f012bb45 <test_krealloc+0x1ccf>
			panic(
f012bb2e:	83 ec 04             	sub    $0x4,%esp
f012bb31:	68 c8 92 13 f0       	push   $0xf01392c8
f012bb36:	68 dc 10 00 00       	push   $0x10dc
f012bb3b:	68 ae 92 13 f0       	push   $0xf01392ae
f012bb40:	e8 6b 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012bb45:	e8 94 0e fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bb4a:	89 c2                	mov    %eax,%edx
f012bb4c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bb4f:	29 c2                	sub    %eax,%edx
f012bb51:	89 d0                	mov    %edx,%eax
f012bb53:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012bb58:	74 17                	je     f012bb71 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012bb5a:	83 ec 04             	sub    $0x4,%esp
f012bb5d:	68 84 a7 13 f0       	push   $0xf013a784
f012bb62:	68 de 10 00 00       	push   $0x10de
f012bb67:	68 ae 92 13 f0       	push   $0xf01392ae
f012bb6c:	e8 3f 46 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bb71:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012bb78:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012bb7f:	eb 48                	jmp    f012bbc9 <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012bb81:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012bb84:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012bb89:	83 ec 04             	sub    $0x4,%esp
f012bb8c:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012bb92:	51                   	push   %ecx
f012bb93:	52                   	push   %edx
f012bb94:	50                   	push   %eax
f012bb95:	e8 4d b9 fd ff       	call   f01074e7 <get_page_table>
f012bb9a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012bb9d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012bba3:	85 c0                	test   %eax,%eax
f012bba5:	75 17                	jne    f012bbbe <test_krealloc+0x1d48>
					panic(
f012bba7:	83 ec 04             	sub    $0x4,%esp
f012bbaa:	68 b0 9b 13 f0       	push   $0xf0139bb0
f012bbaf:	68 eb 10 00 00       	push   $0x10eb
f012bbb4:	68 ae 92 13 f0       	push   $0xf01392ae
f012bbb9:	e8 f2 45 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bbbe:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012bbc5:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012bbc9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bbcd:	78 b2                	js     f012bb81 <test_krealloc+0x1d0b>
f012bbcf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bbd3:	7f 09                	jg     f012bbde <test_krealloc+0x1d68>
f012bbd5:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012bbdc:	76 a3                	jbe    f012bb81 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012bbde:	83 ec 0c             	sub    $0xc,%esp
f012bbe1:	68 92 94 13 f0       	push   $0xf0139492
f012bbe6:	e8 46 52 fd ff       	call   f0100e31 <cprintf>
f012bbeb:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012bbee:	83 ec 0c             	sub    $0xc,%esp
f012bbf1:	68 20 ab 13 f0       	push   $0xf013ab20
f012bbf6:	e8 36 52 fd ff       	call   f0100e31 <cprintf>
f012bbfb:	83 c4 10             	add    $0x10,%esp
	return 0;
f012bbfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012bc03:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bc06:	5b                   	pop    %ebx
f012bc07:	5f                   	pop    %edi
f012bc08:	5d                   	pop    %ebp
f012bc09:	c3                   	ret    

f012bc0a <test_krealloc_BF>:


int test_krealloc_BF() {
f012bc0a:	55                   	push   %ebp
f012bc0b:	89 e5                	mov    %esp,%ebp
f012bc0d:	57                   	push   %edi
f012bc0e:	53                   	push   %ebx
f012bc0f:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012bc15:	83 ec 0c             	sub    $0xc,%esp
f012bc18:	68 f0 91 13 f0       	push   $0xf01391f0
f012bc1d:	e8 0f 52 fd ff       	call   f0100e31 <cprintf>
f012bc22:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bc25:	83 ec 0c             	sub    $0xc,%esp
f012bc28:	68 20 92 13 f0       	push   $0xf0139220
f012bc2d:	e8 ff 51 fd ff       	call   f0100e31 <cprintf>
f012bc32:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bc35:	83 ec 0c             	sub    $0xc,%esp
f012bc38:	68 f0 91 13 f0       	push   $0xf01391f0
f012bc3d:	e8 ef 51 fd ff       	call   f0100e31 <cprintf>
f012bc42:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bc45:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bc49:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bc4d:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bc53:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bc59:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bc60:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bc67:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012bc6d:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc72:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc77:	89 d7                	mov    %edx,%edi
f012bc79:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bc7b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bc82:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012bc88:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bc8d:	b8 00 00 00 00       	mov    $0x0,%eax
f012bc92:	89 d7                	mov    %edx,%edi
f012bc94:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bc96:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012bc9c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bca1:	b8 00 00 00 00       	mov    $0x0,%eax
f012bca6:	89 d7                	mov    %edx,%edi
f012bca8:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bcaa:	e8 2f 0d fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bcaf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bcb2:	83 ec 08             	sub    $0x8,%esp
f012bcb5:	68 00 fc 0f 00       	push   $0xffc00
f012bcba:	6a 00                	push   $0x0
f012bcbc:	e8 54 c3 fd ff       	call   f0108015 <krealloc>
f012bcc1:	83 c4 10             	add    $0x10,%esp
f012bcc4:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bcca:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bcd0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bcd5:	77 17                	ja     f012bcee <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bcd7:	83 ec 04             	sub    $0x4,%esp
f012bcda:	68 54 a5 13 f0       	push   $0xf013a554
f012bcdf:	68 1a 11 00 00       	push   $0x111a
f012bce4:	68 ae 92 13 f0       	push   $0xf01392ae
f012bce9:	e8 c2 44 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bcee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bcf4:	89 c1                	mov    %eax,%ecx
f012bcf6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bcfd:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bd02:	0f b6 d0             	movzbl %al,%edx
f012bd05:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bd08:	01 d0                	add    %edx,%eax
f012bd0a:	48                   	dec    %eax
f012bd0b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bd0e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bd11:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd16:	f7 75 b4             	divl   -0x4c(%ebp)
f012bd19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bd1c:	29 d0                	sub    %edx,%eax
f012bd1e:	89 c3                	mov    %eax,%ebx
f012bd20:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bd27:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bd2c:	0f b6 c0             	movzbl %al,%eax
f012bd2f:	c1 e0 04             	shl    $0x4,%eax
f012bd32:	89 c2                	mov    %eax,%edx
f012bd34:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bd37:	01 d0                	add    %edx,%eax
f012bd39:	48                   	dec    %eax
f012bd3a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bd3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd40:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd45:	f7 75 ac             	divl   -0x54(%ebp)
f012bd48:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd4b:	29 d0                	sub    %edx,%eax
f012bd4d:	01 d8                	add    %ebx,%eax
f012bd4f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bd54:	39 c1                	cmp    %eax,%ecx
f012bd56:	74 17                	je     f012bd6f <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012bd58:	83 ec 04             	sub    $0x4,%esp
f012bd5b:	68 90 a5 13 f0       	push   $0xf013a590
f012bd60:	68 1c 11 00 00       	push   $0x111c
f012bd65:	68 ae 92 13 f0       	push   $0xf01392ae
f012bd6a:	e8 41 44 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bd6f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd72:	e8 67 0c fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bd77:	29 c3                	sub    %eax,%ebx
f012bd79:	89 d8                	mov    %ebx,%eax
f012bd7b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bd80:	74 17                	je     f012bd99 <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012bd82:	83 ec 04             	sub    $0x4,%esp
f012bd85:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012bd8a:	68 1f 11 00 00       	push   $0x111f
f012bd8f:	68 ae 92 13 f0       	push   $0xf01392ae
f012bd94:	e8 17 44 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bd99:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012bda0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bda3:	e8 36 0c fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bda8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bdab:	83 ec 08             	sub    $0x8,%esp
f012bdae:	68 00 fc 0f 00       	push   $0xffc00
f012bdb3:	6a 00                	push   $0x0
f012bdb5:	e8 5b c2 fd ff       	call   f0108015 <krealloc>
f012bdba:	83 c4 10             	add    $0x10,%esp
f012bdbd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bdc3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bdc9:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bdce:	77 17                	ja     f012bde7 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdd0:	83 ec 04             	sub    $0x4,%esp
f012bdd3:	68 54 a5 13 f0       	push   $0xf013a554
f012bdd8:	68 27 11 00 00       	push   $0x1127
f012bddd:	68 ae 92 13 f0       	push   $0xf01392ae
f012bde2:	e8 c9 43 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012bde7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bded:	89 c1                	mov    %eax,%ecx
f012bdef:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012bdf6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bdfb:	0f b6 d0             	movzbl %al,%edx
f012bdfe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012be01:	01 d0                	add    %edx,%eax
f012be03:	48                   	dec    %eax
f012be04:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012be07:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012be0a:	ba 00 00 00 00       	mov    $0x0,%edx
f012be0f:	f7 75 a4             	divl   -0x5c(%ebp)
f012be12:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012be15:	29 d0                	sub    %edx,%eax
f012be17:	89 c3                	mov    %eax,%ebx
f012be19:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012be20:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012be25:	0f b6 c0             	movzbl %al,%eax
f012be28:	c1 e0 04             	shl    $0x4,%eax
f012be2b:	89 c2                	mov    %eax,%edx
f012be2d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012be30:	01 d0                	add    %edx,%eax
f012be32:	48                   	dec    %eax
f012be33:	89 45 98             	mov    %eax,-0x68(%ebp)
f012be36:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be39:	ba 00 00 00 00       	mov    $0x0,%edx
f012be3e:	f7 75 9c             	divl   -0x64(%ebp)
f012be41:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be44:	29 d0                	sub    %edx,%eax
f012be46:	01 d8                	add    %ebx,%eax
f012be48:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012be4d:	39 c1                	cmp    %eax,%ecx
f012be4f:	74 17                	je     f012be68 <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012be51:	83 ec 04             	sub    $0x4,%esp
f012be54:	68 90 a5 13 f0       	push   $0xf013a590
f012be59:	68 29 11 00 00       	push   $0x1129
f012be5e:	68 ae 92 13 f0       	push   $0xf01392ae
f012be63:	e8 48 43 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012be68:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be6b:	e8 6e 0b fe ff       	call   f010c9de <sys_calculate_free_frames>
f012be70:	29 c3                	sub    %eax,%ebx
f012be72:	89 d8                	mov    %ebx,%eax
f012be74:	3d 00 01 00 00       	cmp    $0x100,%eax
f012be79:	74 17                	je     f012be92 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012be7b:	83 ec 04             	sub    $0x4,%esp
f012be7e:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012be83:	68 2b 11 00 00       	push   $0x112b
f012be88:	68 ae 92 13 f0       	push   $0xf01392ae
f012be8d:	e8 1e 43 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012be92:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012be99:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012be9c:	e8 3d 0b fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bea1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bea4:	83 ec 08             	sub    $0x8,%esp
f012bea7:	68 00 fc 0f 00       	push   $0xffc00
f012beac:	6a 00                	push   $0x0
f012beae:	e8 62 c1 fd ff       	call   f0108015 <krealloc>
f012beb3:	83 c4 10             	add    $0x10,%esp
f012beb6:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012bebc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bec2:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bec7:	77 17                	ja     f012bee0 <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bec9:	83 ec 04             	sub    $0x4,%esp
f012becc:	68 54 a5 13 f0       	push   $0xf013a554
f012bed1:	68 33 11 00 00       	push   $0x1133
f012bed6:	68 ae 92 13 f0       	push   $0xf01392ae
f012bedb:	e8 d0 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bee0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bee6:	89 c1                	mov    %eax,%ecx
f012bee8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012beef:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bef4:	0f b6 d0             	movzbl %al,%edx
f012bef7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012befa:	01 d0                	add    %edx,%eax
f012befc:	48                   	dec    %eax
f012befd:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bf00:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bf03:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf08:	f7 75 94             	divl   -0x6c(%ebp)
f012bf0b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bf0e:	29 d0                	sub    %edx,%eax
f012bf10:	89 c3                	mov    %eax,%ebx
f012bf12:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bf19:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bf1e:	0f b6 c0             	movzbl %al,%eax
f012bf21:	c1 e0 04             	shl    $0x4,%eax
f012bf24:	89 c2                	mov    %eax,%edx
f012bf26:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bf29:	01 d0                	add    %edx,%eax
f012bf2b:	48                   	dec    %eax
f012bf2c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bf2f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf32:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf37:	f7 75 8c             	divl   -0x74(%ebp)
f012bf3a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf3d:	29 d0                	sub    %edx,%eax
f012bf3f:	01 d8                	add    %ebx,%eax
f012bf41:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bf46:	39 c1                	cmp    %eax,%ecx
f012bf48:	74 17                	je     f012bf61 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012bf4a:	83 ec 04             	sub    $0x4,%esp
f012bf4d:	68 90 a5 13 f0       	push   $0xf013a590
f012bf52:	68 35 11 00 00       	push   $0x1135
f012bf57:	68 ae 92 13 f0       	push   $0xf01392ae
f012bf5c:	e8 4f 42 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf61:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf64:	e8 75 0a fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bf69:	29 c3                	sub    %eax,%ebx
f012bf6b:	89 d8                	mov    %ebx,%eax
f012bf6d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf72:	74 17                	je     f012bf8b <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012bf74:	83 ec 04             	sub    $0x4,%esp
f012bf77:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012bf7c:	68 37 11 00 00       	push   $0x1137
f012bf81:	68 ae 92 13 f0       	push   $0xf01392ae
f012bf86:	e8 25 42 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bf8b:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012bf92:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bf95:	e8 44 0a fe ff       	call   f010c9de <sys_calculate_free_frames>
f012bf9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bf9d:	83 ec 08             	sub    $0x8,%esp
f012bfa0:	68 00 fc 0f 00       	push   $0xffc00
f012bfa5:	6a 00                	push   $0x0
f012bfa7:	e8 69 c0 fd ff       	call   f0108015 <krealloc>
f012bfac:	83 c4 10             	add    $0x10,%esp
f012bfaf:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bfb5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bfbb:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bfc0:	77 17                	ja     f012bfd9 <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bfc2:	83 ec 04             	sub    $0x4,%esp
f012bfc5:	68 54 a5 13 f0       	push   $0xf013a554
f012bfca:	68 3e 11 00 00       	push   $0x113e
f012bfcf:	68 ae 92 13 f0       	push   $0xf01392ae
f012bfd4:	e8 d7 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bfd9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bfdf:	89 c1                	mov    %eax,%ecx
f012bfe1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012bfe8:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012bfed:	0f b6 d0             	movzbl %al,%edx
f012bff0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bff3:	01 d0                	add    %edx,%eax
f012bff5:	48                   	dec    %eax
f012bff6:	89 45 80             	mov    %eax,-0x80(%ebp)
f012bff9:	8b 45 80             	mov    -0x80(%ebp),%eax
f012bffc:	ba 00 00 00 00       	mov    $0x0,%edx
f012c001:	f7 75 84             	divl   -0x7c(%ebp)
f012c004:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c007:	29 d0                	sub    %edx,%eax
f012c009:	89 c3                	mov    %eax,%ebx
f012c00b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c012:	10 00 00 
f012c015:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c01a:	0f b6 c0             	movzbl %al,%eax
f012c01d:	c1 e0 04             	shl    $0x4,%eax
f012c020:	89 c2                	mov    %eax,%edx
f012c022:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c028:	01 d0                	add    %edx,%eax
f012c02a:	48                   	dec    %eax
f012c02b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c031:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c037:	ba 00 00 00 00       	mov    $0x0,%edx
f012c03c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c042:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c048:	29 d0                	sub    %edx,%eax
f012c04a:	01 d8                	add    %ebx,%eax
f012c04c:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c051:	39 c1                	cmp    %eax,%ecx
f012c053:	74 17                	je     f012c06c <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012c055:	83 ec 04             	sub    $0x4,%esp
f012c058:	68 90 a5 13 f0       	push   $0xf013a590
f012c05d:	68 40 11 00 00       	push   $0x1140
f012c062:	68 ae 92 13 f0       	push   $0xf01392ae
f012c067:	e8 44 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c06c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c06f:	e8 6a 09 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c074:	29 c3                	sub    %eax,%ebx
f012c076:	89 d8                	mov    %ebx,%eax
f012c078:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c07d:	74 17                	je     f012c096 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c07f:	83 ec 04             	sub    $0x4,%esp
f012c082:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012c087:	68 42 11 00 00       	push   $0x1142
f012c08c:	68 ae 92 13 f0       	push   $0xf01392ae
f012c091:	e8 1a 41 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c096:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c09d:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c0a0:	e8 39 09 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c0a5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c0a8:	83 ec 08             	sub    $0x8,%esp
f012c0ab:	68 00 fc 1f 00       	push   $0x1ffc00
f012c0b0:	6a 00                	push   $0x0
f012c0b2:	e8 5e bf fd ff       	call   f0108015 <krealloc>
f012c0b7:	83 c4 10             	add    $0x10,%esp
f012c0ba:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c0c0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c0c6:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c0cb:	77 17                	ja     f012c0e4 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0cd:	83 ec 04             	sub    $0x4,%esp
f012c0d0:	68 54 a5 13 f0       	push   $0xf013a554
f012c0d5:	68 49 11 00 00       	push   $0x1149
f012c0da:	68 ae 92 13 f0       	push   $0xf01392ae
f012c0df:	e8 cc 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c0e4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c0ea:	89 c1                	mov    %eax,%ecx
f012c0ec:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c0f3:	10 00 00 
f012c0f6:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c0fb:	0f b6 d0             	movzbl %al,%edx
f012c0fe:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c104:	01 d0                	add    %edx,%eax
f012c106:	48                   	dec    %eax
f012c107:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c10d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c113:	ba 00 00 00 00       	mov    $0x0,%edx
f012c118:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c11e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c124:	29 d0                	sub    %edx,%eax
f012c126:	89 c3                	mov    %eax,%ebx
f012c128:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c12f:	10 00 00 
f012c132:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c137:	0f b6 c0             	movzbl %al,%eax
f012c13a:	c1 e0 04             	shl    $0x4,%eax
f012c13d:	89 c2                	mov    %eax,%edx
f012c13f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c145:	01 d0                	add    %edx,%eax
f012c147:	48                   	dec    %eax
f012c148:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c14e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c154:	ba 00 00 00 00       	mov    $0x0,%edx
f012c159:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c15f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c165:	29 d0                	sub    %edx,%eax
f012c167:	01 d8                	add    %ebx,%eax
f012c169:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c16e:	39 c1                	cmp    %eax,%ecx
f012c170:	74 17                	je     f012c189 <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c172:	83 ec 04             	sub    $0x4,%esp
f012c175:	68 90 a5 13 f0       	push   $0xf013a590
f012c17a:	68 4b 11 00 00       	push   $0x114b
f012c17f:	68 ae 92 13 f0       	push   $0xf01392ae
f012c184:	e8 27 40 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c189:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c18c:	e8 4d 08 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c191:	29 c3                	sub    %eax,%ebx
f012c193:	89 d8                	mov    %ebx,%eax
f012c195:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c19a:	74 17                	je     f012c1b3 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c19c:	83 ec 04             	sub    $0x4,%esp
f012c19f:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012c1a4:	68 4d 11 00 00       	push   $0x114d
f012c1a9:	68 ae 92 13 f0       	push   $0xf01392ae
f012c1ae:	e8 fd 3f fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c1b3:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c1ba:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c1bd:	e8 1c 08 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c1c2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c1c5:	83 ec 08             	sub    $0x8,%esp
f012c1c8:	68 00 fc 1f 00       	push   $0x1ffc00
f012c1cd:	6a 00                	push   $0x0
f012c1cf:	e8 41 be fd ff       	call   f0108015 <krealloc>
f012c1d4:	83 c4 10             	add    $0x10,%esp
f012c1d7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c1dd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c1e3:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c1e8:	77 17                	ja     f012c201 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c1ea:	83 ec 04             	sub    $0x4,%esp
f012c1ed:	68 54 a5 13 f0       	push   $0xf013a554
f012c1f2:	68 54 11 00 00       	push   $0x1154
f012c1f7:	68 ae 92 13 f0       	push   $0xf01392ae
f012c1fc:	e8 af 3f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c201:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c207:	89 c1                	mov    %eax,%ecx
f012c209:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c210:	10 00 00 
f012c213:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c218:	0f b6 d0             	movzbl %al,%edx
f012c21b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c221:	01 d0                	add    %edx,%eax
f012c223:	48                   	dec    %eax
f012c224:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c22a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c230:	ba 00 00 00 00       	mov    $0x0,%edx
f012c235:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c23b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c241:	29 d0                	sub    %edx,%eax
f012c243:	89 c3                	mov    %eax,%ebx
f012c245:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c24c:	10 00 00 
f012c24f:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c254:	0f b6 c0             	movzbl %al,%eax
f012c257:	c1 e0 04             	shl    $0x4,%eax
f012c25a:	89 c2                	mov    %eax,%edx
f012c25c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c262:	01 d0                	add    %edx,%eax
f012c264:	48                   	dec    %eax
f012c265:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c26b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c271:	ba 00 00 00 00       	mov    $0x0,%edx
f012c276:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c27c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c282:	29 d0                	sub    %edx,%eax
f012c284:	01 d8                	add    %ebx,%eax
f012c286:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c28b:	39 c1                	cmp    %eax,%ecx
f012c28d:	74 17                	je     f012c2a6 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c28f:	83 ec 04             	sub    $0x4,%esp
f012c292:	68 90 a5 13 f0       	push   $0xf013a590
f012c297:	68 56 11 00 00       	push   $0x1156
f012c29c:	68 ae 92 13 f0       	push   $0xf01392ae
f012c2a1:	e8 0a 3f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c2a6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c2a9:	e8 30 07 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c2ae:	29 c3                	sub    %eax,%ebx
f012c2b0:	89 d8                	mov    %ebx,%eax
f012c2b2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c2b7:	74 17                	je     f012c2d0 <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c2b9:	83 ec 04             	sub    $0x4,%esp
f012c2bc:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012c2c1:	68 58 11 00 00       	push   $0x1158
f012c2c6:	68 ae 92 13 f0       	push   $0xf01392ae
f012c2cb:	e8 e0 3e fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c2d0:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c2d7:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c2da:	e8 ff 06 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c2df:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c2e2:	83 ec 08             	sub    $0x8,%esp
f012c2e5:	68 00 fc 2f 00       	push   $0x2ffc00
f012c2ea:	6a 00                	push   $0x0
f012c2ec:	e8 24 bd fd ff       	call   f0108015 <krealloc>
f012c2f1:	83 c4 10             	add    $0x10,%esp
f012c2f4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c2fa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c300:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c305:	77 17                	ja     f012c31e <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c307:	83 ec 04             	sub    $0x4,%esp
f012c30a:	68 54 a5 13 f0       	push   $0xf013a554
f012c30f:	68 5f 11 00 00       	push   $0x115f
f012c314:	68 ae 92 13 f0       	push   $0xf01392ae
f012c319:	e8 92 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c31e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c324:	89 c1                	mov    %eax,%ecx
f012c326:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c32d:	10 00 00 
f012c330:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c335:	0f b6 d0             	movzbl %al,%edx
f012c338:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c33e:	01 d0                	add    %edx,%eax
f012c340:	48                   	dec    %eax
f012c341:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c347:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c34d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c352:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c358:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c35e:	29 d0                	sub    %edx,%eax
f012c360:	89 c3                	mov    %eax,%ebx
f012c362:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c369:	10 00 00 
f012c36c:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c371:	0f b6 c0             	movzbl %al,%eax
f012c374:	c1 e0 04             	shl    $0x4,%eax
f012c377:	89 c2                	mov    %eax,%edx
f012c379:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c37f:	01 d0                	add    %edx,%eax
f012c381:	48                   	dec    %eax
f012c382:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c388:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c38e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c393:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c399:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c39f:	29 d0                	sub    %edx,%eax
f012c3a1:	01 d8                	add    %ebx,%eax
f012c3a3:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c3a8:	39 c1                	cmp    %eax,%ecx
f012c3aa:	74 17                	je     f012c3c3 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c3ac:	83 ec 04             	sub    $0x4,%esp
f012c3af:	68 90 a5 13 f0       	push   $0xf013a590
f012c3b4:	68 61 11 00 00       	push   $0x1161
f012c3b9:	68 ae 92 13 f0       	push   $0xf01392ae
f012c3be:	e8 ed 3d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c3c3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c3c6:	e8 13 06 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c3cb:	29 c3                	sub    %eax,%ebx
f012c3cd:	89 d8                	mov    %ebx,%eax
f012c3cf:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c3d4:	74 17                	je     f012c3ed <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c3d6:	83 ec 04             	sub    $0x4,%esp
f012c3d9:	68 f8 96 13 f0       	push   $0xf01396f8
f012c3de:	68 63 11 00 00       	push   $0x1163
f012c3e3:	68 ae 92 13 f0       	push   $0xf01392ae
f012c3e8:	e8 c3 3d fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c3ed:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c3f4:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c3f7:	e8 e2 05 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c3fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c3ff:	83 ec 08             	sub    $0x8,%esp
f012c402:	68 00 fc 2f 00       	push   $0x2ffc00
f012c407:	6a 00                	push   $0x0
f012c409:	e8 07 bc fd ff       	call   f0108015 <krealloc>
f012c40e:	83 c4 10             	add    $0x10,%esp
f012c411:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c417:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c41d:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c422:	77 17                	ja     f012c43b <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c424:	83 ec 04             	sub    $0x4,%esp
f012c427:	68 54 a5 13 f0       	push   $0xf013a554
f012c42c:	68 6a 11 00 00       	push   $0x116a
f012c431:	68 ae 92 13 f0       	push   $0xf01392ae
f012c436:	e8 75 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c43b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c441:	89 c1                	mov    %eax,%ecx
f012c443:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c44a:	10 00 00 
f012c44d:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c452:	0f b6 d0             	movzbl %al,%edx
f012c455:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c45b:	01 d0                	add    %edx,%eax
f012c45d:	48                   	dec    %eax
f012c45e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c464:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c46a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c46f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c475:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c47b:	29 d0                	sub    %edx,%eax
f012c47d:	89 c3                	mov    %eax,%ebx
f012c47f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c486:	10 00 00 
f012c489:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012c48e:	0f b6 c0             	movzbl %al,%eax
f012c491:	c1 e0 04             	shl    $0x4,%eax
f012c494:	89 c2                	mov    %eax,%edx
f012c496:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c49c:	01 d0                	add    %edx,%eax
f012c49e:	48                   	dec    %eax
f012c49f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c4a5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c4ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4b0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c4b6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c4bc:	29 d0                	sub    %edx,%eax
f012c4be:	01 d8                	add    %ebx,%eax
f012c4c0:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c4c5:	39 c1                	cmp    %eax,%ecx
f012c4c7:	74 17                	je     f012c4e0 <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c4c9:	83 ec 04             	sub    $0x4,%esp
f012c4cc:	68 90 a5 13 f0       	push   $0xf013a590
f012c4d1:	68 6c 11 00 00       	push   $0x116c
f012c4d6:	68 ae 92 13 f0       	push   $0xf01392ae
f012c4db:	e8 d0 3c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c4e0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c4e3:	e8 f6 04 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c4e8:	29 c3                	sub    %eax,%ebx
f012c4ea:	89 d8                	mov    %ebx,%eax
f012c4ec:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c4f1:	74 17                	je     f012c50a <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c4f3:	83 ec 04             	sub    $0x4,%esp
f012c4f6:	68 c2 a5 13 f0       	push   $0xf013a5c2
f012c4fb:	68 6e 11 00 00       	push   $0x116e
f012c500:	68 ae 92 13 f0       	push   $0xf01392ae
f012c505:	e8 a6 3c fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c50a:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c511:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c514:	e8 c5 04 fe ff       	call   f010c9de <sys_calculate_free_frames>
f012c519:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c51c:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c523:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c526:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c52c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c532:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c538:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c53b:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c53d:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c543:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c549:	01 c2                	add    %eax,%edx
f012c54b:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c54e:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c550:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c556:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c55c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c563:	eb 11                	jmp    f012c576 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c565:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c568:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c56e:	01 d0                	add    %edx,%eax
f012c570:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c573:	ff 45 f4             	incl   -0xc(%ebp)
f012c576:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c57c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c57f:	7d e4                	jge    f012c565 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c581:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c587:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c58d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c593:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c599:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c59f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c5a6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c5ac:	01 d0                	add    %edx,%eax
f012c5ae:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c5b4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c5ba:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c5c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c5c7:	eb 1b                	jmp    f012c5e4 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c5c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c5cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c5d3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c5d9:	01 d0                	add    %edx,%eax
f012c5db:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c5e1:	ff 45 f0             	incl   -0x10(%ebp)
f012c5e4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c5ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c5ed:	7d da                	jge    f012c5c9 <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c5ef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c5f5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c5fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c602:	eb 17                	jmp    f012c61b <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c604:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c607:	01 c0                	add    %eax,%eax
f012c609:	89 c2                	mov    %eax,%edx
f012c60b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c611:	01 d0                	add    %edx,%eax
f012c613:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c618:	ff 45 ec             	incl   -0x14(%ebp)
f012c61b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c621:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c624:	7d de                	jge    f012c604 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c626:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c62c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c632:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c638:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c63d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c643:	01 c0                	add    %eax,%eax
f012c645:	89 c2                	mov    %eax,%edx
f012c647:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c64d:	01 d0                	add    %edx,%eax
f012c64f:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c654:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c65a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c660:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c667:	eb 49                	jmp    f012c6b2 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c669:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c66c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c673:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c679:	01 d0                	add    %edx,%eax
f012c67b:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c67e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c681:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c688:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c68e:	01 d0                	add    %edx,%eax
f012c690:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c696:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c699:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6a0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6a6:	01 d0                	add    %edx,%eax
f012c6a8:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c6af:	ff 45 e8             	incl   -0x18(%ebp)
f012c6b2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c6b8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c6bb:	7d ac                	jge    f012c669 <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c6bd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c6c3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c6c9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6cf:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c6d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6d8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c6de:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6e4:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c6eb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c6f1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6f8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6fe:	01 d0                	add    %edx,%eax
f012c700:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c703:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c709:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c710:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c716:	01 d0                	add    %edx,%eax
f012c718:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c71e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c724:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c72b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c731:	01 d0                	add    %edx,%eax
f012c733:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c73a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c740:	8a 00                	mov    (%eax),%al
f012c742:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c745:	75 17                	jne    f012c75e <test_krealloc_BF+0xb54>
f012c747:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c74d:	89 c2                	mov    %eax,%edx
f012c74f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c755:	01 d0                	add    %edx,%eax
f012c757:	8a 00                	mov    (%eax),%al
f012c759:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c75c:	74 17                	je     f012c775 <test_krealloc_BF+0xb6b>
			panic(
f012c75e:	83 ec 04             	sub    $0x4,%esp
f012c761:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c766:	68 b1 11 00 00       	push   $0x11b1
f012c76b:	68 ae 92 13 f0       	push   $0xf01392ae
f012c770:	e8 3b 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c775:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c77b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c781:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c787:	8a 00                	mov    (%eax),%al
f012c789:	3c 02                	cmp    $0x2,%al
f012c78b:	75 16                	jne    f012c7a3 <test_krealloc_BF+0xb99>
f012c78d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c793:	89 c2                	mov    %eax,%edx
f012c795:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c79b:	01 d0                	add    %edx,%eax
f012c79d:	8a 00                	mov    (%eax),%al
f012c79f:	3c 02                	cmp    $0x2,%al
f012c7a1:	74 20                	je     f012c7c3 <test_krealloc_BF+0xbb9>
			panic(
f012c7a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c7a9:	8a 00                	mov    (%eax),%al
f012c7ab:	0f be c0             	movsbl %al,%eax
f012c7ae:	50                   	push   %eax
f012c7af:	68 20 a6 13 f0       	push   $0xf013a620
f012c7b4:	68 b7 11 00 00       	push   $0x11b7
f012c7b9:	68 ae 92 13 f0       	push   $0xf01392ae
f012c7be:	e8 ed 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c7c3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c7c9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c7cf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7d5:	8b 00                	mov    (%eax),%eax
f012c7d7:	83 f8 03             	cmp    $0x3,%eax
f012c7da:	75 1c                	jne    f012c7f8 <test_krealloc_BF+0xbee>
f012c7dc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c7e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c7e9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c7ef:	01 d0                	add    %edx,%eax
f012c7f1:	8b 00                	mov    (%eax),%eax
f012c7f3:	83 f8 03             	cmp    $0x3,%eax
f012c7f6:	74 17                	je     f012c80f <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c7f8:	83 ec 04             	sub    $0x4,%esp
f012c7fb:	68 6c a6 13 f0       	push   $0xf013a66c
f012c800:	68 bb 11 00 00       	push   $0x11bb
f012c805:	68 ae 92 13 f0       	push   $0xf01392ae
f012c80a:	e8 a1 39 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c80f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c815:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c81b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c821:	8b 00                	mov    (%eax),%eax
f012c823:	83 f8 04             	cmp    $0x4,%eax
f012c826:	75 1c                	jne    f012c844 <test_krealloc_BF+0xc3a>
f012c828:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c82e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c835:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c83b:	01 d0                	add    %edx,%eax
f012c83d:	8b 00                	mov    (%eax),%eax
f012c83f:	83 f8 04             	cmp    $0x4,%eax
f012c842:	74 17                	je     f012c85b <test_krealloc_BF+0xc51>
			panic(
f012c844:	83 ec 04             	sub    $0x4,%esp
f012c847:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c84c:	68 c0 11 00 00       	push   $0x11c0
f012c851:	68 ae 92 13 f0       	push   $0xf01392ae
f012c856:	e8 55 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c85b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c861:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c867:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c86d:	66 8b 00             	mov    (%eax),%ax
f012c870:	66 83 f8 05          	cmp    $0x5,%ax
f012c874:	75 1b                	jne    f012c891 <test_krealloc_BF+0xc87>
f012c876:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c87c:	01 c0                	add    %eax,%eax
f012c87e:	89 c2                	mov    %eax,%edx
f012c880:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c886:	01 d0                	add    %edx,%eax
f012c888:	66 8b 00             	mov    (%eax),%ax
f012c88b:	66 83 f8 05          	cmp    $0x5,%ax
f012c88f:	74 17                	je     f012c8a8 <test_krealloc_BF+0xc9e>
			panic(
f012c891:	83 ec 04             	sub    $0x4,%esp
f012c894:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c899:	68 c5 11 00 00       	push   $0x11c5
f012c89e:	68 ae 92 13 f0       	push   $0xf01392ae
f012c8a3:	e8 08 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c8a8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c8ae:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c8b4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8ba:	66 8b 00             	mov    (%eax),%ax
f012c8bd:	66 83 f8 06          	cmp    $0x6,%ax
f012c8c1:	75 1b                	jne    f012c8de <test_krealloc_BF+0xcd4>
f012c8c3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8c9:	01 c0                	add    %eax,%eax
f012c8cb:	89 c2                	mov    %eax,%edx
f012c8cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8d3:	01 d0                	add    %edx,%eax
f012c8d5:	66 8b 00             	mov    (%eax),%ax
f012c8d8:	66 83 f8 06          	cmp    $0x6,%ax
f012c8dc:	74 17                	je     f012c8f5 <test_krealloc_BF+0xceb>
			panic(
f012c8de:	83 ec 04             	sub    $0x4,%esp
f012c8e1:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c8e6:	68 ca 11 00 00       	push   $0x11ca
f012c8eb:	68 ae 92 13 f0       	push   $0xf01392ae
f012c8f0:	e8 bb 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c8f5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c8fb:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c901:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c907:	8a 00                	mov    (%eax),%al
f012c909:	3c 07                	cmp    $0x7,%al
f012c90b:	75 1b                	jne    f012c928 <test_krealloc_BF+0xd1e>
f012c90d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c913:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c91a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c920:	01 d0                	add    %edx,%eax
f012c922:	8a 00                	mov    (%eax),%al
f012c924:	3c 07                	cmp    $0x7,%al
f012c926:	74 17                	je     f012c93f <test_krealloc_BF+0xd35>
			panic(
f012c928:	83 ec 04             	sub    $0x4,%esp
f012c92b:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c930:	68 cf 11 00 00       	push   $0x11cf
f012c935:	68 ae 92 13 f0       	push   $0xf01392ae
f012c93a:	e8 71 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c93f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c945:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c949:	66 83 f8 07          	cmp    $0x7,%ax
f012c94d:	75 1f                	jne    f012c96e <test_krealloc_BF+0xd64>
f012c94f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c955:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c95c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c962:	01 d0                	add    %edx,%eax
f012c964:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c968:	66 83 f8 07          	cmp    $0x7,%ax
f012c96c:	74 17                	je     f012c985 <test_krealloc_BF+0xd7b>
			panic(
f012c96e:	83 ec 04             	sub    $0x4,%esp
f012c971:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c976:	68 d2 11 00 00       	push   $0x11d2
f012c97b:	68 ae 92 13 f0       	push   $0xf01392ae
f012c980:	e8 2b 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c985:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c98b:	8b 40 04             	mov    0x4(%eax),%eax
f012c98e:	83 f8 07             	cmp    $0x7,%eax
f012c991:	75 1d                	jne    f012c9b0 <test_krealloc_BF+0xda6>
f012c993:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c999:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9a0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9a6:	01 d0                	add    %edx,%eax
f012c9a8:	8b 40 04             	mov    0x4(%eax),%eax
f012c9ab:	83 f8 07             	cmp    $0x7,%eax
f012c9ae:	74 17                	je     f012c9c7 <test_krealloc_BF+0xdbd>
			panic(
f012c9b0:	83 ec 04             	sub    $0x4,%esp
f012c9b3:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012c9b8:	68 d5 11 00 00       	push   $0x11d5
f012c9bd:	68 ae 92 13 f0       	push   $0xf01392ae
f012c9c2:	e8 e9 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c9c7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c9cd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c9d3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9d9:	8a 00                	mov    (%eax),%al
f012c9db:	3c 08                	cmp    $0x8,%al
f012c9dd:	75 1b                	jne    f012c9fa <test_krealloc_BF+0xdf0>
f012c9df:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9e5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9f2:	01 d0                	add    %edx,%eax
f012c9f4:	8a 00                	mov    (%eax),%al
f012c9f6:	3c 08                	cmp    $0x8,%al
f012c9f8:	74 17                	je     f012ca11 <test_krealloc_BF+0xe07>
			panic(
f012c9fa:	83 ec 04             	sub    $0x4,%esp
f012c9fd:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ca02:	68 da 11 00 00       	push   $0x11da
f012ca07:	68 ae 92 13 f0       	push   $0xf01392ae
f012ca0c:	e8 9f 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ca11:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca17:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ca1b:	66 83 f8 08          	cmp    $0x8,%ax
f012ca1f:	75 1f                	jne    f012ca40 <test_krealloc_BF+0xe36>
f012ca21:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca27:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca2e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca34:	01 d0                	add    %edx,%eax
f012ca36:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ca3a:	66 83 f8 08          	cmp    $0x8,%ax
f012ca3e:	74 17                	je     f012ca57 <test_krealloc_BF+0xe4d>
			panic(
f012ca40:	83 ec 04             	sub    $0x4,%esp
f012ca43:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ca48:	68 dd 11 00 00       	push   $0x11dd
f012ca4d:	68 ae 92 13 f0       	push   $0xf01392ae
f012ca52:	e8 59 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ca57:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca5d:	8b 40 04             	mov    0x4(%eax),%eax
f012ca60:	83 f8 08             	cmp    $0x8,%eax
f012ca63:	75 1d                	jne    f012ca82 <test_krealloc_BF+0xe78>
f012ca65:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca72:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca78:	01 d0                	add    %edx,%eax
f012ca7a:	8b 40 04             	mov    0x4(%eax),%eax
f012ca7d:	83 f8 08             	cmp    $0x8,%eax
f012ca80:	74 17                	je     f012ca99 <test_krealloc_BF+0xe8f>
			panic(
f012ca82:	83 ec 04             	sub    $0x4,%esp
f012ca85:	68 e0 a5 13 f0       	push   $0xf013a5e0
f012ca8a:	68 e0 11 00 00       	push   $0x11e0
f012ca8f:	68 ae 92 13 f0       	push   $0xf01392ae
f012ca94:	e8 17 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ca99:	e8 40 ff fd ff       	call   f010c9de <sys_calculate_free_frames>
f012ca9e:	89 c2                	mov    %eax,%edx
f012caa0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012caa3:	39 c2                	cmp    %eax,%edx
f012caa5:	74 17                	je     f012cabe <test_krealloc_BF+0xeb4>
			panic(
f012caa7:	83 ec 04             	sub    $0x4,%esp
f012caaa:	68 a0 a6 13 f0       	push   $0xf013a6a0
f012caaf:	68 e4 11 00 00       	push   $0x11e4
f012cab4:	68 ae 92 13 f0       	push   $0xf01392ae
f012cab9:	e8 f2 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012cabe:	83 ec 0c             	sub    $0xc,%esp
f012cac1:	68 ec a6 13 f0       	push   $0xf013a6ec
f012cac6:	e8 66 43 fd ff       	call   f0100e31 <cprintf>
f012cacb:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012cace:	e8 0b ff fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cad3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cad6:	e8 a9 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cadb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012cae1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012cae7:	83 ec 08             	sub    $0x8,%esp
f012caea:	6a 00                	push   $0x0
f012caec:	50                   	push   %eax
f012caed:	e8 23 b5 fd ff       	call   f0108015 <krealloc>
f012caf2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012caf5:	e8 8a 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cafa:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cb00:	74 17                	je     f012cb19 <test_krealloc_BF+0xf0f>
			panic(
f012cb02:	83 ec 04             	sub    $0x4,%esp
f012cb05:	68 10 a7 13 f0       	push   $0xf013a710
f012cb0a:	68 f1 11 00 00       	push   $0x11f1
f012cb0f:	68 ae 92 13 f0       	push   $0xf01392ae
f012cb14:	e8 97 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cb19:	e8 c0 fe fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cb1e:	89 c2                	mov    %eax,%edx
f012cb20:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb23:	29 c2                	sub    %eax,%edx
f012cb25:	89 d0                	mov    %edx,%eax
f012cb27:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cb2c:	74 17                	je     f012cb45 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012cb2e:	83 ec 04             	sub    $0x4,%esp
f012cb31:	68 84 a7 13 f0       	push   $0xf013a784
f012cb36:	68 f3 11 00 00       	push   $0x11f3
f012cb3b:	68 ae 92 13 f0       	push   $0xf01392ae
f012cb40:	e8 6b 36 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cb45:	e8 94 fe fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cb4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cb4d:	e8 32 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cb52:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cb58:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cb5e:	83 ec 08             	sub    $0x8,%esp
f012cb61:	6a 00                	push   $0x0
f012cb63:	50                   	push   %eax
f012cb64:	e8 ac b4 fd ff       	call   f0108015 <krealloc>
f012cb69:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb6c:	e8 13 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cb71:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cb77:	74 17                	je     f012cb90 <test_krealloc_BF+0xf86>
			panic(
f012cb79:	83 ec 04             	sub    $0x4,%esp
f012cb7c:	68 10 a7 13 f0       	push   $0xf013a710
f012cb81:	68 fc 11 00 00       	push   $0x11fc
f012cb86:	68 ae 92 13 f0       	push   $0xf01392ae
f012cb8b:	e8 20 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cb90:	e8 49 fe fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cb95:	89 c2                	mov    %eax,%edx
f012cb97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb9a:	29 c2                	sub    %eax,%edx
f012cb9c:	89 d0                	mov    %edx,%eax
f012cb9e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cba3:	74 17                	je     f012cbbc <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012cba5:	83 ec 04             	sub    $0x4,%esp
f012cba8:	68 84 a7 13 f0       	push   $0xf013a784
f012cbad:	68 fe 11 00 00       	push   $0x11fe
f012cbb2:	68 ae 92 13 f0       	push   $0xf01392ae
f012cbb7:	e8 f4 35 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cbbc:	e8 1d fe fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cbc1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cbc4:	e8 bb 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cbc9:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cbcf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cbd5:	83 ec 08             	sub    $0x8,%esp
f012cbd8:	6a 00                	push   $0x0
f012cbda:	50                   	push   %eax
f012cbdb:	e8 35 b4 fd ff       	call   f0108015 <krealloc>
f012cbe0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cbe3:	e8 9c 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cbe8:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cbee:	74 17                	je     f012cc07 <test_krealloc_BF+0xffd>
			panic(
f012cbf0:	83 ec 04             	sub    $0x4,%esp
f012cbf3:	68 c8 92 13 f0       	push   $0xf01392c8
f012cbf8:	68 06 12 00 00       	push   $0x1206
f012cbfd:	68 ae 92 13 f0       	push   $0xf01392ae
f012cc02:	e8 a9 35 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cc07:	e8 d2 fd fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cc0c:	89 c2                	mov    %eax,%edx
f012cc0e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc11:	29 c2                	sub    %eax,%edx
f012cc13:	89 d0                	mov    %edx,%eax
f012cc15:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cc1a:	74 17                	je     f012cc33 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012cc1c:	83 ec 04             	sub    $0x4,%esp
f012cc1f:	68 84 a7 13 f0       	push   $0xf013a784
f012cc24:	68 08 12 00 00       	push   $0x1208
f012cc29:	68 ae 92 13 f0       	push   $0xf01392ae
f012cc2e:	e8 7d 35 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cc33:	e8 a6 fd fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cc38:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cc3b:	e8 44 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cc40:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012cc46:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cc4c:	83 ec 08             	sub    $0x8,%esp
f012cc4f:	6a 00                	push   $0x0
f012cc51:	50                   	push   %eax
f012cc52:	e8 be b3 fd ff       	call   f0108015 <krealloc>
f012cc57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc5a:	e8 25 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cc5f:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cc65:	74 17                	je     f012cc7e <test_krealloc_BF+0x1074>
			panic(
f012cc67:	83 ec 04             	sub    $0x4,%esp
f012cc6a:	68 10 a7 13 f0       	push   $0xf013a710
f012cc6f:	68 10 12 00 00       	push   $0x1210
f012cc74:	68 ae 92 13 f0       	push   $0xf01392ae
f012cc79:	e8 32 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012cc7e:	e8 5b fd fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cc83:	89 c2                	mov    %eax,%edx
f012cc85:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc88:	29 c2                	sub    %eax,%edx
f012cc8a:	89 d0                	mov    %edx,%eax
f012cc8c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cc91:	74 17                	je     f012ccaa <test_krealloc_BF+0x10a0>
			panic(
f012cc93:	83 ec 04             	sub    $0x4,%esp
f012cc96:	68 b8 a7 13 f0       	push   $0xf013a7b8
f012cc9b:	68 13 12 00 00       	push   $0x1213
f012cca0:	68 ae 92 13 f0       	push   $0xf01392ae
f012cca5:	e8 06 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccaa:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012ccb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012ccb8:	eb 48                	jmp    f012cd02 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ccba:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ccbd:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012ccc2:	83 ec 04             	sub    $0x4,%esp
f012ccc5:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012cccb:	51                   	push   %ecx
f012cccc:	52                   	push   %edx
f012cccd:	50                   	push   %eax
f012ccce:	e8 14 a8 fd ff       	call   f01074e7 <get_page_table>
f012ccd3:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ccd6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ccdc:	85 c0                	test   %eax,%eax
f012ccde:	75 17                	jne    f012ccf7 <test_krealloc_BF+0x10ed>
					panic(
f012cce0:	83 ec 04             	sub    $0x4,%esp
f012cce3:	68 b0 9b 13 f0       	push   $0xf0139bb0
f012cce8:	68 1f 12 00 00       	push   $0x121f
f012cced:	68 ae 92 13 f0       	push   $0xf01392ae
f012ccf2:	e8 b9 34 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccf7:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012ccfe:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cd02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cd06:	78 b2                	js     f012ccba <test_krealloc_BF+0x10b0>
f012cd08:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cd0c:	7f 09                	jg     f012cd17 <test_krealloc_BF+0x110d>
f012cd0e:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cd15:	76 a3                	jbe    f012ccba <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cd17:	83 ec 0c             	sub    $0xc,%esp
f012cd1a:	68 f7 a7 13 f0       	push   $0xf013a7f7
f012cd1f:	e8 0d 41 fd ff       	call   f0100e31 <cprintf>
f012cd24:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cd27:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cd2d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd33:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd3a:	eb 21                	jmp    f012cd5d <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012cd3c:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012cd42:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cd45:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cd4b:	01 c8                	add    %ecx,%eax
f012cd4d:	8a 00                	mov    (%eax),%al
f012cd4f:	0f be c0             	movsbl %al,%eax
f012cd52:	01 d0                	add    %edx,%eax
f012cd54:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd5a:	ff 45 dc             	incl   -0x24(%ebp)
f012cd5d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cd63:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd66:	7d d4                	jge    f012cd3c <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cd68:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012cd6e:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012cd74:	42                   	inc    %edx
f012cd75:	01 d2                	add    %edx,%edx
f012cd77:	39 d0                	cmp    %edx,%eax
f012cd79:	74 17                	je     f012cd92 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012cd7b:	83 ec 04             	sub    $0x4,%esp
f012cd7e:	68 00 a8 13 f0       	push   $0xf013a800
f012cd83:	68 31 12 00 00       	push   $0x1231
f012cd88:	68 ae 92 13 f0       	push   $0xf01392ae
f012cd8d:	e8 1e 34 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cd92:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cd98:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cd9e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cda5:	eb 25                	jmp    f012cdcc <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012cda7:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012cdad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cdb0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cdb7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cdbd:	01 c8                	add    %ecx,%eax
f012cdbf:	8b 00                	mov    (%eax),%eax
f012cdc1:	01 d0                	add    %edx,%eax
f012cdc3:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cdc9:	ff 45 dc             	incl   -0x24(%ebp)
f012cdcc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012cdd2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cdd5:	7d d0                	jge    f012cda7 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012cdd7:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012cddd:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012cde3:	42                   	inc    %edx
f012cde4:	c1 e2 02             	shl    $0x2,%edx
f012cde7:	39 d0                	cmp    %edx,%eax
f012cde9:	74 17                	je     f012ce02 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012cdeb:	83 ec 04             	sub    $0x4,%esp
f012cdee:	68 00 a8 13 f0       	push   $0xf013a800
f012cdf3:	68 3b 12 00 00       	push   $0x123b
f012cdf8:	68 ae 92 13 f0       	push   $0xf01392ae
f012cdfd:	e8 ae 33 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ce02:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ce08:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ce0e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ce15:	eb 24                	jmp    f012ce3b <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012ce17:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ce1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce20:	01 c0                	add    %eax,%eax
f012ce22:	89 c1                	mov    %eax,%ecx
f012ce24:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ce2a:	01 c8                	add    %ecx,%eax
f012ce2c:	66 8b 00             	mov    (%eax),%ax
f012ce2f:	98                   	cwtl   
f012ce30:	01 d0                	add    %edx,%eax
f012ce32:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ce38:	ff 45 dc             	incl   -0x24(%ebp)
f012ce3b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce41:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ce44:	7d d1                	jge    f012ce17 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ce46:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ce4c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce52:	8d 48 01             	lea    0x1(%eax),%ecx
f012ce55:	89 c8                	mov    %ecx,%eax
f012ce57:	c1 e0 02             	shl    $0x2,%eax
f012ce5a:	01 c8                	add    %ecx,%eax
f012ce5c:	39 c2                	cmp    %eax,%edx
f012ce5e:	74 17                	je     f012ce77 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ce60:	83 ec 04             	sub    $0x4,%esp
f012ce63:	68 00 a8 13 f0       	push   $0xf013a800
f012ce68:	68 45 12 00 00       	push   $0x1245
f012ce6d:	68 ae 92 13 f0       	push   $0xf01392ae
f012ce72:	e8 39 33 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ce77:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ce7d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce83:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ce8a:	eb 70                	jmp    f012cefc <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012ce8c:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012ce92:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce95:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce9c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cea2:	01 c8                	add    %ecx,%eax
f012cea4:	8a 00                	mov    (%eax),%al
f012cea6:	0f be c0             	movsbl %al,%eax
f012cea9:	01 d0                	add    %edx,%eax
f012ceab:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012ceb1:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ceb7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ceba:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cec1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cec7:	01 c8                	add    %ecx,%eax
f012cec9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cecd:	98                   	cwtl   
f012cece:	01 d0                	add    %edx,%eax
f012ced0:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012ced6:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cedc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cedf:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cee6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ceec:	01 c8                	add    %ecx,%eax
f012ceee:	8b 40 04             	mov    0x4(%eax),%eax
f012cef1:	01 d0                	add    %edx,%eax
f012cef3:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cef9:	ff 45 dc             	incl   -0x24(%ebp)
f012cefc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf02:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cf05:	7d 85                	jge    f012ce8c <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cf07:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012cf0d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf13:	8d 50 01             	lea    0x1(%eax),%edx
f012cf16:	89 d0                	mov    %edx,%eax
f012cf18:	01 c0                	add    %eax,%eax
f012cf1a:	01 d0                	add    %edx,%eax
f012cf1c:	01 c0                	add    %eax,%eax
f012cf1e:	01 d0                	add    %edx,%eax
f012cf20:	39 c1                	cmp    %eax,%ecx
f012cf22:	75 3a                	jne    f012cf5e <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cf24:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012cf2a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf30:	8d 50 01             	lea    0x1(%eax),%edx
f012cf33:	89 d0                	mov    %edx,%eax
f012cf35:	01 c0                	add    %eax,%eax
f012cf37:	01 d0                	add    %edx,%eax
f012cf39:	01 c0                	add    %eax,%eax
f012cf3b:	01 d0                	add    %edx,%eax
f012cf3d:	39 c1                	cmp    %eax,%ecx
f012cf3f:	75 1d                	jne    f012cf5e <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cf41:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012cf47:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf4d:	8d 50 01             	lea    0x1(%eax),%edx
f012cf50:	89 d0                	mov    %edx,%eax
f012cf52:	01 c0                	add    %eax,%eax
f012cf54:	01 d0                	add    %edx,%eax
f012cf56:	01 c0                	add    %eax,%eax
f012cf58:	01 d0                	add    %edx,%eax
f012cf5a:	39 c1                	cmp    %eax,%ecx
f012cf5c:	74 17                	je     f012cf75 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012cf5e:	83 ec 04             	sub    $0x4,%esp
f012cf61:	68 00 a8 13 f0       	push   $0xf013a800
f012cf66:	68 53 12 00 00       	push   $0x1253
f012cf6b:	68 ae 92 13 f0       	push   $0xf01392ae
f012cf70:	e8 3b 32 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cf75:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012cf7c:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cf7f:	e8 5a fa fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cf84:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cf87:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cf8d:	83 ec 08             	sub    $0x8,%esp
f012cf90:	68 00 3c 00 00       	push   $0x3c00
f012cf95:	50                   	push   %eax
f012cf96:	e8 7a b0 fd ff       	call   f0108015 <krealloc>
f012cf9b:	83 c4 10             	add    $0x10,%esp
f012cf9e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfa4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cfaa:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfaf:	77 17                	ja     f012cfc8 <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfb1:	83 ec 04             	sub    $0x4,%esp
f012cfb4:	68 54 a5 13 f0       	push   $0xf013a554
f012cfb9:	68 5f 12 00 00       	push   $0x125f
f012cfbe:	68 ae 92 13 f0       	push   $0xf01392ae
f012cfc3:	e8 e8 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cfc8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cfce:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012cfd4:	74 17                	je     f012cfed <test_krealloc_BF+0x13e3>
			panic(
f012cfd6:	83 ec 04             	sub    $0x4,%esp
f012cfd9:	68 38 a8 13 f0       	push   $0xf013a838
f012cfde:	68 62 12 00 00       	push   $0x1262
f012cfe3:	68 ae 92 13 f0       	push   $0xf01392ae
f012cfe8:	e8 c3 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cfed:	e8 ec f9 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012cff2:	89 c2                	mov    %eax,%edx
f012cff4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cff7:	39 c2                	cmp    %eax,%edx
f012cff9:	74 17                	je     f012d012 <test_krealloc_BF+0x1408>
			panic(
f012cffb:	83 ec 04             	sub    $0x4,%esp
f012cffe:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012d003:	68 65 12 00 00       	push   $0x1265
f012d008:	68 ae 92 13 f0       	push   $0xf01392ae
f012d00d:	e8 9e 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d012:	e8 c7 f9 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d017:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d01a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d020:	83 ec 08             	sub    $0x8,%esp
f012d023:	68 00 fc 0f 00       	push   $0xffc00
f012d028:	50                   	push   %eax
f012d029:	e8 e7 af fd ff       	call   f0108015 <krealloc>
f012d02e:	83 c4 10             	add    $0x10,%esp
f012d031:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d037:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d03d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d042:	77 17                	ja     f012d05b <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d044:	83 ec 04             	sub    $0x4,%esp
f012d047:	68 54 a5 13 f0       	push   $0xf013a554
f012d04c:	68 6b 12 00 00       	push   $0x126b
f012d051:	68 ae 92 13 f0       	push   $0xf01392ae
f012d056:	e8 55 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d05b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d061:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d067:	74 17                	je     f012d080 <test_krealloc_BF+0x1476>
			panic(
f012d069:	83 ec 04             	sub    $0x4,%esp
f012d06c:	68 38 a8 13 f0       	push   $0xf013a838
f012d071:	68 6e 12 00 00       	push   $0x126e
f012d076:	68 ae 92 13 f0       	push   $0xf01392ae
f012d07b:	e8 30 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d080:	e8 59 f9 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d085:	89 c2                	mov    %eax,%edx
f012d087:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d08a:	39 c2                	cmp    %eax,%edx
f012d08c:	74 17                	je     f012d0a5 <test_krealloc_BF+0x149b>
			panic(
f012d08e:	83 ec 04             	sub    $0x4,%esp
f012d091:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012d096:	68 71 12 00 00       	push   $0x1271
f012d09b:	68 ae 92 13 f0       	push   $0xf01392ae
f012d0a0:	e8 0b 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d0a5:	e8 34 f9 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d0aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d0ad:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d0b3:	83 ec 08             	sub    $0x8,%esp
f012d0b6:	68 00 fc 0f 00       	push   $0xffc00
f012d0bb:	50                   	push   %eax
f012d0bc:	e8 54 af fd ff       	call   f0108015 <krealloc>
f012d0c1:	83 c4 10             	add    $0x10,%esp
f012d0c4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0ca:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d0d0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d0d5:	77 17                	ja     f012d0ee <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d0d7:	83 ec 04             	sub    $0x4,%esp
f012d0da:	68 54 a5 13 f0       	push   $0xf013a554
f012d0df:	68 77 12 00 00       	push   $0x1277
f012d0e4:	68 ae 92 13 f0       	push   $0xf01392ae
f012d0e9:	e8 c2 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d0ee:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d0f4:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d0fa:	74 17                	je     f012d113 <test_krealloc_BF+0x1509>
			panic(
f012d0fc:	83 ec 04             	sub    $0x4,%esp
f012d0ff:	68 38 a8 13 f0       	push   $0xf013a838
f012d104:	68 7a 12 00 00       	push   $0x127a
f012d109:	68 ae 92 13 f0       	push   $0xf01392ae
f012d10e:	e8 9d 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d113:	e8 c6 f8 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d118:	89 c2                	mov    %eax,%edx
f012d11a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d11d:	39 c2                	cmp    %eax,%edx
f012d11f:	74 17                	je     f012d138 <test_krealloc_BF+0x152e>
			panic(
f012d121:	83 ec 04             	sub    $0x4,%esp
f012d124:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012d129:	68 7d 12 00 00       	push   $0x127d
f012d12e:	68 ae 92 13 f0       	push   $0xf01392ae
f012d133:	e8 78 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d138:	e8 a1 f8 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d13d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d140:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d146:	83 ec 08             	sub    $0x8,%esp
f012d149:	68 00 fc 0f 00       	push   $0xffc00
f012d14e:	50                   	push   %eax
f012d14f:	e8 c1 ae fd ff       	call   f0108015 <krealloc>
f012d154:	83 c4 10             	add    $0x10,%esp
f012d157:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d15d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d163:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d168:	77 17                	ja     f012d181 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d16a:	83 ec 04             	sub    $0x4,%esp
f012d16d:	68 54 a5 13 f0       	push   $0xf013a554
f012d172:	68 85 12 00 00       	push   $0x1285
f012d177:	68 ae 92 13 f0       	push   $0xf01392ae
f012d17c:	e8 2f 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d181:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d187:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d18d:	74 17                	je     f012d1a6 <test_krealloc_BF+0x159c>
			panic(
f012d18f:	83 ec 04             	sub    $0x4,%esp
f012d192:	68 e8 a8 13 f0       	push   $0xf013a8e8
f012d197:	68 88 12 00 00       	push   $0x1288
f012d19c:	68 ae 92 13 f0       	push   $0xf01392ae
f012d1a1:	e8 0a 30 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d1a6:	e8 33 f8 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d1ab:	89 c2                	mov    %eax,%edx
f012d1ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1b0:	39 c2                	cmp    %eax,%edx
f012d1b2:	74 17                	je     f012d1cb <test_krealloc_BF+0x15c1>
			panic(
f012d1b4:	83 ec 04             	sub    $0x4,%esp
f012d1b7:	68 a4 a8 13 f0       	push   $0xf013a8a4
f012d1bc:	68 8b 12 00 00       	push   $0x128b
f012d1c1:	68 ae 92 13 f0       	push   $0xf01392ae
f012d1c6:	e8 e5 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d1cb:	83 ec 0c             	sub    $0xc,%esp
f012d1ce:	68 c7 9a 13 f0       	push   $0xf0139ac7
f012d1d3:	e8 59 3c fd ff       	call   f0100e31 <cprintf>
f012d1d8:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d1db:	e8 fe f7 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d1e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d1e3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d1e9:	83 ec 08             	sub    $0x8,%esp
f012d1ec:	68 00 18 10 00       	push   $0x101800
f012d1f1:	50                   	push   %eax
f012d1f2:	e8 1e ae fd ff       	call   f0108015 <krealloc>
f012d1f7:	83 c4 10             	add    $0x10,%esp
f012d1fa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d1fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d200:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d205:	77 17                	ja     f012d21e <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d207:	83 ec 04             	sub    $0x4,%esp
f012d20a:	68 54 a5 13 f0       	push   $0xf013a554
f012d20f:	68 93 12 00 00       	push   $0x1293
f012d214:	68 ae 92 13 f0       	push   $0xf01392ae
f012d219:	e8 92 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d21e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d224:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d227:	74 17                	je     f012d240 <test_krealloc_BF+0x1636>
			panic(
f012d229:	83 ec 04             	sub    $0x4,%esp
f012d22c:	68 48 a9 13 f0       	push   $0xf013a948
f012d231:	68 96 12 00 00       	push   $0x1296
f012d236:	68 ae 92 13 f0       	push   $0xf01392ae
f012d23b:	e8 70 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d240:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d243:	e8 96 f7 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d248:	29 c3                	sub    %eax,%ebx
f012d24a:	89 d8                	mov    %ebx,%eax
f012d24c:	83 f8 02             	cmp    $0x2,%eax
f012d24f:	74 17                	je     f012d268 <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d251:	83 ec 04             	sub    $0x4,%esp
f012d254:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012d259:	68 98 12 00 00       	push   $0x1298
f012d25e:	68 ae 92 13 f0       	push   $0xf01392ae
f012d263:	e8 48 2f fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d268:	e8 71 f7 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d26d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d270:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d276:	83 ec 08             	sub    $0x8,%esp
f012d279:	68 00 fc 3f 00       	push   $0x3ffc00
f012d27e:	50                   	push   %eax
f012d27f:	e8 91 ad fd ff       	call   f0108015 <krealloc>
f012d284:	83 c4 10             	add    $0x10,%esp
f012d287:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d28a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d28d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d292:	77 17                	ja     f012d2ab <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d294:	83 ec 04             	sub    $0x4,%esp
f012d297:	68 54 a5 13 f0       	push   $0xf013a554
f012d29c:	68 9e 12 00 00       	push   $0x129e
f012d2a1:	68 ae 92 13 f0       	push   $0xf01392ae
f012d2a6:	e8 05 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d2ab:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2b1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d2b4:	74 17                	je     f012d2cd <test_krealloc_BF+0x16c3>
			panic(
f012d2b6:	83 ec 04             	sub    $0x4,%esp
f012d2b9:	68 48 a9 13 f0       	push   $0xf013a948
f012d2be:	68 a1 12 00 00       	push   $0x12a1
f012d2c3:	68 ae 92 13 f0       	push   $0xf01392ae
f012d2c8:	e8 e3 2e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d2cd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2d0:	e8 09 f7 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d2d5:	29 c3                	sub    %eax,%ebx
f012d2d7:	89 d8                	mov    %ebx,%eax
f012d2d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d2de:	74 17                	je     f012d2f7 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d2e0:	83 ec 04             	sub    $0x4,%esp
f012d2e3:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012d2e8:	68 a4 12 00 00       	push   $0x12a4
f012d2ed:	68 ae 92 13 f0       	push   $0xf01392ae
f012d2f2:	e8 b9 2e fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d2f7:	83 ec 0c             	sub    $0xc,%esp
f012d2fa:	68 0c 9b 13 f0       	push   $0xf0139b0c
f012d2ff:	e8 2d 3b fd ff       	call   f0100e31 <cprintf>
f012d304:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d307:	e8 d2 f6 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d30c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d30f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d315:	83 ec 08             	sub    $0x8,%esp
f012d318:	68 00 fc 9f 00       	push   $0x9ffc00
f012d31d:	50                   	push   %eax
f012d31e:	e8 f2 ac fd ff       	call   f0108015 <krealloc>
f012d323:	83 c4 10             	add    $0x10,%esp
f012d326:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d329:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d32c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d331:	77 17                	ja     f012d34a <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d333:	83 ec 04             	sub    $0x4,%esp
f012d336:	68 54 a5 13 f0       	push   $0xf013a554
f012d33b:	68 af 12 00 00       	push   $0x12af
f012d340:	68 ae 92 13 f0       	push   $0xf01392ae
f012d345:	e8 66 2e fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d34a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d351:	10 00 00 
f012d354:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d359:	0f b6 d0             	movzbl %al,%edx
f012d35c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d362:	01 d0                	add    %edx,%eax
f012d364:	48                   	dec    %eax
f012d365:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d36b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d371:	ba 00 00 00 00       	mov    $0x0,%edx
f012d376:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d37c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d382:	29 d0                	sub    %edx,%eax
f012d384:	89 c1                	mov    %eax,%ecx
f012d386:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d38d:	10 00 00 
f012d390:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d395:	0f b6 c0             	movzbl %al,%eax
f012d398:	c1 e0 04             	shl    $0x4,%eax
f012d39b:	89 c2                	mov    %eax,%edx
f012d39d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d3a3:	01 d0                	add    %edx,%eax
f012d3a5:	48                   	dec    %eax
f012d3a6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d3ac:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d3b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012d3b7:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d3bd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d3c3:	29 d0                	sub    %edx,%eax
f012d3c5:	01 c8                	add    %ecx,%eax
f012d3c7:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d3cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3d0:	39 c2                	cmp    %eax,%edx
f012d3d2:	74 18                	je     f012d3ec <test_krealloc_BF+0x17e2>
			panic(
f012d3d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3d7:	50                   	push   %eax
f012d3d8:	68 f8 a9 13 f0       	push   $0xf013a9f8
f012d3dd:	68 b3 12 00 00       	push   $0x12b3
f012d3e2:	68 ae 92 13 f0       	push   $0xf01392ae
f012d3e7:	e8 c4 2d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d3ec:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d3f2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d3f5:	75 17                	jne    f012d40e <test_krealloc_BF+0x1804>
			panic(
f012d3f7:	83 ec 04             	sub    $0x4,%esp
f012d3fa:	68 3c aa 13 f0       	push   $0xf013aa3c
f012d3ff:	68 b6 12 00 00       	push   $0x12b6
f012d404:	68 ae 92 13 f0       	push   $0xf01392ae
f012d409:	e8 a2 2d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d40e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d411:	e8 c8 f5 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d416:	29 c3                	sub    %eax,%ebx
f012d418:	89 d8                	mov    %ebx,%eax
f012d41a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d41f:	74 17                	je     f012d438 <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d421:	83 ec 04             	sub    $0x4,%esp
f012d424:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012d429:	68 b9 12 00 00       	push   $0x12b9
f012d42e:	68 ae 92 13 f0       	push   $0xf01392ae
f012d433:	e8 78 2d fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d438:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d43b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d441:	e8 98 f5 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d446:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d449:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d44f:	83 ec 08             	sub    $0x8,%esp
f012d452:	68 00 fc 3f 00       	push   $0x3ffc00
f012d457:	50                   	push   %eax
f012d458:	e8 b8 ab fd ff       	call   f0108015 <krealloc>
f012d45d:	83 c4 10             	add    $0x10,%esp
f012d460:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d463:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d466:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d46b:	77 17                	ja     f012d484 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d46d:	83 ec 04             	sub    $0x4,%esp
f012d470:	68 54 a5 13 f0       	push   $0xf013a554
f012d475:	68 c2 12 00 00       	push   $0x12c2
f012d47a:	68 ae 92 13 f0       	push   $0xf01392ae
f012d47f:	e8 2c 2d fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d484:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d48a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d48d:	75 17                	jne    f012d4a6 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d48f:	83 ec 04             	sub    $0x4,%esp
f012d492:	68 3c aa 13 f0       	push   $0xf013aa3c
f012d497:	68 c4 12 00 00       	push   $0x12c4
f012d49c:	68 ae 92 13 f0       	push   $0xf01392ae
f012d4a1:	e8 0a 2d fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d4a6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d4ad:	10 00 00 
f012d4b0:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d4b5:	0f b6 d0             	movzbl %al,%edx
f012d4b8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d4be:	01 d0                	add    %edx,%eax
f012d4c0:	48                   	dec    %eax
f012d4c1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d4c7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d4cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4d2:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d4d8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d4de:	29 d0                	sub    %edx,%eax
f012d4e0:	89 c1                	mov    %eax,%ecx
f012d4e2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d4e9:	10 00 00 
f012d4ec:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d4f1:	0f b6 c0             	movzbl %al,%eax
f012d4f4:	c1 e0 04             	shl    $0x4,%eax
f012d4f7:	89 c2                	mov    %eax,%edx
f012d4f9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d4ff:	01 d0                	add    %edx,%eax
f012d501:	48                   	dec    %eax
f012d502:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d508:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d50e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d513:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d519:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d51f:	29 d0                	sub    %edx,%eax
f012d521:	01 c8                	add    %ecx,%eax
f012d523:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d529:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d52c:	39 c2                	cmp    %eax,%edx
f012d52e:	74 17                	je     f012d547 <test_krealloc_BF+0x193d>
f012d530:	83 ec 04             	sub    $0x4,%esp
f012d533:	68 90 a5 13 f0       	push   $0xf013a590
f012d538:	68 c5 12 00 00       	push   $0x12c5
f012d53d:	68 ae 92 13 f0       	push   $0xf01392ae
f012d542:	e8 69 2c fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d547:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d54a:	e8 8f f4 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d54f:	29 c3                	sub    %eax,%ebx
f012d551:	89 d8                	mov    %ebx,%eax
f012d553:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d558:	74 17                	je     f012d571 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d55a:	83 ec 04             	sub    $0x4,%esp
f012d55d:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012d562:	68 c9 12 00 00       	push   $0x12c9
f012d567:	68 ae 92 13 f0       	push   $0xf01392ae
f012d56c:	e8 3f 2c fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d571:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d574:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d57a:	e8 5f f4 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d57f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d582:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d588:	83 ec 08             	sub    $0x8,%esp
f012d58b:	68 00 fc 3f 01       	push   $0x13ffc00
f012d590:	50                   	push   %eax
f012d591:	e8 7f aa fd ff       	call   f0108015 <krealloc>
f012d596:	83 c4 10             	add    $0x10,%esp
f012d599:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d59c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d59f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d5a4:	77 17                	ja     f012d5bd <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5a6:	83 ec 04             	sub    $0x4,%esp
f012d5a9:	68 54 a5 13 f0       	push   $0xf013a554
f012d5ae:	68 cf 12 00 00       	push   $0x12cf
f012d5b3:	68 ae 92 13 f0       	push   $0xf01392ae
f012d5b8:	e8 f3 2b fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d5bd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d5c3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d5c6:	75 17                	jne    f012d5df <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d5c8:	83 ec 04             	sub    $0x4,%esp
f012d5cb:	68 3c aa 13 f0       	push   $0xf013aa3c
f012d5d0:	68 d1 12 00 00       	push   $0x12d1
f012d5d5:	68 ae 92 13 f0       	push   $0xf01392ae
f012d5da:	e8 d1 2b fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d5df:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d5e6:	10 00 00 
f012d5e9:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d5ee:	0f b6 d0             	movzbl %al,%edx
f012d5f1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d5f7:	01 d0                	add    %edx,%eax
f012d5f9:	48                   	dec    %eax
f012d5fa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d600:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d606:	ba 00 00 00 00       	mov    $0x0,%edx
f012d60b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d611:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d617:	29 d0                	sub    %edx,%eax
f012d619:	89 c1                	mov    %eax,%ecx
f012d61b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d622:	10 00 00 
f012d625:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012d62a:	0f b6 c0             	movzbl %al,%eax
f012d62d:	c1 e0 04             	shl    $0x4,%eax
f012d630:	89 c2                	mov    %eax,%edx
f012d632:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d638:	01 d0                	add    %edx,%eax
f012d63a:	48                   	dec    %eax
f012d63b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d641:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d647:	ba 00 00 00 00       	mov    $0x0,%edx
f012d64c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d652:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d658:	29 d0                	sub    %edx,%eax
f012d65a:	01 c8                	add    %ecx,%eax
f012d65c:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d662:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d665:	39 c2                	cmp    %eax,%edx
f012d667:	74 17                	je     f012d680 <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d669:	83 ec 04             	sub    $0x4,%esp
f012d66c:	68 5c ab 13 f0       	push   $0xf013ab5c
f012d671:	68 d3 12 00 00       	push   $0x12d3
f012d676:	68 ae 92 13 f0       	push   $0xf01392ae
f012d67b:	e8 30 2b fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d680:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d683:	e8 56 f3 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d688:	29 c3                	sub    %eax,%ebx
f012d68a:	89 d8                	mov    %ebx,%eax
f012d68c:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d691:	74 17                	je     f012d6aa <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d693:	83 ec 04             	sub    $0x4,%esp
f012d696:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012d69b:	68 d6 12 00 00       	push   $0x12d6
f012d6a0:	68 ae 92 13 f0       	push   $0xf01392ae
f012d6a5:	e8 06 2b fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d6aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6ad:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d6b3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d6b9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d6bf:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d6c6:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6c9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d6d0:	eb 21                	jmp    f012d6f3 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d6d2:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d6d8:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d6db:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d6e1:	01 c8                	add    %ecx,%eax
f012d6e3:	8a 00                	mov    (%eax),%al
f012d6e5:	0f be c0             	movsbl %al,%eax
f012d6e8:	01 d0                	add    %edx,%eax
f012d6ea:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6f0:	ff 45 d8             	incl   -0x28(%ebp)
f012d6f3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d6f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d6fc:	7d d4                	jge    f012d6d2 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d6fe:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d704:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d70a:	42                   	inc    %edx
f012d70b:	01 d2                	add    %edx,%edx
f012d70d:	39 d0                	cmp    %edx,%eax
f012d70f:	74 17                	je     f012d728 <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d711:	83 ec 04             	sub    $0x4,%esp
f012d714:	68 f4 aa 13 f0       	push   $0xf013aaf4
f012d719:	68 e4 12 00 00       	push   $0x12e4
f012d71e:	68 ae 92 13 f0       	push   $0xf01392ae
f012d723:	e8 88 2a fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d728:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d72e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d734:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d73b:	00 00 00 
		sums[1] = 0;
f012d73e:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d745:	00 00 00 
		sums[2] = 0;
f012d748:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d74f:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d752:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d759:	eb 70                	jmp    f012d7cb <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d75b:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d761:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d764:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d76b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d771:	01 c8                	add    %ecx,%eax
f012d773:	8a 00                	mov    (%eax),%al
f012d775:	0f be c0             	movsbl %al,%eax
f012d778:	01 d0                	add    %edx,%eax
f012d77a:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d780:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d786:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d789:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d790:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d796:	01 c8                	add    %ecx,%eax
f012d798:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d79c:	98                   	cwtl   
f012d79d:	01 d0                	add    %edx,%eax
f012d79f:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d7a5:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d7ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d7ae:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d7b5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d7bb:	01 c8                	add    %ecx,%eax
f012d7bd:	8b 40 04             	mov    0x4(%eax),%eax
f012d7c0:	01 d0                	add    %edx,%eax
f012d7c2:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d7c8:	ff 45 d8             	incl   -0x28(%ebp)
f012d7cb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d7d4:	7d 85                	jge    f012d75b <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d7d6:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d7dc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7e2:	8d 50 01             	lea    0x1(%eax),%edx
f012d7e5:	89 d0                	mov    %edx,%eax
f012d7e7:	01 c0                	add    %eax,%eax
f012d7e9:	01 d0                	add    %edx,%eax
f012d7eb:	01 c0                	add    %eax,%eax
f012d7ed:	01 d0                	add    %edx,%eax
f012d7ef:	39 c1                	cmp    %eax,%ecx
f012d7f1:	75 3a                	jne    f012d82d <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d7f3:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d7f9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d7ff:	8d 50 01             	lea    0x1(%eax),%edx
f012d802:	89 d0                	mov    %edx,%eax
f012d804:	01 c0                	add    %eax,%eax
f012d806:	01 d0                	add    %edx,%eax
f012d808:	01 c0                	add    %eax,%eax
f012d80a:	01 d0                	add    %edx,%eax
f012d80c:	39 c1                	cmp    %eax,%ecx
f012d80e:	75 1d                	jne    f012d82d <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d810:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012d816:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d81c:	8d 50 01             	lea    0x1(%eax),%edx
f012d81f:	89 d0                	mov    %edx,%eax
f012d821:	01 c0                	add    %eax,%eax
f012d823:	01 d0                	add    %edx,%eax
f012d825:	01 c0                	add    %eax,%eax
f012d827:	01 d0                	add    %edx,%eax
f012d829:	39 c1                	cmp    %eax,%ecx
f012d82b:	74 17                	je     f012d844 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012d82d:	83 ec 04             	sub    $0x4,%esp
f012d830:	68 f4 aa 13 f0       	push   $0xf013aaf4
f012d835:	68 f6 12 00 00       	push   $0x12f6
f012d83a:	68 ae 92 13 f0       	push   $0xf01392ae
f012d83f:	e8 6c 29 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d844:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d84a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012d850:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d857:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d85a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d861:	eb 24                	jmp    f012d887 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012d863:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d869:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d86c:	01 c0                	add    %eax,%eax
f012d86e:	89 c1                	mov    %eax,%ecx
f012d870:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d876:	01 c8                	add    %ecx,%eax
f012d878:	66 8b 00             	mov    (%eax),%ax
f012d87b:	98                   	cwtl   
f012d87c:	01 d0                	add    %edx,%eax
f012d87e:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d884:	ff 45 d8             	incl   -0x28(%ebp)
f012d887:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d88d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d890:	7d d1                	jge    f012d863 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d892:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d898:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d89e:	8d 48 01             	lea    0x1(%eax),%ecx
f012d8a1:	89 c8                	mov    %ecx,%eax
f012d8a3:	c1 e0 02             	shl    $0x2,%eax
f012d8a6:	01 c8                	add    %ecx,%eax
f012d8a8:	39 c2                	cmp    %eax,%edx
f012d8aa:	74 17                	je     f012d8c3 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012d8ac:	83 ec 04             	sub    $0x4,%esp
f012d8af:	68 f4 aa 13 f0       	push   $0xf013aaf4
f012d8b4:	68 00 13 00 00       	push   $0x1300
f012d8b9:	68 ae 92 13 f0       	push   $0xf01392ae
f012d8be:	e8 ed 28 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d8c3:	e8 16 f1 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d8c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d8cb:	e8 b4 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d8d0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d8d6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d8dc:	83 ec 08             	sub    $0x8,%esp
f012d8df:	6a 00                	push   $0x0
f012d8e1:	50                   	push   %eax
f012d8e2:	e8 2e a7 fd ff       	call   f0108015 <krealloc>
f012d8e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d8ea:	e8 95 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d8ef:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d8f5:	74 17                	je     f012d90e <test_krealloc_BF+0x1d04>
			panic(
f012d8f7:	83 ec 04             	sub    $0x4,%esp
f012d8fa:	68 c8 92 13 f0       	push   $0xf01392c8
f012d8ff:	68 08 13 00 00       	push   $0x1308
f012d904:	68 ae 92 13 f0       	push   $0xf01392ae
f012d909:	e8 a2 28 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d90e:	e8 cb f0 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d913:	89 c2                	mov    %eax,%edx
f012d915:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d918:	29 c2                	sub    %eax,%edx
f012d91a:	89 d0                	mov    %edx,%eax
f012d91c:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d921:	74 17                	je     f012d93a <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012d923:	83 ec 04             	sub    $0x4,%esp
f012d926:	68 84 a7 13 f0       	push   $0xf013a784
f012d92b:	68 0a 13 00 00       	push   $0x130a
f012d930:	68 ae 92 13 f0       	push   $0xf01392ae
f012d935:	e8 76 28 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d93a:	e8 9f f0 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d93f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d942:	e8 3d 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d947:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012d94d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d953:	83 ec 0c             	sub    $0xc,%esp
f012d956:	50                   	push   %eax
f012d957:	e8 1d a6 fd ff       	call   f0107f79 <kfree>
f012d95c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d95f:	e8 20 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d964:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d96a:	74 17                	je     f012d983 <test_krealloc_BF+0x1d79>
			panic(
f012d96c:	83 ec 04             	sub    $0x4,%esp
f012d96f:	68 c8 92 13 f0       	push   $0xf01392c8
f012d974:	68 12 13 00 00       	push   $0x1312
f012d979:	68 ae 92 13 f0       	push   $0xf01392ae
f012d97e:	e8 2d 28 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d983:	e8 56 f0 fd ff       	call   f010c9de <sys_calculate_free_frames>
f012d988:	89 c2                	mov    %eax,%edx
f012d98a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d98d:	29 c2                	sub    %eax,%edx
f012d98f:	89 d0                	mov    %edx,%eax
f012d991:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d996:	74 17                	je     f012d9af <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012d998:	83 ec 04             	sub    $0x4,%esp
f012d99b:	68 84 a7 13 f0       	push   $0xf013a784
f012d9a0:	68 14 13 00 00       	push   $0x1314
f012d9a5:	68 ae 92 13 f0       	push   $0xf01392ae
f012d9aa:	e8 01 28 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d9af:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d9b6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d9bd:	eb 48                	jmp    f012da07 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d9bf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d9c2:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012d9c7:	83 ec 04             	sub    $0x4,%esp
f012d9ca:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012d9d0:	51                   	push   %ecx
f012d9d1:	52                   	push   %edx
f012d9d2:	50                   	push   %eax
f012d9d3:	e8 0f 9b fd ff       	call   f01074e7 <get_page_table>
f012d9d8:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d9db:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012d9e1:	85 c0                	test   %eax,%eax
f012d9e3:	75 17                	jne    f012d9fc <test_krealloc_BF+0x1df2>
					panic(
f012d9e5:	83 ec 04             	sub    $0x4,%esp
f012d9e8:	68 b0 9b 13 f0       	push   $0xf0139bb0
f012d9ed:	68 21 13 00 00       	push   $0x1321
f012d9f2:	68 ae 92 13 f0       	push   $0xf01392ae
f012d9f7:	e8 b4 27 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d9fc:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012da03:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012da07:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012da0b:	78 b2                	js     f012d9bf <test_krealloc_BF+0x1db5>
f012da0d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012da11:	7f 09                	jg     f012da1c <test_krealloc_BF+0x1e12>
f012da13:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012da1a:	76 a3                	jbe    f012d9bf <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012da1c:	83 ec 0c             	sub    $0xc,%esp
f012da1f:	68 92 94 13 f0       	push   $0xf0139492
f012da24:	e8 08 34 fd ff       	call   f0100e31 <cprintf>
f012da29:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012da2c:	83 ec 0c             	sub    $0xc,%esp
f012da2f:	68 94 ab 13 f0       	push   $0xf013ab94
f012da34:	e8 f8 33 fd ff       	call   f0100e31 <cprintf>
f012da39:	83 c4 10             	add    $0x10,%esp
	return 0;
f012da3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012da41:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012da44:	5b                   	pop    %ebx
f012da45:	5f                   	pop    %edi
f012da46:	5d                   	pop    %ebp
f012da47:	c3                   	ret    

f012da48 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012da48:	55                   	push   %ebp
f012da49:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012da4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012da50:	5d                   	pop    %ebp
f012da51:	c3                   	ret    

f012da52 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012da52:	55                   	push   %ebp
f012da53:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012da55:	c7 05 34 3b 25 f0 00 	movl   $0x0,0xf0253b34
f012da5c:	00 00 00 
}
f012da5f:	90                   	nop
f012da60:	5d                   	pop    %ebp
f012da61:	c3                   	ret    

f012da62 <inctst>:
void inctst()
{
f012da62:	55                   	push   %ebp
f012da63:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012da65:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
f012da6a:	40                   	inc    %eax
f012da6b:	a3 34 3b 25 f0       	mov    %eax,0xf0253b34
}
f012da70:	90                   	nop
f012da71:	5d                   	pop    %ebp
f012da72:	c3                   	ret    

f012da73 <gettst>:
uint32 gettst()
{
f012da73:	55                   	push   %ebp
f012da74:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012da76:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
}
f012da7b:	5d                   	pop    %ebp
f012da7c:	c3                   	ret    

f012da7d <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012da7d:	55                   	push   %ebp
f012da7e:	89 e5                	mov    %esp,%ebp
f012da80:	83 ec 28             	sub    $0x28,%esp
f012da83:	8b 45 14             	mov    0x14(%ebp),%eax
f012da86:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012da89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012da90:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012da94:	83 f8 65             	cmp    $0x65,%eax
f012da97:	74 5d                	je     f012daf6 <tst+0x79>
f012da99:	83 f8 65             	cmp    $0x65,%eax
f012da9c:	7f 0a                	jg     f012daa8 <tst+0x2b>
f012da9e:	83 f8 62             	cmp    $0x62,%eax
f012daa1:	74 73                	je     f012db16 <tst+0x99>
f012daa3:	e9 91 00 00 00       	jmp    f012db39 <tst+0xbc>
f012daa8:	83 f8 67             	cmp    $0x67,%eax
f012daab:	74 29                	je     f012dad6 <tst+0x59>
f012daad:	83 f8 6c             	cmp    $0x6c,%eax
f012dab0:	0f 85 83 00 00 00    	jne    f012db39 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012dab6:	8b 45 08             	mov    0x8(%ebp),%eax
f012dab9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dabc:	73 09                	jae    f012dac7 <tst+0x4a>
			chk = 1;
f012dabe:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dac5:	eb 68                	jmp    f012db2f <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012dac7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dacb:	74 62                	je     f012db2f <tst+0xb2>
			chk = 1;
f012dacd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012dad4:	eb 59                	jmp    f012db2f <tst+0xb2>
	case 'g':
		if (n > v1)
f012dad6:	8b 45 08             	mov    0x8(%ebp),%eax
f012dad9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dadc:	76 09                	jbe    f012dae7 <tst+0x6a>
			chk = 1;
f012dade:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012dae5:	eb 4b                	jmp    f012db32 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012dae7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012daeb:	74 45                	je     f012db32 <tst+0xb5>
			chk = 1;
f012daed:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012daf4:	eb 3c                	jmp    f012db32 <tst+0xb5>
	case 'e':
		if (n == v1)
f012daf6:	8b 45 08             	mov    0x8(%ebp),%eax
f012daf9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012dafc:	75 09                	jne    f012db07 <tst+0x8a>
			chk = 1;
f012dafe:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012db05:	eb 2e                	jmp    f012db35 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012db07:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012db0b:	74 28                	je     f012db35 <tst+0xb8>
			chk = 1;
f012db0d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db14:	eb 1f                	jmp    f012db35 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012db16:	8b 45 08             	mov    0x8(%ebp),%eax
f012db19:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012db1c:	72 1a                	jb     f012db38 <tst+0xbb>
f012db1e:	8b 45 08             	mov    0x8(%ebp),%eax
f012db21:	3b 45 10             	cmp    0x10(%ebp),%eax
f012db24:	77 12                	ja     f012db38 <tst+0xbb>
			chk = 1;
f012db26:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db2d:	eb 09                	jmp    f012db38 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db2f:	90                   	nop
f012db30:	eb 07                	jmp    f012db39 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db32:	90                   	nop
f012db33:	eb 04                	jmp    f012db39 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db35:	90                   	nop
f012db36:	eb 01                	jmp    f012db39 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012db38:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012db39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012db3d:	75 14                	jne    f012db53 <tst+0xd6>
f012db3f:	83 ec 04             	sub    $0x4,%esp
f012db42:	68 d4 ab 13 f0       	push   $0xf013abd4
f012db47:	6a 3c                	push   $0x3c
f012db49:	68 e7 ab 13 f0       	push   $0xf013abe7
f012db4e:	e8 5d 26 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012db53:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
f012db58:	40                   	inc    %eax
f012db59:	a3 34 3b 25 f0       	mov    %eax,0xf0253b34
	return;
f012db5e:	90                   	nop
}
f012db5f:	c9                   	leave  
f012db60:	c3                   	ret    

f012db61 <chktst>:

void chktst(uint32 n)
{
f012db61:	55                   	push   %ebp
f012db62:	89 e5                	mov    %esp,%ebp
f012db64:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012db67:	a1 34 3b 25 f0       	mov    0xf0253b34,%eax
f012db6c:	3b 45 08             	cmp    0x8(%ebp),%eax
f012db6f:	75 12                	jne    f012db83 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012db71:	83 ec 0c             	sub    $0xc,%esp
f012db74:	68 00 ac 13 f0       	push   $0xf013ac00
f012db79:	e8 b3 32 fd ff       	call   f0100e31 <cprintf>
f012db7e:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012db81:	eb 14                	jmp    f012db97 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012db83:	83 ec 04             	sub    $0x4,%esp
f012db86:	68 2c ac 13 f0       	push   $0xf013ac2c
f012db8b:	6a 46                	push   $0x46
f012db8d:	68 e7 ab 13 f0       	push   $0xf013abe7
f012db92:	e8 19 26 fd ff       	call   f01001b0 <_panic>
}
f012db97:	c9                   	leave  
f012db98:	c3                   	ret    

f012db99 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012db99:	55                   	push   %ebp
f012db9a:	89 e5                	mov    %esp,%ebp
f012db9c:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012db9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dba3:	77 07                	ja     f012dbac <nearest_pow2_ceil+0x13>
f012dba5:	b8 01 00 00 00       	mov    $0x1,%eax
f012dbaa:	eb 20                	jmp    f012dbcc <nearest_pow2_ceil+0x33>
    int power = 2;
f012dbac:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012dbb3:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dbb6:	eb 08                	jmp    f012dbc0 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012dbb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012dbbb:	01 c0                	add    %eax,%eax
f012dbbd:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012dbc0:	d1 6d 08             	shrl   0x8(%ebp)
f012dbc3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dbc7:	75 ef                	jne    f012dbb8 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012dbc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012dbcc:	c9                   	leave  
f012dbcd:	c3                   	ret    

f012dbce <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012dbce:	55                   	push   %ebp
f012dbcf:	89 e5                	mov    %esp,%ebp
f012dbd1:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012dbd4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dbd8:	77 07                	ja     f012dbe1 <log2_ceil+0x13>
f012dbda:	b8 01 00 00 00       	mov    $0x1,%eax
f012dbdf:	eb 1b                	jmp    f012dbfc <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012dbe1:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012dbe8:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dbeb:	eb 03                	jmp    f012dbf0 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012dbed:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012dbf0:	d1 6d 08             	shrl   0x8(%ebp)
f012dbf3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dbf7:	75 f4                	jne    f012dbed <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012dbf9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012dbfc:	c9                   	leave  
f012dbfd:	c3                   	ret    

f012dbfe <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012dbfe:	55                   	push   %ebp
f012dbff:	89 e5                	mov    %esp,%ebp
f012dc01:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012dc04:	8b 45 08             	mov    0x8(%ebp),%eax
f012dc07:	8b 00                	mov    (%eax),%eax
f012dc09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012dc0c:	8b 45 08             	mov    0x8(%ebp),%eax
f012dc0f:	8b 00                	mov    (%eax),%eax
f012dc11:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012dc14:	eb 52                	jmp    f012dc68 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012dc16:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc19:	8b 00                	mov    (%eax),%eax
f012dc1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012dc1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc24:	75 12                	jne    f012dc38 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012dc26:	83 ec 0c             	sub    $0xc,%esp
f012dc29:	68 48 ac 13 f0       	push   $0xf013ac48
f012dc2e:	e8 fe 31 fd ff       	call   f0100e31 <cprintf>
f012dc33:	83 c4 10             	add    $0x10,%esp
			break;
f012dc36:	eb 3f                	jmp    f012dc77 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012dc38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dc3c:	74 38                	je     f012dc76 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012dc3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc41:	8b 00                	mov    (%eax),%eax
f012dc43:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012dc46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc4c:	75 12                	jne    f012dc60 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012dc4e:	83 ec 0c             	sub    $0xc,%esp
f012dc51:	68 64 ac 13 f0       	push   $0xf013ac64
f012dc56:	e8 d6 31 fd ff       	call   f0100e31 <cprintf>
f012dc5b:	83 c4 10             	add    $0x10,%esp
			break;
f012dc5e:	eb 17                	jmp    f012dc77 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012dc60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc63:	8b 00                	mov    (%eax),%eax
f012dc65:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012dc68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012dc6c:	74 09                	je     f012dc77 <detect_loop_in_FrameInfo_list+0x79>
f012dc6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dc72:	75 a2                	jne    f012dc16 <detect_loop_in_FrameInfo_list+0x18>
f012dc74:	eb 01                	jmp    f012dc77 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012dc76:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012dc77:	83 ec 0c             	sub    $0xc,%esp
f012dc7a:	68 7b ac 13 f0       	push   $0xf013ac7b
f012dc7f:	e8 ad 31 fd ff       	call   f0100e31 <cprintf>
f012dc84:	83 c4 10             	add    $0x10,%esp
}
f012dc87:	90                   	nop
f012dc88:	c9                   	leave  
f012dc89:	c3                   	ret    

f012dc8a <scarce_memory>:

void scarce_memory()
{
f012dc8a:	55                   	push   %ebp
f012dc8b:	89 e5                	mov    %esp,%ebp
f012dc8d:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012dc90:	a1 a0 9a 2b f0       	mov    0xf02b9aa0,%eax
f012dc95:	ba 64 00 00 00       	mov    $0x64,%edx
f012dc9a:	29 c2                	sub    %eax,%edx
f012dc9c:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f012dca1:	0f af c2             	imul   %edx,%eax
f012dca4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dca9:	f7 e2                	mul    %edx
f012dcab:	89 d0                	mov    %edx,%eax
f012dcad:	c1 e8 05             	shr    $0x5,%eax
f012dcb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012dcb3:	a1 a0 9a 2b f0       	mov    0xf02b9aa0,%eax
f012dcb8:	ba 64 00 00 00       	mov    $0x64,%edx
f012dcbd:	29 c2                	sub    %eax,%edx
f012dcbf:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f012dcc4:	89 d1                	mov    %edx,%ecx
f012dcc6:	0f af c8             	imul   %eax,%ecx
f012dcc9:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dcce:	f7 e1                	mul    %ecx
f012dcd0:	c1 ea 05             	shr    $0x5,%edx
f012dcd3:	89 d0                	mov    %edx,%eax
f012dcd5:	c1 e0 02             	shl    $0x2,%eax
f012dcd8:	01 d0                	add    %edx,%eax
f012dcda:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dce1:	01 d0                	add    %edx,%eax
f012dce3:	c1 e0 02             	shl    $0x2,%eax
f012dce6:	29 c1                	sub    %eax,%ecx
f012dce8:	89 ca                	mov    %ecx,%edx
f012dcea:	85 d2                	test   %edx,%edx
f012dcec:	74 03                	je     f012dcf1 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012dcee:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012dcf1:	8b 15 b0 be 2b f0    	mov    0xf02bbeb0,%edx
f012dcf7:	a1 c4 be 2b f0       	mov    0xf02bbec4,%eax
f012dcfc:	29 c2                	sub    %eax,%edx
f012dcfe:	89 d0                	mov    %edx,%eax
f012dd00:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012dd03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dd06:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012dd09:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012dd0c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dd13:	eb 12                	jmp    f012dd27 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012dd15:	83 ec 0c             	sub    $0xc,%esp
f012dd18:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012dd1b:	50                   	push   %eax
f012dd1c:	e8 04 96 fd ff       	call   f0107325 <allocate_frame>
f012dd21:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dd24:	ff 45 f0             	incl   -0x10(%ebp)
f012dd27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dd2a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dd2d:	76 e6                	jbe    f012dd15 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012dd2f:	90                   	nop
f012dd30:	c9                   	leave  
f012dd31:	c3                   	ret    

f012dd32 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012dd32:	55                   	push   %ebp
f012dd33:	89 e5                	mov    %esp,%ebp
f012dd35:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012dd38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012dd3f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012dd46:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012dd4d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dd51:	0f 85 d3 01 00 00    	jne    f012df2a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dd57:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dd5e:	e9 e1 00 00 00       	jmp    f012de44 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012dd63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dd6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd6d:	c1 e0 04             	shl    $0x4,%eax
f012dd70:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012dd75:	8b 00                	mov    (%eax),%eax
f012dd77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dd7a:	e9 82 00 00 00       	jmp    f012de01 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012dd7f:	83 ec 0c             	sub    $0xc,%esp
f012dd82:	ff 75 e4             	pushl  -0x1c(%ebp)
f012dd85:	e8 cb a4 fd ff       	call   f0108255 <env_page_ws_get_size>
f012dd8a:	83 c4 10             	add    $0x10,%esp
f012dd8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dd90:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012dd95:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012dd9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dd9e:	0f af c2             	imul   %edx,%eax
f012dda1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dda6:	f7 e2                	mul    %edx
f012dda8:	89 d0                	mov    %edx,%eax
f012ddaa:	c1 e8 05             	shr    $0x5,%eax
f012ddad:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012ddb0:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012ddb5:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012ddbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012ddbe:	89 d1                	mov    %edx,%ecx
f012ddc0:	0f af c8             	imul   %eax,%ecx
f012ddc3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ddc8:	f7 e1                	mul    %ecx
f012ddca:	c1 ea 05             	shr    $0x5,%edx
f012ddcd:	89 d0                	mov    %edx,%eax
f012ddcf:	c1 e0 02             	shl    $0x2,%eax
f012ddd2:	01 d0                	add    %edx,%eax
f012ddd4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dddb:	01 d0                	add    %edx,%eax
f012dddd:	c1 e0 02             	shl    $0x2,%eax
f012dde0:	29 c1                	sub    %eax,%ecx
f012dde2:	89 ca                	mov    %ecx,%edx
f012dde4:	85 d2                	test   %edx,%edx
f012dde6:	74 03                	je     f012ddeb <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012dde8:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012ddeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ddee:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012ddf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ddf4:	c1 e0 04             	shl    $0x4,%eax
f012ddf7:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f012ddfc:	8b 00                	mov    (%eax),%eax
f012ddfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012de01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012de05:	74 08                	je     f012de0f <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012de07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012de0a:	8b 40 44             	mov    0x44(%eax),%eax
f012de0d:	eb 05                	jmp    f012de14 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012de0f:	b8 00 00 00 00       	mov    $0x0,%eax
f012de14:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012de17:	c1 e2 04             	shl    $0x4,%edx
f012de1a:	81 c2 48 3b 25 f0    	add    $0xf0253b48,%edx
f012de20:	89 02                	mov    %eax,(%edx)
f012de22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012de25:	c1 e0 04             	shl    $0x4,%eax
f012de28:	05 48 3b 25 f0       	add    $0xf0253b48,%eax
f012de2d:	8b 00                	mov    (%eax),%eax
f012de2f:	85 c0                	test   %eax,%eax
f012de31:	0f 85 48 ff ff ff    	jne    f012dd7f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012de37:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012de3b:	0f 85 3e ff ff ff    	jne    f012dd7f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012de41:	ff 45 e8             	incl   -0x18(%ebp)
f012de44:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012de49:	0f b6 c0             	movzbl %al,%eax
f012de4c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012de4f:	0f 8f 0e ff ff ff    	jg     f012dd63 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012de55:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012de5c:	a1 a4 9a 2b f0       	mov    0xf02b9aa4,%eax
f012de61:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de64:	eb 19                	jmp    f012de7f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012de66:	83 ec 0c             	sub    $0xc,%esp
f012de69:	ff 75 dc             	pushl  -0x24(%ebp)
f012de6c:	e8 e4 a3 fd ff       	call   f0108255 <env_page_ws_get_size>
f012de71:	83 c4 10             	add    $0x10,%esp
f012de74:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012de77:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f012de7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de7f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012de83:	74 08                	je     f012de8d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012de85:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012de88:	8b 40 44             	mov    0x44(%eax),%eax
f012de8b:	eb 05                	jmp    f012de92 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012de8d:	b8 00 00 00 00       	mov    $0x0,%eax
f012de92:	a3 ac 9a 2b f0       	mov    %eax,0xf02b9aac
f012de97:	a1 ac 9a 2b f0       	mov    0xf02b9aac,%eax
f012de9c:	85 c0                	test   %eax,%eax
f012de9e:	75 c6                	jne    f012de66 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012dea0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012dea4:	75 c0                	jne    f012de66 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012dea6:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012deab:	85 c0                	test   %eax,%eax
f012dead:	0f 84 ec 00 00 00    	je     f012df9f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012deb3:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012deb8:	83 ec 0c             	sub    $0xc,%esp
f012debb:	50                   	push   %eax
f012debc:	e8 94 a3 fd ff       	call   f0108255 <env_page_ws_get_size>
f012dec1:	83 c4 10             	add    $0x10,%esp
f012dec4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012dec7:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012decc:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012ded2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012ded5:	0f af c2             	imul   %edx,%eax
f012ded8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dedd:	f7 e2                	mul    %edx
f012dedf:	89 d0                	mov    %edx,%eax
f012dee1:	c1 e8 05             	shr    $0x5,%eax
f012dee4:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dee7:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012deec:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012def2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012def5:	89 d1                	mov    %edx,%ecx
f012def7:	0f af c8             	imul   %eax,%ecx
f012defa:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012deff:	f7 e1                	mul    %ecx
f012df01:	c1 ea 05             	shr    $0x5,%edx
f012df04:	89 d0                	mov    %edx,%eax
f012df06:	c1 e0 02             	shl    $0x2,%eax
f012df09:	01 d0                	add    %edx,%eax
f012df0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df12:	01 d0                	add    %edx,%eax
f012df14:	c1 e0 02             	shl    $0x2,%eax
f012df17:	29 c1                	sub    %eax,%ecx
f012df19:	89 ca                	mov    %ecx,%edx
f012df1b:	85 d2                	test   %edx,%edx
f012df1d:	74 03                	je     f012df22 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012df1f:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012df22:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012df25:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012df28:	eb 75                	jmp    f012df9f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012df2a:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012df2f:	83 ec 0c             	sub    $0xc,%esp
f012df32:	50                   	push   %eax
f012df33:	e8 1d a3 fd ff       	call   f0108255 <env_page_ws_get_size>
f012df38:	83 c4 10             	add    $0x10,%esp
f012df3b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012df3e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012df43:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df49:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df4c:	0f af c2             	imul   %edx,%eax
f012df4f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012df54:	f7 e2                	mul    %edx
f012df56:	89 d0                	mov    %edx,%eax
f012df58:	c1 e8 05             	shr    $0x5,%eax
f012df5b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012df5e:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012df63:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df69:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df6c:	89 d1                	mov    %edx,%ecx
f012df6e:	0f af c8             	imul   %eax,%ecx
f012df71:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012df76:	f7 e1                	mul    %ecx
f012df78:	c1 ea 05             	shr    $0x5,%edx
f012df7b:	89 d0                	mov    %edx,%eax
f012df7d:	c1 e0 02             	shl    $0x2,%eax
f012df80:	01 d0                	add    %edx,%eax
f012df82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df89:	01 d0                	add    %edx,%eax
f012df8b:	c1 e0 02             	shl    $0x2,%eax
f012df8e:	29 c1                	sub    %eax,%ecx
f012df90:	89 ca                	mov    %ecx,%edx
f012df92:	85 d2                	test   %edx,%edx
f012df94:	74 03                	je     f012df99 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012df96:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012df99:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012df9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012df9f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012dfa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfa5:	01 c2                	add    %eax,%edx
f012dfa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dfaa:	01 d0                	add    %edx,%eax
}
f012dfac:	c9                   	leave  
f012dfad:	c3                   	ret    

f012dfae <schenv>:


void schenv()
{
f012dfae:	55                   	push   %ebp
f012dfaf:	89 e5                	mov    %esp,%ebp
f012dfb1:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012dfb4:	c6 05 3c bf 2b f0 00 	movb   $0x0,0xf02bbf3c
	__ne = NULL;
f012dfbb:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f012dfc2:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dfc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dfcc:	eb 3a                	jmp    f012e008 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012dfce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfd1:	c1 e0 04             	shl    $0x4,%eax
f012dfd4:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012dfd9:	83 ec 0c             	sub    $0xc,%esp
f012dfdc:	50                   	push   %eax
f012dfdd:	e8 cb 6d fd ff       	call   f0104dad <queue_size>
f012dfe2:	83 c4 10             	add    $0x10,%esp
f012dfe5:	85 c0                	test   %eax,%eax
f012dfe7:	74 1c                	je     f012e005 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012dfe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfec:	c1 e0 04             	shl    $0x4,%eax
f012dfef:	05 44 3b 25 f0       	add    $0xf0253b44,%eax
f012dff4:	8b 00                	mov    (%eax),%eax
f012dff6:	a3 d4 be 2b f0       	mov    %eax,0xf02bbed4
			__nl = i;
f012dffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dffe:	a2 3c bf 2b f0       	mov    %al,0xf02bbf3c
			break;
f012e003:	eb 10                	jmp    f012e015 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e005:	ff 45 f4             	incl   -0xc(%ebp)
f012e008:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012e00d:	0f b6 c0             	movzbl %al,%eax
f012e010:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e013:	7f b9                	jg     f012dfce <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012e015:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e01a:	85 c0                	test   %eax,%eax
f012e01c:	0f 84 86 00 00 00    	je     f012e0a8 <schenv+0xfa>
	{
		if (__ne != NULL)
f012e022:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e027:	85 c0                	test   %eax,%eax
f012e029:	74 4b                	je     f012e076 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012e02b:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e030:	0f b6 c0             	movzbl %al,%eax
f012e033:	8d 50 01             	lea    0x1(%eax),%edx
f012e036:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e03b:	0f b6 c0             	movzbl %al,%eax
f012e03e:	39 c2                	cmp    %eax,%edx
f012e040:	7d 66                	jge    f012e0a8 <schenv+0xfa>
			{
				__ne = curenv;
f012e042:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e047:	a3 d4 be 2b f0       	mov    %eax,0xf02bbed4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e04c:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e051:	0f b6 c0             	movzbl %al,%eax
f012e054:	8a 15 14 bf 2b f0    	mov    0xf02bbf14,%dl
f012e05a:	0f b6 d2             	movzbl %dl,%edx
f012e05d:	4a                   	dec    %edx
f012e05e:	39 d0                	cmp    %edx,%eax
f012e060:	7d 08                	jge    f012e06a <schenv+0xbc>
f012e062:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e067:	40                   	inc    %eax
f012e068:	eb 05                	jmp    f012e06f <schenv+0xc1>
f012e06a:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e06f:	a2 3c bf 2b f0       	mov    %al,0xf02bbf3c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e074:	eb 32                	jmp    f012e0a8 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e076:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e07b:	a3 d4 be 2b f0       	mov    %eax,0xf02bbed4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e080:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e085:	0f b6 c0             	movzbl %al,%eax
f012e088:	8a 15 14 bf 2b f0    	mov    0xf02bbf14,%dl
f012e08e:	0f b6 d2             	movzbl %dl,%edx
f012e091:	4a                   	dec    %edx
f012e092:	39 d0                	cmp    %edx,%eax
f012e094:	7d 08                	jge    f012e09e <schenv+0xf0>
f012e096:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e09b:	40                   	inc    %eax
f012e09c:	eb 05                	jmp    f012e0a3 <schenv+0xf5>
f012e09e:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e0a3:	a2 3c bf 2b f0       	mov    %al,0xf02bbf3c
		}
	}
}
f012e0a8:	90                   	nop
f012e0a9:	c9                   	leave  
f012e0aa:	c3                   	ret    

f012e0ab <chksch>:

void chksch(uint8 onoff)
{
f012e0ab:	55                   	push   %ebp
f012e0ac:	89 e5                	mov    %esp,%ebp
f012e0ae:	83 ec 04             	sub    $0x4,%esp
f012e0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f012e0b4:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e0b7:	c7 05 38 bf 2b f0 00 	movl   $0x0,0xf02bbf38
f012e0be:	00 00 00 
	__ne = NULL;
f012e0c1:	c7 05 d4 be 2b f0 00 	movl   $0x0,0xf02bbed4
f012e0c8:	00 00 00 
	__pl = 0 ;
f012e0cb:	c6 05 38 3b 25 f0 00 	movb   $0x0,0xf0253b38
	__nl = 0 ;
f012e0d2:	c6 05 3c bf 2b f0 00 	movb   $0x0,0xf02bbf3c
	__chkstatus = onoff;
f012e0d9:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e0dc:	a2 d0 be 2b f0       	mov    %al,0xf02bbed0
}
f012e0e1:	90                   	nop
f012e0e2:	c9                   	leave  
f012e0e3:	c3                   	ret    

f012e0e4 <chk1>:
void chk1()
{
f012e0e4:	55                   	push   %ebp
f012e0e5:	89 e5                	mov    %esp,%ebp
f012e0e7:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e0ea:	a0 d0 be 2b f0       	mov    0xf02bbed0,%al
f012e0ef:	84 c0                	test   %al,%al
f012e0f1:	74 2b                	je     f012e11e <chk1+0x3a>
		return ;
	__pe = curenv;
f012e0f3:	a1 54 32 25 f0       	mov    0xf0253254,%eax
f012e0f8:	a3 38 bf 2b f0       	mov    %eax,0xf02bbf38
	__pl = __nl ;
f012e0fd:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e102:	a2 38 3b 25 f0       	mov    %al,0xf0253b38
	if (__pe == NULL)
f012e107:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e10c:	85 c0                	test   %eax,%eax
f012e10e:	75 07                	jne    f012e117 <chk1+0x33>
	{
		__pl = 0;
f012e110:	c6 05 38 3b 25 f0 00 	movb   $0x0,0xf0253b38
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e117:	e8 92 fe ff ff       	call   f012dfae <schenv>
f012e11c:	eb 01                	jmp    f012e11f <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e11e:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e11f:	c9                   	leave  
f012e120:	c3                   	ret    

f012e121 <chk2>:
void chk2(struct Env* __se)
{
f012e121:	55                   	push   %ebp
f012e122:	89 e5                	mov    %esp,%ebp
f012e124:	53                   	push   %ebx
f012e125:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e128:	a0 d0 be 2b f0       	mov    0xf02bbed0,%al
f012e12d:	84 c0                	test   %al,%al
f012e12f:	0f 84 35 02 00 00    	je     f012e36a <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e135:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e13a:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e13d:	74 19                	je     f012e158 <chk2+0x37>
f012e13f:	68 95 ac 13 f0       	push   $0xf013ac95
f012e144:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e149:	68 f8 00 00 00       	push   $0xf8
f012e14e:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e153:	e8 0e 21 fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e158:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e15d:	85 c0                	test   %eax,%eax
f012e15f:	0f 84 1b 01 00 00    	je     f012e280 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e165:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e16a:	0f b6 c0             	movzbl %al,%eax
f012e16d:	8a 80 c8 be 2b f0    	mov    -0xfd44138(%eax),%al
f012e173:	0f b6 d8             	movzbl %al,%ebx
f012e176:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e17b:	99                   	cltd   
f012e17c:	f7 fb                	idiv   %ebx
f012e17e:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e184:	a0 3c bf 2b f0       	mov    0xf02bbf3c,%al
f012e189:	0f b6 c0             	movzbl %al,%eax
f012e18c:	8a 80 c8 be 2b f0    	mov    -0xfd44138(%eax),%al
f012e192:	0f b6 d8             	movzbl %al,%ebx
f012e195:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e19a:	99                   	cltd   
f012e19b:	f7 fb                	idiv   %ebx
f012e19d:	89 c3                	mov    %eax,%ebx
f012e19f:	89 c8                	mov    %ecx,%eax
f012e1a1:	99                   	cltd   
f012e1a2:	f7 fb                	idiv   %ebx
f012e1a4:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e1a8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1ac:	83 e0 01             	and    $0x1,%eax
f012e1af:	66 85 c0             	test   %ax,%ax
f012e1b2:	74 07                	je     f012e1bb <chk2+0x9a>
f012e1b4:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1b8:	40                   	inc    %eax
f012e1b9:	eb 04                	jmp    f012e1bf <chk2+0x9e>
f012e1bb:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1bf:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e1c3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e1c7:	89 d0                	mov    %edx,%eax
f012e1c9:	c1 e0 02             	shl    $0x2,%eax
f012e1cc:	01 d0                	add    %edx,%eax
f012e1ce:	01 c0                	add    %eax,%eax
f012e1d0:	01 d0                	add    %edx,%eax
f012e1d2:	c1 e0 02             	shl    $0x2,%eax
f012e1d5:	01 d0                	add    %edx,%eax
f012e1d7:	01 c0                	add    %eax,%eax
f012e1d9:	89 c1                	mov    %eax,%ecx
f012e1db:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e1e0:	f7 e9                	imul   %ecx
f012e1e2:	c1 fa 05             	sar    $0x5,%edx
f012e1e5:	89 c8                	mov    %ecx,%eax
f012e1e7:	c1 f8 1f             	sar    $0x1f,%eax
f012e1ea:	29 c2                	sub    %eax,%edx
f012e1ec:	89 d0                	mov    %edx,%eax
f012e1ee:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e1f2:	e8 bc 6a fd ff       	call   f0104cb3 <kclock_read_cnt0>
f012e1f7:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e1fb:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e1ff:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e203:	76 0a                	jbe    f012e20f <chk2+0xee>
f012e205:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e209:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e20d:	76 19                	jbe    f012e228 <chk2+0x107>
f012e20f:	68 b8 ac 13 f0       	push   $0xf013acb8
f012e214:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e219:	68 02 01 00 00       	push   $0x102
f012e21e:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e223:	e8 3e 20 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e228:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e22f:	eb 42                	jmp    f012e273 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e231:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e236:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e239:	89 c2                	mov    %eax,%edx
f012e23b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e23e:	c1 e0 04             	shl    $0x4,%eax
f012e241:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012e246:	83 ec 08             	sub    $0x8,%esp
f012e249:	52                   	push   %edx
f012e24a:	50                   	push   %eax
f012e24b:	e8 77 6d fd ff       	call   f0104fc7 <find_env_in_queue>
f012e250:	83 c4 10             	add    $0x10,%esp
f012e253:	85 c0                	test   %eax,%eax
f012e255:	74 19                	je     f012e270 <chk2+0x14f>
f012e257:	68 dc ac 13 f0       	push   $0xf013acdc
f012e25c:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e261:	68 06 01 00 00       	push   $0x106
f012e266:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e26b:	e8 f6 1f fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e270:	ff 45 f4             	incl   -0xc(%ebp)
f012e273:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012e278:	0f b6 c0             	movzbl %al,%eax
f012e27b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e27e:	7f b1                	jg     f012e231 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e280:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e285:	85 c0                	test   %eax,%eax
f012e287:	0f 84 de 00 00 00    	je     f012e36b <chk2+0x24a>
f012e28d:	8b 15 38 bf 2b f0    	mov    0xf02bbf38,%edx
f012e293:	a1 d4 be 2b f0       	mov    0xf02bbed4,%eax
f012e298:	39 c2                	cmp    %eax,%edx
f012e29a:	0f 84 cb 00 00 00    	je     f012e36b <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e2a0:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e2a5:	0f b6 c0             	movzbl %al,%eax
f012e2a8:	8a 15 14 bf 2b f0    	mov    0xf02bbf14,%dl
f012e2ae:	0f b6 d2             	movzbl %dl,%edx
f012e2b1:	4a                   	dec    %edx
f012e2b2:	39 d0                	cmp    %edx,%eax
f012e2b4:	74 08                	je     f012e2be <chk2+0x19d>
f012e2b6:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e2bb:	40                   	inc    %eax
f012e2bc:	eb 05                	jmp    f012e2c3 <chk2+0x1a2>
f012e2be:	a0 38 3b 25 f0       	mov    0xf0253b38,%al
f012e2c3:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e2c6:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e2cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e2ce:	89 c2                	mov    %eax,%edx
f012e2d0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e2d4:	c1 e0 04             	shl    $0x4,%eax
f012e2d7:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012e2dc:	83 ec 08             	sub    $0x8,%esp
f012e2df:	52                   	push   %edx
f012e2e0:	50                   	push   %eax
f012e2e1:	e8 e1 6c fd ff       	call   f0104fc7 <find_env_in_queue>
f012e2e6:	83 c4 10             	add    $0x10,%esp
f012e2e9:	85 c0                	test   %eax,%eax
f012e2eb:	75 19                	jne    f012e306 <chk2+0x1e5>
f012e2ed:	68 1c ad 13 f0       	push   $0xf013ad1c
f012e2f2:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e2f7:	68 0c 01 00 00       	push   $0x10c
f012e2fc:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e301:	e8 60 1f fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e306:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e30d:	eb 4c                	jmp    f012e35b <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e30f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e313:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e316:	74 3f                	je     f012e357 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e318:	a1 38 bf 2b f0       	mov    0xf02bbf38,%eax
f012e31d:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e320:	89 c2                	mov    %eax,%edx
f012e322:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e325:	c1 e0 04             	shl    $0x4,%eax
f012e328:	05 40 3b 25 f0       	add    $0xf0253b40,%eax
f012e32d:	83 ec 08             	sub    $0x8,%esp
f012e330:	52                   	push   %edx
f012e331:	50                   	push   %eax
f012e332:	e8 90 6c fd ff       	call   f0104fc7 <find_env_in_queue>
f012e337:	83 c4 10             	add    $0x10,%esp
f012e33a:	85 c0                	test   %eax,%eax
f012e33c:	74 1a                	je     f012e358 <chk2+0x237>
f012e33e:	68 60 ad 13 f0       	push   $0xf013ad60
f012e343:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e348:	68 10 01 00 00       	push   $0x110
f012e34d:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e352:	e8 0f 1f fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e357:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e358:	ff 45 f0             	incl   -0x10(%ebp)
f012e35b:	a0 14 bf 2b f0       	mov    0xf02bbf14,%al
f012e360:	0f b6 c0             	movzbl %al,%eax
f012e363:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e366:	7f a7                	jg     f012e30f <chk2+0x1ee>
f012e368:	eb 01                	jmp    f012e36b <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e36a:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e36b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e36e:	c9                   	leave  
f012e36f:	c3                   	ret    

f012e370 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e370:	55                   	push   %ebp
f012e371:	89 e5                	mov    %esp,%ebp
f012e373:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e376:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e37d:	eb 40                	jmp    f012e3bf <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e37f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e382:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e388:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e38d:	83 ec 08             	sub    $0x8,%esp
f012e390:	52                   	push   %edx
f012e391:	50                   	push   %eax
f012e392:	e8 92 01 00 00       	call   f012e529 <check_va2pa>
f012e397:	83 c4 10             	add    $0x10,%esp
f012e39a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e39d:	74 19                	je     f012e3b8 <check_boot_pgdir+0x48>
f012e39f:	68 a0 ad 13 f0       	push   $0xf013ada0
f012e3a4:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e3a9:	68 37 01 00 00       	push   $0x137
f012e3ae:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e3b3:	e8 f8 1d fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e3b8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e3bf:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e3c6:	75 b7                	jne    f012e37f <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e3c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e3cf:	eb 74                	jmp    f012e445 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e3d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e3d4:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e3da:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e3df:	83 ec 08             	sub    $0x8,%esp
f012e3e2:	52                   	push   %edx
f012e3e3:	50                   	push   %eax
f012e3e4:	e8 40 01 00 00       	call   f012e529 <check_va2pa>
f012e3e9:	83 c4 10             	add    $0x10,%esp
f012e3ec:	c7 45 f0 00 40 18 f0 	movl   $0xf0184000,-0x10(%ebp)
f012e3f3:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e3fa:	77 17                	ja     f012e413 <check_boot_pgdir+0xa3>
f012e3fc:	ff 75 f0             	pushl  -0x10(%ebp)
f012e3ff:	68 d8 ad 13 f0       	push   $0xf013add8
f012e404:	68 3c 01 00 00       	push   $0x13c
f012e409:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e40e:	e8 9d 1d fd ff       	call   f01001b0 <_panic>
f012e413:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e416:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e41c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e41f:	01 ca                	add    %ecx,%edx
f012e421:	39 d0                	cmp    %edx,%eax
f012e423:	74 19                	je     f012e43e <check_boot_pgdir+0xce>
f012e425:	68 0c ae 13 f0       	push   $0xf013ae0c
f012e42a:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e42f:	68 3c 01 00 00       	push   $0x13c
f012e434:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e439:	e8 72 1d fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e43e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e445:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e44c:	76 83                	jbe    f012e3d1 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e44e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e455:	e9 af 00 00 00       	jmp    f012e509 <check_boot_pgdir+0x199>
		switch (i) {
f012e45a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e45d:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e462:	74 11                	je     f012e475 <check_boot_pgdir+0x105>
f012e464:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e469:	72 36                	jb     f012e4a1 <check_boot_pgdir+0x131>
f012e46b:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e470:	83 f8 02             	cmp    $0x2,%eax
f012e473:	77 2c                	ja     f012e4a1 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e475:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e47a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e47d:	c1 e2 02             	shl    $0x2,%edx
f012e480:	01 d0                	add    %edx,%eax
f012e482:	8b 00                	mov    (%eax),%eax
f012e484:	85 c0                	test   %eax,%eax
f012e486:	75 7a                	jne    f012e502 <check_boot_pgdir+0x192>
f012e488:	68 8e ae 13 f0       	push   $0xf013ae8e
f012e48d:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e492:	68 47 01 00 00       	push   $0x147
f012e497:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e49c:	e8 0f 1d fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e4a1:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e4a8:	76 2c                	jbe    f012e4d6 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e4aa:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e4af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e4b2:	c1 e2 02             	shl    $0x2,%edx
f012e4b5:	01 d0                	add    %edx,%eax
f012e4b7:	8b 00                	mov    (%eax),%eax
f012e4b9:	85 c0                	test   %eax,%eax
f012e4bb:	75 48                	jne    f012e505 <check_boot_pgdir+0x195>
f012e4bd:	68 8e ae 13 f0       	push   $0xf013ae8e
f012e4c2:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e4c7:	68 4b 01 00 00       	push   $0x14b
f012e4cc:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e4d1:	e8 da 1c fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e4d6:	a1 10 bf 2b f0       	mov    0xf02bbf10,%eax
f012e4db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e4de:	c1 e2 02             	shl    $0x2,%edx
f012e4e1:	01 d0                	add    %edx,%eax
f012e4e3:	8b 00                	mov    (%eax),%eax
f012e4e5:	85 c0                	test   %eax,%eax
f012e4e7:	74 1c                	je     f012e505 <check_boot_pgdir+0x195>
f012e4e9:	68 a4 ae 13 f0       	push   $0xf013aea4
f012e4ee:	68 a2 ac 13 f0       	push   $0xf013aca2
f012e4f3:	68 4d 01 00 00       	push   $0x14d
f012e4f8:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e4fd:	e8 ae 1c fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e502:	90                   	nop
f012e503:	eb 01                	jmp    f012e506 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e505:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e506:	ff 45 f4             	incl   -0xc(%ebp)
f012e509:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e510:	0f 86 44 ff ff ff    	jbe    f012e45a <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e516:	83 ec 0c             	sub    $0xc,%esp
f012e519:	68 c0 ae 13 f0       	push   $0xf013aec0
f012e51e:	e8 0e 29 fd ff       	call   f0100e31 <cprintf>
f012e523:	83 c4 10             	add    $0x10,%esp
}
f012e526:	90                   	nop
f012e527:	c9                   	leave  
f012e528:	c3                   	ret    

f012e529 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e529:	55                   	push   %ebp
f012e52a:	89 e5                	mov    %esp,%ebp
f012e52c:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e52f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e532:	c1 e8 16             	shr    $0x16,%eax
f012e535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e53c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e53f:	01 d0                	add    %edx,%eax
f012e541:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e544:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e547:	8b 00                	mov    (%eax),%eax
f012e549:	83 e0 01             	and    $0x1,%eax
f012e54c:	85 c0                	test   %eax,%eax
f012e54e:	75 0a                	jne    f012e55a <check_va2pa+0x31>
		return ~0;
f012e550:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e555:	e9 87 00 00 00       	jmp    f012e5e1 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e55a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e55d:	8b 00                	mov    (%eax),%eax
f012e55f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e564:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e567:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e56a:	c1 e8 0c             	shr    $0xc,%eax
f012e56d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e570:	a1 b0 be 2b f0       	mov    0xf02bbeb0,%eax
f012e575:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e578:	72 17                	jb     f012e591 <check_va2pa+0x68>
f012e57a:	ff 75 f0             	pushl  -0x10(%ebp)
f012e57d:	68 e0 ae 13 f0       	push   $0xf013aee0
f012e582:	68 63 01 00 00       	push   $0x163
f012e587:	68 e7 ab 13 f0       	push   $0xf013abe7
f012e58c:	e8 1f 1c fd ff       	call   f01001b0 <_panic>
f012e591:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e594:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e599:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e59c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e59f:	c1 e8 0c             	shr    $0xc,%eax
f012e5a2:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e5a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e5ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e5b1:	01 d0                	add    %edx,%eax
f012e5b3:	8b 00                	mov    (%eax),%eax
f012e5b5:	83 e0 01             	and    $0x1,%eax
f012e5b8:	85 c0                	test   %eax,%eax
f012e5ba:	75 07                	jne    f012e5c3 <check_va2pa+0x9a>
		return ~0;
f012e5bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e5c1:	eb 1e                	jmp    f012e5e1 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e5c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e5c6:	c1 e8 0c             	shr    $0xc,%eax
f012e5c9:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e5ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e5d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e5d8:	01 d0                	add    %edx,%eax
f012e5da:	8b 00                	mov    (%eax),%eax
f012e5dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e5e1:	c9                   	leave  
f012e5e2:	c3                   	ret    

f012e5e3 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e5e3:	55                   	push   %ebp
f012e5e4:	89 e5                	mov    %esp,%ebp
f012e5e6:	53                   	push   %ebx
f012e5e7:	83 ec 14             	sub    $0x14,%esp
f012e5ea:	8b 45 10             	mov    0x10(%ebp),%eax
f012e5ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e5f0:	8b 45 14             	mov    0x14(%ebp),%eax
f012e5f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e5f6:	8b 45 18             	mov    0x18(%ebp),%eax
f012e5f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5fe:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e601:	77 55                	ja     f012e658 <printnum+0x75>
f012e603:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e606:	72 05                	jb     f012e60d <printnum+0x2a>
f012e608:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e60b:	77 4b                	ja     f012e658 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e60d:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e610:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e613:	8b 45 18             	mov    0x18(%ebp),%eax
f012e616:	ba 00 00 00 00       	mov    $0x0,%edx
f012e61b:	52                   	push   %edx
f012e61c:	50                   	push   %eax
f012e61d:	ff 75 f4             	pushl  -0xc(%ebp)
f012e620:	ff 75 f0             	pushl  -0x10(%ebp)
f012e623:	e8 10 16 00 00       	call   f012fc38 <__udivdi3>
f012e628:	83 c4 10             	add    $0x10,%esp
f012e62b:	83 ec 04             	sub    $0x4,%esp
f012e62e:	ff 75 20             	pushl  0x20(%ebp)
f012e631:	53                   	push   %ebx
f012e632:	ff 75 18             	pushl  0x18(%ebp)
f012e635:	52                   	push   %edx
f012e636:	50                   	push   %eax
f012e637:	ff 75 0c             	pushl  0xc(%ebp)
f012e63a:	ff 75 08             	pushl  0x8(%ebp)
f012e63d:	e8 a1 ff ff ff       	call   f012e5e3 <printnum>
f012e642:	83 c4 20             	add    $0x20,%esp
f012e645:	eb 1a                	jmp    f012e661 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e647:	83 ec 08             	sub    $0x8,%esp
f012e64a:	ff 75 0c             	pushl  0xc(%ebp)
f012e64d:	ff 75 20             	pushl  0x20(%ebp)
f012e650:	8b 45 08             	mov    0x8(%ebp),%eax
f012e653:	ff d0                	call   *%eax
f012e655:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e658:	ff 4d 1c             	decl   0x1c(%ebp)
f012e65b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e65f:	7f e6                	jg     f012e647 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e661:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e664:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e66c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e66f:	53                   	push   %ebx
f012e670:	51                   	push   %ecx
f012e671:	52                   	push   %edx
f012e672:	50                   	push   %eax
f012e673:	e8 d0 16 00 00       	call   f012fd48 <__umoddi3>
f012e678:	83 c4 10             	add    $0x10,%esp
f012e67b:	05 34 b1 13 f0       	add    $0xf013b134,%eax
f012e680:	8a 00                	mov    (%eax),%al
f012e682:	0f be c0             	movsbl %al,%eax
f012e685:	83 ec 08             	sub    $0x8,%esp
f012e688:	ff 75 0c             	pushl  0xc(%ebp)
f012e68b:	50                   	push   %eax
f012e68c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e68f:	ff d0                	call   *%eax
f012e691:	83 c4 10             	add    $0x10,%esp
}
f012e694:	90                   	nop
f012e695:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e698:	c9                   	leave  
f012e699:	c3                   	ret    

f012e69a <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e69a:	55                   	push   %ebp
f012e69b:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e69d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e6a1:	7e 1c                	jle    f012e6bf <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e6a3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6a6:	8b 00                	mov    (%eax),%eax
f012e6a8:	8d 50 08             	lea    0x8(%eax),%edx
f012e6ab:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6ae:	89 10                	mov    %edx,(%eax)
f012e6b0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6b3:	8b 00                	mov    (%eax),%eax
f012e6b5:	83 e8 08             	sub    $0x8,%eax
f012e6b8:	8b 50 04             	mov    0x4(%eax),%edx
f012e6bb:	8b 00                	mov    (%eax),%eax
f012e6bd:	eb 40                	jmp    f012e6ff <getuint+0x65>
	else if (lflag)
f012e6bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e6c3:	74 1e                	je     f012e6e3 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e6c5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6c8:	8b 00                	mov    (%eax),%eax
f012e6ca:	8d 50 04             	lea    0x4(%eax),%edx
f012e6cd:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d0:	89 10                	mov    %edx,(%eax)
f012e6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d5:	8b 00                	mov    (%eax),%eax
f012e6d7:	83 e8 04             	sub    $0x4,%eax
f012e6da:	8b 00                	mov    (%eax),%eax
f012e6dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6e1:	eb 1c                	jmp    f012e6ff <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e6e3:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6e6:	8b 00                	mov    (%eax),%eax
f012e6e8:	8d 50 04             	lea    0x4(%eax),%edx
f012e6eb:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6ee:	89 10                	mov    %edx,(%eax)
f012e6f0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6f3:	8b 00                	mov    (%eax),%eax
f012e6f5:	83 e8 04             	sub    $0x4,%eax
f012e6f8:	8b 00                	mov    (%eax),%eax
f012e6fa:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e6ff:	5d                   	pop    %ebp
f012e700:	c3                   	ret    

f012e701 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e701:	55                   	push   %ebp
f012e702:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e704:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e708:	7e 1c                	jle    f012e726 <getint+0x25>
		return va_arg(*ap, long long);
f012e70a:	8b 45 08             	mov    0x8(%ebp),%eax
f012e70d:	8b 00                	mov    (%eax),%eax
f012e70f:	8d 50 08             	lea    0x8(%eax),%edx
f012e712:	8b 45 08             	mov    0x8(%ebp),%eax
f012e715:	89 10                	mov    %edx,(%eax)
f012e717:	8b 45 08             	mov    0x8(%ebp),%eax
f012e71a:	8b 00                	mov    (%eax),%eax
f012e71c:	83 e8 08             	sub    $0x8,%eax
f012e71f:	8b 50 04             	mov    0x4(%eax),%edx
f012e722:	8b 00                	mov    (%eax),%eax
f012e724:	eb 38                	jmp    f012e75e <getint+0x5d>
	else if (lflag)
f012e726:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e72a:	74 1a                	je     f012e746 <getint+0x45>
		return va_arg(*ap, long);
f012e72c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e72f:	8b 00                	mov    (%eax),%eax
f012e731:	8d 50 04             	lea    0x4(%eax),%edx
f012e734:	8b 45 08             	mov    0x8(%ebp),%eax
f012e737:	89 10                	mov    %edx,(%eax)
f012e739:	8b 45 08             	mov    0x8(%ebp),%eax
f012e73c:	8b 00                	mov    (%eax),%eax
f012e73e:	83 e8 04             	sub    $0x4,%eax
f012e741:	8b 00                	mov    (%eax),%eax
f012e743:	99                   	cltd   
f012e744:	eb 18                	jmp    f012e75e <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e746:	8b 45 08             	mov    0x8(%ebp),%eax
f012e749:	8b 00                	mov    (%eax),%eax
f012e74b:	8d 50 04             	lea    0x4(%eax),%edx
f012e74e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e751:	89 10                	mov    %edx,(%eax)
f012e753:	8b 45 08             	mov    0x8(%ebp),%eax
f012e756:	8b 00                	mov    (%eax),%eax
f012e758:	83 e8 04             	sub    $0x4,%eax
f012e75b:	8b 00                	mov    (%eax),%eax
f012e75d:	99                   	cltd   
}
f012e75e:	5d                   	pop    %ebp
f012e75f:	c3                   	ret    

f012e760 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e760:	55                   	push   %ebp
f012e761:	89 e5                	mov    %esp,%ebp
f012e763:	56                   	push   %esi
f012e764:	53                   	push   %ebx
f012e765:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e768:	eb 17                	jmp    f012e781 <vprintfmt+0x21>
			if (ch == '\0')
f012e76a:	85 db                	test   %ebx,%ebx
f012e76c:	0f 84 af 03 00 00    	je     f012eb21 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e772:	83 ec 08             	sub    $0x8,%esp
f012e775:	ff 75 0c             	pushl  0xc(%ebp)
f012e778:	53                   	push   %ebx
f012e779:	8b 45 08             	mov    0x8(%ebp),%eax
f012e77c:	ff d0                	call   *%eax
f012e77e:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e781:	8b 45 10             	mov    0x10(%ebp),%eax
f012e784:	8d 50 01             	lea    0x1(%eax),%edx
f012e787:	89 55 10             	mov    %edx,0x10(%ebp)
f012e78a:	8a 00                	mov    (%eax),%al
f012e78c:	0f b6 d8             	movzbl %al,%ebx
f012e78f:	83 fb 25             	cmp    $0x25,%ebx
f012e792:	75 d6                	jne    f012e76a <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e794:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e798:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e79f:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e7a6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e7ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e7b4:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7b7:	8d 50 01             	lea    0x1(%eax),%edx
f012e7ba:	89 55 10             	mov    %edx,0x10(%ebp)
f012e7bd:	8a 00                	mov    (%eax),%al
f012e7bf:	0f b6 d8             	movzbl %al,%ebx
f012e7c2:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e7c5:	83 f8 55             	cmp    $0x55,%eax
f012e7c8:	0f 87 2b 03 00 00    	ja     f012eaf9 <vprintfmt+0x399>
f012e7ce:	8b 04 85 58 b1 13 f0 	mov    -0xfec4ea8(,%eax,4),%eax
f012e7d5:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e7d7:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e7db:	eb d7                	jmp    f012e7b4 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e7dd:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e7e1:	eb d1                	jmp    f012e7b4 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e7e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e7ea:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e7ed:	89 d0                	mov    %edx,%eax
f012e7ef:	c1 e0 02             	shl    $0x2,%eax
f012e7f2:	01 d0                	add    %edx,%eax
f012e7f4:	01 c0                	add    %eax,%eax
f012e7f6:	01 d8                	add    %ebx,%eax
f012e7f8:	83 e8 30             	sub    $0x30,%eax
f012e7fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e7fe:	8b 45 10             	mov    0x10(%ebp),%eax
f012e801:	8a 00                	mov    (%eax),%al
f012e803:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e806:	83 fb 2f             	cmp    $0x2f,%ebx
f012e809:	7e 3e                	jle    f012e849 <vprintfmt+0xe9>
f012e80b:	83 fb 39             	cmp    $0x39,%ebx
f012e80e:	7f 39                	jg     f012e849 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e810:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012e813:	eb d5                	jmp    f012e7ea <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012e815:	8b 45 14             	mov    0x14(%ebp),%eax
f012e818:	83 c0 04             	add    $0x4,%eax
f012e81b:	89 45 14             	mov    %eax,0x14(%ebp)
f012e81e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e821:	83 e8 04             	sub    $0x4,%eax
f012e824:	8b 00                	mov    (%eax),%eax
f012e826:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012e829:	eb 1f                	jmp    f012e84a <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012e82b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e82f:	79 83                	jns    f012e7b4 <vprintfmt+0x54>
				width = 0;
f012e831:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012e838:	e9 77 ff ff ff       	jmp    f012e7b4 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012e83d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012e844:	e9 6b ff ff ff       	jmp    f012e7b4 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012e849:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012e84a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e84e:	0f 89 60 ff ff ff    	jns    f012e7b4 <vprintfmt+0x54>
				width = precision, precision = -1;
f012e854:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e857:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e85a:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012e861:	e9 4e ff ff ff       	jmp    f012e7b4 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012e866:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012e869:	e9 46 ff ff ff       	jmp    f012e7b4 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012e86e:	8b 45 14             	mov    0x14(%ebp),%eax
f012e871:	83 c0 04             	add    $0x4,%eax
f012e874:	89 45 14             	mov    %eax,0x14(%ebp)
f012e877:	8b 45 14             	mov    0x14(%ebp),%eax
f012e87a:	83 e8 04             	sub    $0x4,%eax
f012e87d:	8b 00                	mov    (%eax),%eax
f012e87f:	83 ec 08             	sub    $0x8,%esp
f012e882:	ff 75 0c             	pushl  0xc(%ebp)
f012e885:	50                   	push   %eax
f012e886:	8b 45 08             	mov    0x8(%ebp),%eax
f012e889:	ff d0                	call   *%eax
f012e88b:	83 c4 10             	add    $0x10,%esp
			break;
f012e88e:	e9 89 02 00 00       	jmp    f012eb1c <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012e893:	8b 45 14             	mov    0x14(%ebp),%eax
f012e896:	83 c0 04             	add    $0x4,%eax
f012e899:	89 45 14             	mov    %eax,0x14(%ebp)
f012e89c:	8b 45 14             	mov    0x14(%ebp),%eax
f012e89f:	83 e8 04             	sub    $0x4,%eax
f012e8a2:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012e8a4:	85 db                	test   %ebx,%ebx
f012e8a6:	79 02                	jns    f012e8aa <vprintfmt+0x14a>
				err = -err;
f012e8a8:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012e8aa:	83 fb 64             	cmp    $0x64,%ebx
f012e8ad:	7f 0b                	jg     f012e8ba <vprintfmt+0x15a>
f012e8af:	8b 34 9d a0 af 13 f0 	mov    -0xfec5060(,%ebx,4),%esi
f012e8b6:	85 f6                	test   %esi,%esi
f012e8b8:	75 19                	jne    f012e8d3 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012e8ba:	53                   	push   %ebx
f012e8bb:	68 45 b1 13 f0       	push   $0xf013b145
f012e8c0:	ff 75 0c             	pushl  0xc(%ebp)
f012e8c3:	ff 75 08             	pushl  0x8(%ebp)
f012e8c6:	e8 5e 02 00 00       	call   f012eb29 <printfmt>
f012e8cb:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012e8ce:	e9 49 02 00 00       	jmp    f012eb1c <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012e8d3:	56                   	push   %esi
f012e8d4:	68 4e b1 13 f0       	push   $0xf013b14e
f012e8d9:	ff 75 0c             	pushl  0xc(%ebp)
f012e8dc:	ff 75 08             	pushl  0x8(%ebp)
f012e8df:	e8 45 02 00 00       	call   f012eb29 <printfmt>
f012e8e4:	83 c4 10             	add    $0x10,%esp
			break;
f012e8e7:	e9 30 02 00 00       	jmp    f012eb1c <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012e8ec:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8ef:	83 c0 04             	add    $0x4,%eax
f012e8f2:	89 45 14             	mov    %eax,0x14(%ebp)
f012e8f5:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8f8:	83 e8 04             	sub    $0x4,%eax
f012e8fb:	8b 30                	mov    (%eax),%esi
f012e8fd:	85 f6                	test   %esi,%esi
f012e8ff:	75 05                	jne    f012e906 <vprintfmt+0x1a6>
				p = "(null)";
f012e901:	be 51 b1 13 f0       	mov    $0xf013b151,%esi
			if (width > 0 && padc != '-')
f012e906:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e90a:	7e 6d                	jle    f012e979 <vprintfmt+0x219>
f012e90c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012e910:	74 67                	je     f012e979 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012e912:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e915:	83 ec 08             	sub    $0x8,%esp
f012e918:	50                   	push   %eax
f012e919:	56                   	push   %esi
f012e91a:	e8 12 05 00 00       	call   f012ee31 <strnlen>
f012e91f:	83 c4 10             	add    $0x10,%esp
f012e922:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012e925:	eb 16                	jmp    f012e93d <vprintfmt+0x1dd>
					putch(padc, putdat);
f012e927:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012e92b:	83 ec 08             	sub    $0x8,%esp
f012e92e:	ff 75 0c             	pushl  0xc(%ebp)
f012e931:	50                   	push   %eax
f012e932:	8b 45 08             	mov    0x8(%ebp),%eax
f012e935:	ff d0                	call   *%eax
f012e937:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012e93a:	ff 4d e4             	decl   -0x1c(%ebp)
f012e93d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e941:	7f e4                	jg     f012e927 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e943:	eb 34                	jmp    f012e979 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012e945:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e949:	74 1c                	je     f012e967 <vprintfmt+0x207>
f012e94b:	83 fb 1f             	cmp    $0x1f,%ebx
f012e94e:	7e 05                	jle    f012e955 <vprintfmt+0x1f5>
f012e950:	83 fb 7e             	cmp    $0x7e,%ebx
f012e953:	7e 12                	jle    f012e967 <vprintfmt+0x207>
					putch('?', putdat);
f012e955:	83 ec 08             	sub    $0x8,%esp
f012e958:	ff 75 0c             	pushl  0xc(%ebp)
f012e95b:	6a 3f                	push   $0x3f
f012e95d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e960:	ff d0                	call   *%eax
f012e962:	83 c4 10             	add    $0x10,%esp
f012e965:	eb 0f                	jmp    f012e976 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012e967:	83 ec 08             	sub    $0x8,%esp
f012e96a:	ff 75 0c             	pushl  0xc(%ebp)
f012e96d:	53                   	push   %ebx
f012e96e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e971:	ff d0                	call   *%eax
f012e973:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e976:	ff 4d e4             	decl   -0x1c(%ebp)
f012e979:	89 f0                	mov    %esi,%eax
f012e97b:	8d 70 01             	lea    0x1(%eax),%esi
f012e97e:	8a 00                	mov    (%eax),%al
f012e980:	0f be d8             	movsbl %al,%ebx
f012e983:	85 db                	test   %ebx,%ebx
f012e985:	74 24                	je     f012e9ab <vprintfmt+0x24b>
f012e987:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e98b:	78 b8                	js     f012e945 <vprintfmt+0x1e5>
f012e98d:	ff 4d e0             	decl   -0x20(%ebp)
f012e990:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e994:	79 af                	jns    f012e945 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e996:	eb 13                	jmp    f012e9ab <vprintfmt+0x24b>
				putch(' ', putdat);
f012e998:	83 ec 08             	sub    $0x8,%esp
f012e99b:	ff 75 0c             	pushl  0xc(%ebp)
f012e99e:	6a 20                	push   $0x20
f012e9a0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9a3:	ff d0                	call   *%eax
f012e9a5:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e9a8:	ff 4d e4             	decl   -0x1c(%ebp)
f012e9ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e9af:	7f e7                	jg     f012e998 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012e9b1:	e9 66 01 00 00       	jmp    f012eb1c <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012e9b6:	83 ec 08             	sub    $0x8,%esp
f012e9b9:	ff 75 e8             	pushl  -0x18(%ebp)
f012e9bc:	8d 45 14             	lea    0x14(%ebp),%eax
f012e9bf:	50                   	push   %eax
f012e9c0:	e8 3c fd ff ff       	call   f012e701 <getint>
f012e9c5:	83 c4 10             	add    $0x10,%esp
f012e9c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9cb:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012e9ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e9d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e9d4:	85 d2                	test   %edx,%edx
f012e9d6:	79 23                	jns    f012e9fb <vprintfmt+0x29b>
				putch('-', putdat);
f012e9d8:	83 ec 08             	sub    $0x8,%esp
f012e9db:	ff 75 0c             	pushl  0xc(%ebp)
f012e9de:	6a 2d                	push   $0x2d
f012e9e0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9e3:	ff d0                	call   *%eax
f012e9e5:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012e9e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e9eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e9ee:	f7 d8                	neg    %eax
f012e9f0:	83 d2 00             	adc    $0x0,%edx
f012e9f3:	f7 da                	neg    %edx
f012e9f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012e9fb:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ea02:	e9 bc 00 00 00       	jmp    f012eac3 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012ea07:	83 ec 08             	sub    $0x8,%esp
f012ea0a:	ff 75 e8             	pushl  -0x18(%ebp)
f012ea0d:	8d 45 14             	lea    0x14(%ebp),%eax
f012ea10:	50                   	push   %eax
f012ea11:	e8 84 fc ff ff       	call   f012e69a <getuint>
f012ea16:	83 c4 10             	add    $0x10,%esp
f012ea19:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea1c:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012ea1f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ea26:	e9 98 00 00 00       	jmp    f012eac3 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012ea2b:	83 ec 08             	sub    $0x8,%esp
f012ea2e:	ff 75 0c             	pushl  0xc(%ebp)
f012ea31:	6a 58                	push   $0x58
f012ea33:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea36:	ff d0                	call   *%eax
f012ea38:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ea3b:	83 ec 08             	sub    $0x8,%esp
f012ea3e:	ff 75 0c             	pushl  0xc(%ebp)
f012ea41:	6a 58                	push   $0x58
f012ea43:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea46:	ff d0                	call   *%eax
f012ea48:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ea4b:	83 ec 08             	sub    $0x8,%esp
f012ea4e:	ff 75 0c             	pushl  0xc(%ebp)
f012ea51:	6a 58                	push   $0x58
f012ea53:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea56:	ff d0                	call   *%eax
f012ea58:	83 c4 10             	add    $0x10,%esp
			break;
f012ea5b:	e9 bc 00 00 00       	jmp    f012eb1c <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012ea60:	83 ec 08             	sub    $0x8,%esp
f012ea63:	ff 75 0c             	pushl  0xc(%ebp)
f012ea66:	6a 30                	push   $0x30
f012ea68:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea6b:	ff d0                	call   *%eax
f012ea6d:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012ea70:	83 ec 08             	sub    $0x8,%esp
f012ea73:	ff 75 0c             	pushl  0xc(%ebp)
f012ea76:	6a 78                	push   $0x78
f012ea78:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea7b:	ff d0                	call   *%eax
f012ea7d:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012ea80:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea83:	83 c0 04             	add    $0x4,%eax
f012ea86:	89 45 14             	mov    %eax,0x14(%ebp)
f012ea89:	8b 45 14             	mov    0x14(%ebp),%eax
f012ea8c:	83 e8 04             	sub    $0x4,%eax
f012ea8f:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012ea91:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012ea9b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012eaa2:	eb 1f                	jmp    f012eac3 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012eaa4:	83 ec 08             	sub    $0x8,%esp
f012eaa7:	ff 75 e8             	pushl  -0x18(%ebp)
f012eaaa:	8d 45 14             	lea    0x14(%ebp),%eax
f012eaad:	50                   	push   %eax
f012eaae:	e8 e7 fb ff ff       	call   f012e69a <getuint>
f012eab3:	83 c4 10             	add    $0x10,%esp
f012eab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012eab9:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012eabc:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012eac3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012eac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012eaca:	83 ec 04             	sub    $0x4,%esp
f012eacd:	52                   	push   %edx
f012eace:	ff 75 e4             	pushl  -0x1c(%ebp)
f012ead1:	50                   	push   %eax
f012ead2:	ff 75 f4             	pushl  -0xc(%ebp)
f012ead5:	ff 75 f0             	pushl  -0x10(%ebp)
f012ead8:	ff 75 0c             	pushl  0xc(%ebp)
f012eadb:	ff 75 08             	pushl  0x8(%ebp)
f012eade:	e8 00 fb ff ff       	call   f012e5e3 <printnum>
f012eae3:	83 c4 20             	add    $0x20,%esp
			break;
f012eae6:	eb 34                	jmp    f012eb1c <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012eae8:	83 ec 08             	sub    $0x8,%esp
f012eaeb:	ff 75 0c             	pushl  0xc(%ebp)
f012eaee:	53                   	push   %ebx
f012eaef:	8b 45 08             	mov    0x8(%ebp),%eax
f012eaf2:	ff d0                	call   *%eax
f012eaf4:	83 c4 10             	add    $0x10,%esp
			break;
f012eaf7:	eb 23                	jmp    f012eb1c <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012eaf9:	83 ec 08             	sub    $0x8,%esp
f012eafc:	ff 75 0c             	pushl  0xc(%ebp)
f012eaff:	6a 25                	push   $0x25
f012eb01:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb04:	ff d0                	call   *%eax
f012eb06:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012eb09:	ff 4d 10             	decl   0x10(%ebp)
f012eb0c:	eb 03                	jmp    f012eb11 <vprintfmt+0x3b1>
f012eb0e:	ff 4d 10             	decl   0x10(%ebp)
f012eb11:	8b 45 10             	mov    0x10(%ebp),%eax
f012eb14:	48                   	dec    %eax
f012eb15:	8a 00                	mov    (%eax),%al
f012eb17:	3c 25                	cmp    $0x25,%al
f012eb19:	75 f3                	jne    f012eb0e <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012eb1b:	90                   	nop
		}
	}
f012eb1c:	e9 47 fc ff ff       	jmp    f012e768 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012eb21:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012eb22:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012eb25:	5b                   	pop    %ebx
f012eb26:	5e                   	pop    %esi
f012eb27:	5d                   	pop    %ebp
f012eb28:	c3                   	ret    

f012eb29 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012eb29:	55                   	push   %ebp
f012eb2a:	89 e5                	mov    %esp,%ebp
f012eb2c:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012eb2f:	8d 45 10             	lea    0x10(%ebp),%eax
f012eb32:	83 c0 04             	add    $0x4,%eax
f012eb35:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012eb38:	8b 45 10             	mov    0x10(%ebp),%eax
f012eb3b:	ff 75 f4             	pushl  -0xc(%ebp)
f012eb3e:	50                   	push   %eax
f012eb3f:	ff 75 0c             	pushl  0xc(%ebp)
f012eb42:	ff 75 08             	pushl  0x8(%ebp)
f012eb45:	e8 16 fc ff ff       	call   f012e760 <vprintfmt>
f012eb4a:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012eb4d:	90                   	nop
f012eb4e:	c9                   	leave  
f012eb4f:	c3                   	ret    

f012eb50 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012eb50:	55                   	push   %ebp
f012eb51:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012eb53:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb56:	8b 40 08             	mov    0x8(%eax),%eax
f012eb59:	8d 50 01             	lea    0x1(%eax),%edx
f012eb5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb5f:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012eb62:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb65:	8b 10                	mov    (%eax),%edx
f012eb67:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb6a:	8b 40 04             	mov    0x4(%eax),%eax
f012eb6d:	39 c2                	cmp    %eax,%edx
f012eb6f:	73 12                	jae    f012eb83 <sprintputch+0x33>
		*b->buf++ = ch;
f012eb71:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb74:	8b 00                	mov    (%eax),%eax
f012eb76:	8d 48 01             	lea    0x1(%eax),%ecx
f012eb79:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eb7c:	89 0a                	mov    %ecx,(%edx)
f012eb7e:	8b 55 08             	mov    0x8(%ebp),%edx
f012eb81:	88 10                	mov    %dl,(%eax)
}
f012eb83:	90                   	nop
f012eb84:	5d                   	pop    %ebp
f012eb85:	c3                   	ret    

f012eb86 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012eb86:	55                   	push   %ebp
f012eb87:	89 e5                	mov    %esp,%ebp
f012eb89:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012eb8c:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012eb92:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb95:	8d 50 ff             	lea    -0x1(%eax),%edx
f012eb98:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb9b:	01 d0                	add    %edx,%eax
f012eb9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012eba0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012eba7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ebab:	74 06                	je     f012ebb3 <vsnprintf+0x2d>
f012ebad:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ebb1:	7f 07                	jg     f012ebba <vsnprintf+0x34>
		return -E_INVAL;
f012ebb3:	b8 03 00 00 00       	mov    $0x3,%eax
f012ebb8:	eb 20                	jmp    f012ebda <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012ebba:	ff 75 14             	pushl  0x14(%ebp)
f012ebbd:	ff 75 10             	pushl  0x10(%ebp)
f012ebc0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012ebc3:	50                   	push   %eax
f012ebc4:	68 50 eb 12 f0       	push   $0xf012eb50
f012ebc9:	e8 92 fb ff ff       	call   f012e760 <vprintfmt>
f012ebce:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012ebd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ebd4:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012ebd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012ebda:	c9                   	leave  
f012ebdb:	c3                   	ret    

f012ebdc <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012ebdc:	55                   	push   %ebp
f012ebdd:	89 e5                	mov    %esp,%ebp
f012ebdf:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012ebe2:	8d 45 10             	lea    0x10(%ebp),%eax
f012ebe5:	83 c0 04             	add    $0x4,%eax
f012ebe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012ebeb:	8b 45 10             	mov    0x10(%ebp),%eax
f012ebee:	ff 75 f4             	pushl  -0xc(%ebp)
f012ebf1:	50                   	push   %eax
f012ebf2:	ff 75 0c             	pushl  0xc(%ebp)
f012ebf5:	ff 75 08             	pushl  0x8(%ebp)
f012ebf8:	e8 89 ff ff ff       	call   f012eb86 <vsnprintf>
f012ebfd:	83 c4 10             	add    $0x10,%esp
f012ec00:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012ec03:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012ec06:	c9                   	leave  
f012ec07:	c3                   	ret    

f012ec08 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012ec08:	55                   	push   %ebp
f012ec09:	89 e5                	mov    %esp,%ebp
f012ec0b:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012ec0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ec12:	74 13                	je     f012ec27 <readline+0x1f>
		cprintf("%s", prompt);
f012ec14:	83 ec 08             	sub    $0x8,%esp
f012ec17:	ff 75 08             	pushl  0x8(%ebp)
f012ec1a:	68 b0 b2 13 f0       	push   $0xf013b2b0
f012ec1f:	e8 0d 22 fd ff       	call   f0100e31 <cprintf>
f012ec24:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ec27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ec2e:	83 ec 0c             	sub    $0xc,%esp
f012ec31:	6a 00                	push   $0x0
f012ec33:	e8 a2 21 fd ff       	call   f0100dda <iscons>
f012ec38:	83 c4 10             	add    $0x10,%esp
f012ec3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ec3e:	e8 7e 21 fd ff       	call   f0100dc1 <getchar>
f012ec43:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ec46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ec4a:	79 22                	jns    f012ec6e <readline+0x66>
			if (c != -E_EOF)
f012ec4c:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ec50:	0f 84 ad 00 00 00    	je     f012ed03 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012ec56:	83 ec 08             	sub    $0x8,%esp
f012ec59:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec5c:	68 b3 b2 13 f0       	push   $0xf013b2b3
f012ec61:	e8 cb 21 fd ff       	call   f0100e31 <cprintf>
f012ec66:	83 c4 10             	add    $0x10,%esp
			return;
f012ec69:	e9 95 00 00 00       	jmp    f012ed03 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ec6e:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ec72:	7e 34                	jle    f012eca8 <readline+0xa0>
f012ec74:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ec7b:	7f 2b                	jg     f012eca8 <readline+0xa0>
			if (echoing)
f012ec7d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ec81:	74 0e                	je     f012ec91 <readline+0x89>
				cputchar(c);
f012ec83:	83 ec 0c             	sub    $0xc,%esp
f012ec86:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec89:	e8 1c 21 fd ff       	call   f0100daa <cputchar>
f012ec8e:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ec91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ec94:	8d 50 01             	lea    0x1(%eax),%edx
f012ec97:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ec9a:	89 c2                	mov    %eax,%edx
f012ec9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec9f:	01 d0                	add    %edx,%eax
f012eca1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012eca4:	88 10                	mov    %dl,(%eax)
f012eca6:	eb 56                	jmp    f012ecfe <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012eca8:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ecac:	75 1f                	jne    f012eccd <readline+0xc5>
f012ecae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ecb2:	7e 19                	jle    f012eccd <readline+0xc5>
			if (echoing)
f012ecb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ecb8:	74 0e                	je     f012ecc8 <readline+0xc0>
				cputchar(c);
f012ecba:	83 ec 0c             	sub    $0xc,%esp
f012ecbd:	ff 75 ec             	pushl  -0x14(%ebp)
f012ecc0:	e8 e5 20 fd ff       	call   f0100daa <cputchar>
f012ecc5:	83 c4 10             	add    $0x10,%esp

			i--;
f012ecc8:	ff 4d f4             	decl   -0xc(%ebp)
f012eccb:	eb 31                	jmp    f012ecfe <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012eccd:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ecd1:	74 0a                	je     f012ecdd <readline+0xd5>
f012ecd3:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ecd7:	0f 85 61 ff ff ff    	jne    f012ec3e <readline+0x36>
			if (echoing)
f012ecdd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ece1:	74 0e                	je     f012ecf1 <readline+0xe9>
				cputchar(c);
f012ece3:	83 ec 0c             	sub    $0xc,%esp
f012ece6:	ff 75 ec             	pushl  -0x14(%ebp)
f012ece9:	e8 bc 20 fd ff       	call   f0100daa <cputchar>
f012ecee:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ecf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ecf4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ecf7:	01 d0                	add    %edx,%eax
f012ecf9:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ecfc:	eb 06                	jmp    f012ed04 <readline+0xfc>
		}
	}
f012ecfe:	e9 3b ff ff ff       	jmp    f012ec3e <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012ed03:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012ed04:	c9                   	leave  
f012ed05:	c3                   	ret    

f012ed06 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012ed06:	55                   	push   %ebp
f012ed07:	89 e5                	mov    %esp,%ebp
f012ed09:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ed0c:	e8 51 de fd ff       	call   f010cb62 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ed11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ed15:	74 13                	je     f012ed2a <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ed17:	83 ec 08             	sub    $0x8,%esp
f012ed1a:	ff 75 08             	pushl  0x8(%ebp)
f012ed1d:	68 b0 b2 13 f0       	push   $0xf013b2b0
f012ed22:	e8 0a 21 fd ff       	call   f0100e31 <cprintf>
f012ed27:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ed2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ed31:	83 ec 0c             	sub    $0xc,%esp
f012ed34:	6a 00                	push   $0x0
f012ed36:	e8 9f 20 fd ff       	call   f0100dda <iscons>
f012ed3b:	83 c4 10             	add    $0x10,%esp
f012ed3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ed41:	e8 7b 20 fd ff       	call   f0100dc1 <getchar>
f012ed46:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ed49:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ed4d:	79 23                	jns    f012ed72 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ed4f:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ed53:	74 13                	je     f012ed68 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ed55:	83 ec 08             	sub    $0x8,%esp
f012ed58:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed5b:	68 b3 b2 13 f0       	push   $0xf013b2b3
f012ed60:	e8 cc 20 fd ff       	call   f0100e31 <cprintf>
f012ed65:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012ed68:	e8 0f de fd ff       	call   f010cb7c <sys_enable_interrupt>
			return;
f012ed6d:	e9 9a 00 00 00       	jmp    f012ee0c <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ed72:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ed76:	7e 34                	jle    f012edac <atomic_readline+0xa6>
f012ed78:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ed7f:	7f 2b                	jg     f012edac <atomic_readline+0xa6>
			if (echoing)
f012ed81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed85:	74 0e                	je     f012ed95 <atomic_readline+0x8f>
				cputchar(c);
f012ed87:	83 ec 0c             	sub    $0xc,%esp
f012ed8a:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed8d:	e8 18 20 fd ff       	call   f0100daa <cputchar>
f012ed92:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ed95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ed98:	8d 50 01             	lea    0x1(%eax),%edx
f012ed9b:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ed9e:	89 c2                	mov    %eax,%edx
f012eda0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eda3:	01 d0                	add    %edx,%eax
f012eda5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012eda8:	88 10                	mov    %dl,(%eax)
f012edaa:	eb 5b                	jmp    f012ee07 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012edac:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012edb0:	75 1f                	jne    f012edd1 <atomic_readline+0xcb>
f012edb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012edb6:	7e 19                	jle    f012edd1 <atomic_readline+0xcb>
			if (echoing)
f012edb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012edbc:	74 0e                	je     f012edcc <atomic_readline+0xc6>
				cputchar(c);
f012edbe:	83 ec 0c             	sub    $0xc,%esp
f012edc1:	ff 75 ec             	pushl  -0x14(%ebp)
f012edc4:	e8 e1 1f fd ff       	call   f0100daa <cputchar>
f012edc9:	83 c4 10             	add    $0x10,%esp
			i--;
f012edcc:	ff 4d f4             	decl   -0xc(%ebp)
f012edcf:	eb 36                	jmp    f012ee07 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012edd1:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012edd5:	74 0a                	je     f012ede1 <atomic_readline+0xdb>
f012edd7:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012eddb:	0f 85 60 ff ff ff    	jne    f012ed41 <atomic_readline+0x3b>
			if (echoing)
f012ede1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ede5:	74 0e                	je     f012edf5 <atomic_readline+0xef>
				cputchar(c);
f012ede7:	83 ec 0c             	sub    $0xc,%esp
f012edea:	ff 75 ec             	pushl  -0x14(%ebp)
f012eded:	e8 b8 1f fd ff       	call   f0100daa <cputchar>
f012edf2:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012edf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012edf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012edfb:	01 d0                	add    %edx,%eax
f012edfd:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012ee00:	e8 77 dd fd ff       	call   f010cb7c <sys_enable_interrupt>
			return;
f012ee05:	eb 05                	jmp    f012ee0c <atomic_readline+0x106>
		}
	}
f012ee07:	e9 35 ff ff ff       	jmp    f012ed41 <atomic_readline+0x3b>
}
f012ee0c:	c9                   	leave  
f012ee0d:	c3                   	ret    

f012ee0e <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012ee0e:	55                   	push   %ebp
f012ee0f:	89 e5                	mov    %esp,%ebp
f012ee11:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012ee14:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee1b:	eb 06                	jmp    f012ee23 <strlen+0x15>
		n++;
f012ee1d:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012ee20:	ff 45 08             	incl   0x8(%ebp)
f012ee23:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee26:	8a 00                	mov    (%eax),%al
f012ee28:	84 c0                	test   %al,%al
f012ee2a:	75 f1                	jne    f012ee1d <strlen+0xf>
		n++;
	return n;
f012ee2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee2f:	c9                   	leave  
f012ee30:	c3                   	ret    

f012ee31 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012ee31:	55                   	push   %ebp
f012ee32:	89 e5                	mov    %esp,%ebp
f012ee34:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ee37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee3e:	eb 09                	jmp    f012ee49 <strnlen+0x18>
		n++;
f012ee40:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ee43:	ff 45 08             	incl   0x8(%ebp)
f012ee46:	ff 4d 0c             	decl   0xc(%ebp)
f012ee49:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ee4d:	74 09                	je     f012ee58 <strnlen+0x27>
f012ee4f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee52:	8a 00                	mov    (%eax),%al
f012ee54:	84 c0                	test   %al,%al
f012ee56:	75 e8                	jne    f012ee40 <strnlen+0xf>
		n++;
	return n;
f012ee58:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee5b:	c9                   	leave  
f012ee5c:	c3                   	ret    

f012ee5d <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012ee5d:	55                   	push   %ebp
f012ee5e:	89 e5                	mov    %esp,%ebp
f012ee60:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012ee63:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee66:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012ee69:	90                   	nop
f012ee6a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee6d:	8d 50 01             	lea    0x1(%eax),%edx
f012ee70:	89 55 08             	mov    %edx,0x8(%ebp)
f012ee73:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ee76:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ee79:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012ee7c:	8a 12                	mov    (%edx),%dl
f012ee7e:	88 10                	mov    %dl,(%eax)
f012ee80:	8a 00                	mov    (%eax),%al
f012ee82:	84 c0                	test   %al,%al
f012ee84:	75 e4                	jne    f012ee6a <strcpy+0xd>
		/* do nothing */;
	return ret;
f012ee86:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee89:	c9                   	leave  
f012ee8a:	c3                   	ret    

f012ee8b <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012ee8b:	55                   	push   %ebp
f012ee8c:	89 e5                	mov    %esp,%ebp
f012ee8e:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012ee91:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee94:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012ee97:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee9e:	eb 1f                	jmp    f012eebf <strncpy+0x34>
		*dst++ = *src;
f012eea0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eea3:	8d 50 01             	lea    0x1(%eax),%edx
f012eea6:	89 55 08             	mov    %edx,0x8(%ebp)
f012eea9:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eeac:	8a 12                	mov    (%edx),%dl
f012eeae:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012eeb0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eeb3:	8a 00                	mov    (%eax),%al
f012eeb5:	84 c0                	test   %al,%al
f012eeb7:	74 03                	je     f012eebc <strncpy+0x31>
			src++;
f012eeb9:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012eebc:	ff 45 fc             	incl   -0x4(%ebp)
f012eebf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eec2:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eec5:	72 d9                	jb     f012eea0 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012eec7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012eeca:	c9                   	leave  
f012eecb:	c3                   	ret    

f012eecc <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012eecc:	55                   	push   %ebp
f012eecd:	89 e5                	mov    %esp,%ebp
f012eecf:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012eed2:	8b 45 08             	mov    0x8(%ebp),%eax
f012eed5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012eed8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eedc:	74 30                	je     f012ef0e <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012eede:	eb 16                	jmp    f012eef6 <strlcpy+0x2a>
			*dst++ = *src++;
f012eee0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eee3:	8d 50 01             	lea    0x1(%eax),%edx
f012eee6:	89 55 08             	mov    %edx,0x8(%ebp)
f012eee9:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eeec:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eeef:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eef2:	8a 12                	mov    (%edx),%dl
f012eef4:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012eef6:	ff 4d 10             	decl   0x10(%ebp)
f012eef9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012eefd:	74 09                	je     f012ef08 <strlcpy+0x3c>
f012eeff:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef02:	8a 00                	mov    (%eax),%al
f012ef04:	84 c0                	test   %al,%al
f012ef06:	75 d8                	jne    f012eee0 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012ef08:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef0b:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012ef0e:	8b 55 08             	mov    0x8(%ebp),%edx
f012ef11:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ef14:	29 c2                	sub    %eax,%edx
f012ef16:	89 d0                	mov    %edx,%eax
}
f012ef18:	c9                   	leave  
f012ef19:	c3                   	ret    

f012ef1a <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012ef1a:	55                   	push   %ebp
f012ef1b:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012ef1d:	eb 06                	jmp    f012ef25 <strcmp+0xb>
		p++, q++;
f012ef1f:	ff 45 08             	incl   0x8(%ebp)
f012ef22:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012ef25:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef28:	8a 00                	mov    (%eax),%al
f012ef2a:	84 c0                	test   %al,%al
f012ef2c:	74 0e                	je     f012ef3c <strcmp+0x22>
f012ef2e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef31:	8a 10                	mov    (%eax),%dl
f012ef33:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef36:	8a 00                	mov    (%eax),%al
f012ef38:	38 c2                	cmp    %al,%dl
f012ef3a:	74 e3                	je     f012ef1f <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012ef3c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef3f:	8a 00                	mov    (%eax),%al
f012ef41:	0f b6 d0             	movzbl %al,%edx
f012ef44:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef47:	8a 00                	mov    (%eax),%al
f012ef49:	0f b6 c0             	movzbl %al,%eax
f012ef4c:	29 c2                	sub    %eax,%edx
f012ef4e:	89 d0                	mov    %edx,%eax
}
f012ef50:	5d                   	pop    %ebp
f012ef51:	c3                   	ret    

f012ef52 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012ef52:	55                   	push   %ebp
f012ef53:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012ef55:	eb 09                	jmp    f012ef60 <strncmp+0xe>
		n--, p++, q++;
f012ef57:	ff 4d 10             	decl   0x10(%ebp)
f012ef5a:	ff 45 08             	incl   0x8(%ebp)
f012ef5d:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012ef60:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef64:	74 17                	je     f012ef7d <strncmp+0x2b>
f012ef66:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef69:	8a 00                	mov    (%eax),%al
f012ef6b:	84 c0                	test   %al,%al
f012ef6d:	74 0e                	je     f012ef7d <strncmp+0x2b>
f012ef6f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef72:	8a 10                	mov    (%eax),%dl
f012ef74:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef77:	8a 00                	mov    (%eax),%al
f012ef79:	38 c2                	cmp    %al,%dl
f012ef7b:	74 da                	je     f012ef57 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012ef7d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef81:	75 07                	jne    f012ef8a <strncmp+0x38>
		return 0;
f012ef83:	b8 00 00 00 00       	mov    $0x0,%eax
f012ef88:	eb 14                	jmp    f012ef9e <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012ef8a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef8d:	8a 00                	mov    (%eax),%al
f012ef8f:	0f b6 d0             	movzbl %al,%edx
f012ef92:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef95:	8a 00                	mov    (%eax),%al
f012ef97:	0f b6 c0             	movzbl %al,%eax
f012ef9a:	29 c2                	sub    %eax,%edx
f012ef9c:	89 d0                	mov    %edx,%eax
}
f012ef9e:	5d                   	pop    %ebp
f012ef9f:	c3                   	ret    

f012efa0 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012efa0:	55                   	push   %ebp
f012efa1:	89 e5                	mov    %esp,%ebp
f012efa3:	83 ec 04             	sub    $0x4,%esp
f012efa6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efa9:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012efac:	eb 12                	jmp    f012efc0 <strchr+0x20>
		if (*s == c)
f012efae:	8b 45 08             	mov    0x8(%ebp),%eax
f012efb1:	8a 00                	mov    (%eax),%al
f012efb3:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012efb6:	75 05                	jne    f012efbd <strchr+0x1d>
			return (char *) s;
f012efb8:	8b 45 08             	mov    0x8(%ebp),%eax
f012efbb:	eb 11                	jmp    f012efce <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012efbd:	ff 45 08             	incl   0x8(%ebp)
f012efc0:	8b 45 08             	mov    0x8(%ebp),%eax
f012efc3:	8a 00                	mov    (%eax),%al
f012efc5:	84 c0                	test   %al,%al
f012efc7:	75 e5                	jne    f012efae <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012efc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012efce:	c9                   	leave  
f012efcf:	c3                   	ret    

f012efd0 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012efd0:	55                   	push   %ebp
f012efd1:	89 e5                	mov    %esp,%ebp
f012efd3:	83 ec 04             	sub    $0x4,%esp
f012efd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efd9:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012efdc:	eb 0d                	jmp    f012efeb <strfind+0x1b>
		if (*s == c)
f012efde:	8b 45 08             	mov    0x8(%ebp),%eax
f012efe1:	8a 00                	mov    (%eax),%al
f012efe3:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012efe6:	74 0e                	je     f012eff6 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012efe8:	ff 45 08             	incl   0x8(%ebp)
f012efeb:	8b 45 08             	mov    0x8(%ebp),%eax
f012efee:	8a 00                	mov    (%eax),%al
f012eff0:	84 c0                	test   %al,%al
f012eff2:	75 ea                	jne    f012efde <strfind+0xe>
f012eff4:	eb 01                	jmp    f012eff7 <strfind+0x27>
		if (*s == c)
			break;
f012eff6:	90                   	nop
	return (char *) s;
f012eff7:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012effa:	c9                   	leave  
f012effb:	c3                   	ret    

f012effc <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012effc:	55                   	push   %ebp
f012effd:	89 e5                	mov    %esp,%ebp
f012efff:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012f002:	8b 45 08             	mov    0x8(%ebp),%eax
f012f005:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012f008:	8b 45 10             	mov    0x10(%ebp),%eax
f012f00b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012f00e:	eb 0e                	jmp    f012f01e <memset+0x22>
		*p++ = c;
f012f010:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f013:	8d 50 01             	lea    0x1(%eax),%edx
f012f016:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f019:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f01c:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012f01e:	ff 4d f8             	decl   -0x8(%ebp)
f012f021:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012f025:	79 e9                	jns    f012f010 <memset+0x14>
		*p++ = c;

	return v;
f012f027:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f02a:	c9                   	leave  
f012f02b:	c3                   	ret    

f012f02c <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012f02c:	55                   	push   %ebp
f012f02d:	89 e5                	mov    %esp,%ebp
f012f02f:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f032:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f035:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f038:	8b 45 08             	mov    0x8(%ebp),%eax
f012f03b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012f03e:	eb 16                	jmp    f012f056 <memcpy+0x2a>
		*d++ = *s++;
f012f040:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f043:	8d 50 01             	lea    0x1(%eax),%edx
f012f046:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f049:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f04c:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f04f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f052:	8a 12                	mov    (%edx),%dl
f012f054:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012f056:	8b 45 10             	mov    0x10(%ebp),%eax
f012f059:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f05c:	89 55 10             	mov    %edx,0x10(%ebp)
f012f05f:	85 c0                	test   %eax,%eax
f012f061:	75 dd                	jne    f012f040 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f063:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f066:	c9                   	leave  
f012f067:	c3                   	ret    

f012f068 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f068:	55                   	push   %ebp
f012f069:	89 e5                	mov    %esp,%ebp
f012f06b:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f06e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f071:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f074:	8b 45 08             	mov    0x8(%ebp),%eax
f012f077:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f07a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f07d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f080:	73 50                	jae    f012f0d2 <memmove+0x6a>
f012f082:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f085:	8b 45 10             	mov    0x10(%ebp),%eax
f012f088:	01 d0                	add    %edx,%eax
f012f08a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f08d:	76 43                	jbe    f012f0d2 <memmove+0x6a>
		s += n;
f012f08f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f092:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f095:	8b 45 10             	mov    0x10(%ebp),%eax
f012f098:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f09b:	eb 10                	jmp    f012f0ad <memmove+0x45>
			*--d = *--s;
f012f09d:	ff 4d f8             	decl   -0x8(%ebp)
f012f0a0:	ff 4d fc             	decl   -0x4(%ebp)
f012f0a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0a6:	8a 10                	mov    (%eax),%dl
f012f0a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0ab:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f0ad:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0b0:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f0b3:	89 55 10             	mov    %edx,0x10(%ebp)
f012f0b6:	85 c0                	test   %eax,%eax
f012f0b8:	75 e3                	jne    f012f09d <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f0ba:	eb 23                	jmp    f012f0df <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f0bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0bf:	8d 50 01             	lea    0x1(%eax),%edx
f012f0c2:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f0c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f0c8:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f0cb:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f0ce:	8a 12                	mov    (%edx),%dl
f012f0d0:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f0d2:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0d5:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f0d8:	89 55 10             	mov    %edx,0x10(%ebp)
f012f0db:	85 c0                	test   %eax,%eax
f012f0dd:	75 dd                	jne    f012f0bc <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f0df:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f0e2:	c9                   	leave  
f012f0e3:	c3                   	ret    

f012f0e4 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f0e4:	55                   	push   %ebp
f012f0e5:	89 e5                	mov    %esp,%ebp
f012f0e7:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f0ea:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f0f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0f3:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f0f6:	eb 2a                	jmp    f012f122 <memcmp+0x3e>
		if (*s1 != *s2)
f012f0f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0fb:	8a 10                	mov    (%eax),%dl
f012f0fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f100:	8a 00                	mov    (%eax),%al
f012f102:	38 c2                	cmp    %al,%dl
f012f104:	74 16                	je     f012f11c <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f106:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f109:	8a 00                	mov    (%eax),%al
f012f10b:	0f b6 d0             	movzbl %al,%edx
f012f10e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f111:	8a 00                	mov    (%eax),%al
f012f113:	0f b6 c0             	movzbl %al,%eax
f012f116:	29 c2                	sub    %eax,%edx
f012f118:	89 d0                	mov    %edx,%eax
f012f11a:	eb 18                	jmp    f012f134 <memcmp+0x50>
		s1++, s2++;
f012f11c:	ff 45 fc             	incl   -0x4(%ebp)
f012f11f:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f122:	8b 45 10             	mov    0x10(%ebp),%eax
f012f125:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f128:	89 55 10             	mov    %edx,0x10(%ebp)
f012f12b:	85 c0                	test   %eax,%eax
f012f12d:	75 c9                	jne    f012f0f8 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f12f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f134:	c9                   	leave  
f012f135:	c3                   	ret    

f012f136 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f136:	55                   	push   %ebp
f012f137:	89 e5                	mov    %esp,%ebp
f012f139:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f13c:	8b 55 08             	mov    0x8(%ebp),%edx
f012f13f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f142:	01 d0                	add    %edx,%eax
f012f144:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f147:	eb 15                	jmp    f012f15e <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f149:	8b 45 08             	mov    0x8(%ebp),%eax
f012f14c:	8a 00                	mov    (%eax),%al
f012f14e:	0f b6 d0             	movzbl %al,%edx
f012f151:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f154:	0f b6 c0             	movzbl %al,%eax
f012f157:	39 c2                	cmp    %eax,%edx
f012f159:	74 0d                	je     f012f168 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f15b:	ff 45 08             	incl   0x8(%ebp)
f012f15e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f161:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f164:	72 e3                	jb     f012f149 <memfind+0x13>
f012f166:	eb 01                	jmp    f012f169 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f168:	90                   	nop
	return (void *) s;
f012f169:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f16c:	c9                   	leave  
f012f16d:	c3                   	ret    

f012f16e <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f16e:	55                   	push   %ebp
f012f16f:	89 e5                	mov    %esp,%ebp
f012f171:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f174:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f17b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f182:	eb 03                	jmp    f012f187 <strtol+0x19>
		s++;
f012f184:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f187:	8b 45 08             	mov    0x8(%ebp),%eax
f012f18a:	8a 00                	mov    (%eax),%al
f012f18c:	3c 20                	cmp    $0x20,%al
f012f18e:	74 f4                	je     f012f184 <strtol+0x16>
f012f190:	8b 45 08             	mov    0x8(%ebp),%eax
f012f193:	8a 00                	mov    (%eax),%al
f012f195:	3c 09                	cmp    $0x9,%al
f012f197:	74 eb                	je     f012f184 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f199:	8b 45 08             	mov    0x8(%ebp),%eax
f012f19c:	8a 00                	mov    (%eax),%al
f012f19e:	3c 2b                	cmp    $0x2b,%al
f012f1a0:	75 05                	jne    f012f1a7 <strtol+0x39>
		s++;
f012f1a2:	ff 45 08             	incl   0x8(%ebp)
f012f1a5:	eb 13                	jmp    f012f1ba <strtol+0x4c>
	else if (*s == '-')
f012f1a7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1aa:	8a 00                	mov    (%eax),%al
f012f1ac:	3c 2d                	cmp    $0x2d,%al
f012f1ae:	75 0a                	jne    f012f1ba <strtol+0x4c>
		s++, neg = 1;
f012f1b0:	ff 45 08             	incl   0x8(%ebp)
f012f1b3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f1ba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1be:	74 06                	je     f012f1c6 <strtol+0x58>
f012f1c0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f1c4:	75 20                	jne    f012f1e6 <strtol+0x78>
f012f1c6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1c9:	8a 00                	mov    (%eax),%al
f012f1cb:	3c 30                	cmp    $0x30,%al
f012f1cd:	75 17                	jne    f012f1e6 <strtol+0x78>
f012f1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1d2:	40                   	inc    %eax
f012f1d3:	8a 00                	mov    (%eax),%al
f012f1d5:	3c 78                	cmp    $0x78,%al
f012f1d7:	75 0d                	jne    f012f1e6 <strtol+0x78>
		s += 2, base = 16;
f012f1d9:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f1dd:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f1e4:	eb 28                	jmp    f012f20e <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f1e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1ea:	75 15                	jne    f012f201 <strtol+0x93>
f012f1ec:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1ef:	8a 00                	mov    (%eax),%al
f012f1f1:	3c 30                	cmp    $0x30,%al
f012f1f3:	75 0c                	jne    f012f201 <strtol+0x93>
		s++, base = 8;
f012f1f5:	ff 45 08             	incl   0x8(%ebp)
f012f1f8:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f1ff:	eb 0d                	jmp    f012f20e <strtol+0xa0>
	else if (base == 0)
f012f201:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f205:	75 07                	jne    f012f20e <strtol+0xa0>
		base = 10;
f012f207:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f20e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f211:	8a 00                	mov    (%eax),%al
f012f213:	3c 2f                	cmp    $0x2f,%al
f012f215:	7e 19                	jle    f012f230 <strtol+0xc2>
f012f217:	8b 45 08             	mov    0x8(%ebp),%eax
f012f21a:	8a 00                	mov    (%eax),%al
f012f21c:	3c 39                	cmp    $0x39,%al
f012f21e:	7f 10                	jg     f012f230 <strtol+0xc2>
			dig = *s - '0';
f012f220:	8b 45 08             	mov    0x8(%ebp),%eax
f012f223:	8a 00                	mov    (%eax),%al
f012f225:	0f be c0             	movsbl %al,%eax
f012f228:	83 e8 30             	sub    $0x30,%eax
f012f22b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f22e:	eb 42                	jmp    f012f272 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f230:	8b 45 08             	mov    0x8(%ebp),%eax
f012f233:	8a 00                	mov    (%eax),%al
f012f235:	3c 60                	cmp    $0x60,%al
f012f237:	7e 19                	jle    f012f252 <strtol+0xe4>
f012f239:	8b 45 08             	mov    0x8(%ebp),%eax
f012f23c:	8a 00                	mov    (%eax),%al
f012f23e:	3c 7a                	cmp    $0x7a,%al
f012f240:	7f 10                	jg     f012f252 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f242:	8b 45 08             	mov    0x8(%ebp),%eax
f012f245:	8a 00                	mov    (%eax),%al
f012f247:	0f be c0             	movsbl %al,%eax
f012f24a:	83 e8 57             	sub    $0x57,%eax
f012f24d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f250:	eb 20                	jmp    f012f272 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f252:	8b 45 08             	mov    0x8(%ebp),%eax
f012f255:	8a 00                	mov    (%eax),%al
f012f257:	3c 40                	cmp    $0x40,%al
f012f259:	7e 39                	jle    f012f294 <strtol+0x126>
f012f25b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f25e:	8a 00                	mov    (%eax),%al
f012f260:	3c 5a                	cmp    $0x5a,%al
f012f262:	7f 30                	jg     f012f294 <strtol+0x126>
			dig = *s - 'A' + 10;
f012f264:	8b 45 08             	mov    0x8(%ebp),%eax
f012f267:	8a 00                	mov    (%eax),%al
f012f269:	0f be c0             	movsbl %al,%eax
f012f26c:	83 e8 37             	sub    $0x37,%eax
f012f26f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f272:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f275:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f278:	7d 19                	jge    f012f293 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f27a:	ff 45 08             	incl   0x8(%ebp)
f012f27d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f280:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f284:	89 c2                	mov    %eax,%edx
f012f286:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f289:	01 d0                	add    %edx,%eax
f012f28b:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f28e:	e9 7b ff ff ff       	jmp    f012f20e <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f293:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f294:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f298:	74 08                	je     f012f2a2 <strtol+0x134>
		*endptr = (char *) s;
f012f29a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f29d:	8b 55 08             	mov    0x8(%ebp),%edx
f012f2a0:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f2a2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f2a6:	74 07                	je     f012f2af <strtol+0x141>
f012f2a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2ab:	f7 d8                	neg    %eax
f012f2ad:	eb 03                	jmp    f012f2b2 <strtol+0x144>
f012f2af:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f2b2:	c9                   	leave  
f012f2b3:	c3                   	ret    

f012f2b4 <ltostr>:

void
ltostr(long value, char *str)
{
f012f2b4:	55                   	push   %ebp
f012f2b5:	89 e5                	mov    %esp,%ebp
f012f2b7:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f2ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f2c1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f2c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f2cc:	79 13                	jns    f012f2e1 <ltostr+0x2d>
	{
		neg = 1;
f012f2ce:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2d8:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f2db:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f2de:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f2e1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f2e4:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f2e9:	99                   	cltd   
f012f2ea:	f7 f9                	idiv   %ecx
f012f2ec:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f2ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2f2:	8d 50 01             	lea    0x1(%eax),%edx
f012f2f5:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f2f8:	89 c2                	mov    %eax,%edx
f012f2fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2fd:	01 d0                	add    %edx,%eax
f012f2ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f302:	83 c2 30             	add    $0x30,%edx
f012f305:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f307:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f30a:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f30f:	f7 e9                	imul   %ecx
f012f311:	c1 fa 02             	sar    $0x2,%edx
f012f314:	89 c8                	mov    %ecx,%eax
f012f316:	c1 f8 1f             	sar    $0x1f,%eax
f012f319:	29 c2                	sub    %eax,%edx
f012f31b:	89 d0                	mov    %edx,%eax
f012f31d:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f320:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f323:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f328:	f7 e9                	imul   %ecx
f012f32a:	c1 fa 02             	sar    $0x2,%edx
f012f32d:	89 c8                	mov    %ecx,%eax
f012f32f:	c1 f8 1f             	sar    $0x1f,%eax
f012f332:	29 c2                	sub    %eax,%edx
f012f334:	89 d0                	mov    %edx,%eax
f012f336:	c1 e0 02             	shl    $0x2,%eax
f012f339:	01 d0                	add    %edx,%eax
f012f33b:	01 c0                	add    %eax,%eax
f012f33d:	29 c1                	sub    %eax,%ecx
f012f33f:	89 ca                	mov    %ecx,%edx
f012f341:	85 d2                	test   %edx,%edx
f012f343:	75 9c                	jne    f012f2e1 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f345:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f34c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f34f:	48                   	dec    %eax
f012f350:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f353:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f357:	74 3d                	je     f012f396 <ltostr+0xe2>
		start = 1 ;
f012f359:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f360:	eb 34                	jmp    f012f396 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f362:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f365:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f368:	01 d0                	add    %edx,%eax
f012f36a:	8a 00                	mov    (%eax),%al
f012f36c:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f36f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f372:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f375:	01 c2                	add    %eax,%edx
f012f377:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f37a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f37d:	01 c8                	add    %ecx,%eax
f012f37f:	8a 00                	mov    (%eax),%al
f012f381:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f383:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f386:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f389:	01 c2                	add    %eax,%edx
f012f38b:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f38e:	88 02                	mov    %al,(%edx)
		start++ ;
f012f390:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f393:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f399:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f39c:	7c c4                	jl     f012f362 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f39e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f3a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3a4:	01 d0                	add    %edx,%eax
f012f3a6:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f3a9:	90                   	nop
f012f3aa:	c9                   	leave  
f012f3ab:	c3                   	ret    

f012f3ac <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f3ac:	55                   	push   %ebp
f012f3ad:	89 e5                	mov    %esp,%ebp
f012f3af:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f3b2:	ff 75 08             	pushl  0x8(%ebp)
f012f3b5:	e8 54 fa ff ff       	call   f012ee0e <strlen>
f012f3ba:	83 c4 04             	add    $0x4,%esp
f012f3bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f3c0:	ff 75 0c             	pushl  0xc(%ebp)
f012f3c3:	e8 46 fa ff ff       	call   f012ee0e <strlen>
f012f3c8:	83 c4 04             	add    $0x4,%esp
f012f3cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f3ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f3d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f3dc:	eb 17                	jmp    f012f3f5 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f3de:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f3e1:	8b 45 10             	mov    0x10(%ebp),%eax
f012f3e4:	01 c2                	add    %eax,%edx
f012f3e6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f3e9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f3ec:	01 c8                	add    %ecx,%eax
f012f3ee:	8a 00                	mov    (%eax),%al
f012f3f0:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f3f2:	ff 45 fc             	incl   -0x4(%ebp)
f012f3f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f3f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f3fb:	7c e1                	jl     f012f3de <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f3fd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f404:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f40b:	eb 1f                	jmp    f012f42c <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f40d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f410:	8d 50 01             	lea    0x1(%eax),%edx
f012f413:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f416:	89 c2                	mov    %eax,%edx
f012f418:	8b 45 10             	mov    0x10(%ebp),%eax
f012f41b:	01 c2                	add    %eax,%edx
f012f41d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f420:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f423:	01 c8                	add    %ecx,%eax
f012f425:	8a 00                	mov    (%eax),%al
f012f427:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f429:	ff 45 f8             	incl   -0x8(%ebp)
f012f42c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f42f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f432:	7c d9                	jl     f012f40d <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f434:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f437:	8b 45 10             	mov    0x10(%ebp),%eax
f012f43a:	01 d0                	add    %edx,%eax
f012f43c:	c6 00 00             	movb   $0x0,(%eax)
}
f012f43f:	90                   	nop
f012f440:	c9                   	leave  
f012f441:	c3                   	ret    

f012f442 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f442:	55                   	push   %ebp
f012f443:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f445:	8b 45 14             	mov    0x14(%ebp),%eax
f012f448:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f44e:	8b 45 14             	mov    0x14(%ebp),%eax
f012f451:	8b 00                	mov    (%eax),%eax
f012f453:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f45a:	8b 45 10             	mov    0x10(%ebp),%eax
f012f45d:	01 d0                	add    %edx,%eax
f012f45f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f465:	eb 0c                	jmp    f012f473 <strsplit+0x31>
			*string++ = 0;
f012f467:	8b 45 08             	mov    0x8(%ebp),%eax
f012f46a:	8d 50 01             	lea    0x1(%eax),%edx
f012f46d:	89 55 08             	mov    %edx,0x8(%ebp)
f012f470:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f473:	8b 45 08             	mov    0x8(%ebp),%eax
f012f476:	8a 00                	mov    (%eax),%al
f012f478:	84 c0                	test   %al,%al
f012f47a:	74 18                	je     f012f494 <strsplit+0x52>
f012f47c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f47f:	8a 00                	mov    (%eax),%al
f012f481:	0f be c0             	movsbl %al,%eax
f012f484:	50                   	push   %eax
f012f485:	ff 75 0c             	pushl  0xc(%ebp)
f012f488:	e8 13 fb ff ff       	call   f012efa0 <strchr>
f012f48d:	83 c4 08             	add    $0x8,%esp
f012f490:	85 c0                	test   %eax,%eax
f012f492:	75 d3                	jne    f012f467 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f494:	8b 45 08             	mov    0x8(%ebp),%eax
f012f497:	8a 00                	mov    (%eax),%al
f012f499:	84 c0                	test   %al,%al
f012f49b:	74 5a                	je     f012f4f7 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f49d:	8b 45 14             	mov    0x14(%ebp),%eax
f012f4a0:	8b 00                	mov    (%eax),%eax
f012f4a2:	83 f8 0f             	cmp    $0xf,%eax
f012f4a5:	75 07                	jne    f012f4ae <strsplit+0x6c>
		{
			return 0;
f012f4a7:	b8 00 00 00 00       	mov    $0x0,%eax
f012f4ac:	eb 66                	jmp    f012f514 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f4ae:	8b 45 14             	mov    0x14(%ebp),%eax
f012f4b1:	8b 00                	mov    (%eax),%eax
f012f4b3:	8d 48 01             	lea    0x1(%eax),%ecx
f012f4b6:	8b 55 14             	mov    0x14(%ebp),%edx
f012f4b9:	89 0a                	mov    %ecx,(%edx)
f012f4bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f4c2:	8b 45 10             	mov    0x10(%ebp),%eax
f012f4c5:	01 c2                	add    %eax,%edx
f012f4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4ca:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f4cc:	eb 03                	jmp    f012f4d1 <strsplit+0x8f>
			string++;
f012f4ce:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f4d1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4d4:	8a 00                	mov    (%eax),%al
f012f4d6:	84 c0                	test   %al,%al
f012f4d8:	74 8b                	je     f012f465 <strsplit+0x23>
f012f4da:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4dd:	8a 00                	mov    (%eax),%al
f012f4df:	0f be c0             	movsbl %al,%eax
f012f4e2:	50                   	push   %eax
f012f4e3:	ff 75 0c             	pushl  0xc(%ebp)
f012f4e6:	e8 b5 fa ff ff       	call   f012efa0 <strchr>
f012f4eb:	83 c4 08             	add    $0x8,%esp
f012f4ee:	85 c0                	test   %eax,%eax
f012f4f0:	74 dc                	je     f012f4ce <strsplit+0x8c>
			string++;
	}
f012f4f2:	e9 6e ff ff ff       	jmp    f012f465 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f4f7:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f4f8:	8b 45 14             	mov    0x14(%ebp),%eax
f012f4fb:	8b 00                	mov    (%eax),%eax
f012f4fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f504:	8b 45 10             	mov    0x10(%ebp),%eax
f012f507:	01 d0                	add    %edx,%eax
f012f509:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f50f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f514:	c9                   	leave  
f012f515:	c3                   	ret    

f012f516 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f516:	55                   	push   %ebp
f012f517:	89 e5                	mov    %esp,%ebp
f012f519:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
f012f51c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f520:	74 06                	je     f012f528 <str2lower+0x12>
f012f522:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f526:	75 07                	jne    f012f52f <str2lower+0x19>
		return NULL;
f012f528:	b8 00 00 00 00       	mov    $0x0,%eax
f012f52d:	eb 4d                	jmp    f012f57c <str2lower+0x66>
	}
	char *ref=dst;
f012f52f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f532:	89 45 fc             	mov    %eax,-0x4(%ebp)
		while(*src!='\0'){
f012f535:	eb 33                	jmp    f012f56a <str2lower+0x54>
			if(*src>=65&&*src<=90){
f012f537:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f53a:	8a 00                	mov    (%eax),%al
f012f53c:	3c 40                	cmp    $0x40,%al
f012f53e:	7e 1a                	jle    f012f55a <str2lower+0x44>
f012f540:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f543:	8a 00                	mov    (%eax),%al
f012f545:	3c 5a                	cmp    $0x5a,%al
f012f547:	7f 11                	jg     f012f55a <str2lower+0x44>
				*dst=*src+32;
f012f549:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f54c:	8a 00                	mov    (%eax),%al
f012f54e:	83 c0 20             	add    $0x20,%eax
f012f551:	88 c2                	mov    %al,%dl
f012f553:	8b 45 08             	mov    0x8(%ebp),%eax
f012f556:	88 10                	mov    %dl,(%eax)
f012f558:	eb 0a                	jmp    f012f564 <str2lower+0x4e>
			}
			else{
				*dst=*src;
f012f55a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f55d:	8a 10                	mov    (%eax),%dl
f012f55f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f562:	88 10                	mov    %dl,(%eax)
			}
			src++;
f012f564:	ff 45 0c             	incl   0xc(%ebp)
			dst++;
f012f567:	ff 45 08             	incl   0x8(%ebp)
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
		return NULL;
	}
	char *ref=dst;
		while(*src!='\0'){
f012f56a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f56d:	8a 00                	mov    (%eax),%al
f012f56f:	84 c0                	test   %al,%al
f012f571:	75 c4                	jne    f012f537 <str2lower+0x21>
				*dst=*src;
			}
			src++;
			dst++;
		}
		*dst='\0';
f012f573:	8b 45 08             	mov    0x8(%ebp),%eax
f012f576:	c6 00 00             	movb   $0x0,(%eax)
		return ref;
f012f579:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f57c:	c9                   	leave  
f012f57d:	c3                   	ret    

f012f57e <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f57e:	55                   	push   %ebp
f012f57f:	89 e5                	mov    %esp,%ebp
f012f581:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f584:	90                   	nop
f012f585:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f58c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f58f:	89 c2                	mov    %eax,%edx
f012f591:	ec                   	in     (%dx),%al
f012f592:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f595:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f598:	0f b6 c0             	movzbl %al,%eax
f012f59b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f59e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f5a1:	25 c0 00 00 00       	and    $0xc0,%eax
f012f5a6:	83 f8 40             	cmp    $0x40,%eax
f012f5a9:	75 da                	jne    f012f585 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f5ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f5af:	74 11                	je     f012f5c2 <ide_wait_ready+0x44>
f012f5b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f5b4:	83 e0 21             	and    $0x21,%eax
f012f5b7:	85 c0                	test   %eax,%eax
f012f5b9:	74 07                	je     f012f5c2 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f5bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f5c0:	eb 05                	jmp    f012f5c7 <ide_wait_ready+0x49>
	}
	return 0;
f012f5c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f5c7:	c9                   	leave  
f012f5c8:	c3                   	ret    

f012f5c9 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f5c9:	55                   	push   %ebp
f012f5ca:	89 e5                	mov    %esp,%ebp
f012f5cc:	57                   	push   %edi
f012f5cd:	53                   	push   %ebx
f012f5ce:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f5d1:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f5d8:	76 16                	jbe    f012f5f0 <ide_read+0x27>
f012f5da:	68 c3 b2 13 f0       	push   $0xf013b2c3
f012f5df:	68 d0 b2 13 f0       	push   $0xf013b2d0
f012f5e4:	6a 25                	push   $0x25
f012f5e6:	68 e5 b2 13 f0       	push   $0xf013b2e5
f012f5eb:	e8 c0 0b fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f5f0:	83 ec 0c             	sub    $0xc,%esp
f012f5f3:	6a 00                	push   $0x0
f012f5f5:	e8 84 ff ff ff       	call   f012f57e <ide_wait_ready>
f012f5fa:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f5fd:	8b 45 10             	mov    0x10(%ebp),%eax
f012f600:	0f b6 c0             	movzbl %al,%eax
f012f603:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f60a:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f60d:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f610:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f613:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f614:	8b 45 08             	mov    0x8(%ebp),%eax
f012f617:	0f b6 c0             	movzbl %al,%eax
f012f61a:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f621:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f624:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f627:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f62a:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f62b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f62e:	c1 e8 08             	shr    $0x8,%eax
f012f631:	0f b6 c0             	movzbl %al,%eax
f012f634:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f63b:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f63e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f641:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f644:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f645:	8b 45 08             	mov    0x8(%ebp),%eax
f012f648:	c1 e8 10             	shr    $0x10,%eax
f012f64b:	0f b6 c0             	movzbl %al,%eax
f012f64e:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f655:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f658:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f65b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f65e:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f65f:	a1 0c 3b 25 f0       	mov    0xf0253b0c,%eax
f012f664:	83 e0 01             	and    $0x1,%eax
f012f667:	c1 e0 04             	shl    $0x4,%eax
f012f66a:	88 c2                	mov    %al,%dl
f012f66c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f66f:	c1 e8 18             	shr    $0x18,%eax
f012f672:	83 e0 0f             	and    $0xf,%eax
f012f675:	09 d0                	or     %edx,%eax
f012f677:	83 c8 e0             	or     $0xffffffe0,%eax
f012f67a:	0f b6 c0             	movzbl %al,%eax
f012f67d:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f684:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f687:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f68a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f68d:	ee                   	out    %al,(%dx)
f012f68e:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f695:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f699:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f69c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f69f:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f6a0:	eb 55                	jmp    f012f6f7 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f6a2:	83 ec 0c             	sub    $0xc,%esp
f012f6a5:	6a 01                	push   $0x1
f012f6a7:	e8 d2 fe ff ff       	call   f012f57e <ide_wait_ready>
f012f6ac:	83 c4 10             	add    $0x10,%esp
f012f6af:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f6b2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f6b6:	79 05                	jns    f012f6bd <ide_read+0xf4>
			return r;
f012f6b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f6bb:	eb 45                	jmp    f012f702 <ide_read+0x139>
f012f6bd:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f6c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f6c7:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f6ca:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f6d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f6d4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f6d7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f6da:	89 cb                	mov    %ecx,%ebx
f012f6dc:	89 df                	mov    %ebx,%edi
f012f6de:	89 c1                	mov    %eax,%ecx
f012f6e0:	fc                   	cld    
f012f6e1:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f6e3:	89 c8                	mov    %ecx,%eax
f012f6e5:	89 fb                	mov    %edi,%ebx
f012f6e7:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f6ea:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f6ed:	ff 4d 10             	decl   0x10(%ebp)
f012f6f0:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f6f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f6fb:	75 a5                	jne    f012f6a2 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f6fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f702:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f705:	5b                   	pop    %ebx
f012f706:	5f                   	pop    %edi
f012f707:	5d                   	pop    %ebp
f012f708:	c3                   	ret    

f012f709 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f709:	55                   	push   %ebp
f012f70a:	89 e5                	mov    %esp,%ebp
f012f70c:	56                   	push   %esi
f012f70d:	53                   	push   %ebx
f012f70e:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f711:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f718:	76 16                	jbe    f012f730 <ide_write+0x27>
f012f71a:	68 c3 b2 13 f0       	push   $0xf013b2c3
f012f71f:	68 d0 b2 13 f0       	push   $0xf013b2d0
f012f724:	6a 3f                	push   $0x3f
f012f726:	68 e5 b2 13 f0       	push   $0xf013b2e5
f012f72b:	e8 80 0a fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f730:	83 ec 0c             	sub    $0xc,%esp
f012f733:	6a 00                	push   $0x0
f012f735:	e8 44 fe ff ff       	call   f012f57e <ide_wait_ready>
f012f73a:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f73d:	8b 45 10             	mov    0x10(%ebp),%eax
f012f740:	0f b6 c0             	movzbl %al,%eax
f012f743:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f74a:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f74d:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f750:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f753:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f754:	8b 45 08             	mov    0x8(%ebp),%eax
f012f757:	0f b6 c0             	movzbl %al,%eax
f012f75a:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f761:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f764:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f767:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f76a:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f76b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f76e:	c1 e8 08             	shr    $0x8,%eax
f012f771:	0f b6 c0             	movzbl %al,%eax
f012f774:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f77b:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f77e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f781:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f784:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f785:	8b 45 08             	mov    0x8(%ebp),%eax
f012f788:	c1 e8 10             	shr    $0x10,%eax
f012f78b:	0f b6 c0             	movzbl %al,%eax
f012f78e:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f795:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f798:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f79b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f79e:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f79f:	a1 0c 3b 25 f0       	mov    0xf0253b0c,%eax
f012f7a4:	83 e0 01             	and    $0x1,%eax
f012f7a7:	c1 e0 04             	shl    $0x4,%eax
f012f7aa:	88 c2                	mov    %al,%dl
f012f7ac:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7af:	c1 e8 18             	shr    $0x18,%eax
f012f7b2:	83 e0 0f             	and    $0xf,%eax
f012f7b5:	09 d0                	or     %edx,%eax
f012f7b7:	83 c8 e0             	or     $0xffffffe0,%eax
f012f7ba:	0f b6 c0             	movzbl %al,%eax
f012f7bd:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f7c4:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f7c7:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f7ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f7cd:	ee                   	out    %al,(%dx)
f012f7ce:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f7d5:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f7d9:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f7dc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f7df:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f7e0:	eb 55                	jmp    f012f837 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f7e2:	83 ec 0c             	sub    $0xc,%esp
f012f7e5:	6a 01                	push   $0x1
f012f7e7:	e8 92 fd ff ff       	call   f012f57e <ide_wait_ready>
f012f7ec:	83 c4 10             	add    $0x10,%esp
f012f7ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f7f2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f7f6:	79 05                	jns    f012f7fd <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f7f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f7fb:	eb 45                	jmp    f012f842 <ide_write+0x139>
f012f7fd:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f804:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f807:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f80a:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012f811:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f814:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f817:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f81a:	89 cb                	mov    %ecx,%ebx
f012f81c:	89 de                	mov    %ebx,%esi
f012f81e:	89 c1                	mov    %eax,%ecx
f012f820:	fc                   	cld    
f012f821:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012f823:	89 c8                	mov    %ecx,%eax
f012f825:	89 f3                	mov    %esi,%ebx
f012f827:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f82a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f82d:	ff 4d 10             	decl   0x10(%ebp)
f012f830:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f837:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f83b:	75 a5                	jne    f012f7e2 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012f83d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f842:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f845:	5b                   	pop    %ebx
f012f846:	5e                   	pop    %esi
f012f847:	5d                   	pop    %ebp
f012f848:	c3                   	ret    

f012f849 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va)
{
f012f849:	55                   	push   %ebp
f012f84a:	89 e5                	mov    %esp,%ebp
f012f84c:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f84f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f852:	83 e8 10             	sub    $0x10,%eax
f012f855:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size ;
f012f858:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f85b:	8b 00                	mov    (%eax),%eax
}
f012f85d:	c9                   	leave  
f012f85e:	c3                   	ret    

f012f85f <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va)
{
f012f85f:	55                   	push   %ebp
f012f860:	89 e5                	mov    %esp,%ebp
f012f862:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;
f012f865:	8b 45 08             	mov    0x8(%ebp),%eax
f012f868:	83 e8 10             	sub    $0x10,%eax
f012f86b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free ;
f012f86e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f871:	8a 40 04             	mov    0x4(%eax),%al
}
f012f874:	c9                   	leave  
f012f875:	c3                   	ret    

f012f876 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012f876:	55                   	push   %ebp
f012f877:	89 e5                	mov    %esp,%ebp
f012f879:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012f87c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f012f883:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f886:	83 f8 02             	cmp    $0x2,%eax
f012f889:	74 2b                	je     f012f8b6 <alloc_block+0x40>
f012f88b:	83 f8 02             	cmp    $0x2,%eax
f012f88e:	7f 07                	jg     f012f897 <alloc_block+0x21>
f012f890:	83 f8 01             	cmp    $0x1,%eax
f012f893:	74 0e                	je     f012f8a3 <alloc_block+0x2d>
f012f895:	eb 58                	jmp    f012f8ef <alloc_block+0x79>
f012f897:	83 f8 03             	cmp    $0x3,%eax
f012f89a:	74 2d                	je     f012f8c9 <alloc_block+0x53>
f012f89c:	83 f8 04             	cmp    $0x4,%eax
f012f89f:	74 3b                	je     f012f8dc <alloc_block+0x66>
f012f8a1:	eb 4c                	jmp    f012f8ef <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012f8a3:	83 ec 0c             	sub    $0xc,%esp
f012f8a6:	ff 75 08             	pushl  0x8(%ebp)
f012f8a9:	e8 23 01 00 00       	call   f012f9d1 <alloc_block_FF>
f012f8ae:	83 c4 10             	add    $0x10,%esp
f012f8b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8b4:	eb 4a                	jmp    f012f900 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012f8b6:	83 ec 0c             	sub    $0xc,%esp
f012f8b9:	ff 75 08             	pushl  0x8(%ebp)
f012f8bc:	e8 1a 02 00 00       	call   f012fadb <alloc_block_NF>
f012f8c1:	83 c4 10             	add    $0x10,%esp
f012f8c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8c7:	eb 37                	jmp    f012f900 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012f8c9:	83 ec 0c             	sub    $0xc,%esp
f012f8cc:	ff 75 08             	pushl  0x8(%ebp)
f012f8cf:	e8 cd 01 00 00       	call   f012faa1 <alloc_block_BF>
f012f8d4:	83 c4 10             	add    $0x10,%esp
f012f8d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8da:	eb 24                	jmp    f012f900 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012f8dc:	83 ec 0c             	sub    $0xc,%esp
f012f8df:	ff 75 08             	pushl  0x8(%ebp)
f012f8e2:	e8 d7 01 00 00       	call   f012fabe <alloc_block_WF>
f012f8e7:	83 c4 10             	add    $0x10,%esp
f012f8ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8ed:	eb 11                	jmp    f012f900 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012f8ef:	83 ec 0c             	sub    $0xc,%esp
f012f8f2:	68 f0 b2 13 f0       	push   $0xf013b2f0
f012f8f7:	e8 35 15 fd ff       	call   f0100e31 <cprintf>
f012f8fc:	83 c4 10             	add    $0x10,%esp
		break;
f012f8ff:	90                   	nop
	}
	return va;
f012f900:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f903:	c9                   	leave  
f012f904:	c3                   	ret    

f012f905 <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f012f905:	55                   	push   %ebp
f012f906:	89 e5                	mov    %esp,%ebp
f012f908:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012f90b:	83 ec 0c             	sub    $0xc,%esp
f012f90e:	68 10 b3 13 f0       	push   $0xf013b310
f012f913:	e8 19 15 fd ff       	call   f0100e31 <cprintf>
f012f918:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f012f91b:	83 ec 0c             	sub    $0xc,%esp
f012f91e:	68 3b b3 13 f0       	push   $0xf013b33b
f012f923:	e8 09 15 fd ff       	call   f0100e31 <cprintf>
f012f928:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012f92b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f92e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f931:	eb 26                	jmp    f012f959 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
f012f933:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f936:	8a 40 04             	mov    0x4(%eax),%al
f012f939:	0f b6 d0             	movzbl %al,%edx
f012f93c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f93f:	8b 00                	mov    (%eax),%eax
f012f941:	83 ec 04             	sub    $0x4,%esp
f012f944:	52                   	push   %edx
f012f945:	50                   	push   %eax
f012f946:	68 53 b3 13 f0       	push   $0xf013b353
f012f94b:	e8 e1 14 fd ff       	call   f0100e31 <cprintf>
f012f950:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockMetaData* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012f953:	8b 45 10             	mov    0x10(%ebp),%eax
f012f956:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f959:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f95d:	74 08                	je     f012f967 <print_blocks_list+0x62>
f012f95f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f962:	8b 40 08             	mov    0x8(%eax),%eax
f012f965:	eb 05                	jmp    f012f96c <print_blocks_list+0x67>
f012f967:	b8 00 00 00 00       	mov    $0x0,%eax
f012f96c:	89 45 10             	mov    %eax,0x10(%ebp)
f012f96f:	8b 45 10             	mov    0x10(%ebp),%eax
f012f972:	85 c0                	test   %eax,%eax
f012f974:	75 bd                	jne    f012f933 <print_blocks_list+0x2e>
f012f976:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f97a:	75 b7                	jne    f012f933 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free) ;
	}
	cprintf("=========================================\n");
f012f97c:	83 ec 0c             	sub    $0xc,%esp
f012f97f:	68 10 b3 13 f0       	push   $0xf013b310
f012f984:	e8 a8 14 fd ff       	call   f0100e31 <cprintf>
f012f989:	83 c4 10             	add    $0x10,%esp

}
f012f98c:	90                   	nop
f012f98d:	c9                   	leave  
f012f98e:	c3                   	ret    

f012f98f <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart , uint32 initSizeOfAllocatedSpace)
{
f012f98f:	55                   	push   %ebp
f012f990:	89 e5                	mov    %esp,%ebp
f012f992:	83 ec 10             	sub    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012f995:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f999:	74 33                	je     f012f9ce <initialize_dynamic_allocator+0x3f>
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	//panic("initialize_dynamic_allocator is not implemented yet");
	struct BlockMetaData* firstMeta=(struct BlockMetaData*)daStart;;
f012f99b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f99e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	Heap_MetaBlock.lh_first = firstMeta;
f012f9a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9a4:	a3 4c e6 2d f0       	mov    %eax,0xf02de64c
	firstMeta->prev_next_info.le_next = NULL;
f012f9a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9ac:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	firstMeta->prev_next_info.le_prev = NULL;
f012f9b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9b6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	firstMeta->is_free = 1;
f012f9bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9c0:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	firstMeta->size = initSizeOfAllocatedSpace;
f012f9c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f9c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f9ca:	89 10                	mov    %edx,(%eax)
f012f9cc:	eb 01                	jmp    f012f9cf <initialize_dynamic_allocator+0x40>
void initialize_dynamic_allocator(uint32 daStart , uint32 initSizeOfAllocatedSpace)
{
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return ;
f012f9ce:	90                   	nop
	firstMeta->prev_next_info.le_prev = NULL;
	firstMeta->is_free = 1;
	firstMeta->size = initSizeOfAllocatedSpace;


}
f012f9cf:	c9                   	leave  
f012f9d0:	c3                   	ret    

f012f9d1 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f012f9d1:	55                   	push   %ebp
f012f9d2:	89 e5                	mov    %esp,%ebp
f012f9d4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	//panic("alloc_block_FF is not implemented yet");
	Heap_MetaBlock.___ptr_next=Heap_MetaBlock.lh_first;
f012f9d7:	a1 4c e6 2d f0       	mov    0xf02de64c,%eax
f012f9dc:	a3 54 e6 2d f0       	mov    %eax,0xf02de654
	while(1)
	{
		uint32 avlbl_size =  Heap_MetaBlock.___ptr_next->size;
f012f9e1:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012f9e6:	8b 00                	mov    (%eax),%eax
f012f9e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint8 is_space_free = Heap_MetaBlock.___ptr_next->is_free;
f012f9eb:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012f9f0:	8a 40 04             	mov    0x4(%eax),%al
f012f9f3:	88 45 f3             	mov    %al,-0xd(%ebp)
		if(is_space_free)
f012f9f6:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
f012f9fa:	74 71                	je     f012fa6d <alloc_block_FF+0x9c>
		{
			if(avlbl_size>=size)
f012f9fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9ff:	3b 45 08             	cmp    0x8(%ebp),%eax
f012fa02:	72 5a                	jb     f012fa5e <alloc_block_FF+0x8d>
			{
				 Heap_MetaBlock.___ptr_next->size = size;
f012fa04:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa09:	8b 55 08             	mov    0x8(%ebp),%edx
f012fa0c:	89 10                	mov    %edx,(%eax)
				 struct BlockMetaData* newMeta =  Heap_MetaBlock.___ptr_next + size;
f012fa0e:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa13:	8b 55 08             	mov    0x8(%ebp),%edx
f012fa16:	c1 e2 04             	shl    $0x4,%edx
f012fa19:	01 d0                	add    %edx,%eax
f012fa1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				 newMeta->is_free=1;
f012fa1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fa21:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				 newMeta->size = avlbl_size-size;
f012fa25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa28:	2b 45 08             	sub    0x8(%ebp),%eax
f012fa2b:	89 c2                	mov    %eax,%edx
f012fa2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fa30:	89 10                	mov    %edx,(%eax)
				 newMeta->prev_next_info.le_next= Heap_MetaBlock.___ptr_next->prev_next_info.le_next;
f012fa32:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa37:	8b 50 08             	mov    0x8(%eax),%edx
f012fa3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fa3d:	89 50 08             	mov    %edx,0x8(%eax)
				 Heap_MetaBlock.___ptr_next->prev_next_info.le_next = newMeta;
f012fa40:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa45:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fa48:	89 50 08             	mov    %edx,0x8(%eax)
				 newMeta->prev_next_info.le_prev=  Heap_MetaBlock.___ptr_next;
f012fa4b:	8b 15 54 e6 2d f0    	mov    0xf02de654,%edx
f012fa51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fa54:	89 50 0c             	mov    %edx,0xc(%eax)
				 return  Heap_MetaBlock.___ptr_next;
f012fa57:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa5c:	eb 41                	jmp    f012fa9f <alloc_block_FF+0xce>
			}
			else
			{
				Heap_MetaBlock.___ptr_next++;
f012fa5e:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa63:	83 c0 10             	add    $0x10,%eax
f012fa66:	a3 54 e6 2d f0       	mov    %eax,0xf02de654
f012fa6b:	eb 13                	jmp    f012fa80 <alloc_block_FF+0xaf>
			}
		}
		else if(!is_space_free)
f012fa6d:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
f012fa71:	75 0d                	jne    f012fa80 <alloc_block_FF+0xaf>
		{
			Heap_MetaBlock.___ptr_next++;
f012fa73:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa78:	83 c0 10             	add    $0x10,%eax
f012fa7b:	a3 54 e6 2d f0       	mov    %eax,0xf02de654
		}
		if(Heap_MetaBlock.___ptr_next==NULL)
f012fa80:	a1 54 e6 2d f0       	mov    0xf02de654,%eax
f012fa85:	85 c0                	test   %eax,%eax
f012fa87:	0f 85 54 ff ff ff    	jne    f012f9e1 <alloc_block_FF+0x10>
		{
		  sbrk(5);
f012fa8d:	83 ec 0c             	sub    $0xc,%esp
f012fa90:	6a 05                	push   $0x5
f012fa92:	e8 be 84 fd ff       	call   f0107f55 <sbrk>
f012fa97:	83 c4 10             	add    $0x10,%esp

		}
	}
f012fa9a:	e9 42 ff ff ff       	jmp    f012f9e1 <alloc_block_FF+0x10>

	return NULL;
}
f012fa9f:	c9                   	leave  
f012faa0:	c3                   	ret    

f012faa1 <alloc_block_BF>:
//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f012faa1:	55                   	push   %ebp
f012faa2:	89 e5                	mov    %esp,%ebp
f012faa4:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	panic("alloc_block_BF is not implemented yet");
f012faa7:	83 ec 04             	sub    $0x4,%esp
f012faaa:	68 6c b3 13 f0       	push   $0xf013b36c
f012faaf:	68 9f 00 00 00       	push   $0x9f
f012fab4:	68 92 b3 13 f0       	push   $0xf013b392
f012fab9:	e8 f2 06 fd ff       	call   f01001b0 <_panic>

f012fabe <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f012fabe:	55                   	push   %ebp
f012fabf:	89 e5                	mov    %esp,%ebp
f012fac1:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012fac4:	83 ec 04             	sub    $0x4,%esp
f012fac7:	68 ac b3 13 f0       	push   $0xf013b3ac
f012facc:	68 a8 00 00 00       	push   $0xa8
f012fad1:	68 92 b3 13 f0       	push   $0xf013b392
f012fad6:	e8 d5 06 fd ff       	call   f01001b0 <_panic>

f012fadb <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f012fadb:	55                   	push   %ebp
f012fadc:	89 e5                	mov    %esp,%ebp
f012fade:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012fae1:	83 ec 04             	sub    $0x4,%esp
f012fae4:	68 d4 b3 13 f0       	push   $0xf013b3d4
f012fae9:	68 b1 00 00 00       	push   $0xb1
f012faee:	68 92 b3 13 f0       	push   $0xf013b392
f012faf3:	e8 b8 06 fd ff       	call   f01001b0 <_panic>

f012faf8 <free_block>:

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012faf8:	55                   	push   %ebp
f012faf9:	89 e5                	mov    %esp,%ebp
f012fafb:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()

	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
f012fafe:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb01:	83 e8 10             	sub    $0x10,%eax
f012fb04:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock= currBlock->prev_next_info.le_next;
f012fb07:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb0a:	8b 40 08             	mov    0x8(%eax),%eax
f012fb0d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock =currBlock->prev_next_info.le_prev;
f012fb10:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb13:	8b 40 0c             	mov    0xc(%eax),%eax
f012fb16:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(va==NULL){
f012fb19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fb1d:	0f 84 03 01 00 00    	je     f012fc26 <free_block+0x12e>
		//cpritf("Enter a valid address");
		return;
	}
	else if(is_free_block(va)){
f012fb23:	ff 75 08             	pushl  0x8(%ebp)
f012fb26:	e8 34 fd ff ff       	call   f012f85f <is_free_block>
f012fb2b:	83 c4 04             	add    $0x4,%esp
f012fb2e:	84 c0                	test   %al,%al
f012fb30:	0f 85 f3 00 00 00    	jne    f012fc29 <free_block+0x131>
		//cpritf("block is already free");
		return;
	}
	else if (!is_free_block(va)&&!nextBlock->is_free&&!prevBlock->is_free){
f012fb36:	ff 75 08             	pushl  0x8(%ebp)
f012fb39:	e8 21 fd ff ff       	call   f012f85f <is_free_block>
f012fb3e:	83 c4 04             	add    $0x4,%esp
f012fb41:	84 c0                	test   %al,%al
f012fb43:	75 20                	jne    f012fb65 <free_block+0x6d>
f012fb45:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb48:	8a 40 04             	mov    0x4(%eax),%al
f012fb4b:	84 c0                	test   %al,%al
f012fb4d:	75 16                	jne    f012fb65 <free_block+0x6d>
f012fb4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb52:	8a 40 04             	mov    0x4(%eax),%al
f012fb55:	84 c0                	test   %al,%al
f012fb57:	75 0c                	jne    f012fb65 <free_block+0x6d>
		currBlock->is_free=1;
f012fb59:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb5c:	c6 40 04 01          	movb   $0x1,0x4(%eax)
f012fb60:	e9 c5 00 00 00       	jmp    f012fc2a <free_block+0x132>
	}
	else if(prevBlock->is_free&&!nextBlock->is_free){
f012fb65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb68:	8a 40 04             	mov    0x4(%eax),%al
f012fb6b:	84 c0                	test   %al,%al
f012fb6d:	74 32                	je     f012fba1 <free_block+0xa9>
f012fb6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb72:	8a 40 04             	mov    0x4(%eax),%al
f012fb75:	84 c0                	test   %al,%al
f012fb77:	75 28                	jne    f012fba1 <free_block+0xa9>
		prevBlock->size+=currBlock->size;
f012fb79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb7c:	8b 10                	mov    (%eax),%edx
f012fb7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fb81:	8b 00                	mov    (%eax),%eax
f012fb83:	01 c2                	add    %eax,%edx
f012fb85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb88:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_prev=prevBlock;
f012fb8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fb8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fb90:	89 50 0c             	mov    %edx,0xc(%eax)
		prevBlock->prev_next_info.le_next=nextBlock;
f012fb93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb96:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012fb99:	89 50 08             	mov    %edx,0x8(%eax)
f012fb9c:	e9 89 00 00 00       	jmp    f012fc2a <free_block+0x132>

	}
	else if(!prevBlock->is_free&&nextBlock->is_free){
f012fba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fba4:	8a 40 04             	mov    0x4(%eax),%al
f012fba7:	84 c0                	test   %al,%al
f012fba9:	75 35                	jne    f012fbe0 <free_block+0xe8>
f012fbab:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbae:	8a 40 04             	mov    0x4(%eax),%al
f012fbb1:	84 c0                	test   %al,%al
f012fbb3:	74 2b                	je     f012fbe0 <free_block+0xe8>
		currBlock->size+=nextBlock->size;
f012fbb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fbb8:	8b 10                	mov    (%eax),%edx
f012fbba:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbbd:	8b 00                	mov    (%eax),%eax
f012fbbf:	01 c2                	add    %eax,%edx
f012fbc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fbc4:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_next->prev_next_info.le_prev=currBlock;
f012fbc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbc9:	8b 40 08             	mov    0x8(%eax),%eax
f012fbcc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012fbcf:	89 50 0c             	mov    %edx,0xc(%eax)
		currBlock->prev_next_info.le_next=nextBlock->prev_next_info.le_next;
f012fbd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbd5:	8b 50 08             	mov    0x8(%eax),%edx
f012fbd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fbdb:	89 50 08             	mov    %edx,0x8(%eax)
f012fbde:	eb 4a                	jmp    f012fc2a <free_block+0x132>
	}
	else if(prevBlock->is_free&&nextBlock->is_free){
f012fbe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbe3:	8a 40 04             	mov    0x4(%eax),%al
f012fbe6:	84 c0                	test   %al,%al
f012fbe8:	74 40                	je     f012fc2a <free_block+0x132>
f012fbea:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbed:	8a 40 04             	mov    0x4(%eax),%al
f012fbf0:	84 c0                	test   %al,%al
f012fbf2:	74 36                	je     f012fc2a <free_block+0x132>
		prevBlock->size+=nextBlock->size+currBlock->size;
f012fbf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fbf7:	8b 10                	mov    (%eax),%edx
f012fbf9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbfc:	8b 08                	mov    (%eax),%ecx
f012fbfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fc01:	8b 00                	mov    (%eax),%eax
f012fc03:	01 c8                	add    %ecx,%eax
f012fc05:	01 c2                	add    %eax,%edx
f012fc07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc0a:	89 10                	mov    %edx,(%eax)
		nextBlock->prev_next_info.le_next->prev_next_info.le_prev=prevBlock;
f012fc0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fc0f:	8b 40 08             	mov    0x8(%eax),%eax
f012fc12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc15:	89 50 0c             	mov    %edx,0xc(%eax)
		prevBlock->prev_next_info.le_next=nextBlock->prev_next_info.le_next;
f012fc18:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fc1b:	8b 50 08             	mov    0x8(%eax),%edx
f012fc1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc21:	89 50 08             	mov    %edx,0x8(%eax)
f012fc24:	eb 04                	jmp    f012fc2a <free_block+0x132>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *)va - 1) ;
	struct BlockMetaData *nextBlock= currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock =currBlock->prev_next_info.le_prev;
	if(va==NULL){
		//cpritf("Enter a valid address");
		return;
f012fc26:	90                   	nop
f012fc27:	eb 01                	jmp    f012fc2a <free_block+0x132>
	}
	else if(is_free_block(va)){
		//cpritf("block is already free");
		return;
f012fc29:	90                   	nop
	//struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *)va - 1) ;




}
f012fc2a:	c9                   	leave  
f012fc2b:	c3                   	ret    

f012fc2c <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012fc2c:	55                   	push   %ebp
f012fc2d:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");
	return NULL;
f012fc2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fc34:	5d                   	pop    %ebp
f012fc35:	c3                   	ret    
f012fc36:	66 90                	xchg   %ax,%ax

f012fc38 <__udivdi3>:
f012fc38:	55                   	push   %ebp
f012fc39:	57                   	push   %edi
f012fc3a:	56                   	push   %esi
f012fc3b:	53                   	push   %ebx
f012fc3c:	83 ec 1c             	sub    $0x1c,%esp
f012fc3f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f012fc43:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012fc47:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012fc4b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012fc4f:	89 ca                	mov    %ecx,%edx
f012fc51:	89 f8                	mov    %edi,%eax
f012fc53:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012fc57:	85 f6                	test   %esi,%esi
f012fc59:	75 2d                	jne    f012fc88 <__udivdi3+0x50>
f012fc5b:	39 cf                	cmp    %ecx,%edi
f012fc5d:	77 65                	ja     f012fcc4 <__udivdi3+0x8c>
f012fc5f:	89 fd                	mov    %edi,%ebp
f012fc61:	85 ff                	test   %edi,%edi
f012fc63:	75 0b                	jne    f012fc70 <__udivdi3+0x38>
f012fc65:	b8 01 00 00 00       	mov    $0x1,%eax
f012fc6a:	31 d2                	xor    %edx,%edx
f012fc6c:	f7 f7                	div    %edi
f012fc6e:	89 c5                	mov    %eax,%ebp
f012fc70:	31 d2                	xor    %edx,%edx
f012fc72:	89 c8                	mov    %ecx,%eax
f012fc74:	f7 f5                	div    %ebp
f012fc76:	89 c1                	mov    %eax,%ecx
f012fc78:	89 d8                	mov    %ebx,%eax
f012fc7a:	f7 f5                	div    %ebp
f012fc7c:	89 cf                	mov    %ecx,%edi
f012fc7e:	89 fa                	mov    %edi,%edx
f012fc80:	83 c4 1c             	add    $0x1c,%esp
f012fc83:	5b                   	pop    %ebx
f012fc84:	5e                   	pop    %esi
f012fc85:	5f                   	pop    %edi
f012fc86:	5d                   	pop    %ebp
f012fc87:	c3                   	ret    
f012fc88:	39 ce                	cmp    %ecx,%esi
f012fc8a:	77 28                	ja     f012fcb4 <__udivdi3+0x7c>
f012fc8c:	0f bd fe             	bsr    %esi,%edi
f012fc8f:	83 f7 1f             	xor    $0x1f,%edi
f012fc92:	75 40                	jne    f012fcd4 <__udivdi3+0x9c>
f012fc94:	39 ce                	cmp    %ecx,%esi
f012fc96:	72 0a                	jb     f012fca2 <__udivdi3+0x6a>
f012fc98:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012fc9c:	0f 87 9e 00 00 00    	ja     f012fd40 <__udivdi3+0x108>
f012fca2:	b8 01 00 00 00       	mov    $0x1,%eax
f012fca7:	89 fa                	mov    %edi,%edx
f012fca9:	83 c4 1c             	add    $0x1c,%esp
f012fcac:	5b                   	pop    %ebx
f012fcad:	5e                   	pop    %esi
f012fcae:	5f                   	pop    %edi
f012fcaf:	5d                   	pop    %ebp
f012fcb0:	c3                   	ret    
f012fcb1:	8d 76 00             	lea    0x0(%esi),%esi
f012fcb4:	31 ff                	xor    %edi,%edi
f012fcb6:	31 c0                	xor    %eax,%eax
f012fcb8:	89 fa                	mov    %edi,%edx
f012fcba:	83 c4 1c             	add    $0x1c,%esp
f012fcbd:	5b                   	pop    %ebx
f012fcbe:	5e                   	pop    %esi
f012fcbf:	5f                   	pop    %edi
f012fcc0:	5d                   	pop    %ebp
f012fcc1:	c3                   	ret    
f012fcc2:	66 90                	xchg   %ax,%ax
f012fcc4:	89 d8                	mov    %ebx,%eax
f012fcc6:	f7 f7                	div    %edi
f012fcc8:	31 ff                	xor    %edi,%edi
f012fcca:	89 fa                	mov    %edi,%edx
f012fccc:	83 c4 1c             	add    $0x1c,%esp
f012fccf:	5b                   	pop    %ebx
f012fcd0:	5e                   	pop    %esi
f012fcd1:	5f                   	pop    %edi
f012fcd2:	5d                   	pop    %ebp
f012fcd3:	c3                   	ret    
f012fcd4:	bd 20 00 00 00       	mov    $0x20,%ebp
f012fcd9:	89 eb                	mov    %ebp,%ebx
f012fcdb:	29 fb                	sub    %edi,%ebx
f012fcdd:	89 f9                	mov    %edi,%ecx
f012fcdf:	d3 e6                	shl    %cl,%esi
f012fce1:	89 c5                	mov    %eax,%ebp
f012fce3:	88 d9                	mov    %bl,%cl
f012fce5:	d3 ed                	shr    %cl,%ebp
f012fce7:	89 e9                	mov    %ebp,%ecx
f012fce9:	09 f1                	or     %esi,%ecx
f012fceb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f012fcef:	89 f9                	mov    %edi,%ecx
f012fcf1:	d3 e0                	shl    %cl,%eax
f012fcf3:	89 c5                	mov    %eax,%ebp
f012fcf5:	89 d6                	mov    %edx,%esi
f012fcf7:	88 d9                	mov    %bl,%cl
f012fcf9:	d3 ee                	shr    %cl,%esi
f012fcfb:	89 f9                	mov    %edi,%ecx
f012fcfd:	d3 e2                	shl    %cl,%edx
f012fcff:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fd03:	88 d9                	mov    %bl,%cl
f012fd05:	d3 e8                	shr    %cl,%eax
f012fd07:	09 c2                	or     %eax,%edx
f012fd09:	89 d0                	mov    %edx,%eax
f012fd0b:	89 f2                	mov    %esi,%edx
f012fd0d:	f7 74 24 0c          	divl   0xc(%esp)
f012fd11:	89 d6                	mov    %edx,%esi
f012fd13:	89 c3                	mov    %eax,%ebx
f012fd15:	f7 e5                	mul    %ebp
f012fd17:	39 d6                	cmp    %edx,%esi
f012fd19:	72 19                	jb     f012fd34 <__udivdi3+0xfc>
f012fd1b:	74 0b                	je     f012fd28 <__udivdi3+0xf0>
f012fd1d:	89 d8                	mov    %ebx,%eax
f012fd1f:	31 ff                	xor    %edi,%edi
f012fd21:	e9 58 ff ff ff       	jmp    f012fc7e <__udivdi3+0x46>
f012fd26:	66 90                	xchg   %ax,%ax
f012fd28:	8b 54 24 08          	mov    0x8(%esp),%edx
f012fd2c:	89 f9                	mov    %edi,%ecx
f012fd2e:	d3 e2                	shl    %cl,%edx
f012fd30:	39 c2                	cmp    %eax,%edx
f012fd32:	73 e9                	jae    f012fd1d <__udivdi3+0xe5>
f012fd34:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012fd37:	31 ff                	xor    %edi,%edi
f012fd39:	e9 40 ff ff ff       	jmp    f012fc7e <__udivdi3+0x46>
f012fd3e:	66 90                	xchg   %ax,%ax
f012fd40:	31 c0                	xor    %eax,%eax
f012fd42:	e9 37 ff ff ff       	jmp    f012fc7e <__udivdi3+0x46>
f012fd47:	90                   	nop

f012fd48 <__umoddi3>:
f012fd48:	55                   	push   %ebp
f012fd49:	57                   	push   %edi
f012fd4a:	56                   	push   %esi
f012fd4b:	53                   	push   %ebx
f012fd4c:	83 ec 1c             	sub    $0x1c,%esp
f012fd4f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f012fd53:	8b 74 24 34          	mov    0x34(%esp),%esi
f012fd57:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012fd5b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012fd5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f012fd63:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012fd67:	89 f3                	mov    %esi,%ebx
f012fd69:	89 fa                	mov    %edi,%edx
f012fd6b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012fd6f:	89 34 24             	mov    %esi,(%esp)
f012fd72:	85 c0                	test   %eax,%eax
f012fd74:	75 1a                	jne    f012fd90 <__umoddi3+0x48>
f012fd76:	39 f7                	cmp    %esi,%edi
f012fd78:	0f 86 a2 00 00 00    	jbe    f012fe20 <__umoddi3+0xd8>
f012fd7e:	89 c8                	mov    %ecx,%eax
f012fd80:	89 f2                	mov    %esi,%edx
f012fd82:	f7 f7                	div    %edi
f012fd84:	89 d0                	mov    %edx,%eax
f012fd86:	31 d2                	xor    %edx,%edx
f012fd88:	83 c4 1c             	add    $0x1c,%esp
f012fd8b:	5b                   	pop    %ebx
f012fd8c:	5e                   	pop    %esi
f012fd8d:	5f                   	pop    %edi
f012fd8e:	5d                   	pop    %ebp
f012fd8f:	c3                   	ret    
f012fd90:	39 f0                	cmp    %esi,%eax
f012fd92:	0f 87 ac 00 00 00    	ja     f012fe44 <__umoddi3+0xfc>
f012fd98:	0f bd e8             	bsr    %eax,%ebp
f012fd9b:	83 f5 1f             	xor    $0x1f,%ebp
f012fd9e:	0f 84 ac 00 00 00    	je     f012fe50 <__umoddi3+0x108>
f012fda4:	bf 20 00 00 00       	mov    $0x20,%edi
f012fda9:	29 ef                	sub    %ebp,%edi
f012fdab:	89 fe                	mov    %edi,%esi
f012fdad:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f012fdb1:	89 e9                	mov    %ebp,%ecx
f012fdb3:	d3 e0                	shl    %cl,%eax
f012fdb5:	89 d7                	mov    %edx,%edi
f012fdb7:	89 f1                	mov    %esi,%ecx
f012fdb9:	d3 ef                	shr    %cl,%edi
f012fdbb:	09 c7                	or     %eax,%edi
f012fdbd:	89 e9                	mov    %ebp,%ecx
f012fdbf:	d3 e2                	shl    %cl,%edx
f012fdc1:	89 14 24             	mov    %edx,(%esp)
f012fdc4:	89 d8                	mov    %ebx,%eax
f012fdc6:	d3 e0                	shl    %cl,%eax
f012fdc8:	89 c2                	mov    %eax,%edx
f012fdca:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fdce:	d3 e0                	shl    %cl,%eax
f012fdd0:	89 44 24 04          	mov    %eax,0x4(%esp)
f012fdd4:	8b 44 24 08          	mov    0x8(%esp),%eax
f012fdd8:	89 f1                	mov    %esi,%ecx
f012fdda:	d3 e8                	shr    %cl,%eax
f012fddc:	09 d0                	or     %edx,%eax
f012fdde:	d3 eb                	shr    %cl,%ebx
f012fde0:	89 da                	mov    %ebx,%edx
f012fde2:	f7 f7                	div    %edi
f012fde4:	89 d3                	mov    %edx,%ebx
f012fde6:	f7 24 24             	mull   (%esp)
f012fde9:	89 c6                	mov    %eax,%esi
f012fdeb:	89 d1                	mov    %edx,%ecx
f012fded:	39 d3                	cmp    %edx,%ebx
f012fdef:	0f 82 87 00 00 00    	jb     f012fe7c <__umoddi3+0x134>
f012fdf5:	0f 84 91 00 00 00    	je     f012fe8c <__umoddi3+0x144>
f012fdfb:	8b 54 24 04          	mov    0x4(%esp),%edx
f012fdff:	29 f2                	sub    %esi,%edx
f012fe01:	19 cb                	sbb    %ecx,%ebx
f012fe03:	89 d8                	mov    %ebx,%eax
f012fe05:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012fe09:	d3 e0                	shl    %cl,%eax
f012fe0b:	89 e9                	mov    %ebp,%ecx
f012fe0d:	d3 ea                	shr    %cl,%edx
f012fe0f:	09 d0                	or     %edx,%eax
f012fe11:	89 e9                	mov    %ebp,%ecx
f012fe13:	d3 eb                	shr    %cl,%ebx
f012fe15:	89 da                	mov    %ebx,%edx
f012fe17:	83 c4 1c             	add    $0x1c,%esp
f012fe1a:	5b                   	pop    %ebx
f012fe1b:	5e                   	pop    %esi
f012fe1c:	5f                   	pop    %edi
f012fe1d:	5d                   	pop    %ebp
f012fe1e:	c3                   	ret    
f012fe1f:	90                   	nop
f012fe20:	89 fd                	mov    %edi,%ebp
f012fe22:	85 ff                	test   %edi,%edi
f012fe24:	75 0b                	jne    f012fe31 <__umoddi3+0xe9>
f012fe26:	b8 01 00 00 00       	mov    $0x1,%eax
f012fe2b:	31 d2                	xor    %edx,%edx
f012fe2d:	f7 f7                	div    %edi
f012fe2f:	89 c5                	mov    %eax,%ebp
f012fe31:	89 f0                	mov    %esi,%eax
f012fe33:	31 d2                	xor    %edx,%edx
f012fe35:	f7 f5                	div    %ebp
f012fe37:	89 c8                	mov    %ecx,%eax
f012fe39:	f7 f5                	div    %ebp
f012fe3b:	89 d0                	mov    %edx,%eax
f012fe3d:	e9 44 ff ff ff       	jmp    f012fd86 <__umoddi3+0x3e>
f012fe42:	66 90                	xchg   %ax,%ax
f012fe44:	89 c8                	mov    %ecx,%eax
f012fe46:	89 f2                	mov    %esi,%edx
f012fe48:	83 c4 1c             	add    $0x1c,%esp
f012fe4b:	5b                   	pop    %ebx
f012fe4c:	5e                   	pop    %esi
f012fe4d:	5f                   	pop    %edi
f012fe4e:	5d                   	pop    %ebp
f012fe4f:	c3                   	ret    
f012fe50:	3b 04 24             	cmp    (%esp),%eax
f012fe53:	72 06                	jb     f012fe5b <__umoddi3+0x113>
f012fe55:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012fe59:	77 0f                	ja     f012fe6a <__umoddi3+0x122>
f012fe5b:	89 f2                	mov    %esi,%edx
f012fe5d:	29 f9                	sub    %edi,%ecx
f012fe5f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f012fe63:	89 14 24             	mov    %edx,(%esp)
f012fe66:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012fe6a:	8b 44 24 04          	mov    0x4(%esp),%eax
f012fe6e:	8b 14 24             	mov    (%esp),%edx
f012fe71:	83 c4 1c             	add    $0x1c,%esp
f012fe74:	5b                   	pop    %ebx
f012fe75:	5e                   	pop    %esi
f012fe76:	5f                   	pop    %edi
f012fe77:	5d                   	pop    %ebp
f012fe78:	c3                   	ret    
f012fe79:	8d 76 00             	lea    0x0(%esi),%esi
f012fe7c:	2b 04 24             	sub    (%esp),%eax
f012fe7f:	19 fa                	sbb    %edi,%edx
f012fe81:	89 d1                	mov    %edx,%ecx
f012fe83:	89 c6                	mov    %eax,%esi
f012fe85:	e9 71 ff ff ff       	jmp    f012fdfb <__umoddi3+0xb3>
f012fe8a:	66 90                	xchg   %ax,%ax
f012fe8c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f012fe90:	72 ea                	jb     f012fe7c <__umoddi3+0x134>
f012fe92:	89 d9                	mov    %ebx,%ecx
f012fe94:	e9 62 ff ff ff       	jmp    f012fdfb <__umoddi3+0xb3>
